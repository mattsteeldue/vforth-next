# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.8 NextZXOS version
   7  0000              //  Basic Loader version
   8  0000              //  build 2025719
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2025 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2025
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     0
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -2 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with single incremental compilation
  87  0000 ~            ORIGIN          equ     38915 - $80       // $9aba: HERE when first compilation begins.
  88  0000 ~            Heap_Ptr        defl    $1BAB - $72       // HP before first compilation minus HP after second compilation
  89  0000 ~            Heap_offset     defl    0                 // given by compilation
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if ( -1 == DEBUGGING )
  95  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  96  0000 ~            ORIGIN          equ     $6366   -$80                   // for binary comparison with single compilation
  97  0000 ~            Heap_Ptr        defl    $0002              // HP before compilation
  98  0000 ~            Heap_offset     defl    $00                // given by compilation
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  0 == DEBUGGING )
 104  0000              ORIGIN          equ     $6366                   // binary and Tape
 105  0000              // ORIGIN          equ     $9A93                // binary and Tape
 106  0000              Heap_Ptr        defl    $0002
 107  0000              Heap_offset     defl     0
 108  0000
 109  0000                              endif
 110  0000              //  ______________________________________________________________________
 111  0000
 112  0000                              if (  1 == DEBUGGING )
 113  0000 ~            ORIGIN          equ     $8080                   // for DeZog
 114  0000 ~            Heap_Ptr        defl    $0002
 115  0000 ~            Heap_offset     defl     0
 116  0000 ~
 117  0000                              endif
 118  0000              //  ______________________________________________________________________
 119  0000
 120  0000                              DEVICE  ZXSPECTRUMNEXT
 121  0000
 122  0000                              ORG     ORIGIN
 123  6366
 124  6366                              if ( DEBUGGING < 0)
 125  6366 ~                            ds 128                            // for binary comparison
 126  6366                              endif
 127  6366
 128  6366              //  ______________________________________________________________________
 129  6366              //
 130  6366              //  Naming convention for Label vs Forth correspondance
 131  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 132  6366              //    - Leading "0" is converted into "Z_"
 133  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 134  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 135  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 136  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 137  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 138  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 139  6366              //    - Equal sign "=" is converted in EQUAL
 140  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 141  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 142  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 143  6366              //    - Exclamation mark "!" is converted in STORE
 144  6366              //    - At-Sign "@" is converted in FETCH
 145  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 146  6366
 147  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366              RAMTOP          equ     $5CB2
  22+ 6366              TSTACK          equ     $5C00                   // TSTACK
  23+ 6366              // FSTACK          ecu     $4000 - 8
  24+ 6366              //  ______________________________________________________________________
  25+ 6366              //
  26+ 6366              // Flag constants
  27+ 6366              TRUE_FLAG       equ     $FFFF
  28+ 6366              FALSE_FLAG      equ     $0000
  29+ 6366
  30+ 6366              //  ______________________________________________________________________
  31+ 6366              //
  32+ 6366              // Ascii char constants
  33+ 6366              NUL_CHAR        equ     $00
  34+ 6366              COMMA_CHAR      equ     $06
  35+ 6366              BACKSPACE_CHAR  equ     $08
  36+ 6366              CR_CHAR         equ     $0D
  37+ 6366              BLANK_CHAR      equ     $20
  38+ 6366              QUOTE_CHAR      equ     "'"
  39+ 6366              DQUOTE_CHAR     equ     '"'
  40+ 6366              UNDERSCORE_CHAR equ     $5F
  41+ 6366              SOLIDBLOCK_CHAR equ     $8F
  42+ 6366              HALFBLOCK_CHAR  equ     $8C
  43+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 6366
  46+ 6366
  47+ 6366              //  ______________________________________________________________________
  48+ 6366              //
  49+ 6366
  50+ 6366                              // emulate something like:  ld hl,rp
  51+ 6366              ldhlrp          macro
  52+ 6366 ~                            ld      hl,(RP_Pointer)
  53+ 6366                              endm
  54+ 6366
  55+ 6366                              // emulate something like:  ld rp,hl
  56+ 6366              ldrphl          macro
  57+ 6366 ~                            ld      (RP_Pointer),hl
  58+ 6366                              endm
  59+ 6366
  60+ 6366              //  ______________________________________________________________________
  61+ 6366              //
  62+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 6366              next            macro
  64+ 6366 ~                            jp      (ix)
  65+ 6366                              endm
  66+ 6366
  67+ 6366              psh1            macro
  68+ 6366 ~                            push    hl
  69+ 6366 ~                            jp      (ix)
  70+ 6366                              endm
  71+ 6366
  72+ 6366              psh2            macro
  73+ 6366 ~                            push    de
  74+ 6366 ~                            push    hl
  75+ 6366 ~                            jp      (ix)
  76+ 6366                              endm
  77+ 6366
  78+ 6366              //  ______________________________________________________________________
  79+ 6366              //
  80+ 6366              // Bit constants in length-byte
  81+ 6366
  82+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  83+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 6366              END_BIT         equ     %10000000               // $80
  85+ 6366
  86+ 6366
  87+ 6366              //  ______________________________________________________________________
  88+ 6366              //
  89+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 6366              //  pointers
  91+ 6366              temp_NFA        defl    0
  92+ 6366              last_NFA        defl    0
  93+ 6366              len_NFA         defl    0
  94+ 6366
  95+ 6366              Dict_Ptr        defl    0
  96+ 6366              // Heap_Ptr        defl    $0002
  97+ 6366              Prev_Ptr        defl    0
  98+ 6366              mirror_Ptr      defl    0
  99+ 6366
 100+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 6366
 104+ 6366
 105+ 6366              Behave          macro   xp
 106+ 6366 ~            temp_PTR        defl    $                   // save this org
 107+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 6366 ~                            dw      xp
 109+ 6366 ~                            org     temp_PTR
 110+ 6366                              endm
 111+ 6366
 112+ 6366              //  ______________________________________________________________________
 113+ 6366              //
 114+ 6366              //  Create a new "low-level" definition
 115+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 6366              //  This macro acts much like the standard Forth definition CREATE
 122+ 6366
 123+ 6366              New_Def         macro   label, namec, runcode, bits
 124+ 6366 ~
 125+ 6366 ~            Dict_Ptr        defl    $
 126+ 6366 ~
 127+ 6366 ~            //              ______________________________________________________________________
 128+ 6366 ~            //              Heap part
 129+ 6366 ~
 130+ 6366 ~
 131+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 6366 ~
 133+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6366 ~            Latest_Definition defl  Heap_Ptr
 135+ 6366 ~
 136+ 6366 ~                            // dummy db directives used to calculate length of namec
 137+ 6366 ~                            db      namec
 138+ 6366 ~            len_NFA         defl    $ - temp_NFA
 139+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 6366 ~
 141+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 6366 ~
 146+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 6366 ~
 149+ 6366 ~            mirror_Ptr      defl    $
 150+ 6366 ~
 151+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 152+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 6366 ~
 154+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 6366 ~
 156+ 6366 ~            //              ______________________________________________________________________
 157+ 6366 ~            //              Dictionary part
 158+ 6366 ~
 159+ 6366 ~                            org     Dict_Ptr
 160+ 6366 ~
 161+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6366 ~
 163+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 6366 ~
 166+ 6366 ~
 167+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6366 ~
 170+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6366                              endm
 172+ 6366
 173+ 6366              //  ______________________________________________________________________
 174+ 6366              //
 175+ 6366              // Create a "constant"
 176+ 6366              // The constant value is compiled in first PFA cell
 177+ 6366              Constant_Def    macro   label, namec, constant_value
 178+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 6366 ~                            dw      constant_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "variable"
 185+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 6366              // this allow creation of "variables" which content is  of any length
 187+ 6366              Variable_Def    macro   label, namec, initial_value
 188+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 6366 ~                            dw      initial_value
 190+ 6366                              endm
 191+ 6366
 192+ 6366              //  ______________________________________________________________________
 193+ 6366              //
 194+ 6366              // Create a "user" variable
 195+ 6366              // It uses a single byte as offset to calculate the address of the variable
 196+ 6366              User_Def        macro   label, namec, offset_value
 197+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 6366 ~                            db      offset_value
 199+ 6366                              endm
 200+ 6366
 201+ 6366              //  ______________________________________________________________________
 202+ 6366              //
 203+ 6366              // Create a "colon-definition"
 204+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 206+ 6366              Colon_Def       macro   label, namec, bits
 207+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 6366                              endm
 209+ 6366
 210+ 6366              //  ______________________________________________________________________
 211+ 6366              //
 212+ 6366              // Create a "heap-string"
 213+ 6366              Start_Heap      macro
 214+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 215+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 6366 ~
 217+ 6366                              endm
 218+ 6366
 219+ 6366              End_Heap        macro
 220+ 6366 ~            Heap_Ptr        defl    $ - $E000
 221+ 6366 ~                            org     temp_ORG
 222+ 6366 ~
 223+ 6366                              endm
 224+ 6366
 225+ 6366
 226+ 6366              //  ______________________________________________________________________
 227+ 6366              //
 228+ 6366
 229+ 6366
 230+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 231+ 6366              BUFFERS         equ     6                   // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 232+ 6366              FIRST_system:   equ     LIMIT_system - 516*BUFFERS // Address of first BUFFER
 233+ 6366              USER_system:    equ     FIRST_system - 80   // User variables zone.
 234+ 6366              R0_system:      equ     USER_system         // Address of top of Return Stack. This is S0 + $00A0
 235+ 6366              TIB_system      equ     R0_system - 160     // TIB grows upwards, Return-Stack downward.
 236+ 6366              S0_system:      equ     TIB_system          // Address of top of Calc Stack
 237+ 6366
 238+ 6366
 239+ 6366              // S0_system:      equ     $D0E8               // Address of top of Calc Stack
 240+ 6366              // TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 241+ 6366              // R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 242+ 6366              // USER_system:    equ     $D188               // User variables zone.
 243+ 6366              // FIRST_system:   equ     $D1E4               // Address of first BUFFER
 244+ 6366              // LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 245+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
 148  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 6F 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 6F 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 1A 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 F8 D2        S0_origin:      dw      S0_system
  32+ 637A 98 D3        R0_origin:      dw      R0_system
  33+ 637C F8 D2        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 9C 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 9C 81        DP_origin       dw      Fence_Word
  38+ 6386 84 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E8 D3                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 20 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 98 D3        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6F                           db      111
  66+ E003 20 76 2D 46                  db      " v-Forth 1.8 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 38
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2025-07-19 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 35 2D 30 37
  67+ E044 2D 31 39 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2025 Matteo Vitturi ", $0D            // 27
  69+ E05B 30 2D 32 30
  69+ E05F 32 35 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20 0D
  70+ E072                              End_Heap
  70+ E072             >Heap_Ptr        defl    $ - $E000
  70+ E072             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E072             >
 124+ E072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E072             >Latest_Definition defl  Heap_Ptr
 124+ E072             >
 124+ E072             >                // dummy db directives used to calculate length of namec
 124+ E072 4C 49 54    >                db      "LIT"
 124+ E075             >len_NFA         defl    $ - temp_NFA
 124+ E075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E072             >
 124+ E072 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E073 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E076             >                org     $-1                 // alter last byte of Name just above to set
 124+ E075 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E076             >
 124+ E076 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E078             >Prev_Ptr        defl    Heap_Ptr
 124+ E078             >
 124+ E078             >mirror_Ptr      defl    $
 124+ E078             >
 124+ E078 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07A             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07A             >
 124+ E07A             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07A             >
 124+ E07A             >//              ______________________________________________________________________
 124+ E07A             >//              Dictionary part
 124+ E07A             >
 124+ E07A             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 78 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07A             >
 140+ E07A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07A             >Latest_Definition defl  Heap_Ptr
 140+ E07A             >
 140+ E07A             >                // dummy db directives used to calculate length of namec
 140+ E07A 45 58 45 43 >                db      "EXECUTE"
 140+ E07E 55 54 45    >
 140+ E081             >len_NFA         defl    $ - temp_NFA
 140+ E081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07A             >
 140+ E07A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07B 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07F 55 54 45    >
 140+ E082             >                org     $-1                 // alter last byte of Name just above to set
 140+ E081 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E082             >
 140+ E082 72 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E084             >Prev_Ptr        defl    Heap_Ptr
 140+ E084             >
 140+ E084             >mirror_Ptr      defl    $
 140+ E084             >
 140+ E084 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E086             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E086             >
 140+ E086             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E086             >
 140+ E086             >//              ______________________________________________________________________
 140+ E086             >//              Dictionary part
 140+ E086             >
 140+ E086             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 84 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E086             >
 160+ E086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E086             >Latest_Definition defl  Heap_Ptr
 160+ E086             >
 160+ E086             >                // dummy db directives used to calculate length of namec
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08A 4F 50 29    >
 160+ E08D             >len_NFA         defl    $ - temp_NFA
 160+ E08D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E086             >
 160+ E086 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E087 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08B 4F 50 29    >
 160+ E08E             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08D A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08E             >
 160+ E08E 7A 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E090             >Prev_Ptr        defl    Heap_Ptr
 160+ E090             >
 160+ E090             >mirror_Ptr      defl    $
 160+ E090             >
 160+ E090 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E092             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E092             >
 160+ E092             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E092             >
 160+ E092             >//              ______________________________________________________________________
 160+ E092             >//              Dictionary part
 160+ E092             >
 160+ E092             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 90 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 D5                           push    de
 164+ 63B2 D9                           exx
 165+ 63B3 E1                           pop     hl                  // HL is RP
 166+ 63B4 D1                           pop     de                  // DE get increment
 167+ 63B5 42                           ld      b, d                // bc is increment also
 168+ 63B6 4B                           ld      c, e
 169+ 63B7
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 0C                        jr      c, Loop_Endif
 196+ 63D1 D9                               exx                     // restore IP and RP
 197+ 63D2              Branch_Ptr:
 198+ 63D2 0A                               ld      a, (bc)
 199+ 63D3 6F                               ld      l, a
 200+ 63D4 03                               inc     bc
 201+ 63D5 0A                               ld      a, (bc)
 202+ 63D6 67                               ld      h, a
 203+ 63D7 0B                               dec     bc
 204+ 63D8 09                               add     hl, bc
 205+ 63D9 4D                               ld      c, l
 206+ 63DA 44                               ld      b, h
 207+ 63DB                                  next
 207+ 63DB DD E9       >                jp      (ix)
 208+ 63DD              Loop_Endif:
 209+ 63DD 13                           inc     de                  // keep    RP+4 (exit from loop)
 210+ 63DE D5                           push    de
 211+ 63DF D9                           exx
 212+ 63E0 D1                           pop     de
 213+ 63E1              End_Loop_Ptr:
 214+ 63E1 03                           inc     bc                  // skip branch-style offset
 215+ 63E2 03                           inc     bc
 216+ 63E3                              next
 216+ 63E3 DD E9       >                jp      (ix)
 217+ 63E5
 218+ 63E5              //  ______________________________________________________________________
 219+ 63E5              //
 220+ 63E5              // (loop)         --
 221+ 63E5              // same as (LOOP) but index is incremented by 1
 222+ 63E5              // compiled by LOOP.
 223+ 63E5                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 223+ 63E5             >
 223+ 63E5             >Dict_Ptr        defl    $
 223+ 63E5             >
 223+ 63E5             >//              ______________________________________________________________________
 223+ 63E5             >//              Heap part
 223+ 63E5             >
 223+ 63E5             >
 223+ 63E5             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E092             >
 223+ E092             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E092             >Latest_Definition defl  Heap_Ptr
 223+ E092             >
 223+ E092             >                // dummy db directives used to calculate length of namec
 223+ E092 28 4C 4F 4F >                db      "(LOOP)"
 223+ E096 50 29       >
 223+ E098             >len_NFA         defl    $ - temp_NFA
 223+ E098             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E092             >
 223+ E092 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E093 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 223+ E097 50 29       >
 223+ E099             >                org     $-1                 // alter last byte of Name just above to set
 223+ E098 A9          >                db      {b $} | END_BIT     // msb as name end
 223+ E099             >
 223+ E099 86 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E09B             >Prev_Ptr        defl    Heap_Ptr
 223+ E09B             >
 223+ E09B             >mirror_Ptr      defl    $
 223+ E09B             >
 223+ E09B E7 63       >                dw      Dict_Ptr + 2        // xt
 223+ E09D             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E09D             >
 223+ E09D             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E09D             >
 223+ E09D             >//              ______________________________________________________________________
 223+ E09D             >//              Dictionary part
 223+ E09D             >
 223+ E09D             >                org     Dict_Ptr
 223+ 63E5             >
 223+ 63E5 9B 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 63E7             >
 223+ 63E7             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 63E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 63E7 ~           >
 223+ 63E7 ~           >
 223+ 63E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 63E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 63E7             >
 223+ 63E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 63E7 ED 8A 00 01                  push    1
 225+ 63EB 18 C4                        jr      Loop_Ptr
 226+ 63ED
 227+ 63ED              //  ______________________________________________________________________
 228+ 63ED              //
 229+ 63ED              // branch       --
 230+ 63ED              // unconditional branch in colon definition using the following cell as an offset from current IP value
 231+ 63ED              // compiled by ELSE, AGAIN and some other immediate words
 232+ 63ED
 233+ 63ED                              New_Def BRANCH, "BRANCH", is_code, is_normal
 233+ 63ED             >
 233+ 63ED             >Dict_Ptr        defl    $
 233+ 63ED             >
 233+ 63ED             >//              ______________________________________________________________________
 233+ 63ED             >//              Heap part
 233+ 63ED             >
 233+ 63ED             >
 233+ 63ED             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E09D             >
 233+ E09D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E09D             >Latest_Definition defl  Heap_Ptr
 233+ E09D             >
 233+ E09D             >                // dummy db directives used to calculate length of namec
 233+ E09D 42 52 41 4E >                db      "BRANCH"
 233+ E0A1 43 48       >
 233+ E0A3             >len_NFA         defl    $ - temp_NFA
 233+ E0A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E09D             >
 233+ E09D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E09E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 233+ E0A2 43 48       >
 233+ E0A4             >                org     $-1                 // alter last byte of Name just above to set
 233+ E0A3 C8          >                db      {b $} | END_BIT     // msb as name end
 233+ E0A4             >
 233+ E0A4 92 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E0A6             >Prev_Ptr        defl    Heap_Ptr
 233+ E0A6             >
 233+ E0A6             >mirror_Ptr      defl    $
 233+ E0A6             >
 233+ E0A6 EF 63       >                dw      Dict_Ptr + 2        // xt
 233+ E0A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E0A8             >
 233+ E0A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E0A8             >
 233+ E0A8             >//              ______________________________________________________________________
 233+ E0A8             >//              Dictionary part
 233+ E0A8             >
 233+ E0A8             >                org     Dict_Ptr
 233+ 63ED             >
 233+ 63ED A6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 63EF             >
 233+ 63EF             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 63EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 63EF ~           >
 233+ 63EF ~           >
 233+ 63EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 63EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 63EF             >
 233+ 63EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 63EF 18 E1                        jr Branch_Ptr
 235+ 63F1
 236+ 63F1
 237+ 63F1              //  ______________________________________________________________________
 238+ 63F1              //
 239+ 63F1              // 0branch      f --
 240+ 63F1              // conditional branch if the top-of-stack is ZERO or FALSE.
 241+ 63F1              // compiled by IF, UNTIL and some other immediate words
 242+ 63F1
 243+ 63F1                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 243+ 63F1             >
 243+ 63F1             >Dict_Ptr        defl    $
 243+ 63F1             >
 243+ 63F1             >//              ______________________________________________________________________
 243+ 63F1             >//              Heap part
 243+ 63F1             >
 243+ 63F1             >
 243+ 63F1             >                org     (Heap_Ptr & $1FFF) + $E000
 243+ E0A8             >
 243+ E0A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ E0A8             >Latest_Definition defl  Heap_Ptr
 243+ E0A8             >
 243+ E0A8             >                // dummy db directives used to calculate length of namec
 243+ E0A8 30 42 52 41 >                db      "0BRANCH"
 243+ E0AC 4E 43 48    >
 243+ E0AF             >len_NFA         defl    $ - temp_NFA
 243+ E0AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ E0A8             >
 243+ E0A8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ E0A9 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 243+ E0AD 4E 43 48    >
 243+ E0B0             >                org     $-1                 // alter last byte of Name just above to set
 243+ E0AF C8          >                db      {b $} | END_BIT     // msb as name end
 243+ E0B0             >
 243+ E0B0 9D 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243+ E0B2             >Prev_Ptr        defl    Heap_Ptr
 243+ E0B2             >
 243+ E0B2             >mirror_Ptr      defl    $
 243+ E0B2             >
 243+ E0B2 F3 63       >                dw      Dict_Ptr + 2        // xt
 243+ E0B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 243+ E0B4             >
 243+ E0B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 243+ E0B4             >
 243+ E0B4             >//              ______________________________________________________________________
 243+ E0B4             >//              Dictionary part
 243+ E0B4             >
 243+ E0B4             >                org     Dict_Ptr
 243+ 63F1             >
 243+ 63F1 B2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 243+ 63F3             >
 243+ 63F3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 63F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243+ 63F3 ~           >
 243+ 63F3 ~           >
 243+ 63F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 63F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 63F3             >
 243+ 63F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 63F3              ZBranch_Ptr:
 245+ 63F3 E1                           pop     hl
 246+ 63F4 7D                           ld      a, l
 247+ 63F5 B4                           or      h
 248+ 63F6 28 DA                        jr      z, Branch_Ptr
 249+ 63F8 18 E7                        jr      End_Loop_Ptr
 250+ 63FA              //              inc     bc                  // skip branch-style offseet
 251+ 63FA              //              inc     bc
 252+ 63FA              //              next
 253+ 63FA
 254+ 63FA              //  ______________________________________________________________________
 255+ 63FA              //
 256+ 63FA              // (leave)        --
 257+ 63FA              // compiled by LEAVE
 258+ 63FA              // this forces to exit from loop and jump past
 259+ 63FA                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 259+ 63FA             >
 259+ 63FA             >Dict_Ptr        defl    $
 259+ 63FA             >
 259+ 63FA             >//              ______________________________________________________________________
 259+ 63FA             >//              Heap part
 259+ 63FA             >
 259+ 63FA             >
 259+ 63FA             >                org     (Heap_Ptr & $1FFF) + $E000
 259+ E0B4             >
 259+ E0B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 259+ E0B4             >Latest_Definition defl  Heap_Ptr
 259+ E0B4             >
 259+ E0B4             >                // dummy db directives used to calculate length of namec
 259+ E0B4 28 4C 45 41 >                db      "(LEAVE)"
 259+ E0B8 56 45 29    >
 259+ E0BB             >len_NFA         defl    $ - temp_NFA
 259+ E0BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 259+ E0B4             >
 259+ E0B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 259+ E0B5 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 259+ E0B9 56 45 29    >
 259+ E0BC             >                org     $-1                 // alter last byte of Name just above to set
 259+ E0BB A9          >                db      {b $} | END_BIT     // msb as name end
 259+ E0BC             >
 259+ E0BC A8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 259+ E0BE             >Prev_Ptr        defl    Heap_Ptr
 259+ E0BE             >
 259+ E0BE             >mirror_Ptr      defl    $
 259+ E0BE             >
 259+ E0BE FC 63       >                dw      Dict_Ptr + 2        // xt
 259+ E0C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 259+ E0C0             >
 259+ E0C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 259+ E0C0             >
 259+ E0C0             >//              ______________________________________________________________________
 259+ E0C0             >//              Dictionary part
 259+ E0C0             >
 259+ E0C0             >                org     Dict_Ptr
 259+ 63FA             >
 259+ 63FA BE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 259+ 63FC             >
 259+ 63FC             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 259+ 63FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 259+ 63FC ~           >
 259+ 63FC ~           >
 259+ 63FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 259+ 63FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 259+ 63FC             >
 259+ 63FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 260+ 63FC                              // ex      de, hl
 261+ 63FC                              // *** ldhlrp
 262+ 63FC 3E 04                        ld      a, 4
 263+ 63FE ED 32                        add     de, a
 264+ 6400                              // *** ldrphl
 265+ 6400                              // ex      de, hl
 266+ 6400 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 267+ 6402                              next
 267+ 6402 DD E9       >                jp      (ix)
 268+ 6404
 269+ 6404              //  ______________________________________________________________________
 270+ 6404              //
 271+ 6404              // (?do)        lim ind --
 272+ 6404              // compiled by ?DO to make a loop checking for lim == ind first
 273+ 6404              // at run-time (?DO) must be followed by a BRANCH offset
 274+ 6404              // used to skip the loop if lim == ind
 275+ 6404                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 275+ 6404             >
 275+ 6404             >Dict_Ptr        defl    $
 275+ 6404             >
 275+ 6404             >//              ______________________________________________________________________
 275+ 6404             >//              Heap part
 275+ 6404             >
 275+ 6404             >
 275+ 6404             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E0C0             >
 275+ E0C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E0C0             >Latest_Definition defl  Heap_Ptr
 275+ E0C0             >
 275+ E0C0             >                // dummy db directives used to calculate length of namec
 275+ E0C0 28 3F 44 4F >                db      "(?DO)"
 275+ E0C4 29          >
 275+ E0C5             >len_NFA         defl    $ - temp_NFA
 275+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E0C0             >
 275+ E0C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E0C1 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 275+ E0C5 29          >
 275+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 275+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ E0C6             >
 275+ E0C6 B4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 275+ E0C8             >
 275+ E0C8             >mirror_Ptr      defl    $
 275+ E0C8             >
 275+ E0C8 06 64       >                dw      Dict_Ptr + 2        // xt
 275+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E0CA             >
 275+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E0CA             >
 275+ E0CA             >//              ______________________________________________________________________
 275+ E0CA             >//              Dictionary part
 275+ E0CA             >
 275+ E0CA             >                org     Dict_Ptr
 275+ 6404             >
 275+ 6404 C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 6406             >
 275+ 6406             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6406 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6406 ~           >
 275+ 6406 ~           >
 275+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6406             >
 275+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6406 D9                           exx
 277+ 6407 D1                            pop     de                  // de has the index
 278+ 6408 E1                            pop     hl                  // hl has the limit
 279+ 6409 44                            ld      b, h
 280+ 640A 4D                            ld      c, l
 281+ 640B E5                            push    hl                  // put them back to stack for later
 282+ 640C D5                            push    de
 283+ 640D A7                            and     a                   // reset carry flag
 284+ 640E ED 52                         sbc     hl, de              // compute limit - index
 285+ 6410 D9                           exx
 286+ 6411 20 04                        jr      nz, Do_Ptr           // if zero then don't even begin loop
 287+ 6413 E1                               pop     hl
 288+ 6414 E1                               pop     hl
 289+ 6415 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 290+ 6417              Do_Ptr:
 291+ 6417                              // *** ldhlrp                 // prepare RP
 292+ 6417                              // *** ex      de, hl
 293+ 6417                              // dec     de
 294+ 6417                              // dec     de
 295+ 6417                              // dec     de
 296+ 6417                              // dec     de
 297+ 6417 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 298+ 641B D5                           push    de                  // pass it to h'l'
 299+ 641C                              // *** ex      de, hl
 300+ 641C                              // *** ldrphl
 301+ 641C D9                           exx
 302+ 641D E1                            pop     hl
 303+ 641E
 304+ 641E                               // store index as top RP
 305+ 641E D1                            pop     de
 306+ 641F 73                            ld      (hl), e
 307+ 6420 23                            inc     hl
 308+ 6421 72                            ld      (hl), d
 309+ 6422 23                            inc     hl
 310+ 6423                               // stores lim as second from top RP
 311+ 6423 D1                            pop     de
 312+ 6424 73                            ld      (hl), e
 313+ 6425 23                            inc     hl
 314+ 6426 72                            ld      (hl), d
 315+ 6427 D9                           exx
 316+ 6428 18 B7                        jr      End_Loop_Ptr
 317+ 642A                              // skip branch-style offseet
 318+ 642A                          //  inc     bc
 319+ 642A                          //  inc     bc
 320+ 642A                          //  next
 321+ 642A
 322+ 642A              //  ______________________________________________________________________
 323+ 642A              //
 324+ 642A              // (do)        lim ind --
 325+ 642A              // compiled by DO to make a loop checking for lim == ind first
 326+ 642A              // this is a simpler version of (?DO)
 327+ 642A                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 642A             >
 327+ 642A             >Dict_Ptr        defl    $
 327+ 642A             >
 327+ 642A             >//              ______________________________________________________________________
 327+ 642A             >//              Heap part
 327+ 642A             >
 327+ 642A             >
 327+ 642A             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CA             >
 327+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CA             >Latest_Definition defl  Heap_Ptr
 327+ E0CA             >
 327+ E0CA             >                // dummy db directives used to calculate length of namec
 327+ E0CA 28 44 4F 29 >                db      "(DO)"
 327+ E0CE             >len_NFA         defl    $ - temp_NFA
 327+ E0CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CA             >
 327+ E0CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CB 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CF             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CE A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CF             >
 327+ E0CF C0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D1             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D1             >
 327+ E0D1             >mirror_Ptr      defl    $
 327+ E0D1             >
 327+ E0D1 2C 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D3             >
 327+ E0D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D3             >
 327+ E0D3             >//              ______________________________________________________________________
 327+ E0D3             >//              Dictionary part
 327+ E0D3             >
 327+ E0D3             >                org     Dict_Ptr
 327+ 642A             >
 327+ 642A D1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 642C             >
 327+ 642C             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 642C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 642C ~           >
 327+ 642C ~           >
 327+ 642C             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 642C             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 642C             >
 327+ 642C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 642C 0B                           dec     bc                  // prepare IP beforehand
 329+ 642D 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 642E 18 E7                        jr      Do_Ptr
 331+ 6430
 332+ 6430              //  ______________________________________________________________________
 333+ 6430              //
 334+ 6430              // i            -- n
 335+ 6430              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6430              // the current value of the index-loop
 337+ 6430                              New_Def I, "I", is_code, is_normal
 337+ 6430             >
 337+ 6430             >Dict_Ptr        defl    $
 337+ 6430             >
 337+ 6430             >//              ______________________________________________________________________
 337+ 6430             >//              Heap part
 337+ 6430             >
 337+ 6430             >
 337+ 6430             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D3             >
 337+ E0D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D3             >Latest_Definition defl  Heap_Ptr
 337+ E0D3             >
 337+ E0D3             >                // dummy db directives used to calculate length of namec
 337+ E0D3 49          >                db      "I"
 337+ E0D4             >len_NFA         defl    $ - temp_NFA
 337+ E0D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D3             >
 337+ E0D3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D4 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D5             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D4 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D5             >
 337+ E0D5 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D7             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D7             >
 337+ E0D7             >mirror_Ptr      defl    $
 337+ E0D7             >
 337+ E0D7 32 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D9             >
 337+ E0D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D9             >
 337+ E0D9             >//              ______________________________________________________________________
 337+ E0D9             >//              Dictionary part
 337+ E0D9             >
 337+ E0D9             >                org     Dict_Ptr
 337+ 6430             >
 337+ 6430 D7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 6432             >
 337+ 6432             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 6432 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 6432 ~           >
 337+ 6432 ~           >
 337+ 6432             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 6432             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 6432             >
 337+ 6432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 6432              I_Ptr:
 339+ 6432 62                           ld      h, d
 340+ 6433 6B                           ld      l, e
 341+ 6434                              // *** ldhlrp
 342+ 6434              I_Ptr_prime:
 343+ 6434 7E                           ld      a, (hl)
 344+ 6435 23                           inc     hl
 345+ 6436 66                           ld      h, (hl)
 346+ 6437 6F                           ld      l, a
 347+ 6438 E5                           push    hl
 348+ 6439                              next
 348+ 6439 DD E9       >                jp      (ix)
 349+ 643B
 350+ 643B
 351+ 643B              //  ______________________________________________________________________
 352+ 643B              //
 353+ 643B              // i'            -- n
 354+ 643B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 643B              // the limit of the index-loop
 356+ 643B
 357+ 643B                              New_Def II, "I'", is_code, is_normal
 357+ 643B             >
 357+ 643B             >Dict_Ptr        defl    $
 357+ 643B             >
 357+ 643B             >//              ______________________________________________________________________
 357+ 643B             >//              Heap part
 357+ 643B             >
 357+ 643B             >
 357+ 643B             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D9             >
 357+ E0D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D9             >Latest_Definition defl  Heap_Ptr
 357+ E0D9             >
 357+ E0D9             >                // dummy db directives used to calculate length of namec
 357+ E0D9 49 27       >                db      "I'"
 357+ E0DB             >len_NFA         defl    $ - temp_NFA
 357+ E0DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D9             >
 357+ E0D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DA 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DC             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DB A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DC             >
 357+ E0DC D3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DE             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DE             >
 357+ E0DE             >mirror_Ptr      defl    $
 357+ E0DE             >
 357+ E0DE 3D 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E0             >
 357+ E0E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E0             >
 357+ E0E0             >//              ______________________________________________________________________
 357+ E0E0             >//              Dictionary part
 357+ E0E0             >
 357+ E0E0             >                org     Dict_Ptr
 357+ 643B             >
 357+ 643B DE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 643D             >
 357+ 643D             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 643D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 643D ~           >
 357+ 643D ~           >
 357+ 643D             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 643D             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 643D             >
 357+ 643D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 643D 62                           ld      h, d
 359+ 643E 6B                           ld      l, e
 360+ 643F                              // *** ldhlrp
 361+ 643F 23                           inc     hl
 362+ 6440 23                           inc     hl
 363+ 6441 18 F1                        jr      I_Ptr_prime
 364+ 6443
 365+ 6443
 366+ 6443              //  ______________________________________________________________________
 367+ 6443              //
 368+ 6443              // digit        c n -- u tf  |  ff
 369+ 6443              // convert a character c using base n
 370+ 6443              // returns a unsigned number and a true flag
 371+ 6443              // or just a false flag if the conversion fails
 372+ 6443                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 6443             >
 372+ 6443             >Dict_Ptr        defl    $
 372+ 6443             >
 372+ 6443             >//              ______________________________________________________________________
 372+ 6443             >//              Heap part
 372+ 6443             >
 372+ 6443             >
 372+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E0             >
 372+ E0E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E0             >Latest_Definition defl  Heap_Ptr
 372+ E0E0             >
 372+ E0E0             >                // dummy db directives used to calculate length of namec
 372+ E0E0 44 49 47 49 >                db      "DIGIT"
 372+ E0E4 54          >
 372+ E0E5             >len_NFA         defl    $ - temp_NFA
 372+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E0             >
 372+ E0E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E1 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E5 54          >
 372+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E5 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E6             >
 372+ E0E6 D9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E8             >
 372+ E0E8             >mirror_Ptr      defl    $
 372+ E0E8             >
 372+ E0E8 45 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EA             >
 372+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EA             >
 372+ E0EA             >//              ______________________________________________________________________
 372+ E0EA             >//              Dictionary part
 372+ E0EA             >
 372+ E0EA             >                org     Dict_Ptr
 372+ 6443             >
 372+ 6443 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 6445             >
 372+ 6445             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 6445 ~           >
 372+ 6445 ~           >
 372+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 6445             >
 372+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 6445 D9                           exx
 374+ 6446 E1                           pop     hl                  // l has the base
 375+ 6447 D1                           pop     de                  // e has the digit
 376+ 6448 7B                           ld      a, e
 377+ 6449 FE 60                        cp      $60                 // check if lowercase
 378+ 644B 38 02                        jr      c, Digit_Uppercase
 379+ 644D D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 644F              Digit_Uppercase:
 381+ 644F D6 30                        sub     $30
 382+ 6451 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 6453 FE 0A                            cp      $0A
 384+ 6455 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 6457 D6 07                                sub     7                   // try hex and subtract 7
 386+ 6459 FE 0A                                cp      $0A
 387+ 645B 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 645D
 389+ 645D              Digit_Decimal:
 390+ 645D                              // compare digit
 391+ 645D BD                           cp      l                   // compare with base
 392+ 645E 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6460 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6461                              //  ld      hl, -1
 395+ 6461 ED 62                            sbc     hl, hl
 396+ 6463 D5                               push    de
 397+ 6464 E5                               push    hl
 398+ 6465 D9                               exx
 399+ 6466                                  next
 399+ 6466 DD E9       >                jp      (ix)
 400+ 6468              Digit_Fail:
 401+ 6468 21 00 00                     ld      hl, 0
 402+ 646B E5                           push    hl
 403+ 646C D9                           exx
 404+ 646D                              next
 404+ 646D DD E9       >                jp      (ix)
 405+ 646F
 406+ 646F              //  ______________________________________________________________________
 407+ 646F              //
 408+ 646F              //  parametric uppercase routine
 409+ 646F              //  depending on the following op-code the routine can be by-passed
 410+ 646F              //  changing the behaviour of some callers.
 411+ 646F              //  If it is "ret" then the system is Case-Sensitive
 412+ 646F              //  If it is "Nop" then the system is Case-Insensitive
 413+ 646F              //  Only A register is touched.
 414+ 646F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 6470              Case_Upper:
 416+ 6470 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 6472 D8                           ret     c                   // no change if A < "a"
 418+ 6473 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 6475 D0                           ret     nc                  // no change if A > "z"
 420+ 6476 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 6478 C9                           ret
 422+ 6479
 423+ 6479              //  ______________________________________________________________________
 424+ 6479              //
 425+ 6479              //  caseon      --
 426+ 6479              // set system case-sensitivity on
 427+ 6479              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 6479                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 6479             >
 428+ 6479             >Dict_Ptr        defl    $
 428+ 6479             >
 428+ 6479             >//              ______________________________________________________________________
 428+ 6479             >//              Heap part
 428+ 6479             >
 428+ 6479             >
 428+ 6479             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0EA             >
 428+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0EA             >Latest_Definition defl  Heap_Ptr
 428+ E0EA             >
 428+ E0EA             >                // dummy db directives used to calculate length of namec
 428+ E0EA 43 41 53 45 >                db      "CASEON"
 428+ E0EE 4F 4E       >
 428+ E0F0             >len_NFA         defl    $ - temp_NFA
 428+ E0F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0EA             >
 428+ E0EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0EB 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EF 4F 4E       >
 428+ E0F1             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0F0 CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0F1             >
 428+ E0F1 E0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0F3             >Prev_Ptr        defl    Heap_Ptr
 428+ E0F3             >
 428+ E0F3             >mirror_Ptr      defl    $
 428+ E0F3             >
 428+ E0F3 7B 64       >                dw      Dict_Ptr + 2        // xt
 428+ E0F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F5             >
 428+ E0F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F5             >
 428+ E0F5             >//              ______________________________________________________________________
 428+ E0F5             >//              Dictionary part
 428+ E0F5             >
 428+ E0F5             >                org     Dict_Ptr
 428+ 6479             >
 428+ 6479 F3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 647B             >
 428+ 647B             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 647B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 647B ~           >
 428+ 647B ~           >
 428+ 647B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 647B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 647B             >
 428+ 647B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 647B 3E C9                        ld      a, $C9              // "ret"
 430+ 647D 32 6F 64                     ld      (Case_Sensitive), a
 431+ 6480                              next
 431+ 6480 DD E9       >                jp      (ix)
 432+ 6482
 433+ 6482              //  ______________________________________________________________________
 434+ 6482              //
 435+ 6482              //  caseoff     --
 436+ 6482              // set system case-sensitivity on
 437+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 6482                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 6482             >
 438+ 6482             >Dict_Ptr        defl    $
 438+ 6482             >
 438+ 6482             >//              ______________________________________________________________________
 438+ 6482             >//              Heap part
 438+ 6482             >
 438+ 6482             >
 438+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F5             >
 438+ E0F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F5             >Latest_Definition defl  Heap_Ptr
 438+ E0F5             >
 438+ E0F5             >                // dummy db directives used to calculate length of namec
 438+ E0F5 43 41 53 45 >                db      "CASEOFF"
 438+ E0F9 4F 46 46    >
 438+ E0FC             >len_NFA         defl    $ - temp_NFA
 438+ E0FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F5             >
 438+ E0F5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0FA 4F 46 46    >
 438+ E0FD             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0FC C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0FD             >
 438+ E0FD EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FF             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FF             >
 438+ E0FF             >mirror_Ptr      defl    $
 438+ E0FF             >
 438+ E0FF 84 64       >                dw      Dict_Ptr + 2        // xt
 438+ E101             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E101             >
 438+ E101             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E101             >
 438+ E101             >//              ______________________________________________________________________
 438+ E101             >//              Dictionary part
 438+ E101             >
 438+ E101             >                org     Dict_Ptr
 438+ 6482             >
 438+ 6482 FF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 6484             >
 438+ 6484             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 6484 ~           >
 438+ 6484 ~           >
 438+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6484             >
 438+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6484 3E 00                        ld      a, $00              // "nop"
 440+ 6486 32 6F 64                     ld      (Case_Sensitive), a
 441+ 6489                              next
 441+ 6489 DD E9       >                jp      (ix)
 442+ 648B
 443+ 648B              //  ______________________________________________________________________
 444+ 648B              //
 445+ 648B              //  upper       c1 -- c1 | c2
 446+ 648B              // character on top of stack is forced to Uppercase.
 447+ 648B                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 648B             >
 447+ 648B             >Dict_Ptr        defl    $
 447+ 648B             >
 447+ 648B             >//              ______________________________________________________________________
 447+ 648B             >//              Heap part
 447+ 648B             >
 447+ 648B             >
 447+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E101             >
 447+ E101             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E101             >Latest_Definition defl  Heap_Ptr
 447+ E101             >
 447+ E101             >                // dummy db directives used to calculate length of namec
 447+ E101 55 50 50 45 >                db      "UPPER"
 447+ E105 52          >
 447+ E106             >len_NFA         defl    $ - temp_NFA
 447+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E101             >
 447+ E101 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E102 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E106 52          >
 447+ E107             >                org     $-1                 // alter last byte of Name just above to set
 447+ E106 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E107             >
 447+ E107 F5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E109             >Prev_Ptr        defl    Heap_Ptr
 447+ E109             >
 447+ E109             >mirror_Ptr      defl    $
 447+ E109             >
 447+ E109 8D 64       >                dw      Dict_Ptr + 2        // xt
 447+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E10B             >
 447+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E10B             >
 447+ E10B             >//              ______________________________________________________________________
 447+ E10B             >//              Dictionary part
 447+ E10B             >
 447+ E10B             >                org     Dict_Ptr
 447+ 648B             >
 447+ 648B 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 648D             >
 447+ 648D             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 648D ~           >
 447+ 648D ~           >
 447+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 648D             >
 447+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 648D E1                           pop     hl
 449+ 648E 7D                           ld      a, l
 450+ 648F CD 70 64                     call    Case_Upper
 451+ 6492 6F                           ld      l, a
 452+ 6493
 453+ 6493                              psh1
 453+ 6493 E5          >                push    hl
 453+ 6494 DD E9       >                jp      (ix)
 454+ 6496
 455+ 6496              //  ______________________________________________________________________
 456+ 6496
 457+ 6496              // This routine must be called with alternate registers active
 458+ 6496              // input: None
 459+ 6496              // Output: A = 8k-page number currently fitted at MMU7
 460+ 6496              MMU7_read:
 461+ 6496 3E 57                        ld      a, 87
 462+ 6498 01 3B 24                     ld      bc, $243B
 463+ 649B ED 79                        out     (c), a
 464+ 649D 04                           inc     b
 465+ 649E ED 78                        in      a, (c)
 466+ 64A0 C9                           ret
 467+ 64A1
 468+ 64A1              //  ______________________________________________________________________
 469+ 64A1
 470+ 64A1              // given an HP-pointer in input, turn it into page + offset
 471+ 64A1              // Input: HL = hp-pointer
 472+ 64A1              // Output: A = page,  HL = offset
 473+ 64A1              TO_FAR_rout:
 474+ 64A1 7C                           ld      a, h
 475+ 64A2 08                           ex      af, af
 476+ 64A3 7C                           ld      a, h
 477+ 64A4 F6 E0                        or      $E0
 478+ 64A6 67                           ld      h, a
 479+ 64A7 08                           ex      af, af
 480+ 64A8 07                           rlca
 481+ 64A9 07                           rlca
 482+ 64AA 07                           rlca
 483+ 64AB E6 07                        and     $07
 484+ 64AD C6 20                        add     $20
 485+ 64AF C9                           ret
 486+ 64B0
 487+ 64B0
 488+ 64B0              //  ______________________________________________________________________
 489+ 64B0              //
 490+ 64B0              // (find)       addr voc -- 0 | cfa b 1
 491+ 64B0              // vocabulary search,
 492+ 64B0              // - voc is starting word's NFA
 493+ 64B0              // - addr is the string to be searched for
 494+ 64B0              // On success, it returns the CFA of found word, the first NFA byte
 495+ 64B0              // (which contains length and some flags) and a true flag.
 496+ 64B0              // On fail, a false flag  (no more: leaves addr unchanged)
 497+ 64B0                              New_Def C_FIND, "(FIND)", is_code, is_normal
 497+ 64B0             >
 497+ 64B0             >Dict_Ptr        defl    $
 497+ 64B0             >
 497+ 64B0             >//              ______________________________________________________________________
 497+ 64B0             >//              Heap part
 497+ 64B0             >
 497+ 64B0             >
 497+ 64B0             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ E10B             >
 497+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ E10B             >Latest_Definition defl  Heap_Ptr
 497+ E10B             >
 497+ E10B             >                // dummy db directives used to calculate length of namec
 497+ E10B 28 46 49 4E >                db      "(FIND)"
 497+ E10F 44 29       >
 497+ E111             >len_NFA         defl    $ - temp_NFA
 497+ E111             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ E10B             >
 497+ E10B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ E10C 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 497+ E110 44 29       >
 497+ E112             >                org     $-1                 // alter last byte of Name just above to set
 497+ E111 A9          >                db      {b $} | END_BIT     // msb as name end
 497+ E112             >
 497+ E112 01 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 497+ E114             >Prev_Ptr        defl    Heap_Ptr
 497+ E114             >
 497+ E114             >mirror_Ptr      defl    $
 497+ E114             >
 497+ E114 B2 64       >                dw      Dict_Ptr + 2        // xt
 497+ E116             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ E116             >
 497+ E116             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ E116             >
 497+ E116             >//              ______________________________________________________________________
 497+ E116             >//              Dictionary part
 497+ E116             >
 497+ E116             >                org     Dict_Ptr
 497+ 64B0             >
 497+ 64B0 14 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 497+ 64B2             >
 497+ 64B2             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 64B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 497+ 64B2 ~           >
 497+ 64B2 ~           >
 497+ 64B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 64B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 64B2             >
 497+ 64B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 64B2 D9                           exx
 499+ 64B3 CD 96 64                     call    MMU7_read
 500+ 64B6 D9                           exx
 501+ 64B7 6F                           ld      l, a
 502+ 64B8 D9                           exx
 503+ 64B9
 504+ 64B9 D1                           pop     de                      // de has dictionary pointer
 505+ 64BA              Find_VocabularyLoop:
 506+ 64BA 7A                               ld      a, d
 507+ 64BB D6 60                            sub     $60
 508+ 64BD 30 08                            jr      nc, Find_far_endif
 509+ 64BF EB                                   ex      de, hl
 510+ 64C0 CD A1 64                             call    TO_FAR_rout
 511+ 64C3 EB                                   ex      de, hl
 512+ 64C4 ED 92 57                             nextreg 87, a
 513+ 64C7              Find_far_endif:
 514+ 64C7 E1                               pop     hl                  // string pointer to search for
 515+ 64C8 E5                               push    hl                  // keep it on stack too for the end.
 516+ 64C9 1A                               ld      a, (de)             // save NFA length byte
 517+ 64CA 08                               ex      af,af'              // for later use (!)
 518+ 64CB 1A                               ld      a, (de)             // reload NFA length byte
 519+ 64CC AE                               xor     (hl)                // check if same length
 520+ 64CD E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 521+ 64CF                                  // word and text haven't the same length, skip to next vocabulary entry
 522+ 64CF 20 33                            jr      nz, Find_DifferentLenght
 523+ 64D1
 524+ 64D1              Find_ThisWord:      // begin loop
 525+ 64D1 23                                   inc     hl
 526+ 64D2 13                                   inc     de
 527+ 64D3 1A                                   ld      a, (de)
 528+ 64D4                                      // case insensitive option - begin
 529+ 64D4                                      // push    bc
 530+ 64D4 E6 80                                and     $80                 // split A in msb and the rest
 531+ 64D6 47                                   ld      b, a
 532+ 64D7 1A                                   ld      a, (de)
 533+ 64D8 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 534+ 64DA CD 6F 64                             call    Case_Sensitive      // uppercase routine
 535+ 64DD 4F                                   ld      c, a
 536+ 64DE 7E                                   ld      a, (hl)
 537+ 64DF CD 6F 64                             call    Case_Sensitive      // uppercase routine
 538+ 64E2 A9                                   xor     c
 539+ 64E3 A8                                   xor     b
 540+ 64E4                                      // pop     bc
 541+ 64E4                                      // case insensitive option - end
 542+ 64E4 87                                   add     a                   // ignore msb during compare
 543+ 64E5 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 544+ 64E7
 545+ 64E7                                  // loop back until last byte msb is found set
 546+ 64E7                                  // that bit marks the ending char of this word
 547+ 64E7 30 E8                            jr      nc, Find_ThisWord
 548+ 64E9
 549+ 64E9                                  // match found !
 550+ 64E9 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 551+ 64EC 19                               add     hl, de
 552+ 64ED
 553+ 64ED 5E                               ld      e, (hl)
 554+ 64EE 23                               inc     hl
 555+ 64EF 56                               ld      d, (hl)
 556+ 64F0 EB                               ex      de, hl
 557+ 64F1              //Non_MMU7:
 558+ 64F1 E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64F2 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64F3 5F                               ld      e, a
 561+ 64F4 16 00                            ld      d, 0
 562+ 64F6 21 FF FF                         ld      hl, -1
 563+ 64F9 D5                               push    de
 564+ 64FA E5                               push    hl
 565+ 64FB D9                               exx
 566+ 64FC 7D                               ld      a, l
 567+ 64FD ED 92 57                         nextreg 87, a
 568+ 6500                                  next
 568+ 6500 DD E9       >                jp      (ix)
 569+ 6502
 570+ 6502              Find_DidntMatch: // didn't match (*)
 571+ 6502 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 6504
 573+ 6504              Find_DifferentLenght:
 574+ 6504                                  // consume chars until the end of the word
 575+ 6504                                  // that is last byte msb is found set
 576+ 6504 13                                   inc     de
 577+ 6505 1A                                   ld      a, (de)
 578+ 6506 87                                   add     a, a
 579+ 6507 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6509
 581+ 6509              Find_WordEnd:   // word-end  found (**)
 582+ 6509                                  // take LFA and use it
 583+ 6509 13                               inc     de
 584+ 650A EB                               ex      de, hl
 585+ 650B 5E                               ld      e, (hl)
 586+ 650C 23                               inc     hl
 587+ 650D 56                               ld      d, (hl)
 588+ 650E 7A                               ld      a, d
 589+ 650F B3                               or      e
 590+ 6510
 591+ 6510                              // loop until end of vocabulary
 592+ 6510 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 6512
 594+ 6512 E1                           pop     hl              // without this, leaves addr unchanged
 595+ 6513 21 00 00                     ld      hl, 0
 596+ 6516 E5                           push    hl
 597+ 6517 D9                           exx
 598+ 6518 7D                           ld      a, l
 599+ 6519 ED 92 57                     nextreg 87, a
 600+ 651C                              next
 600+ 651C DD E9       >                jp      (ix)
 601+ 651E
 602+ 651E              //  ______________________________________________________________________
 603+ 651E              //
 604+ 651E              // enclose      a c -- a  n1 n2 n3
 605+ 651E              // starting from a, using delimiter c, determines the offsets:
 606+ 651E              //   n1   the first character non-delimiter
 607+ 651E              //   n2   the first delimiter after the text
 608+ 651E              //   n3   the first character non enclosed.
 609+ 651E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 651E              // an uncoditional delimiter.
 611+ 651E              // Examples:
 612+ 651E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 651E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 651E              // iii:	c  c  'nul'          -- 2  3  2
 615+ 651E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 651E             >
 615+ 651E             >Dict_Ptr        defl    $
 615+ 651E             >
 615+ 651E             >//              ______________________________________________________________________
 615+ 651E             >//              Heap part
 615+ 651E             >
 615+ 651E             >
 615+ 651E             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E116             >
 615+ E116             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E116             >Latest_Definition defl  Heap_Ptr
 615+ E116             >
 615+ E116             >                // dummy db directives used to calculate length of namec
 615+ E116 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11A 4F 53 45    >
 615+ E11D             >len_NFA         defl    $ - temp_NFA
 615+ E11D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E116             >
 615+ E116 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E117 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11B 4F 53 45    >
 615+ E11E             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11D C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E11E             >
 615+ E11E 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E120             >Prev_Ptr        defl    Heap_Ptr
 615+ E120             >
 615+ E120             >mirror_Ptr      defl    $
 615+ E120             >
 615+ E120 20 65       >                dw      Dict_Ptr + 2        // xt
 615+ E122             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E122             >
 615+ E122             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E122             >
 615+ E122             >//              ______________________________________________________________________
 615+ E122             >//              Dictionary part
 615+ E122             >
 615+ E122             >                org     Dict_Ptr
 615+ 651E             >
 615+ 651E 20 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6520             >
 615+ 6520             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6520 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6520 ~           >
 615+ 6520 ~           >
 615+ 6520             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6520             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6520             >
 615+ 6520             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6520 D9                           exx
 617+ 6521 D1                           pop     de                  //  e has the character
 618+ 6522 E1                           pop     hl                  // hl has the string address
 619+ 6523 E5                           push    hl
 620+ 6524 7B                           ld      a, e
 621+ 6525 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6528 2B                           dec     hl
 623+ 6529              Enclose_NonDelimiter:
 624+ 6529                              // find first non delimiter
 625+ 6529 23                               inc     hl
 626+ 652A 13                               inc     de
 627+ 652B BE                               cp      (hl)
 628+ 652C 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 652E D5                           push    de
 630+ 652F
 631+ 652F                              // push    bc                  // save Instruction Pointer
 632+ 652F
 633+ 652F 4F                           ld      c, a                // save char
 634+ 6530 7E                           ld      a, (hl)
 635+ 6531 A7                           and     a                   // stop if 0x00
 636+ 6532 20 05                        jr      nz, Enclose_NextChar
 637+ 6534                              /// case iii. no more character in string
 638+ 6534                                  // pop     bc                  // restore Instruction Pointer
 639+ 6534 13                               inc     de
 640+ 6535 D5                               push    de
 641+ 6536 1B                               dec     de
 642+ 6537 18 0F                            jr      Enclose_common_ending
 643+ 6539                              //  push    de
 644+ 6539                              //  exx
 645+ 6539                              //  next
 646+ 6539              Enclose_NextChar:
 647+ 6539 79                               ld      a, c
 648+ 653A 23                               inc     hl
 649+ 653B 13                               inc     de
 650+ 653C BE                               cp      (hl)
 651+ 653D 20 04                            jr      nz, Enclose_NonSeparator
 652+ 653F                                      // case i. first non enclosed
 653+ 653F                                      // pop     bc                  // restore Instruction Pointer
 654+ 653F D5                                   push    de
 655+ 6540 13                                   inc     de
 656+ 6541 18 05                                jr      Enclose_common_ending
 657+ 6543                              //      push    de
 658+ 6543                              //      exx
 659+ 6543                              //      next
 660+ 6543              Enclose_NonSeparator:
 661+ 6543 7E                               ld      a, (hl)
 662+ 6544 A7                               and     a
 663+ 6545 20 F2                        jr      nz, Enclose_NextChar
 664+ 6547
 665+ 6547                              // case ii. separator & terminator
 666+ 6547                              // pop     bc                  // restore Instruction Pointer
 667+ 6547 D5                           push    de
 668+ 6548              Enclose_common_ending:
 669+ 6548 D5                           push    de
 670+ 6549 D9                           exx
 671+ 654A                              next
 671+ 654A DD E9       >                jp      (ix)
 672+ 654C
 673+ 654C              //  ______________________________________________________________________
 674+ 654C              //
 675+ 654C              // (map)        a2 a1 n c1 -- c2
 676+ 654C              // translate character c1 using mapping string a2 and a2
 677+ 654C              // if c1 is not present within string a1 then
 678+ 654C              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 654C                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 654C             >
 679+ 654C             >Dict_Ptr        defl    $
 679+ 654C             >
 679+ 654C             >//              ______________________________________________________________________
 679+ 654C             >//              Heap part
 679+ 654C             >
 679+ 654C             >
 679+ 654C             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E122             >
 679+ E122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E122             >Latest_Definition defl  Heap_Ptr
 679+ E122             >
 679+ E122             >                // dummy db directives used to calculate length of namec
 679+ E122 28 4D 41 50 >                db      "(MAP)"
 679+ E126 29          >
 679+ E127             >len_NFA         defl    $ - temp_NFA
 679+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E122             >
 679+ E122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E123 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E127 29          >
 679+ E128             >                org     $-1                 // alter last byte of Name just above to set
 679+ E127 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E128             >
 679+ E128 16 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E12A             >Prev_Ptr        defl    Heap_Ptr
 679+ E12A             >
 679+ E12A             >mirror_Ptr      defl    $
 679+ E12A             >
 679+ E12A 4E 65       >                dw      Dict_Ptr + 2        // xt
 679+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E12C             >
 679+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E12C             >
 679+ E12C             >//              ______________________________________________________________________
 679+ E12C             >//              Dictionary part
 679+ E12C             >
 679+ E12C             >                org     Dict_Ptr
 679+ 654C             >
 679+ 654C 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 654E             >
 679+ 654E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 654E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 654E ~           >
 679+ 654E ~           >
 679+ 654E             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 654E             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 654E             >
 679+ 654E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 654E D9                           exx
 681+ 654F E1                           pop     hl
 682+ 6550 7D                           ld      a, l
 683+ 6551 C1                           pop     bc
 684+ 6552 E1                           pop     hl
 685+ 6553 50                           ld      d, b
 686+ 6554 59                           ld      e, c
 687+ 6555 ED B1                        cpir
 688+ 6557 E1                           pop     hl
 689+ 6558 20 05                        jr      nz, C_Map_Then
 689+ 655A
 690+ 655A 19                               add     hl, de
 691+ 655B 2B                               dec     hl
 692+ 655C ED 42                            sbc     hl, bc
 693+ 655E 7E                               ld      a, (hl)
 694+ 655F              C_Map_Then:
 695+ 655F 6F                           ld      l, a
 696+ 6560 26 00                        ld      h, 0
 697+ 6562 E5                           push    hl
 698+ 6563 D9                           exx
 699+ 6564                              next
 699+ 6564 DD E9       >                jp      (ix)
 700+ 6566
 701+ 6566              //  ______________________________________________________________________
 702+ 6566              //
 703+ 6566              // (compare)    a1 a2 n -- b
 704+ 6566              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 6566              // with n bytes of text at address a2. It returns numeric a value:
 706+ 6566              //  0 : if strings are equal
 707+ 6566              // +1 : if string at a1 greater than string at a2
 708+ 6566              // -1 : if string at a1 less than string at a2
 709+ 6566              // strings can be 256 bytes in length at most.
 710+ 6566                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 6566             >
 710+ 6566             >Dict_Ptr        defl    $
 710+ 6566             >
 710+ 6566             >//              ______________________________________________________________________
 710+ 6566             >//              Heap part
 710+ 6566             >
 710+ 6566             >
 710+ 6566             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E12C             >
 710+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E12C             >Latest_Definition defl  Heap_Ptr
 710+ E12C             >
 710+ E12C             >                // dummy db directives used to calculate length of namec
 710+ E12C 28 43 4F 4D >                db      "(COMPARE)"
 710+ E130 50 41 52 45 >
 710+ E134 29          >
 710+ E135             >len_NFA         defl    $ - temp_NFA
 710+ E135             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E12C             >
 710+ E12C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E12D 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E131 50 41 52 45 >
 710+ E135 29          >
 710+ E136             >                org     $-1                 // alter last byte of Name just above to set
 710+ E135 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E136             >
 710+ E136 22 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E138             >Prev_Ptr        defl    Heap_Ptr
 710+ E138             >
 710+ E138             >mirror_Ptr      defl    $
 710+ E138             >
 710+ E138 68 65       >                dw      Dict_Ptr + 2        // xt
 710+ E13A             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E13A             >
 710+ E13A             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E13A             >
 710+ E13A             >//              ______________________________________________________________________
 710+ E13A             >//              Dictionary part
 710+ E13A             >
 710+ E13A             >                org     Dict_Ptr
 710+ 6566             >
 710+ 6566 38 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 6568             >
 710+ 6568             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 6568 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 6568 ~           >
 710+ 6568 ~           >
 710+ 6568             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 6568             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 6568             >
 710+ 6568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 6568 D9                           exx
 712+ 6569 E1                           pop     hl                  // Number of bytes
 713+ 656A 7D                           ld      a, l
 714+ 656B E1                           pop     hl                  // hl points string a2
 715+ 656C D1                           pop     de                  // hl points string a1
 716+ 656D              //              push    bc                  // Instruction pointer on stack
 717+ 656D 47                           ld      b, a
 718+ 656E              C_Compare_Loop:
 719+ 656E 7E                               ld      a, (hl)
 720+ 656F CD 6F 64                         call    Case_Sensitive
 721+ 6572 4F                               ld      c, a
 722+ 6573 1A                               ld      a, (de)
 723+ 6574 CD 6F 64                         call    Case_Sensitive
 724+ 6577 B9                               cp      c
 725+ 6578 13                               inc     de
 726+ 6579 23                               inc     hl
 727+ 657A 28 0A                            jr      z, C_Compare_Equal
 728+ 657C 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 657E 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 6581 18 08                                jr      C_Compare_common_ending
 731+ 6583                                  //  jr      C_Compare_Then      // Else
 732+ 6583              C_Compare_NotLessThan:
 733+ 6583 21 FF FF                                 ld      hl, -1              // a1 lt a2
 734+ 6586              // C_Compare_Then:                                 // Endif
 735+ 6586              //                      pop     bc              // restore Instruction Pointer
 736+ 6586              //                      jr      C_Compare_common_ending
 737+ 6586                                  //  push    hl
 738+ 6586                                  //  exx
 739+ 6586                                  //  next
 740+ 6586
 741+ 6586              C_Compare_Equal:
 742+ 6586 10 E6                        djnz    C_Compare_Loop
 743+ 6588 21 00 00                     ld      hl, 0               // a1 eq a2
 744+ 658B              //              pop     bc                  // restore Instruction Pointer
 745+ 658B              C_Compare_common_ending:
 746+ 658B E5                           push    hl
 747+ 658C D9                           exx
 748+ 658D
 749+ 658D                              next
 749+ 658D DD E9       >                jp      (ix)
 750+ 658F
 751+ 658F              //  ______________________________________________________________________
 752+ 658F              //
 753+ 658F              // (emitc)        c --
 754+ 658F              // low level emit, calls ROM routine at #10 to send a character to
 755+ 658F              // the the current channel (see SELECT to change stream-channel)
 756+ 658F                              New_Def CEMITC, "(EMITC)", is_code, is_normal
 756+ 658F             >
 756+ 658F             >Dict_Ptr        defl    $
 756+ 658F             >
 756+ 658F             >//              ______________________________________________________________________
 756+ 658F             >//              Heap part
 756+ 658F             >
 756+ 658F             >
 756+ 658F             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ E13A             >
 756+ E13A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ E13A             >Latest_Definition defl  Heap_Ptr
 756+ E13A             >
 756+ E13A             >                // dummy db directives used to calculate length of namec
 756+ E13A 28 45 4D 49 >                db      "(EMITC)"
 756+ E13E 54 43 29    >
 756+ E141             >len_NFA         defl    $ - temp_NFA
 756+ E141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ E13A             >
 756+ E13A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ E13B 28 45 4D 49 >                db      "(EMITC)"               // name string in 7-bit ascii, but
 756+ E13F 54 43 29    >
 756+ E142             >                org     $-1                 // alter last byte of Name just above to set
 756+ E141 A9          >                db      {b $} | END_BIT     // msb as name end
 756+ E142             >
 756+ E142 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ E144             >Prev_Ptr        defl    Heap_Ptr
 756+ E144             >
 756+ E144             >mirror_Ptr      defl    $
 756+ E144             >
 756+ E144 91 65       >                dw      Dict_Ptr + 2        // xt
 756+ E146             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ E146             >
 756+ E146             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ E146             >
 756+ E146             >//              ______________________________________________________________________
 756+ E146             >//              Dictionary part
 756+ E146             >
 756+ E146             >                org     Dict_Ptr
 756+ 658F             >
 756+ 658F 44 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 6591             >
 756+ 6591             >CEMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 6591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 756+ 6591 ~           >
 756+ 6591 ~           >
 756+ 6591             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 6591             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 6591             >
 756+ 6591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 6591 E1                           pop     hl
 758+ 6592 7D                           ld      a, l
 759+ 6593              Emitc_Ptr:
 760+ 6593 C5                           push    bc
 761+ 6594 D5                           push    de
 762+ 6595 DD E5                        push    ix
 763+ 6597
 764+ 6597              CLS_No_Layer_0:
 765+ 6597 D7                           rst     $10
 766+ 6598              CLS_Layer_0:
 767+ 6598 DD E1                        pop     ix
 768+ 659A D1                           pop     de
 769+ 659B C1                           pop     bc
 770+ 659C 3E FF                        ld      a, 255            // max possible
 771+ 659E 32 8C 5C                     ld      (SCR_CT), a
 772+ 65A1                              next
 772+ 65A1 DD E9       >                jp      (ix)
 773+ 65A3
 774+ 65A3              //  ______________________________________________________________________
 775+ 65A3              //
 776+ 65A3              // (cls)          --
 777+ 65A3
 778+ 65A3              //              Colon_Def CLS, "CLS", is_normal
 779+ 65A3              //              dw      LIT, $0E, EMITC
 780+ 65A3              //              dw      EXIT
 781+ 65A3
 782+ 65A3                              New_Def CCLS, "(CLS)", is_code, is_normal
 782+ 65A3             >
 782+ 65A3             >Dict_Ptr        defl    $
 782+ 65A3             >
 782+ 65A3             >//              ______________________________________________________________________
 782+ 65A3             >//              Heap part
 782+ 65A3             >
 782+ 65A3             >
 782+ 65A3             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E146             >
 782+ E146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E146             >Latest_Definition defl  Heap_Ptr
 782+ E146             >
 782+ E146             >                // dummy db directives used to calculate length of namec
 782+ E146 28 43 4C 53 >                db      "(CLS)"
 782+ E14A 29          >
 782+ E14B             >len_NFA         defl    $ - temp_NFA
 782+ E14B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E146             >
 782+ E146 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E147 28 43 4C 53 >                db      "(CLS)"               // name string in 7-bit ascii, but
 782+ E14B 29          >
 782+ E14C             >                org     $-1                 // alter last byte of Name just above to set
 782+ E14B A9          >                db      {b $} | END_BIT     // msb as name end
 782+ E14C             >
 782+ E14C 3A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E14E             >Prev_Ptr        defl    Heap_Ptr
 782+ E14E             >
 782+ E14E             >mirror_Ptr      defl    $
 782+ E14E             >
 782+ E14E A5 65       >                dw      Dict_Ptr + 2        // xt
 782+ E150             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E150             >
 782+ E150             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E150             >
 782+ E150             >//              ______________________________________________________________________
 782+ E150             >//              Dictionary part
 782+ E150             >
 782+ E150             >                org     Dict_Ptr
 782+ 65A3             >
 782+ 65A3 4E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 65A5             >
 782+ 65A5             >CCLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 65A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 782+ 65A5 ~           >
 782+ 65A5 ~           >
 782+ 65A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 65A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 65A5             >
 782+ 65A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 65A5 C5                           push    bc
 784+ 65A6 D5                           push    de
 785+ 65A7 DD E5                        push    ix
 786+ 65A9 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 787+ 65AC 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 788+ 65AE AF                           xor     a           // query current status
 789+ 65AF CF                           rst     8
 790+ 65B0 94                           db      $94         // carry flag set on success
 791+ 65B1 A7                           and     a
 792+ 65B2 3E 0E                        ld      a, $0E
 793+ 65B4 20 E1                        jr      nz, CLS_No_Layer_0
 794+ 65B6 CD AF 0D                       call    $0DAF
 795+ 65B9 18 DD                        jr      CLS_Layer_0
 796+ 65BB
 797+ 65BB              //              jr      Emit_Rst
 798+ 65BB              //              rst     $10
 799+ 65BB              //CLS_Layer_0:
 800+ 65BB              //              pop     ix
 801+ 65BB              //              pop     de
 802+ 65BB              //              pop     bc
 803+ 65BB              //              next
 804+ 65BB
 805+ 65BB
 806+ 65BB              //  ______________________________________________________________________
 807+ 65BB              //
 808+ 65BB              // cr           --
 809+ 65BB              // send a CR via EMITC
 810+ 65BB              //              New_Def CR, "CR", is_code, is_normal
 811+ 65BB              //
 812+ 65BB              //              ld      a, CR_CHAR
 813+ 65BB              //              jr      Emitc_Ptr
 814+ 65BB
 815+ 65BB              Emitc_Vec:
 816+ 65BB F8 65                        dw      C_Emit_Printable  // comma
 817+ 65BD FF 65                        dw      C_Emit_Bel        // bel
 818+ 65BF F8 65                        dw      C_Emit_Printable  // bs
 819+ 65C1 17 66                        dw      C_Emit_Tab        // tab
 820+ 65C3 F8 65                        dw      C_Emit_Printable  // cr
 821+ 65C5 1B 66                        dw      C_Emit_NL         // lf (unix newline)
 822+ 65C7 F8 65                        dw      C_Emit_Printable  // blank
 823+ 65C9 F8 65                        dw      C_Emit_Printable  // blank
 824+ 65CB
 825+ 65CB              Emit_Selector_Start:
 826+ 65CB 06                           db      $06                 // comma
 827+ 65CC 07                           db      $07                 // bel
 828+ 65CD 08                           db      $08                 // bs
 829+ 65CE 09                           db      $09                 // tab
 830+ 65CF 0D                           db      $0D                 // cr
 831+ 65D0 0A                           db      $0A                 // lf (unix newline)
 832+ 65D1 20                           db      $20
 833+ 65D2              Emit_Selector_End:
 834+ 65D2 20                           db      $20
 835+ 65D3
 836+ 65D3              //  ______________________________________________________________________
 837+ 65D3              //
 838+ 65D3              // (?emit)      c1 -- c2 | c1
 839+ 65D3              // decode a character to be sent via EMIT
 840+ 65D3              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 841+ 65D3              // the routine should resolve anything and convert the character anyway.
 842+ 65D3                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 842+ 65D3             >
 842+ 65D3             >Dict_Ptr        defl    $
 842+ 65D3             >
 842+ 65D3             >//              ______________________________________________________________________
 842+ 65D3             >//              Heap part
 842+ 65D3             >
 842+ 65D3             >
 842+ 65D3             >                org     (Heap_Ptr & $1FFF) + $E000
 842+ E150             >
 842+ E150             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ E150             >Latest_Definition defl  Heap_Ptr
 842+ E150             >
 842+ E150             >                // dummy db directives used to calculate length of namec
 842+ E150 28 3F 45 4D >                db      "(?EMIT)"
 842+ E154 49 54 29    >
 842+ E157             >len_NFA         defl    $ - temp_NFA
 842+ E157             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ E150             >
 842+ E150 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ E151 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 842+ E155 49 54 29    >
 842+ E158             >                org     $-1                 // alter last byte of Name just above to set
 842+ E157 A9          >                db      {b $} | END_BIT     // msb as name end
 842+ E158             >
 842+ E158 46 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 842+ E15A             >Prev_Ptr        defl    Heap_Ptr
 842+ E15A             >
 842+ E15A             >mirror_Ptr      defl    $
 842+ E15A             >
 842+ E15A D5 65       >                dw      Dict_Ptr + 2        // xt
 842+ E15C             >Heap_Ptr        defl    $ - $E000           // save current HP
 842+ E15C             >
 842+ E15C             >Current_HP      defl  $ - $E000             // used to set HP once!
 842+ E15C             >
 842+ E15C             >//              ______________________________________________________________________
 842+ E15C             >//              Dictionary part
 842+ E15C             >
 842+ E15C             >                org     Dict_Ptr
 842+ 65D3             >
 842+ 65D3 5A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 842+ 65D5             >
 842+ 65D5             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ 65D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 842+ 65D5 ~           >
 842+ 65D5 ~           >
 842+ 65D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ 65D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ 65D5             >
 842+ 65D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 843+ 65D5 D9                           exx
 844+ 65D6 D1                           pop     de
 845+ 65D7 7B                           ld      a, e                //  de has c1
 846+ 65D8
 847+ 65D8 FE 90                        cp      $90  // allow standard udg
 848+ 65DA 38 02                        jr      c,  C_Emit_n_udg
 849+ 65DC
 850+ 65DC E6 7F                          and     $7F                 // 7-bit ascii only
 851+ 65DE              C_Emit_n_udg:
 852+ 65DE
 853+ 65DE                              // push    bc                  // save Instruction Pointer
 854+ 65DE 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 855+ 65E1 21 D2 65                     ld      hl, Emit_Selector_End
 856+ 65E4 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 857+ 65E6 20 0A                        jr      nz, C_Emit_Not_Found
 858+ 65E8                                  // Found then decode it
 859+ 65E8 21 BB 65                         ld      hl, Emitc_Vec
 860+ 65EB 09                               add     hl, bc
 861+ 65EC 09                               add     hl, bc
 862+ 65ED 5E                               ld      e, (hl)
 863+ 65EE 23                               inc     hl
 864+ 65EF 56                               ld      d, (hl)
 865+ 65F0 EB                               ex      de, hl
 866+ 65F1                                  // pop     bc                  // restore Instruction Pointer
 867+ 65F1 E9                               jp      (hl)                // one of the following labels
 868+ 65F2              C_Emit_Not_Found:
 869+ 65F2                              // pop     bc                  // restore Instruction Pointer
 870+ 65F2 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 871+ 65F4 30 02                        jr      nc, C_Emit_Printable
 872+ 65F6 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 873+ 65F8              C_Emit_Printable:
 874+ 65F8 6F                           ld      l, a
 875+ 65F9 26 00                        ld      h, 0
 876+ 65FB E5                           push    hl
 877+ 65FC D9                           exx
 878+ 65FD                              next
 878+ 65FD DD E9       >                jp      (ix)
 879+ 65FF
 880+ 65FF              C_Emit_Bel:
 881+ 65FF D9                            exx
 882+ 6600 C5                           push    bc                  // save Instruction Pointer
 883+ 6601 D5                           push    de
 884+ 6602 11 00 01                     ld      de, $0100
 885+ 6605 21 00 02                     ld      hl, $0200
 886+ 6608 DD E5                        push    ix                  // save Next Pointer
 887+ 660A CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 888+ 660D
 889+ 660D
 890+ 660D
 891+ 660D
 892+ 660D DD E1                        pop     ix                  // restore Next Pointer
 893+ 660F D1                           pop     de
 894+ 6610 C1                           pop     bc                  // restore Instruction Pointer
 895+ 6611 21 00 00                     ld      hl, NUL_CHAR
 896+ 6614 E5                           push    hl
 897+ 6615                              next
 897+ 6615 DD E9       >                jp      (ix)
 898+ 6617
 899+ 6617 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 900+ 6619 18 DD                        jr      C_Emit_Printable
 901+ 661B                          //  push    hl
 902+ 661B                          //  exx
 903+ 661B                          //  next
 904+ 661B
 905+ 661B 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 906+ 661D 18 D9                        jr      C_Emit_Printable
 907+ 661F                          //  push    hl
 908+ 661F                          //  exx
 909+ 661F                          //  next
 910+ 661F
 911+ 661F              //  ______________________________________________________________________
 912+ 661F
 913+ 661F              Key_Table:
 914+ 661F E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 915+ 6620 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 916+ 6621 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 917+ 6622 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 918+ 6623 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 919+ 6624 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 920+ 6625 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 921+ 6626 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 922+ 6627 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 923+ 6628 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 924+ 6629 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 925+ 662A              Key_MapTo:
 926+ 662A 18                           db      $18                 // 10: ^X
 927+ 662B 03                           db      $03                 //  9: ^C
 928+ 662C 1A                           db      $1A                 //  8: ^Z
 929+ 662D 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 930+ 662E 5D                           db      $5D                 //  6: SYMBOL+U : ]
 931+ 662F 5B                           db      $5B                 //  5: SYMBOL+Y : [
 932+ 6630 7D                           db      $7D                 //  4: SYMBOL+G : }
 933+ 6631 7B                           db      $7B                 //  3: SYMBOL+F : {
 934+ 6632 5C                           db      $5C                 //  2: SYMBOl+D : //
 935+ 6633 7C                           db      $7C                 //  1: SYMBOL+S : |
 936+ 6634 7E                           db      $7E                 //  0: SYMBOL+A : ~
 937+ 6635
 938+ 6635              //  ______________________________________________________________________
 939+ 6635
 940+ 6635                              New_Def ONE_FRAME, "1FRAME", is_code, is_normal
 940+ 6635             >
 940+ 6635             >Dict_Ptr        defl    $
 940+ 6635             >
 940+ 6635             >//              ______________________________________________________________________
 940+ 6635             >//              Heap part
 940+ 6635             >
 940+ 6635             >
 940+ 6635             >                org     (Heap_Ptr & $1FFF) + $E000
 940+ E15C             >
 940+ E15C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ E15C             >Latest_Definition defl  Heap_Ptr
 940+ E15C             >
 940+ E15C             >                // dummy db directives used to calculate length of namec
 940+ E15C 31 46 52 41 >                db      "1FRAME"
 940+ E160 4D 45       >
 940+ E162             >len_NFA         defl    $ - temp_NFA
 940+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ E15C             >
 940+ E15C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ E15D 31 46 52 41 >                db      "1FRAME"               // name string in 7-bit ascii, but
 940+ E161 4D 45       >
 940+ E163             >                org     $-1                 // alter last byte of Name just above to set
 940+ E162 C5          >                db      {b $} | END_BIT     // msb as name end
 940+ E163             >
 940+ E163 50 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 940+ E165             >Prev_Ptr        defl    Heap_Ptr
 940+ E165             >
 940+ E165             >mirror_Ptr      defl    $
 940+ E165             >
 940+ E165 37 66       >                dw      Dict_Ptr + 2        // xt
 940+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 940+ E167             >
 940+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 940+ E167             >
 940+ E167             >//              ______________________________________________________________________
 940+ E167             >//              Dictionary part
 940+ E167             >
 940+ E167             >                org     Dict_Ptr
 940+ 6635             >
 940+ 6635 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 940+ 6637             >
 940+ 6637             >ONE_FRAME:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 6637 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 940+ 6637 ~           >
 940+ 6637 ~           >
 940+ 6637             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 6637             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 6637             >
 940+ 6637             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 6637 FB                           ei
 942+ 6638 76                           halt
 943+ 6639                              next
 943+ 6639 DD E9       >                jp      (ix)
 944+ 663B
 945+ 663B              //  ______________________________________________________________________
 946+ 663B              //
 947+ 663B              // curs         --
 948+ 663B              // wait for a keypress
 949+ 663B              // This definition need Standard ROM Interrupt to be served
 950+ 663B              //
 951+ 663B              //                New_Def CURS, "CURS", is_code, is_normal
 952+ 663B              //
 953+ 663B              //                push    bc                  // save Instruction Pointer
 954+ 663B              //                push    de                  // save Return Stack Pointer
 955+ 663B              //                push    ix
 956+ 663B              //                ld      (SP_Saved), sp      // be sure to not to be paged out.
 957+ 663B              //
 958+ 663B              //                ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 959+ 663B              //                res     5, (iy + 1)         // FLAGS (5C3A+1)
 960+ 663B              //
 961+ 663B              //Cur_Wait:
 962+ 663B              //                    halt
 963+ 663B              //                    ld      a, 2                // selec channel #2 (Upper Video)
 964+ 663B              //                    call    $1601               // SELECT Standard-ROM Routine
 965+ 663B              //
 966+ 663B              //
 967+ 663B              //
 968+ 663B              //                    // software-flash: flips face every 320 ms
 969+ 663B              //                    ld      a, $20              // Timing based
 970+ 663B              //                    and     (iy + $3E)          // FRAMES (5C3A+3E)
 971+ 663B              //
 972+ 663B              //                    ld      a, (Block_Face)     // see origin.asm
 973+ 663B              //                    jr      nz, Cur_Cursor
 974+ 663B              //                        ld      a, (Half_Face)      // see origin.asm
 975+ 663B              //                        bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 976+ 663B              //                        jr      z, Cur_Cursor
 977+ 663B              //                            ld      a, (Underscore_Face) // see origin
 978+ 663B              //Cur_Cursor:
 979+ 663B              //                    rst     $10
 980+ 663B              //                    ld      a, BACKSPACE_CHAR    // backspace
 981+ 663B              //                    rst     $10
 982+ 663B              //                    bit     5, (iy + 1)         // FLAGS (5C3A+1)
 983+ 663B              //                jr      z, Cur_Wait
 984+ 663B              //
 985+ 663B              //                halt    // this is to sync flashing cursor.
 986+ 663B              //
 987+ 663B              //                ld      a, BLANK_CHAR       // space to blank cursor
 988+ 663B              //                rst     $10
 989+ 663B              //                ld      a, BACKSPACE_CHAR   // backspace
 990+ 663B              //                rst     $10
 991+ 663B              //
 992+ 663B              //                ld      sp, (SP_Saved)
 993+ 663B              //
 994+ 663B              //                pop     ix
 995+ 663B              //                pop     de                  // Restore Return Stack Pointer
 996+ 663B              //                pop     bc                  // Restore Instruction Pointer
 997+ 663B              //                next
 998+ 663B              // 72 bytes
 999+ 663B
1000+ 663B              //  ______________________________________________________________________
1001+ 663B              //
1002+ 663B              // key          -- c
1003+ 663B              // This definition need Standard ROM Interrupt to be served
1004+ 663B
1005+ 663B                              New_Def KEY, "KEY", is_code, is_normal
1005+ 663B             >
1005+ 663B             >Dict_Ptr        defl    $
1005+ 663B             >
1005+ 663B             >//              ______________________________________________________________________
1005+ 663B             >//              Heap part
1005+ 663B             >
1005+ 663B             >
1005+ 663B             >                org     (Heap_Ptr & $1FFF) + $E000
1005+ E167             >
1005+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ E167             >Latest_Definition defl  Heap_Ptr
1005+ E167             >
1005+ E167             >                // dummy db directives used to calculate length of namec
1005+ E167 4B 45 59    >                db      "KEY"
1005+ E16A             >len_NFA         defl    $ - temp_NFA
1005+ E16A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ E167             >
1005+ E167 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ E168 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
1005+ E16B             >                org     $-1                 // alter last byte of Name just above to set
1005+ E16A D9          >                db      {b $} | END_BIT     // msb as name end
1005+ E16B             >
1005+ E16B 5C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1005+ E16D             >Prev_Ptr        defl    Heap_Ptr
1005+ E16D             >
1005+ E16D             >mirror_Ptr      defl    $
1005+ E16D             >
1005+ E16D 3D 66       >                dw      Dict_Ptr + 2        // xt
1005+ E16F             >Heap_Ptr        defl    $ - $E000           // save current HP
1005+ E16F             >
1005+ E16F             >Current_HP      defl  $ - $E000             // used to set HP once!
1005+ E16F             >
1005+ E16F             >//              ______________________________________________________________________
1005+ E16F             >//              Dictionary part
1005+ E16F             >
1005+ E16F             >                org     Dict_Ptr
1005+ 663B             >
1005+ 663B 6D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1005+ 663D             >
1005+ 663D             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 663D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1005+ 663D ~           >
1005+ 663D ~           >
1005+ 663D             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 663D             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 663D             >
1005+ 663D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 663D
1007+ 663D C5                           push    bc                  // Save Instruction Pointer
1008+ 663E
1009+ 663E              Key_Wait:
1010+ 663E FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
1011+ 6642 28 FA                        jr      z, Key_Wait
1012+ 6644
1013+ 6644 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
1014+ 6647
1015+ 6647                              // decode character from above table
1016+ 6647 21 1F 66                     ld      hl, Key_Table
1017+ 664A 01 0B 00                     ld      bc, $000B
1018+ 664D ED B1                        cpir
1019+ 664F 20 05                        jr      nz, Key_DontMap
1020+ 6651 21 2A 66                         ld      hl, Key_MapTo
1021+ 6654 09                               add     hl, bc
1022+ 6655 7E                               ld      a, (hl)
1023+ 6656 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
1024+ 6658 20 09                        jr      nz, Key_NoCapsLock
1025+ 665A 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
1026+ 665D 7E                               ld      a, (hl)
1027+ 665E EE 08                            xor     $08
1028+ 6660 77                               ld      (hl), a
1029+ 6661 3E 00                            ld      a, NUL_CHAR
1030+ 6663 6F           Key_NoCapsLock: ld      l, a
1031+ 6664 26 00                        ld      h, 0                // Prepare TOS
1032+ 6666
1033+ 6666 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
1034+ 666A
1035+ 666A C1                           pop     bc                  // Restore Instruction Pointer
1036+ 666B
1037+ 666B                              psh1
1037+ 666B E5          >                push    hl
1037+ 666C DD E9       >                jp      (ix)
1038+ 666E
1039+ 666E
1040+ 666E              //  ______________________________________________________________________
1041+ 666E              //
1042+ 666E              // click        --
1043+ 666E              // This definition need Standard ROM Interrupt to be served
1044+ 666E              //
1045+ 666E              //              New_Def CLICK, "CLICK", is_code, is_normal
1046+ 666E              //
1047+ 666E              //                push    bc
1048+ 666E              //              ld      a, ($5C48)          // BORDCR system variable
1049+ 666E              //              rra
1050+ 666E              //              rra
1051+ 666E              //              rra
1052+ 666E              //              or      $18                 // quick'n'dirty click
1053+ 666E              //              out     ($fe), a
1054+ 666E              //              ld      b, 0
1055+ 666E              //              djnz    $                   // wait loop
1056+ 666E              //              xor     $18
1057+ 666E              //              out     ($fe), a
1058+ 666E              //                pop     bc
1059+ 666E
1060+ 666E              //              next
1061+ 666E
1062+ 666E              //  ______________________________________________________________________
1063+ 666E              //
1064+ 666E              // key?         -- f
1065+ 666E              // key available
1066+ 666E              //
1067+ 666E              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1068+ 666E              //
1069+ 666E              //              ld      hl, 0000
1070+ 666E              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1071+ 666E              //              jr      z, Key_Q
1072+ 666E              //                  dec     hl
1073+ 666E              // Key_Q:
1074+ 666E              //                psh1
1075+ 666E              //              next
1076+ 666E
1077+ 666E              //  ______________________________________________________________________
1078+ 666E              //
1079+ 666E              // ?terminal    -- FALSE | TRUE
1080+ 666E              // test for BREAK keypress
1081+ 666E                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1081+ 666E             >
1081+ 666E             >Dict_Ptr        defl    $
1081+ 666E             >
1081+ 666E             >//              ______________________________________________________________________
1081+ 666E             >//              Heap part
1081+ 666E             >
1081+ 666E             >
1081+ 666E             >                org     (Heap_Ptr & $1FFF) + $E000
1081+ E16F             >
1081+ E16F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ E16F             >Latest_Definition defl  Heap_Ptr
1081+ E16F             >
1081+ E16F             >                // dummy db directives used to calculate length of namec
1081+ E16F 3F 54 45 52 >                db      "?TERMINAL"
1081+ E173 4D 49 4E 41 >
1081+ E177 4C          >
1081+ E178             >len_NFA         defl    $ - temp_NFA
1081+ E178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ E16F             >
1081+ E16F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ E170 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1081+ E174 4D 49 4E 41 >
1081+ E178 4C          >
1081+ E179             >                org     $-1                 // alter last byte of Name just above to set
1081+ E178 CC          >                db      {b $} | END_BIT     // msb as name end
1081+ E179             >
1081+ E179 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1081+ E17B             >Prev_Ptr        defl    Heap_Ptr
1081+ E17B             >
1081+ E17B             >mirror_Ptr      defl    $
1081+ E17B             >
1081+ E17B 70 66       >                dw      Dict_Ptr + 2        // xt
1081+ E17D             >Heap_Ptr        defl    $ - $E000           // save current HP
1081+ E17D             >
1081+ E17D             >Current_HP      defl  $ - $E000             // used to set HP once!
1081+ E17D             >
1081+ E17D             >//              ______________________________________________________________________
1081+ E17D             >//              Dictionary part
1081+ E17D             >
1081+ E17D             >                org     Dict_Ptr
1081+ 666E             >
1081+ 666E 7B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1081+ 6670             >
1081+ 6670             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 6670 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1081+ 6670 ~           >
1081+ 6670 ~           >
1081+ 6670             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 6670             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 6670             >
1081+ 6670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 6670 D9                           exx
1083+ 6671 01 FE 7F                     ld      bc, $7ffe
1084+ 6674 ED 50                        in      d, (c)
1085+ 6676 41                           ld      b, c
1086+ 6677 ED 78                        in      a, (c)
1087+ 6679 B2                           or       d
1088+ 667A 1F                           rra
1089+ 667B 3F                           ccf
1090+ 667C ED 62                        sbc     hl, hl
1091+ 667E E5                           push    hl
1092+ 667F D9                           exx
1093+ 6680                              next
1093+ 6680 DD E9       >                jp      (ix)
1094+ 6682
1095+ 6682
1096+ 6682              //  ______________________________________________________________________
1097+ 6682              //
1098+ 6682              // inkey        -- c | 0
1099+ 6682              // call ROM inkey$ routine, returns c or "zero".
1100+ 6682              //
1101+ 6682              //              New_Def INKEY, "INKEY", is_code, is_normal
1102+ 6682              //              push    bc
1103+ 6682              //              push    de
1104+ 6682              //              ld      (SP_Saved), sp
1105+ 6682              //              ld      sp, Cold_origin - 5
1106+ 6682              //              push    ix
1107+ 6682              //              call    $15E6                   // instead of 15E9
1108+ 6682              //              pop     ix
1109+ 6682              //              ld      sp, (SP_Saved)
1110+ 6682              //              ld      l, a
1111+ 6682              //              ld      h, 0
1112+ 6682              //              pop     de
1113+ 6682              //              pop     bc
1114+ 6682              //              psh1
1115+ 6682
1116+ 6682              //  ______________________________________________________________________
1117+ 6682              //
1118+ 6682              // select      n --
1119+ 6682              // selects the given channel number
1120+ 6682
1121+ 6682                              New_Def SELECT, "SELECT", is_code, is_normal
1121+ 6682             >
1121+ 6682             >Dict_Ptr        defl    $
1121+ 6682             >
1121+ 6682             >//              ______________________________________________________________________
1121+ 6682             >//              Heap part
1121+ 6682             >
1121+ 6682             >
1121+ 6682             >                org     (Heap_Ptr & $1FFF) + $E000
1121+ E17D             >
1121+ E17D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1121+ E17D             >Latest_Definition defl  Heap_Ptr
1121+ E17D             >
1121+ E17D             >                // dummy db directives used to calculate length of namec
1121+ E17D 53 45 4C 45 >                db      "SELECT"
1121+ E181 43 54       >
1121+ E183             >len_NFA         defl    $ - temp_NFA
1121+ E183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1121+ E17D             >
1121+ E17D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1121+ E17E 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1121+ E182 43 54       >
1121+ E184             >                org     $-1                 // alter last byte of Name just above to set
1121+ E183 D4          >                db      {b $} | END_BIT     // msb as name end
1121+ E184             >
1121+ E184 6F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1121+ E186             >Prev_Ptr        defl    Heap_Ptr
1121+ E186             >
1121+ E186             >mirror_Ptr      defl    $
1121+ E186             >
1121+ E186 84 66       >                dw      Dict_Ptr + 2        // xt
1121+ E188             >Heap_Ptr        defl    $ - $E000           // save current HP
1121+ E188             >
1121+ E188             >Current_HP      defl  $ - $E000             // used to set HP once!
1121+ E188             >
1121+ E188             >//              ______________________________________________________________________
1121+ E188             >//              Dictionary part
1121+ E188             >
1121+ E188             >                org     Dict_Ptr
1121+ 6682             >
1121+ 6682 86 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1121+ 6684             >
1121+ 6684             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1121+ 6684 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1121+ 6684 ~           >
1121+ 6684 ~           >
1121+ 6684             >                endif           ; ok        // for other definitions it "points" the correct handler
1121+ 6684             >                // Use of "; ok" to suppress "warning[fwdref]"
1121+ 6684             >
1121+ 6684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1122+ 6684 E1                           pop     hl
1123+ 6685 C5                           push    bc
1124+ 6686 D5                           push    de
1125+ 6687 7D                           ld      a, l
1126+ 6688 ED 73 92 63                  ld      (SP_Saved), sp
1127+ 668C 31 61 63                     ld      sp, Cold_origin - 5
1128+ 668F
1129+ 668F DD E5                        push    ix
1130+ 6691 CD 01 16                     call    $1601
1131+ 6694
1132+ 6694
1133+ 6694
1134+ 6694
1135+ 6694 DD E1                        pop     ix
1136+ 6696 ED 7B 92 63                  ld      sp, (SP_Saved)
1137+ 669A D1                           pop     de
1138+ 669B C1                           pop     bc
1139+ 669C                              next
1139+ 669C DD E9       >                jp      (ix)
1140+ 669E
1141+ 669E              //  ______________________________________________________________________
1142+ 669E              //
1143+ 669E              // ZX Spectrum Next - Low Level disk primitives.
1144+ 669E              // this include is "here" for backward compatibility
1145+ 669E
1146+ 669E                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
   1++669E              //  ______________________________________________________________________
   2++669E              //
   3++669E              //  next-opt.asm
   4++669E              //
   5++669E              //  ZX Spectrum Next - peculiar definitions
   6++669E              //  ______________________________________________________________________
   7++669E
   8++669E              //  ______________________________________________________________________
   9++669E              //
  10++669E              // f_seek       d u -- f
  11++669E              // Seek to position d in file-handle u.
  12++669E              // Return a false-flag 0 on success, True flag on error
  13++669E                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++669E             >
  13++669E             >Dict_Ptr        defl    $
  13++669E             >
  13++669E             >//              ______________________________________________________________________
  13++669E             >//              Heap part
  13++669E             >
  13++669E             >
  13++669E             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E188             >
  13++E188             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E188             >Latest_Definition defl  Heap_Ptr
  13++E188             >
  13++E188             >                // dummy db directives used to calculate length of namec
  13++E188 46 5F 53 45 >                db      "F_SEEK"
  13++E18C 45 4B       >
  13++E18E             >len_NFA         defl    $ - temp_NFA
  13++E18E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E188             >
  13++E188 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E189 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E18D 45 4B       >
  13++E18F             >                org     $-1                 // alter last byte of Name just above to set
  13++E18E CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18F             >
  13++E18F 7D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E191             >Prev_Ptr        defl    Heap_Ptr
  13++E191             >
  13++E191             >mirror_Ptr      defl    $
  13++E191             >
  13++E191 A0 66       >                dw      Dict_Ptr + 2        // xt
  13++E193             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E193             >
  13++E193             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E193             >
  13++E193             >//              ______________________________________________________________________
  13++E193             >//              Dictionary part
  13++E193             >
  13++E193             >                org     Dict_Ptr
  13++669E             >
  13++669E 91 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66A0             >
  13++66A0             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66A0 ~           >
  13++66A0 ~           >
  13++66A0             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66A0             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66A0             >
  13++66A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66A0 D9                            exx
  15++66A1 E1                            pop     hl                  // file-handle
  16++66A2 7D                            ld      a, l
  17++66A3 C1                            pop     bc                  // bc has high-word of d
  18++66A4 D1                            pop     de
  19++66A5 D9                           exx
  20++66A6 DD E5                        push    ix
  21++66A8 D5                           push    de
  22++66A9 C5                           push    bc                  // save Instruction Pointer
  23++66AA D9                            exx
  24++66AB DD 21 00 00                   ld      ix, 0
  25++66AF F3                            di
  26++66B0 CF                            rst     $08
  27++66B1 9F                            db      $9F
  28++66B2              F_Seek_Exit:
  29++66B2 FB                           ei
  30++66B3 C1                           pop     bc                  // restore Instruction Pointer
  31++66B4 D1                           pop     de
  32++66B5 DD E1                        pop     ix
  33++66B7 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66B9                              psh1
  34++66B9 E5          >                push    hl
  34++66BA DD E9       >                jp      (ix)
  35++66BC
  36++66BC              //  ______________________________________________________________________
  37++66BC              //
  38++66BC              // f_close      u -- f
  39++66BC              // Close file-handle u.
  40++66BC              // Return 0 on success, True flag on error
  41++66BC
  42++66BC                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66BC             >
  42++66BC             >Dict_Ptr        defl    $
  42++66BC             >
  42++66BC             >//              ______________________________________________________________________
  42++66BC             >//              Heap part
  42++66BC             >
  42++66BC             >
  42++66BC             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E193             >
  42++E193             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E193             >Latest_Definition defl  Heap_Ptr
  42++E193             >
  42++E193             >                // dummy db directives used to calculate length of namec
  42++E193 46 5F 43 4C >                db      "F_CLOSE"
  42++E197 4F 53 45    >
  42++E19A             >len_NFA         defl    $ - temp_NFA
  42++E19A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E193             >
  42++E193 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E194 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E198 4F 53 45    >
  42++E19B             >                org     $-1                 // alter last byte of Name just above to set
  42++E19A C5          >                db      {b $} | END_BIT     // msb as name end
  42++E19B             >
  42++E19B 88 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E19D             >Prev_Ptr        defl    Heap_Ptr
  42++E19D             >
  42++E19D             >mirror_Ptr      defl    $
  42++E19D             >
  42++E19D BE 66       >                dw      Dict_Ptr + 2        // xt
  42++E19F             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19F             >
  42++E19F             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19F             >
  42++E19F             >//              ______________________________________________________________________
  42++E19F             >//              Dictionary part
  42++E19F             >
  42++E19F             >                org     Dict_Ptr
  42++66BC             >
  42++66BC 9D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66BE             >
  42++66BE             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66BE ~           >
  42++66BE ~           >
  42++66BE             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66BE             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66BE             >
  42++66BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66BE
  44++66BE E1                           pop     hl
  45++66BF 7D                           ld      a, l                // file-handle
  46++66C0 DD E5                        push    ix
  47++66C2 D5                           push    de
  48++66C3 C5                           push    bc                  // Save Instruction pointer
  49++66C4 F3                           di
  50++66C5 CF                           rst     $08
  51++66C6 9B                           db      $9B
  52++66C7 18 E9                        jr      F_Seek_Exit
  53++66C9              //              ei
  54++66C9              //              pop     de
  55++66C9              //              pop     bc
  56++66C9              //              pop     ix
  57++66C9              //              sbc     hl, hl
  58++66C9              //              psh1
  59++66C9
  60++66C9              //  ______________________________________________________________________
  61++66C9              //
  62++66C9              // f_sync      u -- f
  63++66C9              // Close file-handle u.
  64++66C9              // Return 0 on success, True flag on error
  65++66C9
  66++66C9                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++66C9             >
  66++66C9             >Dict_Ptr        defl    $
  66++66C9             >
  66++66C9             >//              ______________________________________________________________________
  66++66C9             >//              Heap part
  66++66C9             >
  66++66C9             >
  66++66C9             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19F             >
  66++E19F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19F             >Latest_Definition defl  Heap_Ptr
  66++E19F             >
  66++E19F             >                // dummy db directives used to calculate length of namec
  66++E19F 46 5F 53 59 >                db      "F_SYNC"
  66++E1A3 4E 43       >
  66++E1A5             >len_NFA         defl    $ - temp_NFA
  66++E1A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19F             >
  66++E19F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E1A0 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E1A4 4E 43       >
  66++E1A6             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A5 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A6             >
  66++E1A6 93 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A8             >Prev_Ptr        defl    Heap_Ptr
  66++E1A8             >
  66++E1A8             >mirror_Ptr      defl    $
  66++E1A8             >
  66++E1A8 CB 66       >                dw      Dict_Ptr + 2        // xt
  66++E1AA             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1AA             >
  66++E1AA             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1AA             >
  66++E1AA             >//              ______________________________________________________________________
  66++E1AA             >//              Dictionary part
  66++E1AA             >
  66++E1AA             >                org     Dict_Ptr
  66++66C9             >
  66++66C9 A8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++66CB             >
  66++66CB             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++66CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++66CB ~           >
  66++66CB ~           >
  66++66CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++66CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++66CB             >
  66++66CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++66CB E1                           pop     hl
  68++66CC 7D                           ld      a, l                // file-handle
  69++66CD DD E5                        push    ix
  70++66CF D5                           push    de
  71++66D0 C5                           push    bc
  72++66D1 F3                           di
  73++66D2 CF                           rst     $08
  74++66D3 9C                           db      $9C
  75++66D4 18 DC                        jr      F_Seek_Exit
  76++66D6              //              ei
  77++66D6              //              pop     de
  78++66D6              //              pop     bc
  79++66D6              //              pop     ix
  80++66D6              //              sbc     hl, hl
  81++66D6              //              psh1
  82++66D6
  83++66D6              //  ______________________________________________________________________
  84++66D6              //
  85++66D6              // f_fgetpos    u -- d f
  86++66D6              // Seek to position d in file-handle u.
  87++66D6              // Return a false-flag 0 on success, True flag on error
  88++66D6                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++66D6             >
  88++66D6             >Dict_Ptr        defl    $
  88++66D6             >
  88++66D6             >//              ______________________________________________________________________
  88++66D6             >//              Heap part
  88++66D6             >
  88++66D6             >
  88++66D6             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1AA             >
  88++E1AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1AA             >Latest_Definition defl  Heap_Ptr
  88++E1AA             >
  88++E1AA             >                // dummy db directives used to calculate length of namec
  88++E1AA 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1AE 45 54 50 4F >
  88++E1B2 53          >
  88++E1B3             >len_NFA         defl    $ - temp_NFA
  88++E1B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1AA             >
  88++E1AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1AB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AF 45 54 50 4F >
  88++E1B3 53          >
  88++E1B4             >                org     $-1                 // alter last byte of Name just above to set
  88++E1B3 D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1B4             >
  88++E1B4 9F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B6             >Prev_Ptr        defl    Heap_Ptr
  88++E1B6             >
  88++E1B6             >mirror_Ptr      defl    $
  88++E1B6             >
  88++E1B6 D8 66       >                dw      Dict_Ptr + 2        // xt
  88++E1B8             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B8             >
  88++E1B8             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B8             >
  88++E1B8             >//              ______________________________________________________________________
  88++E1B8             >//              Dictionary part
  88++E1B8             >
  88++E1B8             >                org     Dict_Ptr
  88++66D6             >
  88++66D6 B6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++66D8             >
  88++66D8             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++66D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++66D8 ~           >
  88++66D8 ~           >
  88++66D8             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++66D8             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++66D8             >
  88++66D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++66D8 E1                            pop     hl
  90++66D9 7D                            ld      a, l                // file-handle
  91++66DA DD E5                         push    ix
  92++66DC D5                            push    de
  93++66DD C5                            push    bc
  94++66DE F3                            di
  95++66DF CF                            rst     $08
  96++66E0 A0                            db      $A0
  97++66E1 FB                            ei
  98++66E2 D9                           exx
  99++66E3 C1                           pop     bc                  // IP
 100++66E4 D1                           pop     de                  // Return Stack Pointer
 101++66E5 DD E1                        pop     ix
 102++66E7 D9                            exx
 103++66E8 D5                            push    de
 104++66E9 C5                            push    bc
 105++66EA ED 62                         sbc     hl, hl
 106++66EC E5                            push    hl
 107++66ED D9                           exx
 108++66EE                              next
 108++66EE DD E9       >                jp      (ix)
 109++66F0
 110++66F0              //  ______________________________________________________________________
 111++66F0              //
 112++66F0              // f_read       a b u -- n f
 113++66F0              // Read b bytes from file-handle u to address a
 114++66F0              // Return the actual number n of bytes read
 115++66F0              // Return 0 on success, True flag on error
 116++66F0                              New_Def F_READ, "F_READ", is_code, is_normal
 116++66F0             >
 116++66F0             >Dict_Ptr        defl    $
 116++66F0             >
 116++66F0             >//              ______________________________________________________________________
 116++66F0             >//              Heap part
 116++66F0             >
 116++66F0             >
 116++66F0             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B8             >
 116++E1B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B8             >Latest_Definition defl  Heap_Ptr
 116++E1B8             >
 116++E1B8             >                // dummy db directives used to calculate length of namec
 116++E1B8 46 5F 52 45 >                db      "F_READ"
 116++E1BC 41 44       >
 116++E1BE             >len_NFA         defl    $ - temp_NFA
 116++E1BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B8             >
 116++E1B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B9 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1BD 41 44       >
 116++E1BF             >                org     $-1                 // alter last byte of Name just above to set
 116++E1BE C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BF             >
 116++E1BF AA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1C1             >Prev_Ptr        defl    Heap_Ptr
 116++E1C1             >
 116++E1C1             >mirror_Ptr      defl    $
 116++E1C1             >
 116++E1C1 F2 66       >                dw      Dict_Ptr + 2        // xt
 116++E1C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1C3             >
 116++E1C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1C3             >
 116++E1C3             >//              ______________________________________________________________________
 116++E1C3             >//              Dictionary part
 116++E1C3             >
 116++E1C3             >                org     Dict_Ptr
 116++66F0             >
 116++66F0 C1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++66F2             >
 116++66F2             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++66F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++66F2 ~           >
 116++66F2 ~           >
 116++66F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++66F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++66F2             >
 116++66F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++66F2 D9                            exx
 118++66F3 E1                            pop     hl
 119++66F4 7D                            ld      a, l                // file-handle
 120++66F5 C1                            pop     bc                  // bc has bytes to read
 121++66F6 DD E3                         ex      (sp), ix            // ix has address
 122++66F8 D9                           exx
 123++66F9 D5                           push    de                  // Save Return Stack pointer
 124++66FA C5                           push    bc                  // Save Instruction pointer
 125++66FB D9                            exx
 126++66FC F3                            di
 127++66FD CF                            rst     $08
 128++66FE 9D                            db      $9D
 129++66FF              F_Read_Exit:
 130++66FF FB                           ei
 131++6700 D9                           exx
 132++6701 C1                           pop     bc                  // Restore Instruction pointer
 133++6702 D1                           pop     de                  // Restore Return Stack pointer
 134++6703 DD E1                        pop     ix                  // Restore ix
 135++6705 D9                            exx
 136++6706 D5                            push    de                  // bytes involved in i/o operation
 137++6707 ED 62                         sbc     hl, hl
 138++6709 E5                            push    hl
 139++670A D9                           exx
 140++670B                              next
 140++670B DD E9       >                jp      (ix)
 141++670D
 142++670D              //  ______________________________________________________________________
 143++670D              //
 144++670D              // f_write      a n u -- n f
 145++670D              // Write bytes currently stored at address a to file-handle u.
 146++670D              // Return the actual n bytes written and 0 on success, True flag on error.
 147++670D                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++670D             >
 147++670D             >Dict_Ptr        defl    $
 147++670D             >
 147++670D             >//              ______________________________________________________________________
 147++670D             >//              Heap part
 147++670D             >
 147++670D             >
 147++670D             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1C3             >
 147++E1C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1C3             >Latest_Definition defl  Heap_Ptr
 147++E1C3             >
 147++E1C3             >                // dummy db directives used to calculate length of namec
 147++E1C3 46 5F 57 52 >                db      "F_WRITE"
 147++E1C7 49 54 45    >
 147++E1CA             >len_NFA         defl    $ - temp_NFA
 147++E1CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1C3             >
 147++E1C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1C4 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C8 49 54 45    >
 147++E1CB             >                org     $-1                 // alter last byte of Name just above to set
 147++E1CA C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1CB             >
 147++E1CB B8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1CD             >Prev_Ptr        defl    Heap_Ptr
 147++E1CD             >
 147++E1CD             >mirror_Ptr      defl    $
 147++E1CD             >
 147++E1CD 0F 67       >                dw      Dict_Ptr + 2        // xt
 147++E1CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1CF             >
 147++E1CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1CF             >
 147++E1CF             >//              ______________________________________________________________________
 147++E1CF             >//              Dictionary part
 147++E1CF             >
 147++E1CF             >                org     Dict_Ptr
 147++670D             >
 147++670D CD 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++670F             >
 147++670F             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++670F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++670F ~           >
 147++670F ~           >
 147++670F             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++670F             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++670F             >
 147++670F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++670F D9                            exx
 149++6710 E1                            pop     hl
 150++6711 7D                            ld      a, l                // file-handle
 151++6712 C1                            pop     bc                  // bc has bytes to read
 152++6713 DD E3                         ex      (sp), ix            // ix has address
 153++6715 D9                           exx
 154++6716 D5                           push    de                  // Save Return Stack pointer
 155++6717 C5                           push    bc                  // Save Instruction pointer
 156++6718 D9                            exx
 157++6719 F3                            di
 158++671A CF                            rst     $08
 159++671B 9E                            db      $9E
 160++671C 18 E1                         jr F_Read_Exit
 161++671E              //                ei
 162++671E              //                exx
 163++671E              //                pop     de                  // Restore Return Stack pointer
 164++671E              //                pop     bc                  // Restore Instruction pointer
 165++671E              //                pop     ix                  // Restore ix
 166++671E              //                 exx
 167++671E              //                 push    de                  // bytes involved in i/o operation
 168++671E              //                 sbc     hl, hl
 169++671E              //                 push    hl
 170++671E              //                exx
 171++671E              //                next
 172++671E
 173++671E              //  ______________________________________________________________________
 174++671E              //
 175++671E              // f_open       a1 a2 b -- u f
 176++671E              // open a file
 177++671E              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++671E              // a2 is address to an 8-byte header data used in some cases.
 179++671E              // b is access mode-byte, that is a combination of:
 180++671E              // any/all of:
 181++671E              //   esx_mode_read          $01 request read access
 182++671E              //   esx_mode_write         $02 request write access
 183++671E              //   esx_mode_use_header    $40 read/write +3DOS header
 184++671E              // plus one of:
 185++671E              //   esx_mode_open_exist    $00 only open existing file
 186++671E              //   esx_mode_open_creat    $08 open existing or create file
 187++671E              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++671E              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++671E              // Return file-handle u and 0 on success, True flag on error
 190++671E                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++671E             >
 190++671E             >Dict_Ptr        defl    $
 190++671E             >
 190++671E             >//              ______________________________________________________________________
 190++671E             >//              Heap part
 190++671E             >
 190++671E             >
 190++671E             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1CF             >
 190++E1CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1CF             >Latest_Definition defl  Heap_Ptr
 190++E1CF             >
 190++E1CF             >                // dummy db directives used to calculate length of namec
 190++E1CF 46 5F 4F 50 >                db      "F_OPEN"
 190++E1D3 45 4E       >
 190++E1D5             >len_NFA         defl    $ - temp_NFA
 190++E1D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1CF             >
 190++E1CF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1D0 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1D4 45 4E       >
 190++E1D6             >                org     $-1                 // alter last byte of Name just above to set
 190++E1D5 CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1D6             >
 190++E1D6 C3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D8             >Prev_Ptr        defl    Heap_Ptr
 190++E1D8             >
 190++E1D8             >mirror_Ptr      defl    $
 190++E1D8             >
 190++E1D8 20 67       >                dw      Dict_Ptr + 2        // xt
 190++E1DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1DA             >
 190++E1DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1DA             >
 190++E1DA             >//              ______________________________________________________________________
 190++E1DA             >//              Dictionary part
 190++E1DA             >
 190++E1DA             >                org     Dict_Ptr
 190++671E             >
 190++671E D8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++6720             >
 190++6720             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6720 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6720 ~           >
 190++6720 ~           >
 190++6720             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6720             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6720             >
 190++6720             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6720 D9                            exx
 192++6721 C1                            pop     bc                  // file-mode
 193++6722 41                            ld      b, c                // file-mode
 194++6723 D1                            pop     de                  // 8-bytes buffer if any
 195++6724 DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++6726 D9                           exx
 197++6727 D5                           push    de                  // Save Return Stack pointer
 198++6728 C5                           push    bc                  // Save Instruction pointer
 199++6729 D9                            exx
 200++672A 3E 2A                         ld      a, "*"
 201++672C F3                            di
 202++672D CF                            rst     $08
 203++672E 9A                            db      $9A
 204++672F              F_Open_Exit:
 205++672F              //               ei                         // removed because is repeated in f_read_exit
 206++672F 5F                            ld      e, a                // return the handle-number
 207++6730 16 00                         ld      d, 0
 208++6732 18 CB                        jr F_Read_Exit
 209++6734
 210++6734              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++6734              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++6734              //   \ DROP
 213++6734              //   \ F_CLOSE
 214++6734
 215++6734
 216++6734              //  ______________________________________________________________________
 217++6734              //
 218++6734              // f_opendir    a1 -- u f
 219++6734              // open a file
 220++6734                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++6734             >
 220++6734             >Dict_Ptr        defl    $
 220++6734             >
 220++6734             >//              ______________________________________________________________________
 220++6734             >//              Heap part
 220++6734             >
 220++6734             >
 220++6734             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1DA             >
 220++E1DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1DA             >Latest_Definition defl  Heap_Ptr
 220++E1DA             >
 220++E1DA             >                // dummy db directives used to calculate length of namec
 220++E1DA 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1DE 45 4E 44 49 >
 220++E1E2 52          >
 220++E1E3             >len_NFA         defl    $ - temp_NFA
 220++E1E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1DA             >
 220++E1DA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1DB 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1DF 45 4E 44 49 >
 220++E1E3 52          >
 220++E1E4             >                org     $-1                 // alter last byte of Name just above to set
 220++E1E3 D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1E4             >
 220++E1E4 CF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1E6             >Prev_Ptr        defl    Heap_Ptr
 220++E1E6             >
 220++E1E6             >mirror_Ptr      defl    $
 220++E1E6             >
 220++E1E6 36 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E8             >
 220++E1E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E8             >
 220++E1E8             >//              ______________________________________________________________________
 220++E1E8             >//              Dictionary part
 220++E1E8             >
 220++E1E8             >                org     Dict_Ptr
 220++6734             >
 220++6734 E6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++6736             >
 220++6736             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++6736 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++6736 ~           >
 220++6736 ~           >
 220++6736             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++6736             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++6736             >
 220++6736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++6736 DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++6738 D5                           push    de                  // Save Return Stack pointer
 223++6739 C5                           push    bc                  // Save Instruction pointer
 224++673A 06 10                        ld      b, $10              // file-mode
 225++673C 3E 43                        ld      a, "C"
 226++673E F3                           di
 227++673F CF                           rst     $08
 228++6740 A3                           db      $A3
 229++6741 18 EC                        jr      F_Open_Exit
 230++6743
 231++6743
 232++6743              //  ______________________________________________________________________
 233++6743              //
 234++6743              // f_readdir    a1 a2 b -- u f
 235++6743              // open a file
 236++6743                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++6743             >
 236++6743             >Dict_Ptr        defl    $
 236++6743             >
 236++6743             >//              ______________________________________________________________________
 236++6743             >//              Heap part
 236++6743             >
 236++6743             >
 236++6743             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E8             >
 236++E1E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E8             >Latest_Definition defl  Heap_Ptr
 236++E1E8             >
 236++E1E8             >                // dummy db directives used to calculate length of namec
 236++E1E8 46 5F 52 45 >                db      "F_READDIR"
 236++E1EC 41 44 44 49 >
 236++E1F0 52          >
 236++E1F1             >len_NFA         defl    $ - temp_NFA
 236++E1F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E8             >
 236++E1E8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E9 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1ED 41 44 44 49 >
 236++E1F1 52          >
 236++E1F2             >                org     $-1                 // alter last byte of Name just above to set
 236++E1F1 D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1F2             >
 236++E1F2 DA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1F4             >Prev_Ptr        defl    Heap_Ptr
 236++E1F4             >
 236++E1F4             >mirror_Ptr      defl    $
 236++E1F4             >
 236++E1F4 45 67       >                dw      Dict_Ptr + 2        // xt
 236++E1F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1F6             >
 236++E1F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1F6             >
 236++E1F6             >//              ______________________________________________________________________
 236++E1F6             >//              Dictionary part
 236++E1F6             >
 236++E1F6             >                org     Dict_Ptr
 236++6743             >
 236++6743 F4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++6745             >
 236++6745             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++6745 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++6745 ~           >
 236++6745 ~           >
 236++6745             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++6745             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++6745             >
 236++6745             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++6745 D9                            exx
 238++6746 E1                            pop     hl
 239++6747 7D                            ld      a, l
 240++6748 D1                            pop     de
 241++6749 DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++674B D9                           exx
 243++674C D5                           push    de                  // Save Return Stack pointer
 244++674D C5                           push    bc                  // Save Instruction pointer
 245++674E D9                            exx
 246++674F F3                            di
 247++6750 CF                            rst     $08
 248++6751 A4                            db      $A4
 249++6752 18 DB                         jr      F_Open_Exit
 250++6754
 251++6754
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
1147+ 6754
1148+ 6754
1149+ 6754              //  ______________________________________________________________________
1150+ 6754              //
1151+ 6754              // cmove    a1 a2 u --
1152+ 6754              // If u > 0, moves memory content starting at address a1 for n bytes long
1153+ 6754              // storing then starting at address addr2.
1154+ 6754              // The content of a1 is moved first. See CMOVE> also.
1155+ 6754                              New_Def CMOVE, "CMOVE", is_code, is_normal
1155+ 6754             >
1155+ 6754             >Dict_Ptr        defl    $
1155+ 6754             >
1155+ 6754             >//              ______________________________________________________________________
1155+ 6754             >//              Heap part
1155+ 6754             >
1155+ 6754             >
1155+ 6754             >                org     (Heap_Ptr & $1FFF) + $E000
1155+ E1F6             >
1155+ E1F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ E1F6             >Latest_Definition defl  Heap_Ptr
1155+ E1F6             >
1155+ E1F6             >                // dummy db directives used to calculate length of namec
1155+ E1F6 43 4D 4F 56 >                db      "CMOVE"
1155+ E1FA 45          >
1155+ E1FB             >len_NFA         defl    $ - temp_NFA
1155+ E1FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ E1F6             >
1155+ E1F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ E1F7 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1155+ E1FB 45          >
1155+ E1FC             >                org     $-1                 // alter last byte of Name just above to set
1155+ E1FB C5          >                db      {b $} | END_BIT     // msb as name end
1155+ E1FC             >
1155+ E1FC E8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1155+ E1FE             >Prev_Ptr        defl    Heap_Ptr
1155+ E1FE             >
1155+ E1FE             >mirror_Ptr      defl    $
1155+ E1FE             >
1155+ E1FE 56 67       >                dw      Dict_Ptr + 2        // xt
1155+ E200             >Heap_Ptr        defl    $ - $E000           // save current HP
1155+ E200             >
1155+ E200             >Current_HP      defl  $ - $E000             // used to set HP once!
1155+ E200             >
1155+ E200             >//              ______________________________________________________________________
1155+ E200             >//              Dictionary part
1155+ E200             >
1155+ E200             >                org     Dict_Ptr
1155+ 6754             >
1155+ 6754 FE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1155+ 6756             >
1155+ 6756             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 6756 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1155+ 6756 ~           >
1155+ 6756 ~           >
1155+ 6756             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 6756             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 6756             >
1155+ 6756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 6756 D9                           exx
1157+ 6757
1158+ 6757 C1                           pop     bc                  // bc has counter
1159+ 6758 D1                           pop     de                  // de now has dest
1160+ 6759 E1                           pop     hl                 // hl has source, save Instruction Pointer
1161+ 675A 78                           ld      a, b
1162+ 675B B1                           or      c
1163+ 675C 28 02                        jr      z, Cmove_NoMove
1164+ 675E ED B0                            ldir
1165+ 6760              Cmove_NoMove:
1166+ 6760 D9                           exx
1167+ 6761
1168+ 6761                              next
1168+ 6761 DD E9       >                jp      (ix)
1169+ 6763
1170+ 6763              //  ______________________________________________________________________
1171+ 6763              //
1172+ 6763              // cmove>    a1 a2 u --
1173+ 6763              // If u > 0, moves memory content starting at address a1 for n bytes long
1174+ 6763              // storing then starting at address addr2.
1175+ 6763              // The content of a1 is moved last. See cmove.
1176+ 6763                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1176+ 6763             >
1176+ 6763             >Dict_Ptr        defl    $
1176+ 6763             >
1176+ 6763             >//              ______________________________________________________________________
1176+ 6763             >//              Heap part
1176+ 6763             >
1176+ 6763             >
1176+ 6763             >                org     (Heap_Ptr & $1FFF) + $E000
1176+ E200             >
1176+ E200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ E200             >Latest_Definition defl  Heap_Ptr
1176+ E200             >
1176+ E200             >                // dummy db directives used to calculate length of namec
1176+ E200 43 4D 4F 56 >                db      "CMOVE>"
1176+ E204 45 3E       >
1176+ E206             >len_NFA         defl    $ - temp_NFA
1176+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ E200             >
1176+ E200 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ E201 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1176+ E205 45 3E       >
1176+ E207             >                org     $-1                 // alter last byte of Name just above to set
1176+ E206 BE          >                db      {b $} | END_BIT     // msb as name end
1176+ E207             >
1176+ E207 F6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1176+ E209             >Prev_Ptr        defl    Heap_Ptr
1176+ E209             >
1176+ E209             >mirror_Ptr      defl    $
1176+ E209             >
1176+ E209 65 67       >                dw      Dict_Ptr + 2        // xt
1176+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1176+ E20B             >
1176+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1176+ E20B             >
1176+ E20B             >//              ______________________________________________________________________
1176+ E20B             >//              Dictionary part
1176+ E20B             >
1176+ E20B             >                org     Dict_Ptr
1176+ 6763             >
1176+ 6763 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1176+ 6765             >
1176+ 6765             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 6765 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1176+ 6765 ~           >
1176+ 6765 ~           >
1176+ 6765             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 6765             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 6765             >
1176+ 6765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 6765 D9                           exx
1178+ 6766
1179+ 6766 C1                           pop     bc                  // bc has counter
1180+ 6767 D1                           pop     de                  // de has dest
1181+ 6768 E1                           pop     hl                  // hl has source, save Instruction Pointer
1182+ 6769 78                           ld      a, b
1183+ 676A B1                           or      c
1184+ 676B 28 F3                        jr      z, Cmove_NoMove  // CmoveV_NoMove
1185+ 676D EB                               ex      de, hl              // compute address to
1186+ 676E 09                               add     hl, bc              // operate backward
1187+ 676F 2B                               dec     hl
1188+ 6770 EB                               ex      de, hl
1189+ 6771 09                               add     hl, bc
1190+ 6772 2B                               dec     hl
1191+ 6773 ED B8                            lddr                        // backward
1192+ 6775 18 E9                            jr      Cmove_NoMove
1193+ 6777              // CmoveV_NoMove:
1194+ 6777              //                 exx
1195+ 6777              //
1196+ 6777              //                 next
1197+ 6777
1198+ 6777              //  ______________________________________________________________________
1199+ 6777              //
1200+ 6777              // um*      u1 u2 -- ud
1201+ 6777              // Unsigned multiplication
1202+ 6777              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1203+ 6777              // On the stack a double number is treated as two single numbers
1204+ 6777              // where DE is on the top of the stack and HL is the second from top,
1205+ 6777              // Instead, in 2VARIABLE a double number is stored as EDLH.
1206+ 6777              // this definition could use "MUL" Z80N new op-code.
1207+ 6777                              New_Def UM_MUL, "UM*", is_code, is_normal
1207+ 6777             >
1207+ 6777             >Dict_Ptr        defl    $
1207+ 6777             >
1207+ 6777             >//              ______________________________________________________________________
1207+ 6777             >//              Heap part
1207+ 6777             >
1207+ 6777             >
1207+ 6777             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E20B             >
1207+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E20B             >Latest_Definition defl  Heap_Ptr
1207+ E20B             >
1207+ E20B             >                // dummy db directives used to calculate length of namec
1207+ E20B 55 4D 2A    >                db      "UM*"
1207+ E20E             >len_NFA         defl    $ - temp_NFA
1207+ E20E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E20B             >
1207+ E20B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E20C 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1207+ E20F             >                org     $-1                 // alter last byte of Name just above to set
1207+ E20E AA          >                db      {b $} | END_BIT     // msb as name end
1207+ E20F             >
1207+ E20F 00 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E211             >Prev_Ptr        defl    Heap_Ptr
1207+ E211             >
1207+ E211             >mirror_Ptr      defl    $
1207+ E211             >
1207+ E211 79 67       >                dw      Dict_Ptr + 2        // xt
1207+ E213             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E213             >
1207+ E213             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E213             >
1207+ E213             >//              ______________________________________________________________________
1207+ E213             >//              Dictionary part
1207+ E213             >
1207+ E213             >                org     Dict_Ptr
1207+ 6777             >
1207+ 6777 11 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 6779             >
1207+ 6779             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 6779 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1207+ 6779 ~           >
1207+ 6779 ~           >
1207+ 6779             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 6779             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 6779             >
1207+ 6779             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 6779 D9                           exx
1209+ 677A D1                           pop     de                    // de has u2 operand
1210+ 677B E1                           pop     hl                    // hl has u1 operand
1211+ 677C 45                           ld      b, l
1212+ 677D 4B                           ld      c, e
1213+ 677E 5D                           ld      e, l
1214+ 677F 6A                           ld      l, d
1215+ 6780 E5                           push    hl
1216+ 6781 69                           ld      l, c
1217+ 6782 ED 30                        mul
1218+ 6784 EB                           ex      de, hl
1219+ 6785 ED 30                        mul
1220+ 6787 AF                           xor     a
1221+ 6788 19                           add     hl, de
1222+ 6789 8F                           adc     a
1223+ 678A 59                           ld      e, c
1224+ 678B 50                           ld      d, b
1225+ 678C ED 30                        mul
1226+ 678E 47                           ld      b, a
1227+ 678F 4C                           ld      c, h
1228+ 6790 7A                           ld      a, d
1229+ 6791 85                           add     l
1230+ 6792 67                           ld      h, a
1231+ 6793 6B                           ld      l, e
1232+ 6794 D1                           pop     de
1233+ 6795 ED 30                        mul
1234+ 6797 EB                           ex      de, hl
1235+ 6798 ED 4A                        adc     hl, bc
1236+ 679A              Mul_Bailout:
1237+ 679A D5                           push    de
1238+ 679B E5                           push    hl
1239+ 679C D9                           exx
1240+ 679D                              next
1240+ 679D DD E9       >                jp      (ix)
1241+ 679F
1242+ 679F              //  ______________________________________________________________________
1243+ 679F              //
1244+ 679F              // um/mod      ud u1 -- q r
1245+ 679F              // divides ud into u1 giving quotient q and remainder r
1246+ 679F              // algorithm takes 16 bit at a time starting from msb
1247+ 679F              // DE grows from lsb upward with quotient result
1248+ 679F              // HL keeps the remainder at each stage of division
1249+ 679F              // each loop 'lowers' the next binary digit to form the current dividend
1250+ 679F                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1250+ 679F             >
1250+ 679F             >Dict_Ptr        defl    $
1250+ 679F             >
1250+ 679F             >//              ______________________________________________________________________
1250+ 679F             >//              Heap part
1250+ 679F             >
1250+ 679F             >
1250+ 679F             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E213             >
1250+ E213             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E213             >Latest_Definition defl  Heap_Ptr
1250+ E213             >
1250+ E213             >                // dummy db directives used to calculate length of namec
1250+ E213 55 4D 2F 4D >                db      "UM/MOD"
1250+ E217 4F 44       >
1250+ E219             >len_NFA         defl    $ - temp_NFA
1250+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E213             >
1250+ E213 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E214 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1250+ E218 4F 44       >
1250+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1250+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1250+ E21A             >
1250+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E21C             >Prev_Ptr        defl    Heap_Ptr
1250+ E21C             >
1250+ E21C             >mirror_Ptr      defl    $
1250+ E21C             >
1250+ E21C A1 67       >                dw      Dict_Ptr + 2        // xt
1250+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E21E             >
1250+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E21E             >
1250+ E21E             >//              ______________________________________________________________________
1250+ E21E             >//              Dictionary part
1250+ E21E             >
1250+ E21E             >                org     Dict_Ptr
1250+ 679F             >
1250+ 679F 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 67A1             >
1250+ 67A1             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 67A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1250+ 67A1 ~           >
1250+ 67A1 ~           >
1250+ 67A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 67A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 67A1             >
1250+ 67A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 67A1 D9                           exx
1252+ 67A2 C1                           pop     bc                      // divisor
1253+ 67A3
1254+ 67A3 E1                           pop     hl                      // < high part
1255+ 67A4 D1                           pop     de                      // < low part and
1256+ 67A5
1257+ 67A5 7D                           ld      a, l                    // check without changing arguments
1258+ 67A6 91                           sub     c                       // if divisor is greater than high part
1259+ 67A7 7C                           ld      a, h                    // so quotient will be in range
1260+ 67A8 98                           sbc     a, b
1261+ 67A9 30 1D                        jr      nc, Um_DivMod_OutOfRange
1262+ 67AB 3E 10                            ld      a, 16
1263+ 67AD              Um_DivMod_Loop:
1264+ 67AD CB 23                                sla     e
1265+ 67AF CB 12                                rl      d
1266+ 67B1 ED 6A                                adc     hl, hl
1267+ 67B3 30 05                                jr      nc, Um_DivMod_Carry
1268+ 67B5 A7                                       and     a
1269+ 67B6 ED 42                                    sbc     hl, bc
1270+ 67B8 18 07                                jr      Um_DivMod_Endif    // else
1271+ 67BA              Um_DivMod_Carry:
1272+ 67BA A7                                       and     a
1273+ 67BB ED 42                                    sbc     hl, bc
1274+ 67BD 30 02                                    jr      nc, Um_DivMod_Endif
1275+ 67BF 09                                           add     hl, bc
1276+ 67C0 1B                                           dec     de
1277+ 67C1              Um_DivMod_Endif:                                   // endif
1278+ 67C1 13                                   inc     de
1279+ 67C2 3D                                   dec     a
1280+ 67C3 20 E8                            jr      nz, Um_DivMod_Loop
1281+ 67C5 EB                               ex      de, hl
1282+ 67C6 18 D2                            jr      Mul_Bailout
1283+ 67C8              // Um_DivMod_Bailout:
1284+ 67C8                              //  push    de                  // de := remanider
1285+ 67C8                              //  push    hl                  // hl := quotient
1286+ 67C8                              //  exx
1287+ 67C8                              //  next
1288+ 67C8
1289+ 67C8              Um_DivMod_OutOfRange:
1290+ 67C8 21 FF FF                     ld      hl, -1
1291+ 67CB 54                           ld      d, h
1292+ 67CC 5D                           ld      e, l
1293+ 67CD 18 CB                        jr      Mul_Bailout
1294+ 67CF
1295+ 67CF              //  ______________________________________________________________________
1296+ 67CF              //
1297+ 67CF              // and          n1 n2 -- n3
1298+ 67CF              // bit logical AND. Returns n3 as n1 & n2
1299+ 67CF                              New_Def AND_OP, "AND", is_code, is_normal
1299+ 67CF             >
1299+ 67CF             >Dict_Ptr        defl    $
1299+ 67CF             >
1299+ 67CF             >//              ______________________________________________________________________
1299+ 67CF             >//              Heap part
1299+ 67CF             >
1299+ 67CF             >
1299+ 67CF             >                org     (Heap_Ptr & $1FFF) + $E000
1299+ E21E             >
1299+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ E21E             >Latest_Definition defl  Heap_Ptr
1299+ E21E             >
1299+ E21E             >                // dummy db directives used to calculate length of namec
1299+ E21E 41 4E 44    >                db      "AND"
1299+ E221             >len_NFA         defl    $ - temp_NFA
1299+ E221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ E21E             >
1299+ E21E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ E21F 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1299+ E222             >                org     $-1                 // alter last byte of Name just above to set
1299+ E221 C4          >                db      {b $} | END_BIT     // msb as name end
1299+ E222             >
1299+ E222 13 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1299+ E224             >Prev_Ptr        defl    Heap_Ptr
1299+ E224             >
1299+ E224             >mirror_Ptr      defl    $
1299+ E224             >
1299+ E224 D1 67       >                dw      Dict_Ptr + 2        // xt
1299+ E226             >Heap_Ptr        defl    $ - $E000           // save current HP
1299+ E226             >
1299+ E226             >Current_HP      defl  $ - $E000             // used to set HP once!
1299+ E226             >
1299+ E226             >//              ______________________________________________________________________
1299+ E226             >//              Dictionary part
1299+ E226             >
1299+ E226             >                org     Dict_Ptr
1299+ 67CF             >
1299+ 67CF 24 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1299+ 67D1             >
1299+ 67D1             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 67D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1299+ 67D1 ~           >
1299+ 67D1 ~           >
1299+ 67D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 67D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 67D1             >
1299+ 67D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 67D1 D9                           exx
1301+ 67D2 D1                           pop     de
1302+ 67D3 E1                           pop     hl
1303+ 67D4 7B                           ld      a, e
1304+ 67D5 A5                           and     l
1305+ 67D6 6F                           ld      l, a
1306+ 67D7 7A                           ld      a, d
1307+ 67D8 A4                           and     h
1308+ 67D9              Boolean_exit:
1309+ 67D9 67                           ld      h, a
1310+ 67DA E5                           push    hl
1311+ 67DB D9                           exx
1312+ 67DC                              next
1312+ 67DC DD E9       >                jp      (ix)
1313+ 67DE
1314+ 67DE              //  ______________________________________________________________________
1315+ 67DE              //
1316+ 67DE              // or           n1 n2 -- n3
1317+ 67DE              // bit logical OR. Returns n3 as n1 | n2
1318+ 67DE                              New_Def OR_OP, "OR", is_code, is_normal
1318+ 67DE             >
1318+ 67DE             >Dict_Ptr        defl    $
1318+ 67DE             >
1318+ 67DE             >//              ______________________________________________________________________
1318+ 67DE             >//              Heap part
1318+ 67DE             >
1318+ 67DE             >
1318+ 67DE             >                org     (Heap_Ptr & $1FFF) + $E000
1318+ E226             >
1318+ E226             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ E226             >Latest_Definition defl  Heap_Ptr
1318+ E226             >
1318+ E226             >                // dummy db directives used to calculate length of namec
1318+ E226 4F 52       >                db      "OR"
1318+ E228             >len_NFA         defl    $ - temp_NFA
1318+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ E226             >
1318+ E226 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ E227 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1318+ E229             >                org     $-1                 // alter last byte of Name just above to set
1318+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1318+ E229             >
1318+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1318+ E22B             >Prev_Ptr        defl    Heap_Ptr
1318+ E22B             >
1318+ E22B             >mirror_Ptr      defl    $
1318+ E22B             >
1318+ E22B E0 67       >                dw      Dict_Ptr + 2        // xt
1318+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1318+ E22D             >
1318+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1318+ E22D             >
1318+ E22D             >//              ______________________________________________________________________
1318+ E22D             >//              Dictionary part
1318+ E22D             >
1318+ E22D             >                org     Dict_Ptr
1318+ 67DE             >
1318+ 67DE 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1318+ 67E0             >
1318+ 67E0             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 67E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1318+ 67E0 ~           >
1318+ 67E0 ~           >
1318+ 67E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 67E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 67E0             >
1318+ 67E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 67E0 D9                           exx
1320+ 67E1 D1                           pop     de
1321+ 67E2 E1                           pop     hl
1322+ 67E3 7B                           ld      a, e
1323+ 67E4 B5                           or      l
1324+ 67E5 6F                           ld      l, a
1325+ 67E6 7A                           ld      a, d
1326+ 67E7 B4                           or      h
1327+ 67E8 18 EF                        jr      Boolean_exit
1328+ 67EA                          //  ld      h, a
1329+ 67EA                          //  push    hl
1330+ 67EA                          //  exx
1331+ 67EA                          //  next
1332+ 67EA
1333+ 67EA              //  ______________________________________________________________________
1334+ 67EA              //
1335+ 67EA              // xor          n1 n2 -- n3
1336+ 67EA              // bit logical OR. Returns n3 as n1 ^ n2
1337+ 67EA                              New_Def XOR_OP, "XOR", is_code, is_normal
1337+ 67EA             >
1337+ 67EA             >Dict_Ptr        defl    $
1337+ 67EA             >
1337+ 67EA             >//              ______________________________________________________________________
1337+ 67EA             >//              Heap part
1337+ 67EA             >
1337+ 67EA             >
1337+ 67EA             >                org     (Heap_Ptr & $1FFF) + $E000
1337+ E22D             >
1337+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ E22D             >Latest_Definition defl  Heap_Ptr
1337+ E22D             >
1337+ E22D             >                // dummy db directives used to calculate length of namec
1337+ E22D 58 4F 52    >                db      "XOR"
1337+ E230             >len_NFA         defl    $ - temp_NFA
1337+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ E22D             >
1337+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ E22E 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1337+ E231             >                org     $-1                 // alter last byte of Name just above to set
1337+ E230 D2          >                db      {b $} | END_BIT     // msb as name end
1337+ E231             >
1337+ E231 26 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1337+ E233             >Prev_Ptr        defl    Heap_Ptr
1337+ E233             >
1337+ E233             >mirror_Ptr      defl    $
1337+ E233             >
1337+ E233 EC 67       >                dw      Dict_Ptr + 2        // xt
1337+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1337+ E235             >
1337+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1337+ E235             >
1337+ E235             >//              ______________________________________________________________________
1337+ E235             >//              Dictionary part
1337+ E235             >
1337+ E235             >                org     Dict_Ptr
1337+ 67EA             >
1337+ 67EA 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1337+ 67EC             >
1337+ 67EC             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 67EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1337+ 67EC ~           >
1337+ 67EC ~           >
1337+ 67EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 67EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 67EC             >
1337+ 67EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 67EC D9                           exx
1339+ 67ED D1                           pop     de
1340+ 67EE E1                           pop     hl
1341+ 67EF 7B                           ld      a, e
1342+ 67F0 AD                           xor     l
1343+ 67F1 6F                           ld      l, a
1344+ 67F2 7A                           ld      a, d
1345+ 67F3 AC                           xor     h
1346+ 67F4 18 E3                        jr      Boolean_exit
1347+ 67F6                          //  ld      h, a
1348+ 67F6                          //  push    hl
1349+ 67F6                          //  exx
1350+ 67F6                          //  next
1351+ 67F6
1352+ 67F6              //  ______________________________________________________________________
1353+ 67F6              //
1354+ 67F6              // sp@      -- a
1355+ 67F6              // returns on top of stack the value of SP before execution
1356+ 67F6                              New_Def SPFETCH, "SP@", is_code, is_normal
1356+ 67F6             >
1356+ 67F6             >Dict_Ptr        defl    $
1356+ 67F6             >
1356+ 67F6             >//              ______________________________________________________________________
1356+ 67F6             >//              Heap part
1356+ 67F6             >
1356+ 67F6             >
1356+ 67F6             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E235             >
1356+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E235             >Latest_Definition defl  Heap_Ptr
1356+ E235             >
1356+ E235             >                // dummy db directives used to calculate length of namec
1356+ E235 53 50 40    >                db      "SP@"
1356+ E238             >len_NFA         defl    $ - temp_NFA
1356+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E235             >
1356+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E236 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1356+ E239             >                org     $-1                 // alter last byte of Name just above to set
1356+ E238 C0          >                db      {b $} | END_BIT     // msb as name end
1356+ E239             >
1356+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E23B             >Prev_Ptr        defl    Heap_Ptr
1356+ E23B             >
1356+ E23B             >mirror_Ptr      defl    $
1356+ E23B             >
1356+ E23B F8 67       >                dw      Dict_Ptr + 2        // xt
1356+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E23D             >
1356+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E23D             >
1356+ E23D             >//              ______________________________________________________________________
1356+ E23D             >//              Dictionary part
1356+ E23D             >
1356+ E23D             >                org     Dict_Ptr
1356+ 67F6             >
1356+ 67F6 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 67F8             >
1356+ 67F8             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 67F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1356+ 67F8 ~           >
1356+ 67F8 ~           >
1356+ 67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 67F8             >
1356+ 67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 67F8
1358+ 67F8 21 00 00                     ld      hl, 0
1359+ 67FB 39                           add     hl, sp
1360+ 67FC
1361+ 67FC                              psh1
1361+ 67FC E5          >                push    hl
1361+ 67FD DD E9       >                jp      (ix)
1362+ 67FF
1363+ 67FF              //  ______________________________________________________________________
1364+ 67FF              //
1365+ 67FF              // sp!      a --
1366+ 67FF              // restore SP to the initial value passed
1367+ 67FF              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1368+ 67FF                              New_Def SPSTORE, "SP!", is_code, is_normal
1368+ 67FF             >
1368+ 67FF             >Dict_Ptr        defl    $
1368+ 67FF             >
1368+ 67FF             >//              ______________________________________________________________________
1368+ 67FF             >//              Heap part
1368+ 67FF             >
1368+ 67FF             >
1368+ 67FF             >                org     (Heap_Ptr & $1FFF) + $E000
1368+ E23D             >
1368+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ E23D             >Latest_Definition defl  Heap_Ptr
1368+ E23D             >
1368+ E23D             >                // dummy db directives used to calculate length of namec
1368+ E23D 53 50 21    >                db      "SP!"
1368+ E240             >len_NFA         defl    $ - temp_NFA
1368+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ E23D             >
1368+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ E23E 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1368+ E241             >                org     $-1                 // alter last byte of Name just above to set
1368+ E240 A1          >                db      {b $} | END_BIT     // msb as name end
1368+ E241             >
1368+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1368+ E243             >Prev_Ptr        defl    Heap_Ptr
1368+ E243             >
1368+ E243             >mirror_Ptr      defl    $
1368+ E243             >
1368+ E243 01 68       >                dw      Dict_Ptr + 2        // xt
1368+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1368+ E245             >
1368+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1368+ E245             >
1368+ E245             >//              ______________________________________________________________________
1368+ E245             >//              Dictionary part
1368+ E245             >
1368+ E245             >                org     Dict_Ptr
1368+ 67FF             >
1368+ 67FF 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1368+ 6801             >
1368+ 6801             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6801 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1368+ 6801 ~           >
1368+ 6801 ~           >
1368+ 6801             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6801             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6801             >
1368+ 6801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6801 E1                           pop     hl
1370+ 6802 F9                           ld      sp, hl
1371+ 6803
1372+ 6803                              next
1372+ 6803 DD E9       >                jp      (ix)
1373+ 6805
1374+ 6805              //  ______________________________________________________________________
1375+ 6805              //
1376+ 6805              // rp@      -- a
1377+ 6805              // returns on top of stack the value of Return-Pointer
1378+ 6805                              New_Def RPFETCH, "RP@", is_code, is_normal
1378+ 6805             >
1378+ 6805             >Dict_Ptr        defl    $
1378+ 6805             >
1378+ 6805             >//              ______________________________________________________________________
1378+ 6805             >//              Heap part
1378+ 6805             >
1378+ 6805             >
1378+ 6805             >                org     (Heap_Ptr & $1FFF) + $E000
1378+ E245             >
1378+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ E245             >Latest_Definition defl  Heap_Ptr
1378+ E245             >
1378+ E245             >                // dummy db directives used to calculate length of namec
1378+ E245 52 50 40    >                db      "RP@"
1378+ E248             >len_NFA         defl    $ - temp_NFA
1378+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ E245             >
1378+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ E246 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1378+ E249             >                org     $-1                 // alter last byte of Name just above to set
1378+ E248 C0          >                db      {b $} | END_BIT     // msb as name end
1378+ E249             >
1378+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1378+ E24B             >Prev_Ptr        defl    Heap_Ptr
1378+ E24B             >
1378+ E24B             >mirror_Ptr      defl    $
1378+ E24B             >
1378+ E24B 07 68       >                dw      Dict_Ptr + 2        // xt
1378+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1378+ E24D             >
1378+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1378+ E24D             >
1378+ E24D             >//              ______________________________________________________________________
1378+ E24D             >//              Dictionary part
1378+ E24D             >
1378+ E24D             >                org     Dict_Ptr
1378+ 6805             >
1378+ 6805 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1378+ 6807             >
1378+ 6807             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6807 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 6807 ~           >
1378+ 6807 ~           >
1378+ 6807             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6807             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6807             >
1378+ 6807             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6807
1380+ 6807                              // *** ldhlrp
1381+ 6807                              // *** ex      de, hl
1382+ 6807 D5                           push de
1383+ 6808
1384+ 6808                              next
1384+ 6808 DD E9       >                jp      (ix)
1385+ 680A
1386+ 680A              //  ______________________________________________________________________
1387+ 680A              //
1388+ 680A              // rp!      a --
1389+ 680A              // restore RP to the initial value passed
1390+ 680A              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1391+ 680A                              New_Def RPSTORE, "RP!", is_code, is_normal
1391+ 680A             >
1391+ 680A             >Dict_Ptr        defl    $
1391+ 680A             >
1391+ 680A             >//              ______________________________________________________________________
1391+ 680A             >//              Heap part
1391+ 680A             >
1391+ 680A             >
1391+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1391+ E24D             >
1391+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1391+ E24D             >Latest_Definition defl  Heap_Ptr
1391+ E24D             >
1391+ E24D             >                // dummy db directives used to calculate length of namec
1391+ E24D 52 50 21    >                db      "RP!"
1391+ E250             >len_NFA         defl    $ - temp_NFA
1391+ E250             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1391+ E24D             >
1391+ E24D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1391+ E24E 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1391+ E251             >                org     $-1                 // alter last byte of Name just above to set
1391+ E250 A1          >                db      {b $} | END_BIT     // msb as name end
1391+ E251             >
1391+ E251 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1391+ E253             >Prev_Ptr        defl    Heap_Ptr
1391+ E253             >
1391+ E253             >mirror_Ptr      defl    $
1391+ E253             >
1391+ E253 0C 68       >                dw      Dict_Ptr + 2        // xt
1391+ E255             >Heap_Ptr        defl    $ - $E000           // save current HP
1391+ E255             >
1391+ E255             >Current_HP      defl  $ - $E000             // used to set HP once!
1391+ E255             >
1391+ E255             >//              ______________________________________________________________________
1391+ E255             >//              Dictionary part
1391+ E255             >
1391+ E255             >                org     Dict_Ptr
1391+ 680A             >
1391+ 680A 53 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1391+ 680C             >
1391+ 680C             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1391+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1391+ 680C ~           >
1391+ 680C ~           >
1391+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1391+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1391+ 680C             >
1391+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1392+ 680C D1                           pop     de
1393+ 680D                              // *** ex      de, hl
1394+ 680D                              // *** ldrphl
1395+ 680D
1396+ 680D                              next
1396+ 680D DD E9       >                jp      (ix)
1397+ 680F
1398+ 680F              //  ______________________________________________________________________
1399+ 680F              //
1400+ 680F              // exit       --
1401+ 680F              // exits back to the caller word
1402+ 680F                              New_Def EXIT, "EXIT", is_code, is_normal
1402+ 680F             >
1402+ 680F             >Dict_Ptr        defl    $
1402+ 680F             >
1402+ 680F             >//              ______________________________________________________________________
1402+ 680F             >//              Heap part
1402+ 680F             >
1402+ 680F             >
1402+ 680F             >                org     (Heap_Ptr & $1FFF) + $E000
1402+ E255             >
1402+ E255             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1402+ E255             >Latest_Definition defl  Heap_Ptr
1402+ E255             >
1402+ E255             >                // dummy db directives used to calculate length of namec
1402+ E255 45 58 49 54 >                db      "EXIT"
1402+ E259             >len_NFA         defl    $ - temp_NFA
1402+ E259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1402+ E255             >
1402+ E255 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1402+ E256 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1402+ E25A             >                org     $-1                 // alter last byte of Name just above to set
1402+ E259 D4          >                db      {b $} | END_BIT     // msb as name end
1402+ E25A             >
1402+ E25A 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1402+ E25C             >Prev_Ptr        defl    Heap_Ptr
1402+ E25C             >
1402+ E25C             >mirror_Ptr      defl    $
1402+ E25C             >
1402+ E25C 11 68       >                dw      Dict_Ptr + 2        // xt
1402+ E25E             >Heap_Ptr        defl    $ - $E000           // save current HP
1402+ E25E             >
1402+ E25E             >Current_HP      defl  $ - $E000             // used to set HP once!
1402+ E25E             >
1402+ E25E             >//              ______________________________________________________________________
1402+ E25E             >//              Dictionary part
1402+ E25E             >
1402+ E25E             >                org     Dict_Ptr
1402+ 680F             >
1402+ 680F 5C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1402+ 6811             >
1402+ 6811             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1402+ 6811 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1402+ 6811 ~           >
1402+ 6811 ~           >
1402+ 6811             >                endif           ; ok        // for other definitions it "points" the correct handler
1402+ 6811             >                // Use of "; ok" to suppress "warning[fwdref]"
1402+ 6811             >
1402+ 6811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1403+ 6811 EB                           ex      de, hl
1404+ 6812                              // *** ldhlrp                      // Get Return Stack Pointer
1405+ 6812 4E                           ld      c, (hl)             // pop Instruction Pointer
1406+ 6813 23                           inc     hl                  // from Return Stack
1407+ 6814 46                           ld      b, (hl)
1408+ 6815 23                           inc     hl
1409+ 6816                              // *** ldrphl                      // Set Return Stack Pointer
1410+ 6816 EB                           ex      de, hl
1411+ 6817                              next
1411+ 6817 DD E9       >                jp      (ix)
1412+ 6819
1413+ 6819              //  ______________________________________________________________________
1414+ 6819              //
1415+ 6819              // lastl      --
1416+ 6819              // exits back to the caller word
1417+ 6819              //              New_Def EXIT, "LASTL", is_code, is_normal
1418+ 6819              //              push    de
1419+ 6819              //              ex      de, hl //**
1420+ 6819              //              // *** ldhlrp                      // Get Return Stack Pointer
1421+ 6819              //              ld      e, (hl)             // pop Instruction Pointer
1422+ 6819              //              inc     hl                  // from Return Stack
1423+ 6819              //              ld      d, (hl)
1424+ 6819              //              inc     hl
1425+ 6819              //              ld      (hl), e
1426+ 6819              //              inc     hl
1427+ 6819              //              ld      (hl), d
1428+ 6819              //              add     hl, -3
1429+ 6819              //              pop     de
1430+ 6819              //              next
1431+ 6819
1432+ 6819              //  ______________________________________________________________________
1433+ 6819              //
1434+ 6819              // >r      n --
1435+ 6819              // pop from calculator-stack and push into return-stack
1436+ 6819                              New_Def TO_R, ">R", is_code, is_normal
1436+ 6819             >
1436+ 6819             >Dict_Ptr        defl    $
1436+ 6819             >
1436+ 6819             >//              ______________________________________________________________________
1436+ 6819             >//              Heap part
1436+ 6819             >
1436+ 6819             >
1436+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1436+ E25E             >
1436+ E25E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ E25E             >Latest_Definition defl  Heap_Ptr
1436+ E25E             >
1436+ E25E             >                // dummy db directives used to calculate length of namec
1436+ E25E 3E 52       >                db      ">R"
1436+ E260             >len_NFA         defl    $ - temp_NFA
1436+ E260             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ E25E             >
1436+ E25E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ E25F 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1436+ E261             >                org     $-1                 // alter last byte of Name just above to set
1436+ E260 D2          >                db      {b $} | END_BIT     // msb as name end
1436+ E261             >
1436+ E261 55 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1436+ E263             >Prev_Ptr        defl    Heap_Ptr
1436+ E263             >
1436+ E263             >mirror_Ptr      defl    $
1436+ E263             >
1436+ E263 1B 68       >                dw      Dict_Ptr + 2        // xt
1436+ E265             >Heap_Ptr        defl    $ - $E000           // save current HP
1436+ E265             >
1436+ E265             >Current_HP      defl  $ - $E000             // used to set HP once!
1436+ E265             >
1436+ E265             >//              ______________________________________________________________________
1436+ E265             >//              Dictionary part
1436+ E265             >
1436+ E265             >                org     Dict_Ptr
1436+ 6819             >
1436+ 6819 63 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1436+ 681B             >
1436+ 681B             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1436+ 681B ~           >
1436+ 681B ~           >
1436+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 681B             >
1436+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 681B E1                           pop     hl
1438+ 681C EB                           ex      de, hl //**
1439+ 681D                              // *** ldhlrp
1440+ 681D 2B                           dec     hl
1441+ 681E 72                           ld      (hl), d             // store current TOS
1442+ 681F 2B                           dec     hl                  // to Return Stack
1443+ 6820 73                           ld      (hl), e
1444+ 6821                              // *** ldrphl
1445+ 6821 EB                           ex      de, hl //**
1446+ 6822                              next
1446+ 6822 DD E9       >                jp      (ix)
1447+ 6824
1448+ 6824              //  ______________________________________________________________________
1449+ 6824              //
1450+ 6824              // r>      -- n
1451+ 6824              // pop from return-stack and push into calculator-stack
1452+ 6824                              New_Def R_TO, "R>", is_code, is_normal
1452+ 6824             >
1452+ 6824             >Dict_Ptr        defl    $
1452+ 6824             >
1452+ 6824             >//              ______________________________________________________________________
1452+ 6824             >//              Heap part
1452+ 6824             >
1452+ 6824             >
1452+ 6824             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E265             >
1452+ E265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E265             >Latest_Definition defl  Heap_Ptr
1452+ E265             >
1452+ E265             >                // dummy db directives used to calculate length of namec
1452+ E265 52 3E       >                db      "R>"
1452+ E267             >len_NFA         defl    $ - temp_NFA
1452+ E267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E265             >
1452+ E265 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E266 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1452+ E268             >                org     $-1                 // alter last byte of Name just above to set
1452+ E267 BE          >                db      {b $} | END_BIT     // msb as name end
1452+ E268             >
1452+ E268 5E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E26A             >Prev_Ptr        defl    Heap_Ptr
1452+ E26A             >
1452+ E26A             >mirror_Ptr      defl    $
1452+ E26A             >
1452+ E26A 26 68       >                dw      Dict_Ptr + 2        // xt
1452+ E26C             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E26C             >
1452+ E26C             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E26C             >
1452+ E26C             >//              ______________________________________________________________________
1452+ E26C             >//              Dictionary part
1452+ E26C             >
1452+ E26C             >                org     Dict_Ptr
1452+ 6824             >
1452+ 6824 6A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 6826             >
1452+ 6826             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 6826 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 6826 ~           >
1452+ 6826 ~           >
1452+ 6826             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 6826             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 6826             >
1452+ 6826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 6826
1454+ 6826 EB                           ex      de, hl //**
1455+ 6827                              // *** ldhlrp
1456+ 6827 5E                           ld      e, (hl)             // retrieve from Return Stack
1457+ 6828 23                           inc     hl
1458+ 6829 56                           ld      d, (hl)
1459+ 682A 23                           inc     hl
1460+ 682B                              // *** ldrphl
1461+ 682B EB                           ex      de, hl //**
1462+ 682C E5                           push    hl
1463+ 682D                              next
1463+ 682D DD E9       >                jp      (ix)
1464+ 682F
1465+ 682F              //  ______________________________________________________________________
1466+ 682F              //
1467+ 682F              // r@           -- n
1468+ 682F              // return on top of stack the value of top of return-stack
1469+ 682F              // Since this is the same as I, we alter R's CFA to jump there
1470+ 682F                              New_Def R_OP, "R@", is_code, is_normal
1470+ 682F             >
1470+ 682F             >Dict_Ptr        defl    $
1470+ 682F             >
1470+ 682F             >//              ______________________________________________________________________
1470+ 682F             >//              Heap part
1470+ 682F             >
1470+ 682F             >
1470+ 682F             >                org     (Heap_Ptr & $1FFF) + $E000
1470+ E26C             >
1470+ E26C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ E26C             >Latest_Definition defl  Heap_Ptr
1470+ E26C             >
1470+ E26C             >                // dummy db directives used to calculate length of namec
1470+ E26C 52 40       >                db      "R@"
1470+ E26E             >len_NFA         defl    $ - temp_NFA
1470+ E26E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ E26C             >
1470+ E26C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ E26D 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1470+ E26F             >                org     $-1                 // alter last byte of Name just above to set
1470+ E26E C0          >                db      {b $} | END_BIT     // msb as name end
1470+ E26F             >
1470+ E26F 65 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1470+ E271             >Prev_Ptr        defl    Heap_Ptr
1470+ E271             >
1470+ E271             >mirror_Ptr      defl    $
1470+ E271             >
1470+ E271 31 68       >                dw      Dict_Ptr + 2        // xt
1470+ E273             >Heap_Ptr        defl    $ - $E000           // save current HP
1470+ E273             >
1470+ E273             >Current_HP      defl  $ - $E000             // used to set HP once!
1470+ E273             >
1470+ E273             >//              ______________________________________________________________________
1470+ E273             >//              Dictionary part
1470+ E273             >
1470+ E273             >                org     Dict_Ptr
1470+ 682F             >
1470+ 682F 71 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1470+ 6831             >
1470+ 6831             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6831 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1470+ 6831 ~           >
1470+ 6831 ~           >
1470+ 6831             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6831             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6831             >
1470+ 6831             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6831                          //  Behave  I_Ptr
1472+ 6831 C3 32 64                     jp      I_Ptr
1473+ 6834
1474+ 6834              //  ______________________________________________________________________
1475+ 6834              //
1476+ 6834              // r            -- n
1477+ 6834              // return on top of stack the value of top of return-stack
1478+ 6834              // Since this is the same as I, we alter R's CFA to jump there
1479+ 6834              //              New_Def R_OLD, "R", is_code, is_normal
1480+ 6834              //              jp      I_Ptr
1481+ 6834
1482+ 6834              //  ______________________________________________________________________
1483+ 6834              //
1484+ 6834              // 0=           n -- f
1485+ 6834              // true (non zero) if n is zero, false (0) elsewere
1486+ 6834                              New_Def ZEQUAL, "0=", is_code, is_normal
1486+ 6834             >
1486+ 6834             >Dict_Ptr        defl    $
1486+ 6834             >
1486+ 6834             >//              ______________________________________________________________________
1486+ 6834             >//              Heap part
1486+ 6834             >
1486+ 6834             >
1486+ 6834             >                org     (Heap_Ptr & $1FFF) + $E000
1486+ E273             >
1486+ E273             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1486+ E273             >Latest_Definition defl  Heap_Ptr
1486+ E273             >
1486+ E273             >                // dummy db directives used to calculate length of namec
1486+ E273 30 3D       >                db      "0="
1486+ E275             >len_NFA         defl    $ - temp_NFA
1486+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1486+ E273             >
1486+ E273 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1486+ E274 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1486+ E276             >                org     $-1                 // alter last byte of Name just above to set
1486+ E275 BD          >                db      {b $} | END_BIT     // msb as name end
1486+ E276             >
1486+ E276 6C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1486+ E278             >Prev_Ptr        defl    Heap_Ptr
1486+ E278             >
1486+ E278             >mirror_Ptr      defl    $
1486+ E278             >
1486+ E278 36 68       >                dw      Dict_Ptr + 2        // xt
1486+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1486+ E27A             >
1486+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1486+ E27A             >
1486+ E27A             >//              ______________________________________________________________________
1486+ E27A             >//              Dictionary part
1486+ E27A             >
1486+ E27A             >                org     Dict_Ptr
1486+ 6834             >
1486+ 6834 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1486+ 6836             >
1486+ 6836             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1486+ 6836 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1486+ 6836 ~           >
1486+ 6836 ~           >
1486+ 6836             >                endif           ; ok        // for other definitions it "points" the correct handler
1486+ 6836             >                // Use of "; ok" to suppress "warning[fwdref]"
1486+ 6836             >
1486+ 6836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1487+ 6836              Zero_Equal:
1488+ 6836 E1                           pop     hl
1489+ 6837 7D                           ld      a, l
1490+ 6838 B4                           or      h
1491+ 6839 20 01                        jr      nz, ZEqual_Skip
1492+ 683B 3F                               ccf
1493+ 683C              ZEqual_Skip:
1494+ 683C ED 62                        sbc     hl, hl
1495+ 683E                              psh1
1495+ 683E E5          >                push    hl
1495+ 683F DD E9       >                jp      (ix)
1496+ 6841
1497+ 6841              //  ______________________________________________________________________
1498+ 6841              //
1499+ 6841              // not         a1 -- a2
1500+ 6841              // increment by 2 top of stack
1501+ 6841                              New_Def NOT_OP, "NOT", is_code, is_normal
1501+ 6841             >
1501+ 6841             >Dict_Ptr        defl    $
1501+ 6841             >
1501+ 6841             >//              ______________________________________________________________________
1501+ 6841             >//              Heap part
1501+ 6841             >
1501+ 6841             >
1501+ 6841             >                org     (Heap_Ptr & $1FFF) + $E000
1501+ E27A             >
1501+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1501+ E27A             >Latest_Definition defl  Heap_Ptr
1501+ E27A             >
1501+ E27A             >                // dummy db directives used to calculate length of namec
1501+ E27A 4E 4F 54    >                db      "NOT"
1501+ E27D             >len_NFA         defl    $ - temp_NFA
1501+ E27D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1501+ E27A             >
1501+ E27A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1501+ E27B 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1501+ E27E             >                org     $-1                 // alter last byte of Name just above to set
1501+ E27D D4          >                db      {b $} | END_BIT     // msb as name end
1501+ E27E             >
1501+ E27E 73 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1501+ E280             >Prev_Ptr        defl    Heap_Ptr
1501+ E280             >
1501+ E280             >mirror_Ptr      defl    $
1501+ E280             >
1501+ E280 43 68       >                dw      Dict_Ptr + 2        // xt
1501+ E282             >Heap_Ptr        defl    $ - $E000           // save current HP
1501+ E282             >
1501+ E282             >Current_HP      defl  $ - $E000             // used to set HP once!
1501+ E282             >
1501+ E282             >//              ______________________________________________________________________
1501+ E282             >//              Dictionary part
1501+ E282             >
1501+ E282             >                org     Dict_Ptr
1501+ 6841             >
1501+ 6841 80 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1501+ 6843             >
1501+ 6843             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1501+ 6843 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1501+ 6843 ~           >
1501+ 6843 ~           >
1501+ 6843             >                endif           ; ok        // for other definitions it "points" the correct handler
1501+ 6843             >                // Use of "; ok" to suppress "warning[fwdref]"
1501+ 6843             >
1501+ 6843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1502+ 6843                          //  Behave  Zero_Equal
1503+ 6843 18 F1                        jr      Zero_Equal
1504+ 6845
1505+ 6845              //  ______________________________________________________________________
1506+ 6845              //
1507+ 6845              // 0<           n -- f
1508+ 6845              // true (non zero) if n is less than zero, false (0) elsewere
1509+ 6845                              New_Def ZLESS, "0<", is_code, is_normal
1509+ 6845             >
1509+ 6845             >Dict_Ptr        defl    $
1509+ 6845             >
1509+ 6845             >//              ______________________________________________________________________
1509+ 6845             >//              Heap part
1509+ 6845             >
1509+ 6845             >
1509+ 6845             >                org     (Heap_Ptr & $1FFF) + $E000
1509+ E282             >
1509+ E282             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1509+ E282             >Latest_Definition defl  Heap_Ptr
1509+ E282             >
1509+ E282             >                // dummy db directives used to calculate length of namec
1509+ E282 30 3C       >                db      "0<"
1509+ E284             >len_NFA         defl    $ - temp_NFA
1509+ E284             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1509+ E282             >
1509+ E282 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1509+ E283 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1509+ E285             >                org     $-1                 // alter last byte of Name just above to set
1509+ E284 BC          >                db      {b $} | END_BIT     // msb as name end
1509+ E285             >
1509+ E285 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1509+ E287             >Prev_Ptr        defl    Heap_Ptr
1509+ E287             >
1509+ E287             >mirror_Ptr      defl    $
1509+ E287             >
1509+ E287 47 68       >                dw      Dict_Ptr + 2        // xt
1509+ E289             >Heap_Ptr        defl    $ - $E000           // save current HP
1509+ E289             >
1509+ E289             >Current_HP      defl  $ - $E000             // used to set HP once!
1509+ E289             >
1509+ E289             >//              ______________________________________________________________________
1509+ E289             >//              Dictionary part
1509+ E289             >
1509+ E289             >                org     Dict_Ptr
1509+ 6845             >
1509+ 6845 87 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1509+ 6847             >
1509+ 6847             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1509+ 6847 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1509+ 6847 ~           >
1509+ 6847 ~           >
1509+ 6847             >                endif           ; ok        // for other definitions it "points" the correct handler
1509+ 6847             >                // Use of "; ok" to suppress "warning[fwdref]"
1509+ 6847             >
1509+ 6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1510+ 6847 E1                           pop     hl
1511+ 6848 29                           add     hl, hl
1512+ 6849 ED 62                        sbc     hl, hl
1513+ 684B                              psh1
1513+ 684B E5          >                push    hl
1513+ 684C DD E9       >                jp      (ix)
1514+ 684E
1515+ 684E              //  ______________________________________________________________________
1516+ 684E              //
1517+ 684E              // 0>           n -- f
1518+ 684E              // true (non zero) if n is less than zero, false (0) elsewere
1519+ 684E                              New_Def ZGREATER, "0>", is_code, is_normal
1519+ 684E             >
1519+ 684E             >Dict_Ptr        defl    $
1519+ 684E             >
1519+ 684E             >//              ______________________________________________________________________
1519+ 684E             >//              Heap part
1519+ 684E             >
1519+ 684E             >
1519+ 684E             >                org     (Heap_Ptr & $1FFF) + $E000
1519+ E289             >
1519+ E289             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1519+ E289             >Latest_Definition defl  Heap_Ptr
1519+ E289             >
1519+ E289             >                // dummy db directives used to calculate length of namec
1519+ E289 30 3E       >                db      "0>"
1519+ E28B             >len_NFA         defl    $ - temp_NFA
1519+ E28B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1519+ E289             >
1519+ E289 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1519+ E28A 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1519+ E28C             >                org     $-1                 // alter last byte of Name just above to set
1519+ E28B BE          >                db      {b $} | END_BIT     // msb as name end
1519+ E28C             >
1519+ E28C 82 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1519+ E28E             >Prev_Ptr        defl    Heap_Ptr
1519+ E28E             >
1519+ E28E             >mirror_Ptr      defl    $
1519+ E28E             >
1519+ E28E 50 68       >                dw      Dict_Ptr + 2        // xt
1519+ E290             >Heap_Ptr        defl    $ - $E000           // save current HP
1519+ E290             >
1519+ E290             >Current_HP      defl  $ - $E000             // used to set HP once!
1519+ E290             >
1519+ E290             >//              ______________________________________________________________________
1519+ E290             >//              Dictionary part
1519+ E290             >
1519+ E290             >                org     Dict_Ptr
1519+ 684E             >
1519+ 684E 8E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1519+ 6850             >
1519+ 6850             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1519+ 6850 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1519+ 6850 ~           >
1519+ 6850 ~           >
1519+ 6850             >                endif           ; ok        // for other definitions it "points" the correct handler
1519+ 6850             >                // Use of "; ok" to suppress "warning[fwdref]"
1519+ 6850             >
1519+ 6850             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1520+ 6850 E1                           pop     hl
1521+ 6851 7D                           ld      a, l
1522+ 6852 B4                           or      h
1523+ 6853 28 04                        jr      z, ZGreater_Skip
1524+ 6855 29                           add     hl, hl
1525+ 6856 3F                           ccf
1526+ 6857 ED 62                        sbc     hl, hl
1527+ 6859              ZGreater_Skip:
1528+ 6859                              psh1
1528+ 6859 E5          >                push    hl
1528+ 685A DD E9       >                jp      (ix)
1529+ 685C
1530+ 685C              //  ______________________________________________________________________
1531+ 685C              //
1532+ 685C              // +            n1 n2 -- n3
1533+ 685C              // returns the unsigned sum of two top values
1534+ 685C                              New_Def PLUS, "+", is_code, is_normal
1534+ 685C             >
1534+ 685C             >Dict_Ptr        defl    $
1534+ 685C             >
1534+ 685C             >//              ______________________________________________________________________
1534+ 685C             >//              Heap part
1534+ 685C             >
1534+ 685C             >
1534+ 685C             >                org     (Heap_Ptr & $1FFF) + $E000
1534+ E290             >
1534+ E290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1534+ E290             >Latest_Definition defl  Heap_Ptr
1534+ E290             >
1534+ E290             >                // dummy db directives used to calculate length of namec
1534+ E290 2B          >                db      "+"
1534+ E291             >len_NFA         defl    $ - temp_NFA
1534+ E291             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1534+ E290             >
1534+ E290 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1534+ E291 2B          >                db      "+"               // name string in 7-bit ascii, but
1534+ E292             >                org     $-1                 // alter last byte of Name just above to set
1534+ E291 AB          >                db      {b $} | END_BIT     // msb as name end
1534+ E292             >
1534+ E292 89 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1534+ E294             >Prev_Ptr        defl    Heap_Ptr
1534+ E294             >
1534+ E294             >mirror_Ptr      defl    $
1534+ E294             >
1534+ E294 5E 68       >                dw      Dict_Ptr + 2        // xt
1534+ E296             >Heap_Ptr        defl    $ - $E000           // save current HP
1534+ E296             >
1534+ E296             >Current_HP      defl  $ - $E000             // used to set HP once!
1534+ E296             >
1534+ E296             >//              ______________________________________________________________________
1534+ E296             >//              Dictionary part
1534+ E296             >
1534+ E296             >                org     Dict_Ptr
1534+ 685C             >
1534+ 685C 94 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1534+ 685E             >
1534+ 685E             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1534+ 685E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1534+ 685E ~           >
1534+ 685E ~           >
1534+ 685E             >                endif           ; ok        // for other definitions it "points" the correct handler
1534+ 685E             >                // Use of "; ok" to suppress "warning[fwdref]"
1534+ 685E             >
1534+ 685E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1535+ 685E D9                           exx
1536+ 685F E1                           pop     hl
1537+ 6860 D1                           pop     de
1538+ 6861 19                           add     hl, de
1539+ 6862 E5                           push    hl
1540+ 6863 D9                           exx
1541+ 6864                              next
1541+ 6864 DD E9       >                jp      (ix)
1542+ 6866
1543+ 6866
1544+ 6866              //  ______________________________________________________________________
1545+ 6866              //
1546+ 6866              // d+           d1 d2 -- d3
1547+ 6866              // returns the unsigned sum of two top double-numbers
1548+ 6866              //      d2  d1
1549+ 6866              //      h l h l
1550+ 6866              // SP   LHEDLHED
1551+ 6866              // SP  +01234567
1552+ 6866                              New_Def DPLUS, "D+", is_code, is_normal
1552+ 6866             >
1552+ 6866             >Dict_Ptr        defl    $
1552+ 6866             >
1552+ 6866             >//              ______________________________________________________________________
1552+ 6866             >//              Heap part
1552+ 6866             >
1552+ 6866             >
1552+ 6866             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E296             >
1552+ E296             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E296             >Latest_Definition defl  Heap_Ptr
1552+ E296             >
1552+ E296             >                // dummy db directives used to calculate length of namec
1552+ E296 44 2B       >                db      "D+"
1552+ E298             >len_NFA         defl    $ - temp_NFA
1552+ E298             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E296             >
1552+ E296 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E297 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1552+ E299             >                org     $-1                 // alter last byte of Name just above to set
1552+ E298 AB          >                db      {b $} | END_BIT     // msb as name end
1552+ E299             >
1552+ E299 90 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E29B             >Prev_Ptr        defl    Heap_Ptr
1552+ E29B             >
1552+ E29B             >mirror_Ptr      defl    $
1552+ E29B             >
1552+ E29B 68 68       >                dw      Dict_Ptr + 2        // xt
1552+ E29D             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E29D             >
1552+ E29D             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E29D             >
1552+ E29D             >//              ______________________________________________________________________
1552+ E29D             >//              Dictionary part
1552+ E29D             >
1552+ E29D             >                org     Dict_Ptr
1552+ 6866             >
1552+ 6866 9B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 6868             >
1552+ 6868             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 6868 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1552+ 6868 ~           >
1552+ 6868 ~           >
1552+ 6868             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 6868             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 6868             >
1552+ 6868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 6868
1554+ 6868 D9                           exx
1555+ 6869 C1                           pop     bc                  // bc := d2.H
1556+ 686A D1                           pop     de                  // hl := d2.L
1557+ 686B E1                           pop     hl                  // d1.H
1558+ 686C E3                           ex      (sp), hl            // d1.L
1559+ 686D 19                           add     hl, de              // hl := d2.L + d1.L
1560+ 686E E3                           ex      (sp), hl            // d1.H
1561+ 686F ED 4A                        adc     hl, bc              // d1.H + d2.H
1562+ 6871 E5                           push    hl
1563+ 6872 D9                           exx
1564+ 6873                              next
1564+ 6873 DD E9       >                jp      (ix)
1565+ 6875
1566+ 6875              //  ______________________________________________________________________
1567+ 6875              //
1568+ 6875              // 1+           n1 -- n2
1569+ 6875              // increment by 1 top of stack
1570+ 6875                              New_Def ONE_PLUS, "1+", is_code, is_normal
1570+ 6875             >
1570+ 6875             >Dict_Ptr        defl    $
1570+ 6875             >
1570+ 6875             >//              ______________________________________________________________________
1570+ 6875             >//              Heap part
1570+ 6875             >
1570+ 6875             >
1570+ 6875             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E29D             >
1570+ E29D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E29D             >Latest_Definition defl  Heap_Ptr
1570+ E29D             >
1570+ E29D             >                // dummy db directives used to calculate length of namec
1570+ E29D 31 2B       >                db      "1+"
1570+ E29F             >len_NFA         defl    $ - temp_NFA
1570+ E29F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E29D             >
1570+ E29D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E29E 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1570+ E2A0             >                org     $-1                 // alter last byte of Name just above to set
1570+ E29F AB          >                db      {b $} | END_BIT     // msb as name end
1570+ E2A0             >
1570+ E2A0 96 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2A2             >Prev_Ptr        defl    Heap_Ptr
1570+ E2A2             >
1570+ E2A2             >mirror_Ptr      defl    $
1570+ E2A2             >
1570+ E2A2 77 68       >                dw      Dict_Ptr + 2        // xt
1570+ E2A4             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2A4             >
1570+ E2A4             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2A4             >
1570+ E2A4             >//              ______________________________________________________________________
1570+ E2A4             >//              Dictionary part
1570+ E2A4             >
1570+ E2A4             >                org     Dict_Ptr
1570+ 6875             >
1570+ 6875 A2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 6877             >
1570+ 6877             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 6877 ~           >
1570+ 6877 ~           >
1570+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 6877             >
1570+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 6877 E1                           pop     hl
1572+ 6878 23                           inc     hl
1573+ 6879
1574+ 6879                              psh1
1574+ 6879 E5          >                push    hl
1574+ 687A DD E9       >                jp      (ix)
1575+ 687C
1576+ 687C              //  ______________________________________________________________________
1577+ 687C              //
1578+ 687C              // 1-           n1 -- n2
1579+ 687C              // decrement by 1 top of stack
1580+ 687C                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1580+ 687C             >
1580+ 687C             >Dict_Ptr        defl    $
1580+ 687C             >
1580+ 687C             >//              ______________________________________________________________________
1580+ 687C             >//              Heap part
1580+ 687C             >
1580+ 687C             >
1580+ 687C             >                org     (Heap_Ptr & $1FFF) + $E000
1580+ E2A4             >
1580+ E2A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1580+ E2A4             >Latest_Definition defl  Heap_Ptr
1580+ E2A4             >
1580+ E2A4             >                // dummy db directives used to calculate length of namec
1580+ E2A4 31 2D       >                db      "1-"
1580+ E2A6             >len_NFA         defl    $ - temp_NFA
1580+ E2A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1580+ E2A4             >
1580+ E2A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1580+ E2A5 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1580+ E2A7             >                org     $-1                 // alter last byte of Name just above to set
1580+ E2A6 AD          >                db      {b $} | END_BIT     // msb as name end
1580+ E2A7             >
1580+ E2A7 9D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1580+ E2A9             >Prev_Ptr        defl    Heap_Ptr
1580+ E2A9             >
1580+ E2A9             >mirror_Ptr      defl    $
1580+ E2A9             >
1580+ E2A9 7E 68       >                dw      Dict_Ptr + 2        // xt
1580+ E2AB             >Heap_Ptr        defl    $ - $E000           // save current HP
1580+ E2AB             >
1580+ E2AB             >Current_HP      defl  $ - $E000             // used to set HP once!
1580+ E2AB             >
1580+ E2AB             >//              ______________________________________________________________________
1580+ E2AB             >//              Dictionary part
1580+ E2AB             >
1580+ E2AB             >                org     Dict_Ptr
1580+ 687C             >
1580+ 687C A9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1580+ 687E             >
1580+ 687E             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1580+ 687E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1580+ 687E ~           >
1580+ 687E ~           >
1580+ 687E             >                endif           ; ok        // for other definitions it "points" the correct handler
1580+ 687E             >                // Use of "; ok" to suppress "warning[fwdref]"
1580+ 687E             >
1580+ 687E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1581+ 687E E1                           pop     hl
1582+ 687F 2B                           dec     hl
1583+ 6880
1584+ 6880                              psh1
1584+ 6880 E5          >                push    hl
1584+ 6881 DD E9       >                jp      (ix)
1585+ 6883
1586+ 6883              //  ______________________________________________________________________
1587+ 6883              //
1588+ 6883              // 2+           n1 -- n2
1589+ 6883              // increment by 2 top of stack
1590+ 6883                              New_Def TWO_PLUS, "2+", is_code, is_normal
1590+ 6883             >
1590+ 6883             >Dict_Ptr        defl    $
1590+ 6883             >
1590+ 6883             >//              ______________________________________________________________________
1590+ 6883             >//              Heap part
1590+ 6883             >
1590+ 6883             >
1590+ 6883             >                org     (Heap_Ptr & $1FFF) + $E000
1590+ E2AB             >
1590+ E2AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1590+ E2AB             >Latest_Definition defl  Heap_Ptr
1590+ E2AB             >
1590+ E2AB             >                // dummy db directives used to calculate length of namec
1590+ E2AB 32 2B       >                db      "2+"
1590+ E2AD             >len_NFA         defl    $ - temp_NFA
1590+ E2AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1590+ E2AB             >
1590+ E2AB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1590+ E2AC 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1590+ E2AE             >                org     $-1                 // alter last byte of Name just above to set
1590+ E2AD AB          >                db      {b $} | END_BIT     // msb as name end
1590+ E2AE             >
1590+ E2AE A4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1590+ E2B0             >Prev_Ptr        defl    Heap_Ptr
1590+ E2B0             >
1590+ E2B0             >mirror_Ptr      defl    $
1590+ E2B0             >
1590+ E2B0 85 68       >                dw      Dict_Ptr + 2        // xt
1590+ E2B2             >Heap_Ptr        defl    $ - $E000           // save current HP
1590+ E2B2             >
1590+ E2B2             >Current_HP      defl  $ - $E000             // used to set HP once!
1590+ E2B2             >
1590+ E2B2             >//              ______________________________________________________________________
1590+ E2B2             >//              Dictionary part
1590+ E2B2             >
1590+ E2B2             >                org     Dict_Ptr
1590+ 6883             >
1590+ 6883 B0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1590+ 6885             >
1590+ 6885             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1590+ 6885 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1590+ 6885 ~           >
1590+ 6885 ~           >
1590+ 6885             >                endif           ; ok        // for other definitions it "points" the correct handler
1590+ 6885             >                // Use of "; ok" to suppress "warning[fwdref]"
1590+ 6885             >
1590+ 6885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1591+ 6885              Two_Plus:
1592+ 6885 E1                           pop     hl
1593+ 6886 23                           inc     hl
1594+ 6887 23                           inc     hl
1595+ 6888
1596+ 6888                              psh1
1596+ 6888 E5          >                push    hl
1596+ 6889 DD E9       >                jp      (ix)
1597+ 688B
1598+ 688B              //  ______________________________________________________________________
1599+ 688B              //
1600+ 688B              // cell+        a1 -- a2
1601+ 688B              // increment by 2 top of stack
1602+ 688B                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1602+ 688B             >
1602+ 688B             >Dict_Ptr        defl    $
1602+ 688B             >
1602+ 688B             >//              ______________________________________________________________________
1602+ 688B             >//              Heap part
1602+ 688B             >
1602+ 688B             >
1602+ 688B             >                org     (Heap_Ptr & $1FFF) + $E000
1602+ E2B2             >
1602+ E2B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1602+ E2B2             >Latest_Definition defl  Heap_Ptr
1602+ E2B2             >
1602+ E2B2             >                // dummy db directives used to calculate length of namec
1602+ E2B2 43 45 4C 4C >                db      "CELL+"
1602+ E2B6 2B          >
1602+ E2B7             >len_NFA         defl    $ - temp_NFA
1602+ E2B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1602+ E2B2             >
1602+ E2B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1602+ E2B3 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1602+ E2B7 2B          >
1602+ E2B8             >                org     $-1                 // alter last byte of Name just above to set
1602+ E2B7 AB          >                db      {b $} | END_BIT     // msb as name end
1602+ E2B8             >
1602+ E2B8 AB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1602+ E2BA             >Prev_Ptr        defl    Heap_Ptr
1602+ E2BA             >
1602+ E2BA             >mirror_Ptr      defl    $
1602+ E2BA             >
1602+ E2BA 8D 68       >                dw      Dict_Ptr + 2        // xt
1602+ E2BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1602+ E2BC             >
1602+ E2BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1602+ E2BC             >
1602+ E2BC             >//              ______________________________________________________________________
1602+ E2BC             >//              Dictionary part
1602+ E2BC             >
1602+ E2BC             >                org     Dict_Ptr
1602+ 688B             >
1602+ 688B BA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1602+ 688D             >
1602+ 688D             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1602+ 688D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1602+ 688D ~           >
1602+ 688D ~           >
1602+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
1602+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
1602+ 688D             >
1602+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1603+ 688D 18 F6                        jr      Two_Plus
1604+ 688F
1605+ 688F              //  ______________________________________________________________________
1606+ 688F              //
1607+ 688F              // align        a1 -- a2
1608+ 688F              // align memory : not used
1609+ 688F              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1610+ 688F              //            next
1611+ 688F
1612+ 688F              //  ______________________________________________________________________
1613+ 688F              //
1614+ 688F              // cell-        a1 -- a2
1615+ 688F              // decrement by 2 top of stack
1616+ 688F                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1616+ 688F             >
1616+ 688F             >Dict_Ptr        defl    $
1616+ 688F             >
1616+ 688F             >//              ______________________________________________________________________
1616+ 688F             >//              Heap part
1616+ 688F             >
1616+ 688F             >
1616+ 688F             >                org     (Heap_Ptr & $1FFF) + $E000
1616+ E2BC             >
1616+ E2BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1616+ E2BC             >Latest_Definition defl  Heap_Ptr
1616+ E2BC             >
1616+ E2BC             >                // dummy db directives used to calculate length of namec
1616+ E2BC 43 45 4C 4C >                db      "CELL-"
1616+ E2C0 2D          >
1616+ E2C1             >len_NFA         defl    $ - temp_NFA
1616+ E2C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1616+ E2BC             >
1616+ E2BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1616+ E2BD 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1616+ E2C1 2D          >
1616+ E2C2             >                org     $-1                 // alter last byte of Name just above to set
1616+ E2C1 AD          >                db      {b $} | END_BIT     // msb as name end
1616+ E2C2             >
1616+ E2C2 B2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1616+ E2C4             >Prev_Ptr        defl    Heap_Ptr
1616+ E2C4             >
1616+ E2C4             >mirror_Ptr      defl    $
1616+ E2C4             >
1616+ E2C4 91 68       >                dw      Dict_Ptr + 2        // xt
1616+ E2C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1616+ E2C6             >
1616+ E2C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1616+ E2C6             >
1616+ E2C6             >//              ______________________________________________________________________
1616+ E2C6             >//              Dictionary part
1616+ E2C6             >
1616+ E2C6             >                org     Dict_Ptr
1616+ 688F             >
1616+ 688F C4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1616+ 6891             >
1616+ 6891             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1616+ 6891 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1616+ 6891 ~           >
1616+ 6891 ~           >
1616+ 6891             >                endif           ; ok        // for other definitions it "points" the correct handler
1616+ 6891             >                // Use of "; ok" to suppress "warning[fwdref]"
1616+ 6891             >
1616+ 6891             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1617+ 6891              CellMinus:
1618+ 6891 E1                           pop     hl
1619+ 6892 2B                           dec     hl
1620+ 6893 2B                           dec     hl
1621+ 6894
1622+ 6894                              psh1
1622+ 6894 E5          >                push    hl
1622+ 6895 DD E9       >                jp      (ix)
1623+ 6897
1624+ 6897              //  ______________________________________________________________________
1625+ 6897              //
1626+ 6897              // 2-           a1 -- a2
1627+ 6897              // decrement by 2 top of stack
1628+ 6897                              New_Def TWO_MINUS, "2-", is_code, is_normal
1628+ 6897             >
1628+ 6897             >Dict_Ptr        defl    $
1628+ 6897             >
1628+ 6897             >//              ______________________________________________________________________
1628+ 6897             >//              Heap part
1628+ 6897             >
1628+ 6897             >
1628+ 6897             >                org     (Heap_Ptr & $1FFF) + $E000
1628+ E2C6             >
1628+ E2C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1628+ E2C6             >Latest_Definition defl  Heap_Ptr
1628+ E2C6             >
1628+ E2C6             >                // dummy db directives used to calculate length of namec
1628+ E2C6 32 2D       >                db      "2-"
1628+ E2C8             >len_NFA         defl    $ - temp_NFA
1628+ E2C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1628+ E2C6             >
1628+ E2C6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1628+ E2C7 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1628+ E2C9             >                org     $-1                 // alter last byte of Name just above to set
1628+ E2C8 AD          >                db      {b $} | END_BIT     // msb as name end
1628+ E2C9             >
1628+ E2C9 BC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1628+ E2CB             >Prev_Ptr        defl    Heap_Ptr
1628+ E2CB             >
1628+ E2CB             >mirror_Ptr      defl    $
1628+ E2CB             >
1628+ E2CB 99 68       >                dw      Dict_Ptr + 2        // xt
1628+ E2CD             >Heap_Ptr        defl    $ - $E000           // save current HP
1628+ E2CD             >
1628+ E2CD             >Current_HP      defl  $ - $E000             // used to set HP once!
1628+ E2CD             >
1628+ E2CD             >//              ______________________________________________________________________
1628+ E2CD             >//              Dictionary part
1628+ E2CD             >
1628+ E2CD             >                org     Dict_Ptr
1628+ 6897             >
1628+ 6897 CB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1628+ 6899             >
1628+ 6899             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1628+ 6899 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1628+ 6899 ~           >
1628+ 6899 ~           >
1628+ 6899             >                endif           ; ok        // for other definitions it "points" the correct handler
1628+ 6899             >                // Use of "; ok" to suppress "warning[fwdref]"
1628+ 6899             >
1628+ 6899             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1629+ 6899 C3 91 68                     jp      CellMinus
1630+ 689C
1631+ 689C              //  ______________________________________________________________________
1632+ 689C              //
1633+ 689C              // negate       n1 -- n2
1634+ 689C              // change the sign of number
1635+ 689C                              New_Def MINUS, "NEGATE", is_code, is_normal
1635+ 689C             >
1635+ 689C             >Dict_Ptr        defl    $
1635+ 689C             >
1635+ 689C             >//              ______________________________________________________________________
1635+ 689C             >//              Heap part
1635+ 689C             >
1635+ 689C             >
1635+ 689C             >                org     (Heap_Ptr & $1FFF) + $E000
1635+ E2CD             >
1635+ E2CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1635+ E2CD             >Latest_Definition defl  Heap_Ptr
1635+ E2CD             >
1635+ E2CD             >                // dummy db directives used to calculate length of namec
1635+ E2CD 4E 45 47 41 >                db      "NEGATE"
1635+ E2D1 54 45       >
1635+ E2D3             >len_NFA         defl    $ - temp_NFA
1635+ E2D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1635+ E2CD             >
1635+ E2CD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1635+ E2CE 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1635+ E2D2 54 45       >
1635+ E2D4             >                org     $-1                 // alter last byte of Name just above to set
1635+ E2D3 C5          >                db      {b $} | END_BIT     // msb as name end
1635+ E2D4             >
1635+ E2D4 C6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1635+ E2D6             >Prev_Ptr        defl    Heap_Ptr
1635+ E2D6             >
1635+ E2D6             >mirror_Ptr      defl    $
1635+ E2D6             >
1635+ E2D6 9E 68       >                dw      Dict_Ptr + 2        // xt
1635+ E2D8             >Heap_Ptr        defl    $ - $E000           // save current HP
1635+ E2D8             >
1635+ E2D8             >Current_HP      defl  $ - $E000             // used to set HP once!
1635+ E2D8             >
1635+ E2D8             >//              ______________________________________________________________________
1635+ E2D8             >//              Dictionary part
1635+ E2D8             >
1635+ E2D8             >                org     Dict_Ptr
1635+ 689C             >
1635+ 689C D6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1635+ 689E             >
1635+ 689E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1635+ 689E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1635+ 689E ~           >
1635+ 689E ~           >
1635+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
1635+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
1635+ 689E             >
1635+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1636+ 689E D9                           exx
1637+ 689F D1                           pop     de
1638+ 68A0 AF                           xor     a
1639+ 68A1              Negate_Ptr:
1640+ 68A1 67                           ld      h, a
1641+ 68A2 6F                           ld      l, a
1642+ 68A3 ED 52                        sbc     hl, de
1643+ 68A5 E5                           push    hl
1644+ 68A6 D9                           exx
1645+ 68A7                              next
1645+ 68A7 DD E9       >                jp      (ix)
1646+ 68A9
1647+ 68A9              //  ______________________________________________________________________
1648+ 68A9              //
1649+ 68A9              // dnegate      d1 -- d2
1650+ 68A9              // change the sign of a double number
1651+ 68A9                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1651+ 68A9             >
1651+ 68A9             >Dict_Ptr        defl    $
1651+ 68A9             >
1651+ 68A9             >//              ______________________________________________________________________
1651+ 68A9             >//              Heap part
1651+ 68A9             >
1651+ 68A9             >
1651+ 68A9             >                org     (Heap_Ptr & $1FFF) + $E000
1651+ E2D8             >
1651+ E2D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1651+ E2D8             >Latest_Definition defl  Heap_Ptr
1651+ E2D8             >
1651+ E2D8             >                // dummy db directives used to calculate length of namec
1651+ E2D8 44 4E 45 47 >                db      "DNEGATE"
1651+ E2DC 41 54 45    >
1651+ E2DF             >len_NFA         defl    $ - temp_NFA
1651+ E2DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1651+ E2D8             >
1651+ E2D8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1651+ E2D9 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1651+ E2DD 41 54 45    >
1651+ E2E0             >                org     $-1                 // alter last byte of Name just above to set
1651+ E2DF C5          >                db      {b $} | END_BIT     // msb as name end
1651+ E2E0             >
1651+ E2E0 CD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1651+ E2E2             >Prev_Ptr        defl    Heap_Ptr
1651+ E2E2             >
1651+ E2E2             >mirror_Ptr      defl    $
1651+ E2E2             >
1651+ E2E2 AB 68       >                dw      Dict_Ptr + 2        // xt
1651+ E2E4             >Heap_Ptr        defl    $ - $E000           // save current HP
1651+ E2E4             >
1651+ E2E4             >Current_HP      defl  $ - $E000             // used to set HP once!
1651+ E2E4             >
1651+ E2E4             >//              ______________________________________________________________________
1651+ E2E4             >//              Dictionary part
1651+ E2E4             >
1651+ E2E4             >                org     Dict_Ptr
1651+ 68A9             >
1651+ 68A9 E2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1651+ 68AB             >
1651+ 68AB             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1651+ 68AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1651+ 68AB ~           >
1651+ 68AB ~           >
1651+ 68AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1651+ 68AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1651+ 68AB             >
1651+ 68AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1652+ 68AB D9                           exx
1653+ 68AC D1                           pop     de                  // d1.H
1654+ 68AD C1                           pop     bc                  // d1.L
1655+ 68AE AF                           xor     a
1656+ 68AF 67                           ld      h, a
1657+ 68B0 6F                           ld      l, a
1658+ 68B1 ED 42                        sbc     hl, bc              // subtact from zero
1659+ 68B3 E5                           push    hl                  // > d2-L
1660+ 68B4
1661+ 68B4 18 EB                        jr      Negate_Ptr
1662+ 68B6              //              ld      h, a
1663+ 68B6              //              ld      l, a
1664+ 68B6              //              sbc     hl, de              // subtract from zero with carry
1665+ 68B6                                                          // > d2-H
1666+ 68B6              //              push    hl
1667+ 68B6              //              exx
1668+ 68B6              //              next
1669+ 68B6
1670+ 68B6              //  ______________________________________________________________________
1671+ 68B6              //
1672+ 68B6              // over         n1 n2 -- n1 n2 n1
1673+ 68B6              // copy the second value of stack and put it on top.
1674+ 68B6                              New_Def OVER, "OVER", is_code, is_normal
1674+ 68B6             >
1674+ 68B6             >Dict_Ptr        defl    $
1674+ 68B6             >
1674+ 68B6             >//              ______________________________________________________________________
1674+ 68B6             >//              Heap part
1674+ 68B6             >
1674+ 68B6             >
1674+ 68B6             >                org     (Heap_Ptr & $1FFF) + $E000
1674+ E2E4             >
1674+ E2E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1674+ E2E4             >Latest_Definition defl  Heap_Ptr
1674+ E2E4             >
1674+ E2E4             >                // dummy db directives used to calculate length of namec
1674+ E2E4 4F 56 45 52 >                db      "OVER"
1674+ E2E8             >len_NFA         defl    $ - temp_NFA
1674+ E2E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1674+ E2E4             >
1674+ E2E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1674+ E2E5 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1674+ E2E9             >                org     $-1                 // alter last byte of Name just above to set
1674+ E2E8 D2          >                db      {b $} | END_BIT     // msb as name end
1674+ E2E9             >
1674+ E2E9 D8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1674+ E2EB             >Prev_Ptr        defl    Heap_Ptr
1674+ E2EB             >
1674+ E2EB             >mirror_Ptr      defl    $
1674+ E2EB             >
1674+ E2EB B8 68       >                dw      Dict_Ptr + 2        // xt
1674+ E2ED             >Heap_Ptr        defl    $ - $E000           // save current HP
1674+ E2ED             >
1674+ E2ED             >Current_HP      defl  $ - $E000             // used to set HP once!
1674+ E2ED             >
1674+ E2ED             >//              ______________________________________________________________________
1674+ E2ED             >//              Dictionary part
1674+ E2ED             >
1674+ E2ED             >                org     Dict_Ptr
1674+ 68B6             >
1674+ 68B6 EB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1674+ 68B8             >
1674+ 68B8             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1674+ 68B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1674+ 68B8 ~           >
1674+ 68B8 ~           >
1674+ 68B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1674+ 68B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1674+ 68B8             >
1674+ 68B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1675+ 68B8                              // exx     // we can use af instead OPTIMIZATION possible
1676+ 68B8 F1                           pop     af                  //   n2
1677+ 68B9 E1                           pop     hl                  // < n1
1678+ 68BA E5                           push    hl                  // > n1
1679+ 68BB F5                           push    af                  // > n2
1680+ 68BC E5                           push    hl                  // > n1
1681+ 68BD                              // exx
1682+ 68BD                              next
1682+ 68BD DD E9       >                jp      (ix)
1683+ 68BF
1684+ 68BF              //  ______________________________________________________________________
1685+ 68BF              //
1686+ 68BF              // drop         n1 --
1687+ 68BF              // drops the top of stack
1688+ 68BF                              New_Def DROP, "DROP", is_code, is_normal
1688+ 68BF             >
1688+ 68BF             >Dict_Ptr        defl    $
1688+ 68BF             >
1688+ 68BF             >//              ______________________________________________________________________
1688+ 68BF             >//              Heap part
1688+ 68BF             >
1688+ 68BF             >
1688+ 68BF             >                org     (Heap_Ptr & $1FFF) + $E000
1688+ E2ED             >
1688+ E2ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1688+ E2ED             >Latest_Definition defl  Heap_Ptr
1688+ E2ED             >
1688+ E2ED             >                // dummy db directives used to calculate length of namec
1688+ E2ED 44 52 4F 50 >                db      "DROP"
1688+ E2F1             >len_NFA         defl    $ - temp_NFA
1688+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1688+ E2ED             >
1688+ E2ED 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1688+ E2EE 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1688+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1688+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1688+ E2F2             >
1688+ E2F2 E4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1688+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1688+ E2F4             >
1688+ E2F4             >mirror_Ptr      defl    $
1688+ E2F4             >
1688+ E2F4 C1 68       >                dw      Dict_Ptr + 2        // xt
1688+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1688+ E2F6             >
1688+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1688+ E2F6             >
1688+ E2F6             >//              ______________________________________________________________________
1688+ E2F6             >//              Dictionary part
1688+ E2F6             >
1688+ E2F6             >                org     Dict_Ptr
1688+ 68BF             >
1688+ 68BF F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1688+ 68C1             >
1688+ 68C1             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1688+ 68C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1688+ 68C1 ~           >
1688+ 68C1 ~           >
1688+ 68C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1688+ 68C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1688+ 68C1             >
1688+ 68C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1689+ 68C1 E1                           pop     hl                  // < n1 and discard previous TOS
1690+ 68C2                              next
1690+ 68C2 DD E9       >                jp      (ix)
1691+ 68C4
1692+ 68C4              //  ______________________________________________________________________
1693+ 68C4              //
1694+ 68C4              // nip          n1 n2 -- n2
1695+ 68C4              // drops the second elemento on the stack
1696+ 68C4                              New_Def NIP, "NIP", is_code, is_normal
1696+ 68C4             >
1696+ 68C4             >Dict_Ptr        defl    $
1696+ 68C4             >
1696+ 68C4             >//              ______________________________________________________________________
1696+ 68C4             >//              Heap part
1696+ 68C4             >
1696+ 68C4             >
1696+ 68C4             >                org     (Heap_Ptr & $1FFF) + $E000
1696+ E2F6             >
1696+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ E2F6             >Latest_Definition defl  Heap_Ptr
1696+ E2F6             >
1696+ E2F6             >                // dummy db directives used to calculate length of namec
1696+ E2F6 4E 49 50    >                db      "NIP"
1696+ E2F9             >len_NFA         defl    $ - temp_NFA
1696+ E2F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ E2F6             >
1696+ E2F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ E2F7 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1696+ E2FA             >                org     $-1                 // alter last byte of Name just above to set
1696+ E2F9 D0          >                db      {b $} | END_BIT     // msb as name end
1696+ E2FA             >
1696+ E2FA ED 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1696+ E2FC             >Prev_Ptr        defl    Heap_Ptr
1696+ E2FC             >
1696+ E2FC             >mirror_Ptr      defl    $
1696+ E2FC             >
1696+ E2FC C6 68       >                dw      Dict_Ptr + 2        // xt
1696+ E2FE             >Heap_Ptr        defl    $ - $E000           // save current HP
1696+ E2FE             >
1696+ E2FE             >Current_HP      defl  $ - $E000             // used to set HP once!
1696+ E2FE             >
1696+ E2FE             >//              ______________________________________________________________________
1696+ E2FE             >//              Dictionary part
1696+ E2FE             >
1696+ E2FE             >                org     Dict_Ptr
1696+ 68C4             >
1696+ 68C4 FC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1696+ 68C6             >
1696+ 68C6             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 68C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 68C6 ~           >
1696+ 68C6 ~           >
1696+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 68C6             >
1696+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 68C6
1698+ 68C6 E1                           pop     hl                  // < n1 discarded
1699+ 68C7 E3                           ex      (sp), hl
1700+ 68C8                              next
1700+ 68C8 DD E9       >                jp      (ix)
1701+ 68CA
1702+ 68CA              //  ______________________________________________________________________
1703+ 68CA              //
1704+ 68CA              // tuck         n1 n2 -- n2 n1 n2
1705+ 68CA              // copy the top element after the second.
1706+ 68CA                              New_Def TUCK, "TUCK", is_code, is_normal
1706+ 68CA             >
1706+ 68CA             >Dict_Ptr        defl    $
1706+ 68CA             >
1706+ 68CA             >//              ______________________________________________________________________
1706+ 68CA             >//              Heap part
1706+ 68CA             >
1706+ 68CA             >
1706+ 68CA             >                org     (Heap_Ptr & $1FFF) + $E000
1706+ E2FE             >
1706+ E2FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1706+ E2FE             >Latest_Definition defl  Heap_Ptr
1706+ E2FE             >
1706+ E2FE             >                // dummy db directives used to calculate length of namec
1706+ E2FE 54 55 43 4B >                db      "TUCK"
1706+ E302             >len_NFA         defl    $ - temp_NFA
1706+ E302             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1706+ E2FE             >
1706+ E2FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1706+ E2FF 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1706+ E303             >                org     $-1                 // alter last byte of Name just above to set
1706+ E302 CB          >                db      {b $} | END_BIT     // msb as name end
1706+ E303             >
1706+ E303 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1706+ E305             >Prev_Ptr        defl    Heap_Ptr
1706+ E305             >
1706+ E305             >mirror_Ptr      defl    $
1706+ E305             >
1706+ E305 CC 68       >                dw      Dict_Ptr + 2        // xt
1706+ E307             >Heap_Ptr        defl    $ - $E000           // save current HP
1706+ E307             >
1706+ E307             >Current_HP      defl  $ - $E000             // used to set HP once!
1706+ E307             >
1706+ E307             >//              ______________________________________________________________________
1706+ E307             >//              Dictionary part
1706+ E307             >
1706+ E307             >                org     Dict_Ptr
1706+ 68CA             >
1706+ 68CA 05 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1706+ 68CC             >
1706+ 68CC             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1706+ 68CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1706+ 68CC ~           >
1706+ 68CC ~           >
1706+ 68CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1706+ 68CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1706+ 68CC             >
1706+ 68CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1707+ 68CC E1                           pop     hl
1708+ 68CD F1                           pop     af                  // < n1
1709+ 68CE E5                           push    hl                  // > n2  and TOS
1710+ 68CF F5                           push    af                  // > n1
1711+ 68D0 E5                           push    hl
1712+ 68D1                              next
1712+ 68D1 DD E9       >                jp      (ix)
1713+ 68D3
1714+ 68D3              //  ______________________________________________________________________
1715+ 68D3              //
1716+ 68D3              // swap         n1 n2 -- n2 n1
1717+ 68D3              // swaps the two values on top of stack
1718+ 68D3                              New_Def SWAP, "SWAP", is_code, is_normal
1718+ 68D3             >
1718+ 68D3             >Dict_Ptr        defl    $
1718+ 68D3             >
1718+ 68D3             >//              ______________________________________________________________________
1718+ 68D3             >//              Heap part
1718+ 68D3             >
1718+ 68D3             >
1718+ 68D3             >                org     (Heap_Ptr & $1FFF) + $E000
1718+ E307             >
1718+ E307             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1718+ E307             >Latest_Definition defl  Heap_Ptr
1718+ E307             >
1718+ E307             >                // dummy db directives used to calculate length of namec
1718+ E307 53 57 41 50 >                db      "SWAP"
1718+ E30B             >len_NFA         defl    $ - temp_NFA
1718+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1718+ E307             >
1718+ E307 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1718+ E308 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1718+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1718+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1718+ E30C             >
1718+ E30C FE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1718+ E30E             >Prev_Ptr        defl    Heap_Ptr
1718+ E30E             >
1718+ E30E             >mirror_Ptr      defl    $
1718+ E30E             >
1718+ E30E D5 68       >                dw      Dict_Ptr + 2        // xt
1718+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1718+ E310             >
1718+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1718+ E310             >
1718+ E310             >//              ______________________________________________________________________
1718+ E310             >//              Dictionary part
1718+ E310             >
1718+ E310             >                org     Dict_Ptr
1718+ 68D3             >
1718+ 68D3 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1718+ 68D5             >
1718+ 68D5             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1718+ 68D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1718+ 68D5 ~           >
1718+ 68D5 ~           >
1718+ 68D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1718+ 68D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1718+ 68D5             >
1718+ 68D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1719+ 68D5 E1                           pop     hl                  // < n1
1720+ 68D6 E3                           ex      (sp),hl             // > n2
1721+ 68D7 E5                           push    hl                  // copy n1 to TOS
1722+ 68D8                              next
1722+ 68D8 DD E9       >                jp      (ix)
1723+ 68DA
1724+ 68DA              //  ______________________________________________________________________
1725+ 68DA              //
1726+ 68DA              // dup         n -- n n
1727+ 68DA              // duplicates the top value of stack
1728+ 68DA                              New_Def DUP, "DUP", is_code, is_normal
1728+ 68DA             >
1728+ 68DA             >Dict_Ptr        defl    $
1728+ 68DA             >
1728+ 68DA             >//              ______________________________________________________________________
1728+ 68DA             >//              Heap part
1728+ 68DA             >
1728+ 68DA             >
1728+ 68DA             >                org     (Heap_Ptr & $1FFF) + $E000
1728+ E310             >
1728+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1728+ E310             >Latest_Definition defl  Heap_Ptr
1728+ E310             >
1728+ E310             >                // dummy db directives used to calculate length of namec
1728+ E310 44 55 50    >                db      "DUP"
1728+ E313             >len_NFA         defl    $ - temp_NFA
1728+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1728+ E310             >
1728+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1728+ E311 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1728+ E314             >                org     $-1                 // alter last byte of Name just above to set
1728+ E313 D0          >                db      {b $} | END_BIT     // msb as name end
1728+ E314             >
1728+ E314 07 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1728+ E316             >Prev_Ptr        defl    Heap_Ptr
1728+ E316             >
1728+ E316             >mirror_Ptr      defl    $
1728+ E316             >
1728+ E316 DC 68       >                dw      Dict_Ptr + 2        // xt
1728+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1728+ E318             >
1728+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1728+ E318             >
1728+ E318             >//              ______________________________________________________________________
1728+ E318             >//              Dictionary part
1728+ E318             >
1728+ E318             >                org     Dict_Ptr
1728+ 68DA             >
1728+ 68DA 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1728+ 68DC             >
1728+ 68DC             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1728+ 68DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1728+ 68DC ~           >
1728+ 68DC ~           >
1728+ 68DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1728+ 68DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1728+ 68DC             >
1728+ 68DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1729+ 68DC E1                           pop     hl
1730+ 68DD E5                           push    hl                  // > n duplicate TOS
1731+ 68DE E5                           push    hl
1732+ 68DF                              next
1732+ 68DF DD E9       >                jp      (ix)
1733+ 68E1
1734+ 68E1              //  ______________________________________________________________________
1735+ 68E1              //
1736+ 68E1              // rot         n1 n2 n3 -- n2 n3 n1
1737+ 68E1              // Rotates the 3 top values of stack by picking the 3rd in access-order
1738+ 68E1              // and putting it on top. The other two are shifted down one place.
1739+ 68E1                              New_Def ROT, "ROT", is_code, is_normal
1739+ 68E1             >
1739+ 68E1             >Dict_Ptr        defl    $
1739+ 68E1             >
1739+ 68E1             >//              ______________________________________________________________________
1739+ 68E1             >//              Heap part
1739+ 68E1             >
1739+ 68E1             >
1739+ 68E1             >                org     (Heap_Ptr & $1FFF) + $E000
1739+ E318             >
1739+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1739+ E318             >Latest_Definition defl  Heap_Ptr
1739+ E318             >
1739+ E318             >                // dummy db directives used to calculate length of namec
1739+ E318 52 4F 54    >                db      "ROT"
1739+ E31B             >len_NFA         defl    $ - temp_NFA
1739+ E31B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1739+ E318             >
1739+ E318 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1739+ E319 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1739+ E31C             >                org     $-1                 // alter last byte of Name just above to set
1739+ E31B D4          >                db      {b $} | END_BIT     // msb as name end
1739+ E31C             >
1739+ E31C 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1739+ E31E             >Prev_Ptr        defl    Heap_Ptr
1739+ E31E             >
1739+ E31E             >mirror_Ptr      defl    $
1739+ E31E             >
1739+ E31E E3 68       >                dw      Dict_Ptr + 2        // xt
1739+ E320             >Heap_Ptr        defl    $ - $E000           // save current HP
1739+ E320             >
1739+ E320             >Current_HP      defl  $ - $E000             // used to set HP once!
1739+ E320             >
1739+ E320             >//              ______________________________________________________________________
1739+ E320             >//              Dictionary part
1739+ E320             >
1739+ E320             >                org     Dict_Ptr
1739+ 68E1             >
1739+ 68E1 1E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1739+ 68E3             >
1739+ 68E3             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1739+ 68E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1739+ 68E3 ~           >
1739+ 68E3 ~           >
1739+ 68E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1739+ 68E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1739+ 68E3             >
1739+ 68E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1740+ 68E3                          //  exx
1741+ 68E3 F1                           pop     af                  // < n3
1742+ 68E4 E1                           pop     hl                  // < n2
1743+ 68E5 E3                           ex      (sp),hl             // > n2 < n1
1744+ 68E6 F5                           push    af                  // > n3
1745+ 68E7 E5                           push    hl                  // copy n1 to TOS
1746+ 68E8                          //  exx
1747+ 68E8                              next
1747+ 68E8 DD E9       >                jp      (ix)
1748+ 68EA
1749+ 68EA              //  ______________________________________________________________________
1750+ 68EA              //
1751+ 68EA              // -rot         n1 n2 n3 -- n3 n1 n2
1752+ 68EA              // Rotates the 3 top values of stack by picking the 1st in access-order
1753+ 68EA              // and putting back to 3rd place. The other two are shifted down one place.
1754+ 68EA                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1754+ 68EA             >
1754+ 68EA             >Dict_Ptr        defl    $
1754+ 68EA             >
1754+ 68EA             >//              ______________________________________________________________________
1754+ 68EA             >//              Heap part
1754+ 68EA             >
1754+ 68EA             >
1754+ 68EA             >                org     (Heap_Ptr & $1FFF) + $E000
1754+ E320             >
1754+ E320             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1754+ E320             >Latest_Definition defl  Heap_Ptr
1754+ E320             >
1754+ E320             >                // dummy db directives used to calculate length of namec
1754+ E320 2D 52 4F 54 >                db      "-ROT"
1754+ E324             >len_NFA         defl    $ - temp_NFA
1754+ E324             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1754+ E320             >
1754+ E320 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1754+ E321 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1754+ E325             >                org     $-1                 // alter last byte of Name just above to set
1754+ E324 D4          >                db      {b $} | END_BIT     // msb as name end
1754+ E325             >
1754+ E325 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1754+ E327             >Prev_Ptr        defl    Heap_Ptr
1754+ E327             >
1754+ E327             >mirror_Ptr      defl    $
1754+ E327             >
1754+ E327 EC 68       >                dw      Dict_Ptr + 2        // xt
1754+ E329             >Heap_Ptr        defl    $ - $E000           // save current HP
1754+ E329             >
1754+ E329             >Current_HP      defl  $ - $E000             // used to set HP once!
1754+ E329             >
1754+ E329             >//              ______________________________________________________________________
1754+ E329             >//              Dictionary part
1754+ E329             >
1754+ E329             >                org     Dict_Ptr
1754+ 68EA             >
1754+ 68EA 27 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1754+ 68EC             >
1754+ 68EC             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1754+ 68EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1754+ 68EC ~           >
1754+ 68EC ~           >
1754+ 68EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1754+ 68EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1754+ 68EC             >
1754+ 68EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1755+ 68EC                          //  exx
1756+ 68EC E1                           pop     hl                  // < n3
1757+ 68ED F1                           pop     af                  // < n2
1758+ 68EE E3                           ex      (sp),hl             // > n3 < n1
1759+ 68EF E5                           push    hl                  // > n1
1760+ 68F0 F5                           push    af                  // copy n3 to TOS
1761+ 68F1                          //  exx
1762+ 68F1                              next
1762+ 68F1 DD E9       >                jp      (ix)
1763+ 68F3
1764+ 68F3              //  ______________________________________________________________________
1765+ 68F3              //
1766+ 68F3              // pick        n1 -- nx
1767+ 68F3              // picks the nth element from TOS
1768+ 68F3                              New_Def PICK, "PICK", is_code, is_normal
1768+ 68F3             >
1768+ 68F3             >Dict_Ptr        defl    $
1768+ 68F3             >
1768+ 68F3             >//              ______________________________________________________________________
1768+ 68F3             >//              Heap part
1768+ 68F3             >
1768+ 68F3             >
1768+ 68F3             >                org     (Heap_Ptr & $1FFF) + $E000
1768+ E329             >
1768+ E329             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1768+ E329             >Latest_Definition defl  Heap_Ptr
1768+ E329             >
1768+ E329             >                // dummy db directives used to calculate length of namec
1768+ E329 50 49 43 4B >                db      "PICK"
1768+ E32D             >len_NFA         defl    $ - temp_NFA
1768+ E32D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1768+ E329             >
1768+ E329 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1768+ E32A 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1768+ E32E             >                org     $-1                 // alter last byte of Name just above to set
1768+ E32D CB          >                db      {b $} | END_BIT     // msb as name end
1768+ E32E             >
1768+ E32E 20 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1768+ E330             >Prev_Ptr        defl    Heap_Ptr
1768+ E330             >
1768+ E330             >mirror_Ptr      defl    $
1768+ E330             >
1768+ E330 F5 68       >                dw      Dict_Ptr + 2        // xt
1768+ E332             >Heap_Ptr        defl    $ - $E000           // save current HP
1768+ E332             >
1768+ E332             >Current_HP      defl  $ - $E000             // used to set HP once!
1768+ E332             >
1768+ E332             >//              ______________________________________________________________________
1768+ E332             >//              Dictionary part
1768+ E332             >
1768+ E332             >                org     Dict_Ptr
1768+ 68F3             >
1768+ 68F3 30 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1768+ 68F5             >
1768+ 68F5             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1768+ 68F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1768+ 68F5 ~           >
1768+ 68F5 ~           >
1768+ 68F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1768+ 68F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1768+ 68F5             >
1768+ 68F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1769+ 68F5 E1                           pop     hl                  // take TOS as index
1770+ 68F6 29                           add     hl, hl              // as cells
1771+ 68F7 39                           add     hl, sp              // from Stack Pointer
1772+ 68F8 7E                           ld      a, (hl)             // replace TOS
1773+ 68F9 23                           inc     hl
1774+ 68FA 66                           ld      h, (hl)
1775+ 68FB 6F                           ld      l, a
1776+ 68FC E5                           push    hl
1777+ 68FD                              next
1777+ 68FD DD E9       >                jp      (ix)
1778+ 68FF
1779+ 68FF
1780+ 68FF              //  ______________________________________________________________________
1781+ 68FF              //
1782+ 68FF              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1783+ 68FF              // picks the nth element from TOS
1784+ 68FF              //              New_Def ROLL, "ROLL", is_code, is_normal
1785+ 68FF              //              exx                     // we need all registers free
1786+ 68FF              //              pop     hl              // number of cells to roll
1787+ 68FF              //              ld      a, h
1788+ 68FF              //              or       l
1789+ 68FF              //              jr      z, Roll_Zero
1790+ 68FF              //                  add     hl, hl              // number of bytes to move
1791+ 68FF              //                  ld      b, h
1792+ 68FF              //                  ld      c, l
1793+ 68FF              //                  add     hl, sp          // address of n1
1794+ 68FF              //                  ld      a, (hl)         // take n1 into a and a,
1795+ 68FF              //                  inc     hl
1796+ 68FF              //                  ex      af, af'
1797+ 68FF              //                  ld      a, (hl)         // take n1 into a and a,
1798+ 68FF              //                  ld      d, h
1799+ 68FF              //                  ld      e, l
1800+ 68FF              //                  dec     hl
1801+ 68FF              //                  dec     hl
1802+ 68FF              //                  lddr
1803+ 68FF              //                  ex      de, hl
1804+ 68FF              //                  ld      (hl), a
1805+ 68FF              //                  dec     hl
1806+ 68FF              //                  ex      af, af'
1807+ 68FF              //                  ld      (hl), a
1808+ 68FF              //Roll_Zero:
1809+ 68FF              //              exx
1810+ 68FF              //              next
1811+ 68FF
1812+ 68FF
1813+ 68FF              //  ______________________________________________________________________
1814+ 68FF              //
1815+ 68FF              // 2over        d1 d2 -- d1 d2 d1
1816+ 68FF              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1817+ 68FF              // copy the second double of stack and put on top.
1818+ 68FF                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1818+ 68FF             >
1818+ 68FF             >Dict_Ptr        defl    $
1818+ 68FF             >
1818+ 68FF             >//              ______________________________________________________________________
1818+ 68FF             >//              Heap part
1818+ 68FF             >
1818+ 68FF             >
1818+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1818+ E332             >
1818+ E332             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ E332             >Latest_Definition defl  Heap_Ptr
1818+ E332             >
1818+ E332             >                // dummy db directives used to calculate length of namec
1818+ E332 32 4F 56 45 >                db      "2OVER"
1818+ E336 52          >
1818+ E337             >len_NFA         defl    $ - temp_NFA
1818+ E337             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ E332             >
1818+ E332 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ E333 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1818+ E337 52          >
1818+ E338             >                org     $-1                 // alter last byte of Name just above to set
1818+ E337 D2          >                db      {b $} | END_BIT     // msb as name end
1818+ E338             >
1818+ E338 29 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1818+ E33A             >Prev_Ptr        defl    Heap_Ptr
1818+ E33A             >
1818+ E33A             >mirror_Ptr      defl    $
1818+ E33A             >
1818+ E33A 01 69       >                dw      Dict_Ptr + 2        // xt
1818+ E33C             >Heap_Ptr        defl    $ - $E000           // save current HP
1818+ E33C             >
1818+ E33C             >Current_HP      defl  $ - $E000             // used to set HP once!
1818+ E33C             >
1818+ E33C             >//              ______________________________________________________________________
1818+ E33C             >//              Dictionary part
1818+ E33C             >
1818+ E33C             >                org     Dict_Ptr
1818+ 68FF             >
1818+ 68FF 3A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1818+ 6901             >
1818+ 6901             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1818+ 6901 ~           >
1818+ 6901 ~           >
1818+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6901             >
1818+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6901 D9                           exx
1820+ 6902 E1                           pop     hl      // n4
1821+ 6903 D1                           pop     de      // n3 : d2
1822+ 6904 C1                           pop     bc      // n2
1823+ 6905 F1                           pop     af      // n1 : d1
1824+ 6906 F5                           push    af      // n1
1825+ 6907 C5                           push    bc      // n2 : d1
1826+ 6908 D5                           push    de      // n3
1827+ 6909 E5                           push    hl      // n4 : d2
1828+ 690A F5                           push    af      // n1
1829+ 690B C5                           push    bc      // n2 : d1
1830+ 690C D9                           exx
1831+ 690D                              next
1831+ 690D DD E9       >                jp      (ix)
1832+ 690F
1833+ 690F              //  ______________________________________________________________________
1834+ 690F              //
1835+ 690F              // 2drop        d --
1836+ 690F              //              n1 n2 --
1837+ 690F              // drops the top double from stack
1838+ 690F                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1838+ 690F             >
1838+ 690F             >Dict_Ptr        defl    $
1838+ 690F             >
1838+ 690F             >//              ______________________________________________________________________
1838+ 690F             >//              Heap part
1838+ 690F             >
1838+ 690F             >
1838+ 690F             >                org     (Heap_Ptr & $1FFF) + $E000
1838+ E33C             >
1838+ E33C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1838+ E33C             >Latest_Definition defl  Heap_Ptr
1838+ E33C             >
1838+ E33C             >                // dummy db directives used to calculate length of namec
1838+ E33C 32 44 52 4F >                db      "2DROP"
1838+ E340 50          >
1838+ E341             >len_NFA         defl    $ - temp_NFA
1838+ E341             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1838+ E33C             >
1838+ E33C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1838+ E33D 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1838+ E341 50          >
1838+ E342             >                org     $-1                 // alter last byte of Name just above to set
1838+ E341 D0          >                db      {b $} | END_BIT     // msb as name end
1838+ E342             >
1838+ E342 32 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1838+ E344             >Prev_Ptr        defl    Heap_Ptr
1838+ E344             >
1838+ E344             >mirror_Ptr      defl    $
1838+ E344             >
1838+ E344 11 69       >                dw      Dict_Ptr + 2        // xt
1838+ E346             >Heap_Ptr        defl    $ - $E000           // save current HP
1838+ E346             >
1838+ E346             >Current_HP      defl  $ - $E000             // used to set HP once!
1838+ E346             >
1838+ E346             >//              ______________________________________________________________________
1838+ E346             >//              Dictionary part
1838+ E346             >
1838+ E346             >                org     Dict_Ptr
1838+ 690F             >
1838+ 690F 44 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1838+ 6911             >
1838+ 6911             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1838+ 6911 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1838+ 6911 ~           >
1838+ 6911 ~           >
1838+ 6911             >                endif           ; ok        // for other definitions it "points" the correct handler
1838+ 6911             >                // Use of "; ok" to suppress "warning[fwdref]"
1838+ 6911             >
1838+ 6911             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1839+ 6911 E1                           pop     hl
1840+ 6912 E1                           pop     hl
1841+ 6913                              next
1841+ 6913 DD E9       >                jp      (ix)
1842+ 6915
1843+ 6915              //  ______________________________________________________________________
1844+ 6915              //
1845+ 6915              // 2nip         d1 d2 -- d2
1846+ 6915              //              n1 n2 n3 n4 -- n3 n4
1847+ 6915              // drops the second double on the stack
1848+ 6915              //              New_Def TWO_NIP, 4, "2nip"
1849+ 6915              //              ...
1850+ 6915
1851+ 6915              //  ______________________________________________________________________
1852+ 6915              //
1853+ 6915              // 2tuck         d1 d2 -- d2 d1 d2
1854+ 6915              // copy the top element after the second.
1855+ 6915              //              New_Def TWO_TUCK, 5, "2tuck"
1856+ 6915              //              ...
1857+ 6915
1858+ 6915              //  ______________________________________________________________________
1859+ 6915              //
1860+ 6915              // 2swap         d1 d2 -- d2 d1
1861+ 6915              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1862+ 6915              // swaps the two doubles on top of stack
1863+ 6915                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1863+ 6915             >
1863+ 6915             >Dict_Ptr        defl    $
1863+ 6915             >
1863+ 6915             >//              ______________________________________________________________________
1863+ 6915             >//              Heap part
1863+ 6915             >
1863+ 6915             >
1863+ 6915             >                org     (Heap_Ptr & $1FFF) + $E000
1863+ E346             >
1863+ E346             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1863+ E346             >Latest_Definition defl  Heap_Ptr
1863+ E346             >
1863+ E346             >                // dummy db directives used to calculate length of namec
1863+ E346 32 53 57 41 >                db      "2SWAP"
1863+ E34A 50          >
1863+ E34B             >len_NFA         defl    $ - temp_NFA
1863+ E34B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1863+ E346             >
1863+ E346 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1863+ E347 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1863+ E34B 50          >
1863+ E34C             >                org     $-1                 // alter last byte of Name just above to set
1863+ E34B D0          >                db      {b $} | END_BIT     // msb as name end
1863+ E34C             >
1863+ E34C 3C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1863+ E34E             >Prev_Ptr        defl    Heap_Ptr
1863+ E34E             >
1863+ E34E             >mirror_Ptr      defl    $
1863+ E34E             >
1863+ E34E 17 69       >                dw      Dict_Ptr + 2        // xt
1863+ E350             >Heap_Ptr        defl    $ - $E000           // save current HP
1863+ E350             >
1863+ E350             >Current_HP      defl  $ - $E000             // used to set HP once!
1863+ E350             >
1863+ E350             >//              ______________________________________________________________________
1863+ E350             >//              Dictionary part
1863+ E350             >
1863+ E350             >                org     Dict_Ptr
1863+ 6915             >
1863+ 6915 4E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1863+ 6917             >
1863+ 6917             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1863+ 6917 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1863+ 6917 ~           >
1863+ 6917 ~           >
1863+ 6917             >                endif           ; ok        // for other definitions it "points" the correct handler
1863+ 6917             >                // Use of "; ok" to suppress "warning[fwdref]"
1863+ 6917             >
1863+ 6917             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1864+ 6917 D9                           exx
1865+ 6918 F1                           pop     af                  // < d2-H
1866+ 6919 E1                           pop     hl                  // < d2-L
1867+ 691A D1                           pop     de                  // < d1-H
1868+ 691B E3                           ex      (sp), hl            // < d1-L > d2-L
1869+ 691C F5                           push    af                  //        > d2-H
1870+ 691D E5                           push    hl                  //        > d1-L
1871+ 691E D5                           push    de                  //        > d1-H
1872+ 691F D9                           exx
1873+ 6920                              next
1873+ 6920 DD E9       >                jp      (ix)
1874+ 6922
1875+ 6922              //  ______________________________________________________________________
1876+ 6922              //
1877+ 6922              // 2dup         d -- d d
1878+ 6922              //              n1 n2 -- n1 n2 n1 n2
1879+ 6922              // duplicates the top double of stack
1880+ 6922                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1880+ 6922             >
1880+ 6922             >Dict_Ptr        defl    $
1880+ 6922             >
1880+ 6922             >//              ______________________________________________________________________
1880+ 6922             >//              Heap part
1880+ 6922             >
1880+ 6922             >
1880+ 6922             >                org     (Heap_Ptr & $1FFF) + $E000
1880+ E350             >
1880+ E350             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1880+ E350             >Latest_Definition defl  Heap_Ptr
1880+ E350             >
1880+ E350             >                // dummy db directives used to calculate length of namec
1880+ E350 32 44 55 50 >                db      "2DUP"
1880+ E354             >len_NFA         defl    $ - temp_NFA
1880+ E354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1880+ E350             >
1880+ E350 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1880+ E351 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1880+ E355             >                org     $-1                 // alter last byte of Name just above to set
1880+ E354 D0          >                db      {b $} | END_BIT     // msb as name end
1880+ E355             >
1880+ E355 46 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1880+ E357             >Prev_Ptr        defl    Heap_Ptr
1880+ E357             >
1880+ E357             >mirror_Ptr      defl    $
1880+ E357             >
1880+ E357 24 69       >                dw      Dict_Ptr + 2        // xt
1880+ E359             >Heap_Ptr        defl    $ - $E000           // save current HP
1880+ E359             >
1880+ E359             >Current_HP      defl  $ - $E000             // used to set HP once!
1880+ E359             >
1880+ E359             >//              ______________________________________________________________________
1880+ E359             >//              Dictionary part
1880+ E359             >
1880+ E359             >                org     Dict_Ptr
1880+ 6922             >
1880+ 6922 57 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1880+ 6924             >
1880+ 6924             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1880+ 6924 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1880+ 6924 ~           >
1880+ 6924 ~           >
1880+ 6924             >                endif           ; ok        // for other definitions it "points" the correct handler
1880+ 6924             >                // Use of "; ok" to suppress "warning[fwdref]"
1880+ 6924             >
1880+ 6924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1881+ 6924 E1                           pop     hl                  // < d-H
1882+ 6925 F1                           pop     af                  // < d-L
1883+ 6926 F5                           push    af                  // < d-L
1884+ 6927 E5                           push    hl                  //       > d-H
1885+ 6928 F5                           push    af                  //       > d-L
1886+ 6929 E5                           push    hl                  //       > d-H
1887+ 692A                              next
1887+ 692A DD E9       >                jp      (ix)
1888+ 692C
1889+ 692C              //  ______________________________________________________________________
1890+ 692C              //
1891+ 692C              // 2rot         d1 d2 d3 -- d2 d3 d1
1892+ 692C              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1893+ 692C              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1894+ 692C              // and putting it on top. The other two are shifted down one place.
1895+ 692C              //              New_Def TWO?ROT, 4, "2rot"
1896+ 692C              //              ...
1897+ 692C              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1898+ 692C              //
1899+ 692C              //      d3  |d2  |d1  |
1900+ 692C              //      h l |h l |h l |
1901+ 692C              // SP   LHED|LHED|LHED|
1902+ 692C              // SP  +0123|4567|89ab|
1903+ 692C              //              ld      hl, $000B
1904+ 692C              //              add     hl, sp
1905+ 692C              //              ld      d, (hl)
1906+ 692C              //              dec     hl
1907+ 692C              //              ld      e, (hl)
1908+ 692C              //              dec     hl
1909+ 692C              //              push    de
1910+ 692C              //              ld      d, (hl)
1911+ 692C              //              dec     hl
1912+ 692C              //              ld      e, (hl)
1913+ 692C              //              dec     hl
1914+ 692C              //              push    de
1915+ 692C
1916+ 692C              //      d1  |d3  |d2  |d1  |
1917+ 692C              //      h l |h l |h l |h l |
1918+ 692C              // SP   LHED|LHED|LHED|LHED|
1919+ 692C              // SP       +0123|4567|89ab|
1920+ 692C
1921+ 692C              //              ld      d, h
1922+ 692C              //              ld      e, l
1923+ 692C              //              inc     de
1924+ 692C              //              inc     de
1925+ 692C              //              inc     de
1926+ 692C              //              inc     de
1927+ 692C              //              push    bc
1928+ 692C              //              ld      bc, $000C
1929+ 692C              //              lddr
1930+ 692C              //              pop     bc
1931+ 692C              //              pop     de
1932+ 692C              //              pop     de
1933+ 692C              //
1934+ 692C              //              next
1935+ 692C
1936+ 692C
1937+ 692C              //  ______________________________________________________________________
1938+ 692C              //
1939+ 692C              // +!           n a --
1940+ 692C              // Sums to the content of address a the number n.
1941+ 692C              // It is the same of  a @ n + a !
1942+ 692C                              New_Def PLUSSTORE, "+!", is_code, is_normal
1942+ 692C             >
1942+ 692C             >Dict_Ptr        defl    $
1942+ 692C             >
1942+ 692C             >//              ______________________________________________________________________
1942+ 692C             >//              Heap part
1942+ 692C             >
1942+ 692C             >
1942+ 692C             >                org     (Heap_Ptr & $1FFF) + $E000
1942+ E359             >
1942+ E359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1942+ E359             >Latest_Definition defl  Heap_Ptr
1942+ E359             >
1942+ E359             >                // dummy db directives used to calculate length of namec
1942+ E359 2B 21       >                db      "+!"
1942+ E35B             >len_NFA         defl    $ - temp_NFA
1942+ E35B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1942+ E359             >
1942+ E359 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1942+ E35A 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1942+ E35C             >                org     $-1                 // alter last byte of Name just above to set
1942+ E35B A1          >                db      {b $} | END_BIT     // msb as name end
1942+ E35C             >
1942+ E35C 50 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1942+ E35E             >Prev_Ptr        defl    Heap_Ptr
1942+ E35E             >
1942+ E35E             >mirror_Ptr      defl    $
1942+ E35E             >
1942+ E35E 2E 69       >                dw      Dict_Ptr + 2        // xt
1942+ E360             >Heap_Ptr        defl    $ - $E000           // save current HP
1942+ E360             >
1942+ E360             >Current_HP      defl  $ - $E000             // used to set HP once!
1942+ E360             >
1942+ E360             >//              ______________________________________________________________________
1942+ E360             >//              Dictionary part
1942+ E360             >
1942+ E360             >                org     Dict_Ptr
1942+ 692C             >
1942+ 692C 5E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1942+ 692E             >
1942+ 692E             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1942+ 692E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1942+ 692E ~           >
1942+ 692E ~           >
1942+ 692E             >                endif           ; ok        // for other definitions it "points" the correct handler
1942+ 692E             >                // Use of "; ok" to suppress "warning[fwdref]"
1942+ 692E             >
1942+ 692E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1943+ 692E D9                           exx
1944+ 692F E1                           pop     hl                  // hl is the address
1945+ 6930 D1                           pop     de                  // de is the number
1946+ 6931 7E                           ld      a, (hl)
1947+ 6932 83                           add     e
1948+ 6933 77                           ld      (hl), a
1949+ 6934 23                           inc     hl
1950+ 6935 7E                           ld      a, (hl)
1951+ 6936 8A                           adc     d
1952+ 6937 77                           ld      (hl), a
1953+ 6938 D9                           exx
1954+ 6939                              next
1954+ 6939 DD E9       >                jp      (ix)
1955+ 693B
1956+ 693B              //  ______________________________________________________________________
1957+ 693B              //
1958+ 693B              // toggle       a n --
1959+ 693B              // Complements (xor) the byte at addrress  a  with the model n.
1960+ 693B                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1960+ 693B             >
1960+ 693B             >Dict_Ptr        defl    $
1960+ 693B             >
1960+ 693B             >//              ______________________________________________________________________
1960+ 693B             >//              Heap part
1960+ 693B             >
1960+ 693B             >
1960+ 693B             >                org     (Heap_Ptr & $1FFF) + $E000
1960+ E360             >
1960+ E360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1960+ E360             >Latest_Definition defl  Heap_Ptr
1960+ E360             >
1960+ E360             >                // dummy db directives used to calculate length of namec
1960+ E360 54 4F 47 47 >                db      "TOGGLE"
1960+ E364 4C 45       >
1960+ E366             >len_NFA         defl    $ - temp_NFA
1960+ E366             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1960+ E360             >
1960+ E360 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1960+ E361 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1960+ E365 4C 45       >
1960+ E367             >                org     $-1                 // alter last byte of Name just above to set
1960+ E366 C5          >                db      {b $} | END_BIT     // msb as name end
1960+ E367             >
1960+ E367 59 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1960+ E369             >Prev_Ptr        defl    Heap_Ptr
1960+ E369             >
1960+ E369             >mirror_Ptr      defl    $
1960+ E369             >
1960+ E369 3D 69       >                dw      Dict_Ptr + 2        // xt
1960+ E36B             >Heap_Ptr        defl    $ - $E000           // save current HP
1960+ E36B             >
1960+ E36B             >Current_HP      defl  $ - $E000             // used to set HP once!
1960+ E36B             >
1960+ E36B             >//              ______________________________________________________________________
1960+ E36B             >//              Dictionary part
1960+ E36B             >
1960+ E36B             >                org     Dict_Ptr
1960+ 693B             >
1960+ 693B 69 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1960+ 693D             >
1960+ 693D             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1960+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1960+ 693D ~           >
1960+ 693D ~           >
1960+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1960+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1960+ 693D             >
1960+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1961+ 693D E1                           pop     hl
1962+ 693E 7D                           ld      a, l
1963+ 693F E1                           pop     hl
1964+ 6940 AE                           xor     (hl)
1965+ 6941 77                           ld      (hl), a
1966+ 6942
1967+ 6942                              next
1967+ 6942 DD E9       >                jp      (ix)
1968+ 6944
1969+ 6944              //  ______________________________________________________________________
1970+ 6944              //
1971+ 6944              // @            a -- n
1972+ 6944              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1973+ 6944                              New_Def FETCH, "@", is_code, is_normal
1973+ 6944             >
1973+ 6944             >Dict_Ptr        defl    $
1973+ 6944             >
1973+ 6944             >//              ______________________________________________________________________
1973+ 6944             >//              Heap part
1973+ 6944             >
1973+ 6944             >
1973+ 6944             >                org     (Heap_Ptr & $1FFF) + $E000
1973+ E36B             >
1973+ E36B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1973+ E36B             >Latest_Definition defl  Heap_Ptr
1973+ E36B             >
1973+ E36B             >                // dummy db directives used to calculate length of namec
1973+ E36B 40          >                db      "@"
1973+ E36C             >len_NFA         defl    $ - temp_NFA
1973+ E36C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1973+ E36B             >
1973+ E36B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1973+ E36C 40          >                db      "@"               // name string in 7-bit ascii, but
1973+ E36D             >                org     $-1                 // alter last byte of Name just above to set
1973+ E36C C0          >                db      {b $} | END_BIT     // msb as name end
1973+ E36D             >
1973+ E36D 60 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1973+ E36F             >Prev_Ptr        defl    Heap_Ptr
1973+ E36F             >
1973+ E36F             >mirror_Ptr      defl    $
1973+ E36F             >
1973+ E36F 46 69       >                dw      Dict_Ptr + 2        // xt
1973+ E371             >Heap_Ptr        defl    $ - $E000           // save current HP
1973+ E371             >
1973+ E371             >Current_HP      defl  $ - $E000             // used to set HP once!
1973+ E371             >
1973+ E371             >//              ______________________________________________________________________
1973+ E371             >//              Dictionary part
1973+ E371             >
1973+ E371             >                org     Dict_Ptr
1973+ 6944             >
1973+ 6944 6F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1973+ 6946             >
1973+ 6946             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1973+ 6946 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1973+ 6946 ~           >
1973+ 6946 ~           >
1973+ 6946             >                endif           ; ok        // for other definitions it "points" the correct handler
1973+ 6946             >                // Use of "; ok" to suppress "warning[fwdref]"
1973+ 6946             >
1973+ 6946             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1974+ 6946 E1                           pop     hl
1975+ 6947 7E                           ld      a, (hl)             // low-byte
1976+ 6948 23                           inc     hl
1977+ 6949 66                           ld      h, (hl)             // high-byte
1978+ 694A 6F                           ld      l, a
1979+ 694B E5                           push    hl
1980+ 694C                              next
1980+ 694C DD E9       >                jp      (ix)
1981+ 694E
1982+ 694E              //  ______________________________________________________________________
1983+ 694E              //
1984+ 694E              // !            n a --
1985+ 694E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1986+ 694E                              New_Def STORE, "!", is_code, is_normal
1986+ 694E             >
1986+ 694E             >Dict_Ptr        defl    $
1986+ 694E             >
1986+ 694E             >//              ______________________________________________________________________
1986+ 694E             >//              Heap part
1986+ 694E             >
1986+ 694E             >
1986+ 694E             >                org     (Heap_Ptr & $1FFF) + $E000
1986+ E371             >
1986+ E371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1986+ E371             >Latest_Definition defl  Heap_Ptr
1986+ E371             >
1986+ E371             >                // dummy db directives used to calculate length of namec
1986+ E371 21          >                db      "!"
1986+ E372             >len_NFA         defl    $ - temp_NFA
1986+ E372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1986+ E371             >
1986+ E371 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1986+ E372 21          >                db      "!"               // name string in 7-bit ascii, but
1986+ E373             >                org     $-1                 // alter last byte of Name just above to set
1986+ E372 A1          >                db      {b $} | END_BIT     // msb as name end
1986+ E373             >
1986+ E373 6B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1986+ E375             >Prev_Ptr        defl    Heap_Ptr
1986+ E375             >
1986+ E375             >mirror_Ptr      defl    $
1986+ E375             >
1986+ E375 50 69       >                dw      Dict_Ptr + 2        // xt
1986+ E377             >Heap_Ptr        defl    $ - $E000           // save current HP
1986+ E377             >
1986+ E377             >Current_HP      defl  $ - $E000             // used to set HP once!
1986+ E377             >
1986+ E377             >//              ______________________________________________________________________
1986+ E377             >//              Dictionary part
1986+ E377             >
1986+ E377             >                org     Dict_Ptr
1986+ 694E             >
1986+ 694E 75 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1986+ 6950             >
1986+ 6950             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1986+ 6950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1986+ 6950 ~           >
1986+ 6950 ~           >
1986+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1986+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1986+ 6950             >
1986+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1987+ 6950 D9                           exx
1988+ 6951 E1                           pop     hl                  // address
1989+ 6952 D1                           pop     de                  // < n
1990+ 6953              Store_end:
1991+ 6953 73                           ld      (hl), e             // low-byte
1992+ 6954 23                           inc     hl
1993+ 6955 72                           ld      (hl), d             // high-byte
1994+ 6956 D9                           exx
1995+ 6957                              next
1995+ 6957 DD E9       >                jp      (ix)
1996+ 6959
1997+ 6959              //  ______________________________________________________________________
1998+ 6959              //
1999+ 6959              // c@           a -- c
2000+ 6959              // fetch a character n from address a
2001+ 6959                              New_Def CFETCH, "C@", is_code, is_normal
2001+ 6959             >
2001+ 6959             >Dict_Ptr        defl    $
2001+ 6959             >
2001+ 6959             >//              ______________________________________________________________________
2001+ 6959             >//              Heap part
2001+ 6959             >
2001+ 6959             >
2001+ 6959             >                org     (Heap_Ptr & $1FFF) + $E000
2001+ E377             >
2001+ E377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2001+ E377             >Latest_Definition defl  Heap_Ptr
2001+ E377             >
2001+ E377             >                // dummy db directives used to calculate length of namec
2001+ E377 43 40       >                db      "C@"
2001+ E379             >len_NFA         defl    $ - temp_NFA
2001+ E379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2001+ E377             >
2001+ E377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2001+ E378 43 40       >                db      "C@"               // name string in 7-bit ascii, but
2001+ E37A             >                org     $-1                 // alter last byte of Name just above to set
2001+ E379 C0          >                db      {b $} | END_BIT     // msb as name end
2001+ E37A             >
2001+ E37A 71 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2001+ E37C             >Prev_Ptr        defl    Heap_Ptr
2001+ E37C             >
2001+ E37C             >mirror_Ptr      defl    $
2001+ E37C             >
2001+ E37C 5B 69       >                dw      Dict_Ptr + 2        // xt
2001+ E37E             >Heap_Ptr        defl    $ - $E000           // save current HP
2001+ E37E             >
2001+ E37E             >Current_HP      defl  $ - $E000             // used to set HP once!
2001+ E37E             >
2001+ E37E             >//              ______________________________________________________________________
2001+ E37E             >//              Dictionary part
2001+ E37E             >
2001+ E37E             >                org     Dict_Ptr
2001+ 6959             >
2001+ 6959 7C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2001+ 695B             >
2001+ 695B             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2001+ 695B ~           >                call    runcode ; ok        // for primitive definitions  actual code
2001+ 695B ~           >
2001+ 695B ~           >
2001+ 695B             >                endif           ; ok        // for other definitions it "points" the correct handler
2001+ 695B             >                // Use of "; ok" to suppress "warning[fwdref]"
2001+ 695B             >
2001+ 695B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2002+ 695B E1                           pop     hl
2003+ 695C 6E                           ld      l, (hl)             // low-byte
2004+ 695D 26 00                        ld      h, 0
2005+ 695F
2006+ 695F                              psh1
2006+ 695F E5          >                push    hl
2006+ 6960 DD E9       >                jp      (ix)
2007+ 6962
2008+ 6962              //  ______________________________________________________________________
2009+ 6962              //
2010+ 6962              // c!           c a --
2011+ 6962              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
2012+ 6962                              New_Def CSTORE, "C!", is_code, is_normal
2012+ 6962             >
2012+ 6962             >Dict_Ptr        defl    $
2012+ 6962             >
2012+ 6962             >//              ______________________________________________________________________
2012+ 6962             >//              Heap part
2012+ 6962             >
2012+ 6962             >
2012+ 6962             >                org     (Heap_Ptr & $1FFF) + $E000
2012+ E37E             >
2012+ E37E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2012+ E37E             >Latest_Definition defl  Heap_Ptr
2012+ E37E             >
2012+ E37E             >                // dummy db directives used to calculate length of namec
2012+ E37E 43 21       >                db      "C!"
2012+ E380             >len_NFA         defl    $ - temp_NFA
2012+ E380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2012+ E37E             >
2012+ E37E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2012+ E37F 43 21       >                db      "C!"               // name string in 7-bit ascii, but
2012+ E381             >                org     $-1                 // alter last byte of Name just above to set
2012+ E380 A1          >                db      {b $} | END_BIT     // msb as name end
2012+ E381             >
2012+ E381 77 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2012+ E383             >Prev_Ptr        defl    Heap_Ptr
2012+ E383             >
2012+ E383             >mirror_Ptr      defl    $
2012+ E383             >
2012+ E383 64 69       >                dw      Dict_Ptr + 2        // xt
2012+ E385             >Heap_Ptr        defl    $ - $E000           // save current HP
2012+ E385             >
2012+ E385             >Current_HP      defl  $ - $E000             // used to set HP once!
2012+ E385             >
2012+ E385             >//              ______________________________________________________________________
2012+ E385             >//              Dictionary part
2012+ E385             >
2012+ E385             >                org     Dict_Ptr
2012+ 6962             >
2012+ 6962 83 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2012+ 6964             >
2012+ 6964             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2012+ 6964 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2012+ 6964 ~           >
2012+ 6964 ~           >
2012+ 6964             >                endif           ; ok        // for other definitions it "points" the correct handler
2012+ 6964             >                // Use of "; ok" to suppress "warning[fwdref]"
2012+ 6964             >
2012+ 6964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2013+ 6964 D9                           exx
2014+ 6965 E1                           pop     hl                  // < address
2015+ 6966 D1                           pop     de
2016+ 6967 73                           ld      (hl), e             // low-byte
2017+ 6968 D9                           exx
2018+ 6969                              next
2018+ 6969 DD E9       >                jp      (ix)
2019+ 696B
2020+ 696B              //  ______________________________________________________________________
2021+ 696B              //
2022+ 696B              // 2@           a -- d
2023+ 696B              // fetch a 32 bits number d from address a and leaves it on top of the
2024+ 696B              // stack as two single numbers, high part as top of the stack.
2025+ 696B              // A double number is normally kept in CPU registers as HLDE.
2026+ 696B              // On stack a double number is treated as two single numbers
2027+ 696B              // where BC is on the top of the stack and HL is the second from top,
2028+ 696B              // so the sign of the number can be checked on top of stack
2029+ 696B              // and in the stack memory it appears as LHED.
2030+ 696B                              New_Def TWO_FETCH, "2@", is_code, is_normal
2030+ 696B             >
2030+ 696B             >Dict_Ptr        defl    $
2030+ 696B             >
2030+ 696B             >//              ______________________________________________________________________
2030+ 696B             >//              Heap part
2030+ 696B             >
2030+ 696B             >
2030+ 696B             >                org     (Heap_Ptr & $1FFF) + $E000
2030+ E385             >
2030+ E385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2030+ E385             >Latest_Definition defl  Heap_Ptr
2030+ E385             >
2030+ E385             >                // dummy db directives used to calculate length of namec
2030+ E385 32 40       >                db      "2@"
2030+ E387             >len_NFA         defl    $ - temp_NFA
2030+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2030+ E385             >
2030+ E385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2030+ E386 32 40       >                db      "2@"               // name string in 7-bit ascii, but
2030+ E388             >                org     $-1                 // alter last byte of Name just above to set
2030+ E387 C0          >                db      {b $} | END_BIT     // msb as name end
2030+ E388             >
2030+ E388 7E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2030+ E38A             >Prev_Ptr        defl    Heap_Ptr
2030+ E38A             >
2030+ E38A             >mirror_Ptr      defl    $
2030+ E38A             >
2030+ E38A 6D 69       >                dw      Dict_Ptr + 2        // xt
2030+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
2030+ E38C             >
2030+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
2030+ E38C             >
2030+ E38C             >//              ______________________________________________________________________
2030+ E38C             >//              Dictionary part
2030+ E38C             >
2030+ E38C             >                org     Dict_Ptr
2030+ 696B             >
2030+ 696B 8A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2030+ 696D             >
2030+ 696D             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2030+ 696D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2030+ 696D ~           >
2030+ 696D ~           >
2030+ 696D             >                endif           ; ok        // for other definitions it "points" the correct handler
2030+ 696D             >                // Use of "; ok" to suppress "warning[fwdref]"
2030+ 696D             >
2030+ 696D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2031+ 696D D9                           exx
2032+ 696E E1                           pop     hl                  // address
2033+ 696F 5E                           ld      e, (hl)             // low-byte
2034+ 6970 23                           inc     hl
2035+ 6971 56                           ld      d, (hl)             // high-byte
2036+ 6972 23                           inc     hl
2037+ 6973 4E                           ld      c, (hl)             // low-byte
2038+ 6974 23                           inc     hl
2039+ 6975 46                           ld      b, (hl)             // high-byte
2040+ 6976 C5                           push    bc
2041+ 6977 D5                           push    de
2042+ 6978 D9                           exx
2043+ 6979                              next
2043+ 6979 DD E9       >                jp      (ix)
2044+ 697B
2045+ 697B              //  ______________________________________________________________________
2046+ 697B              //
2047+ 697B              // 2!           d a --
2048+ 697B              // stores a 32 bits number d from address a and leaves it on top of the
2049+ 697B              // stack as two single numbers, high part as top of the stack.
2050+ 697B              // A double number is normally kept in CPU registers as HLDE.
2051+ 697B              // On stack a double number is treated as two single numbers
2052+ 697B              // where BC is on the top of the stack and HL is the second from top,
2053+ 697B              // so the sign of the number can be checked on top of stack
2054+ 697B              // and in the stack memory it appears as LHED.
2055+ 697B                              New_Def TWO_STORE, "2!", is_code, is_normal
2055+ 697B             >
2055+ 697B             >Dict_Ptr        defl    $
2055+ 697B             >
2055+ 697B             >//              ______________________________________________________________________
2055+ 697B             >//              Heap part
2055+ 697B             >
2055+ 697B             >
2055+ 697B             >                org     (Heap_Ptr & $1FFF) + $E000
2055+ E38C             >
2055+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2055+ E38C             >Latest_Definition defl  Heap_Ptr
2055+ E38C             >
2055+ E38C             >                // dummy db directives used to calculate length of namec
2055+ E38C 32 21       >                db      "2!"
2055+ E38E             >len_NFA         defl    $ - temp_NFA
2055+ E38E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2055+ E38C             >
2055+ E38C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2055+ E38D 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2055+ E38F             >                org     $-1                 // alter last byte of Name just above to set
2055+ E38E A1          >                db      {b $} | END_BIT     // msb as name end
2055+ E38F             >
2055+ E38F 85 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2055+ E391             >Prev_Ptr        defl    Heap_Ptr
2055+ E391             >
2055+ E391             >mirror_Ptr      defl    $
2055+ E391             >
2055+ E391 7D 69       >                dw      Dict_Ptr + 2        // xt
2055+ E393             >Heap_Ptr        defl    $ - $E000           // save current HP
2055+ E393             >
2055+ E393             >Current_HP      defl  $ - $E000             // used to set HP once!
2055+ E393             >
2055+ E393             >//              ______________________________________________________________________
2055+ E393             >//              Dictionary part
2055+ E393             >
2055+ E393             >                org     Dict_Ptr
2055+ 697B             >
2055+ 697B 91 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2055+ 697D             >
2055+ 697D             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2055+ 697D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2055+ 697D ~           >
2055+ 697D ~           >
2055+ 697D             >                endif           ; ok        // for other definitions it "points" the correct handler
2055+ 697D             >                // Use of "; ok" to suppress "warning[fwdref]"
2055+ 697D             >
2055+ 697D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2056+ 697D D9                           exx
2057+ 697E E1                           pop     hl                  // address
2058+ 697F C1                           pop     bc                  // < high-part
2059+ 6980 D1                           pop     de                  // < low-part
2060+ 6981 71                           ld      (hl), c
2061+ 6982 23                           inc     hl
2062+ 6983 70                           ld      (hl), b
2063+ 6984 23                           inc     hl
2064+ 6985 18 CC                        jr      Store_end
2065+ 6987                          //  ld      (hl), e
2066+ 6987                          //  inc     hl
2067+ 6987                          //  ld      (hl), d
2068+ 6987                          //  exx
2069+ 6987                          //  next
2070+ 6987
2071+ 6987              //  ______________________________________________________________________
2072+ 6987              //
2073+ 6987              // p@           a -- c
2074+ 6987              // Read one byte from port a and leave the result on top of stack
2075+ 6987                              New_Def PFETCH, "P@", is_code, is_normal
2075+ 6987             >
2075+ 6987             >Dict_Ptr        defl    $
2075+ 6987             >
2075+ 6987             >//              ______________________________________________________________________
2075+ 6987             >//              Heap part
2075+ 6987             >
2075+ 6987             >
2075+ 6987             >                org     (Heap_Ptr & $1FFF) + $E000
2075+ E393             >
2075+ E393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2075+ E393             >Latest_Definition defl  Heap_Ptr
2075+ E393             >
2075+ E393             >                // dummy db directives used to calculate length of namec
2075+ E393 50 40       >                db      "P@"
2075+ E395             >len_NFA         defl    $ - temp_NFA
2075+ E395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2075+ E393             >
2075+ E393 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2075+ E394 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2075+ E396             >                org     $-1                 // alter last byte of Name just above to set
2075+ E395 C0          >                db      {b $} | END_BIT     // msb as name end
2075+ E396             >
2075+ E396 8C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2075+ E398             >Prev_Ptr        defl    Heap_Ptr
2075+ E398             >
2075+ E398             >mirror_Ptr      defl    $
2075+ E398             >
2075+ E398 89 69       >                dw      Dict_Ptr + 2        // xt
2075+ E39A             >Heap_Ptr        defl    $ - $E000           // save current HP
2075+ E39A             >
2075+ E39A             >Current_HP      defl  $ - $E000             // used to set HP once!
2075+ E39A             >
2075+ E39A             >//              ______________________________________________________________________
2075+ E39A             >//              Dictionary part
2075+ E39A             >
2075+ E39A             >                org     Dict_Ptr
2075+ 6987             >
2075+ 6987 98 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2075+ 6989             >
2075+ 6989             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2075+ 6989 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2075+ 6989 ~           >
2075+ 6989 ~           >
2075+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
2075+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
2075+ 6989             >
2075+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2076+ 6989 D9                           exx
2077+ 698A C1                           pop     bc
2078+ 698B 26 00                        ld      h, 0
2079+ 698D ED 68                        in      l, (c)
2080+ 698F E5                           push    hl
2081+ 6990 D9                           exx
2082+ 6991                              next
2082+ 6991 DD E9       >                jp      (ix)
2083+ 6993
2084+ 6993              //  ______________________________________________________________________
2085+ 6993              //
2086+ 6993              // p!           c a --
2087+ 6993              // Send one byte (top of stack) to port a
2088+ 6993                              New_Def PSTORE, "P!", is_code, is_normal
2088+ 6993             >
2088+ 6993             >Dict_Ptr        defl    $
2088+ 6993             >
2088+ 6993             >//              ______________________________________________________________________
2088+ 6993             >//              Heap part
2088+ 6993             >
2088+ 6993             >
2088+ 6993             >                org     (Heap_Ptr & $1FFF) + $E000
2088+ E39A             >
2088+ E39A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2088+ E39A             >Latest_Definition defl  Heap_Ptr
2088+ E39A             >
2088+ E39A             >                // dummy db directives used to calculate length of namec
2088+ E39A 50 21       >                db      "P!"
2088+ E39C             >len_NFA         defl    $ - temp_NFA
2088+ E39C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2088+ E39A             >
2088+ E39A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2088+ E39B 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2088+ E39D             >                org     $-1                 // alter last byte of Name just above to set
2088+ E39C A1          >                db      {b $} | END_BIT     // msb as name end
2088+ E39D             >
2088+ E39D 93 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2088+ E39F             >Prev_Ptr        defl    Heap_Ptr
2088+ E39F             >
2088+ E39F             >mirror_Ptr      defl    $
2088+ E39F             >
2088+ E39F 95 69       >                dw      Dict_Ptr + 2        // xt
2088+ E3A1             >Heap_Ptr        defl    $ - $E000           // save current HP
2088+ E3A1             >
2088+ E3A1             >Current_HP      defl  $ - $E000             // used to set HP once!
2088+ E3A1             >
2088+ E3A1             >//              ______________________________________________________________________
2088+ E3A1             >//              Dictionary part
2088+ E3A1             >
2088+ E3A1             >                org     Dict_Ptr
2088+ 6993             >
2088+ 6993 9F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2088+ 6995             >
2088+ 6995             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2088+ 6995 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2088+ 6995 ~           >
2088+ 6995 ~           >
2088+ 6995             >                endif           ; ok        // for other definitions it "points" the correct handler
2088+ 6995             >                // Use of "; ok" to suppress "warning[fwdref]"
2088+ 6995             >
2088+ 6995             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2089+ 6995 D9                           exx
2090+ 6996 C1                           pop     bc
2091+ 6997 E1                           pop     hl                  // < c
2092+ 6998 ED 69                        out     (c), l              // low-byte
2093+ 699A D9                           exx
2094+ 699B                              next
2094+ 699B DD E9       >                jp      (ix)
2095+ 699D
2096+ 699D
2097+ 699D              //  ______________________________________________________________________
2098+ 699D              //
2099+ 699D              // 2*           n1 -- n2
2100+ 699D              // doubles the number at top of stack
2101+ 699D                              New_Def TWO_MUL, "2*", is_code, is_normal
2101+ 699D             >
2101+ 699D             >Dict_Ptr        defl    $
2101+ 699D             >
2101+ 699D             >//              ______________________________________________________________________
2101+ 699D             >//              Heap part
2101+ 699D             >
2101+ 699D             >
2101+ 699D             >                org     (Heap_Ptr & $1FFF) + $E000
2101+ E3A1             >
2101+ E3A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2101+ E3A1             >Latest_Definition defl  Heap_Ptr
2101+ E3A1             >
2101+ E3A1             >                // dummy db directives used to calculate length of namec
2101+ E3A1 32 2A       >                db      "2*"
2101+ E3A3             >len_NFA         defl    $ - temp_NFA
2101+ E3A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2101+ E3A1             >
2101+ E3A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2101+ E3A2 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2101+ E3A4             >                org     $-1                 // alter last byte of Name just above to set
2101+ E3A3 AA          >                db      {b $} | END_BIT     // msb as name end
2101+ E3A4             >
2101+ E3A4 9A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2101+ E3A6             >Prev_Ptr        defl    Heap_Ptr
2101+ E3A6             >
2101+ E3A6             >mirror_Ptr      defl    $
2101+ E3A6             >
2101+ E3A6 9F 69       >                dw      Dict_Ptr + 2        // xt
2101+ E3A8             >Heap_Ptr        defl    $ - $E000           // save current HP
2101+ E3A8             >
2101+ E3A8             >Current_HP      defl  $ - $E000             // used to set HP once!
2101+ E3A8             >
2101+ E3A8             >//              ______________________________________________________________________
2101+ E3A8             >//              Dictionary part
2101+ E3A8             >
2101+ E3A8             >                org     Dict_Ptr
2101+ 699D             >
2101+ 699D A6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2101+ 699F             >
2101+ 699F             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2101+ 699F ~           >                call    runcode ; ok        // for primitive definitions  actual code
2101+ 699F ~           >
2101+ 699F ~           >
2101+ 699F             >                endif           ; ok        // for other definitions it "points" the correct handler
2101+ 699F             >                // Use of "; ok" to suppress "warning[fwdref]"
2101+ 699F             >
2101+ 699F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2102+ 699F              Two_Mul_Ptr:
2103+ 699F E1                           pop     hl
2104+ 69A0 29                           add     hl, hl
2105+ 69A1
2106+ 69A1                              psh1
2106+ 69A1 E5          >                push    hl
2106+ 69A2 DD E9       >                jp      (ix)
2107+ 69A4
2108+ 69A4              //  ______________________________________________________________________
2109+ 69A4              //
2110+ 69A4              // 2/           n1 -- n2
2111+ 69A4              // halves the top of stack, sign is unchanged
2112+ 69A4                              New_Def TWO_DIV, "2/", is_code, is_normal
2112+ 69A4             >
2112+ 69A4             >Dict_Ptr        defl    $
2112+ 69A4             >
2112+ 69A4             >//              ______________________________________________________________________
2112+ 69A4             >//              Heap part
2112+ 69A4             >
2112+ 69A4             >
2112+ 69A4             >                org     (Heap_Ptr & $1FFF) + $E000
2112+ E3A8             >
2112+ E3A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2112+ E3A8             >Latest_Definition defl  Heap_Ptr
2112+ E3A8             >
2112+ E3A8             >                // dummy db directives used to calculate length of namec
2112+ E3A8 32 2F       >                db      "2/"
2112+ E3AA             >len_NFA         defl    $ - temp_NFA
2112+ E3AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2112+ E3A8             >
2112+ E3A8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2112+ E3A9 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2112+ E3AB             >                org     $-1                 // alter last byte of Name just above to set
2112+ E3AA AF          >                db      {b $} | END_BIT     // msb as name end
2112+ E3AB             >
2112+ E3AB A1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2112+ E3AD             >Prev_Ptr        defl    Heap_Ptr
2112+ E3AD             >
2112+ E3AD             >mirror_Ptr      defl    $
2112+ E3AD             >
2112+ E3AD A6 69       >                dw      Dict_Ptr + 2        // xt
2112+ E3AF             >Heap_Ptr        defl    $ - $E000           // save current HP
2112+ E3AF             >
2112+ E3AF             >Current_HP      defl  $ - $E000             // used to set HP once!
2112+ E3AF             >
2112+ E3AF             >//              ______________________________________________________________________
2112+ E3AF             >//              Dictionary part
2112+ E3AF             >
2112+ E3AF             >                org     Dict_Ptr
2112+ 69A4             >
2112+ 69A4 AD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2112+ 69A6             >
2112+ 69A6             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2112+ 69A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2112+ 69A6 ~           >
2112+ 69A6 ~           >
2112+ 69A6             >                endif           ; ok        // for other definitions it "points" the correct handler
2112+ 69A6             >                // Use of "; ok" to suppress "warning[fwdref]"
2112+ 69A6             >
2112+ 69A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2113+ 69A6 E1                           pop     hl
2114+ 69A7 CB 2C                        sra     h
2115+ 69A9 CB 1D                        rr      l
2116+ 69AB
2117+ 69AB                              psh1
2117+ 69AB E5          >                push    hl
2117+ 69AC DD E9       >                jp      (ix)
2118+ 69AE
2119+ 69AE              //  ______________________________________________________________________
2120+ 69AE              //
2121+ 69AE              // lshift       n1 u -- n2
2122+ 69AE              // bit left shift of u bits
2123+ 69AE                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2123+ 69AE             >
2123+ 69AE             >Dict_Ptr        defl    $
2123+ 69AE             >
2123+ 69AE             >//              ______________________________________________________________________
2123+ 69AE             >//              Heap part
2123+ 69AE             >
2123+ 69AE             >
2123+ 69AE             >                org     (Heap_Ptr & $1FFF) + $E000
2123+ E3AF             >
2123+ E3AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2123+ E3AF             >Latest_Definition defl  Heap_Ptr
2123+ E3AF             >
2123+ E3AF             >                // dummy db directives used to calculate length of namec
2123+ E3AF 4C 53 48 49 >                db      "LSHIFT"
2123+ E3B3 46 54       >
2123+ E3B5             >len_NFA         defl    $ - temp_NFA
2123+ E3B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2123+ E3AF             >
2123+ E3AF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2123+ E3B0 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2123+ E3B4 46 54       >
2123+ E3B6             >                org     $-1                 // alter last byte of Name just above to set
2123+ E3B5 D4          >                db      {b $} | END_BIT     // msb as name end
2123+ E3B6             >
2123+ E3B6 A8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2123+ E3B8             >Prev_Ptr        defl    Heap_Ptr
2123+ E3B8             >
2123+ E3B8             >mirror_Ptr      defl    $
2123+ E3B8             >
2123+ E3B8 B0 69       >                dw      Dict_Ptr + 2        // xt
2123+ E3BA             >Heap_Ptr        defl    $ - $E000           // save current HP
2123+ E3BA             >
2123+ E3BA             >Current_HP      defl  $ - $E000             // used to set HP once!
2123+ E3BA             >
2123+ E3BA             >//              ______________________________________________________________________
2123+ E3BA             >//              Dictionary part
2123+ E3BA             >
2123+ E3BA             >                org     Dict_Ptr
2123+ 69AE             >
2123+ 69AE B8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2123+ 69B0             >
2123+ 69B0             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2123+ 69B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2123+ 69B0 ~           >
2123+ 69B0 ~           >
2123+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
2123+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
2123+ 69B0             >
2123+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2124+ 69B0 D9                           exx
2125+ 69B1 C1                           pop     bc
2126+ 69B2 41                           ld      b, c
2127+ 69B3 D1                           pop     de
2128+ 69B4 ED 28                        bsla    de, b
2129+ 69B6 D5                           push    de
2130+ 69B7 D9                           exx
2131+ 69B8                              next
2131+ 69B8 DD E9       >                jp      (ix)
2132+ 69BA
2133+ 69BA              //  ______________________________________________________________________
2134+ 69BA              //
2135+ 69BA              // rshift       n1 u -- n2
2136+ 69BA              // bit right shift of u bits
2137+ 69BA                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2137+ 69BA             >
2137+ 69BA             >Dict_Ptr        defl    $
2137+ 69BA             >
2137+ 69BA             >//              ______________________________________________________________________
2137+ 69BA             >//              Heap part
2137+ 69BA             >
2137+ 69BA             >
2137+ 69BA             >                org     (Heap_Ptr & $1FFF) + $E000
2137+ E3BA             >
2137+ E3BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2137+ E3BA             >Latest_Definition defl  Heap_Ptr
2137+ E3BA             >
2137+ E3BA             >                // dummy db directives used to calculate length of namec
2137+ E3BA 52 53 48 49 >                db      "RSHIFT"
2137+ E3BE 46 54       >
2137+ E3C0             >len_NFA         defl    $ - temp_NFA
2137+ E3C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2137+ E3BA             >
2137+ E3BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2137+ E3BB 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2137+ E3BF 46 54       >
2137+ E3C1             >                org     $-1                 // alter last byte of Name just above to set
2137+ E3C0 D4          >                db      {b $} | END_BIT     // msb as name end
2137+ E3C1             >
2137+ E3C1 AF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2137+ E3C3             >Prev_Ptr        defl    Heap_Ptr
2137+ E3C3             >
2137+ E3C3             >mirror_Ptr      defl    $
2137+ E3C3             >
2137+ E3C3 BC 69       >                dw      Dict_Ptr + 2        // xt
2137+ E3C5             >Heap_Ptr        defl    $ - $E000           // save current HP
2137+ E3C5             >
2137+ E3C5             >Current_HP      defl  $ - $E000             // used to set HP once!
2137+ E3C5             >
2137+ E3C5             >//              ______________________________________________________________________
2137+ E3C5             >//              Dictionary part
2137+ E3C5             >
2137+ E3C5             >                org     Dict_Ptr
2137+ 69BA             >
2137+ 69BA C3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2137+ 69BC             >
2137+ 69BC             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2137+ 69BC ~           >                call    runcode ; ok        // for primitive definitions  actual code
2137+ 69BC ~           >
2137+ 69BC ~           >
2137+ 69BC             >                endif           ; ok        // for other definitions it "points" the correct handler
2137+ 69BC             >                // Use of "; ok" to suppress "warning[fwdref]"
2137+ 69BC             >
2137+ 69BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2138+ 69BC D9                           exx
2139+ 69BD C1                           pop     bc
2140+ 69BE 41                           ld      b, c
2141+ 69BF D1                           pop     de
2142+ 69C0 ED 2A                        bsrl    de, b
2143+ 69C2 D5                           push    de
2144+ 69C3 D9                           exx
2145+ 69C4                              next
2145+ 69C4 DD E9       >                jp      (ix)
2146+ 69C6
2147+ 69C6              //  ______________________________________________________________________
2148+ 69C6              //
2149+ 69C6              // cells        n1 -- n2
2150+ 69C6              // decrement by 2 top of stack
2151+ 69C6                              New_Def CELLS, "CELLS", is_code, is_normal
2151+ 69C6             >
2151+ 69C6             >Dict_Ptr        defl    $
2151+ 69C6             >
2151+ 69C6             >//              ______________________________________________________________________
2151+ 69C6             >//              Heap part
2151+ 69C6             >
2151+ 69C6             >
2151+ 69C6             >                org     (Heap_Ptr & $1FFF) + $E000
2151+ E3C5             >
2151+ E3C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2151+ E3C5             >Latest_Definition defl  Heap_Ptr
2151+ E3C5             >
2151+ E3C5             >                // dummy db directives used to calculate length of namec
2151+ E3C5 43 45 4C 4C >                db      "CELLS"
2151+ E3C9 53          >
2151+ E3CA             >len_NFA         defl    $ - temp_NFA
2151+ E3CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2151+ E3C5             >
2151+ E3C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2151+ E3C6 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2151+ E3CA 53          >
2151+ E3CB             >                org     $-1                 // alter last byte of Name just above to set
2151+ E3CA D3          >                db      {b $} | END_BIT     // msb as name end
2151+ E3CB             >
2151+ E3CB BA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2151+ E3CD             >Prev_Ptr        defl    Heap_Ptr
2151+ E3CD             >
2151+ E3CD             >mirror_Ptr      defl    $
2151+ E3CD             >
2151+ E3CD C8 69       >                dw      Dict_Ptr + 2        // xt
2151+ E3CF             >Heap_Ptr        defl    $ - $E000           // save current HP
2151+ E3CF             >
2151+ E3CF             >Current_HP      defl  $ - $E000             // used to set HP once!
2151+ E3CF             >
2151+ E3CF             >//              ______________________________________________________________________
2151+ E3CF             >//              Dictionary part
2151+ E3CF             >
2151+ E3CF             >                org     Dict_Ptr
2151+ 69C6             >
2151+ 69C6 CD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2151+ 69C8             >
2151+ 69C8             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2151+ 69C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2151+ 69C8 ~           >
2151+ 69C8 ~           >
2151+ 69C8             >                endif           ; ok        // for other definitions it "points" the correct handler
2151+ 69C8             >                // Use of "; ok" to suppress "warning[fwdref]"
2151+ 69C8             >
2151+ 69C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2152+ 69C8 18 D5                        jr      Two_Mul_Ptr
2153+ 69CA
2154+ 69CA
2155+ 69CA              //  ______________________________________________________________________
2156+ 69CA
2157+ 69CA
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
 149  69CA                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
   1+ 69CA              //  ______________________________________________________________________
   2+ 69CA              //
   3+ 69CA              //  L1.asm
   4+ 69CA              //
   5+ 69CA              //  Level-1 definitions and derivate
   6+ 69CA              //  ______________________________________________________________________
   7+ 69CA
   8+ 69CA              //  ______________________________________________________________________
   9+ 69CA              //
  10+ 69CA              // :            -- cccc     ( compile time )
  11+ 69CA              //              i*x -- j*x  ( run time )
  12+ 69CA              // Colon Definition
  13+ 69CA                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 69CA             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 69CA             >
  13+ 69CA             >Dict_Ptr        defl    $
  13+ 69CA             >
  13+ 69CA             >//              ______________________________________________________________________
  13+ 69CA             >//              Heap part
  13+ 69CA             >
  13+ 69CA             >
  13+ 69CA             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CF             >
  13+ E3CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CF             >Latest_Definition defl  Heap_Ptr
  13+ E3CF             >
  13+ E3CF             >                // dummy db directives used to calculate length of namec
  13+ E3CF 3A          >                db      ":"
  13+ E3D0             >len_NFA         defl    $ - temp_NFA
  13+ E3D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CF             >
  13+ E3CF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3D0 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3D1             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3D0 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3D1             >
  13+ E3D1 C5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3D3             >Prev_Ptr        defl    Heap_Ptr
  13+ E3D3             >
  13+ E3D3             >mirror_Ptr      defl    $
  13+ E3D3             >
  13+ E3D3 CC 69       >                dw      Dict_Ptr + 2        // xt
  13+ E3D5             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D5             >
  13+ E3D5             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D5             >
  13+ E3D5             >//              ______________________________________________________________________
  13+ E3D5             >//              Dictionary part
  13+ E3D5             >
  13+ E3D5             >                org     Dict_Ptr
  13+ 69CA             >
  13+ 69CA D3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 69CC             >
  13+ 69CC             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 69CC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 69CF             >
  13+ 69CF             >
  13+ 69CF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 69CF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 69CF             >
  13+ 69CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 69CF
  15+ 69CF CF 6D                        dw      QEXEC                   // ?exec
  16+ 69D1 9A 6D                        dw      STORE_CSP               // !csp
  17+ 69D3 FD 6A 46 69                  dw      CURRENT, FETCH          // current @
  18+ 69D7 F7 6A 50 69                  dw      CONTEXT, STORE          // context !
  19+ 69DB 33 74                        dw      CREATE                  // create  ( forward )
  20+ 69DD 51 6E                        dw      SMUDGE                  // dmudge
  21+ 69DF 42 6E                        dw      SQUARED_CLOSE           // ]
  22+ 69E1 8D 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 69E3                                                              // ... immediate
  24+ 69E3              Enter_Ptr:
  25+ 69E3                              // via call coded in CFA
  26+ 69E3 EB                           ex      de, hl //**
  27+ 69E4                              // *** ldhlrp
  28+ 69E4 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 69E5 70                           ld      (hl), b
  30+ 69E6 2B                           dec     hl
  31+ 69E7 71                           ld      (hl), c
  32+ 69E8                              // *** ldrphl
  33+ 69E8 EB                           ex      de, hl //**
  34+ 69E9
  35+ 69E9
  36+ 69E9 C1                           pop     bc                  // points to PFA of "this" word
  37+ 69EA                              next
  37+ 69EA DD E9       >                jp      (ix)
  38+ 69EC
  39+ 69EC              //  ______________________________________________________________________
  40+ 69EC              //
  41+ 69EC              // ;            --
  42+ 69EC              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 69EC                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 69EC             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 69EC             >
  43+ 69EC             >Dict_Ptr        defl    $
  43+ 69EC             >
  43+ 69EC             >//              ______________________________________________________________________
  43+ 69EC             >//              Heap part
  43+ 69EC             >
  43+ 69EC             >
  43+ 69EC             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D5             >
  43+ E3D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D5             >Latest_Definition defl  Heap_Ptr
  43+ E3D5             >
  43+ E3D5             >                // dummy db directives used to calculate length of namec
  43+ E3D5 3B          >                db      ";"
  43+ E3D6             >len_NFA         defl    $ - temp_NFA
  43+ E3D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D5             >
  43+ E3D5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D6 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D7             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D6 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D7             >
  43+ E3D7 CF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D9             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D9             >
  43+ E3D9             >mirror_Ptr      defl    $
  43+ E3D9             >
  43+ E3D9 EE 69       >                dw      Dict_Ptr + 2        // xt
  43+ E3DB             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3DB             >
  43+ E3DB             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3DB             >
  43+ E3DB             >//              ______________________________________________________________________
  43+ E3DB             >//              Dictionary part
  43+ E3DB             >
  43+ E3DB             >                org     Dict_Ptr
  43+ 69EC             >
  43+ 69EC D9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 69EE             >
  43+ 69EE             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 69EE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 69F1             >
  43+ 69F1             >
  43+ 69F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 69F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 69F1             >
  43+ 69F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 69F1
  45+ 69F1 EF 6D                        dw      QCSP                    // ?csp
  46+ 69F3 17 6E 11 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 69F7 51 6E                        dw      SMUDGE                  // smudge
  48+ 69F9 35 6E                        dw      SQUARED_OPEN            // [
  49+ 69FB 11 68                        dw      EXIT                    // ; immediate
  50+ 69FD
  51+ 69FD              //  ______________________________________________________________________
  52+ 69FD              //
  53+ 69FD              // noop         --
  54+ 69FD
  55+ 69FD                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 69FD             >
  55+ 69FD             >Dict_Ptr        defl    $
  55+ 69FD             >
  55+ 69FD             >//              ______________________________________________________________________
  55+ 69FD             >//              Heap part
  55+ 69FD             >
  55+ 69FD             >
  55+ 69FD             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3DB             >
  55+ E3DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3DB             >Latest_Definition defl  Heap_Ptr
  55+ E3DB             >
  55+ E3DB             >                // dummy db directives used to calculate length of namec
  55+ E3DB 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DF             >len_NFA         defl    $ - temp_NFA
  55+ E3DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3DB             >
  55+ E3DB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3DC 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3E0             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DF D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3E0             >
  55+ E3E0 D5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3E2             >Prev_Ptr        defl    Heap_Ptr
  55+ E3E2             >
  55+ E3E2             >mirror_Ptr      defl    $
  55+ E3E2             >
  55+ E3E2 FF 69       >                dw      Dict_Ptr + 2        // xt
  55+ E3E4             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3E4             >
  55+ E3E4             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3E4             >
  55+ E3E4             >//              ______________________________________________________________________
  55+ E3E4             >//              Dictionary part
  55+ E3E4             >
  55+ E3E4             >                org     Dict_Ptr
  55+ 69FD             >
  55+ 69FD E2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 69FF             >
  55+ 69FF             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 69FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 69FF ~           >
  55+ 69FF ~           >
  55+ 69FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 69FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 69FF             >
  55+ 69FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 69FF                              next
  56+ 69FF DD E9       >                jp      (ix)
  57+ 6A01
  58+ 6A01              //  ______________________________________________________________________
  59+ 6A01              //
  60+ 6A01              // constant     n -- cccc     ( compile time )
  61+ 6A01              //              -- n          ( run time )
  62+ 6A01              // Constant definition.
  63+ 6A01                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A01             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A01             >
  63+ 6A01             >Dict_Ptr        defl    $
  63+ 6A01             >
  63+ 6A01             >//              ______________________________________________________________________
  63+ 6A01             >//              Heap part
  63+ 6A01             >
  63+ 6A01             >
  63+ 6A01             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3E4             >
  63+ E3E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3E4             >Latest_Definition defl  Heap_Ptr
  63+ E3E4             >
  63+ E3E4             >                // dummy db directives used to calculate length of namec
  63+ E3E4 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E8 54 41 4E 54 >
  63+ E3EC             >len_NFA         defl    $ - temp_NFA
  63+ E3EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3E4             >
  63+ E3E4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E5 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E9 54 41 4E 54 >
  63+ E3ED             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3EC D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3ED             >
  63+ E3ED DB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EF             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EF             >
  63+ E3EF             >mirror_Ptr      defl    $
  63+ E3EF             >
  63+ E3EF 03 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3F1             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3F1             >
  63+ E3F1             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3F1             >
  63+ E3F1             >//              ______________________________________________________________________
  63+ E3F1             >//              Dictionary part
  63+ E3F1             >
  63+ E3F1             >                org     Dict_Ptr
  63+ 6A01             >
  63+ 6A01 EF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A03             >
  63+ 6A03             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A03 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A06             >
  63+ 6A06             >
  63+ 6A06             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A06             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A06             >
  63+ 6A06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A06 33 74                        dw      CREATE                  // create
  65+ 6A08 73 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A0A 8D 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A0C              Constant_Ptr:
  68+ 6A0C
  69+ 6A0C
  70+ 6A0C E1                           pop     hl
  71+ 6A0D
  72+ 6A0D 7E                           ld      a, (hl)
  73+ 6A0E 23                           inc     hl
  74+ 6A0F 66                           ld      h, (hl)
  75+ 6A10 6F                           ld      l, a
  76+ 6A11 E5                           push    hl
  77+ 6A12                              next
  77+ 6A12 DD E9       >                jp      (ix)
  78+ 6A14
  79+ 6A14              //  ______________________________________________________________________
  80+ 6A14              //
  81+ 6A14              // variable     n -- cccc     ( compile time )
  82+ 6A14              //              -- a          ( run time )
  83+ 6A14              // Variable definition, n is the initial value.
  84+ 6A14                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A14             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A14             >
  84+ 6A14             >Dict_Ptr        defl    $
  84+ 6A14             >
  84+ 6A14             >//              ______________________________________________________________________
  84+ 6A14             >//              Heap part
  84+ 6A14             >
  84+ 6A14             >
  84+ 6A14             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3F1             >
  84+ E3F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3F1             >Latest_Definition defl  Heap_Ptr
  84+ E3F1             >
  84+ E3F1             >                // dummy db directives used to calculate length of namec
  84+ E3F1 56 41 52 49 >                db      "VARIABLE"
  84+ E3F5 41 42 4C 45 >
  84+ E3F9             >len_NFA         defl    $ - temp_NFA
  84+ E3F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3F1             >
  84+ E3F1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3F2 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F6 41 42 4C 45 >
  84+ E3FA             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F9 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3FA             >
  84+ E3FA E4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3FC             >Prev_Ptr        defl    Heap_Ptr
  84+ E3FC             >
  84+ E3FC             >mirror_Ptr      defl    $
  84+ E3FC             >
  84+ E3FC 16 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3FE             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3FE             >
  84+ E3FE             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3FE             >
  84+ E3FE             >//              ______________________________________________________________________
  84+ E3FE             >//              Dictionary part
  84+ E3FE             >
  84+ E3FE             >                org     Dict_Ptr
  84+ 6A14             >
  84+ 6A14 FC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A16             >
  84+ 6A16             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A16 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A19             >
  84+ 6A19             >
  84+ 6A19             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A19             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A19             >
  84+ 6A19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A19
  86+ 6A19 38 6A                        dw      ZERO
  87+ 6A1B 03 6A                        dw      CONSTANT                // constant
  88+ 6A1D 8D 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A1F              Variable_Ptr:
  90+ 6A1F
  91+ 6A1F
  92+ 6A1F
  93+ 6A1F
  94+ 6A1F                              next
  94+ 6A1F DD E9       >                jp      (ix)
  95+ 6A21
  96+ 6A21              //  ______________________________________________________________________
  97+ 6A21              //
  98+ 6A21              // user         b -- cccc     ( compile time )
  99+ 6A21              //              -- a          ( run time )
 100+ 6A21              // User variable definition
 101+ 6A21                              Colon_Def USER, "USER", is_normal
 101+ 6A21             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A21             >
 101+ 6A21             >Dict_Ptr        defl    $
 101+ 6A21             >
 101+ 6A21             >//              ______________________________________________________________________
 101+ 6A21             >//              Heap part
 101+ 6A21             >
 101+ 6A21             >
 101+ 6A21             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3FE             >
 101+ E3FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3FE             >Latest_Definition defl  Heap_Ptr
 101+ E3FE             >
 101+ E3FE             >                // dummy db directives used to calculate length of namec
 101+ E3FE 55 53 45 52 >                db      "USER"
 101+ E402             >len_NFA         defl    $ - temp_NFA
 101+ E402             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3FE             >
 101+ E3FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FF 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E403             >                org     $-1                 // alter last byte of Name just above to set
 101+ E402 D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E403             >
 101+ E403 F1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E405             >Prev_Ptr        defl    Heap_Ptr
 101+ E405             >
 101+ E405             >mirror_Ptr      defl    $
 101+ E405             >
 101+ E405 23 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E407             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E407             >
 101+ E407             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E407             >
 101+ E407             >//              ______________________________________________________________________
 101+ E407             >//              Dictionary part
 101+ E407             >
 101+ E407             >                org     Dict_Ptr
 101+ 6A21             >
 101+ 6A21 05 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A23             >
 101+ 6A23             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A23 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A26             >
 101+ 6A26             >
 101+ 6A26             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A26             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A26             >
 101+ 6A26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A26
 103+ 6A26 33 74                        dw      CREATE                  // create
 104+ 6A28 82 6B                        dw      CCOMMA                  // c,
 105+ 6A2A 8D 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A2C
 107+ 6A2C
 108+ 6A2C              User_Ptr:
 109+ 6A2C                              // via call coded in CFA
 110+ 6A2C E1                           pop     hl
 111+ 6A2D
 112+ 6A2D 7E                           ld      a, (hl)
 113+ 6A2E 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A31 ED 31                        add     hl, a
 115+ 6A33 E5                           push    hl
 116+ 6A34                              next
 116+ 6A34 DD E9       >                jp      (ix)
 117+ 6A36
 118+ 6A36              //  ______________________________________________________________________
 119+ 6A36              //
 120+ 6A36                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A36             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A36             >
 120+ 6A36             >Dict_Ptr        defl    $
 120+ 6A36             >
 120+ 6A36             >//              ______________________________________________________________________
 120+ 6A36             >//              Heap part
 120+ 6A36             >
 120+ 6A36             >
 120+ 6A36             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E407             >
 120+ E407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E407             >Latest_Definition defl  Heap_Ptr
 120+ E407             >
 120+ E407             >                // dummy db directives used to calculate length of namec
 120+ E407 30          >                db      "0"
 120+ E408             >len_NFA         defl    $ - temp_NFA
 120+ E408             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E407             >
 120+ E407 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E408 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E409             >                org     $-1                 // alter last byte of Name just above to set
 120+ E408 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E409             >
 120+ E409 FE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E40B             >Prev_Ptr        defl    Heap_Ptr
 120+ E40B             >
 120+ E40B             >mirror_Ptr      defl    $
 120+ E40B             >
 120+ E40B 38 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E40D             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E40D             >
 120+ E40D             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E40D             >
 120+ E40D             >//              ______________________________________________________________________
 120+ E40D             >//              Dictionary part
 120+ E40D             >
 120+ E40D             >                org     Dict_Ptr
 120+ 6A36             >
 120+ 6A36 0B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A38             >
 120+ 6A38             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A38 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A3B             >
 120+ 6A3B             >
 120+ 6A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A3B             >
 120+ 6A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A3B 00 00       >                dw      0
 121+ 6A3D                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A3D             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A3D             >
 121+ 6A3D             >Dict_Ptr        defl    $
 121+ 6A3D             >
 121+ 6A3D             >//              ______________________________________________________________________
 121+ 6A3D             >//              Heap part
 121+ 6A3D             >
 121+ 6A3D             >
 121+ 6A3D             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E40D             >
 121+ E40D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E40D             >Latest_Definition defl  Heap_Ptr
 121+ E40D             >
 121+ E40D             >                // dummy db directives used to calculate length of namec
 121+ E40D 31          >                db      "1"
 121+ E40E             >len_NFA         defl    $ - temp_NFA
 121+ E40E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E40D             >
 121+ E40D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E40E 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40F             >                org     $-1                 // alter last byte of Name just above to set
 121+ E40E B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40F             >
 121+ E40F 07 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E411             >Prev_Ptr        defl    Heap_Ptr
 121+ E411             >
 121+ E411             >mirror_Ptr      defl    $
 121+ E411             >
 121+ E411 3F 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E413             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E413             >
 121+ E413             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E413             >
 121+ E413             >//              ______________________________________________________________________
 121+ E413             >//              Dictionary part
 121+ E413             >
 121+ E413             >                org     Dict_Ptr
 121+ 6A3D             >
 121+ 6A3D 11 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A3F             >
 121+ 6A3F             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A3F CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A42             >
 121+ 6A42             >
 121+ 6A42             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A42             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A42             >
 121+ 6A42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A42 01 00       >                dw      1
 122+ 6A44                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A44             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A44             >
 122+ 6A44             >Dict_Ptr        defl    $
 122+ 6A44             >
 122+ 6A44             >//              ______________________________________________________________________
 122+ 6A44             >//              Heap part
 122+ 6A44             >
 122+ 6A44             >
 122+ 6A44             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E413             >
 122+ E413             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E413             >Latest_Definition defl  Heap_Ptr
 122+ E413             >
 122+ E413             >                // dummy db directives used to calculate length of namec
 122+ E413 32          >                db      "2"
 122+ E414             >len_NFA         defl    $ - temp_NFA
 122+ E414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E413             >
 122+ E413 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E414 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E415             >                org     $-1                 // alter last byte of Name just above to set
 122+ E414 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E415             >
 122+ E415 0D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E417             >Prev_Ptr        defl    Heap_Ptr
 122+ E417             >
 122+ E417             >mirror_Ptr      defl    $
 122+ E417             >
 122+ E417 46 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E419             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E419             >
 122+ E419             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E419             >
 122+ E419             >//              ______________________________________________________________________
 122+ E419             >//              Dictionary part
 122+ E419             >
 122+ E419             >                org     Dict_Ptr
 122+ 6A44             >
 122+ 6A44 17 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A46             >
 122+ 6A46             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A46 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A49             >
 122+ 6A49             >
 122+ 6A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A49             >
 122+ 6A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A49 02 00       >                dw      2
 123+ 6A4B                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A4B             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A4B             >
 123+ 6A4B             >Dict_Ptr        defl    $
 123+ 6A4B             >
 123+ 6A4B             >//              ______________________________________________________________________
 123+ 6A4B             >//              Heap part
 123+ 6A4B             >
 123+ 6A4B             >
 123+ 6A4B             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E419             >
 123+ E419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E419             >Latest_Definition defl  Heap_Ptr
 123+ E419             >
 123+ E419             >                // dummy db directives used to calculate length of namec
 123+ E419 33          >                db      "3"
 123+ E41A             >len_NFA         defl    $ - temp_NFA
 123+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E419             >
 123+ E419 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E41A 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 123+ E41A B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E41B             >
 123+ E41B 13 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E41D             >Prev_Ptr        defl    Heap_Ptr
 123+ E41D             >
 123+ E41D             >mirror_Ptr      defl    $
 123+ E41D             >
 123+ E41D 4D 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41F             >
 123+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41F             >
 123+ E41F             >//              ______________________________________________________________________
 123+ E41F             >//              Dictionary part
 123+ E41F             >
 123+ E41F             >                org     Dict_Ptr
 123+ 6A4B             >
 123+ 6A4B 1D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A4D             >
 123+ 6A4D             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A4D CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A50             >
 123+ 6A50             >
 123+ 6A50             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A50             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A50             >
 123+ 6A50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A50 03 00       >                dw      3
 124+ 6A52                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A52             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A52             >
 124+ 6A52             >Dict_Ptr        defl    $
 124+ 6A52             >
 124+ 6A52             >//              ______________________________________________________________________
 124+ 6A52             >//              Heap part
 124+ 6A52             >
 124+ 6A52             >
 124+ 6A52             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41F             >
 124+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41F             >Latest_Definition defl  Heap_Ptr
 124+ E41F             >
 124+ E41F             >                // dummy db directives used to calculate length of namec
 124+ E41F 2D 31       >                db      "-1"
 124+ E421             >len_NFA         defl    $ - temp_NFA
 124+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41F             >
 124+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E420 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E422             >                org     $-1                 // alter last byte of Name just above to set
 124+ E421 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E422             >
 124+ E422 19 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E424             >Prev_Ptr        defl    Heap_Ptr
 124+ E424             >
 124+ E424             >mirror_Ptr      defl    $
 124+ E424             >
 124+ E424 54 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E426             >
 124+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E426             >
 124+ E426             >//              ______________________________________________________________________
 124+ E426             >//              Dictionary part
 124+ E426             >
 124+ E426             >                org     Dict_Ptr
 124+ 6A52             >
 124+ 6A52 24 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A54             >
 124+ 6A54             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A54 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6A57             >
 124+ 6A57             >
 124+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6A57             >
 124+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6A57 FF FF       >                dw      -1
 125+ 6A59                              Constant_Def BL         ,   "BL"    , $20
 125+ 6A59             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6A59             >
 125+ 6A59             >Dict_Ptr        defl    $
 125+ 6A59             >
 125+ 6A59             >//              ______________________________________________________________________
 125+ 6A59             >//              Heap part
 125+ 6A59             >
 125+ 6A59             >
 125+ 6A59             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E426             >
 125+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E426             >Latest_Definition defl  Heap_Ptr
 125+ E426             >
 125+ E426             >                // dummy db directives used to calculate length of namec
 125+ E426 42 4C       >                db      "BL"
 125+ E428             >len_NFA         defl    $ - temp_NFA
 125+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E426             >
 125+ E426 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E427 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E429             >                org     $-1                 // alter last byte of Name just above to set
 125+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E429             >
 125+ E429 1F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E42B             >Prev_Ptr        defl    Heap_Ptr
 125+ E42B             >
 125+ E42B             >mirror_Ptr      defl    $
 125+ E42B             >
 125+ E42B 5B 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E42D             >
 125+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E42D             >
 125+ E42D             >//              ______________________________________________________________________
 125+ E42D             >//              Dictionary part
 125+ E42D             >
 125+ E42D             >                org     Dict_Ptr
 125+ 6A59             >
 125+ 6A59 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6A5B             >
 125+ 6A5B             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6A5B CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6A5E             >
 125+ 6A5E             >
 125+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6A5E             >
 125+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6A5E 20 00       >                dw      $20
 126+ 6A60                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6A60             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6A60             >
 126+ 6A60             >Dict_Ptr        defl    $
 126+ 6A60             >
 126+ 6A60             >//              ______________________________________________________________________
 126+ 6A60             >//              Heap part
 126+ 6A60             >
 126+ 6A60             >
 126+ 6A60             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E42D             >
 126+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E42D             >Latest_Definition defl  Heap_Ptr
 126+ E42D             >
 126+ E42D             >                // dummy db directives used to calculate length of namec
 126+ E42D 43 2F 4C    >                db      "C/L"
 126+ E430             >len_NFA         defl    $ - temp_NFA
 126+ E430             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E42D             >
 126+ E42D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E42E 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E431             >                org     $-1                 // alter last byte of Name just above to set
 126+ E430 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E431             >
 126+ E431 26 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E433             >Prev_Ptr        defl    Heap_Ptr
 126+ E433             >
 126+ E433             >mirror_Ptr      defl    $
 126+ E433             >
 126+ E433 62 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E435             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E435             >
 126+ E435             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E435             >
 126+ E435             >//              ______________________________________________________________________
 126+ E435             >//              Dictionary part
 126+ E435             >
 126+ E435             >                org     Dict_Ptr
 126+ 6A60             >
 126+ 6A60 33 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6A62             >
 126+ 6A62             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6A62 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6A65             >
 126+ 6A65             >
 126+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6A65             >
 126+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6A65 40 00       >                dw      64
 127+ 6A67                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6A67             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6A67             >
 127+ 6A67             >Dict_Ptr        defl    $
 127+ 6A67             >
 127+ 6A67             >//              ______________________________________________________________________
 127+ 6A67             >//              Heap part
 127+ 6A67             >
 127+ 6A67             >
 127+ 6A67             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E435             >
 127+ E435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E435             >Latest_Definition defl  Heap_Ptr
 127+ E435             >
 127+ E435             >                // dummy db directives used to calculate length of namec
 127+ E435 42 2F 42 55 >                db      "B/BUF"
 127+ E439 46          >
 127+ E43A             >len_NFA         defl    $ - temp_NFA
 127+ E43A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E435             >
 127+ E435 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E436 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E43A 46          >
 127+ E43B             >                org     $-1                 // alter last byte of Name just above to set
 127+ E43A C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E43B             >
 127+ E43B 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E43D             >Prev_Ptr        defl    Heap_Ptr
 127+ E43D             >
 127+ E43D             >mirror_Ptr      defl    $
 127+ E43D             >
 127+ E43D 69 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E43F             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43F             >
 127+ E43F             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43F             >
 127+ E43F             >//              ______________________________________________________________________
 127+ E43F             >//              Dictionary part
 127+ E43F             >
 127+ E43F             >                org     Dict_Ptr
 127+ 6A67             >
 127+ 6A67 3D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6A69             >
 127+ 6A69             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6A69 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6A6C             >
 127+ 6A6C             >
 127+ 6A6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6A6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6A6C             >
 127+ 6A6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6A6C 00 02       >                dw      512
 128+ 6A6E                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6A6E             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6A6E             >
 128+ 6A6E             >Dict_Ptr        defl    $
 128+ 6A6E             >
 128+ 6A6E             >//              ______________________________________________________________________
 128+ 6A6E             >//              Heap part
 128+ 6A6E             >
 128+ 6A6E             >
 128+ 6A6E             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43F             >
 128+ E43F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43F             >Latest_Definition defl  Heap_Ptr
 128+ E43F             >
 128+ E43F             >                // dummy db directives used to calculate length of namec
 128+ E43F 42 2F 53 43 >                db      "B/SCR"
 128+ E443 52          >
 128+ E444             >len_NFA         defl    $ - temp_NFA
 128+ E444             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43F             >
 128+ E43F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E440 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E444 52          >
 128+ E445             >                org     $-1                 // alter last byte of Name just above to set
 128+ E444 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E445             >
 128+ E445 35 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E447             >Prev_Ptr        defl    Heap_Ptr
 128+ E447             >
 128+ E447             >mirror_Ptr      defl    $
 128+ E447             >
 128+ E447 70 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E449             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E449             >
 128+ E449             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E449             >
 128+ E449             >//              ______________________________________________________________________
 128+ E449             >//              Dictionary part
 128+ E449             >
 128+ E449             >                org     Dict_Ptr
 128+ 6A6E             >
 128+ 6A6E 47 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6A70             >
 128+ 6A70             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6A70 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6A73             >
 128+ 6A73             >
 128+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6A73             >
 128+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6A73 02 00       >                dw      2
 129+ 6A75                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6A75             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6A75             >
 129+ 6A75             >Dict_Ptr        defl    $
 129+ 6A75             >
 129+ 6A75             >//              ______________________________________________________________________
 129+ 6A75             >//              Heap part
 129+ 6A75             >
 129+ 6A75             >
 129+ 6A75             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E449             >
 129+ E449             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E449             >Latest_Definition defl  Heap_Ptr
 129+ E449             >
 129+ E449             >                // dummy db directives used to calculate length of namec
 129+ E449 4C 2F 53 43 >                db      "L/SCR"
 129+ E44D 52          >
 129+ E44E             >len_NFA         defl    $ - temp_NFA
 129+ E44E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E449             >
 129+ E449 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E44A 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E44E 52          >
 129+ E44F             >                org     $-1                 // alter last byte of Name just above to set
 129+ E44E D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44F             >
 129+ E44F 3F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E451             >Prev_Ptr        defl    Heap_Ptr
 129+ E451             >
 129+ E451             >mirror_Ptr      defl    $
 129+ E451             >
 129+ E451 77 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E453             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E453             >
 129+ E453             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E453             >
 129+ E453             >//              ______________________________________________________________________
 129+ E453             >//              Dictionary part
 129+ E453             >
 129+ E453             >                org     Dict_Ptr
 129+ 6A75             >
 129+ 6A75 51 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6A77             >
 129+ 6A77             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6A77 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6A7A             >
 129+ 6A7A             >
 129+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6A7A             >
 129+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6A7A 10 00       >                dw      16
 130+ 6A7C
 131+ 6A7C              //  ______________________________________________________________________
 132+ 6A7C              //
 133+ 6A7C              // +origin         --
 134+ 6A7C              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6A7C              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6A7C              //              dw      PLUS                    // +
 137+ 6A7C              //              dw      EXIT                    // ;
 138+ 6A7C                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6A7C             >
 138+ 6A7C             >Dict_Ptr        defl    $
 138+ 6A7C             >
 138+ 6A7C             >//              ______________________________________________________________________
 138+ 6A7C             >//              Heap part
 138+ 6A7C             >
 138+ 6A7C             >
 138+ 6A7C             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E453             >
 138+ E453             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E453             >Latest_Definition defl  Heap_Ptr
 138+ E453             >
 138+ E453             >                // dummy db directives used to calculate length of namec
 138+ E453 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E457 47 49 4E    >
 138+ E45A             >len_NFA         defl    $ - temp_NFA
 138+ E45A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E453             >
 138+ E453 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E454 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E458 47 49 4E    >
 138+ E45B             >                org     $-1                 // alter last byte of Name just above to set
 138+ E45A CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E45B             >
 138+ E45B 49 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E45D             >Prev_Ptr        defl    Heap_Ptr
 138+ E45D             >
 138+ E45D             >mirror_Ptr      defl    $
 138+ E45D             >
 138+ E45D 7E 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E45F             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45F             >
 138+ E45F             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45F             >
 138+ E45F             >//              ______________________________________________________________________
 138+ E45F             >//              Dictionary part
 138+ E45F             >
 138+ E45F             >                org     Dict_Ptr
 138+ 6A7C             >
 138+ 6A7C 5D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6A7E             >
 138+ 6A7E             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6A7E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6A7E ~           >
 138+ 6A7E ~           >
 138+ 6A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6A7E             >
 138+ 6A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6A7E D9                           exx
 140+ 6A7F E1                           pop     hl
 141+ 6A80 11 66 63                     ld      de, Cold_origin
 142+ 6A83 19                           add     hl, de
 143+ 6A84 E5                           push    hl
 144+ 6A85 D9                           exx
 145+ 6A86                              next
 145+ 6A86 DD E9       >                jp      (ix)
 146+ 6A88
 147+ 6A88
 148+ 6A88              //  ______________________________________________________________________
 149+ 6A88              //
 150+ 6A88                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6A88             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6A88             >
 150+ 6A88             >Dict_Ptr        defl    $
 150+ 6A88             >
 150+ 6A88             >//              ______________________________________________________________________
 150+ 6A88             >//              Heap part
 150+ 6A88             >
 150+ 6A88             >
 150+ 6A88             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45F             >
 150+ E45F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45F             >Latest_Definition defl  Heap_Ptr
 150+ E45F             >
 150+ E45F             >                // dummy db directives used to calculate length of namec
 150+ E45F 28 4E 45 58 >                db      "(NEXT)"
 150+ E463 54 29       >
 150+ E465             >len_NFA         defl    $ - temp_NFA
 150+ E465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45F             >
 150+ E45F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E460 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E464 54 29       >
 150+ E466             >                org     $-1                 // alter last byte of Name just above to set
 150+ E465 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E466             >
 150+ E466 53 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E468             >Prev_Ptr        defl    Heap_Ptr
 150+ E468             >
 150+ E468             >mirror_Ptr      defl    $
 150+ E468             >
 150+ E468 8A 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E46A             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E46A             >
 150+ E46A             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E46A             >
 150+ E46A             >//              ______________________________________________________________________
 150+ E46A             >//              Dictionary part
 150+ E46A             >
 150+ E46A             >                org     Dict_Ptr
 150+ 6A88             >
 150+ 6A88 68 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6A8A             >
 150+ 6A8A             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6A8A CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6A8D             >
 150+ 6A8D             >
 150+ 6A8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6A8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6A8D             >
 150+ 6A8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6A8D 9A 63       >                dw      Next_Ptr
 151+ 6A8F
 152+ 6A8F              //  ______________________________________________________________________
 153+ 6A8F              //
 154+ 6A8F
 155+ 6A8F                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6A8F             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6A8F             >
 155+ 6A8F             >Dict_Ptr        defl    $
 155+ 6A8F             >
 155+ 6A8F             >//              ______________________________________________________________________
 155+ 6A8F             >//              Heap part
 155+ 6A8F             >
 155+ 6A8F             >
 155+ 6A8F             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E46A             >
 155+ E46A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E46A             >Latest_Definition defl  Heap_Ptr
 155+ E46A             >
 155+ E46A             >                // dummy db directives used to calculate length of namec
 155+ E46A 53 30       >                db      "S0"
 155+ E46C             >len_NFA         defl    $ - temp_NFA
 155+ E46C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E46A             >
 155+ E46A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E46B 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E46D             >                org     $-1                 // alter last byte of Name just above to set
 155+ E46C B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E46D             >
 155+ E46D 5F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46F             >Prev_Ptr        defl    Heap_Ptr
 155+ E46F             >
 155+ E46F             >mirror_Ptr      defl    $
 155+ E46F             >
 155+ E46F 91 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E471             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E471             >
 155+ E471             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E471             >
 155+ E471             >//              ______________________________________________________________________
 155+ E471             >//              Dictionary part
 155+ E471             >
 155+ E471             >                org     Dict_Ptr
 155+ 6A8F             >
 155+ 6A8F 6F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6A91             >
 155+ 6A91             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6A91 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6A94             >
 155+ 6A94             >
 155+ 6A94             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6A94             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6A94             >
 155+ 6A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6A94 06          >                db      06
 156+ 6A95                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6A95             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6A95             >
 156+ 6A95             >Dict_Ptr        defl    $
 156+ 6A95             >
 156+ 6A95             >//              ______________________________________________________________________
 156+ 6A95             >//              Heap part
 156+ 6A95             >
 156+ 6A95             >
 156+ 6A95             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E471             >
 156+ E471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E471             >Latest_Definition defl  Heap_Ptr
 156+ E471             >
 156+ E471             >                // dummy db directives used to calculate length of namec
 156+ E471 52 30       >                db      "R0"
 156+ E473             >len_NFA         defl    $ - temp_NFA
 156+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E471             >
 156+ E471 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E472 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E474             >                org     $-1                 // alter last byte of Name just above to set
 156+ E473 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E474             >
 156+ E474 6A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E476             >Prev_Ptr        defl    Heap_Ptr
 156+ E476             >
 156+ E476             >mirror_Ptr      defl    $
 156+ E476             >
 156+ E476 97 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E478             >
 156+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E478             >
 156+ E478             >//              ______________________________________________________________________
 156+ E478             >//              Dictionary part
 156+ E478             >
 156+ E478             >                org     Dict_Ptr
 156+ 6A95             >
 156+ 6A95 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6A97             >
 156+ 6A97             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6A97 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6A9A             >
 156+ 6A9A             >
 156+ 6A9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6A9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6A9A             >
 156+ 6A9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6A9A 08          >                db      08
 157+ 6A9B                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6A9B             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6A9B             >
 157+ 6A9B             >Dict_Ptr        defl    $
 157+ 6A9B             >
 157+ 6A9B             >//              ______________________________________________________________________
 157+ 6A9B             >//              Heap part
 157+ 6A9B             >
 157+ 6A9B             >
 157+ 6A9B             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E478             >
 157+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E478             >Latest_Definition defl  Heap_Ptr
 157+ E478             >
 157+ E478             >                // dummy db directives used to calculate length of namec
 157+ E478 54 49 42    >                db      "TIB"
 157+ E47B             >len_NFA         defl    $ - temp_NFA
 157+ E47B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E478             >
 157+ E478 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E479 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E47C             >                org     $-1                 // alter last byte of Name just above to set
 157+ E47B C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E47C             >
 157+ E47C 71 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E47E             >Prev_Ptr        defl    Heap_Ptr
 157+ E47E             >
 157+ E47E             >mirror_Ptr      defl    $
 157+ E47E             >
 157+ E47E 9D 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E480             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E480             >
 157+ E480             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E480             >
 157+ E480             >//              ______________________________________________________________________
 157+ E480             >//              Dictionary part
 157+ E480             >
 157+ E480             >                org     Dict_Ptr
 157+ 6A9B             >
 157+ 6A9B 7E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6A9D             >
 157+ 6A9D             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6A9D CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AA0             >
 157+ 6AA0             >
 157+ 6AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AA0             >
 157+ 6AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AA0 0A          >                db      10
 158+ 6AA1                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AA1             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AA1             >
 158+ 6AA1             >Dict_Ptr        defl    $
 158+ 6AA1             >
 158+ 6AA1             >//              ______________________________________________________________________
 158+ 6AA1             >//              Heap part
 158+ 6AA1             >
 158+ 6AA1             >
 158+ 6AA1             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E480             >
 158+ E480             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E480             >Latest_Definition defl  Heap_Ptr
 158+ E480             >
 158+ E480             >                // dummy db directives used to calculate length of namec
 158+ E480 57 49 44 54 >                db      "WIDTH"
 158+ E484 48          >
 158+ E485             >len_NFA         defl    $ - temp_NFA
 158+ E485             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E480             >
 158+ E480 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E481 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E485 48          >
 158+ E486             >                org     $-1                 // alter last byte of Name just above to set
 158+ E485 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E486             >
 158+ E486 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E488             >Prev_Ptr        defl    Heap_Ptr
 158+ E488             >
 158+ E488             >mirror_Ptr      defl    $
 158+ E488             >
 158+ E488 A3 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E48A             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E48A             >
 158+ E48A             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E48A             >
 158+ E48A             >//              ______________________________________________________________________
 158+ E48A             >//              Dictionary part
 158+ E48A             >
 158+ E48A             >                org     Dict_Ptr
 158+ 6AA1             >
 158+ 6AA1 88 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AA3             >
 158+ 6AA3             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AA3 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AA6             >
 158+ 6AA6             >
 158+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AA6             >
 158+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AA6 0C          >                db      12
 159+ 6AA7                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AA7             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AA7             >
 159+ 6AA7             >Dict_Ptr        defl    $
 159+ 6AA7             >
 159+ 6AA7             >//              ______________________________________________________________________
 159+ 6AA7             >//              Heap part
 159+ 6AA7             >
 159+ 6AA7             >
 159+ 6AA7             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E48A             >
 159+ E48A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E48A             >Latest_Definition defl  Heap_Ptr
 159+ E48A             >
 159+ E48A             >                // dummy db directives used to calculate length of namec
 159+ E48A 57 41 52 4E >                db      "WARNING"
 159+ E48E 49 4E 47    >
 159+ E491             >len_NFA         defl    $ - temp_NFA
 159+ E491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E48A             >
 159+ E48A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E48B 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48F 49 4E 47    >
 159+ E492             >                org     $-1                 // alter last byte of Name just above to set
 159+ E491 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E492             >
 159+ E492 80 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E494             >Prev_Ptr        defl    Heap_Ptr
 159+ E494             >
 159+ E494             >mirror_Ptr      defl    $
 159+ E494             >
 159+ E494 A9 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E496             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E496             >
 159+ E496             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E496             >
 159+ E496             >//              ______________________________________________________________________
 159+ E496             >//              Dictionary part
 159+ E496             >
 159+ E496             >                org     Dict_Ptr
 159+ 6AA7             >
 159+ 6AA7 94 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AA9             >
 159+ 6AA9             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AA9 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AAC             >
 159+ 6AAC             >
 159+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AAC             >
 159+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AAC 0E          >                db      14
 160+ 6AAD                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AAD             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AAD             >
 160+ 6AAD             >Dict_Ptr        defl    $
 160+ 6AAD             >
 160+ 6AAD             >//              ______________________________________________________________________
 160+ 6AAD             >//              Heap part
 160+ 6AAD             >
 160+ 6AAD             >
 160+ 6AAD             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E496             >
 160+ E496             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E496             >Latest_Definition defl  Heap_Ptr
 160+ E496             >
 160+ E496             >                // dummy db directives used to calculate length of namec
 160+ E496 46 45 4E 43 >                db      "FENCE"
 160+ E49A 45          >
 160+ E49B             >len_NFA         defl    $ - temp_NFA
 160+ E49B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E496             >
 160+ E496 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E497 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E49B 45          >
 160+ E49C             >                org     $-1                 // alter last byte of Name just above to set
 160+ E49B C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E49C             >
 160+ E49C 8A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E49E             >Prev_Ptr        defl    Heap_Ptr
 160+ E49E             >
 160+ E49E             >mirror_Ptr      defl    $
 160+ E49E             >
 160+ E49E AF 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E4A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E4A0             >
 160+ E4A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E4A0             >
 160+ E4A0             >//              ______________________________________________________________________
 160+ E4A0             >//              Dictionary part
 160+ E4A0             >
 160+ E4A0             >                org     Dict_Ptr
 160+ 6AAD             >
 160+ 6AAD 9E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AAF             >
 160+ 6AAF             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AAF CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AB2             >
 160+ 6AB2             >
 160+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AB2             >
 160+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AB2 10          >                db      16
 161+ 6AB3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AB3             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AB3             >
 161+ 6AB3             >Dict_Ptr        defl    $
 161+ 6AB3             >
 161+ 6AB3             >//              ______________________________________________________________________
 161+ 6AB3             >//              Heap part
 161+ 6AB3             >
 161+ 6AB3             >
 161+ 6AB3             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E4A0             >
 161+ E4A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E4A0             >Latest_Definition defl  Heap_Ptr
 161+ E4A0             >
 161+ E4A0             >                // dummy db directives used to calculate length of namec
 161+ E4A0 44 50       >                db      "DP"
 161+ E4A2             >len_NFA         defl    $ - temp_NFA
 161+ E4A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E4A0             >
 161+ E4A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E4A1 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E4A3             >                org     $-1                 // alter last byte of Name just above to set
 161+ E4A2 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E4A3             >
 161+ E4A3 96 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A5             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A5             >
 161+ E4A5             >mirror_Ptr      defl    $
 161+ E4A5             >
 161+ E4A5 B5 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A7             >
 161+ E4A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A7             >
 161+ E4A7             >//              ______________________________________________________________________
 161+ E4A7             >//              Dictionary part
 161+ E4A7             >
 161+ E4A7             >                org     Dict_Ptr
 161+ 6AB3             >
 161+ 6AB3 A5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AB5             >
 161+ 6AB5             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AB5 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6AB8             >
 161+ 6AB8             >
 161+ 6AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6AB8             >
 161+ 6AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6AB8 12          >                db      18
 162+ 6AB9                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6AB9             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6AB9             >
 162+ 6AB9             >Dict_Ptr        defl    $
 162+ 6AB9             >
 162+ 6AB9             >//              ______________________________________________________________________
 162+ 6AB9             >//              Heap part
 162+ 6AB9             >
 162+ 6AB9             >
 162+ 6AB9             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A7             >
 162+ E4A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A7             >Latest_Definition defl  Heap_Ptr
 162+ E4A7             >
 162+ E4A7             >                // dummy db directives used to calculate length of namec
 162+ E4A7 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4AB 4C 49 4E 4B >
 162+ E4AF             >len_NFA         defl    $ - temp_NFA
 162+ E4AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A7             >
 162+ E4A7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A8 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4AC 4C 49 4E 4B >
 162+ E4B0             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AF CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4B0             >
 162+ E4B0 A0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4B2             >Prev_Ptr        defl    Heap_Ptr
 162+ E4B2             >
 162+ E4B2             >mirror_Ptr      defl    $
 162+ E4B2             >
 162+ E4B2 BB 6A       >                dw      Dict_Ptr + 2        // xt
 162+ E4B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4B4             >
 162+ E4B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4B4             >
 162+ E4B4             >//              ______________________________________________________________________
 162+ E4B4             >//              Dictionary part
 162+ E4B4             >
 162+ E4B4             >                org     Dict_Ptr
 162+ 6AB9             >
 162+ 6AB9 B2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6ABB             >
 162+ 6ABB             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6ABB CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6ABE             >
 162+ 6ABE             >
 162+ 6ABE             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6ABE             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6ABE             >
 162+ 6ABE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6ABE 14          >                db      20
 163+ 6ABF                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6ABF             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6ABF             >
 163+ 6ABF             >Dict_Ptr        defl    $
 163+ 6ABF             >
 163+ 6ABF             >//              ______________________________________________________________________
 163+ 6ABF             >//              Heap part
 163+ 6ABF             >
 163+ 6ABF             >
 163+ 6ABF             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4B4             >
 163+ E4B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4B4             >Latest_Definition defl  Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >                // dummy db directives used to calculate length of namec
 163+ E4B4 46 49 52 53 >                db      "FIRST"
 163+ E4B8 54          >
 163+ E4B9             >len_NFA         defl    $ - temp_NFA
 163+ E4B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4B4             >
 163+ E4B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B5 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B9 54          >
 163+ E4BA             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B9 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4BA             >
 163+ E4BA A7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4BC             >Prev_Ptr        defl    Heap_Ptr
 163+ E4BC             >
 163+ E4BC             >mirror_Ptr      defl    $
 163+ E4BC             >
 163+ E4BC C1 6A       >                dw      Dict_Ptr + 2        // xt
 163+ E4BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4BE             >
 163+ E4BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4BE             >
 163+ E4BE             >//              ______________________________________________________________________
 163+ E4BE             >//              Dictionary part
 163+ E4BE             >
 163+ E4BE             >                org     Dict_Ptr
 163+ 6ABF             >
 163+ 6ABF BC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6AC1             >
 163+ 6AC1             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6AC1 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6AC4             >
 163+ 6AC4             >
 163+ 6AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6AC4             >
 163+ 6AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6AC4 16          >                db      22
 164+ 6AC5                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6AC5             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6AC5             >
 164+ 6AC5             >Dict_Ptr        defl    $
 164+ 6AC5             >
 164+ 6AC5             >//              ______________________________________________________________________
 164+ 6AC5             >//              Heap part
 164+ 6AC5             >
 164+ 6AC5             >
 164+ 6AC5             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4BE             >
 164+ E4BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4BE             >Latest_Definition defl  Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >                // dummy db directives used to calculate length of namec
 164+ E4BE 4C 49 4D 49 >                db      "LIMIT"
 164+ E4C2 54          >
 164+ E4C3             >len_NFA         defl    $ - temp_NFA
 164+ E4C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4BE             >
 164+ E4BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BF 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4C3 54          >
 164+ E4C4             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4C3 D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4C4             >
 164+ E4C4 B4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C6             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C6             >
 164+ E4C6             >mirror_Ptr      defl    $
 164+ E4C6             >
 164+ E4C6 C7 6A       >                dw      Dict_Ptr + 2        // xt
 164+ E4C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C8             >
 164+ E4C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C8             >
 164+ E4C8             >//              ______________________________________________________________________
 164+ E4C8             >//              Dictionary part
 164+ E4C8             >
 164+ E4C8             >                org     Dict_Ptr
 164+ 6AC5             >
 164+ 6AC5 C6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6AC7             >
 164+ 6AC7             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6AC7 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6ACA             >
 164+ 6ACA             >
 164+ 6ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6ACA             >
 164+ 6ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6ACA 18          >                db      24
 165+ 6ACB                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6ACB             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6ACB             >
 165+ 6ACB             >Dict_Ptr        defl    $
 165+ 6ACB             >
 165+ 6ACB             >//              ______________________________________________________________________
 165+ 6ACB             >//              Heap part
 165+ 6ACB             >
 165+ 6ACB             >
 165+ 6ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C8             >
 165+ E4C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C8             >Latest_Definition defl  Heap_Ptr
 165+ E4C8             >
 165+ E4C8             >                // dummy db directives used to calculate length of namec
 165+ E4C8 48 50       >                db      "HP"
 165+ E4CA             >len_NFA         defl    $ - temp_NFA
 165+ E4CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C8             >
 165+ E4C8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C9 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4CB             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4CA D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4CB             >
 165+ E4CB BE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4CD             >Prev_Ptr        defl    Heap_Ptr
 165+ E4CD             >
 165+ E4CD             >mirror_Ptr      defl    $
 165+ E4CD             >
 165+ E4CD CD 6A       >                dw      Dict_Ptr + 2        // xt
 165+ E4CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CF             >
 165+ E4CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CF             >
 165+ E4CF             >//              ______________________________________________________________________
 165+ E4CF             >//              Dictionary part
 165+ E4CF             >
 165+ E4CF             >                org     Dict_Ptr
 165+ 6ACB             >
 165+ 6ACB CD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6ACD             >
 165+ 6ACD             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6ACD CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6AD0             >
 165+ 6AD0             >
 165+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6AD0             >
 165+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6AD0 1A          >                db      26
 166+ 6AD1                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6AD1             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6AD1             >
 166+ 6AD1             >Dict_Ptr        defl    $
 166+ 6AD1             >
 166+ 6AD1             >//              ______________________________________________________________________
 166+ 6AD1             >//              Heap part
 166+ 6AD1             >
 166+ 6AD1             >
 166+ 6AD1             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CF             >
 166+ E4CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CF             >Latest_Definition defl  Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >                // dummy db directives used to calculate length of namec
 166+ E4CF 4E 4D 4F 44 >                db      "NMODE"
 166+ E4D3 45          >
 166+ E4D4             >len_NFA         defl    $ - temp_NFA
 166+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CF             >
 166+ E4CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4D0 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4D4 45          >
 166+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4D4 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D5             >
 166+ E4D5 C8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D7             >
 166+ E4D7             >mirror_Ptr      defl    $
 166+ E4D7             >
 166+ E4D7 D3 6A       >                dw      Dict_Ptr + 2        // xt
 166+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D9             >
 166+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D9             >
 166+ E4D9             >//              ______________________________________________________________________
 166+ E4D9             >//              Dictionary part
 166+ E4D9             >
 166+ E4D9             >                org     Dict_Ptr
 166+ 6AD1             >
 166+ 6AD1 D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6AD3             >
 166+ 6AD3             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6AD3 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6AD6             >
 166+ 6AD6             >
 166+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6AD6             >
 166+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6AD6 1C          >                db      28
 167+ 6AD7                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6AD7             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6AD7             >
 167+ 6AD7             >Dict_Ptr        defl    $
 167+ 6AD7             >
 167+ 6AD7             >//              ______________________________________________________________________
 167+ 6AD7             >//              Heap part
 167+ 6AD7             >
 167+ 6AD7             >
 167+ 6AD7             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D9             >
 167+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D9             >Latest_Definition defl  Heap_Ptr
 167+ E4D9             >
 167+ E4D9             >                // dummy db directives used to calculate length of namec
 167+ E4D9 42 4C 4B    >                db      "BLK"
 167+ E4DC             >len_NFA         defl    $ - temp_NFA
 167+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D9             >
 167+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4DA 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4DC CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4DD             >
 167+ E4DD CF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DF             >
 167+ E4DF             >mirror_Ptr      defl    $
 167+ E4DF             >
 167+ E4DF D9 6A       >                dw      Dict_Ptr + 2        // xt
 167+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4E1             >
 167+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4E1             >
 167+ E4E1             >//              ______________________________________________________________________
 167+ E4E1             >//              Dictionary part
 167+ E4E1             >
 167+ E4E1             >                org     Dict_Ptr
 167+ 6AD7             >
 167+ 6AD7 DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6AD9             >
 167+ 6AD9             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6AD9 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6ADC             >
 167+ 6ADC             >
 167+ 6ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6ADC             >
 167+ 6ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6ADC 1E          >                db      30
 168+ 6ADD                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6ADD             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6ADD             >
 168+ 6ADD             >Dict_Ptr        defl    $
 168+ 6ADD             >
 168+ 6ADD             >//              ______________________________________________________________________
 168+ 6ADD             >//              Heap part
 168+ 6ADD             >
 168+ 6ADD             >
 168+ 6ADD             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4E1             >
 168+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4E1             >Latest_Definition defl  Heap_Ptr
 168+ E4E1             >
 168+ E4E1             >                // dummy db directives used to calculate length of namec
 168+ E4E1 3E 49 4E    >                db      ">IN"
 168+ E4E4             >len_NFA         defl    $ - temp_NFA
 168+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4E1             >
 168+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4E2 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4E4 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E5             >
 168+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E7             >
 168+ E4E7             >mirror_Ptr      defl    $
 168+ E4E7             >
 168+ E4E7 DF 6A       >                dw      Dict_Ptr + 2        // xt
 168+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E9             >
 168+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E9             >
 168+ E4E9             >//              ______________________________________________________________________
 168+ E4E9             >//              Dictionary part
 168+ E4E9             >
 168+ E4E9             >                org     Dict_Ptr
 168+ 6ADD             >
 168+ 6ADD E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6ADF             >
 168+ 6ADF             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6ADF CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6AE2             >
 168+ 6AE2             >
 168+ 6AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6AE2             >
 168+ 6AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6AE2 20          >                db      32
 169+ 6AE3                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6AE3             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6AE3             >
 169+ 6AE3             >Dict_Ptr        defl    $
 169+ 6AE3             >
 169+ 6AE3             >//              ______________________________________________________________________
 169+ 6AE3             >//              Heap part
 169+ 6AE3             >
 169+ 6AE3             >
 169+ 6AE3             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E9             >
 169+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E9             >Latest_Definition defl  Heap_Ptr
 169+ E4E9             >
 169+ E4E9             >                // dummy db directives used to calculate length of namec
 169+ E4E9 4F 55 54    >                db      "OUT"
 169+ E4EC             >len_NFA         defl    $ - temp_NFA
 169+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E9             >
 169+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4EA 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4EC D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4ED             >
 169+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EF             >
 169+ E4EF             >mirror_Ptr      defl    $
 169+ E4EF             >
 169+ E4EF E5 6A       >                dw      Dict_Ptr + 2        // xt
 169+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4F1             >
 169+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4F1             >
 169+ E4F1             >//              ______________________________________________________________________
 169+ E4F1             >//              Dictionary part
 169+ E4F1             >
 169+ E4F1             >                org     Dict_Ptr
 169+ 6AE3             >
 169+ 6AE3 EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6AE5             >
 169+ 6AE5             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6AE5 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6AE8             >
 169+ 6AE8             >
 169+ 6AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6AE8             >
 169+ 6AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6AE8 22          >                db      34
 170+ 6AE9                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6AE9             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6AE9             >
 170+ 6AE9             >Dict_Ptr        defl    $
 170+ 6AE9             >
 170+ 6AE9             >//              ______________________________________________________________________
 170+ 6AE9             >//              Heap part
 170+ 6AE9             >
 170+ 6AE9             >
 170+ 6AE9             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4F1             >
 170+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4F1             >Latest_Definition defl  Heap_Ptr
 170+ E4F1             >
 170+ E4F1             >                // dummy db directives used to calculate length of namec
 170+ E4F1 53 43 52    >                db      "SCR"
 170+ E4F4             >len_NFA         defl    $ - temp_NFA
 170+ E4F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4F1             >
 170+ E4F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4F2 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F5             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4F4 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F5             >
 170+ E4F5 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F7             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F7             >
 170+ E4F7             >mirror_Ptr      defl    $
 170+ E4F7             >
 170+ E4F7 EB 6A       >                dw      Dict_Ptr + 2        // xt
 170+ E4F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F9             >
 170+ E4F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F9             >
 170+ E4F9             >//              ______________________________________________________________________
 170+ E4F9             >//              Dictionary part
 170+ E4F9             >
 170+ E4F9             >                org     Dict_Ptr
 170+ 6AE9             >
 170+ 6AE9 F7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6AEB             >
 170+ 6AEB             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6AEB CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6AEE             >
 170+ 6AEE             >
 170+ 6AEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6AEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6AEE             >
 170+ 6AEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6AEE 24          >                db      36
 171+ 6AEF                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6AEF             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6AEF             >
 171+ 6AEF             >Dict_Ptr        defl    $
 171+ 6AEF             >
 171+ 6AEF             >//              ______________________________________________________________________
 171+ 6AEF             >//              Heap part
 171+ 6AEF             >
 171+ 6AEF             >
 171+ 6AEF             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F9             >
 171+ E4F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F9             >Latest_Definition defl  Heap_Ptr
 171+ E4F9             >
 171+ E4F9             >                // dummy db directives used to calculate length of namec
 171+ E4F9 4F 46 46 53 >                db      "OFFSET"
 171+ E4FD 45 54       >
 171+ E4FF             >len_NFA         defl    $ - temp_NFA
 171+ E4FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F9             >
 171+ E4F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4FA 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4FE 45 54       >
 171+ E500             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FF D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E500             >
 171+ E500 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E502             >Prev_Ptr        defl    Heap_Ptr
 171+ E502             >
 171+ E502             >mirror_Ptr      defl    $
 171+ E502             >
 171+ E502 F1 6A       >                dw      Dict_Ptr + 2        // xt
 171+ E504             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E504             >
 171+ E504             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E504             >
 171+ E504             >//              ______________________________________________________________________
 171+ E504             >//              Dictionary part
 171+ E504             >
 171+ E504             >                org     Dict_Ptr
 171+ 6AEF             >
 171+ 6AEF 02 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6AF1             >
 171+ 6AF1             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6AF1 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6AF4             >
 171+ 6AF4             >
 171+ 6AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6AF4             >
 171+ 6AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6AF4 26          >                db      38
 172+ 6AF5                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6AF5             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6AF5             >
 172+ 6AF5             >Dict_Ptr        defl    $
 172+ 6AF5             >
 172+ 6AF5             >//              ______________________________________________________________________
 172+ 6AF5             >//              Heap part
 172+ 6AF5             >
 172+ 6AF5             >
 172+ 6AF5             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E504             >
 172+ E504             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E504             >Latest_Definition defl  Heap_Ptr
 172+ E504             >
 172+ E504             >                // dummy db directives used to calculate length of namec
 172+ E504 43 4F 4E 54 >                db      "CONTEXT"
 172+ E508 45 58 54    >
 172+ E50B             >len_NFA         defl    $ - temp_NFA
 172+ E50B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E504             >
 172+ E504 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E505 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E509 45 58 54    >
 172+ E50C             >                org     $-1                 // alter last byte of Name just above to set
 172+ E50B D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E50C             >
 172+ E50C F9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E50E             >Prev_Ptr        defl    Heap_Ptr
 172+ E50E             >
 172+ E50E             >mirror_Ptr      defl    $
 172+ E50E             >
 172+ E50E F7 6A       >                dw      Dict_Ptr + 2        // xt
 172+ E510             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E510             >
 172+ E510             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E510             >
 172+ E510             >//              ______________________________________________________________________
 172+ E510             >//              Dictionary part
 172+ E510             >
 172+ E510             >                org     Dict_Ptr
 172+ 6AF5             >
 172+ 6AF5 0E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6AF7             >
 172+ 6AF7             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6AF7 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6AFA             >
 172+ 6AFA             >
 172+ 6AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6AFA             >
 172+ 6AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6AFA 28          >                db      40
 173+ 6AFB                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6AFB             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6AFB             >
 173+ 6AFB             >Dict_Ptr        defl    $
 173+ 6AFB             >
 173+ 6AFB             >//              ______________________________________________________________________
 173+ 6AFB             >//              Heap part
 173+ 6AFB             >
 173+ 6AFB             >
 173+ 6AFB             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E510             >
 173+ E510             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E510             >Latest_Definition defl  Heap_Ptr
 173+ E510             >
 173+ E510             >                // dummy db directives used to calculate length of namec
 173+ E510 43 55 52 52 >                db      "CURRENT"
 173+ E514 45 4E 54    >
 173+ E517             >len_NFA         defl    $ - temp_NFA
 173+ E517             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E510             >
 173+ E510 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E511 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E515 45 4E 54    >
 173+ E518             >                org     $-1                 // alter last byte of Name just above to set
 173+ E517 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E518             >
 173+ E518 04 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E51A             >Prev_Ptr        defl    Heap_Ptr
 173+ E51A             >
 173+ E51A             >mirror_Ptr      defl    $
 173+ E51A             >
 173+ E51A FD 6A       >                dw      Dict_Ptr + 2        // xt
 173+ E51C             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E51C             >
 173+ E51C             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E51C             >
 173+ E51C             >//              ______________________________________________________________________
 173+ E51C             >//              Dictionary part
 173+ E51C             >
 173+ E51C             >                org     Dict_Ptr
 173+ 6AFB             >
 173+ 6AFB 1A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6AFD             >
 173+ 6AFD             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6AFD CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B00             >
 173+ 6B00             >
 173+ 6B00             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B00             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B00             >
 173+ 6B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B00 2A          >                db      42
 174+ 6B01                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B01             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B01             >
 174+ 6B01             >Dict_Ptr        defl    $
 174+ 6B01             >
 174+ 6B01             >//              ______________________________________________________________________
 174+ 6B01             >//              Heap part
 174+ 6B01             >
 174+ 6B01             >
 174+ 6B01             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E51C             >
 174+ E51C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E51C             >Latest_Definition defl  Heap_Ptr
 174+ E51C             >
 174+ E51C             >                // dummy db directives used to calculate length of namec
 174+ E51C 53 54 41 54 >                db      "STATE"
 174+ E520 45          >
 174+ E521             >len_NFA         defl    $ - temp_NFA
 174+ E521             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E51C             >
 174+ E51C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E51D 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E521 45          >
 174+ E522             >                org     $-1                 // alter last byte of Name just above to set
 174+ E521 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E522             >
 174+ E522 10 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E524             >Prev_Ptr        defl    Heap_Ptr
 174+ E524             >
 174+ E524             >mirror_Ptr      defl    $
 174+ E524             >
 174+ E524 03 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E526             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E526             >
 174+ E526             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E526             >
 174+ E526             >//              ______________________________________________________________________
 174+ E526             >//              Dictionary part
 174+ E526             >
 174+ E526             >                org     Dict_Ptr
 174+ 6B01             >
 174+ 6B01 24 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B03             >
 174+ 6B03             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B03 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B06             >
 174+ 6B06             >
 174+ 6B06             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B06             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B06             >
 174+ 6B06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B06 2C          >                db      44
 175+ 6B07                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B07             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B07             >
 175+ 6B07             >Dict_Ptr        defl    $
 175+ 6B07             >
 175+ 6B07             >//              ______________________________________________________________________
 175+ 6B07             >//              Heap part
 175+ 6B07             >
 175+ 6B07             >
 175+ 6B07             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E526             >
 175+ E526             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E526             >Latest_Definition defl  Heap_Ptr
 175+ E526             >
 175+ E526             >                // dummy db directives used to calculate length of namec
 175+ E526 42 41 53 45 >                db      "BASE"
 175+ E52A             >len_NFA         defl    $ - temp_NFA
 175+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E526             >
 175+ E526 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E527 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 175+ E52A C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E52B             >
 175+ E52B 1C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E52D             >Prev_Ptr        defl    Heap_Ptr
 175+ E52D             >
 175+ E52D             >mirror_Ptr      defl    $
 175+ E52D             >
 175+ E52D 09 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52F             >
 175+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52F             >
 175+ E52F             >//              ______________________________________________________________________
 175+ E52F             >//              Dictionary part
 175+ E52F             >
 175+ E52F             >                org     Dict_Ptr
 175+ 6B07             >
 175+ 6B07 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B09             >
 175+ 6B09             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B09 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B0C             >
 175+ 6B0C             >
 175+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B0C             >
 175+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B0C 2E          >                db      46
 176+ 6B0D                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B0D             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B0D             >
 176+ 6B0D             >Dict_Ptr        defl    $
 176+ 6B0D             >
 176+ 6B0D             >//              ______________________________________________________________________
 176+ 6B0D             >//              Heap part
 176+ 6B0D             >
 176+ 6B0D             >
 176+ 6B0D             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52F             >
 176+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52F             >Latest_Definition defl  Heap_Ptr
 176+ E52F             >
 176+ E52F             >                // dummy db directives used to calculate length of namec
 176+ E52F 44 50 4C    >                db      "DPL"
 176+ E532             >len_NFA         defl    $ - temp_NFA
 176+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52F             >
 176+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E530 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E533             >                org     $-1                 // alter last byte of Name just above to set
 176+ E532 CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E533             >
 176+ E533 26 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E535             >Prev_Ptr        defl    Heap_Ptr
 176+ E535             >
 176+ E535             >mirror_Ptr      defl    $
 176+ E535             >
 176+ E535 0F 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E537             >
 176+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E537             >
 176+ E537             >//              ______________________________________________________________________
 176+ E537             >//              Dictionary part
 176+ E537             >
 176+ E537             >                org     Dict_Ptr
 176+ 6B0D             >
 176+ 6B0D 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B0F             >
 176+ 6B0F             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B0F CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B12             >
 176+ 6B12             >
 176+ 6B12             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B12             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B12             >
 176+ 6B12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B12 30          >                db      48
 177+ 6B13                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B13             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B13             >
 177+ 6B13             >Dict_Ptr        defl    $
 177+ 6B13             >
 177+ 6B13             >//              ______________________________________________________________________
 177+ 6B13             >//              Heap part
 177+ 6B13             >
 177+ 6B13             >
 177+ 6B13             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E537             >
 177+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E537             >Latest_Definition defl  Heap_Ptr
 177+ E537             >
 177+ E537             >                // dummy db directives used to calculate length of namec
 177+ E537 46 4C 44    >                db      "FLD"
 177+ E53A             >len_NFA         defl    $ - temp_NFA
 177+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E537             >
 177+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E538 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 177+ E53A C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E53B             >
 177+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E53D             >Prev_Ptr        defl    Heap_Ptr
 177+ E53D             >
 177+ E53D             >mirror_Ptr      defl    $
 177+ E53D             >
 177+ E53D 15 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53F             >
 177+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53F             >
 177+ E53F             >//              ______________________________________________________________________
 177+ E53F             >//              Dictionary part
 177+ E53F             >
 177+ E53F             >                org     Dict_Ptr
 177+ 6B13             >
 177+ 6B13 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B15             >
 177+ 6B15             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B15 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B18             >
 177+ 6B18             >
 177+ 6B18             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B18             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B18             >
 177+ 6B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B18 32          >                db      50
 178+ 6B19                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B19             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B19             >
 178+ 6B19             >Dict_Ptr        defl    $
 178+ 6B19             >
 178+ 6B19             >//              ______________________________________________________________________
 178+ 6B19             >//              Heap part
 178+ 6B19             >
 178+ 6B19             >
 178+ 6B19             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53F             >
 178+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53F             >Latest_Definition defl  Heap_Ptr
 178+ E53F             >
 178+ E53F             >                // dummy db directives used to calculate length of namec
 178+ E53F 43 53 50    >                db      "CSP"
 178+ E542             >len_NFA         defl    $ - temp_NFA
 178+ E542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53F             >
 178+ E53F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E540 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E543             >                org     $-1                 // alter last byte of Name just above to set
 178+ E542 D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E543             >
 178+ E543 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E545             >Prev_Ptr        defl    Heap_Ptr
 178+ E545             >
 178+ E545             >mirror_Ptr      defl    $
 178+ E545             >
 178+ E545 1B 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E547             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E547             >
 178+ E547             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E547             >
 178+ E547             >//              ______________________________________________________________________
 178+ E547             >//              Dictionary part
 178+ E547             >
 178+ E547             >                org     Dict_Ptr
 178+ 6B19             >
 178+ 6B19 45 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B1B             >
 178+ 6B1B             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B1B CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B1E             >
 178+ 6B1E             >
 178+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B1E             >
 178+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B1E 34          >                db      52
 179+ 6B1F                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B1F             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B1F             >
 179+ 6B1F             >Dict_Ptr        defl    $
 179+ 6B1F             >
 179+ 6B1F             >//              ______________________________________________________________________
 179+ 6B1F             >//              Heap part
 179+ 6B1F             >
 179+ 6B1F             >
 179+ 6B1F             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E547             >
 179+ E547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E547             >Latest_Definition defl  Heap_Ptr
 179+ E547             >
 179+ E547             >                // dummy db directives used to calculate length of namec
 179+ E547 52 23       >                db      "R#"
 179+ E549             >len_NFA         defl    $ - temp_NFA
 179+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E547             >
 179+ E547 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E548 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 179+ E549 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E54A             >
 179+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E54C             >Prev_Ptr        defl    Heap_Ptr
 179+ E54C             >
 179+ E54C             >mirror_Ptr      defl    $
 179+ E54C             >
 179+ E54C 21 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E54E             >
 179+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E54E             >
 179+ E54E             >//              ______________________________________________________________________
 179+ E54E             >//              Dictionary part
 179+ E54E             >
 179+ E54E             >                org     Dict_Ptr
 179+ 6B1F             >
 179+ 6B1F 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B21             >
 179+ 6B21             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B21 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B24             >
 179+ 6B24             >
 179+ 6B24             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B24             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B24             >
 179+ 6B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B24 36          >                db      54
 180+ 6B25                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B25             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B25             >
 180+ 6B25             >Dict_Ptr        defl    $
 180+ 6B25             >
 180+ 6B25             >//              ______________________________________________________________________
 180+ 6B25             >//              Heap part
 180+ 6B25             >
 180+ 6B25             >
 180+ 6B25             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E54E             >
 180+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E54E             >Latest_Definition defl  Heap_Ptr
 180+ E54E             >
 180+ E54E             >                // dummy db directives used to calculate length of namec
 180+ E54E 48 4C 44    >                db      "HLD"
 180+ E551             >len_NFA         defl    $ - temp_NFA
 180+ E551             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E54E             >
 180+ E54E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54F 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E552             >                org     $-1                 // alter last byte of Name just above to set
 180+ E551 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E552             >
 180+ E552 47 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E554             >Prev_Ptr        defl    Heap_Ptr
 180+ E554             >
 180+ E554             >mirror_Ptr      defl    $
 180+ E554             >
 180+ E554 27 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E556             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E556             >
 180+ E556             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E556             >
 180+ E556             >//              ______________________________________________________________________
 180+ E556             >//              Dictionary part
 180+ E556             >
 180+ E556             >                org     Dict_Ptr
 180+ 6B25             >
 180+ 6B25 54 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B27             >
 180+ 6B27             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B27 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B2A             >
 180+ 6B2A             >
 180+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B2A             >
 180+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B2A 38          >                db      56
 181+ 6B2B                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B2B             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B2B             >
 181+ 6B2B             >Dict_Ptr        defl    $
 181+ 6B2B             >
 181+ 6B2B             >//              ______________________________________________________________________
 181+ 6B2B             >//              Heap part
 181+ 6B2B             >
 181+ 6B2B             >
 181+ 6B2B             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E556             >
 181+ E556             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E556             >Latest_Definition defl  Heap_Ptr
 181+ E556             >
 181+ E556             >                // dummy db directives used to calculate length of namec
 181+ E556 55 53 45 44 >                db      "USED"
 181+ E55A             >len_NFA         defl    $ - temp_NFA
 181+ E55A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E556             >
 181+ E556 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E557 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E55B             >                org     $-1                 // alter last byte of Name just above to set
 181+ E55A C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E55B             >
 181+ E55B 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E55D             >Prev_Ptr        defl    Heap_Ptr
 181+ E55D             >
 181+ E55D             >mirror_Ptr      defl    $
 181+ E55D             >
 181+ E55D 2D 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E55F             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55F             >
 181+ E55F             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55F             >
 181+ E55F             >//              ______________________________________________________________________
 181+ E55F             >//              Dictionary part
 181+ E55F             >
 181+ E55F             >                org     Dict_Ptr
 181+ 6B2B             >
 181+ 6B2B 5D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B2D             >
 181+ 6B2D             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B2D CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B30             >
 181+ 6B30             >
 181+ 6B30             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B30             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B30             >
 181+ 6B30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B30 3A          >                db      58
 182+ 6B31                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B31             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B31             >
 182+ 6B31             >Dict_Ptr        defl    $
 182+ 6B31             >
 182+ 6B31             >//              ______________________________________________________________________
 182+ 6B31             >//              Heap part
 182+ 6B31             >
 182+ 6B31             >
 182+ 6B31             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55F             >
 182+ E55F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55F             >Latest_Definition defl  Heap_Ptr
 182+ E55F             >
 182+ E55F             >                // dummy db directives used to calculate length of namec
 182+ E55F 50 52 45 56 >                db      "PREV"
 182+ E563             >len_NFA         defl    $ - temp_NFA
 182+ E563             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55F             >
 182+ E55F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E560 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E564             >                org     $-1                 // alter last byte of Name just above to set
 182+ E563 D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E564             >
 182+ E564 56 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E566             >Prev_Ptr        defl    Heap_Ptr
 182+ E566             >
 182+ E566             >mirror_Ptr      defl    $
 182+ E566             >
 182+ E566 33 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E568             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E568             >
 182+ E568             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E568             >
 182+ E568             >//              ______________________________________________________________________
 182+ E568             >//              Dictionary part
 182+ E568             >
 182+ E568             >                org     Dict_Ptr
 182+ 6B31             >
 182+ 6B31 66 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B33             >
 182+ 6B33             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B33 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B36             >
 182+ 6B36             >
 182+ 6B36             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B36             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B36             >
 182+ 6B36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B36 3C          >                db      60
 183+ 6B37                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B37             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B37             >
 183+ 6B37             >Dict_Ptr        defl    $
 183+ 6B37             >
 183+ 6B37             >//              ______________________________________________________________________
 183+ 6B37             >//              Heap part
 183+ 6B37             >
 183+ 6B37             >
 183+ 6B37             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E568             >
 183+ E568             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E568             >Latest_Definition defl  Heap_Ptr
 183+ E568             >
 183+ E568             >                // dummy db directives used to calculate length of namec
 183+ E568 4C 50       >                db      "LP"
 183+ E56A             >len_NFA         defl    $ - temp_NFA
 183+ E56A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E568             >
 183+ E568 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E569 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E56B             >                org     $-1                 // alter last byte of Name just above to set
 183+ E56A D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E56B             >
 183+ E56B 5F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E56D             >Prev_Ptr        defl    Heap_Ptr
 183+ E56D             >
 183+ E56D             >mirror_Ptr      defl    $
 183+ E56D             >
 183+ E56D 39 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E56F             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56F             >
 183+ E56F             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56F             >
 183+ E56F             >//              ______________________________________________________________________
 183+ E56F             >//              Dictionary part
 183+ E56F             >
 183+ E56F             >                org     Dict_Ptr
 183+ 6B37             >
 183+ 6B37 6D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B39             >
 183+ 6B39             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B39 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B3C             >
 183+ 6B3C             >
 183+ 6B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B3C             >
 183+ 6B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B3C 3E          >                db      62
 184+ 6B3D                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B3D             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B3D             >
 184+ 6B3D             >Dict_Ptr        defl    $
 184+ 6B3D             >
 184+ 6B3D             >//              ______________________________________________________________________
 184+ 6B3D             >//              Heap part
 184+ 6B3D             >
 184+ 6B3D             >
 184+ 6B3D             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56F             >
 184+ E56F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56F             >Latest_Definition defl  Heap_Ptr
 184+ E56F             >
 184+ E56F             >                // dummy db directives used to calculate length of namec
 184+ E56F 50 4C 41 43 >                db      "PLACE"
 184+ E573 45          >
 184+ E574             >len_NFA         defl    $ - temp_NFA
 184+ E574             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56F             >
 184+ E56F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E570 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E574 45          >
 184+ E575             >                org     $-1                 // alter last byte of Name just above to set
 184+ E574 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E575             >
 184+ E575 68 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E577             >Prev_Ptr        defl    Heap_Ptr
 184+ E577             >
 184+ E577             >mirror_Ptr      defl    $
 184+ E577             >
 184+ E577 3F 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E579             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E579             >
 184+ E579             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E579             >
 184+ E579             >//              ______________________________________________________________________
 184+ E579             >//              Dictionary part
 184+ E579             >
 184+ E579             >                org     Dict_Ptr
 184+ 6B3D             >
 184+ 6B3D 77 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B3F             >
 184+ 6B3F             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B3F CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B42             >
 184+ 6B42             >
 184+ 6B42             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B42             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B42             >
 184+ 6B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B42 40          >                db      64
 185+ 6B43                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B43             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B43             >
 185+ 6B43             >Dict_Ptr        defl    $
 185+ 6B43             >
 185+ 6B43             >//              ______________________________________________________________________
 185+ 6B43             >//              Heap part
 185+ 6B43             >
 185+ 6B43             >
 185+ 6B43             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E579             >
 185+ E579             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E579             >Latest_Definition defl  Heap_Ptr
 185+ E579             >
 185+ E579             >                // dummy db directives used to calculate length of namec
 185+ E579 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E57D 43 45 2D 49 >
 185+ E581 44          >
 185+ E582             >len_NFA         defl    $ - temp_NFA
 185+ E582             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E579             >
 185+ E579 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E57A 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E57E 43 45 2D 49 >
 185+ E582 44          >
 185+ E583             >                org     $-1                 // alter last byte of Name just above to set
 185+ E582 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E583             >
 185+ E583 6F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E585             >Prev_Ptr        defl    Heap_Ptr
 185+ E585             >
 185+ E585             >mirror_Ptr      defl    $
 185+ E585             >
 185+ E585 45 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E587             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E587             >
 185+ E587             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E587             >
 185+ E587             >//              ______________________________________________________________________
 185+ E587             >//              Dictionary part
 185+ E587             >
 185+ E587             >                org     Dict_Ptr
 185+ 6B43             >
 185+ 6B43 85 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B45             >
 185+ 6B45             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B45 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B48             >
 185+ 6B48             >
 185+ 6B48             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B48             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B48             >
 185+ 6B48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B48 42          >                db      66
 186+ 6B49                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B49             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B49             >
 186+ 6B49             >Dict_Ptr        defl    $
 186+ 6B49             >
 186+ 6B49             >//              ______________________________________________________________________
 186+ 6B49             >//              Heap part
 186+ 6B49             >
 186+ 6B49             >
 186+ 6B49             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E587             >
 186+ E587             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E587             >Latest_Definition defl  Heap_Ptr
 186+ E587             >
 186+ E587             >                // dummy db directives used to calculate length of namec
 186+ E587 53 50 41 4E >                db      "SPAN"
 186+ E58B             >len_NFA         defl    $ - temp_NFA
 186+ E58B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E587             >
 186+ E587 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E588 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E58C             >                org     $-1                 // alter last byte of Name just above to set
 186+ E58B CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E58C             >
 186+ E58C 79 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E58E             >Prev_Ptr        defl    Heap_Ptr
 186+ E58E             >
 186+ E58E             >mirror_Ptr      defl    $
 186+ E58E             >
 186+ E58E 4B 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E590             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E590             >
 186+ E590             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E590             >
 186+ E590             >//              ______________________________________________________________________
 186+ E590             >//              Dictionary part
 186+ E590             >
 186+ E590             >                org     Dict_Ptr
 186+ 6B49             >
 186+ 6B49 8E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B4B             >
 186+ 6B4B             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B4B CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B4E             >
 186+ 6B4E             >
 186+ 6B4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B4E             >
 186+ 6B4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B4E 44          >                db      68
 187+ 6B4F                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B4F             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B4F             >
 187+ 6B4F             >Dict_Ptr        defl    $
 187+ 6B4F             >
 187+ 6B4F             >//              ______________________________________________________________________
 187+ 6B4F             >//              Heap part
 187+ 6B4F             >
 187+ 6B4F             >
 187+ 6B4F             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E590             >
 187+ E590             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E590             >Latest_Definition defl  Heap_Ptr
 187+ E590             >
 187+ E590             >                // dummy db directives used to calculate length of namec
 187+ E590 48 41 4E 44 >                db      "HANDLER"
 187+ E594 4C 45 52    >
 187+ E597             >len_NFA         defl    $ - temp_NFA
 187+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E590             >
 187+ E590 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E591 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E595 4C 45 52    >
 187+ E598             >                org     $-1                 // alter last byte of Name just above to set
 187+ E597 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E598             >
 187+ E598 87 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E59A             >Prev_Ptr        defl    Heap_Ptr
 187+ E59A             >
 187+ E59A             >mirror_Ptr      defl    $
 187+ E59A             >
 187+ E59A 51 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E59C             >
 187+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E59C             >
 187+ E59C             >//              ______________________________________________________________________
 187+ E59C             >//              Dictionary part
 187+ E59C             >
 187+ E59C             >                org     Dict_Ptr
 187+ 6B4F             >
 187+ 6B4F 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B51             >
 187+ 6B51             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B51 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B54             >
 187+ 6B54             >
 187+ 6B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B54             >
 187+ 6B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B54 46          >                db      70
 188+ 6B55                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B55             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B55             >
 188+ 6B55             >Dict_Ptr        defl    $
 188+ 6B55             >
 188+ 6B55             >//              ______________________________________________________________________
 188+ 6B55             >//              Heap part
 188+ 6B55             >
 188+ 6B55             >
 188+ 6B55             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E59C             >
 188+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E59C             >Latest_Definition defl  Heap_Ptr
 188+ E59C             >
 188+ E59C             >                // dummy db directives used to calculate length of namec
 188+ E59C 45 58 50    >                db      "EXP"
 188+ E59F             >len_NFA         defl    $ - temp_NFA
 188+ E59F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E59C             >
 188+ E59C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E59D 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E5A0             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59F D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E5A0             >
 188+ E5A0 90 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E5A2             >Prev_Ptr        defl    Heap_Ptr
 188+ E5A2             >
 188+ E5A2             >mirror_Ptr      defl    $
 188+ E5A2             >
 188+ E5A2 57 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E5A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E5A4             >
 188+ E5A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E5A4             >
 188+ E5A4             >//              ______________________________________________________________________
 188+ E5A4             >//              Dictionary part
 188+ E5A4             >
 188+ E5A4             >                org     Dict_Ptr
 188+ 6B55             >
 188+ 6B55 A2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6B57             >
 188+ 6B57             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6B57 CD 2C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6B5A             >
 188+ 6B5A             >
 188+ 6B5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6B5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6B5A             >
 188+ 6B5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6B5A 48          >                db      72
 189+ 6B5B
 190+ 6B5B              //  ______________________________________________________________________
 191+ 6B5B              //
 192+ 6B5B              // here         -- a
 193+ 6B5B                              Colon_Def HERE, "HERE", is_normal
 193+ 6B5B             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6B5B             >
 193+ 6B5B             >Dict_Ptr        defl    $
 193+ 6B5B             >
 193+ 6B5B             >//              ______________________________________________________________________
 193+ 6B5B             >//              Heap part
 193+ 6B5B             >
 193+ 6B5B             >
 193+ 6B5B             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E5A4             >
 193+ E5A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E5A4             >Latest_Definition defl  Heap_Ptr
 193+ E5A4             >
 193+ E5A4             >                // dummy db directives used to calculate length of namec
 193+ E5A4 48 45 52 45 >                db      "HERE"
 193+ E5A8             >len_NFA         defl    $ - temp_NFA
 193+ E5A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E5A4             >
 193+ E5A4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A5 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A9             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A8 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A9             >
 193+ E5A9 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5AB             >Prev_Ptr        defl    Heap_Ptr
 193+ E5AB             >
 193+ E5AB             >mirror_Ptr      defl    $
 193+ E5AB             >
 193+ E5AB 5D 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5AD             >
 193+ E5AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5AD             >
 193+ E5AD             >//              ______________________________________________________________________
 193+ E5AD             >//              Dictionary part
 193+ E5AD             >
 193+ E5AD             >                org     Dict_Ptr
 193+ 6B5B             >
 193+ 6B5B AB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6B5D             >
 193+ 6B5D             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6B5D CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6B60             >
 193+ 6B60             >
 193+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6B60             >
 193+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6B60 B5 6A 46 69                  dw      DP, FETCH               // dp @
 195+ 6B64 11 68                        dw      EXIT                    // ;
 196+ 6B66
 197+ 6B66              //  ______________________________________________________________________
 198+ 6B66              //
 199+ 6B66              // allot        n --
 200+ 6B66                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6B66             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6B66             >
 200+ 6B66             >Dict_Ptr        defl    $
 200+ 6B66             >
 200+ 6B66             >//              ______________________________________________________________________
 200+ 6B66             >//              Heap part
 200+ 6B66             >
 200+ 6B66             >
 200+ 6B66             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5AD             >
 200+ E5AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5AD             >Latest_Definition defl  Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >                // dummy db directives used to calculate length of namec
 200+ E5AD 41 4C 4C 4F >                db      "ALLOT"
 200+ E5B1 54          >
 200+ E5B2             >len_NFA         defl    $ - temp_NFA
 200+ E5B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5AD             >
 200+ E5AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5AE 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5B2 54          >
 200+ E5B3             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5B2 D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5B3             >
 200+ E5B3 A4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B5             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B5             >
 200+ E5B5             >mirror_Ptr      defl    $
 200+ E5B5             >
 200+ E5B5 68 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B7             >
 200+ E5B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B7             >
 200+ E5B7             >//              ______________________________________________________________________
 200+ E5B7             >//              Dictionary part
 200+ E5B7             >
 200+ E5B7             >                org     Dict_Ptr
 200+ 6B66             >
 200+ 6B66 B5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6B68             >
 200+ 6B68             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6B68 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6B6B             >
 200+ 6B6B             >
 200+ 6B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6B6B             >
 200+ 6B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6B6B B5 6A 2E 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6B6F 11 68                        dw      EXIT                    // ;
 203+ 6B71
 204+ 6B71              //  ______________________________________________________________________
 205+ 6B71              //
 206+ 6B71              // comma        n --
 207+ 6B71                              Colon_Def COMMA, ",", is_normal
 207+ 6B71             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6B71             >
 207+ 6B71             >Dict_Ptr        defl    $
 207+ 6B71             >
 207+ 6B71             >//              ______________________________________________________________________
 207+ 6B71             >//              Heap part
 207+ 6B71             >
 207+ 6B71             >
 207+ 6B71             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B7             >
 207+ E5B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B7             >Latest_Definition defl  Heap_Ptr
 207+ E5B7             >
 207+ E5B7             >                // dummy db directives used to calculate length of namec
 207+ E5B7 2C          >                db      ","
 207+ E5B8             >len_NFA         defl    $ - temp_NFA
 207+ E5B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B7             >
 207+ E5B7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B8 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B9             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B8 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B9             >
 207+ E5B9 AD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5BB             >Prev_Ptr        defl    Heap_Ptr
 207+ E5BB             >
 207+ E5BB             >mirror_Ptr      defl    $
 207+ E5BB             >
 207+ E5BB 73 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5BD             >
 207+ E5BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5BD             >
 207+ E5BD             >//              ______________________________________________________________________
 207+ E5BD             >//              Dictionary part
 207+ E5BD             >
 207+ E5BD             >                org     Dict_Ptr
 207+ 6B71             >
 207+ 6B71 BB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6B73             >
 207+ 6B73             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6B73 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6B76             >
 207+ 6B76             >
 207+ 6B76             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6B76             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6B76             >
 207+ 6B76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6B76 5D 6B 50 69                  dw      HERE, STORE             // here !
 209+ 6B7A 46 6A 68 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6B7E 11 68                        dw      EXIT                    // ;
 211+ 6B80
 212+ 6B80              //  ______________________________________________________________________
 213+ 6B80              //
 214+ 6B80              // ccomma       c --
 215+ 6B80                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6B80             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6B80             >
 215+ 6B80             >Dict_Ptr        defl    $
 215+ 6B80             >
 215+ 6B80             >//              ______________________________________________________________________
 215+ 6B80             >//              Heap part
 215+ 6B80             >
 215+ 6B80             >
 215+ 6B80             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5BD             >
 215+ E5BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5BD             >Latest_Definition defl  Heap_Ptr
 215+ E5BD             >
 215+ E5BD             >                // dummy db directives used to calculate length of namec
 215+ E5BD 43 2C       >                db      "C,"
 215+ E5BF             >len_NFA         defl    $ - temp_NFA
 215+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5BD             >
 215+ E5BD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5BE 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BF AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5C0             >
 215+ E5C0 B7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 215+ E5C2             >
 215+ E5C2             >mirror_Ptr      defl    $
 215+ E5C2             >
 215+ E5C2 82 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5C4             >
 215+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5C4             >
 215+ E5C4             >//              ______________________________________________________________________
 215+ E5C4             >//              Dictionary part
 215+ E5C4             >
 215+ E5C4             >                org     Dict_Ptr
 215+ 6B80             >
 215+ 6B80 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6B82             >
 215+ 6B82             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6B82 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6B85             >
 215+ 6B85             >
 215+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6B85             >
 215+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6B85 5D 6B 64 69                  dw      HERE, CSTORE            // here c!
 217+ 6B89 3F 6A 68 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6B8D 11 68                        dw      EXIT                    // ;
 219+ 6B8F
 220+ 6B8F              //  ______________________________________________________________________
 221+ 6B8F              //
 222+ 6B8F              // hpcomma      n --
 223+ 6B8F              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6B8F              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6B8F              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6B8F              //              dw      EXIT                    // ;
 227+ 6B8F
 228+ 6B8F              //  ______________________________________________________________________
 229+ 6B8F              //
 230+ 6B8F              // s>d          n -- d
 231+ 6B8F              // converts a single precision integer in a double precision
 232+ 6B8F                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6B8F             >
 232+ 6B8F             >Dict_Ptr        defl    $
 232+ 6B8F             >
 232+ 6B8F             >//              ______________________________________________________________________
 232+ 6B8F             >//              Heap part
 232+ 6B8F             >
 232+ 6B8F             >
 232+ 6B8F             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5C4             >
 232+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5C4             >Latest_Definition defl  Heap_Ptr
 232+ E5C4             >
 232+ E5C4             >                // dummy db directives used to calculate length of namec
 232+ E5C4 53 3E 44    >                db      "S>D"
 232+ E5C7             >len_NFA         defl    $ - temp_NFA
 232+ E5C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5C4             >
 232+ E5C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C5 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C8             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C7 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C8             >
 232+ E5C8 BD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5CA             >Prev_Ptr        defl    Heap_Ptr
 232+ E5CA             >
 232+ E5CA             >mirror_Ptr      defl    $
 232+ E5CA             >
 232+ E5CA 91 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5CC             >
 232+ E5CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5CC             >
 232+ E5CC             >//              ______________________________________________________________________
 232+ E5CC             >//              Dictionary part
 232+ E5CC             >
 232+ E5CC             >                org     Dict_Ptr
 232+ 6B8F             >
 232+ 6B8F CA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6B91             >
 232+ 6B91             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6B91 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6B91 ~           >
 232+ 6B91 ~           >
 232+ 6B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6B91             >
 232+ 6B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6B91 E1                           pop     hl
 234+ 6B92 7C                           ld      a, h
 235+ 6B93 E5                           push    hl
 236+ 6B94 17                           rla
 237+ 6B95 ED 62                        sbc     hl, hl
 238+ 6B97 E5                           push    hl
 239+ 6B98                              next
 239+ 6B98 DD E9       >                jp      (ix)
 240+ 6B9A
 241+ 6B9A              //  ______________________________________________________________________
 242+ 6B9A              //
 243+ 6B9A              // -            n1 n2 -- n3
 244+ 6B9A              // subtraction
 245+ 6B9A                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6B9A             >
 245+ 6B9A             >Dict_Ptr        defl    $
 245+ 6B9A             >
 245+ 6B9A             >//              ______________________________________________________________________
 245+ 6B9A             >//              Heap part
 245+ 6B9A             >
 245+ 6B9A             >
 245+ 6B9A             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5CC             >
 245+ E5CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5CC             >Latest_Definition defl  Heap_Ptr
 245+ E5CC             >
 245+ E5CC             >                // dummy db directives used to calculate length of namec
 245+ E5CC 2D          >                db      "-"
 245+ E5CD             >len_NFA         defl    $ - temp_NFA
 245+ E5CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5CC             >
 245+ E5CC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5CD 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5CE             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5CD AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5CE             >
 245+ E5CE C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5D0             >Prev_Ptr        defl    Heap_Ptr
 245+ E5D0             >
 245+ E5D0             >mirror_Ptr      defl    $
 245+ E5D0             >
 245+ E5D0 9C 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5D2             >
 245+ E5D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5D2             >
 245+ E5D2             >//              ______________________________________________________________________
 245+ E5D2             >//              Dictionary part
 245+ E5D2             >
 245+ E5D2             >                org     Dict_Ptr
 245+ 6B9A             >
 245+ 6B9A D0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6B9C             >
 245+ 6B9C             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6B9C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6B9C ~           >
 245+ 6B9C ~           >
 245+ 6B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6B9C             >
 245+ 6B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6B9C D9                           exx
 247+ 6B9D D1                           pop     de
 248+ 6B9E E1                           pop     hl
 249+ 6B9F A7                           and     a
 250+ 6BA0 ED 52                        sbc     hl, de
 251+ 6BA2 E5                           push    hl
 252+ 6BA3 D9                           exx
 253+ 6BA4                              next
 253+ 6BA4 DD E9       >                jp      (ix)
 254+ 6BA6
 255+ 6BA6
 256+ 6BA6              //  ______________________________________________________________________
 257+ 6BA6              //
 258+ 6BA6              // =            n1 n2 -- n3
 259+ 6BA6              // equals
 260+ 6BA6                              Colon_Def EQUALS, "=", is_normal
 260+ 6BA6             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BA6             >
 260+ 6BA6             >Dict_Ptr        defl    $
 260+ 6BA6             >
 260+ 6BA6             >//              ______________________________________________________________________
 260+ 6BA6             >//              Heap part
 260+ 6BA6             >
 260+ 6BA6             >
 260+ 6BA6             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5D2             >
 260+ E5D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5D2             >Latest_Definition defl  Heap_Ptr
 260+ E5D2             >
 260+ E5D2             >                // dummy db directives used to calculate length of namec
 260+ E5D2 3D          >                db      "="
 260+ E5D3             >len_NFA         defl    $ - temp_NFA
 260+ E5D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5D2             >
 260+ E5D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5D3 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5D4             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5D3 BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5D4             >
 260+ E5D4 CC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D6             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D6             >
 260+ E5D6             >mirror_Ptr      defl    $
 260+ E5D6             >
 260+ E5D6 A8 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D8             >
 260+ E5D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D8             >
 260+ E5D8             >//              ______________________________________________________________________
 260+ E5D8             >//              Dictionary part
 260+ E5D8             >
 260+ E5D8             >                org     Dict_Ptr
 260+ 6BA6             >
 260+ 6BA6 D6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BA8             >
 260+ 6BA8             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BA8 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6BAB             >
 260+ 6BAB             >
 260+ 6BAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BAB             >
 260+ 6BAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BAB 9C 6B 36 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6BAF 11 68                        dw      EXIT                    // ;
 263+ 6BB1
 264+ 6BB1              //  ______________________________________________________________________
 265+ 6BB1              //
 266+ 6BB1              // u<           u1 u2 -- u3
 267+ 6BB1              // unsigned less-than
 268+ 6BB1                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6BB1             >
 268+ 6BB1             >Dict_Ptr        defl    $
 268+ 6BB1             >
 268+ 6BB1             >//              ______________________________________________________________________
 268+ 6BB1             >//              Heap part
 268+ 6BB1             >
 268+ 6BB1             >
 268+ 6BB1             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D8             >
 268+ E5D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D8             >Latest_Definition defl  Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >                // dummy db directives used to calculate length of namec
 268+ E5D8 55 3C       >                db      "U<"
 268+ E5DA             >len_NFA         defl    $ - temp_NFA
 268+ E5DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D8             >
 268+ E5D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D9 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5DB             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5DA BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5DB             >
 268+ E5DB D2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5DD             >Prev_Ptr        defl    Heap_Ptr
 268+ E5DD             >
 268+ E5DD             >mirror_Ptr      defl    $
 268+ E5DD             >
 268+ E5DD B3 6B       >                dw      Dict_Ptr + 2        // xt
 268+ E5DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DF             >
 268+ E5DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DF             >
 268+ E5DF             >//              ______________________________________________________________________
 268+ E5DF             >//              Dictionary part
 268+ E5DF             >
 268+ E5DF             >                org     Dict_Ptr
 268+ 6BB1             >
 268+ 6BB1 DD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6BB3             >
 268+ 6BB3             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6BB3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6BB3 ~           >
 268+ 6BB3 ~           >
 268+ 6BB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6BB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6BB3             >
 268+ 6BB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6BB3 D9                           exx
 270+ 6BB4 D1                           pop     de
 271+ 6BB5 E1                           pop     hl
 272+ 6BB6              Unsigned_Less_Exit:
 273+ 6BB6 A7                           and     a
 274+ 6BB7 ED 52                        sbc     hl, de
 275+ 6BB9 ED 62                        sbc     hl, hl
 276+ 6BBB E5                           push    hl
 277+ 6BBC D9                           exx
 278+ 6BBD                              next
 278+ 6BBD DD E9       >                jp      (ix)
 279+ 6BBF
 280+ 6BBF              //  ______________________________________________________________________
 281+ 6BBF              //
 282+ 6BBF              // <           n1 n2 -- n3
 283+ 6BBF              // less-than
 284+ 6BBF                              New_Def LESS, "<", is_code, is_normal
 284+ 6BBF             >
 284+ 6BBF             >Dict_Ptr        defl    $
 284+ 6BBF             >
 284+ 6BBF             >//              ______________________________________________________________________
 284+ 6BBF             >//              Heap part
 284+ 6BBF             >
 284+ 6BBF             >
 284+ 6BBF             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5DF             >
 284+ E5DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5DF             >Latest_Definition defl  Heap_Ptr
 284+ E5DF             >
 284+ E5DF             >                // dummy db directives used to calculate length of namec
 284+ E5DF 3C          >                db      "<"
 284+ E5E0             >len_NFA         defl    $ - temp_NFA
 284+ E5E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5DF             >
 284+ E5DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5E0 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5E1             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5E0 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5E1             >
 284+ E5E1 D8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5E3             >Prev_Ptr        defl    Heap_Ptr
 284+ E5E3             >
 284+ E5E3             >mirror_Ptr      defl    $
 284+ E5E3             >
 284+ E5E3 C1 6B       >                dw      Dict_Ptr + 2        // xt
 284+ E5E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5E5             >
 284+ E5E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5E5             >
 284+ E5E5             >//              ______________________________________________________________________
 284+ E5E5             >//              Dictionary part
 284+ E5E5             >
 284+ E5E5             >                org     Dict_Ptr
 284+ 6BBF             >
 284+ 6BBF E3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 6BC1             >
 284+ 6BC1             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6BC1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 6BC1 ~           >
 284+ 6BC1 ~           >
 284+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6BC1             >
 284+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6BC1 D9                           exx
 286+ 6BC2 E1                           pop     hl
 287+ 6BC3 D1                           pop     de
 288+ 6BC4 01 00 80                     ld      bc, $8000
 289+ 6BC7 09                           add     hl, bc
 290+ 6BC8 EB                           ex      de, hl
 291+ 6BC9 09                           add     hl, bc
 292+ 6BCA 18 EA                        jr      Unsigned_Less_Exit
 293+ 6BCC              //              and     a
 294+ 6BCC              //              sbc     hl, de
 295+ 6BCC              //              sbc     hl, hl
 296+ 6BCC              //              push    hl
 297+ 6BCC              //              exx
 298+ 6BCC              //              next
 299+ 6BCC
 300+ 6BCC              //  ______________________________________________________________________
 301+ 6BCC              //
 302+ 6BCC              // >            n1 n2 -- n3
 303+ 6BCC              // greater than
 304+ 6BCC                              Colon_Def GREATER, ">", is_normal
 304+ 6BCC             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6BCC             >
 304+ 6BCC             >Dict_Ptr        defl    $
 304+ 6BCC             >
 304+ 6BCC             >//              ______________________________________________________________________
 304+ 6BCC             >//              Heap part
 304+ 6BCC             >
 304+ 6BCC             >
 304+ 6BCC             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E5             >
 304+ E5E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E5             >Latest_Definition defl  Heap_Ptr
 304+ E5E5             >
 304+ E5E5             >                // dummy db directives used to calculate length of namec
 304+ E5E5 3E          >                db      ">"
 304+ E5E6             >len_NFA         defl    $ - temp_NFA
 304+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E5             >
 304+ E5E5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E6 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E6 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E7             >
 304+ E5E7 DF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E9             >
 304+ E5E9             >mirror_Ptr      defl    $
 304+ E5E9             >
 304+ E5E9 CE 6B       >                dw      Dict_Ptr + 2        // xt
 304+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5EB             >
 304+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5EB             >
 304+ E5EB             >//              ______________________________________________________________________
 304+ E5EB             >//              Dictionary part
 304+ E5EB             >
 304+ E5EB             >                org     Dict_Ptr
 304+ 6BCC             >
 304+ 6BCC E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6BCE             >
 304+ 6BCE             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6BCE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6BD1             >
 304+ 6BD1             >
 304+ 6BD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6BD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6BD1             >
 304+ 6BD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6BD1 D5 68 C1 6B                  dw      SWAP, LESS              // swap <
 306+ 6BD5 11 68                        dw      EXIT                    // ;
 307+ 6BD7              //  ______________________________________________________________________
 308+ 6BD7              //
 309+ 6BD7              // min          n1 n2 -- n3
 310+ 6BD7              // minimum between n1 and n2
 311+ 6BD7                              Colon_Def MIN, "MIN" , is_normal
 311+ 6BD7             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6BD7             >
 311+ 6BD7             >Dict_Ptr        defl    $
 311+ 6BD7             >
 311+ 6BD7             >//              ______________________________________________________________________
 311+ 6BD7             >//              Heap part
 311+ 6BD7             >
 311+ 6BD7             >
 311+ 6BD7             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5EB             >
 311+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5EB             >Latest_Definition defl  Heap_Ptr
 311+ E5EB             >
 311+ E5EB             >                // dummy db directives used to calculate length of namec
 311+ E5EB 4D 49 4E    >                db      "MIN"
 311+ E5EE             >len_NFA         defl    $ - temp_NFA
 311+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5EB             >
 311+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5EC 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5EE CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EF             >
 311+ E5EF E5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 311+ E5F1             >
 311+ E5F1             >mirror_Ptr      defl    $
 311+ E5F1             >
 311+ E5F1 D9 6B       >                dw      Dict_Ptr + 2        // xt
 311+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5F3             >
 311+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5F3             >
 311+ E5F3             >//              ______________________________________________________________________
 311+ E5F3             >//              Dictionary part
 311+ E5F3             >
 311+ E5F3             >                org     Dict_Ptr
 311+ 6BD7             >
 311+ 6BD7 F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6BD9             >
 311+ 6BD9             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6BD9 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6BDC             >
 311+ 6BDC             >
 311+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6BDC             >
 311+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6BDC 24 69                        dw      TWO_DUP                 // 2dup
 313+ 6BDE CE 6B                        dw      GREATER                 // >
 314+ 6BE0 F3 63                        dw      ZBRANCH
 315+ 6BE2 04 00                        dw      Min_Skip - $   // if
 316+ 6BE4 D5 68                        dw          SWAP                //      swap
 317+ 6BE6              Min_Skip:                                       // endif
 318+ 6BE6 C1 68                        dw      DROP                    // drop
 319+ 6BE8 11 68                        dw      EXIT                    // ;
 320+ 6BEA
 321+ 6BEA              //  ______________________________________________________________________
 322+ 6BEA              //
 323+ 6BEA              // max          n1 n2 -- n3
 324+ 6BEA              // maximum between n1 and n2
 325+ 6BEA                              Colon_Def MAX, "MAX", is_normal
 325+ 6BEA             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6BEA             >
 325+ 6BEA             >Dict_Ptr        defl    $
 325+ 6BEA             >
 325+ 6BEA             >//              ______________________________________________________________________
 325+ 6BEA             >//              Heap part
 325+ 6BEA             >
 325+ 6BEA             >
 325+ 6BEA             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5F3             >
 325+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5F3             >Latest_Definition defl  Heap_Ptr
 325+ E5F3             >
 325+ E5F3             >                // dummy db directives used to calculate length of namec
 325+ E5F3 4D 41 58    >                db      "MAX"
 325+ E5F6             >len_NFA         defl    $ - temp_NFA
 325+ E5F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5F3             >
 325+ E5F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5F4 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F7             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F6 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F7             >
 325+ E5F7 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F9             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F9             >
 325+ E5F9             >mirror_Ptr      defl    $
 325+ E5F9             >
 325+ E5F9 EC 6B       >                dw      Dict_Ptr + 2        // xt
 325+ E5FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5FB             >
 325+ E5FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5FB             >
 325+ E5FB             >//              ______________________________________________________________________
 325+ E5FB             >//              Dictionary part
 325+ E5FB             >
 325+ E5FB             >                org     Dict_Ptr
 325+ 6BEA             >
 325+ 6BEA F9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6BEC             >
 325+ 6BEC             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6BEC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6BEF             >
 325+ 6BEF             >
 325+ 6BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6BEF             >
 325+ 6BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6BEF 24 69                        dw      TWO_DUP                 // 2dup
 327+ 6BF1 C1 6B                        dw      LESS                    // <
 328+ 6BF3 F3 63                        dw      ZBRANCH
 329+ 6BF5 04 00                        dw      Max_Skip - $   // if
 330+ 6BF7 D5 68                        dw          SWAP                //      swap
 331+ 6BF9              Max_Skip:                                       // endif
 332+ 6BF9 C1 68                        dw      DROP                    // drop
 333+ 6BFB 11 68                        dw      EXIT                    // ;
 334+ 6BFD
 335+ 6BFD              //  ______________________________________________________________________
 336+ 6BFD              //
 337+ 6BFD              // ?dup         n -- 0 | n n
 338+ 6BFD              // duplicate if not zero
 339+ 6BFD                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6BFD             >
 339+ 6BFD             >Dict_Ptr        defl    $
 339+ 6BFD             >
 339+ 6BFD             >//              ______________________________________________________________________
 339+ 6BFD             >//              Heap part
 339+ 6BFD             >
 339+ 6BFD             >
 339+ 6BFD             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5FB             >
 339+ E5FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5FB             >Latest_Definition defl  Heap_Ptr
 339+ E5FB             >
 339+ E5FB             >                // dummy db directives used to calculate length of namec
 339+ E5FB 3F 44 55 50 >                db      "?DUP"
 339+ E5FF             >len_NFA         defl    $ - temp_NFA
 339+ E5FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5FB             >
 339+ E5FB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5FC 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E600             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FF D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E600             >
 339+ E600 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E602             >Prev_Ptr        defl    Heap_Ptr
 339+ E602             >
 339+ E602             >mirror_Ptr      defl    $
 339+ E602             >
 339+ E602 FF 6B       >                dw      Dict_Ptr + 2        // xt
 339+ E604             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E604             >
 339+ E604             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E604             >
 339+ E604             >//              ______________________________________________________________________
 339+ E604             >//              Dictionary part
 339+ E604             >
 339+ E604             >                org     Dict_Ptr
 339+ 6BFD             >
 339+ 6BFD 02 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6BFF             >
 339+ 6BFF             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6BFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6BFF ~           >
 339+ 6BFF ~           >
 339+ 6BFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6BFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6BFF             >
 339+ 6BFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6BFF              QDup_Ptr:
 341+ 6BFF E1                           pop     hl
 342+ 6C00 7C                           ld      a, h
 343+ 6C01 B5                           or      l
 344+ 6C02 28 01                        jr      z, QDup_Skip
 345+ 6C04 E5                               push    hl
 346+ 6C05              QDup_Skip:
 347+ 6C05                              psh1
 347+ 6C05 E5          >                push    hl
 347+ 6C06 DD E9       >                jp      (ix)
 348+ 6C08
 349+ 6C08              //  ______________________________________________________________________
 350+ 6C08              //
 351+ 6C08              // -dup         n -- 0 | n n
 352+ 6C08              // duplicate if not zero
 353+ 6C08                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C08             >
 353+ 6C08             >Dict_Ptr        defl    $
 353+ 6C08             >
 353+ 6C08             >//              ______________________________________________________________________
 353+ 6C08             >//              Heap part
 353+ 6C08             >
 353+ 6C08             >
 353+ 6C08             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E604             >
 353+ E604             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E604             >Latest_Definition defl  Heap_Ptr
 353+ E604             >
 353+ E604             >                // dummy db directives used to calculate length of namec
 353+ E604 2D 44 55 50 >                db      "-DUP"
 353+ E608             >len_NFA         defl    $ - temp_NFA
 353+ E608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E604             >
 353+ E604 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E605 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E609             >                org     $-1                 // alter last byte of Name just above to set
 353+ E608 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E609             >
 353+ E609 FB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E60B             >Prev_Ptr        defl    Heap_Ptr
 353+ E60B             >
 353+ E60B             >mirror_Ptr      defl    $
 353+ E60B             >
 353+ E60B 0A 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E60D             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E60D             >
 353+ E60D             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E60D             >
 353+ E60D             >//              ______________________________________________________________________
 353+ E60D             >//              Dictionary part
 353+ E60D             >
 353+ E60D             >                org     Dict_Ptr
 353+ 6C08             >
 353+ 6C08 0B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C0A             >
 353+ 6C0A             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C0A ~           >
 353+ 6C0A ~           >
 353+ 6C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C0A             >
 353+ 6C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C0A C3 FF 6B                     jp      QDup_Ptr
 355+ 6C0D
 356+ 6C0D              //  ______________________________________________________________________
 357+ 6C0D              //
 358+ 6C0D              // emitc          --
 359+ 6C0D                              Colon_Def EMITC, "EMITC", is_normal
 359+ 6C0D             >                New_Def  EMITC, "EMITC", Enter_Ptr, is_normal ; ok
 359+ 6C0D             >
 359+ 6C0D             >Dict_Ptr        defl    $
 359+ 6C0D             >
 359+ 6C0D             >//              ______________________________________________________________________
 359+ 6C0D             >//              Heap part
 359+ 6C0D             >
 359+ 6C0D             >
 359+ 6C0D             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E60D             >
 359+ E60D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E60D             >Latest_Definition defl  Heap_Ptr
 359+ E60D             >
 359+ E60D             >                // dummy db directives used to calculate length of namec
 359+ E60D 45 4D 49 54 >                db      "EMITC"
 359+ E611 43          >
 359+ E612             >len_NFA         defl    $ - temp_NFA
 359+ E612             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E60D             >
 359+ E60D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E60E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 359+ E612 43          >
 359+ E613             >                org     $-1                 // alter last byte of Name just above to set
 359+ E612 C3          >                db      {b $} | END_BIT     // msb as name end
 359+ E613             >
 359+ E613 04 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E615             >Prev_Ptr        defl    Heap_Ptr
 359+ E615             >
 359+ E615             >mirror_Ptr      defl    $
 359+ E615             >
 359+ E615 0F 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E617             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E617             >
 359+ E617             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E617             >
 359+ E617             >//              ______________________________________________________________________
 359+ E617             >//              Dictionary part
 359+ E617             >
 359+ E617             >                org     Dict_Ptr
 359+ 6C0D             >
 359+ 6C0D 15 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C0F             >
 359+ 6C0F             >EMITC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C0F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C12             >
 359+ 6C12             >
 359+ 6C12             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C12             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C12             >
 359+ 6C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C12 91 65                        dw      CEMITC
 361+ 6C14 11 68                        dw      EXIT
 362+ 6C16
 363+ 6C16
 364+ 6C16              //  ______________________________________________________________________
 365+ 6C16              //
 366+ 6C16              // emit         c --
 367+ 6C16                              Colon_Def EMIT, "EMIT", is_normal
 367+ 6C16             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 367+ 6C16             >
 367+ 6C16             >Dict_Ptr        defl    $
 367+ 6C16             >
 367+ 6C16             >//              ______________________________________________________________________
 367+ 6C16             >//              Heap part
 367+ 6C16             >
 367+ 6C16             >
 367+ 6C16             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ E617             >
 367+ E617             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ E617             >Latest_Definition defl  Heap_Ptr
 367+ E617             >
 367+ E617             >                // dummy db directives used to calculate length of namec
 367+ E617 45 4D 49 54 >                db      "EMIT"
 367+ E61B             >len_NFA         defl    $ - temp_NFA
 367+ E61B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ E617             >
 367+ E617 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ E618 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 367+ E61C             >                org     $-1                 // alter last byte of Name just above to set
 367+ E61B D4          >                db      {b $} | END_BIT     // msb as name end
 367+ E61C             >
 367+ E61C 0D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ E61E             >Prev_Ptr        defl    Heap_Ptr
 367+ E61E             >
 367+ E61E             >mirror_Ptr      defl    $
 367+ E61E             >
 367+ E61E 18 6C       >                dw      Dict_Ptr + 2        // xt
 367+ E620             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ E620             >
 367+ E620             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ E620             >
 367+ E620             >//              ______________________________________________________________________
 367+ E620             >//              Dictionary part
 367+ E620             >
 367+ E620             >                org     Dict_Ptr
 367+ 6C16             >
 367+ 6C16 1E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 6C18             >
 367+ 6C18             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6C18 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 367+ 6C1B             >
 367+ 6C1B             >
 367+ 6C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6C1B             >
 367+ 6C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6C1B D5 65                        dw      C_EMIT                      // (?emit)
 369+ 6C1D FF 6B                        dw      QDUP                        // ?dup
 370+ 6C1F                                                                  // if
 371+ 6C1F F3 63                        dw      ZBRANCH
 372+ 6C21 0A 00                        dw      Emit_Skip - $
 373+ 6C23 0F 6C                        dw          EMITC                   //      emitc
 374+ 6C25 3F 6A                        dw          ONE                     //      1
 375+ 6C27 E5 6A 2E 69                  dw          OUT, PLUSSTORE        //      out +!
 376+ 6C2B              Emit_Skip:                                          // endif
 377+ 6C2B 11 68                        dw      EXIT                        // ;
 378+ 6C2D
 379+ 6C2D              //  ______________________________________________________________________
 380+ 6C2D              //
 381+ 6C2D              // space        --
 382+ 6C2D                              Colon_Def SPACE, "SPACE", is_normal
 382+ 6C2D             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 382+ 6C2D             >
 382+ 6C2D             >Dict_Ptr        defl    $
 382+ 6C2D             >
 382+ 6C2D             >//              ______________________________________________________________________
 382+ 6C2D             >//              Heap part
 382+ 6C2D             >
 382+ 6C2D             >
 382+ 6C2D             >                org     (Heap_Ptr & $1FFF) + $E000
 382+ E620             >
 382+ E620             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ E620             >Latest_Definition defl  Heap_Ptr
 382+ E620             >
 382+ E620             >                // dummy db directives used to calculate length of namec
 382+ E620 53 50 41 43 >                db      "SPACE"
 382+ E624 45          >
 382+ E625             >len_NFA         defl    $ - temp_NFA
 382+ E625             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ E620             >
 382+ E620 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ E621 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 382+ E625 45          >
 382+ E626             >                org     $-1                 // alter last byte of Name just above to set
 382+ E625 C5          >                db      {b $} | END_BIT     // msb as name end
 382+ E626             >
 382+ E626 17 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 382+ E628             >Prev_Ptr        defl    Heap_Ptr
 382+ E628             >
 382+ E628             >mirror_Ptr      defl    $
 382+ E628             >
 382+ E628 2F 6C       >                dw      Dict_Ptr + 2        // xt
 382+ E62A             >Heap_Ptr        defl    $ - $E000           // save current HP
 382+ E62A             >
 382+ E62A             >Current_HP      defl  $ - $E000             // used to set HP once!
 382+ E62A             >
 382+ E62A             >//              ______________________________________________________________________
 382+ E62A             >//              Dictionary part
 382+ E62A             >
 382+ E62A             >                org     Dict_Ptr
 382+ 6C2D             >
 382+ 6C2D 28 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 382+ 6C2F             >
 382+ 6C2F             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 6C2F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 382+ 6C32             >
 382+ 6C32             >
 382+ 6C32             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 6C32             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 6C32             >
 382+ 6C32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 6C32 5B 6A 18 6C                  dw      BL, EMIT                // bl emit
 384+ 6C36 11 68                        dw      EXIT                    // ;
 385+ 6C38
 386+ 6C38              //  ______________________________________________________________________
 387+ 6C38              //
 388+ 6C38              // cr        --
 389+ 6C38                              Colon_Def CR, "CR", is_normal
 389+ 6C38             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 389+ 6C38             >
 389+ 6C38             >Dict_Ptr        defl    $
 389+ 6C38             >
 389+ 6C38             >//              ______________________________________________________________________
 389+ 6C38             >//              Heap part
 389+ 6C38             >
 389+ 6C38             >
 389+ 6C38             >                org     (Heap_Ptr & $1FFF) + $E000
 389+ E62A             >
 389+ E62A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ E62A             >Latest_Definition defl  Heap_Ptr
 389+ E62A             >
 389+ E62A             >                // dummy db directives used to calculate length of namec
 389+ E62A 43 52       >                db      "CR"
 389+ E62C             >len_NFA         defl    $ - temp_NFA
 389+ E62C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ E62A             >
 389+ E62A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ E62B 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 389+ E62D             >                org     $-1                 // alter last byte of Name just above to set
 389+ E62C D2          >                db      {b $} | END_BIT     // msb as name end
 389+ E62D             >
 389+ E62D 20 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 389+ E62F             >Prev_Ptr        defl    Heap_Ptr
 389+ E62F             >
 389+ E62F             >mirror_Ptr      defl    $
 389+ E62F             >
 389+ E62F 3A 6C       >                dw      Dict_Ptr + 2        // xt
 389+ E631             >Heap_Ptr        defl    $ - $E000           // save current HP
 389+ E631             >
 389+ E631             >Current_HP      defl  $ - $E000             // used to set HP once!
 389+ E631             >
 389+ E631             >//              ______________________________________________________________________
 389+ E631             >//              Dictionary part
 389+ E631             >
 389+ E631             >                org     Dict_Ptr
 389+ 6C38             >
 389+ 6C38 2F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 389+ 6C3A             >
 389+ 6C3A             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 6C3A CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 6C3D             >
 389+ 6C3D             >
 389+ 6C3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 6C3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 6C3D             >
 389+ 6C3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 6C3D A3 63 0D 00                  dw      LIT,13,EMIT             // 13 emit
 390+ 6C41 18 6C
 391+ 6C43 11 68                        dw      EXIT                    // ;
 392+ 6C45
 393+ 6C45              //  ______________________________________________________________________
 394+ 6C45              //
 395+ 6C45              // traverse     a n -- a
 396+ 6C45              // A dictionary entry is structured as follows
 397+ 6C45              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 398+ 6C45              //      +1   word name, last character is toggled with $80
 399+ 6C45              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 400+ 6C45              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 401+ 6C45              // PFA: +6+n "is_code", definitions have no PFA. // +5
 402+ 6C45              //
 403+ 6C45                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 403+ 6C45             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 403+ 6C45             >
 403+ 6C45             >Dict_Ptr        defl    $
 403+ 6C45             >
 403+ 6C45             >//              ______________________________________________________________________
 403+ 6C45             >//              Heap part
 403+ 6C45             >
 403+ 6C45             >
 403+ 6C45             >                org     (Heap_Ptr & $1FFF) + $E000
 403+ E631             >
 403+ E631             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ E631             >Latest_Definition defl  Heap_Ptr
 403+ E631             >
 403+ E631             >                // dummy db directives used to calculate length of namec
 403+ E631 54 52 41 56 >                db      "TRAVERSE"
 403+ E635 45 52 53 45 >
 403+ E639             >len_NFA         defl    $ - temp_NFA
 403+ E639             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ E631             >
 403+ E631 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ E632 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 403+ E636 45 52 53 45 >
 403+ E63A             >                org     $-1                 // alter last byte of Name just above to set
 403+ E639 C5          >                db      {b $} | END_BIT     // msb as name end
 403+ E63A             >
 403+ E63A 2A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 403+ E63C             >Prev_Ptr        defl    Heap_Ptr
 403+ E63C             >
 403+ E63C             >mirror_Ptr      defl    $
 403+ E63C             >
 403+ E63C 47 6C       >                dw      Dict_Ptr + 2        // xt
 403+ E63E             >Heap_Ptr        defl    $ - $E000           // save current HP
 403+ E63E             >
 403+ E63E             >Current_HP      defl  $ - $E000             // used to set HP once!
 403+ E63E             >
 403+ E63E             >//              ______________________________________________________________________
 403+ E63E             >//              Dictionary part
 403+ E63E             >
 403+ E63E             >                org     Dict_Ptr
 403+ 6C45             >
 403+ 6C45 3C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 403+ 6C47             >
 403+ 6C47             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6C47 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 6C4A             >
 403+ 6C4A             >
 403+ 6C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6C4A             >
 403+ 6C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6C4A D5 68                        dw      SWAP                    // swap
 405+ 6C4C              Traverse_Begin:                                 // begin
 406+ 6C4C B8 68 5E 68                  dw          OVER, PLUS          //      over +
 407+ 6C50 A3 63 7F 00                  dw          LIT, 127            //      127
 408+ 6C54 B8 68 5B 69                  dw          OVER, CFETCH        //      over @
 409+ 6C58 C1 6B                        dw          LESS                //      <
 410+ 6C5A                                                              // until
 411+ 6C5A F3 63                        dw      ZBRANCH
 412+ 6C5C F0 FF                        dw      Traverse_Begin - $
 413+ 6C5E C6 68                        dw      NIP                     //  nip
 414+ 6C60 11 68                        dw      EXIT                    //  ;
 415+ 6C62
 416+ 6C62              //  ______________________________________________________________________
 417+ 6C62              //
 418+ 6C62              // mmu7@        -- n
 419+ 6C62              // query current page in MMU7 8K-RAM : 0 and 223
 420+ 6C62
 421+ 6C62                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 421+ 6C62             >
 421+ 6C62             >Dict_Ptr        defl    $
 421+ 6C62             >
 421+ 6C62             >//              ______________________________________________________________________
 421+ 6C62             >//              Heap part
 421+ 6C62             >
 421+ 6C62             >
 421+ 6C62             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E63E             >
 421+ E63E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E63E             >Latest_Definition defl  Heap_Ptr
 421+ E63E             >
 421+ E63E             >                // dummy db directives used to calculate length of namec
 421+ E63E 4D 4D 55 37 >                db      "MMU7@"
 421+ E642 40          >
 421+ E643             >len_NFA         defl    $ - temp_NFA
 421+ E643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E63E             >
 421+ E63E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E63F 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 421+ E643 40          >
 421+ E644             >                org     $-1                 // alter last byte of Name just above to set
 421+ E643 C0          >                db      {b $} | END_BIT     // msb as name end
 421+ E644             >
 421+ E644 31 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E646             >Prev_Ptr        defl    Heap_Ptr
 421+ E646             >
 421+ E646             >mirror_Ptr      defl    $
 421+ E646             >
 421+ E646 64 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E648             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E648             >
 421+ E648             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E648             >
 421+ E648             >//              ______________________________________________________________________
 421+ E648             >//              Dictionary part
 421+ E648             >
 421+ E648             >                org     Dict_Ptr
 421+ 6C62             >
 421+ 6C62 46 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6C64             >
 421+ 6C64             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6C64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6C64 ~           >
 421+ 6C64 ~           >
 421+ 6C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6C64             >
 421+ 6C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6C64 D9                           exx
 423+ 6C65 CD 96 64                     call    MMU7_read
 424+ 6C68 D9                           exx
 425+ 6C69 6F                           ld      l, a
 426+ 6C6A 26 00                        ld      h, 0
 427+ 6C6C E5                           push    hl
 428+ 6C6D                              next
 428+ 6C6D DD E9       >                jp      (ix)
 429+ 6C6F
 430+ 6C6F              //  ______________________________________________________________________
 431+ 6C6F              //
 432+ 6C6F              // mmu7!        n --
 433+ 6C6F              // set MMU7 8K-RAM page to n given between 0 and 223
 434+ 6C6F              // optimized version that uses NEXTREG n,A Z80n op-code.
 435+ 6C6F
 436+ 6C6F                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 436+ 6C6F             >
 436+ 6C6F             >Dict_Ptr        defl    $
 436+ 6C6F             >
 436+ 6C6F             >//              ______________________________________________________________________
 436+ 6C6F             >//              Heap part
 436+ 6C6F             >
 436+ 6C6F             >
 436+ 6C6F             >                org     (Heap_Ptr & $1FFF) + $E000
 436+ E648             >
 436+ E648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ E648             >Latest_Definition defl  Heap_Ptr
 436+ E648             >
 436+ E648             >                // dummy db directives used to calculate length of namec
 436+ E648 4D 4D 55 37 >                db      "MMU7!"
 436+ E64C 21          >
 436+ E64D             >len_NFA         defl    $ - temp_NFA
 436+ E64D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ E648             >
 436+ E648 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ E649 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 436+ E64D 21          >
 436+ E64E             >                org     $-1                 // alter last byte of Name just above to set
 436+ E64D A1          >                db      {b $} | END_BIT     // msb as name end
 436+ E64E             >
 436+ E64E 3E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 436+ E650             >Prev_Ptr        defl    Heap_Ptr
 436+ E650             >
 436+ E650             >mirror_Ptr      defl    $
 436+ E650             >
 436+ E650 71 6C       >                dw      Dict_Ptr + 2        // xt
 436+ E652             >Heap_Ptr        defl    $ - $E000           // save current HP
 436+ E652             >
 436+ E652             >Current_HP      defl  $ - $E000             // used to set HP once!
 436+ E652             >
 436+ E652             >//              ______________________________________________________________________
 436+ E652             >//              Dictionary part
 436+ E652             >
 436+ E652             >                org     Dict_Ptr
 436+ 6C6F             >
 436+ 6C6F 50 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 436+ 6C71             >
 436+ 6C71             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 6C71 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 436+ 6C71 ~           >
 436+ 6C71 ~           >
 436+ 6C71             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 6C71             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 6C71             >
 436+ 6C71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 6C71 E1                           pop     hl
 438+ 6C72 7D                           ld      a, l
 439+ 6C73 ED 92 57                     nextreg 87, a
 440+ 6C76
 441+ 6C76                              next
 441+ 6C76 DD E9       >                jp      (ix)
 442+ 6C78
 443+ 6C78              //  ______________________________________________________________________
 444+ 6C78              //
 445+ 6C78              // >far         ha -- a n
 446+ 6C78              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 447+ 6C78              // take lower bits of H and L as an offset from E000h
 448+ 6C78              // then return address  a  between E000h-FFFFh
 449+ 6C78              // and page number n  between 64-71 (40h-47h)
 450+ 6C78              // For example, in hex:
 451+ 6C78              //   0000 >FAR  gives  40.E000
 452+ 6C78              //   1FFF >FAR  gives  40.FFFF
 453+ 6C78              //   2000 >FAR  gives  41.E000
 454+ 6C78              //   3FFF >FAR  gives  41.FFFF
 455+ 6C78              //   EFFF >FAR  gives  47.EFFF
 456+ 6C78              //   FFFF >FAR  gives  47.FFFF
 457+ 6C78                              New_Def TO_FAR, ">FAR", is_code, is_normal
 457+ 6C78             >
 457+ 6C78             >Dict_Ptr        defl    $
 457+ 6C78             >
 457+ 6C78             >//              ______________________________________________________________________
 457+ 6C78             >//              Heap part
 457+ 6C78             >
 457+ 6C78             >
 457+ 6C78             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E652             >
 457+ E652             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E652             >Latest_Definition defl  Heap_Ptr
 457+ E652             >
 457+ E652             >                // dummy db directives used to calculate length of namec
 457+ E652 3E 46 41 52 >                db      ">FAR"
 457+ E656             >len_NFA         defl    $ - temp_NFA
 457+ E656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E652             >
 457+ E652 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E653 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 457+ E657             >                org     $-1                 // alter last byte of Name just above to set
 457+ E656 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E657             >
 457+ E657 48 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E659             >Prev_Ptr        defl    Heap_Ptr
 457+ E659             >
 457+ E659             >mirror_Ptr      defl    $
 457+ E659             >
 457+ E659 7A 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E65B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E65B             >
 457+ E65B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E65B             >
 457+ E65B             >//              ______________________________________________________________________
 457+ E65B             >//              Dictionary part
 457+ E65B             >
 457+ E65B             >                org     Dict_Ptr
 457+ 6C78             >
 457+ 6C78 59 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6C7A             >
 457+ 6C7A             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6C7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6C7A ~           >
 457+ 6C7A ~           >
 457+ 6C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6C7A             >
 457+ 6C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6C7A E1                           pop     hl
 459+ 6C7B CD A1 64                     call    TO_FAR_rout
 460+ 6C7E E5                           push    hl
 461+ 6C7F 6F                           ld      l, a
 462+ 6C80 26 00                        ld      h, 0
 463+ 6C82 E5                           push    hl
 464+ 6C83                              next
 464+ 6C83 DD E9       >                jp      (ix)
 465+ 6C85
 466+ 6C85              //  ______________________________________________________________________
 467+ 6C85              //
 468+ 6C85              // <far         a n  -- ha
 469+ 6C85              // given an address E000-FFFF and a page number n (32-39 or 20h-27h)
 470+ 6C85              // reverse of >FAR: encodes a FAR address compressing
 471+ 6C85              // to bits 765 of H, lower bits of HL address offset from E000h
 472+ 6C85                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 472+ 6C85             >
 472+ 6C85             >Dict_Ptr        defl    $
 472+ 6C85             >
 472+ 6C85             >//              ______________________________________________________________________
 472+ 6C85             >//              Heap part
 472+ 6C85             >
 472+ 6C85             >
 472+ 6C85             >                org     (Heap_Ptr & $1FFF) + $E000
 472+ E65B             >
 472+ E65B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 472+ E65B             >Latest_Definition defl  Heap_Ptr
 472+ E65B             >
 472+ E65B             >                // dummy db directives used to calculate length of namec
 472+ E65B 3C 46 41 52 >                db      "<FAR"
 472+ E65F             >len_NFA         defl    $ - temp_NFA
 472+ E65F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 472+ E65B             >
 472+ E65B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 472+ E65C 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 472+ E660             >                org     $-1                 // alter last byte of Name just above to set
 472+ E65F D2          >                db      {b $} | END_BIT     // msb as name end
 472+ E660             >
 472+ E660 52 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 472+ E662             >Prev_Ptr        defl    Heap_Ptr
 472+ E662             >
 472+ E662             >mirror_Ptr      defl    $
 472+ E662             >
 472+ E662 87 6C       >                dw      Dict_Ptr + 2        // xt
 472+ E664             >Heap_Ptr        defl    $ - $E000           // save current HP
 472+ E664             >
 472+ E664             >Current_HP      defl  $ - $E000             // used to set HP once!
 472+ E664             >
 472+ E664             >//              ______________________________________________________________________
 472+ E664             >//              Dictionary part
 472+ E664             >
 472+ E664             >                org     Dict_Ptr
 472+ 6C85             >
 472+ 6C85 62 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 472+ 6C87             >
 472+ 6C87             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 472+ 6C87 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 472+ 6C87 ~           >
 472+ 6C87 ~           >
 472+ 6C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 472+ 6C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 472+ 6C87             >
 472+ 6C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 473+ 6C87 E1                           pop     hl                  // page number in l
 474+ 6C88 7D                           ld      a, l
 475+ 6C89 E6 07                        and     07
 476+ 6C8B 0F                           rrca
 477+ 6C8C 0F                           rrca
 478+ 6C8D 0F                           rrca
 479+ 6C8E 08                           ex      af, af
 480+ 6C8F E1                           pop     hl                  // address in hl
 481+ 6C90 7C                           ld      a, h
 482+ 6C91 E6 1F                        and     $1F
 483+ 6C93 67                           ld      h, a
 484+ 6C94 08                           ex      af, af
 485+ 6C95 B4                           or      h
 486+ 6C96 67                           ld      h, a
 487+ 6C97                              psh1
 487+ 6C97 E5          >                push    hl
 487+ 6C98 DD E9       >                jp      (ix)
 488+ 6C9A
 489+ 6C9A              //  ______________________________________________________________________
 490+ 6C9A              //
 491+ 6C9A              // ?IN_MMU7        a -- f
 492+ 6C9A              // check if address lies on MMU7
 493+ 6C9A              // tf is passed address is on MMU7
 494+ 6C9A                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 494+ 6C9A             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 494+ 6C9A             >
 494+ 6C9A             >Dict_Ptr        defl    $
 494+ 6C9A             >
 494+ 6C9A             >//              ______________________________________________________________________
 494+ 6C9A             >//              Heap part
 494+ 6C9A             >
 494+ 6C9A             >
 494+ 6C9A             >                org     (Heap_Ptr & $1FFF) + $E000
 494+ E664             >
 494+ E664             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 494+ E664             >Latest_Definition defl  Heap_Ptr
 494+ E664             >
 494+ E664             >                // dummy db directives used to calculate length of namec
 494+ E664 3F 49 4E 5F >                db      "?IN_MMU7"
 494+ E668 4D 4D 55 37 >
 494+ E66C             >len_NFA         defl    $ - temp_NFA
 494+ E66C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 494+ E664             >
 494+ E664 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 494+ E665 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 494+ E669 4D 4D 55 37 >
 494+ E66D             >                org     $-1                 // alter last byte of Name just above to set
 494+ E66C B7          >                db      {b $} | END_BIT     // msb as name end
 494+ E66D             >
 494+ E66D 5B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 494+ E66F             >Prev_Ptr        defl    Heap_Ptr
 494+ E66F             >
 494+ E66F             >mirror_Ptr      defl    $
 494+ E66F             >
 494+ E66F 9C 6C       >                dw      Dict_Ptr + 2        // xt
 494+ E671             >Heap_Ptr        defl    $ - $E000           // save current HP
 494+ E671             >
 494+ E671             >Current_HP      defl  $ - $E000             // used to set HP once!
 494+ E671             >
 494+ E671             >//              ______________________________________________________________________
 494+ E671             >//              Dictionary part
 494+ E671             >
 494+ E671             >                org     Dict_Ptr
 494+ 6C9A             >
 494+ 6C9A 6F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 494+ 6C9C             >
 494+ 6C9C             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 494+ 6C9C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 494+ 6C9F             >
 494+ 6C9F             >
 494+ 6C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 494+ 6C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 494+ 6C9F             >
 494+ 6C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 495+ 6C9F DC 68                        dw      DUP
 496+ 6CA1 A3 63 00 E0                  dw      LIT, $E000
 497+ 6CA5 B3 6B                        dw      ULESS
 498+ 6CA7 43 68                        dw      NOT_OP
 499+ 6CA9 11 68                        dw      EXIT
 500+ 6CAB
 501+ 6CAB              //  ______________________________________________________________________
 502+ 6CAB              //
 503+ 6CAB              // far          hp -- ha
 504+ 6CAB              // Convert an "heap-pointer address" (ha) into a real address (a)
 505+ 6CAB              // between E000h and FFFFh and fit the correct 8K page on MMU7
 506+ 6CAB              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 507+ 6CAB                              Colon_Def FAR, "FAR", is_normal
 507+ 6CAB             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 507+ 6CAB             >
 507+ 6CAB             >Dict_Ptr        defl    $
 507+ 6CAB             >
 507+ 6CAB             >//              ______________________________________________________________________
 507+ 6CAB             >//              Heap part
 507+ 6CAB             >
 507+ 6CAB             >
 507+ 6CAB             >                org     (Heap_Ptr & $1FFF) + $E000
 507+ E671             >
 507+ E671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ E671             >Latest_Definition defl  Heap_Ptr
 507+ E671             >
 507+ E671             >                // dummy db directives used to calculate length of namec
 507+ E671 46 41 52    >                db      "FAR"
 507+ E674             >len_NFA         defl    $ - temp_NFA
 507+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ E671             >
 507+ E671 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ E672 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 507+ E675             >                org     $-1                 // alter last byte of Name just above to set
 507+ E674 D2          >                db      {b $} | END_BIT     // msb as name end
 507+ E675             >
 507+ E675 64 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 507+ E677             >Prev_Ptr        defl    Heap_Ptr
 507+ E677             >
 507+ E677             >mirror_Ptr      defl    $
 507+ E677             >
 507+ E677 AD 6C       >                dw      Dict_Ptr + 2        // xt
 507+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 507+ E679             >
 507+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 507+ E679             >
 507+ E679             >//              ______________________________________________________________________
 507+ E679             >//              Dictionary part
 507+ E679             >
 507+ E679             >                org     Dict_Ptr
 507+ 6CAB             >
 507+ 6CAB 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 507+ 6CAD             >
 507+ 6CAD             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 6CAD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 6CB0             >
 507+ 6CB0             >
 507+ 6CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 6CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 6CB0             >
 507+ 6CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 6CB0 7A 6C                        dw      TO_FAR
 509+ 6CB2 71 6C                        dw      MMU7_STORE
 510+ 6CB4 11 68                        dw      EXIT
 511+ 6CB6
 512+ 6CB6              //  ______________________________________________________________________
 513+ 6CB6              //
 514+ 6CB6              // ?HEAP_PTR       n -- n f
 515+ 6CB6              // check if it's a non-zero heap-pointer or less than $6300
 516+ 6CB6              // tf if passed argument is an hp
 517+ 6CB6              // ff if passed argument isn't hp
 518+ 6CB6                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 518+ 6CB6             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 518+ 6CB6             >
 518+ 6CB6             >Dict_Ptr        defl    $
 518+ 6CB6             >
 518+ 6CB6             >//              ______________________________________________________________________
 518+ 6CB6             >//              Heap part
 518+ 6CB6             >
 518+ 6CB6             >
 518+ 6CB6             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E679             >
 518+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E679             >Latest_Definition defl  Heap_Ptr
 518+ E679             >
 518+ E679             >                // dummy db directives used to calculate length of namec
 518+ E679 3F 48 45 41 >                db      "?HEAP_PTR"
 518+ E67D 50 5F 50 54 >
 518+ E681 52          >
 518+ E682             >len_NFA         defl    $ - temp_NFA
 518+ E682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E679             >
 518+ E679 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E67A 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 518+ E67E 50 5F 50 54 >
 518+ E682 52          >
 518+ E683             >                org     $-1                 // alter last byte of Name just above to set
 518+ E682 D2          >                db      {b $} | END_BIT     // msb as name end
 518+ E683             >
 518+ E683 71 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E685             >Prev_Ptr        defl    Heap_Ptr
 518+ E685             >
 518+ E685             >mirror_Ptr      defl    $
 518+ E685             >
 518+ E685 B8 6C       >                dw      Dict_Ptr + 2        // xt
 518+ E687             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E687             >
 518+ E687             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E687             >
 518+ E687             >//              ______________________________________________________________________
 518+ E687             >//              Dictionary part
 518+ E687             >
 518+ E687             >                org     Dict_Ptr
 518+ 6CB6             >
 518+ 6CB6 85 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 6CB8             >
 518+ 6CB8             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6CB8 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 6CBB             >
 518+ 6CBB             >
 518+ 6CBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6CBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6CBB             >
 518+ 6CBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6CBB DC 68                        dw      DUP
 520+ 6CBD F3 63                        dw      ZBRANCH
 521+ 6CBF 08 00                        dw      QHeap_Skip - $
 522+ 6CC1 A3 63 00 63                  dw          LIT, $6300
 523+ 6CC5 B3 6B                        dw          ULESS
 524+ 6CC7              QHeap_Skip:                                          // endif
 525+ 6CC7 11 68                        dw      EXIT                        // ;
 526+ 6CC9
 527+ 6CC9              //  ______________________________________________________________________
 528+ 6CC9              //
 529+ 6CC9              // ?>heap       n1 -- n2
 530+ 6CC9              // heap correction: given an LFA check if it's a real address or a heap-pointer
 531+ 6CC9              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 532+ 6CC9              // and converted to heap address updating MMU7 via FAR
 533+ 6CC9                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 533+ 6CC9             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 533+ 6CC9             >
 533+ 6CC9             >Dict_Ptr        defl    $
 533+ 6CC9             >
 533+ 6CC9             >//              ______________________________________________________________________
 533+ 6CC9             >//              Heap part
 533+ 6CC9             >
 533+ 6CC9             >
 533+ 6CC9             >                org     (Heap_Ptr & $1FFF) + $E000
 533+ E687             >
 533+ E687             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ E687             >Latest_Definition defl  Heap_Ptr
 533+ E687             >
 533+ E687             >                // dummy db directives used to calculate length of namec
 533+ E687 3F 3E 48 45 >                db      "?>HEAP"
 533+ E68B 41 50       >
 533+ E68D             >len_NFA         defl    $ - temp_NFA
 533+ E68D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ E687             >
 533+ E687 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ E688 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 533+ E68C 41 50       >
 533+ E68E             >                org     $-1                 // alter last byte of Name just above to set
 533+ E68D D0          >                db      {b $} | END_BIT     // msb as name end
 533+ E68E             >
 533+ E68E 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 533+ E690             >Prev_Ptr        defl    Heap_Ptr
 533+ E690             >
 533+ E690             >mirror_Ptr      defl    $
 533+ E690             >
 533+ E690 CB 6C       >                dw      Dict_Ptr + 2        // xt
 533+ E692             >Heap_Ptr        defl    $ - $E000           // save current HP
 533+ E692             >
 533+ E692             >Current_HP      defl  $ - $E000             // used to set HP once!
 533+ E692             >
 533+ E692             >//              ______________________________________________________________________
 533+ E692             >//              Dictionary part
 533+ E692             >
 533+ E692             >                org     Dict_Ptr
 533+ 6CC9             >
 533+ 6CC9 90 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 533+ 6CCB             >
 533+ 6CCB             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 6CCB CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 6CCE             >
 533+ 6CCE             >
 533+ 6CCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 6CCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 6CCE             >
 533+ 6CCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 6CCE DC 68                        dw      DUP
 535+ 6CD0 B8 6C                        dw      QHEAPP
 536+ 6CD2 F3 63                        dw      ZBRANCH
 537+ 6CD4 04 00                        dw      Q2Heap_Skip - $
 538+ 6CD6 AD 6C                        dw          FAR
 539+ 6CD8              Q2Heap_Skip:                                          // endif
 540+ 6CD8 11 68                        dw      EXIT                        // ;
 541+ 6CDA
 542+ 6CDA              //  ______________________________________________________________________
 543+ 6CDA              //
 544+ 6CDA              // hp_fetch     -- a
 545+ 6CDA                              Colon_Def HP_FETCH, "HP@", is_normal
 545+ 6CDA             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 545+ 6CDA             >
 545+ 6CDA             >Dict_Ptr        defl    $
 545+ 6CDA             >
 545+ 6CDA             >//              ______________________________________________________________________
 545+ 6CDA             >//              Heap part
 545+ 6CDA             >
 545+ 6CDA             >
 545+ 6CDA             >                org     (Heap_Ptr & $1FFF) + $E000
 545+ E692             >
 545+ E692             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ E692             >Latest_Definition defl  Heap_Ptr
 545+ E692             >
 545+ E692             >                // dummy db directives used to calculate length of namec
 545+ E692 48 50 40    >                db      "HP@"
 545+ E695             >len_NFA         defl    $ - temp_NFA
 545+ E695             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ E692             >
 545+ E692 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ E693 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 545+ E696             >                org     $-1                 // alter last byte of Name just above to set
 545+ E695 C0          >                db      {b $} | END_BIT     // msb as name end
 545+ E696             >
 545+ E696 87 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 545+ E698             >Prev_Ptr        defl    Heap_Ptr
 545+ E698             >
 545+ E698             >mirror_Ptr      defl    $
 545+ E698             >
 545+ E698 DC 6C       >                dw      Dict_Ptr + 2        // xt
 545+ E69A             >Heap_Ptr        defl    $ - $E000           // save current HP
 545+ E69A             >
 545+ E69A             >Current_HP      defl  $ - $E000             // used to set HP once!
 545+ E69A             >
 545+ E69A             >//              ______________________________________________________________________
 545+ E69A             >//              Dictionary part
 545+ E69A             >
 545+ E69A             >                org     Dict_Ptr
 545+ 6CDA             >
 545+ 6CDA 98 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 545+ 6CDC             >
 545+ 6CDC             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 6CDC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 6CDF             >
 545+ 6CDF             >
 545+ 6CDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 6CDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 6CDF             >
 545+ 6CDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 6CDF CD 6A 46 69                  dw      HP, FETCH               // hp @
 547+ 6CE3 11 68                        dw      EXIT                    // ;
 548+ 6CE5
 549+ 6CE5              //  ______________________________________________________________________
 550+ 6CE5              //
 551+ 6CE5              // page-watermark   -- n
 552+ 6CE5              // how much a 8K page can be filled..
 553+ 6CE5                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 553+ 6CE5             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 553+ 6CE5             >
 553+ 6CE5             >Dict_Ptr        defl    $
 553+ 6CE5             >
 553+ 6CE5             >//              ______________________________________________________________________
 553+ 6CE5             >//              Heap part
 553+ 6CE5             >
 553+ 6CE5             >
 553+ 6CE5             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E69A             >
 553+ E69A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E69A             >Latest_Definition defl  Heap_Ptr
 553+ E69A             >
 553+ E69A             >                // dummy db directives used to calculate length of namec
 553+ E69A 50 41 47 45 >                db      "PAGE-WATERMARK"
 553+ E69E 2D 57 41 54 >
 553+ E6A2 45 52 4D 41 >
 553+ E6A6 52 4B       >
 553+ E6A8             >len_NFA         defl    $ - temp_NFA
 553+ E6A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E69A             >
 553+ E69A 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E69B 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 553+ E69F 2D 57 41 54 >
 553+ E6A3 45 52 4D 41 >
 553+ E6A7 52 4B       >
 553+ E6A9             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6A8 CB          >                db      {b $} | END_BIT     // msb as name end
 553+ E6A9             >
 553+ E6A9 92 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6AB             >Prev_Ptr        defl    Heap_Ptr
 553+ E6AB             >
 553+ E6AB             >mirror_Ptr      defl    $
 553+ E6AB             >
 553+ E6AB E7 6C       >                dw      Dict_Ptr + 2        // xt
 553+ E6AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6AD             >
 553+ E6AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6AD             >
 553+ E6AD             >//              ______________________________________________________________________
 553+ E6AD             >//              Dictionary part
 553+ E6AD             >
 553+ E6AD             >                org     Dict_Ptr
 553+ 6CE5             >
 553+ 6CE5 AB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6CE7             >
 553+ 6CE7             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6CE7 CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 553+ 6CEA             >
 553+ 6CEA             >
 553+ 6CEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6CEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6CEA             >
 553+ 6CEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 6CEA 80 1F       >                dw      $1F80
 554+ 6CEC
 555+ 6CEC              //  ______________________________________________________________________
 556+ 6CEC              //
 557+ 6CEC              // skip-hp-page ha -- a
 558+ 6CEC                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 558+ 6CEC             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 558+ 6CEC             >
 558+ 6CEC             >Dict_Ptr        defl    $
 558+ 6CEC             >
 558+ 6CEC             >//              ______________________________________________________________________
 558+ 6CEC             >//              Heap part
 558+ 6CEC             >
 558+ 6CEC             >
 558+ 6CEC             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ E6AD             >
 558+ E6AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ E6AD             >Latest_Definition defl  Heap_Ptr
 558+ E6AD             >
 558+ E6AD             >                // dummy db directives used to calculate length of namec
 558+ E6AD 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 558+ E6B1 2D 48 50 2D >
 558+ E6B5 50 41 47 45 >
 558+ E6B9             >len_NFA         defl    $ - temp_NFA
 558+ E6B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ E6AD             >
 558+ E6AD 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ E6AE 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 558+ E6B2 2D 48 50 2D >
 558+ E6B6 50 41 47 45 >
 558+ E6BA             >                org     $-1                 // alter last byte of Name just above to set
 558+ E6B9 C5          >                db      {b $} | END_BIT     // msb as name end
 558+ E6BA             >
 558+ E6BA 9A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ E6BC             >Prev_Ptr        defl    Heap_Ptr
 558+ E6BC             >
 558+ E6BC             >mirror_Ptr      defl    $
 558+ E6BC             >
 558+ E6BC EE 6C       >                dw      Dict_Ptr + 2        // xt
 558+ E6BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ E6BE             >
 558+ E6BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ E6BE             >
 558+ E6BE             >//              ______________________________________________________________________
 558+ E6BE             >//              Dictionary part
 558+ E6BE             >
 558+ E6BE             >                org     Dict_Ptr
 558+ 6CEC             >
 558+ 6CEC BC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 6CEE             >
 558+ 6CEE             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 6CEE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 6CF1             >
 558+ 6CF1             >
 558+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 6CF1             >
 558+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 6CF1 DC 6C                        dw      HP_FETCH                // hp@
 560+ 6CF3 A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 560+ 6CF7 D1 67
 561+ 6CF9 5E 68                        dw      PLUS
 562+ 6CFB E7 6C                        dw      PAGE_WATERMARK
 563+ 6CFD CE 6B                        dw      GREATER
 564+ 6CFF F3 63                        dw      ZBRANCH
 565+ 6D01 12 00                        dw      Skip_Skip - $   // if
 566+ 6D03 DC 6C                        dw      HP_FETCH
 567+ 6D05 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 567+ 6D09 E0 67
 568+ 6D0B 77 68 85 68                  dw      ONE_PLUS, TWO_PLUS
 569+ 6D0F CD 6A 50 69                  dw      HP, STORE
 570+ 6D13              Skip_Skip:
 571+ 6D13 11 68                        dw      EXIT                    // ;
 572+ 6D15              //  ______________________________________________________________________
 573+ 6D15              //
 574+ 6D15              // latest       -- nfa
 575+ 6D15                              Colon_Def LATEST, "LATEST", is_normal
 575+ 6D15             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 575+ 6D15             >
 575+ 6D15             >Dict_Ptr        defl    $
 575+ 6D15             >
 575+ 6D15             >//              ______________________________________________________________________
 575+ 6D15             >//              Heap part
 575+ 6D15             >
 575+ 6D15             >
 575+ 6D15             >                org     (Heap_Ptr & $1FFF) + $E000
 575+ E6BE             >
 575+ E6BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ E6BE             >Latest_Definition defl  Heap_Ptr
 575+ E6BE             >
 575+ E6BE             >                // dummy db directives used to calculate length of namec
 575+ E6BE 4C 41 54 45 >                db      "LATEST"
 575+ E6C2 53 54       >
 575+ E6C4             >len_NFA         defl    $ - temp_NFA
 575+ E6C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ E6BE             >
 575+ E6BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ E6BF 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 575+ E6C3 53 54       >
 575+ E6C5             >                org     $-1                 // alter last byte of Name just above to set
 575+ E6C4 D4          >                db      {b $} | END_BIT     // msb as name end
 575+ E6C5             >
 575+ E6C5 AD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 575+ E6C7             >Prev_Ptr        defl    Heap_Ptr
 575+ E6C7             >
 575+ E6C7             >mirror_Ptr      defl    $
 575+ E6C7             >
 575+ E6C7 17 6D       >                dw      Dict_Ptr + 2        // xt
 575+ E6C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 575+ E6C9             >
 575+ E6C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 575+ E6C9             >
 575+ E6C9             >//              ______________________________________________________________________
 575+ E6C9             >//              Dictionary part
 575+ E6C9             >
 575+ E6C9             >                org     Dict_Ptr
 575+ 6D15             >
 575+ 6D15 C7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 575+ 6D17             >
 575+ 6D17             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 6D17 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 6D1A             >
 575+ 6D1A             >
 575+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 6D1A             >
 575+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 6D1A FD 6A                        dw      CURRENT                 // current
 577+ 6D1C 46 69 46 69                  dw      FETCH, FETCH            // @ @
 578+ 6D20 AD 6C                        dw      FAR // Q TO HEAP
 579+ 6D22 11 68                        dw      EXIT                    // ;
 580+ 6D24
 581+ 6D24              //  ______________________________________________________________________
 582+ 6D24              //
 583+ 6D24              // >body        cfa -- pfa
 584+ 6D24                              Colon_Def TO_BODY, ">BODY", is_normal
 584+ 6D24             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 584+ 6D24             >
 584+ 6D24             >Dict_Ptr        defl    $
 584+ 6D24             >
 584+ 6D24             >//              ______________________________________________________________________
 584+ 6D24             >//              Heap part
 584+ 6D24             >
 584+ 6D24             >
 584+ 6D24             >                org     (Heap_Ptr & $1FFF) + $E000
 584+ E6C9             >
 584+ E6C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ E6C9             >Latest_Definition defl  Heap_Ptr
 584+ E6C9             >
 584+ E6C9             >                // dummy db directives used to calculate length of namec
 584+ E6C9 3E 42 4F 44 >                db      ">BODY"
 584+ E6CD 59          >
 584+ E6CE             >len_NFA         defl    $ - temp_NFA
 584+ E6CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ E6C9             >
 584+ E6C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ E6CA 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 584+ E6CE 59          >
 584+ E6CF             >                org     $-1                 // alter last byte of Name just above to set
 584+ E6CE D9          >                db      {b $} | END_BIT     // msb as name end
 584+ E6CF             >
 584+ E6CF BE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 584+ E6D1             >Prev_Ptr        defl    Heap_Ptr
 584+ E6D1             >
 584+ E6D1             >mirror_Ptr      defl    $
 584+ E6D1             >
 584+ E6D1 26 6D       >                dw      Dict_Ptr + 2        // xt
 584+ E6D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 584+ E6D3             >
 584+ E6D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 584+ E6D3             >
 584+ E6D3             >//              ______________________________________________________________________
 584+ E6D3             >//              Dictionary part
 584+ E6D3             >
 584+ E6D3             >                org     Dict_Ptr
 584+ 6D24             >
 584+ 6D24 D1 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 584+ 6D26             >
 584+ 6D26             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 6D26 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 6D29             >
 584+ 6D29             >
 584+ 6D29             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 6D29             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 6D29             >
 584+ 6D29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 6D29 4D 6A 5E 68                  dw      THREE, PLUS             // cell+ --> 3 +
 586+ 6D2D 11 68                        dw      EXIT                    // ;
 587+ 6D2F
 588+ 6D2F              //  ______________________________________________________________________
 589+ 6D2F              //
 590+ 6D2F              // <name        cfa -- nfa
 591+ 6D2F                              Colon_Def TO_NAME, "<NAME", is_normal
 591+ 6D2F             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 591+ 6D2F             >
 591+ 6D2F             >Dict_Ptr        defl    $
 591+ 6D2F             >
 591+ 6D2F             >//              ______________________________________________________________________
 591+ 6D2F             >//              Heap part
 591+ 6D2F             >
 591+ 6D2F             >
 591+ 6D2F             >                org     (Heap_Ptr & $1FFF) + $E000
 591+ E6D3             >
 591+ E6D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 591+ E6D3             >Latest_Definition defl  Heap_Ptr
 591+ E6D3             >
 591+ E6D3             >                // dummy db directives used to calculate length of namec
 591+ E6D3 3C 4E 41 4D >                db      "<NAME"
 591+ E6D7 45          >
 591+ E6D8             >len_NFA         defl    $ - temp_NFA
 591+ E6D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 591+ E6D3             >
 591+ E6D3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 591+ E6D4 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 591+ E6D8 45          >
 591+ E6D9             >                org     $-1                 // alter last byte of Name just above to set
 591+ E6D8 C5          >                db      {b $} | END_BIT     // msb as name end
 591+ E6D9             >
 591+ E6D9 C9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 591+ E6DB             >Prev_Ptr        defl    Heap_Ptr
 591+ E6DB             >
 591+ E6DB             >mirror_Ptr      defl    $
 591+ E6DB             >
 591+ E6DB 31 6D       >                dw      Dict_Ptr + 2        // xt
 591+ E6DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 591+ E6DD             >
 591+ E6DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 591+ E6DD             >
 591+ E6DD             >//              ______________________________________________________________________
 591+ E6DD             >//              Dictionary part
 591+ E6DD             >
 591+ E6DD             >                org     Dict_Ptr
 591+ 6D2F             >
 591+ 6D2F DB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 591+ 6D31             >
 591+ 6D31             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 591+ 6D31 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 591+ 6D34             >
 591+ 6D34             >
 591+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
 591+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
 591+ 6D34             >
 591+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 592+ 6D34 91 68                        dw      CELL_MINUS              // cell-
 593+ 6D36 DC 68 46 69                  dw      DUP, FETCH
 594+ 6D3A B8 6C                        dw      QHEAPP
 595+ 6D3C F3 63                        dw      ZBRANCH
 596+ 6D3E 08 00                        dw      ToName_Skip - $
 597+ 6D40 46 69 AD 6C                  dw          FETCH, FAR
 598+ 6D44 91 68                        dw          CELL_MINUS
 599+ 6D46              ToName_Skip:                                    // endif
 600+ 6D46
 601+ 6D46 7E 68                        dw      ONE_SUBTRACT            // 1-
 602+ 6D48 54 6A                        dw      NEG_ONE                 // -1
 603+ 6D4A 47 6C                        dw      TRAVERSE                // traverse
 604+ 6D4C 11 68                        dw      EXIT                    // ;
 605+ 6D4E
 606+ 6D4E              //  ______________________________________________________________________
 607+ 6D4E              //
 608+ 6D4E              // cfa          pfa -- cfa
 609+ 6D4E                              Colon_Def CFA, "CFA", is_normal
 609+ 6D4E             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 609+ 6D4E             >
 609+ 6D4E             >Dict_Ptr        defl    $
 609+ 6D4E             >
 609+ 6D4E             >//              ______________________________________________________________________
 609+ 6D4E             >//              Heap part
 609+ 6D4E             >
 609+ 6D4E             >
 609+ 6D4E             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6DD             >
 609+ E6DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6DD             >Latest_Definition defl  Heap_Ptr
 609+ E6DD             >
 609+ E6DD             >                // dummy db directives used to calculate length of namec
 609+ E6DD 43 46 41    >                db      "CFA"
 609+ E6E0             >len_NFA         defl    $ - temp_NFA
 609+ E6E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6DD             >
 609+ E6DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6DE 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 609+ E6E1             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6E0 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6E1             >
 609+ E6E1 D3 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6E3             >Prev_Ptr        defl    Heap_Ptr
 609+ E6E3             >
 609+ E6E3             >mirror_Ptr      defl    $
 609+ E6E3             >
 609+ E6E3 50 6D       >                dw      Dict_Ptr + 2        // xt
 609+ E6E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6E5             >
 609+ E6E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6E5             >
 609+ E6E5             >//              ______________________________________________________________________
 609+ E6E5             >//              Dictionary part
 609+ E6E5             >
 609+ E6E5             >                org     Dict_Ptr
 609+ 6D4E             >
 609+ 6D4E E3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6D50             >
 609+ 6D50             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6D50 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 6D53             >
 609+ 6D53             >
 609+ 6D53             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6D53             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6D53             >
 609+ 6D53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6D53 4D 6A 9C 6B                  dw      THREE, SUBTRACT         // 3 -
 611+ 6D57 11 68                        dw      EXIT                    // ;
 612+ 6D59
 613+ 6D59              //  ______________________________________________________________________
 614+ 6D59              //
 615+ 6D59              // nfa          pfa -- nfa
 616+ 6D59                              Colon_Def NFA, "NFA", is_normal
 616+ 6D59             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 616+ 6D59             >
 616+ 6D59             >Dict_Ptr        defl    $
 616+ 6D59             >
 616+ 6D59             >//              ______________________________________________________________________
 616+ 6D59             >//              Heap part
 616+ 6D59             >
 616+ 6D59             >
 616+ 6D59             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E6E5             >
 616+ E6E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E6E5             >Latest_Definition defl  Heap_Ptr
 616+ E6E5             >
 616+ E6E5             >                // dummy db directives used to calculate length of namec
 616+ E6E5 4E 46 41    >                db      "NFA"
 616+ E6E8             >len_NFA         defl    $ - temp_NFA
 616+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E6E5             >
 616+ E6E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E6E6 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 616+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 616+ E6E8 C1          >                db      {b $} | END_BIT     // msb as name end
 616+ E6E9             >
 616+ E6E9 DD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 616+ E6EB             >
 616+ E6EB             >mirror_Ptr      defl    $
 616+ E6EB             >
 616+ E6EB 5B 6D       >                dw      Dict_Ptr + 2        // xt
 616+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E6ED             >
 616+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E6ED             >
 616+ E6ED             >//              ______________________________________________________________________
 616+ E6ED             >//              Dictionary part
 616+ E6ED             >
 616+ E6ED             >                org     Dict_Ptr
 616+ 6D59             >
 616+ 6D59 EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 6D5B             >
 616+ 6D5B             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 6D5B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 6D5E             >
 616+ 6D5E             >
 616+ 6D5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 6D5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 6D5E             >
 616+ 6D5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 6D5E 50 6D                        dw      CFA                     // cfa
 618+ 6D60 31 6D                        dw      TO_NAME                 // traverse
 619+ 6D62 11 68                        dw      EXIT                    // ;
 620+ 6D64
 621+ 6D64              //  ______________________________________________________________________
 622+ 6D64              //
 623+ 6D64              // lfa          pfa -- lfa
 624+ 6D64                              Colon_Def LFA, "LFA", is_normal
 624+ 6D64             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 624+ 6D64             >
 624+ 6D64             >Dict_Ptr        defl    $
 624+ 6D64             >
 624+ 6D64             >//              ______________________________________________________________________
 624+ 6D64             >//              Heap part
 624+ 6D64             >
 624+ 6D64             >
 624+ 6D64             >                org     (Heap_Ptr & $1FFF) + $E000
 624+ E6ED             >
 624+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 624+ E6ED             >Latest_Definition defl  Heap_Ptr
 624+ E6ED             >
 624+ E6ED             >                // dummy db directives used to calculate length of namec
 624+ E6ED 4C 46 41    >                db      "LFA"
 624+ E6F0             >len_NFA         defl    $ - temp_NFA
 624+ E6F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 624+ E6ED             >
 624+ E6ED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 624+ E6EE 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 624+ E6F1             >                org     $-1                 // alter last byte of Name just above to set
 624+ E6F0 C1          >                db      {b $} | END_BIT     // msb as name end
 624+ E6F1             >
 624+ E6F1 E5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 624+ E6F3             >Prev_Ptr        defl    Heap_Ptr
 624+ E6F3             >
 624+ E6F3             >mirror_Ptr      defl    $
 624+ E6F3             >
 624+ E6F3 66 6D       >                dw      Dict_Ptr + 2        // xt
 624+ E6F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 624+ E6F5             >
 624+ E6F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 624+ E6F5             >
 624+ E6F5             >//              ______________________________________________________________________
 624+ E6F5             >//              Dictionary part
 624+ E6F5             >
 624+ E6F5             >                org     Dict_Ptr
 624+ 6D64             >
 624+ 6D64 F3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 624+ 6D66             >
 624+ 6D66             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 624+ 6D66 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 624+ 6D69             >
 624+ 6D69             >
 624+ 6D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 624+ 6D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 624+ 6D69             >
 624+ 6D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 625+ 6D69 5B 6D                        dw      NFA                     // nfa
 626+ 6D6B 3F 6A                        dw      ONE                     // 1
 627+ 6D6D 47 6C                        dw      TRAVERSE                // traverse
 628+ 6D6F 77 68                        dw      ONE_PLUS                // 1+
 629+ 6D71 11 68                        dw      EXIT                    // ;
 630+ 6D73
 631+ 6D73              //  ______________________________________________________________________
 632+ 6D73              //
 633+ 6D73              // pfa          nfa -- pfa
 634+ 6D73                              Colon_Def PFA, "PFA", is_normal
 634+ 6D73             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 634+ 6D73             >
 634+ 6D73             >Dict_Ptr        defl    $
 634+ 6D73             >
 634+ 6D73             >//              ______________________________________________________________________
 634+ 6D73             >//              Heap part
 634+ 6D73             >
 634+ 6D73             >
 634+ 6D73             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6F5             >
 634+ E6F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6F5             >Latest_Definition defl  Heap_Ptr
 634+ E6F5             >
 634+ E6F5             >                // dummy db directives used to calculate length of namec
 634+ E6F5 50 46 41    >                db      "PFA"
 634+ E6F8             >len_NFA         defl    $ - temp_NFA
 634+ E6F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6F5             >
 634+ E6F5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6F6 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 634+ E6F9             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6F8 C1          >                db      {b $} | END_BIT     // msb as name end
 634+ E6F9             >
 634+ E6F9 ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6FB             >Prev_Ptr        defl    Heap_Ptr
 634+ E6FB             >
 634+ E6FB             >mirror_Ptr      defl    $
 634+ E6FB             >
 634+ E6FB 75 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6FD             >
 634+ E6FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6FD             >
 634+ E6FD             >//              ______________________________________________________________________
 634+ E6FD             >//              Dictionary part
 634+ E6FD             >
 634+ E6FD             >                org     Dict_Ptr
 634+ 6D73             >
 634+ 6D73 FB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6D75             >
 634+ 6D75             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6D75 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6D78             >
 634+ 6D78             >
 634+ 6D78             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6D78             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6D78             >
 634+ 6D78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6D78 CB 6C                        dw      QTOHEAP
 636+ 6D7A 3F 6A                        dw      ONE                     // 1
 637+ 6D7C 47 6C                        dw      TRAVERSE                // traverse
 638+ 6D7E 77 68                        dw      ONE_PLUS                // 1+
 639+ 6D80 8D 68                        dw      CELL_PLUS               // cell+
 640+ 6D82 9C 6C                        dw      QMMU7
 641+ 6D84 F3 63                        dw      ZBRANCH
 642+ 6D86 0E 00                        dw      PFA_Skip - $
 643+ 6D88 64 6C                        dw          MMU7_FETCH
 644+ 6D8A 3F 6A 9C 6B                  dw          ONE, SUBTRACT
 645+ 6D8E F3 63                        dw          ZBRANCH
 646+ 6D90 04 00                        dw          PFA_Skip - $
 647+ 6D92 46 69                        dw              FETCH
 648+ 6D94              PFA_Skip:                                    // endif
 649+ 6D94 26 6D                        dw      TO_BODY                 // >body
 650+ 6D96 11 68                        dw      EXIT                    // ;
 651+ 6D98
 652+ 6D98              //  ______________________________________________________________________
 653+ 6D98              //
 654+ 6D98              // !csp         --
 655+ 6D98              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 656+ 6D98                              Colon_Def STORE_CSP, "!CSP", is_normal
 656+ 6D98             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 656+ 6D98             >
 656+ 6D98             >Dict_Ptr        defl    $
 656+ 6D98             >
 656+ 6D98             >//              ______________________________________________________________________
 656+ 6D98             >//              Heap part
 656+ 6D98             >
 656+ 6D98             >
 656+ 6D98             >                org     (Heap_Ptr & $1FFF) + $E000
 656+ E6FD             >
 656+ E6FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ E6FD             >Latest_Definition defl  Heap_Ptr
 656+ E6FD             >
 656+ E6FD             >                // dummy db directives used to calculate length of namec
 656+ E6FD 21 43 53 50 >                db      "!CSP"
 656+ E701             >len_NFA         defl    $ - temp_NFA
 656+ E701             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ E6FD             >
 656+ E6FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ E6FE 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 656+ E702             >                org     $-1                 // alter last byte of Name just above to set
 656+ E701 D0          >                db      {b $} | END_BIT     // msb as name end
 656+ E702             >
 656+ E702 F5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 656+ E704             >Prev_Ptr        defl    Heap_Ptr
 656+ E704             >
 656+ E704             >mirror_Ptr      defl    $
 656+ E704             >
 656+ E704 9A 6D       >                dw      Dict_Ptr + 2        // xt
 656+ E706             >Heap_Ptr        defl    $ - $E000           // save current HP
 656+ E706             >
 656+ E706             >Current_HP      defl  $ - $E000             // used to set HP once!
 656+ E706             >
 656+ E706             >//              ______________________________________________________________________
 656+ E706             >//              Dictionary part
 656+ E706             >
 656+ E706             >                org     Dict_Ptr
 656+ 6D98             >
 656+ 6D98 04 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 656+ 6D9A             >
 656+ 6D9A             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 6D9A CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 656+ 6D9D             >
 656+ 6D9D             >
 656+ 6D9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 6D9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 6D9D             >
 656+ 6D9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 6D9D F8 67                        dw      SPFETCH                 // sp@
 658+ 6D9F 1B 6B 50 69                  dw      CSP, STORE              // csp !
 659+ 6DA3 11 68                        dw      EXIT                    // ;
 660+ 6DA5
 661+ 6DA5              //  ______________________________________________________________________
 662+ 6DA5              //
 663+ 6DA5              // ?error       f n --
 664+ 6DA5              // raise error n if flag f it true
 665+ 6DA5                              Colon_Def QERROR, "?ERROR", is_normal
 665+ 6DA5             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 665+ 6DA5             >
 665+ 6DA5             >Dict_Ptr        defl    $
 665+ 6DA5             >
 665+ 6DA5             >//              ______________________________________________________________________
 665+ 6DA5             >//              Heap part
 665+ 6DA5             >
 665+ 6DA5             >
 665+ 6DA5             >                org     (Heap_Ptr & $1FFF) + $E000
 665+ E706             >
 665+ E706             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 665+ E706             >Latest_Definition defl  Heap_Ptr
 665+ E706             >
 665+ E706             >                // dummy db directives used to calculate length of namec
 665+ E706 3F 45 52 52 >                db      "?ERROR"
 665+ E70A 4F 52       >
 665+ E70C             >len_NFA         defl    $ - temp_NFA
 665+ E70C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 665+ E706             >
 665+ E706 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 665+ E707 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 665+ E70B 4F 52       >
 665+ E70D             >                org     $-1                 // alter last byte of Name just above to set
 665+ E70C D2          >                db      {b $} | END_BIT     // msb as name end
 665+ E70D             >
 665+ E70D FD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 665+ E70F             >Prev_Ptr        defl    Heap_Ptr
 665+ E70F             >
 665+ E70F             >mirror_Ptr      defl    $
 665+ E70F             >
 665+ E70F A7 6D       >                dw      Dict_Ptr + 2        // xt
 665+ E711             >Heap_Ptr        defl    $ - $E000           // save current HP
 665+ E711             >
 665+ E711             >Current_HP      defl  $ - $E000             // used to set HP once!
 665+ E711             >
 665+ E711             >//              ______________________________________________________________________
 665+ E711             >//              Dictionary part
 665+ E711             >
 665+ E711             >                org     Dict_Ptr
 665+ 6DA5             >
 665+ 6DA5 0F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 665+ 6DA7             >
 665+ 6DA7             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 665+ 6DA7 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 665+ 6DAA             >
 665+ 6DAA             >
 665+ 6DAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 665+ 6DAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 665+ 6DAA             >
 665+ 6DAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 666+ 6DAA D5 68                        dw      SWAP                    // swap
 667+ 6DAC                                                              // if
 668+ 6DAC F3 63                        dw      ZBRANCH
 669+ 6DAE 08 00                        dw      QError_Else - $
 670+ 6DB0 57 73                        dw          ERROR               //      error  ( is a forward-ref )
 671+ 6DB2                                                              // else
 672+ 6DB2 EF 63                        dw      BRANCH
 673+ 6DB4 04 00                        dw      QError_Endif - $
 674+ 6DB6              QError_Else:
 675+ 6DB6 C1 68                        dw          DROP                //      drop
 676+ 6DB8              QError_Endif:                                   // endif
 677+ 6DB8 11 68                        dw      EXIT                    // ;
 678+ 6DBA
 679+ 6DBA              //  ______________________________________________________________________
 680+ 6DBA              //
 681+ 6DBA              // ?comp       --
 682+ 6DBA              // raise msg #17 if not compiling
 683+ 6DBA                              Colon_Def QCOMP, "?COMP", is_normal
 683+ 6DBA             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 683+ 6DBA             >
 683+ 6DBA             >Dict_Ptr        defl    $
 683+ 6DBA             >
 683+ 6DBA             >//              ______________________________________________________________________
 683+ 6DBA             >//              Heap part
 683+ 6DBA             >
 683+ 6DBA             >
 683+ 6DBA             >                org     (Heap_Ptr & $1FFF) + $E000
 683+ E711             >
 683+ E711             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ E711             >Latest_Definition defl  Heap_Ptr
 683+ E711             >
 683+ E711             >                // dummy db directives used to calculate length of namec
 683+ E711 3F 43 4F 4D >                db      "?COMP"
 683+ E715 50          >
 683+ E716             >len_NFA         defl    $ - temp_NFA
 683+ E716             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ E711             >
 683+ E711 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ E712 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 683+ E716 50          >
 683+ E717             >                org     $-1                 // alter last byte of Name just above to set
 683+ E716 D0          >                db      {b $} | END_BIT     // msb as name end
 683+ E717             >
 683+ E717 06 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 683+ E719             >Prev_Ptr        defl    Heap_Ptr
 683+ E719             >
 683+ E719             >mirror_Ptr      defl    $
 683+ E719             >
 683+ E719 BC 6D       >                dw      Dict_Ptr + 2        // xt
 683+ E71B             >Heap_Ptr        defl    $ - $E000           // save current HP
 683+ E71B             >
 683+ E71B             >Current_HP      defl  $ - $E000             // used to set HP once!
 683+ E71B             >
 683+ E71B             >//              ______________________________________________________________________
 683+ E71B             >//              Dictionary part
 683+ E71B             >
 683+ E71B             >                org     Dict_Ptr
 683+ 6DBA             >
 683+ 6DBA 19 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 683+ 6DBC             >
 683+ 6DBC             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 6DBC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 6DBF             >
 683+ 6DBF             >
 683+ 6DBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 6DBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 6DBF             >
 683+ 6DBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 6DBF 03 6B 46 69                  dw      STATE, FETCH            // state @
 685+ 6DC3 36 68                        dw      ZEQUAL                  // 0=
 686+ 6DC5 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 687+ 6DC9 A7 6D                        dw      QERROR                  // ?error
 688+ 6DCB 11 68                        dw      EXIT                    // ;
 689+ 6DCD
 690+ 6DCD              //  ______________________________________________________________________
 691+ 6DCD              //
 692+ 6DCD              // ?exec       --
 693+ 6DCD              // raise msg #18 if compiling
 694+ 6DCD                              Colon_Def QEXEC, "?EXEC", is_normal
 694+ 6DCD             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 694+ 6DCD             >
 694+ 6DCD             >Dict_Ptr        defl    $
 694+ 6DCD             >
 694+ 6DCD             >//              ______________________________________________________________________
 694+ 6DCD             >//              Heap part
 694+ 6DCD             >
 694+ 6DCD             >
 694+ 6DCD             >                org     (Heap_Ptr & $1FFF) + $E000
 694+ E71B             >
 694+ E71B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ E71B             >Latest_Definition defl  Heap_Ptr
 694+ E71B             >
 694+ E71B             >                // dummy db directives used to calculate length of namec
 694+ E71B 3F 45 58 45 >                db      "?EXEC"
 694+ E71F 43          >
 694+ E720             >len_NFA         defl    $ - temp_NFA
 694+ E720             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ E71B             >
 694+ E71B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ E71C 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 694+ E720 43          >
 694+ E721             >                org     $-1                 // alter last byte of Name just above to set
 694+ E720 C3          >                db      {b $} | END_BIT     // msb as name end
 694+ E721             >
 694+ E721 11 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 694+ E723             >Prev_Ptr        defl    Heap_Ptr
 694+ E723             >
 694+ E723             >mirror_Ptr      defl    $
 694+ E723             >
 694+ E723 CF 6D       >                dw      Dict_Ptr + 2        // xt
 694+ E725             >Heap_Ptr        defl    $ - $E000           // save current HP
 694+ E725             >
 694+ E725             >Current_HP      defl  $ - $E000             // used to set HP once!
 694+ E725             >
 694+ E725             >//              ______________________________________________________________________
 694+ E725             >//              Dictionary part
 694+ E725             >
 694+ E725             >                org     Dict_Ptr
 694+ 6DCD             >
 694+ 6DCD 23 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 694+ 6DCF             >
 694+ 6DCF             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 6DCF CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 6DD2             >
 694+ 6DD2             >
 694+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 6DD2             >
 694+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 6DD2 03 6B 46 69                  dw      STATE, FETCH            // state @
 696+ 6DD6 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 697+ 6DDA A7 6D                        dw      QERROR                  // ?error
 698+ 6DDC 11 68                        dw      EXIT                    // ;
 699+ 6DDE
 700+ 6DDE              //  ______________________________________________________________________
 701+ 6DDE              //
 702+ 6DDE              // ?pairs       n1 n2 --
 703+ 6DDE              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 704+ 6DDE                              Colon_Def QPAIRS, "?PAIRS", is_normal
 704+ 6DDE             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 704+ 6DDE             >
 704+ 6DDE             >Dict_Ptr        defl    $
 704+ 6DDE             >
 704+ 6DDE             >//              ______________________________________________________________________
 704+ 6DDE             >//              Heap part
 704+ 6DDE             >
 704+ 6DDE             >
 704+ 6DDE             >                org     (Heap_Ptr & $1FFF) + $E000
 704+ E725             >
 704+ E725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ E725             >Latest_Definition defl  Heap_Ptr
 704+ E725             >
 704+ E725             >                // dummy db directives used to calculate length of namec
 704+ E725 3F 50 41 49 >                db      "?PAIRS"
 704+ E729 52 53       >
 704+ E72B             >len_NFA         defl    $ - temp_NFA
 704+ E72B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ E725             >
 704+ E725 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ E726 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 704+ E72A 52 53       >
 704+ E72C             >                org     $-1                 // alter last byte of Name just above to set
 704+ E72B D3          >                db      {b $} | END_BIT     // msb as name end
 704+ E72C             >
 704+ E72C 1B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 704+ E72E             >Prev_Ptr        defl    Heap_Ptr
 704+ E72E             >
 704+ E72E             >mirror_Ptr      defl    $
 704+ E72E             >
 704+ E72E E0 6D       >                dw      Dict_Ptr + 2        // xt
 704+ E730             >Heap_Ptr        defl    $ - $E000           // save current HP
 704+ E730             >
 704+ E730             >Current_HP      defl  $ - $E000             // used to set HP once!
 704+ E730             >
 704+ E730             >//              ______________________________________________________________________
 704+ E730             >//              Dictionary part
 704+ E730             >
 704+ E730             >                org     Dict_Ptr
 704+ 6DDE             >
 704+ 6DDE 2E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 704+ 6DE0             >
 704+ 6DE0             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 6DE0 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 6DE3             >
 704+ 6DE3             >
 704+ 6DE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 6DE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 6DE3             >
 704+ 6DE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 6DE3 9C 6B                        dw      SUBTRACT                // -
 706+ 6DE5 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 707+ 6DE9 A7 6D                        dw      QERROR                  // ?error
 708+ 6DEB 11 68                        dw      EXIT                    // ;
 709+ 6DED
 710+ 6DED              //  ______________________________________________________________________
 711+ 6DED              //
 712+ 6DED              // ?csp       --
 713+ 6DED              // raise msg #20 if surrent SP in not what previously saved in CSP.
 714+ 6DED              // Compiler relies on that for  syntax checking of structures
 715+ 6DED                              Colon_Def QCSP, "?CSP", is_normal
 715+ 6DED             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 715+ 6DED             >
 715+ 6DED             >Dict_Ptr        defl    $
 715+ 6DED             >
 715+ 6DED             >//              ______________________________________________________________________
 715+ 6DED             >//              Heap part
 715+ 6DED             >
 715+ 6DED             >
 715+ 6DED             >                org     (Heap_Ptr & $1FFF) + $E000
 715+ E730             >
 715+ E730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ E730             >Latest_Definition defl  Heap_Ptr
 715+ E730             >
 715+ E730             >                // dummy db directives used to calculate length of namec
 715+ E730 3F 43 53 50 >                db      "?CSP"
 715+ E734             >len_NFA         defl    $ - temp_NFA
 715+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ E730             >
 715+ E730 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ E731 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 715+ E735             >                org     $-1                 // alter last byte of Name just above to set
 715+ E734 D0          >                db      {b $} | END_BIT     // msb as name end
 715+ E735             >
 715+ E735 25 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 715+ E737             >Prev_Ptr        defl    Heap_Ptr
 715+ E737             >
 715+ E737             >mirror_Ptr      defl    $
 715+ E737             >
 715+ E737 EF 6D       >                dw      Dict_Ptr + 2        // xt
 715+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 715+ E739             >
 715+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 715+ E739             >
 715+ E739             >//              ______________________________________________________________________
 715+ E739             >//              Dictionary part
 715+ E739             >
 715+ E739             >                org     Dict_Ptr
 715+ 6DED             >
 715+ 6DED 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 715+ 6DEF             >
 715+ 6DEF             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 6DEF CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 6DF2             >
 715+ 6DF2             >
 715+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 6DF2             >
 715+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 6DF2 F8 67                        dw      SPFETCH                 // sp@
 717+ 6DF4 1B 6B 46 69                  dw      CSP, FETCH              // csp @
 718+ 6DF8 9C 6B                        dw      SUBTRACT                // -
 719+ 6DFA A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 720+ 6DFE A7 6D                        dw      QERROR                  // ?error
 721+ 6E00 11 68                        dw      EXIT                    // ;
 722+ 6E02
 723+ 6E02              //  ______________________________________________________________________
 724+ 6E02              //
 725+ 6E02              // ?loading      --
 726+ 6E02              // raise msg #22 if not loading
 727+ 6E02                              Colon_Def QLOADING, "?LOADING", is_normal
 727+ 6E02             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 727+ 6E02             >
 727+ 6E02             >Dict_Ptr        defl    $
 727+ 6E02             >
 727+ 6E02             >//              ______________________________________________________________________
 727+ 6E02             >//              Heap part
 727+ 6E02             >
 727+ 6E02             >
 727+ 6E02             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ E739             >
 727+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ E739             >Latest_Definition defl  Heap_Ptr
 727+ E739             >
 727+ E739             >                // dummy db directives used to calculate length of namec
 727+ E739 3F 4C 4F 41 >                db      "?LOADING"
 727+ E73D 44 49 4E 47 >
 727+ E741             >len_NFA         defl    $ - temp_NFA
 727+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ E739             >
 727+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ E73A 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 727+ E73E 44 49 4E 47 >
 727+ E742             >                org     $-1                 // alter last byte of Name just above to set
 727+ E741 C7          >                db      {b $} | END_BIT     // msb as name end
 727+ E742             >
 727+ E742 30 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ E744             >Prev_Ptr        defl    Heap_Ptr
 727+ E744             >
 727+ E744             >mirror_Ptr      defl    $
 727+ E744             >
 727+ E744 04 6E       >                dw      Dict_Ptr + 2        // xt
 727+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ E746             >
 727+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ E746             >
 727+ E746             >//              ______________________________________________________________________
 727+ E746             >//              Dictionary part
 727+ E746             >
 727+ E746             >                org     Dict_Ptr
 727+ 6E02             >
 727+ 6E02 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 6E04             >
 727+ 6E04             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 6E04 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 6E07             >
 727+ 6E07             >
 727+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 6E07             >
 727+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 6E07 D9 6A 46 69                  dw      BLK, FETCH              // blk @
 729+ 6E0B 36 68                        dw      ZEQUAL                  // 0=
 730+ 6E0D A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 731+ 6E11 A7 6D                        dw      QERROR                  // ?error
 732+ 6E13 11 68                        dw      EXIT                    // ;
 733+ 6E15
 734+ 6E15              //  ______________________________________________________________________
 735+ 6E15              //
 736+ 6E15              // compile      --
 737+ 6E15              // compiles the following word
 738+ 6E15                              Colon_Def COMPILE, "COMPILE", is_normal
 738+ 6E15             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 738+ 6E15             >
 738+ 6E15             >Dict_Ptr        defl    $
 738+ 6E15             >
 738+ 6E15             >//              ______________________________________________________________________
 738+ 6E15             >//              Heap part
 738+ 6E15             >
 738+ 6E15             >
 738+ 6E15             >                org     (Heap_Ptr & $1FFF) + $E000
 738+ E746             >
 738+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ E746             >Latest_Definition defl  Heap_Ptr
 738+ E746             >
 738+ E746             >                // dummy db directives used to calculate length of namec
 738+ E746 43 4F 4D 50 >                db      "COMPILE"
 738+ E74A 49 4C 45    >
 738+ E74D             >len_NFA         defl    $ - temp_NFA
 738+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ E746             >
 738+ E746 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ E747 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 738+ E74B 49 4C 45    >
 738+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 738+ E74D C5          >                db      {b $} | END_BIT     // msb as name end
 738+ E74E             >
 738+ E74E 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 738+ E750             >Prev_Ptr        defl    Heap_Ptr
 738+ E750             >
 738+ E750             >mirror_Ptr      defl    $
 738+ E750             >
 738+ E750 17 6E       >                dw      Dict_Ptr + 2        // xt
 738+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 738+ E752             >
 738+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 738+ E752             >
 738+ E752             >//              ______________________________________________________________________
 738+ E752             >//              Dictionary part
 738+ E752             >
 738+ E752             >                org     Dict_Ptr
 738+ 6E15             >
 738+ 6E15 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 738+ 6E17             >
 738+ 6E17             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 6E17 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 738+ 6E1A             >
 738+ 6E1A             >
 738+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6E1A             >
 738+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6E1A BC 6D                        dw      QCOMP                   // ?comp
 740+ 6E1C 26 68                        dw      R_TO                    // r>
 741+ 6E1E DC 68 8D 68                  dw      DUP, CELL_PLUS          // dup, cell+
 742+ 6E22 1B 68                        dw      TO_R                    // >r
 743+ 6E24 46 69 73 6B                  dw      FETCH, COMMA            // @ ,
 744+ 6E28 11 68                        dw      EXIT                    // ;
 745+ 6E2A
 746+ 6E2A              //  ______________________________________________________________________
 747+ 6E2A              //
 748+ 6E2A              // compile,     --
 749+ 6E2A              // compiles the following word
 750+ 6E2A                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 750+ 6E2A             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 750+ 6E2A             >
 750+ 6E2A             >Dict_Ptr        defl    $
 750+ 6E2A             >
 750+ 6E2A             >//              ______________________________________________________________________
 750+ 6E2A             >//              Heap part
 750+ 6E2A             >
 750+ 6E2A             >
 750+ 6E2A             >                org     (Heap_Ptr & $1FFF) + $E000
 750+ E752             >
 750+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 750+ E752             >Latest_Definition defl  Heap_Ptr
 750+ E752             >
 750+ E752             >                // dummy db directives used to calculate length of namec
 750+ E752 43 4F 4D 50 >                db      "COMPILE,"
 750+ E756 49 4C 45 2C >
 750+ E75A             >len_NFA         defl    $ - temp_NFA
 750+ E75A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 750+ E752             >
 750+ E752 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 750+ E753 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 750+ E757 49 4C 45 2C >
 750+ E75B             >                org     $-1                 // alter last byte of Name just above to set
 750+ E75A AC          >                db      {b $} | END_BIT     // msb as name end
 750+ E75B             >
 750+ E75B 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 750+ E75D             >Prev_Ptr        defl    Heap_Ptr
 750+ E75D             >
 750+ E75D             >mirror_Ptr      defl    $
 750+ E75D             >
 750+ E75D 2C 6E       >                dw      Dict_Ptr + 2        // xt
 750+ E75F             >Heap_Ptr        defl    $ - $E000           // save current HP
 750+ E75F             >
 750+ E75F             >Current_HP      defl  $ - $E000             // used to set HP once!
 750+ E75F             >
 750+ E75F             >//              ______________________________________________________________________
 750+ E75F             >//              Dictionary part
 750+ E75F             >
 750+ E75F             >                org     Dict_Ptr
 750+ 6E2A             >
 750+ 6E2A 5D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 750+ 6E2C             >
 750+ 6E2C             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 750+ 6E2C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 750+ 6E2F             >
 750+ 6E2F             >
 750+ 6E2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 750+ 6E2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 750+ 6E2F             >
 750+ 6E2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 751+ 6E2F              //              dw      QCOMP                   // ?comp
 752+ 6E2F 73 6B                        dw      COMMA                   // ,
 753+ 6E31 11 68                        dw      EXIT                    // ;
 754+ 6E33
 755+ 6E33              //  ______________________________________________________________________
 756+ 6E33              //
 757+ 6E33              // [            --
 758+ 6E33              // stop compilation
 759+ 6E33                              Colon_Def SQUARED_OPEN, "[", is_immediate
 759+ 6E33             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 759+ 6E33             >
 759+ 6E33             >Dict_Ptr        defl    $
 759+ 6E33             >
 759+ 6E33             >//              ______________________________________________________________________
 759+ 6E33             >//              Heap part
 759+ 6E33             >
 759+ 6E33             >
 759+ 6E33             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ E75F             >
 759+ E75F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ E75F             >Latest_Definition defl  Heap_Ptr
 759+ E75F             >
 759+ E75F             >                // dummy db directives used to calculate length of namec
 759+ E75F 5B          >                db      "["
 759+ E760             >len_NFA         defl    $ - temp_NFA
 759+ E760             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ E75F             >
 759+ E75F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ E760 5B          >                db      "["               // name string in 7-bit ascii, but
 759+ E761             >                org     $-1                 // alter last byte of Name just above to set
 759+ E760 DB          >                db      {b $} | END_BIT     // msb as name end
 759+ E761             >
 759+ E761 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ E763             >Prev_Ptr        defl    Heap_Ptr
 759+ E763             >
 759+ E763             >mirror_Ptr      defl    $
 759+ E763             >
 759+ E763 35 6E       >                dw      Dict_Ptr + 2        // xt
 759+ E765             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ E765             >
 759+ E765             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ E765             >
 759+ E765             >//              ______________________________________________________________________
 759+ E765             >//              Dictionary part
 759+ E765             >
 759+ E765             >                org     Dict_Ptr
 759+ 6E33             >
 759+ 6E33 63 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 6E35             >
 759+ 6E35             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 6E35 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 6E38             >
 759+ 6E38             >
 759+ 6E38             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 6E38             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 6E38             >
 759+ 6E38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 6E38 38 6A                        dw      ZERO                    // 0
 761+ 6E3A 03 6B 50 69                  dw      STATE, STORE            // state !
 762+ 6E3E 11 68                        dw      EXIT                    // ; immediate
 763+ 6E40
 764+ 6E40              //  ______________________________________________________________________
 765+ 6E40              //
 766+ 6E40              // ]            --
 767+ 6E40              // start compilation
 768+ 6E40                              Colon_Def SQUARED_CLOSE, "]", is_normal
 768+ 6E40             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 768+ 6E40             >
 768+ 6E40             >Dict_Ptr        defl    $
 768+ 6E40             >
 768+ 6E40             >//              ______________________________________________________________________
 768+ 6E40             >//              Heap part
 768+ 6E40             >
 768+ 6E40             >
 768+ 6E40             >                org     (Heap_Ptr & $1FFF) + $E000
 768+ E765             >
 768+ E765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ E765             >Latest_Definition defl  Heap_Ptr
 768+ E765             >
 768+ E765             >                // dummy db directives used to calculate length of namec
 768+ E765 5D          >                db      "]"
 768+ E766             >len_NFA         defl    $ - temp_NFA
 768+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ E765             >
 768+ E765 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ E766 5D          >                db      "]"               // name string in 7-bit ascii, but
 768+ E767             >                org     $-1                 // alter last byte of Name just above to set
 768+ E766 DD          >                db      {b $} | END_BIT     // msb as name end
 768+ E767             >
 768+ E767 5F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 768+ E769             >Prev_Ptr        defl    Heap_Ptr
 768+ E769             >
 768+ E769             >mirror_Ptr      defl    $
 768+ E769             >
 768+ E769 42 6E       >                dw      Dict_Ptr + 2        // xt
 768+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 768+ E76B             >
 768+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 768+ E76B             >
 768+ E76B             >//              ______________________________________________________________________
 768+ E76B             >//              Dictionary part
 768+ E76B             >
 768+ E76B             >                org     Dict_Ptr
 768+ 6E40             >
 768+ 6E40 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 768+ 6E42             >
 768+ 6E42             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 6E42 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 6E45             >
 768+ 6E45             >
 768+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 6E45             >
 768+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 6E45 A3 63 C0 00                  dw      LIT, $C0                // 192
 770+ 6E49 03 6B 50 69                  dw      STATE, STORE            // state !
 771+ 6E4D 11 68                        dw      EXIT                    // ;
 772+ 6E4F
 773+ 6E4F              //  ______________________________________________________________________
 774+ 6E4F              //
 775+ 6E4F              // smudge       --
 776+ 6E4F              // toggle smudge bit of latest definition
 777+ 6E4F                              Colon_Def SMUDGE, "SMUDGE", is_normal
 777+ 6E4F             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 777+ 6E4F             >
 777+ 6E4F             >Dict_Ptr        defl    $
 777+ 6E4F             >
 777+ 6E4F             >//              ______________________________________________________________________
 777+ 6E4F             >//              Heap part
 777+ 6E4F             >
 777+ 6E4F             >
 777+ 6E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 777+ E76B             >
 777+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ E76B             >Latest_Definition defl  Heap_Ptr
 777+ E76B             >
 777+ E76B             >                // dummy db directives used to calculate length of namec
 777+ E76B 53 4D 55 44 >                db      "SMUDGE"
 777+ E76F 47 45       >
 777+ E771             >len_NFA         defl    $ - temp_NFA
 777+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ E76B             >
 777+ E76B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ E76C 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 777+ E770 47 45       >
 777+ E772             >                org     $-1                 // alter last byte of Name just above to set
 777+ E771 C5          >                db      {b $} | END_BIT     // msb as name end
 777+ E772             >
 777+ E772 65 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 777+ E774             >Prev_Ptr        defl    Heap_Ptr
 777+ E774             >
 777+ E774             >mirror_Ptr      defl    $
 777+ E774             >
 777+ E774 51 6E       >                dw      Dict_Ptr + 2        // xt
 777+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 777+ E776             >
 777+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 777+ E776             >
 777+ E776             >//              ______________________________________________________________________
 777+ E776             >//              Dictionary part
 777+ E776             >
 777+ E776             >                org     Dict_Ptr
 777+ 6E4F             >
 777+ 6E4F 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 777+ 6E51             >
 777+ 6E51             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 6E51 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 6E54             >
 777+ 6E54             >
 777+ 6E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 6E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 6E54             >
 777+ 6E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 6E54 17 6D                        dw      LATEST                  // latest
 779+ 6E56 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 780+ 6E5A 3D 69                        dw      TOGGLE                  // toggle
 781+ 6E5C 11 68                        dw      EXIT                    // ;
 782+ 6E5E
 783+ 6E5E              //  ______________________________________________________________________
 784+ 6E5E              //
 785+ 6E5E              // immediate    --
 786+ 6E5E              // make immediate the latest definition
 787+ 6E5E                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 787+ 6E5E             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 787+ 6E5E             >
 787+ 6E5E             >Dict_Ptr        defl    $
 787+ 6E5E             >
 787+ 6E5E             >//              ______________________________________________________________________
 787+ 6E5E             >//              Heap part
 787+ 6E5E             >
 787+ 6E5E             >
 787+ 6E5E             >                org     (Heap_Ptr & $1FFF) + $E000
 787+ E776             >
 787+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ E776             >Latest_Definition defl  Heap_Ptr
 787+ E776             >
 787+ E776             >                // dummy db directives used to calculate length of namec
 787+ E776 49 4D 4D 45 >                db      "IMMEDIATE"
 787+ E77A 44 49 41 54 >
 787+ E77E 45          >
 787+ E77F             >len_NFA         defl    $ - temp_NFA
 787+ E77F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ E776             >
 787+ E776 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ E777 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 787+ E77B 44 49 41 54 >
 787+ E77F 45          >
 787+ E780             >                org     $-1                 // alter last byte of Name just above to set
 787+ E77F C5          >                db      {b $} | END_BIT     // msb as name end
 787+ E780             >
 787+ E780 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 787+ E782             >Prev_Ptr        defl    Heap_Ptr
 787+ E782             >
 787+ E782             >mirror_Ptr      defl    $
 787+ E782             >
 787+ E782 60 6E       >                dw      Dict_Ptr + 2        // xt
 787+ E784             >Heap_Ptr        defl    $ - $E000           // save current HP
 787+ E784             >
 787+ E784             >Current_HP      defl  $ - $E000             // used to set HP once!
 787+ E784             >
 787+ E784             >//              ______________________________________________________________________
 787+ E784             >//              Dictionary part
 787+ E784             >
 787+ E784             >                org     Dict_Ptr
 787+ 6E5E             >
 787+ 6E5E 82 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 787+ 6E60             >
 787+ 6E60             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 6E60 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 6E63             >
 787+ 6E63             >
 787+ 6E63             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 6E63             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 6E63             >
 787+ 6E63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 6E63 17 6D                        dw      LATEST                  // latest
 789+ 6E65 A3 63 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 790+ 6E69 3D 69                        dw      TOGGLE                  // toggle
 791+ 6E6B 11 68                        dw      EXIT                    // ;
 792+ 6E6D
 793+ 6E6D              //  ______________________________________________________________________
 794+ 6E6D              //
 795+ 6E6D              // hex          --
 796+ 6E6D              // change numeration base
 797+ 6E6D                              Colon_Def HEX, "HEX", is_normal
 797+ 6E6D             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 797+ 6E6D             >
 797+ 6E6D             >Dict_Ptr        defl    $
 797+ 6E6D             >
 797+ 6E6D             >//              ______________________________________________________________________
 797+ 6E6D             >//              Heap part
 797+ 6E6D             >
 797+ 6E6D             >
 797+ 6E6D             >                org     (Heap_Ptr & $1FFF) + $E000
 797+ E784             >
 797+ E784             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 797+ E784             >Latest_Definition defl  Heap_Ptr
 797+ E784             >
 797+ E784             >                // dummy db directives used to calculate length of namec
 797+ E784 48 45 58    >                db      "HEX"
 797+ E787             >len_NFA         defl    $ - temp_NFA
 797+ E787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 797+ E784             >
 797+ E784 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 797+ E785 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 797+ E788             >                org     $-1                 // alter last byte of Name just above to set
 797+ E787 D8          >                db      {b $} | END_BIT     // msb as name end
 797+ E788             >
 797+ E788 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 797+ E78A             >Prev_Ptr        defl    Heap_Ptr
 797+ E78A             >
 797+ E78A             >mirror_Ptr      defl    $
 797+ E78A             >
 797+ E78A 6F 6E       >                dw      Dict_Ptr + 2        // xt
 797+ E78C             >Heap_Ptr        defl    $ - $E000           // save current HP
 797+ E78C             >
 797+ E78C             >Current_HP      defl  $ - $E000             // used to set HP once!
 797+ E78C             >
 797+ E78C             >//              ______________________________________________________________________
 797+ E78C             >//              Dictionary part
 797+ E78C             >
 797+ E78C             >                org     Dict_Ptr
 797+ 6E6D             >
 797+ 6E6D 8A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 797+ 6E6F             >
 797+ 6E6F             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 797+ 6E6F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 797+ 6E72             >
 797+ 6E72             >
 797+ 6E72             >                endif           ; ok        // for other definitions it "points" the correct handler
 797+ 6E72             >                // Use of "; ok" to suppress "warning[fwdref]"
 797+ 6E72             >
 797+ 6E72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 798+ 6E72 A3 63 10 00                  dw      LIT, 16                 // 16
 799+ 6E76 09 6B 50 69                  dw      BASE, STORE             // base !
 800+ 6E7A 11 68                        dw      EXIT                    // ;
 801+ 6E7C
 802+ 6E7C              //  ______________________________________________________________________
 803+ 6E7C              //
 804+ 6E7C              // decimal      --
 805+ 6E7C              // change numeration base
 806+ 6E7C                              Colon_Def DECIMAL, "DECIMAL", is_normal
 806+ 6E7C             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 806+ 6E7C             >
 806+ 6E7C             >Dict_Ptr        defl    $
 806+ 6E7C             >
 806+ 6E7C             >//              ______________________________________________________________________
 806+ 6E7C             >//              Heap part
 806+ 6E7C             >
 806+ 6E7C             >
 806+ 6E7C             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E78C             >
 806+ E78C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E78C             >Latest_Definition defl  Heap_Ptr
 806+ E78C             >
 806+ E78C             >                // dummy db directives used to calculate length of namec
 806+ E78C 44 45 43 49 >                db      "DECIMAL"
 806+ E790 4D 41 4C    >
 806+ E793             >len_NFA         defl    $ - temp_NFA
 806+ E793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E78C             >
 806+ E78C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E78D 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 806+ E791 4D 41 4C    >
 806+ E794             >                org     $-1                 // alter last byte of Name just above to set
 806+ E793 CC          >                db      {b $} | END_BIT     // msb as name end
 806+ E794             >
 806+ E794 84 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E796             >Prev_Ptr        defl    Heap_Ptr
 806+ E796             >
 806+ E796             >mirror_Ptr      defl    $
 806+ E796             >
 806+ E796 7E 6E       >                dw      Dict_Ptr + 2        // xt
 806+ E798             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E798             >
 806+ E798             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E798             >
 806+ E798             >//              ______________________________________________________________________
 806+ E798             >//              Dictionary part
 806+ E798             >
 806+ E798             >                org     Dict_Ptr
 806+ 6E7C             >
 806+ 6E7C 96 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 6E7E             >
 806+ 6E7E             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 6E7E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 806+ 6E81             >
 806+ 6E81             >
 806+ 6E81             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 6E81             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 6E81             >
 806+ 6E81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 6E81 A3 63 0A 00                  dw      LIT, 10                 // 10
 808+ 6E85 09 6B 50 69                  dw      BASE, STORE             // base !
 809+ 6E89 11 68                        dw      EXIT                    // ;
 810+ 6E8B
 811+ 6E8B              //  ______________________________________________________________________
 812+ 6E8B              //
 813+ 6E8B              // (;code)       --
 814+ 6E8B              // patch to CFA to call/jump to the "following code"
 815+ 6E8B                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 815+ 6E8B             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 815+ 6E8B             >
 815+ 6E8B             >Dict_Ptr        defl    $
 815+ 6E8B             >
 815+ 6E8B             >//              ______________________________________________________________________
 815+ 6E8B             >//              Heap part
 815+ 6E8B             >
 815+ 6E8B             >
 815+ 6E8B             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E798             >
 815+ E798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E798             >Latest_Definition defl  Heap_Ptr
 815+ E798             >
 815+ E798             >                // dummy db directives used to calculate length of namec
 815+ E798 28 3B 43 4F >                db      "(;CODE)"
 815+ E79C 44 45 29    >
 815+ E79F             >len_NFA         defl    $ - temp_NFA
 815+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E798             >
 815+ E798 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E799 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 815+ E79D 44 45 29    >
 815+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
 815+ E79F A9          >                db      {b $} | END_BIT     // msb as name end
 815+ E7A0             >
 815+ E7A0 8C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E7A2             >Prev_Ptr        defl    Heap_Ptr
 815+ E7A2             >
 815+ E7A2             >mirror_Ptr      defl    $
 815+ E7A2             >
 815+ E7A2 8D 6E       >                dw      Dict_Ptr + 2        // xt
 815+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E7A4             >
 815+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E7A4             >
 815+ E7A4             >//              ______________________________________________________________________
 815+ E7A4             >//              Dictionary part
 815+ E7A4             >
 815+ E7A4             >                org     Dict_Ptr
 815+ 6E8B             >
 815+ 6E8B A2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 6E8D             >
 815+ 6E8D             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 6E8D CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 6E90             >
 815+ 6E90             >
 815+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 6E90             >
 815+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 6E90 26 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 817+ 6E92 17 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 818+ 6E94 75 6D 50 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 819+ 6E98
 820+ 6E98 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 821+ 6E9C B8 68 64 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 822+ 6EA0 77 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 823+ 6EA2
 824+ 6EA2 50 69                        dw      STORE                   // !
 825+ 6EA4 11 68                        dw      EXIT                    // ;
 826+ 6EA6
 827+ 6EA6              //  ______________________________________________________________________
 828+ 6EA6              //
 829+ 6EA6              // ;code        --
 830+ 6EA6                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 830+ 6EA6             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 830+ 6EA6             >
 830+ 6EA6             >Dict_Ptr        defl    $
 830+ 6EA6             >
 830+ 6EA6             >//              ______________________________________________________________________
 830+ 6EA6             >//              Heap part
 830+ 6EA6             >
 830+ 6EA6             >
 830+ 6EA6             >                org     (Heap_Ptr & $1FFF) + $E000
 830+ E7A4             >
 830+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ E7A4             >Latest_Definition defl  Heap_Ptr
 830+ E7A4             >
 830+ E7A4             >                // dummy db directives used to calculate length of namec
 830+ E7A4 3B 43 4F 44 >                db      ";CODE"
 830+ E7A8 45          >
 830+ E7A9             >len_NFA         defl    $ - temp_NFA
 830+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ E7A4             >
 830+ E7A4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ E7A5 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 830+ E7A9 45          >
 830+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 830+ E7A9 C5          >                db      {b $} | END_BIT     // msb as name end
 830+ E7AA             >
 830+ E7AA 98 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 830+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 830+ E7AC             >
 830+ E7AC             >mirror_Ptr      defl    $
 830+ E7AC             >
 830+ E7AC A8 6E       >                dw      Dict_Ptr + 2        // xt
 830+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 830+ E7AE             >
 830+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 830+ E7AE             >
 830+ E7AE             >//              ______________________________________________________________________
 830+ E7AE             >//              Dictionary part
 830+ E7AE             >
 830+ E7AE             >                org     Dict_Ptr
 830+ 6EA6             >
 830+ 6EA6 AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 830+ 6EA8             >
 830+ 6EA8             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 6EA8 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 830+ 6EAB             >
 830+ 6EAB             >
 830+ 6EAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 6EAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 6EAB             >
 830+ 6EAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 6EAB EF 6D                        dw      QCSP                    // ?csp
 832+ 6EAD 17 6E                        dw      COMPILE                 // compile
 833+ 6EAF 8D 6E                        dw      C_SEMICOLON_CODE        // (;code)
 834+ 6EB1 35 6E                        dw      SQUARED_OPEN            // [
 835+ 6EB3 FF 69                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 836+ 6EB5 11 68                        dw      EXIT                    // ; immediate
 837+ 6EB7
 838+ 6EB7              //  ______________________________________________________________________
 839+ 6EB7              //
 840+ 6EB7              // recurse      --
 841+ 6EB7              //              Colon_Def RECURSE, "RECURSE", is_immediate
 842+ 6EB7              //              dw      QCOMP                   // ?comp
 843+ 6EB7              //              dw      LATEST                  // latest
 844+ 6EB7              //              dw      PFA, CFA                // pfa cfa
 845+ 6EB7              //              dw      COMMA                   // ,
 846+ 6EB7              //              dw      EXIT                    // ; immediate
 847+ 6EB7
 848+ 6EB7              //  ______________________________________________________________________
 849+ 6EB7              //
 850+ 6EB7              // <builds     --
 851+ 6EB7                              Colon_Def CBUILDS, "<BUILDS", is_normal
 851+ 6EB7             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 851+ 6EB7             >
 851+ 6EB7             >Dict_Ptr        defl    $
 851+ 6EB7             >
 851+ 6EB7             >//              ______________________________________________________________________
 851+ 6EB7             >//              Heap part
 851+ 6EB7             >
 851+ 6EB7             >
 851+ 6EB7             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ E7AE             >
 851+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ E7AE             >Latest_Definition defl  Heap_Ptr
 851+ E7AE             >
 851+ E7AE             >                // dummy db directives used to calculate length of namec
 851+ E7AE 3C 42 55 49 >                db      "<BUILDS"
 851+ E7B2 4C 44 53    >
 851+ E7B5             >len_NFA         defl    $ - temp_NFA
 851+ E7B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ E7AE             >
 851+ E7AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ E7AF 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 851+ E7B3 4C 44 53    >
 851+ E7B6             >                org     $-1                 // alter last byte of Name just above to set
 851+ E7B5 D3          >                db      {b $} | END_BIT     // msb as name end
 851+ E7B6             >
 851+ E7B6 A4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ E7B8             >Prev_Ptr        defl    Heap_Ptr
 851+ E7B8             >
 851+ E7B8             >mirror_Ptr      defl    $
 851+ E7B8             >
 851+ E7B8 B9 6E       >                dw      Dict_Ptr + 2        // xt
 851+ E7BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ E7BA             >
 851+ E7BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ E7BA             >
 851+ E7BA             >//              ______________________________________________________________________
 851+ E7BA             >//              Dictionary part
 851+ E7BA             >
 851+ E7BA             >                org     Dict_Ptr
 851+ 6EB7             >
 851+ 6EB7 B8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 6EB9             >
 851+ 6EB9             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 6EB9 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 6EBC             >
 851+ 6EBC             >
 851+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 6EBC             >
 851+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 6EBC 33 74                        dw      CREATE                  // CREATE
 853+ 6EBE 11 68                        dw      EXIT                    // ;
 854+ 6EC0
 855+ 6EC0              //  ______________________________________________________________________
 856+ 6EC0              //
 857+ 6EC0              // _does>_     --
 858+ 6EC0                              Colon_Def C_DOES, "_DOES>_", is_normal
 858+ 6EC0             >                New_Def  C_DOES, "_DOES>_", Enter_Ptr, is_normal ; ok
 858+ 6EC0             >
 858+ 6EC0             >Dict_Ptr        defl    $
 858+ 6EC0             >
 858+ 6EC0             >//              ______________________________________________________________________
 858+ 6EC0             >//              Heap part
 858+ 6EC0             >
 858+ 6EC0             >
 858+ 6EC0             >                org     (Heap_Ptr & $1FFF) + $E000
 858+ E7BA             >
 858+ E7BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ E7BA             >Latest_Definition defl  Heap_Ptr
 858+ E7BA             >
 858+ E7BA             >                // dummy db directives used to calculate length of namec
 858+ E7BA 5F 44 4F 45 >                db      "_DOES>_"
 858+ E7BE 53 3E 5F    >
 858+ E7C1             >len_NFA         defl    $ - temp_NFA
 858+ E7C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ E7BA             >
 858+ E7BA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ E7BB 5F 44 4F 45 >                db      "_DOES>_"               // name string in 7-bit ascii, but
 858+ E7BF 53 3E 5F    >
 858+ E7C2             >                org     $-1                 // alter last byte of Name just above to set
 858+ E7C1 DF          >                db      {b $} | END_BIT     // msb as name end
 858+ E7C2             >
 858+ E7C2 AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 858+ E7C4             >Prev_Ptr        defl    Heap_Ptr
 858+ E7C4             >
 858+ E7C4             >mirror_Ptr      defl    $
 858+ E7C4             >
 858+ E7C4 C2 6E       >                dw      Dict_Ptr + 2        // xt
 858+ E7C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 858+ E7C6             >
 858+ E7C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 858+ E7C6             >
 858+ E7C6             >//              ______________________________________________________________________
 858+ E7C6             >//              Dictionary part
 858+ E7C6             >
 858+ E7C6             >                org     Dict_Ptr
 858+ 6EC0             >
 858+ 6EC0 C4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 858+ 6EC2             >
 858+ 6EC2             >C_DOES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 6EC2 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 6EC5             >
 858+ 6EC5             >
 858+ 6EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6EC5             >
 858+ 6EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6EC5 26 68                        dw      R_TO                    // r>
 860+ 6EC7 17 6D                        dw      LATEST                  // latest
 861+ 6EC9 75 6D                        dw      PFA                     // pfa
 862+ 6ECB 50 6D 77 68                  dw      CFA, ONE_PLUS           // cfa 1+
 863+ 6ECF 50 69                        dw      STORE                   // !
 864+ 6ED1 11 68                        dw      EXIT                    // ;
 865+ 6ED3
 866+ 6ED3              //  ______________________________________________________________________
 867+ 6ED3              //
 868+ 6ED3              // does>     --
 869+ 6ED3                              Colon_Def DOES_TO, "DOES>", is_immediate
 869+ 6ED3             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_immediate ; ok
 869+ 6ED3             >
 869+ 6ED3             >Dict_Ptr        defl    $
 869+ 6ED3             >
 869+ 6ED3             >//              ______________________________________________________________________
 869+ 6ED3             >//              Heap part
 869+ 6ED3             >
 869+ 6ED3             >
 869+ 6ED3             >                org     (Heap_Ptr & $1FFF) + $E000
 869+ E7C6             >
 869+ E7C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ E7C6             >Latest_Definition defl  Heap_Ptr
 869+ E7C6             >
 869+ E7C6             >                // dummy db directives used to calculate length of namec
 869+ E7C6 44 4F 45 53 >                db      "DOES>"
 869+ E7CA 3E          >
 869+ E7CB             >len_NFA         defl    $ - temp_NFA
 869+ E7CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ E7C6             >
 869+ E7C6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ E7C7 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 869+ E7CB 3E          >
 869+ E7CC             >                org     $-1                 // alter last byte of Name just above to set
 869+ E7CB BE          >                db      {b $} | END_BIT     // msb as name end
 869+ E7CC             >
 869+ E7CC BA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 869+ E7CE             >Prev_Ptr        defl    Heap_Ptr
 869+ E7CE             >
 869+ E7CE             >mirror_Ptr      defl    $
 869+ E7CE             >
 869+ E7CE D5 6E       >                dw      Dict_Ptr + 2        // xt
 869+ E7D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 869+ E7D0             >
 869+ E7D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 869+ E7D0             >
 869+ E7D0             >//              ______________________________________________________________________
 869+ E7D0             >//              Dictionary part
 869+ E7D0             >
 869+ E7D0             >                org     Dict_Ptr
 869+ 6ED3             >
 869+ 6ED3 CE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 869+ 6ED5             >
 869+ 6ED5             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 6ED5 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 6ED8             >
 869+ 6ED8             >
 869+ 6ED8             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 6ED8             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 6ED8             >
 869+ 6ED8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 6ED8 17 6E C2 6E                  dw      COMPILE,  C_DOES
 871+ 6EDC A3 63 CD 00                  dw      LIT, $CD, CCOMMA
 871+ 6EE0 82 6B
 872+ 6EE2 A3 63 E3 69                  dw      LIT, Enter_Ptr, COMMA
 872+ 6EE6 73 6B
 873+ 6EE8 11 68                        dw      EXIT
 874+ 6EEA
 875+ 6EEA              //  ______________________________________________________________________
 876+ 6EEA              //
 877+ 6EEA              // count        a -- a2 n
 878+ 6EEA              // expects a counted string at address a, returns string address and counter
 879+ 6EEA                              New_Def COUNT, "COUNT", is_code, is_normal
 879+ 6EEA             >
 879+ 6EEA             >Dict_Ptr        defl    $
 879+ 6EEA             >
 879+ 6EEA             >//              ______________________________________________________________________
 879+ 6EEA             >//              Heap part
 879+ 6EEA             >
 879+ 6EEA             >
 879+ 6EEA             >                org     (Heap_Ptr & $1FFF) + $E000
 879+ E7D0             >
 879+ E7D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ E7D0             >Latest_Definition defl  Heap_Ptr
 879+ E7D0             >
 879+ E7D0             >                // dummy db directives used to calculate length of namec
 879+ E7D0 43 4F 55 4E >                db      "COUNT"
 879+ E7D4 54          >
 879+ E7D5             >len_NFA         defl    $ - temp_NFA
 879+ E7D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ E7D0             >
 879+ E7D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ E7D1 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 879+ E7D5 54          >
 879+ E7D6             >                org     $-1                 // alter last byte of Name just above to set
 879+ E7D5 D4          >                db      {b $} | END_BIT     // msb as name end
 879+ E7D6             >
 879+ E7D6 C6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 879+ E7D8             >Prev_Ptr        defl    Heap_Ptr
 879+ E7D8             >
 879+ E7D8             >mirror_Ptr      defl    $
 879+ E7D8             >
 879+ E7D8 EC 6E       >                dw      Dict_Ptr + 2        // xt
 879+ E7DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 879+ E7DA             >
 879+ E7DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 879+ E7DA             >
 879+ E7DA             >//              ______________________________________________________________________
 879+ E7DA             >//              Dictionary part
 879+ E7DA             >
 879+ E7DA             >                org     Dict_Ptr
 879+ 6EEA             >
 879+ 6EEA D8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 879+ 6EEC             >
 879+ 6EEC             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 6EEC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 879+ 6EEC ~           >
 879+ 6EEC ~           >
 879+ 6EEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 6EEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 6EEC             >
 879+ 6EEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 6EEC D9                           exx
 881+ 6EED E1                           pop     hl
 882+ 6EEE 5E                           ld      e, (hl)
 883+ 6EEF 16 00                        ld      d, 0
 884+ 6EF1 23                           inc     hl
 885+ 6EF2              Count_Here:
 886+ 6EF2 E5                           push    hl
 887+ 6EF3 D5                           push    de
 888+ 6EF4 D9                           exx
 889+ 6EF5                              next
 889+ 6EF5 DD E9       >                jp      (ix)
 890+ 6EF7              //                pop     hl
 891+ 6EF7              //                ld      a, (hl)
 892+ 6EF7              //                inc     hl
 893+ 6EF7              //                push    hl
 894+ 6EF7              //                ld      h, 0
 895+ 6EF7              //                ld      l, a
 896+ 6EF7              //                push    hl
 897+ 6EF7              //                next
 898+ 6EF7
 899+ 6EF7              //  ______________________________________________________________________
 900+ 6EF7              //
 901+ 6EF7              // bounds       a n -- a+n n
 902+ 6EF7              // given an address and a length ( a n ) calculate the bound addresses
 903+ 6EF7              // suitable for DO-LOOP
 904+ 6EF7                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 904+ 6EF7             >
 904+ 6EF7             >Dict_Ptr        defl    $
 904+ 6EF7             >
 904+ 6EF7             >//              ______________________________________________________________________
 904+ 6EF7             >//              Heap part
 904+ 6EF7             >
 904+ 6EF7             >
 904+ 6EF7             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E7DA             >
 904+ E7DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E7DA             >Latest_Definition defl  Heap_Ptr
 904+ E7DA             >
 904+ E7DA             >                // dummy db directives used to calculate length of namec
 904+ E7DA 42 4F 55 4E >                db      "BOUNDS"
 904+ E7DE 44 53       >
 904+ E7E0             >len_NFA         defl    $ - temp_NFA
 904+ E7E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E7DA             >
 904+ E7DA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E7DB 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 904+ E7DF 44 53       >
 904+ E7E1             >                org     $-1                 // alter last byte of Name just above to set
 904+ E7E0 D3          >                db      {b $} | END_BIT     // msb as name end
 904+ E7E1             >
 904+ E7E1 D0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E7E3             >Prev_Ptr        defl    Heap_Ptr
 904+ E7E3             >
 904+ E7E3             >mirror_Ptr      defl    $
 904+ E7E3             >
 904+ E7E3 F9 6E       >                dw      Dict_Ptr + 2        // xt
 904+ E7E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E7E5             >
 904+ E7E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E7E5             >
 904+ E7E5             >//              ______________________________________________________________________
 904+ E7E5             >//              Dictionary part
 904+ E7E5             >
 904+ E7E5             >                org     Dict_Ptr
 904+ 6EF7             >
 904+ 6EF7 E3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 6EF9             >
 904+ 6EF9             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 6EF9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 904+ 6EF9 ~           >
 904+ 6EF9 ~           >
 904+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 6EF9             >
 904+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 6EF9 D9                           exx
 906+ 6EFA E1                           pop     hl
 907+ 6EFB D1                           pop     de
 908+ 6EFC 19                           add     hl, de
 909+ 6EFD 18 F3                        jr      Count_Here
 910+ 6EFF                              // push    hl
 911+ 6EFF                              // push    de
 912+ 6EFF                              // exx
 913+ 6EFF                              // next
 914+ 6EFF
 915+ 6EFF              //  ______________________________________________________________________
 916+ 6EFF              //
 917+ 6EFF              // leave        --
 918+ 6EFF              // Compile (leave) to leave current LOOP and jump just after it
 919+ 6EFF                              Colon_Def LEAVE, "LEAVE", is_immediate
 919+ 6EFF             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 919+ 6EFF             >
 919+ 6EFF             >Dict_Ptr        defl    $
 919+ 6EFF             >
 919+ 6EFF             >//              ______________________________________________________________________
 919+ 6EFF             >//              Heap part
 919+ 6EFF             >
 919+ 6EFF             >
 919+ 6EFF             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ E7E5             >
 919+ E7E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ E7E5             >Latest_Definition defl  Heap_Ptr
 919+ E7E5             >
 919+ E7E5             >                // dummy db directives used to calculate length of namec
 919+ E7E5 4C 45 41 56 >                db      "LEAVE"
 919+ E7E9 45          >
 919+ E7EA             >len_NFA         defl    $ - temp_NFA
 919+ E7EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ E7E5             >
 919+ E7E5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ E7E6 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 919+ E7EA 45          >
 919+ E7EB             >                org     $-1                 // alter last byte of Name just above to set
 919+ E7EA C5          >                db      {b $} | END_BIT     // msb as name end
 919+ E7EB             >
 919+ E7EB DA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 919+ E7ED             >Prev_Ptr        defl    Heap_Ptr
 919+ E7ED             >
 919+ E7ED             >mirror_Ptr      defl    $
 919+ E7ED             >
 919+ E7ED 01 6F       >                dw      Dict_Ptr + 2        // xt
 919+ E7EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ E7EF             >
 919+ E7EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ E7EF             >
 919+ E7EF             >//              ______________________________________________________________________
 919+ E7EF             >//              Dictionary part
 919+ E7EF             >
 919+ E7EF             >                org     Dict_Ptr
 919+ 6EFF             >
 919+ 6EFF ED 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 919+ 6F01             >
 919+ 6F01             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 6F01 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 6F04             >
 919+ 6F04             >
 919+ 6F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 6F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 6F04             >
 919+ 6F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 6F04 17 6E FC 63                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 921+ 6F08 5D 6B 1B 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 921+ 6F0C 38 6A 73 6B
 922+ 6F10 38 6A 38 6A                  dw      ZERO, ZERO
 923+ 6F14 F8 67 DC 68                  dw      SPFETCH, DUP
 924+ 6F18 8D 68 8D 68                  dw      CELL_PLUS, CELL_PLUS
 925+ 6F1C CC 68                        dw      TUCK
 926+ 6F1E 1B 6B 46 69                  dw      CSP, FETCH
 927+ 6F22 D5 68 9C 6B                  dw      SWAP, SUBTRACT
 928+ 6F26 56 67                        dw      CMOVE
 929+ 6F28 1B 6B 46 69                  dw      CSP, FETCH, CELL_MINUS
 929+ 6F2C 91 68
 930+ 6F2E 26 68 B8 68                  dw      R_TO, OVER, STORE
 930+ 6F32 50 69
 931+ 6F34 91 68 38 6A                  dw      CELL_MINUS, ZERO
 932+ 6F38 D5 68 50 69                  dw      SWAP, STORE
 933+ 6F3C 11 68                        dw      EXIT                    // ;
 934+ 6F3E
 935+ 6F3E              //  ______________________________________________________________________
 936+ 6F3E              //
 937+ 6F3E              // curs         a n --
 938+ 6F3E              // Sends to current output channel n characters starting at address a.
 939+ 6F3E                              Colon_Def CURS, "CURS", is_normal
 939+ 6F3E             >                New_Def  CURS, "CURS", Enter_Ptr, is_normal ; ok
 939+ 6F3E             >
 939+ 6F3E             >Dict_Ptr        defl    $
 939+ 6F3E             >
 939+ 6F3E             >//              ______________________________________________________________________
 939+ 6F3E             >//              Heap part
 939+ 6F3E             >
 939+ 6F3E             >
 939+ 6F3E             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ E7EF             >
 939+ E7EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ E7EF             >Latest_Definition defl  Heap_Ptr
 939+ E7EF             >
 939+ E7EF             >                // dummy db directives used to calculate length of namec
 939+ E7EF 43 55 52 53 >                db      "CURS"
 939+ E7F3             >len_NFA         defl    $ - temp_NFA
 939+ E7F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ E7EF             >
 939+ E7EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ E7F0 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 939+ E7F4             >                org     $-1                 // alter last byte of Name just above to set
 939+ E7F3 D3          >                db      {b $} | END_BIT     // msb as name end
 939+ E7F4             >
 939+ E7F4 E5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ E7F6             >Prev_Ptr        defl    Heap_Ptr
 939+ E7F6             >
 939+ E7F6             >mirror_Ptr      defl    $
 939+ E7F6             >
 939+ E7F6 40 6F       >                dw      Dict_Ptr + 2        // xt
 939+ E7F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ E7F8             >
 939+ E7F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ E7F8             >
 939+ E7F8             >//              ______________________________________________________________________
 939+ E7F8             >//              Dictionary part
 939+ E7F8             >
 939+ E7F8             >                org     Dict_Ptr
 939+ 6F3E             >
 939+ 6F3E F6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 6F40             >
 939+ 6F40             >CURS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 6F40 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 6F43             >
 939+ 6F43             >
 939+ 6F43             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 6F43             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 6F43             >
 939+ 6F43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 6F43
 941+ 6F43 46 6A 84 66                  dw      TWO, SELECT                 //    2 select
 942+ 6F47 A3 63 3B 5C                  dw      LIT, $5C3B, CFETCH          //    $5c3b c@     \ : res 5, (iy + 1)
 942+ 6F4B 5B 69
 943+ 6F4D A3 63 DF 00                  dw      LIT, $DF, AND_OP            //    $DF and      \ FLAGS
 943+ 6F51 D1 67
 944+ 6F53 A3 63 3B 5C                  dw      LIT, $5C3B, CSTORE          //    $5c3b c!
 944+ 6F57 64 69
 945+ 6F59              Curs_Loop:                                          //  begin
 946+ 6F59 37 66                        dw      ONE_FRAME
 947+ 6F5B A3 63 28 00                  dw      LIT, $28, PLUS_ORIGIN       //    $28 +origin
 947+ 6F5F 7E 6A
 948+ 6F61 A3 63 78 5C                  dw      LIT, $5C78, CFETCH          //    $5c78 c@     \ FRAMES
 948+ 6F65 5B 69
 949+ 6F67 A3 63 20 00                  dw      LIT, $20, AND_OP            //    $20 and
 949+ 6F6B D1 67
 950+ 6F6D F3 63                        dw      ZBRANCH                     //    if
 951+ 6F6F 16 00                        dw      Curs_endif - $
 952+ 6F71 77 68                        dw          ONE_PLUS                //      1+
 953+ 6F73 A3 63 6A 5C                  dw          LIT, $5C6A, CFETCH      //      $5c6a c@   \ FLAGS2
 953+ 6F77 5B 69
 954+ 6F79 A3 63 08 00                  dw          LIT, $08, AND_OP        //      8 and
 954+ 6F7D D1 67
 955+ 6F7F F3 63                        dw          ZBRANCH                 //      if
 956+ 6F81 04 00                        dw          Curs_endif - $
 957+ 6F83 77 68                        dw              ONE_PLUS            //        1+
 958+ 6F85              Curs_endif:
 959+ 6F85 5B 69 18 6C                  dw      CFETCH, EMIT                //    c@ emit
 960+ 6F89 A3 63 08 00                  dw      LIT, 8, EMIT                //    8 emit
 960+ 6F8D 18 6C
 961+ 6F8F A3 63 3B 5C                  dw      LIT, $5C3B, CFETCH          //    $5c3b c@
 961+ 6F93 5B 69
 962+ 6F95 A3 63 20 00                  dw      LIT, $20, AND_OP            //    $20 and \ bit 5, (iy + 1)
 962+ 6F99 D1 67
 963+ 6F9B                                                                  //  until
 964+ 6F9B F3 63                        dw      ZBRANCH                     //
 965+ 6F9D BC FF                        dw      Curs_Loop - $               //
 966+ 6F9F 37 66                        dw      ONE_FRAME
 967+ 6FA1
 968+ 6FA1 2F 6C                        dw      SPACE                       //  space
 969+ 6FA3 A3 63 08 00                  dw      LIT, 8, EMIT                //  8 emit
 969+ 6FA7 18 6C
 970+ 6FA9 11 68                        dw      EXIT                        // ;
 971+ 6FAB
 972+ 6FAB              //  ______________________________________________________________________
 973+ 6FAB              //
 974+ 6FAB              // type         a n --
 975+ 6FAB              // Sends to current output channel n characters starting at address a.
 976+ 6FAB                              Colon_Def TYPE, "TYPE", is_normal
 976+ 6FAB             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 976+ 6FAB             >
 976+ 6FAB             >Dict_Ptr        defl    $
 976+ 6FAB             >
 976+ 6FAB             >//              ______________________________________________________________________
 976+ 6FAB             >//              Heap part
 976+ 6FAB             >
 976+ 6FAB             >
 976+ 6FAB             >                org     (Heap_Ptr & $1FFF) + $E000
 976+ E7F8             >
 976+ E7F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ E7F8             >Latest_Definition defl  Heap_Ptr
 976+ E7F8             >
 976+ E7F8             >                // dummy db directives used to calculate length of namec
 976+ E7F8 54 59 50 45 >                db      "TYPE"
 976+ E7FC             >len_NFA         defl    $ - temp_NFA
 976+ E7FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ E7F8             >
 976+ E7F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ E7F9 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 976+ E7FD             >                org     $-1                 // alter last byte of Name just above to set
 976+ E7FC C5          >                db      {b $} | END_BIT     // msb as name end
 976+ E7FD             >
 976+ E7FD EF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 976+ E7FF             >Prev_Ptr        defl    Heap_Ptr
 976+ E7FF             >
 976+ E7FF             >mirror_Ptr      defl    $
 976+ E7FF             >
 976+ E7FF AD 6F       >                dw      Dict_Ptr + 2        // xt
 976+ E801             >Heap_Ptr        defl    $ - $E000           // save current HP
 976+ E801             >
 976+ E801             >Current_HP      defl  $ - $E000             // used to set HP once!
 976+ E801             >
 976+ E801             >//              ______________________________________________________________________
 976+ E801             >//              Dictionary part
 976+ E801             >
 976+ E801             >                org     Dict_Ptr
 976+ 6FAB             >
 976+ 6FAB FF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 976+ 6FAD             >
 976+ 6FAD             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 6FAD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 6FB0             >
 976+ 6FB0             >
 976+ 6FB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 6FB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 6FB0             >
 976+ 6FB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 6FB0 F9 6E                        dw      BOUNDS                  // bounds
 978+ 6FB2 06 64                        dw      C_Q_DO                  // ?do
 979+ 6FB4 0C 00                        dw      Type_Skip - $
 980+ 6FB6              Type_Loop:
 981+ 6FB6 32 64 5B 69                  dw          I, CFETCH           //      i c@
 982+ 6FBA 18 6C                        dw          EMIT                //      emit
 983+ 6FBC E7 63                        dw      C_LOOP                  // loop
 984+ 6FBE F8 FF                        dw      Type_Loop - $
 985+ 6FC0              Type_Skip:
 986+ 6FC0 11 68                        dw      EXIT                    // ;
 987+ 6FC2
 988+ 6FC2              //  ______________________________________________________________________
 989+ 6FC2              //
 990+ 6FC2              // -trailing    a n1 -- a n2
 991+ 6FC2              // Assumes that an n1 bytes-long string is stored at address a
 992+ 6FC2              // and the string contains a space delimited word,
 993+ 6FC2              // Finds n2 as the position of the first character after the word.
 994+ 6FC2                              Colon_Def LTRAILING, "-TRAILING", is_normal
 994+ 6FC2             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 994+ 6FC2             >
 994+ 6FC2             >Dict_Ptr        defl    $
 994+ 6FC2             >
 994+ 6FC2             >//              ______________________________________________________________________
 994+ 6FC2             >//              Heap part
 994+ 6FC2             >
 994+ 6FC2             >
 994+ 6FC2             >                org     (Heap_Ptr & $1FFF) + $E000
 994+ E801             >
 994+ E801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ E801             >Latest_Definition defl  Heap_Ptr
 994+ E801             >
 994+ E801             >                // dummy db directives used to calculate length of namec
 994+ E801 2D 54 52 41 >                db      "-TRAILING"
 994+ E805 49 4C 49 4E >
 994+ E809 47          >
 994+ E80A             >len_NFA         defl    $ - temp_NFA
 994+ E80A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ E801             >
 994+ E801 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ E802 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 994+ E806 49 4C 49 4E >
 994+ E80A 47          >
 994+ E80B             >                org     $-1                 // alter last byte of Name just above to set
 994+ E80A C7          >                db      {b $} | END_BIT     // msb as name end
 994+ E80B             >
 994+ E80B F8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 994+ E80D             >Prev_Ptr        defl    Heap_Ptr
 994+ E80D             >
 994+ E80D             >mirror_Ptr      defl    $
 994+ E80D             >
 994+ E80D C4 6F       >                dw      Dict_Ptr + 2        // xt
 994+ E80F             >Heap_Ptr        defl    $ - $E000           // save current HP
 994+ E80F             >
 994+ E80F             >Current_HP      defl  $ - $E000             // used to set HP once!
 994+ E80F             >
 994+ E80F             >//              ______________________________________________________________________
 994+ E80F             >//              Dictionary part
 994+ E80F             >
 994+ E80F             >                org     Dict_Ptr
 994+ 6FC2             >
 994+ 6FC2 0D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
 994+ 6FC4             >
 994+ 6FC4             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 6FC4 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 6FC7             >
 994+ 6FC7             >
 994+ 6FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 6FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 6FC7             >
 994+ 6FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 6FC7 DC 68 38 6A                  dw      DUP, ZERO               // dup 0
 996+ 6FCB                                                              // do
 997+ 6FCB 06 64                        dw      C_Q_DO
 998+ 6FCD 20 00                        dw      LTrailing_Leave - $
 999+ 6FCF              LTrailing_Loop:
1000+ 6FCF 24 69 5E 68                  dw          TWO_DUP, PLUS       //      2dup +
1001+ 6FD3 7E 68                        dw          ONE_SUBTRACT        //      1-
1002+ 6FD5 5B 69                        dw          CFETCH              //      c@
1003+ 6FD7 5B 6A 9C 6B                  dw          BL, SUBTRACT        //      bl -
1004+ 6FDB                                                              //      if
1005+ 6FDB F3 63                        dw          ZBRANCH
1006+ 6FDD 0A 00                        dw          LTrailing_Else - $
1007+ 6FDF FC 63                        dw              C_LEAVE         //          leave
1008+ 6FE1 0C 00                        dw              LTrailing_Leave - $
1009+ 6FE3 EF 63                        dw          BRANCH              //      else
1010+ 6FE5 04 00                        dw          LTrailing_Endif - $
1011+ 6FE7              LTrailing_Else:
1012+ 6FE7 7E 68                        dw              ONE_SUBTRACT    //          1-
1013+ 6FE9              LTrailing_Endif:                                //      endif
1014+ 6FE9                                                              // loop
1015+ 6FE9 E7 63                        dw      C_LOOP
1016+ 6FEB E4 FF                        dw      LTrailing_Loop - $
1017+ 6FED              LTrailing_Leave:
1018+ 6FED 11 68                        dw      EXIT                    // ;
1019+ 6FEF
1020+ 6FEF              //  ______________________________________________________________________
1021+ 6FEF              //
1022+ 6FEF              // accept       a n1 -- n2
1023+ 6FEF              // Accepts at most n1 characters from terminal and stores them at address a
1024+ 6FEF              // CR stops input. A 'nul' is added as trailer.
1025+ 6FEF              // n2 is the string length. n2 is kept in span user variable also.
1026+ 6FEF                              Colon_Def ACCEPT, "ACCEPT", is_normal
1026+ 6FEF             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
1026+ 6FEF             >
1026+ 6FEF             >Dict_Ptr        defl    $
1026+ 6FEF             >
1026+ 6FEF             >//              ______________________________________________________________________
1026+ 6FEF             >//              Heap part
1026+ 6FEF             >
1026+ 6FEF             >
1026+ 6FEF             >                org     (Heap_Ptr & $1FFF) + $E000
1026+ E80F             >
1026+ E80F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ E80F             >Latest_Definition defl  Heap_Ptr
1026+ E80F             >
1026+ E80F             >                // dummy db directives used to calculate length of namec
1026+ E80F 41 43 43 45 >                db      "ACCEPT"
1026+ E813 50 54       >
1026+ E815             >len_NFA         defl    $ - temp_NFA
1026+ E815             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ E80F             >
1026+ E80F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ E810 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
1026+ E814 50 54       >
1026+ E816             >                org     $-1                 // alter last byte of Name just above to set
1026+ E815 D4          >                db      {b $} | END_BIT     // msb as name end
1026+ E816             >
1026+ E816 01 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1026+ E818             >Prev_Ptr        defl    Heap_Ptr
1026+ E818             >
1026+ E818             >mirror_Ptr      defl    $
1026+ E818             >
1026+ E818 F1 6F       >                dw      Dict_Ptr + 2        // xt
1026+ E81A             >Heap_Ptr        defl    $ - $E000           // save current HP
1026+ E81A             >
1026+ E81A             >Current_HP      defl  $ - $E000             // used to set HP once!
1026+ E81A             >
1026+ E81A             >//              ______________________________________________________________________
1026+ E81A             >//              Dictionary part
1026+ E81A             >
1026+ E81A             >                org     Dict_Ptr
1026+ 6FEF             >
1026+ 6FEF 18 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1026+ 6FF1             >
1026+ 6FF1             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 6FF1 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 6FF4             >
1026+ 6FF4             >
1026+ 6FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 6FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 6FF4             >
1026+ 6FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 6FF4 B8 68 5E 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
1027+ 6FF8 B8 68
1028+ 6FFA 38 6A EC 68                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
1029+ 6FFE                                                              // do
1030+ 6FFE 06 64                        dw      C_Q_DO
1031+ 7000 8C 00                        dw      Accept_Leave - $
1032+ 7002              Accept_Loop:
1033+ 7002 40 6F                        dw          CURS                //      curs            ( a  0 )
1034+ 7004 C1 68 3D 66                  dw          DROP, KEY           //      drop key        ( a  c )
1035+ 7008 DC 68                        dw          DUP                 //      dup             ( a  c  c )
1036+ 700A A3 63 0E 00                  dw          LIT, $0E            //      0E
1037+ 700E 7E 6A                        dw          PLUS_ORIGIN         //      +origin
1038+ 7010 46 69                        dw          FETCH               //      @               ( a  c  c  del )
1039+ 7012 A8 6B                        dw          EQUALS              //      =               ( a  c  c==del )
1040+ 7014                                                              //      if
1041+ 7014 F3 63                        dw          ZBRANCH
1042+ 7016 2C 00                        dw          Accept_Else_0 - $
1043+ 7018 C1 68                        dw              DROP            //          drop        ( a  )
1044+ 701A DC 68 32 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1044+ 701E A8 6B
1045+ 7020 3F 6A D1 67                  dw              ONE, AND_OP     //          1 and
1046+ 7024 DC 68                        dw              DUP             //          dup         ( a  a==i  a==i )
1047+ 7026 26 68                        dw              R_TO            //          r> 2 - + r>
1048+ 7028 99 68 5E 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1049+ 702C 1B 68                        dw              TO_R            //
1050+ 702E                                                              //          if
1051+ 702E F3 63                        dw              ZBRANCH
1052+ 7030 0A 00                        dw              Accept_Else_1 - $
1053+ 7032 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1054+ 7036                                                              //          else
1055+ 7036 EF 63                        dw              BRANCH
1056+ 7038 06 00                        dw              Accept_Endif_1 - $
1057+ 703A              Accept_Else_1:
1058+ 703A A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1059+ 703E              Accept_Endif_1:                                 //          endif
1060+ 703E EF 63                        dw          BRANCH
1061+ 7040 2E 00                        dw          Accept_Endif_0 - $
1062+ 7042              Accept_Else_0:                                  //      else
1063+ 7042 DC 68                        dw              DUP             //          dup         ( a  c  c )
1064+ 7044 A3 63 0D 00                  dw              LIT, 13         //          13
1065+ 7048 A8 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1066+ 704A                                                              //          if
1067+ 704A F3 63                        dw              ZBRANCH
1068+ 704C 0C 00                        dw              Accept_Else_2 - $
1069+ 704E C1 68 5B 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1070+ 7052 38 6A                        dw                  ZERO        //              0       ( a  c  0 )
1071+ 7054                                                              //          else
1072+ 7054 EF 63                        dw              BRANCH
1073+ 7056 04 00                        dw              Accept_Endif_2 - $
1074+ 7058              Accept_Else_2:
1075+ 7058 DC 68                        dw                  DUP         //              dup     ( a  c  c )
1076+ 705A                                                              //          endif
1077+ 705A              Accept_Endif_2:
1078+ 705A 32 64 64 69                  dw              I, CSTORE       //          i           ( a  c )
1079+ 705E DC 68 5B 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1079+ 7062 C1 6B
1080+ 7064                                                              //          if
1081+ 7064 F3 63                        dw              ZBRANCH
1082+ 7066 08 00                        dw              Accept_Endif_3 - $
1083+ 7068 26 68                        dw                  R_TO        //              r>
1084+ 706A 7E 68                        dw                  ONE_SUBTRACT//              1-
1085+ 706C 1B 68                        dw                  TO_R        //              >r
1086+ 706E                                                              //          endif
1087+ 706E              Accept_Endif_3:
1088+ 706E              Accept_Endif_0:                                 //      endif
1089+ 706E 18 6C                        dw          EMIT                //      emit            ( a )
1090+ 7070
1091+ 7070 38 6A 32 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1091+ 7074 77 68
1092+ 7076 50 69                        dw          STORE               //          ( zero pad )
1093+ 7078 32 64                        dw          I                   //      i
1094+ 707A 32 64 5B 69                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1094+ 707E 36 68
1095+ 7080 F3 63                        dw          ZBRANCH             //
1096+ 7082 06 00                        dw              Accept_Endif_4 - $
1097+ 7084 FC 63                        dw                  C_LEAVE     //              leave
1098+ 7086 06 00                        dw                  Accept_Leave - $
1099+ 7088              Accept_Endif_4:                                 //      endif
1100+ 7088                                                              // loop
1101+ 7088 E7 63                        dw      C_LOOP
1102+ 708A 78 FF                        dw      Accept_Loop - $
1103+ 708C              Accept_Leave:
1104+ 708C D5 68 9C 6B                  dw      SWAP, SUBTRACT          // swap -
1105+ 7090 77 68                        dw      ONE_PLUS                // 1+
1106+ 7092 DC 68 4B 6B                  dw      DUP, SPAN, STORE        // dup span !
1106+ 7096 50 69
1107+ 7098 11 68                        dw      EXIT                    // ;
1108+ 709A
1109+ 709A              //  ______________________________________________________________________
1110+ 709A              //
1111+ 709A              // expect      a n --
1112+ 709A              // Accepts at most n1 characters from terminal and stores them at address a
1113+ 709A              // CR stops input. A 'nul' is added as trailer.
1114+ 709A              // n2 is the string length. n2 is kept in span user variable also.
1115+ 709A              //              Colon_Def EXPECT, "EXPECT", is_normal
1116+ 709A              //              dw      ACCEPT, DROP            // accept drop
1117+ 709A              //              dw      EXIT                    // ;
1118+ 709A
1119+ 709A              //  ______________________________________________________________________
1120+ 709A              //
1121+ 709A              // query        --
1122+ 709A              // Accept at most 80 character from console. CR stops.
1123+ 709A              // Text is stored in TIB. Variable IN is zeroed.
1124+ 709A                              Colon_Def QUERY, "QUERY", is_normal
1124+ 709A             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1124+ 709A             >
1124+ 709A             >Dict_Ptr        defl    $
1124+ 709A             >
1124+ 709A             >//              ______________________________________________________________________
1124+ 709A             >//              Heap part
1124+ 709A             >
1124+ 709A             >
1124+ 709A             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E81A             >
1124+ E81A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E81A             >Latest_Definition defl  Heap_Ptr
1124+ E81A             >
1124+ E81A             >                // dummy db directives used to calculate length of namec
1124+ E81A 51 55 45 52 >                db      "QUERY"
1124+ E81E 59          >
1124+ E81F             >len_NFA         defl    $ - temp_NFA
1124+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E81A             >
1124+ E81A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E81B 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1124+ E81F 59          >
1124+ E820             >                org     $-1                 // alter last byte of Name just above to set
1124+ E81F D9          >                db      {b $} | END_BIT     // msb as name end
1124+ E820             >
1124+ E820 0F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E822             >Prev_Ptr        defl    Heap_Ptr
1124+ E822             >
1124+ E822             >mirror_Ptr      defl    $
1124+ E822             >
1124+ E822 9C 70       >                dw      Dict_Ptr + 2        // xt
1124+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E824             >
1124+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E824             >
1124+ E824             >//              ______________________________________________________________________
1124+ E824             >//              Dictionary part
1124+ E824             >
1124+ E824             >                org     Dict_Ptr
1124+ 709A             >
1124+ 709A 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 709C             >
1124+ 709C             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 709C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 709F             >
1124+ 709F             >
1124+ 709F             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 709F             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 709F             >
1124+ 709F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 709F 9D 6A 46 69                  dw      TIB, FETCH              // tib @
1126+ 70A3 A3 63 50 00                  dw      LIT, 80                 // 80
1127+ 70A7 F1 6F C1 68                  dw      ACCEPT, DROP            // accept drop
1128+ 70AB 38 6A DF 6A                  dw      ZERO, TO_IN, STORE      // 0 >in !
1128+ 70AF 50 69
1129+ 70B1 11 68                        dw      EXIT                    // ;
1130+ 70B3
1131+ 70B3              //  ______________________________________________________________________
1132+ 70B3              //
1133+ 70B3              // fill        a n c --
1134+ 70B3              // If n > 0, fills n locations starting from address a with the value c.
1135+ 70B3                              New_Def FILL, "FILL", is_code, is_normal
1135+ 70B3             >
1135+ 70B3             >Dict_Ptr        defl    $
1135+ 70B3             >
1135+ 70B3             >//              ______________________________________________________________________
1135+ 70B3             >//              Heap part
1135+ 70B3             >
1135+ 70B3             >
1135+ 70B3             >                org     (Heap_Ptr & $1FFF) + $E000
1135+ E824             >
1135+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1135+ E824             >Latest_Definition defl  Heap_Ptr
1135+ E824             >
1135+ E824             >                // dummy db directives used to calculate length of namec
1135+ E824 46 49 4C 4C >                db      "FILL"
1135+ E828             >len_NFA         defl    $ - temp_NFA
1135+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1135+ E824             >
1135+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1135+ E825 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1135+ E829             >                org     $-1                 // alter last byte of Name just above to set
1135+ E828 CC          >                db      {b $} | END_BIT     // msb as name end
1135+ E829             >
1135+ E829 1A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1135+ E82B             >Prev_Ptr        defl    Heap_Ptr
1135+ E82B             >
1135+ E82B             >mirror_Ptr      defl    $
1135+ E82B             >
1135+ E82B B5 70       >                dw      Dict_Ptr + 2        // xt
1135+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1135+ E82D             >
1135+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1135+ E82D             >
1135+ E82D             >//              ______________________________________________________________________
1135+ E82D             >//              Dictionary part
1135+ E82D             >
1135+ E82D             >                org     Dict_Ptr
1135+ 70B3             >
1135+ 70B3 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1135+ 70B5             >
1135+ 70B5             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1135+ 70B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1135+ 70B5 ~           >
1135+ 70B5 ~           >
1135+ 70B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1135+ 70B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1135+ 70B5             >
1135+ 70B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1136+ 70B5 D9                           exx
1137+ 70B6 D1                           pop     de                  // de has character
1138+ 70B7 C1                           pop     bc                  // bc has counter
1139+ 70B8 E1                           pop     hl                  // hl has address, save Instruction Pointer
1140+ 70B9              Fill_Loop:
1141+ 70B9 78                               ld      a, b
1142+ 70BA B1                               or      c
1143+ 70BB 28 05                        jr      z, Fill_While_End
1144+ 70BD 73                               ld      (hl), e
1145+ 70BE 0B                               dec     bc
1146+ 70BF 23                               inc     hl
1147+ 70C0 18 F7                        jr      Fill_Loop
1148+ 70C2              Fill_While_End:
1149+ 70C2 D9                           exx
1150+ 70C3                              next
1150+ 70C3 DD E9       >                jp      (ix)
1151+ 70C5
1152+ 70C5              //  ______________________________________________________________________
1153+ 70C5              //
1154+ 70C5              // erase        a n --
1155+ 70C5              // If n > 0, fills n locations starting from address a with 'nul' characters.
1156+ 70C5                              Colon_Def ERASE, "ERASE", is_normal
1156+ 70C5             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1156+ 70C5             >
1156+ 70C5             >Dict_Ptr        defl    $
1156+ 70C5             >
1156+ 70C5             >//              ______________________________________________________________________
1156+ 70C5             >//              Heap part
1156+ 70C5             >
1156+ 70C5             >
1156+ 70C5             >                org     (Heap_Ptr & $1FFF) + $E000
1156+ E82D             >
1156+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1156+ E82D             >Latest_Definition defl  Heap_Ptr
1156+ E82D             >
1156+ E82D             >                // dummy db directives used to calculate length of namec
1156+ E82D 45 52 41 53 >                db      "ERASE"
1156+ E831 45          >
1156+ E832             >len_NFA         defl    $ - temp_NFA
1156+ E832             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1156+ E82D             >
1156+ E82D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1156+ E82E 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1156+ E832 45          >
1156+ E833             >                org     $-1                 // alter last byte of Name just above to set
1156+ E832 C5          >                db      {b $} | END_BIT     // msb as name end
1156+ E833             >
1156+ E833 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1156+ E835             >Prev_Ptr        defl    Heap_Ptr
1156+ E835             >
1156+ E835             >mirror_Ptr      defl    $
1156+ E835             >
1156+ E835 C7 70       >                dw      Dict_Ptr + 2        // xt
1156+ E837             >Heap_Ptr        defl    $ - $E000           // save current HP
1156+ E837             >
1156+ E837             >Current_HP      defl  $ - $E000             // used to set HP once!
1156+ E837             >
1156+ E837             >//              ______________________________________________________________________
1156+ E837             >//              Dictionary part
1156+ E837             >
1156+ E837             >                org     Dict_Ptr
1156+ 70C5             >
1156+ 70C5 35 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1156+ 70C7             >
1156+ 70C7             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1156+ 70C7 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1156+ 70CA             >
1156+ 70CA             >
1156+ 70CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1156+ 70CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1156+ 70CA             >
1156+ 70CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1157+ 70CA 38 6A B5 70                  dw      ZERO, FILL              // 0 fill
1158+ 70CE 11 68                        dw      EXIT                    // ;
1159+ 70D0
1160+ 70D0              //  ______________________________________________________________________
1161+ 70D0              //
1162+ 70D0              // blank        a n --
1163+ 70D0              // If n > 0, fills n locations starting from address a with 'nul' characters.
1164+ 70D0                              Colon_Def BLANK, "BLANK", is_normal
1164+ 70D0             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1164+ 70D0             >
1164+ 70D0             >Dict_Ptr        defl    $
1164+ 70D0             >
1164+ 70D0             >//              ______________________________________________________________________
1164+ 70D0             >//              Heap part
1164+ 70D0             >
1164+ 70D0             >
1164+ 70D0             >                org     (Heap_Ptr & $1FFF) + $E000
1164+ E837             >
1164+ E837             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ E837             >Latest_Definition defl  Heap_Ptr
1164+ E837             >
1164+ E837             >                // dummy db directives used to calculate length of namec
1164+ E837 42 4C 41 4E >                db      "BLANK"
1164+ E83B 4B          >
1164+ E83C             >len_NFA         defl    $ - temp_NFA
1164+ E83C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ E837             >
1164+ E837 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ E838 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1164+ E83C 4B          >
1164+ E83D             >                org     $-1                 // alter last byte of Name just above to set
1164+ E83C CB          >                db      {b $} | END_BIT     // msb as name end
1164+ E83D             >
1164+ E83D 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1164+ E83F             >Prev_Ptr        defl    Heap_Ptr
1164+ E83F             >
1164+ E83F             >mirror_Ptr      defl    $
1164+ E83F             >
1164+ E83F D2 70       >                dw      Dict_Ptr + 2        // xt
1164+ E841             >Heap_Ptr        defl    $ - $E000           // save current HP
1164+ E841             >
1164+ E841             >Current_HP      defl  $ - $E000             // used to set HP once!
1164+ E841             >
1164+ E841             >//              ______________________________________________________________________
1164+ E841             >//              Dictionary part
1164+ E841             >
1164+ E841             >                org     Dict_Ptr
1164+ 70D0             >
1164+ 70D0 3F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1164+ 70D2             >
1164+ 70D2             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 70D2 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 70D5             >
1164+ 70D5             >
1164+ 70D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 70D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 70D5             >
1164+ 70D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 70D5 5B 6A B5 70                  dw      BL, FILL                // bl fill
1166+ 70D9 11 68                        dw      EXIT                    // ;
1167+ 70DB
1168+ 70DB              //  ______________________________________________________________________
1169+ 70DB              //
1170+ 70DB              // hold         c --
1171+ 70DB              // Used between <# and #> to insert a character c in numeric formatting.
1172+ 70DB                              Colon_Def HOLD, "HOLD", is_normal
1172+ 70DB             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1172+ 70DB             >
1172+ 70DB             >Dict_Ptr        defl    $
1172+ 70DB             >
1172+ 70DB             >//              ______________________________________________________________________
1172+ 70DB             >//              Heap part
1172+ 70DB             >
1172+ 70DB             >
1172+ 70DB             >                org     (Heap_Ptr & $1FFF) + $E000
1172+ E841             >
1172+ E841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1172+ E841             >Latest_Definition defl  Heap_Ptr
1172+ E841             >
1172+ E841             >                // dummy db directives used to calculate length of namec
1172+ E841 48 4F 4C 44 >                db      "HOLD"
1172+ E845             >len_NFA         defl    $ - temp_NFA
1172+ E845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1172+ E841             >
1172+ E841 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1172+ E842 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1172+ E846             >                org     $-1                 // alter last byte of Name just above to set
1172+ E845 C4          >                db      {b $} | END_BIT     // msb as name end
1172+ E846             >
1172+ E846 37 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1172+ E848             >Prev_Ptr        defl    Heap_Ptr
1172+ E848             >
1172+ E848             >mirror_Ptr      defl    $
1172+ E848             >
1172+ E848 DD 70       >                dw      Dict_Ptr + 2        // xt
1172+ E84A             >Heap_Ptr        defl    $ - $E000           // save current HP
1172+ E84A             >
1172+ E84A             >Current_HP      defl  $ - $E000             // used to set HP once!
1172+ E84A             >
1172+ E84A             >//              ______________________________________________________________________
1172+ E84A             >//              Dictionary part
1172+ E84A             >
1172+ E84A             >                org     Dict_Ptr
1172+ 70DB             >
1172+ 70DB 48 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1172+ 70DD             >
1172+ 70DD             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1172+ 70DD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1172+ 70E0             >
1172+ 70E0             >
1172+ 70E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1172+ 70E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1172+ 70E0             >
1172+ 70E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1173+ 70E0 54 6A                        dw      NEG_ONE                 // -1
1174+ 70E2 27 6B 2E 69                  dw      HLD, PLUSSTORE          // hld +!
1175+ 70E6 27 6B 46 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1175+ 70EA 64 69
1176+ 70EC 11 68                        dw      EXIT                    // ;
1177+ 70EE
1178+ 70EE              //  ______________________________________________________________________
1179+ 70EE              //
1180+ 70EE              // pad         -- a
1181+ 70EE              // leaves the buffer text address. This is at a fixed distance over HERE.
1182+ 70EE                              Colon_Def PAD, "PAD", is_normal
1182+ 70EE             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1182+ 70EE             >
1182+ 70EE             >Dict_Ptr        defl    $
1182+ 70EE             >
1182+ 70EE             >//              ______________________________________________________________________
1182+ 70EE             >//              Heap part
1182+ 70EE             >
1182+ 70EE             >
1182+ 70EE             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E84A             >
1182+ E84A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E84A             >Latest_Definition defl  Heap_Ptr
1182+ E84A             >
1182+ E84A             >                // dummy db directives used to calculate length of namec
1182+ E84A 50 41 44    >                db      "PAD"
1182+ E84D             >len_NFA         defl    $ - temp_NFA
1182+ E84D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E84A             >
1182+ E84A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E84B 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1182+ E84E             >                org     $-1                 // alter last byte of Name just above to set
1182+ E84D C4          >                db      {b $} | END_BIT     // msb as name end
1182+ E84E             >
1182+ E84E 41 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1182+ E850             >Prev_Ptr        defl    Heap_Ptr
1182+ E850             >
1182+ E850             >mirror_Ptr      defl    $
1182+ E850             >
1182+ E850 F0 70       >                dw      Dict_Ptr + 2        // xt
1182+ E852             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E852             >
1182+ E852             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E852             >
1182+ E852             >//              ______________________________________________________________________
1182+ E852             >//              Dictionary part
1182+ E852             >
1182+ E852             >                org     Dict_Ptr
1182+ 70EE             >
1182+ 70EE 50 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1182+ 70F0             >
1182+ 70F0             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 70F0 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1182+ 70F3             >
1182+ 70F3             >
1182+ 70F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 70F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 70F3             >
1182+ 70F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 70F3 5D 6B                        dw      HERE                    // here
1184+ 70F5 A3 63 44 00                  dw      LIT, 68                 // 68
1185+ 70F9 5E 68                        dw      PLUS                    // +
1186+ 70FB 11 68                        dw      EXIT                    // ;
1187+ 70FD
1188+ 70FD              //  ______________________________________________________________________
1189+ 70FD              //
1190+ 70FD              // word         c -- a
1191+ 70FD              // reads characters from input streams until it encouners a c delimiter.
1192+ 70FD              // Stores that packet so it starts from HERE
1193+ 70FD              // WORD leaves a counter as first byte and ends the packet with two spaces.
1194+ 70FD              // Other occurrences of c are ignored.
1195+ 70FD              // If BLK is zero, text is taken from terminal buffer TIB.
1196+ 70FD              // Otherwise text is taken from the disk-block given by BLK.
1197+ 70FD              // "in" variable is incremented of the number of character read.
1198+ 70FD              // The number of characters read is given by ENCLOSE.
1199+ 70FD                              Colon_Def WORD, "WORD", is_normal
1199+ 70FD             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1199+ 70FD             >
1199+ 70FD             >Dict_Ptr        defl    $
1199+ 70FD             >
1199+ 70FD             >//              ______________________________________________________________________
1199+ 70FD             >//              Heap part
1199+ 70FD             >
1199+ 70FD             >
1199+ 70FD             >                org     (Heap_Ptr & $1FFF) + $E000
1199+ E852             >
1199+ E852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ E852             >Latest_Definition defl  Heap_Ptr
1199+ E852             >
1199+ E852             >                // dummy db directives used to calculate length of namec
1199+ E852 57 4F 52 44 >                db      "WORD"
1199+ E856             >len_NFA         defl    $ - temp_NFA
1199+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ E852             >
1199+ E852 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ E853 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1199+ E857             >                org     $-1                 // alter last byte of Name just above to set
1199+ E856 C4          >                db      {b $} | END_BIT     // msb as name end
1199+ E857             >
1199+ E857 4A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1199+ E859             >Prev_Ptr        defl    Heap_Ptr
1199+ E859             >
1199+ E859             >mirror_Ptr      defl    $
1199+ E859             >
1199+ E859 FF 70       >                dw      Dict_Ptr + 2        // xt
1199+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1199+ E85B             >
1199+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1199+ E85B             >
1199+ E85B             >//              ______________________________________________________________________
1199+ E85B             >//              Dictionary part
1199+ E85B             >
1199+ E85B             >                org     Dict_Ptr
1199+ 70FD             >
1199+ 70FD 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1199+ 70FF             >
1199+ 70FF             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 70FF CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 7102             >
1199+ 7102             >
1199+ 7102             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 7102             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 7102             >
1199+ 7102             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 7102 D9 6A 46 69                  dw      BLK, FETCH              // blk @
1201+ 7106                                                              // if
1202+ 7106 F3 63                        dw      ZBRANCH
1203+ 7108 0C 00                        dw      Word_Else - $
1204+ 710A D9 6A 46 69                  dw          BLK, FETCH          //      blk @
1205+ 710E B9 79                        dw          BLOCK               //      block ( forward )
1206+ 7110                                                              // else
1207+ 7110 EF 63                        dw      BRANCH
1208+ 7112 06 00                        dw      Word_Endif - $
1209+ 7114              Word_Else:
1210+ 7114 9D 6A 46 69                  dw         TIB, FETCH           //      tib @
1211+ 7118              Word_Endif:                                     // endif
1212+ 7118 DF 6A 46 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1212+ 711C 5E 68
1213+ 711E D5 68 20 65                  dw      SWAP, ENCLOSE           // swap enclose
1214+ 7122 5D 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1214+ 7126 22 00 D2 70
1215+ 712A DF 6A 2E 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1216+ 712E B8 68 9C 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1216+ 7132 1B 68
1217+ 7134 31 68 5D 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1217+ 7138 64 69
1218+ 713A 5E 68                        dw      PLUS                    // +
1219+ 713C 5D 6B 77 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1219+ 7140 26 68
1220+ 7142 56 67                        dw      CMOVE                   // cmove
1221+ 7144 5D 6B                        dw      HERE                    // here
1222+ 7146 11 68                        dw      EXIT                    // ;
1223+ 7148
1224+ 7148              //  ______________________________________________________________________
1225+ 7148              //
1226+ 7148              // (.")         --
1227+ 7148              // Direct procedure compiled by ." and  .(  It executes TYPE.
1228+ 7148                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1228+ 7148             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1228+ 7148             >
1228+ 7148             >Dict_Ptr        defl    $
1228+ 7148             >
1228+ 7148             >//              ______________________________________________________________________
1228+ 7148             >//              Heap part
1228+ 7148             >
1228+ 7148             >
1228+ 7148             >                org     (Heap_Ptr & $1FFF) + $E000
1228+ E85B             >
1228+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1228+ E85B             >Latest_Definition defl  Heap_Ptr
1228+ E85B             >
1228+ E85B             >                // dummy db directives used to calculate length of namec
1228+ E85B 28 2E 22 29 >                db      '(.")'
1228+ E85F             >len_NFA         defl    $ - temp_NFA
1228+ E85F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1228+ E85B             >
1228+ E85B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1228+ E85C 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1228+ E860             >                org     $-1                 // alter last byte of Name just above to set
1228+ E85F A9          >                db      {b $} | END_BIT     // msb as name end
1228+ E860             >
1228+ E860 52 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1228+ E862             >Prev_Ptr        defl    Heap_Ptr
1228+ E862             >
1228+ E862             >mirror_Ptr      defl    $
1228+ E862             >
1228+ E862 4A 71       >                dw      Dict_Ptr + 2        // xt
1228+ E864             >Heap_Ptr        defl    $ - $E000           // save current HP
1228+ E864             >
1228+ E864             >Current_HP      defl  $ - $E000             // used to set HP once!
1228+ E864             >
1228+ E864             >//              ______________________________________________________________________
1228+ E864             >//              Dictionary part
1228+ E864             >
1228+ E864             >                org     Dict_Ptr
1228+ 7148             >
1228+ 7148 62 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1228+ 714A             >
1228+ 714A             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1228+ 714A CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1228+ 714D             >
1228+ 714D             >
1228+ 714D             >                endif           ; ok        // for other definitions it "points" the correct handler
1228+ 714D             >                // Use of "; ok" to suppress "warning[fwdref]"
1228+ 714D             >
1228+ 714D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1229+ 714D 31 68 EC 6E                  dw      R_OP, COUNT             // r count
1230+ 7151 DC 68 77 68                  dw      DUP, ONE_PLUS           // dup 1+
1231+ 7155 26 68 5E 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1231+ 7159 1B 68
1232+ 715B AD 6F                        dw      TYPE                    // type
1233+ 715D 11 68                        dw      EXIT                    // ;
1234+ 715F
1235+ 715F              //  ______________________________________________________________________
1236+ 715F              //
1237+ 715F              // char         -- c
1238+ 715F              // get first character from next input word
1239+ 715F                              Colon_Def CHAR,  "CHAR", is_normal
1239+ 715F             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1239+ 715F             >
1239+ 715F             >Dict_Ptr        defl    $
1239+ 715F             >
1239+ 715F             >//              ______________________________________________________________________
1239+ 715F             >//              Heap part
1239+ 715F             >
1239+ 715F             >
1239+ 715F             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E864             >
1239+ E864             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E864             >Latest_Definition defl  Heap_Ptr
1239+ E864             >
1239+ E864             >                // dummy db directives used to calculate length of namec
1239+ E864 43 48 41 52 >                db      "CHAR"
1239+ E868             >len_NFA         defl    $ - temp_NFA
1239+ E868             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E864             >
1239+ E864 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E865 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1239+ E869             >                org     $-1                 // alter last byte of Name just above to set
1239+ E868 D2          >                db      {b $} | END_BIT     // msb as name end
1239+ E869             >
1239+ E869 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E86B             >Prev_Ptr        defl    Heap_Ptr
1239+ E86B             >
1239+ E86B             >mirror_Ptr      defl    $
1239+ E86B             >
1239+ E86B 61 71       >                dw      Dict_Ptr + 2        // xt
1239+ E86D             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E86D             >
1239+ E86D             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E86D             >
1239+ E86D             >//              ______________________________________________________________________
1239+ E86D             >//              Dictionary part
1239+ E86D             >
1239+ E86D             >                org     Dict_Ptr
1239+ 715F             >
1239+ 715F 6B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 7161             >
1239+ 7161             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 7161 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 7164             >
1239+ 7164             >
1239+ 7164             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 7164             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 7164             >
1239+ 7164             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 7164 5B 6A FF 70                  dw      BL, WORD                // bl word
1241+ 7168 77 68 5B 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1242+ 716C 11 68                        dw      EXIT                    // ;
1243+ 716E
1244+ 716E              //  ______________________________________________________________________
1245+ 716E              //
1246+ 716E              // ,"           --
1247+ 716E              // compiles a string terminated by " as a counted string from next input stream
1248+ 716E                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1248+ 716E             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1248+ 716E             >
1248+ 716E             >Dict_Ptr        defl    $
1248+ 716E             >
1248+ 716E             >//              ______________________________________________________________________
1248+ 716E             >//              Heap part
1248+ 716E             >
1248+ 716E             >
1248+ 716E             >                org     (Heap_Ptr & $1FFF) + $E000
1248+ E86D             >
1248+ E86D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ E86D             >Latest_Definition defl  Heap_Ptr
1248+ E86D             >
1248+ E86D             >                // dummy db directives used to calculate length of namec
1248+ E86D 2C 22       >                db      ',"'
1248+ E86F             >len_NFA         defl    $ - temp_NFA
1248+ E86F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ E86D             >
1248+ E86D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ E86E 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1248+ E870             >                org     $-1                 // alter last byte of Name just above to set
1248+ E86F A2          >                db      {b $} | END_BIT     // msb as name end
1248+ E870             >
1248+ E870 64 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1248+ E872             >Prev_Ptr        defl    Heap_Ptr
1248+ E872             >
1248+ E872             >mirror_Ptr      defl    $
1248+ E872             >
1248+ E872 70 71       >                dw      Dict_Ptr + 2        // xt
1248+ E874             >Heap_Ptr        defl    $ - $E000           // save current HP
1248+ E874             >
1248+ E874             >Current_HP      defl  $ - $E000             // used to set HP once!
1248+ E874             >
1248+ E874             >//              ______________________________________________________________________
1248+ E874             >//              Dictionary part
1248+ E874             >
1248+ E874             >                org     Dict_Ptr
1248+ 716E             >
1248+ 716E 72 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1248+ 7170             >
1248+ 7170             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 7170 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1248+ 7173             >
1248+ 7173             >
1248+ 7173             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 7173             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 7173             >
1248+ 7173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 7173 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1250+ 7177 FF 70                        dw      WORD                    // word
1251+ 7179 5B 69 77 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1252+ 717D 68 6B                        dw      ALLOT                   // allot
1253+ 717F 38 6A 82 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1254+ 7183 11 68                        dw      EXIT
1255+ 7185
1256+ 7185              //  ______________________________________________________________________
1257+ 7185              //
1258+ 7185              // .c           c --
1259+ 7185              // intermediate general purpose string builder, used by ." and .(
1260+ 7185                              Colon_Def DOT_C,  ".C", is_immediate
1260+ 7185             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1260+ 7185             >
1260+ 7185             >Dict_Ptr        defl    $
1260+ 7185             >
1260+ 7185             >//              ______________________________________________________________________
1260+ 7185             >//              Heap part
1260+ 7185             >
1260+ 7185             >
1260+ 7185             >                org     (Heap_Ptr & $1FFF) + $E000
1260+ E874             >
1260+ E874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ E874             >Latest_Definition defl  Heap_Ptr
1260+ E874             >
1260+ E874             >                // dummy db directives used to calculate length of namec
1260+ E874 2E 43       >                db      ".C"
1260+ E876             >len_NFA         defl    $ - temp_NFA
1260+ E876             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ E874             >
1260+ E874 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ E875 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1260+ E877             >                org     $-1                 // alter last byte of Name just above to set
1260+ E876 C3          >                db      {b $} | END_BIT     // msb as name end
1260+ E877             >
1260+ E877 6D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1260+ E879             >Prev_Ptr        defl    Heap_Ptr
1260+ E879             >
1260+ E879             >mirror_Ptr      defl    $
1260+ E879             >
1260+ E879 87 71       >                dw      Dict_Ptr + 2        // xt
1260+ E87B             >Heap_Ptr        defl    $ - $E000           // save current HP
1260+ E87B             >
1260+ E87B             >Current_HP      defl  $ - $E000             // used to set HP once!
1260+ E87B             >
1260+ E87B             >//              ______________________________________________________________________
1260+ E87B             >//              Dictionary part
1260+ E87B             >
1260+ E87B             >                org     Dict_Ptr
1260+ 7185             >
1260+ 7185 79 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1260+ 7187             >
1260+ 7187             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 7187 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 718A             >
1260+ 718A             >
1260+ 718A             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 718A             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 718A             >
1260+ 718A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 718A 03 6B 46 69                  dw      STATE, FETCH            // state @
1262+ 718E                                                              // if
1263+ 718E F3 63                        dw      ZBRANCH
1264+ 7190 12 00                        dw      Dot_C_Else - $
1265+ 7192 17 6E 4A 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1266+ 7196 FF 70 5B 69                  dw          WORD, CFETCH        //      word c@
1267+ 719A 77 68 68 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1268+ 719E                                                              // else
1269+ 719E EF 63                        dw      BRANCH
1270+ 71A0 08 00                        dw      Dot_C_Endif - $
1271+ 71A2              Dot_C_Else:
1272+ 71A2 FF 70 EC 6E                  dw          WORD, COUNT, TYPE   //      word count type
1272+ 71A6 AD 6F
1273+ 71A8              Dot_C_Endif:                                    // endif
1274+ 71A8 11 68                        dw      EXIT                    ;
1275+ 71AA
1276+ 71AA              //  ______________________________________________________________________
1277+ 71AA              //
1278+ 71AA              // ."           c --
1279+ 71AA                              Colon_Def DOT_QUOTE,  '."', is_immediate
1279+ 71AA             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1279+ 71AA             >
1279+ 71AA             >Dict_Ptr        defl    $
1279+ 71AA             >
1279+ 71AA             >//              ______________________________________________________________________
1279+ 71AA             >//              Heap part
1279+ 71AA             >
1279+ 71AA             >
1279+ 71AA             >                org     (Heap_Ptr & $1FFF) + $E000
1279+ E87B             >
1279+ E87B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1279+ E87B             >Latest_Definition defl  Heap_Ptr
1279+ E87B             >
1279+ E87B             >                // dummy db directives used to calculate length of namec
1279+ E87B 2E 22       >                db      '."'
1279+ E87D             >len_NFA         defl    $ - temp_NFA
1279+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1279+ E87B             >
1279+ E87B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1279+ E87C 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1279+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1279+ E87D A2          >                db      {b $} | END_BIT     // msb as name end
1279+ E87E             >
1279+ E87E 74 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1279+ E880             >Prev_Ptr        defl    Heap_Ptr
1279+ E880             >
1279+ E880             >mirror_Ptr      defl    $
1279+ E880             >
1279+ E880 AC 71       >                dw      Dict_Ptr + 2        // xt
1279+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1279+ E882             >
1279+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1279+ E882             >
1279+ E882             >//              ______________________________________________________________________
1279+ E882             >//              Dictionary part
1279+ E882             >
1279+ E882             >                org     Dict_Ptr
1279+ 71AA             >
1279+ 71AA 80 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1279+ 71AC             >
1279+ 71AC             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1279+ 71AC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1279+ 71AF             >
1279+ 71AF             >
1279+ 71AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1279+ 71AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1279+ 71AF             >
1279+ 71AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1280+ 71AF A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1281+ 71B3 87 71                        dw      DOT_C                   // [compile] .c
1282+ 71B5 11 68                        dw      EXIT                    // ; immediate
1283+ 71B7
1284+ 71B7              //  ______________________________________________________________________
1285+ 71B7              //
1286+ 71B7              // .(           c --
1287+ 71B7                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1287+ 71B7             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1287+ 71B7             >
1287+ 71B7             >Dict_Ptr        defl    $
1287+ 71B7             >
1287+ 71B7             >//              ______________________________________________________________________
1287+ 71B7             >//              Heap part
1287+ 71B7             >
1287+ 71B7             >
1287+ 71B7             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E882             >
1287+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E882             >Latest_Definition defl  Heap_Ptr
1287+ E882             >
1287+ E882             >                // dummy db directives used to calculate length of namec
1287+ E882 2E 28       >                db      ".("
1287+ E884             >len_NFA         defl    $ - temp_NFA
1287+ E884             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E882             >
1287+ E882 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E883 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1287+ E885             >                org     $-1                 // alter last byte of Name just above to set
1287+ E884 A8          >                db      {b $} | END_BIT     // msb as name end
1287+ E885             >
1287+ E885 7B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E887             >Prev_Ptr        defl    Heap_Ptr
1287+ E887             >
1287+ E887             >mirror_Ptr      defl    $
1287+ E887             >
1287+ E887 B9 71       >                dw      Dict_Ptr + 2        // xt
1287+ E889             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E889             >
1287+ E889             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E889             >
1287+ E889             >//              ______________________________________________________________________
1287+ E889             >//              Dictionary part
1287+ E889             >
1287+ E889             >                org     Dict_Ptr
1287+ 71B7             >
1287+ 71B7 87 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 71B9             >
1287+ 71B9             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 71B9 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 71BC             >
1287+ 71BC             >
1287+ 71BC             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 71BC             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 71BC             >
1287+ 71BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 71BC A3 63 29 00                  dw      LIT, ")"                // [char] )
1289+ 71C0 87 71                        dw      DOT_C                   // [compile] .c
1290+ 71C2 11 68                        dw      EXIT                    // ; immediate
1291+ 71C4
1292+ 71C4              //  ______________________________________________________________________
1293+ 71C4              //
1294+ 71C4              // (sgn)        a -- a f
1295+ 71C4              // determines if char in addr a is a sign (+ or -), and in that case increments
1296+ 71C4              // a flag. Returns f as the sign, true for negative, false for positive.
1297+ 71C4              // called by NUMBER and (EXP)
1298+ 71C4                              Colon_Def CSGN,  "(SGN)", is_normal
1298+ 71C4             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1298+ 71C4             >
1298+ 71C4             >Dict_Ptr        defl    $
1298+ 71C4             >
1298+ 71C4             >//              ______________________________________________________________________
1298+ 71C4             >//              Heap part
1298+ 71C4             >
1298+ 71C4             >
1298+ 71C4             >                org     (Heap_Ptr & $1FFF) + $E000
1298+ E889             >
1298+ E889             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ E889             >Latest_Definition defl  Heap_Ptr
1298+ E889             >
1298+ E889             >                // dummy db directives used to calculate length of namec
1298+ E889 28 53 47 4E >                db      "(SGN)"
1298+ E88D 29          >
1298+ E88E             >len_NFA         defl    $ - temp_NFA
1298+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ E889             >
1298+ E889 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ E88A 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1298+ E88E 29          >
1298+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1298+ E88E A9          >                db      {b $} | END_BIT     // msb as name end
1298+ E88F             >
1298+ E88F 82 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1298+ E891             >Prev_Ptr        defl    Heap_Ptr
1298+ E891             >
1298+ E891             >mirror_Ptr      defl    $
1298+ E891             >
1298+ E891 C6 71       >                dw      Dict_Ptr + 2        // xt
1298+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1298+ E893             >
1298+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1298+ E893             >
1298+ E893             >//              ______________________________________________________________________
1298+ E893             >//              Dictionary part
1298+ E893             >
1298+ E893             >                org     Dict_Ptr
1298+ 71C4             >
1298+ 71C4 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1298+ 71C6             >
1298+ 71C6             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 71C6 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 71C9             >
1298+ 71C9             >
1298+ 71C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 71C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 71C9             >
1298+ 71C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 71C9 DC 68 77 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1299+ 71CD 5B 69
1300+ 71CF DC 68 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1300+ 71D3 2D 00 A8 6B
1301+ 71D7                                                              // if
1302+ 71D7 F3 63                        dw      ZBRANCH
1303+ 71D9 12 00                        dw      CSgn_Else_0 - $
1304+ 71DB C1 68                        dw          DROP                //      drop
1305+ 71DD 77 68                        dw          ONE_PLUS            //      1+
1306+ 71DF 3F 6A 0F 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1306+ 71E3 2E 69
1307+ 71E5 3F 6A                        dw          ONE                 //      1
1308+ 71E7                                                              // else
1309+ 71E7 EF 63                        dw      BRANCH
1310+ 71E9 16 00                        dw      CSgn_Endif_0 - $
1311+ 71EB              CSgn_Else_0:
1312+ 71EB A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1312+ 71EF A8 6B
1313+ 71F1                                                              //      if
1314+ 71F1 F3 63                        dw          ZBRANCH
1315+ 71F3 0A 00                        dw          CSgn_Endif_1 - $
1316+ 71F5 77 68                        dw              ONE_PLUS        //          1+
1317+ 71F7 3F 6A 0F 6B                  dw              ONE, DPL        //          1 dpl
1318+ 71FB 2E 69                        dw              PLUSSTORE       //          +!
1319+ 71FD              CSgn_Endif_1                                    //      endif
1320+ 71FD 38 6A                        dw          ZERO                //      0
1321+ 71FF              CSgn_Endif_0:                                   // endif
1322+ 71FF 11 68                        dw      EXIT
1323+ 7201
1324+ 7201              //  ______________________________________________________________________
1325+ 7201              //
1326+ 7201              // (number)     d a -- d1 a1
1327+ 7201              // using the current BASE parse characters stored in address a
1328+ 7201              // accumulating a double precision integer d
1329+ 7201              // the process stops at the first not-convertible character
1330+ 7201              // A double-number is kept in CPU registers as HLDE.
1331+ 7201              // On the stack a double number is treated as two single numbers
1332+ 7201              // where HL is on the top of the stack and DE is the second from top,
1333+ 7201              // so in the stack memory it appears as LHED.
1334+ 7201              // Instead, in 2VARIABLE a double number is stored as EDLH.
1335+ 7201                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1335+ 7201             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1335+ 7201             >
1335+ 7201             >Dict_Ptr        defl    $
1335+ 7201             >
1335+ 7201             >//              ______________________________________________________________________
1335+ 7201             >//              Heap part
1335+ 7201             >
1335+ 7201             >
1335+ 7201             >                org     (Heap_Ptr & $1FFF) + $E000
1335+ E893             >
1335+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ E893             >Latest_Definition defl  Heap_Ptr
1335+ E893             >
1335+ E893             >                // dummy db directives used to calculate length of namec
1335+ E893 28 4E 55 4D >                db      "(NUMBER)"
1335+ E897 42 45 52 29 >
1335+ E89B             >len_NFA         defl    $ - temp_NFA
1335+ E89B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ E893             >
1335+ E893 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ E894 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1335+ E898 42 45 52 29 >
1335+ E89C             >                org     $-1                 // alter last byte of Name just above to set
1335+ E89B A9          >                db      {b $} | END_BIT     // msb as name end
1335+ E89C             >
1335+ E89C 89 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1335+ E89E             >Prev_Ptr        defl    Heap_Ptr
1335+ E89E             >
1335+ E89E             >mirror_Ptr      defl    $
1335+ E89E             >
1335+ E89E 03 72       >                dw      Dict_Ptr + 2        // xt
1335+ E8A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1335+ E8A0             >
1335+ E8A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1335+ E8A0             >
1335+ E8A0             >//              ______________________________________________________________________
1335+ E8A0             >//              Dictionary part
1335+ E8A0             >
1335+ E8A0             >                org     Dict_Ptr
1335+ 7201             >
1335+ 7201 9E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1335+ 7203             >
1335+ 7203             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 7203 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1335+ 7206             >
1335+ 7206             >
1335+ 7206             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 7206             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 7206             >
1335+ 7206             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 7206                                                              // begin
1337+ 7206              CNumber_Begin:
1338+ 7206 77 68                        dw          ONE_PLUS            //      1+
1339+ 7208 DC 68 1B 68                  dw          DUP, TO_R           //      dup >r
1340+ 720C 5B 69                        dw          CFETCH              //      @
1341+ 720E 09 6B 46 69                  dw          BASE, FETCH         //      base @
1342+ 7212 45 64                        dw          DIGIT               //      digit
1343+ 7214                                                              // while
1344+ 7214 F3 63                        dw      ZBRANCH
1345+ 7216 2C 00                        dw      CNumber_While_end - $
1346+ 7218 D5 68                        dw          SWAP                //      swap
1347+ 721A 09 6B 46 69                  dw          BASE, FETCH         //      base @
1348+ 721E 79 67                        dw          UM_MUL              //      um*
1349+ 7220 C1 68 E3 68                  dw          DROP, ROT           //      drop rot
1350+ 7224 09 6B 46 69                  dw          BASE, FETCH         //      base @
1351+ 7228 79 67                        dw          UM_MUL              //      um*
1352+ 722A 68 68                        dw          DPLUS               //      d+
1353+ 722C 0F 6B 46 69                  dw          DPL, FETCH          //      dpl @
1354+ 7230 77 68                        dw          ONE_PLUS            //      1+
1355+ 7232                                                              //      if
1356+ 7232 F3 63                        dw          ZBRANCH
1357+ 7234 08 00                        dw          CNumber_Endif - $
1358+ 7236 3F 6A 0F 6B                  dw              ONE, DPL        //          1 dpl
1359+ 723A 2E 69                        dw              PLUSSTORE       //          +!
1360+ 723C              CNumber_Endif:                                  //      endif
1361+ 723C 26 68                        dw             R_TO             //      r>  ( balance rp )
1362+ 723E EF 63                        dw      BRANCH
1363+ 7240 C6 FF                        dw      CNumber_Begin - $
1364+ 7242              CNumber_While_end:                              // repeat
1365+ 7242 26 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1366+ 7244 11 68                        dw      EXIT                    // ;
1367+ 7246
1368+ 7246              //  ______________________________________________________________________
1369+ 7246              //
1370+ 7246              // (prefix)
1371+ 7246                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1371+ 7246             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1371+ 7246             >
1371+ 7246             >Dict_Ptr        defl    $
1371+ 7246             >
1371+ 7246             >//              ______________________________________________________________________
1371+ 7246             >//              Heap part
1371+ 7246             >
1371+ 7246             >
1371+ 7246             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E8A0             >
1371+ E8A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E8A0             >Latest_Definition defl  Heap_Ptr
1371+ E8A0             >
1371+ E8A0             >                // dummy db directives used to calculate length of namec
1371+ E8A0 28 50 52 45 >                db      "(PREFIX)"
1371+ E8A4 46 49 58 29 >
1371+ E8A8             >len_NFA         defl    $ - temp_NFA
1371+ E8A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E8A0             >
1371+ E8A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E8A1 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1371+ E8A5 46 49 58 29 >
1371+ E8A9             >                org     $-1                 // alter last byte of Name just above to set
1371+ E8A8 A9          >                db      {b $} | END_BIT     // msb as name end
1371+ E8A9             >
1371+ E8A9 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E8AB             >Prev_Ptr        defl    Heap_Ptr
1371+ E8AB             >
1371+ E8AB             >mirror_Ptr      defl    $
1371+ E8AB             >
1371+ E8AB 48 72       >                dw      Dict_Ptr + 2        // xt
1371+ E8AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E8AD             >
1371+ E8AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E8AD             >
1371+ E8AD             >//              ______________________________________________________________________
1371+ E8AD             >//              Dictionary part
1371+ E8AD             >
1371+ E8AD             >                org     Dict_Ptr
1371+ 7246             >
1371+ 7246 AB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 7248             >
1371+ 7248             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 7248 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 724B             >
1371+ 724B             >
1371+ 724B             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 724B             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 724B             >
1371+ 724B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 724B DC 68 77 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1372+ 724F 5B 69
1373+ 7251 DC 68 1B 68                  dw      DUP, TO_R               // dup >r
1374+ 7255 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1374+ 7259 A8 6B
1375+ 725B                                                              // if
1376+ 725B F3 63                        dw      ZBRANCH
1377+ 725D 06 00                        dw      CPrefix_Endif_0 - $
1378+ 725F 77 68                        dw          ONE_PLUS            //      1+
1379+ 7261 6F 6E                        dw          HEX
1380+ 7263              CPrefix_Endif_0:                                // endif
1381+ 7263 31 68                        dw      R_OP                    // r@
1382+ 7265 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1382+ 7269 A8 6B
1383+ 726B                                                              // if
1384+ 726B F3 63                        dw      ZBRANCH
1385+ 726D 0A 00                        dw      CPrefix_Endif_1 - $
1386+ 726F 77 68                        dw          ONE_PLUS            //      1+
1387+ 7271 46 6A                        dw          TWO
1388+ 7273 09 6B 50 69                  dw          BASE, STORE         //      2 base !
1389+ 7277              CPrefix_Endif_1:                                // endif
1390+ 7277 26 68                        dw      R_TO                    // r>
1391+ 7279 A3 63 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1391+ 727D A8 6B
1392+ 727F                                                              // if
1393+ 727F F3 63                        dw      ZBRANCH
1394+ 7281 06 00                        dw      CPrefix_Endif_2 - $
1395+ 7283 77 68                        dw          ONE_PLUS            //      1+
1396+ 7285 7E 6E                        dw          DECIMAL
1397+ 7287              CPrefix_Endif_2:                                // endif
1398+ 7287 11 68                        dw      EXIT
1399+ 7289
1400+ 7289              //  ______________________________________________________________________
1401+ 7289
1402+ 7289              PDOM_PTR:
1403+ 7289              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1404+ 7289 2C 2F 2D 3A                  db ',/-:'
1405+ 728D              PCDM_PTR:
1406+ 728D              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1407+ 728D 2E 2E 2E 2E                  db '....'
1408+ 7291
1409+ 7291              //  ______________________________________________________________________
1410+ 7291              //
1411+ 7291              // number       a -- d
1412+ 7291                              Colon_Def NUMBER,  "NUMBER", is_normal
1412+ 7291             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1412+ 7291             >
1412+ 7291             >Dict_Ptr        defl    $
1412+ 7291             >
1412+ 7291             >//              ______________________________________________________________________
1412+ 7291             >//              Heap part
1412+ 7291             >
1412+ 7291             >
1412+ 7291             >                org     (Heap_Ptr & $1FFF) + $E000
1412+ E8AD             >
1412+ E8AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1412+ E8AD             >Latest_Definition defl  Heap_Ptr
1412+ E8AD             >
1412+ E8AD             >                // dummy db directives used to calculate length of namec
1412+ E8AD 4E 55 4D 42 >                db      "NUMBER"
1412+ E8B1 45 52       >
1412+ E8B3             >len_NFA         defl    $ - temp_NFA
1412+ E8B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1412+ E8AD             >
1412+ E8AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1412+ E8AE 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1412+ E8B2 45 52       >
1412+ E8B4             >                org     $-1                 // alter last byte of Name just above to set
1412+ E8B3 D2          >                db      {b $} | END_BIT     // msb as name end
1412+ E8B4             >
1412+ E8B4 A0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1412+ E8B6             >Prev_Ptr        defl    Heap_Ptr
1412+ E8B6             >
1412+ E8B6             >mirror_Ptr      defl    $
1412+ E8B6             >
1412+ E8B6 93 72       >                dw      Dict_Ptr + 2        // xt
1412+ E8B8             >Heap_Ptr        defl    $ - $E000           // save current HP
1412+ E8B8             >
1412+ E8B8             >Current_HP      defl  $ - $E000             // used to set HP once!
1412+ E8B8             >
1412+ E8B8             >//              ______________________________________________________________________
1412+ E8B8             >//              Dictionary part
1412+ E8B8             >
1412+ E8B8             >                org     Dict_Ptr
1412+ 7291             >
1412+ 7291 B6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1412+ 7293             >
1412+ 7293             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1412+ 7293 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1412+ 7296             >
1412+ 7296             >
1412+ 7296             >                endif           ; ok        // for other definitions it "points" the correct handler
1412+ 7296             >                // Use of "; ok" to suppress "warning[fwdref]"
1412+ 7296             >
1412+ 7296             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1413+ 7296 38 6A 38 6A                  dw      ZERO, ZERO              // 0 0
1414+ 729A E3 68                        dw      ROT                     // rot
1415+ 729C
1416+ 729C 09 6B 46 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1416+ 72A0 1B 68
1417+ 72A2 48 72                        dw      CPREFIX                 // (prefix)   // ***
1418+ 72A4
1419+ 72A4 C6 71 1B 68                  dw      CSGN, TO_R              // (sgn) >r
1420+ 72A8
1421+ 72A8 54 6A 0F 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1421+ 72AC 50 69
1422+ 72AE 03 72                        dw      CNUMBER                 // (number)
1423+ 72B0              Number_Begin:                                   // begin
1424+ 72B0 DC 68 5B 69                  dw        DUP, CFETCH             // dup c@
1425+ 72B4 1B 68                        dw        TO_R                    // >r
1426+ 72B6                          //  dw        PCDM, PDOM              //  pcdm pdom
1427+ 72B6 A3 63 8D 72                  dw        LIT, PCDM_PTR           //
1428+ 72BA A3 63 89 72                  dw        LIT, PDOM_PTR           //
1429+ 72BE A3 63 04 00                  dw        LIT, 4                  //  4
1430+ 72C2 26 68                        dw        R_TO                    // r>
1431+ 72C4 4E 65                        dw        C_MAP                   // (map)
1432+ 72C6 38 6A D5 68                  dw        ZERO, SWAP              // 0 swap
1433+ 72CA A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1433+ 72CE A8 6B
1434+ 72D0
1435+ 72D0 F3 63                        dw        ZBRANCH                 // if
1436+ 72D2 0A 00                        dw        Number_Endif_1 - $
1437+ 72D4 38 6A 0F 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1437+ 72D8 50 69
1438+ 72DA 77 68                        dw          ONE_PLUS                //      1+
1439+ 72DC              Number_Endif_1:                                   // endif
1440+ 72DC
1441+ 72DC F3 63                        dw      ZBRANCH                // while
1442+ 72DE 08 00                        dw      Number_While_end - $
1443+ 72E0 03 72                        dw        CNUMBER                 // (number)
1444+ 72E2 EF 63                        dw      BRANCH
1445+ 72E4 CC FF                        dw      Number_Begin - $
1446+ 72E6              Number_While_end:                               // repeat
1447+ 72E6
1448+ 72E6 5B 69 5B 6A                  dw      CFETCH, BL              // c@ bl
1449+ 72EA 9C 6B 38 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1449+ 72EE A7 6D
1450+ 72F0 26 68                        dw      R_TO                    // r>
1451+ 72F2                                                              // if
1452+ 72F2 F3 63                        dw      ZBRANCH
1453+ 72F4 04 00                        dw      Number_Endif_2 - $
1454+ 72F6 AB 68                        dw          DMINUS              //      dminus
1455+ 72F8              Number_Endif_2:                                 // endif
1456+ 72F8 26 68 09 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1456+ 72FC 50 69
1457+ 72FE 11 68                        dw      EXIT                    // ;
1458+ 7300
1459+ 7300              //  ______________________________________________________________________
1460+ 7300              //
1461+ 7300              // twofind      a -- d
1462+ 7300                              Colon_Def TWOFIND,  "2FIND", is_normal
1462+ 7300             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1462+ 7300             >
1462+ 7300             >Dict_Ptr        defl    $
1462+ 7300             >
1462+ 7300             >//              ______________________________________________________________________
1462+ 7300             >//              Heap part
1462+ 7300             >
1462+ 7300             >
1462+ 7300             >                org     (Heap_Ptr & $1FFF) + $E000
1462+ E8B8             >
1462+ E8B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1462+ E8B8             >Latest_Definition defl  Heap_Ptr
1462+ E8B8             >
1462+ E8B8             >                // dummy db directives used to calculate length of namec
1462+ E8B8 32 46 49 4E >                db      "2FIND"
1462+ E8BC 44          >
1462+ E8BD             >len_NFA         defl    $ - temp_NFA
1462+ E8BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1462+ E8B8             >
1462+ E8B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1462+ E8B9 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1462+ E8BD 44          >
1462+ E8BE             >                org     $-1                 // alter last byte of Name just above to set
1462+ E8BD C4          >                db      {b $} | END_BIT     // msb as name end
1462+ E8BE             >
1462+ E8BE AD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1462+ E8C0             >Prev_Ptr        defl    Heap_Ptr
1462+ E8C0             >
1462+ E8C0             >mirror_Ptr      defl    $
1462+ E8C0             >
1462+ E8C0 02 73       >                dw      Dict_Ptr + 2        // xt
1462+ E8C2             >Heap_Ptr        defl    $ - $E000           // save current HP
1462+ E8C2             >
1462+ E8C2             >Current_HP      defl  $ - $E000             // used to set HP once!
1462+ E8C2             >
1462+ E8C2             >//              ______________________________________________________________________
1462+ E8C2             >//              Dictionary part
1462+ E8C2             >
1462+ E8C2             >                org     Dict_Ptr
1462+ 7300             >
1462+ 7300 C0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1462+ 7302             >
1462+ 7302             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1462+ 7302 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1462+ 7305             >
1462+ 7305             >
1462+ 7305             >                endif           ; ok        // for other definitions it "points" the correct handler
1462+ 7305             >                // Use of "; ok" to suppress "warning[fwdref]"
1462+ 7305             >
1462+ 7305             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1463+ 7305 1B 68 31 68                  dw      TO_R, R_OP              // >r r@
1464+ 7309 F7 6A 46 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1464+ 730D 46 69
1465+ 730F B2 64                        dw      C_FIND                  // (find)
1466+ 7311 FF 6B                        dw      QDUP                    // ?dup
1467+ 7313 36 68                        dw      ZEQUAL                  // 0=
1468+ 7315                                                              // if
1469+ 7315 F3 63                        dw      ZBRANCH
1470+ 7317 22 00                        dw      LFind_Endif - $
1471+ 7319 31 68                        dw          R_OP                //      r@
1472+ 731B                              // dw          LATEST               //      latest
1473+ 731B FD 6A 46 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1473+ 731F 46 69
1474+ 7321 B2 64                        dw          C_FIND              //      (find)
1475+ 7323
1476+ 7323 FF 6B                            dw      QDUP                    // ?dup
1477+ 7325 36 68                            dw      ZEQUAL                  // 0=
1478+ 7327                                                                  // if
1479+ 7327 F3 63                            dw      ZBRANCH
1480+ 7329 10 00                            dw      LFind_Endif2 - $
1481+ 732B 31 68                            dw          R_OP                //      r@
1482+ 732D A3 63 7D 75                      dw          LIT, FORTH, TO_BODY
1482+ 7331 26 6D
1483+ 7333 8D 68                            dw          CELL_PLUS //, CELL_PLUS
1484+ 7335 46 69                            dw          FETCH
1485+ 7337 B2 64                            dw          C_FIND              //      (find)
1486+ 7339              LFind_Endif2:                                    // endif
1487+ 7339
1488+ 7339
1489+ 7339              LFind_Endif:                                    // endif
1490+ 7339 26 68 C1 68                  dw      R_TO, DROP              // r> drop
1491+ 733D 11 68                        dw      EXIT                    // ;
1492+ 733F
1493+ 733F              //  ______________________________________________________________________
1494+ 733F              //
1495+ 733F              // -find        a -- d
1496+ 733F                              Colon_Def LFIND,  "-FIND", is_normal
1496+ 733F             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1496+ 733F             >
1496+ 733F             >Dict_Ptr        defl    $
1496+ 733F             >
1496+ 733F             >//              ______________________________________________________________________
1496+ 733F             >//              Heap part
1496+ 733F             >
1496+ 733F             >
1496+ 733F             >                org     (Heap_Ptr & $1FFF) + $E000
1496+ E8C2             >
1496+ E8C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ E8C2             >Latest_Definition defl  Heap_Ptr
1496+ E8C2             >
1496+ E8C2             >                // dummy db directives used to calculate length of namec
1496+ E8C2 2D 46 49 4E >                db      "-FIND"
1496+ E8C6 44          >
1496+ E8C7             >len_NFA         defl    $ - temp_NFA
1496+ E8C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ E8C2             >
1496+ E8C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ E8C3 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1496+ E8C7 44          >
1496+ E8C8             >                org     $-1                 // alter last byte of Name just above to set
1496+ E8C7 C4          >                db      {b $} | END_BIT     // msb as name end
1496+ E8C8             >
1496+ E8C8 B8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1496+ E8CA             >Prev_Ptr        defl    Heap_Ptr
1496+ E8CA             >
1496+ E8CA             >mirror_Ptr      defl    $
1496+ E8CA             >
1496+ E8CA 41 73       >                dw      Dict_Ptr + 2        // xt
1496+ E8CC             >Heap_Ptr        defl    $ - $E000           // save current HP
1496+ E8CC             >
1496+ E8CC             >Current_HP      defl  $ - $E000             // used to set HP once!
1496+ E8CC             >
1496+ E8CC             >//              ______________________________________________________________________
1496+ E8CC             >//              Dictionary part
1496+ E8CC             >
1496+ E8CC             >                org     Dict_Ptr
1496+ 733F             >
1496+ 733F CA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1496+ 7341             >
1496+ 7341             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 7341 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1496+ 7344             >
1496+ 7344             >
1496+ 7344             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 7344             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 7344             >
1496+ 7344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 7344 5B 6A FF 70                  dw      BL, WORD                // bl word
1498+ 7348 02 73                        dw      TWOFIND                 // 2find
1499+ 734A 11 68                        dw      EXIT                    // ;
1500+ 734C
1501+ 734C              //  ______________________________________________________________________
1502+ 734C              //
1503+ 734C              // (abort)      --
1504+ 734C                              Colon_Def CABORT,  "(ABORT)", is_normal
1504+ 734C             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1504+ 734C             >
1504+ 734C             >Dict_Ptr        defl    $
1504+ 734C             >
1504+ 734C             >//              ______________________________________________________________________
1504+ 734C             >//              Heap part
1504+ 734C             >
1504+ 734C             >
1504+ 734C             >                org     (Heap_Ptr & $1FFF) + $E000
1504+ E8CC             >
1504+ E8CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1504+ E8CC             >Latest_Definition defl  Heap_Ptr
1504+ E8CC             >
1504+ E8CC             >                // dummy db directives used to calculate length of namec
1504+ E8CC 28 41 42 4F >                db      "(ABORT)"
1504+ E8D0 52 54 29    >
1504+ E8D3             >len_NFA         defl    $ - temp_NFA
1504+ E8D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1504+ E8CC             >
1504+ E8CC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1504+ E8CD 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1504+ E8D1 52 54 29    >
1504+ E8D4             >                org     $-1                 // alter last byte of Name just above to set
1504+ E8D3 A9          >                db      {b $} | END_BIT     // msb as name end
1504+ E8D4             >
1504+ E8D4 C2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1504+ E8D6             >Prev_Ptr        defl    Heap_Ptr
1504+ E8D6             >
1504+ E8D6             >mirror_Ptr      defl    $
1504+ E8D6             >
1504+ E8D6 4E 73       >                dw      Dict_Ptr + 2        // xt
1504+ E8D8             >Heap_Ptr        defl    $ - $E000           // save current HP
1504+ E8D8             >
1504+ E8D8             >Current_HP      defl  $ - $E000             // used to set HP once!
1504+ E8D8             >
1504+ E8D8             >//              ______________________________________________________________________
1504+ E8D8             >//              Dictionary part
1504+ E8D8             >
1504+ E8D8             >                org     Dict_Ptr
1504+ 734C             >
1504+ 734C D6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1504+ 734E             >
1504+ 734E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1504+ 734E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1504+ 7351             >
1504+ 7351             >
1504+ 7351             >                endif           ; ok        // for other definitions it "points" the correct handler
1504+ 7351             >                // Use of "; ok" to suppress "warning[fwdref]"
1504+ 7351             >
1504+ 7351             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1505+ 7351 E2 75                        dw      ABORT                   // abort
1506+ 7353 11 68                        dw      EXIT                    // ;
1507+ 7355
1508+ 7355              //  ______________________________________________________________________
1509+ 7355              //
1510+ 7355              // error        n --
1511+ 7355              // raise an error
1512+ 7355              // if WARNING is 0, prints "MSG#n".
1513+ 7355              // if WARNING is 1, prints line n of screen 4.
1514+ 7355              // if WARNING is -1 does (ABORT) that normally does ABORT
1515+ 7355              // value can be negative or beyond block 4.
1516+ 7355                              Colon_Def ERROR,  "ERROR", is_normal
1516+ 7355             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1516+ 7355             >
1516+ 7355             >Dict_Ptr        defl    $
1516+ 7355             >
1516+ 7355             >//              ______________________________________________________________________
1516+ 7355             >//              Heap part
1516+ 7355             >
1516+ 7355             >
1516+ 7355             >                org     (Heap_Ptr & $1FFF) + $E000
1516+ E8D8             >
1516+ E8D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1516+ E8D8             >Latest_Definition defl  Heap_Ptr
1516+ E8D8             >
1516+ E8D8             >                // dummy db directives used to calculate length of namec
1516+ E8D8 45 52 52 4F >                db      "ERROR"
1516+ E8DC 52          >
1516+ E8DD             >len_NFA         defl    $ - temp_NFA
1516+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1516+ E8D8             >
1516+ E8D8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1516+ E8D9 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1516+ E8DD 52          >
1516+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1516+ E8DD D2          >                db      {b $} | END_BIT     // msb as name end
1516+ E8DE             >
1516+ E8DE CC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1516+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1516+ E8E0             >
1516+ E8E0             >mirror_Ptr      defl    $
1516+ E8E0             >
1516+ E8E0 57 73       >                dw      Dict_Ptr + 2        // xt
1516+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1516+ E8E2             >
1516+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1516+ E8E2             >
1516+ E8E2             >//              ______________________________________________________________________
1516+ E8E2             >//              Dictionary part
1516+ E8E2             >
1516+ E8E2             >                org     Dict_Ptr
1516+ 7355             >
1516+ 7355 E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1516+ 7357             >
1516+ 7357             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1516+ 7357 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1516+ 735A             >
1516+ 735A             >
1516+ 735A             >                endif           ; ok        // for other definitions it "points" the correct handler
1516+ 735A             >                // Use of "; ok" to suppress "warning[fwdref]"
1516+ 735A             >
1516+ 735A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1517+ 735A A9 6A 46 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1517+ 735E 47 68
1518+ 7360                                                              // if
1519+ 7360 F3 63                        dw      ZBRANCH
1520+ 7362 04 00                        dw      Error_Endif_1 - $
1521+ 7364 4E 73                        dw          CABORT              //      (abort)
1522+ 7366              Error_Endif_1:                                  // endif
1523+ 7366 5D 6B EC 6E                  dw      HERE, COUNT, TYPE       // here count type
1523+ 736A AD 6F
1524+ 736C 4A 71                        dw      C_DOT_QUOTE             // .( ? )
1525+ 736E 02 3F 20                     db      2, "? "
1526+ 7371 D0 77                        dw      MESSAGE                 // message  ( forward )
1527+ 7373 91 6A 46 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1527+ 7377 01 68
1528+ 7379 D9 6A 46 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1528+ 737D FF 6B
1529+ 737F                                                              // if
1530+ 737F F3 63                        dw      ZBRANCH
1531+ 7381 08 00                        dw      Error_Endif_2 - $
1532+ 7383 DF 6A 46 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1532+ 7387 D5 68
1533+ 7389              Error_Endif_2:                                  // endif
1534+ 7389 A6 75                        dw      QUIT                    // quit ( forward )
1535+ 738B 11 68                        dw      EXIT                    // ;
1536+ 738D              //  ______________________________________________________________________
1537+ 738D              //
1538+ 738D              // id.          nfa --
1539+ 738D                              Colon_Def ID_DOT,  "ID.", is_normal
1539+ 738D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1539+ 738D             >
1539+ 738D             >Dict_Ptr        defl    $
1539+ 738D             >
1539+ 738D             >//              ______________________________________________________________________
1539+ 738D             >//              Heap part
1539+ 738D             >
1539+ 738D             >
1539+ 738D             >                org     (Heap_Ptr & $1FFF) + $E000
1539+ E8E2             >
1539+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ E8E2             >Latest_Definition defl  Heap_Ptr
1539+ E8E2             >
1539+ E8E2             >                // dummy db directives used to calculate length of namec
1539+ E8E2 49 44 2E    >                db      "ID."
1539+ E8E5             >len_NFA         defl    $ - temp_NFA
1539+ E8E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ E8E2             >
1539+ E8E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ E8E3 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1539+ E8E6             >                org     $-1                 // alter last byte of Name just above to set
1539+ E8E5 AE          >                db      {b $} | END_BIT     // msb as name end
1539+ E8E6             >
1539+ E8E6 D8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1539+ E8E8             >Prev_Ptr        defl    Heap_Ptr
1539+ E8E8             >
1539+ E8E8             >mirror_Ptr      defl    $
1539+ E8E8             >
1539+ E8E8 8F 73       >                dw      Dict_Ptr + 2        // xt
1539+ E8EA             >Heap_Ptr        defl    $ - $E000           // save current HP
1539+ E8EA             >
1539+ E8EA             >Current_HP      defl  $ - $E000             // used to set HP once!
1539+ E8EA             >
1539+ E8EA             >//              ______________________________________________________________________
1539+ E8EA             >//              Dictionary part
1539+ E8EA             >
1539+ E8EA             >                org     Dict_Ptr
1539+ 738D             >
1539+ 738D E8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1539+ 738F             >
1539+ 738F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 738F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1539+ 7392             >
1539+ 7392             >
1539+ 7392             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 7392             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 7392             >
1539+ 7392             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 7392 CB 6C                        dw      QTOHEAP
1541+ 7394 DC 68 3F 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1541+ 7398 47 6C
1542+ 739A 77 68                        dw      ONE_PLUS                // 1+
1543+ 739C B8 68 9C 6B                  dw      OVER, SUBTRACT          // over -
1544+ 73A0 DC 68 1B 68                  dw      DUP, TO_R               // >r
1545+ 73A4 F0 70 D5 68                  dw      PAD, SWAP               // pad swap
1546+ 73A8 56 67                        dw      CMOVE                   // cmove
1547+ 73AA F0 70 77 68                  dw      PAD, ONE_PLUS           // pad 1+
1548+ 73AE 26 68 7E 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1549+ 73B2 AD 6F 2F 6C                  dw      TYPE, SPACE             // type
1550+ 73B6 11 68                        dw      EXIT                    // ;
1551+ 73B8
1552+ 73B8              //  ______________________________________________________________________
1553+ 73B8              //
1554+ 73B8              // code         -- cccc
1555+ 73B8                              Colon_Def CODE,  "CODE", is_normal
1555+ 73B8             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1555+ 73B8             >
1555+ 73B8             >Dict_Ptr        defl    $
1555+ 73B8             >
1555+ 73B8             >//              ______________________________________________________________________
1555+ 73B8             >//              Heap part
1555+ 73B8             >
1555+ 73B8             >
1555+ 73B8             >                org     (Heap_Ptr & $1FFF) + $E000
1555+ E8EA             >
1555+ E8EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1555+ E8EA             >Latest_Definition defl  Heap_Ptr
1555+ E8EA             >
1555+ E8EA             >                // dummy db directives used to calculate length of namec
1555+ E8EA 43 4F 44 45 >                db      "CODE"
1555+ E8EE             >len_NFA         defl    $ - temp_NFA
1555+ E8EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1555+ E8EA             >
1555+ E8EA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1555+ E8EB 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1555+ E8EF             >                org     $-1                 // alter last byte of Name just above to set
1555+ E8EE C5          >                db      {b $} | END_BIT     // msb as name end
1555+ E8EF             >
1555+ E8EF E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1555+ E8F1             >Prev_Ptr        defl    Heap_Ptr
1555+ E8F1             >
1555+ E8F1             >mirror_Ptr      defl    $
1555+ E8F1             >
1555+ E8F1 BA 73       >                dw      Dict_Ptr + 2        // xt
1555+ E8F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1555+ E8F3             >
1555+ E8F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1555+ E8F3             >
1555+ E8F3             >//              ______________________________________________________________________
1555+ E8F3             >//              Dictionary part
1555+ E8F3             >
1555+ E8F3             >                org     Dict_Ptr
1555+ 73B8             >
1555+ 73B8 F1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1555+ 73BA             >
1555+ 73BA             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1555+ 73BA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1555+ 73BD             >
1555+ 73BD             >
1555+ 73BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1555+ 73BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1555+ 73BD             >
1555+ 73BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1556+ 73BD 41 73                        dw      LFIND                   // -find
1557+ 73BF                                                              // if
1558+ 73BF F3 63                        dw      ZBRANCH
1559+ 73C1 10 00                        dw      Code_Endif - $
1560+ 73C3 C1 68                        dw          DROP                //      drop
1561+ 73C5 31 6D 8F 73                  dw          TO_NAME, ID_DOT     //      >name id.
1562+ 73C9 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1562+ 73CD D0 77
1563+ 73CF 2F 6C                        dw          SPACE               //      space
1564+ 73D1              Code_Endif:                                     // endif
1565+ 73D1 5D 6B                        dw      HERE                    // here
1566+ 73D3                                                              // ( ---- here begins NFA ---- )
1567+ 73D3 DC 68 5B 69                  dw      DUP, CFETCH             // dup c@
1568+ 73D7 A3 6A 46 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1568+ 73DB D9 6B
1569+ 73DD 77 68                        dw      ONE_PLUS                // 1+
1570+ 73DF DC 68 68 6B                  dw      DUP, ALLOT              // dup allot
1571+ 73E3 8D 68 8D 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1572+ 73E7 1B 68                        dw      TO_R                    // >r
1573+ 73E9 DC 68                        dw      DUP                     // dup
1574+ 73EB A3 63                        dw      LIT
1575+ 73ED A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1576+ 73EF 3D 69                        dw      TOGGLE                  // toggle
1577+ 73F1 5D 6B 7E 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1578+ 73F5 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1578+ 73F9 3D 69
1579+ 73FB                                                              // ( ---- here is LFA ---- )
1580+ 73FB FD 6A 46 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1580+ 73FF 46 69
1581+ 7401 73 6B                        dw      COMMA
1582+ 7403 DC 68 8D 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1582+ 7407 73 6B
1583+ 7409 DC 6C                        dw      HP_FETCH                // hp@
1584+ 740B FD 6A 46 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1584+ 740F 50 69
1585+ 7411 DC 6C AD 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1586+ 7415 31 68 56 67                  dw      R_OP, CMOVE
1587+ 7419 31 68 9E 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1587+ 741D 68 6B
1588+ 741F 26 68 CD 6A                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1588+ 7423 2E 69
1589+ 7425 DC 6C 91 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1590+ 7429 73 6B                        dw      COMMA
1591+ 742B 38 6A EE 6C                  dw      ZERO, SKIP_HP_PAGE
1592+ 742F                                                              // ( ---- here is LFA ---- )
1593+ 742F 11 68                        dw      EXIT                    // ;
1594+ 7431
1595+ 7431              //  ______________________________________________________________________
1596+ 7431              //
1597+ 7431              // create       -- cccc     ( compile time )
1598+ 7431              //              -- a        ( run time )
1599+ 7431                              Colon_Def CREATE,  "CREATE", is_normal
1599+ 7431             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1599+ 7431             >
1599+ 7431             >Dict_Ptr        defl    $
1599+ 7431             >
1599+ 7431             >//              ______________________________________________________________________
1599+ 7431             >//              Heap part
1599+ 7431             >
1599+ 7431             >
1599+ 7431             >                org     (Heap_Ptr & $1FFF) + $E000
1599+ E8F3             >
1599+ E8F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1599+ E8F3             >Latest_Definition defl  Heap_Ptr
1599+ E8F3             >
1599+ E8F3             >                // dummy db directives used to calculate length of namec
1599+ E8F3 43 52 45 41 >                db      "CREATE"
1599+ E8F7 54 45       >
1599+ E8F9             >len_NFA         defl    $ - temp_NFA
1599+ E8F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1599+ E8F3             >
1599+ E8F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1599+ E8F4 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1599+ E8F8 54 45       >
1599+ E8FA             >                org     $-1                 // alter last byte of Name just above to set
1599+ E8F9 C5          >                db      {b $} | END_BIT     // msb as name end
1599+ E8FA             >
1599+ E8FA EA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1599+ E8FC             >Prev_Ptr        defl    Heap_Ptr
1599+ E8FC             >
1599+ E8FC             >mirror_Ptr      defl    $
1599+ E8FC             >
1599+ E8FC 33 74       >                dw      Dict_Ptr + 2        // xt
1599+ E8FE             >Heap_Ptr        defl    $ - $E000           // save current HP
1599+ E8FE             >
1599+ E8FE             >Current_HP      defl  $ - $E000             // used to set HP once!
1599+ E8FE             >
1599+ E8FE             >//              ______________________________________________________________________
1599+ E8FE             >//              Dictionary part
1599+ E8FE             >
1599+ E8FE             >                org     Dict_Ptr
1599+ 7431             >
1599+ 7431 FC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1599+ 7433             >
1599+ 7433             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1599+ 7433 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1599+ 7436             >
1599+ 7436             >
1599+ 7436             >                endif           ; ok        // for other definitions it "points" the correct handler
1599+ 7436             >                // Use of "; ok" to suppress "warning[fwdref]"
1599+ 7436             >
1599+ 7436             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1600+ 7436 BA 73 51 6E                  dw      CODE, SMUDGE            // code smudge
1601+ 743A A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1601+ 743E 82 6B
1602+ 7440 A3 63 1F 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1602+ 7444 73 6B
1603+ 7446 8D 6E                        dw      C_SEMICOLON_CODE
1604+ 7448                              // this routine is called from the call coded in CFA
1605+ 7448              Create_Ptr:
1606+ 7448
1607+ 7448
1608+ 7448
1609+ 7448                              next
1609+ 7448 DD E9       >                jp      (ix)
1610+ 744A
1611+ 744A              //  ______________________________________________________________________
1612+ 744A              //
1613+ 744A              // [compile]    -- cccc     ( compile time )
1614+ 744A                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1614+ 744A             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1614+ 744A             >
1614+ 744A             >Dict_Ptr        defl    $
1614+ 744A             >
1614+ 744A             >//              ______________________________________________________________________
1614+ 744A             >//              Heap part
1614+ 744A             >
1614+ 744A             >
1614+ 744A             >                org     (Heap_Ptr & $1FFF) + $E000
1614+ E8FE             >
1614+ E8FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1614+ E8FE             >Latest_Definition defl  Heap_Ptr
1614+ E8FE             >
1614+ E8FE             >                // dummy db directives used to calculate length of namec
1614+ E8FE 5B 43 4F 4D >                db      "[COMPILE]"
1614+ E902 50 49 4C 45 >
1614+ E906 5D          >
1614+ E907             >len_NFA         defl    $ - temp_NFA
1614+ E907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1614+ E8FE             >
1614+ E8FE C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1614+ E8FF 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1614+ E903 50 49 4C 45 >
1614+ E907 5D          >
1614+ E908             >                org     $-1                 // alter last byte of Name just above to set
1614+ E907 DD          >                db      {b $} | END_BIT     // msb as name end
1614+ E908             >
1614+ E908 F3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1614+ E90A             >Prev_Ptr        defl    Heap_Ptr
1614+ E90A             >
1614+ E90A             >mirror_Ptr      defl    $
1614+ E90A             >
1614+ E90A 4C 74       >                dw      Dict_Ptr + 2        // xt
1614+ E90C             >Heap_Ptr        defl    $ - $E000           // save current HP
1614+ E90C             >
1614+ E90C             >Current_HP      defl  $ - $E000             // used to set HP once!
1614+ E90C             >
1614+ E90C             >//              ______________________________________________________________________
1614+ E90C             >//              Dictionary part
1614+ E90C             >
1614+ E90C             >                org     Dict_Ptr
1614+ 744A             >
1614+ 744A 0A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1614+ 744C             >
1614+ 744C             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1614+ 744C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1614+ 744F             >
1614+ 744F             >
1614+ 744F             >                endif           ; ok        // for other definitions it "points" the correct handler
1614+ 744F             >                // Use of "; ok" to suppress "warning[fwdref]"
1614+ 744F             >
1614+ 744F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1615+ 744F 41 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1616+ 7451 36 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1617+ 7453 38 6A A7 6D                  dw      ZERO, QERROR            // 0 ?error
1618+ 7457 C1 68                        dw      DROP                    // drop       (  cfa  )
1619+ 7459 73 6B                        dw      COMMA                   // ,
1620+ 745B 11 68                        dw      EXIT                    // ; immediate
1621+ 745D
1622+ 745D              //  ______________________________________________________________________
1623+ 745D              //
1624+ 745D              // literal      n --      ( compile time )
1625+ 745D                              Colon_Def LITERAL,  "LITERAL", is_immediate
1625+ 745D             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1625+ 745D             >
1625+ 745D             >Dict_Ptr        defl    $
1625+ 745D             >
1625+ 745D             >//              ______________________________________________________________________
1625+ 745D             >//              Heap part
1625+ 745D             >
1625+ 745D             >
1625+ 745D             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E90C             >
1625+ E90C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E90C             >Latest_Definition defl  Heap_Ptr
1625+ E90C             >
1625+ E90C             >                // dummy db directives used to calculate length of namec
1625+ E90C 4C 49 54 45 >                db      "LITERAL"
1625+ E910 52 41 4C    >
1625+ E913             >len_NFA         defl    $ - temp_NFA
1625+ E913             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E90C             >
1625+ E90C C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E90D 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1625+ E911 52 41 4C    >
1625+ E914             >                org     $-1                 // alter last byte of Name just above to set
1625+ E913 CC          >                db      {b $} | END_BIT     // msb as name end
1625+ E914             >
1625+ E914 FE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E916             >Prev_Ptr        defl    Heap_Ptr
1625+ E916             >
1625+ E916             >mirror_Ptr      defl    $
1625+ E916             >
1625+ E916 5F 74       >                dw      Dict_Ptr + 2        // xt
1625+ E918             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E918             >
1625+ E918             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E918             >
1625+ E918             >//              ______________________________________________________________________
1625+ E918             >//              Dictionary part
1625+ E918             >
1625+ E918             >                org     Dict_Ptr
1625+ 745D             >
1625+ 745D 16 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 745F             >
1625+ 745F             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 745F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1625+ 7462             >
1625+ 7462             >
1625+ 7462             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 7462             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 7462             >
1625+ 7462             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 7462 03 6B 46 69                  dw      STATE, FETCH            // state @
1627+ 7466                                                              // if
1628+ 7466 F3 63                        dw      ZBRANCH
1629+ 7468 08 00                        dw      Literal_Endif - $
1630+ 746A 17 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1631+ 746E 73 6B                        dw          COMMA               //      ,
1632+ 7470              Literal_Endif:                                  // endif
1633+ 7470 11 68                        dw      EXIT                    // ; immediate
1634+ 7472
1635+ 7472              //  ______________________________________________________________________
1636+ 7472              //
1637+ 7472              // dliteral     n --      ( compile time )
1638+ 7472                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1638+ 7472             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1638+ 7472             >
1638+ 7472             >Dict_Ptr        defl    $
1638+ 7472             >
1638+ 7472             >//              ______________________________________________________________________
1638+ 7472             >//              Heap part
1638+ 7472             >
1638+ 7472             >
1638+ 7472             >                org     (Heap_Ptr & $1FFF) + $E000
1638+ E918             >
1638+ E918             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1638+ E918             >Latest_Definition defl  Heap_Ptr
1638+ E918             >
1638+ E918             >                // dummy db directives used to calculate length of namec
1638+ E918 44 4C 49 54 >                db      "DLITERAL"
1638+ E91C 45 52 41 4C >
1638+ E920             >len_NFA         defl    $ - temp_NFA
1638+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1638+ E918             >
1638+ E918 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1638+ E919 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1638+ E91D 45 52 41 4C >
1638+ E921             >                org     $-1                 // alter last byte of Name just above to set
1638+ E920 CC          >                db      {b $} | END_BIT     // msb as name end
1638+ E921             >
1638+ E921 0C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1638+ E923             >Prev_Ptr        defl    Heap_Ptr
1638+ E923             >
1638+ E923             >mirror_Ptr      defl    $
1638+ E923             >
1638+ E923 74 74       >                dw      Dict_Ptr + 2        // xt
1638+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1638+ E925             >
1638+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1638+ E925             >
1638+ E925             >//              ______________________________________________________________________
1638+ E925             >//              Dictionary part
1638+ E925             >
1638+ E925             >                org     Dict_Ptr
1638+ 7472             >
1638+ 7472 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1638+ 7474             >
1638+ 7474             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1638+ 7474 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1638+ 7477             >
1638+ 7477             >
1638+ 7477             >                endif           ; ok        // for other definitions it "points" the correct handler
1638+ 7477             >                // Use of "; ok" to suppress "warning[fwdref]"
1638+ 7477             >
1638+ 7477             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1639+ 7477 03 6B 46 69                  dw      STATE, FETCH            // state @
1640+ 747B                                                              // if
1641+ 747B F3 63                        dw      ZBRANCH
1642+ 747D 08 00                        dw      DLiteral_Endif - $
1643+ 747F D5 68                        dw          SWAP                //      swap
1644+ 7481 5F 74 5F 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1645+ 7485              DLiteral_Endif:                                 // endif
1646+ 7485 11 68                        dw      EXIT                    // ; immediate
1647+ 7487
1648+ 7487              //  ______________________________________________________________________
1649+ 7487              //
1650+ 7487              // [char]       n --      ( compile time )
1651+ 7487              // inside colon definition, gets first character from next input word
1652+ 7487              // and compiles it as literal.
1653+ 7487                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1653+ 7487             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1653+ 7487             >
1653+ 7487             >Dict_Ptr        defl    $
1653+ 7487             >
1653+ 7487             >//              ______________________________________________________________________
1653+ 7487             >//              Heap part
1653+ 7487             >
1653+ 7487             >
1653+ 7487             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E925             >
1653+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E925             >Latest_Definition defl  Heap_Ptr
1653+ E925             >
1653+ E925             >                // dummy db directives used to calculate length of namec
1653+ E925 5B 43 48 41 >                db      "[CHAR]"
1653+ E929 52 5D       >
1653+ E92B             >len_NFA         defl    $ - temp_NFA
1653+ E92B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E925             >
1653+ E925 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E926 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1653+ E92A 52 5D       >
1653+ E92C             >                org     $-1                 // alter last byte of Name just above to set
1653+ E92B DD          >                db      {b $} | END_BIT     // msb as name end
1653+ E92C             >
1653+ E92C 18 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E92E             >Prev_Ptr        defl    Heap_Ptr
1653+ E92E             >
1653+ E92E             >mirror_Ptr      defl    $
1653+ E92E             >
1653+ E92E 89 74       >                dw      Dict_Ptr + 2        // xt
1653+ E930             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E930             >
1653+ E930             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E930             >
1653+ E930             >//              ______________________________________________________________________
1653+ E930             >//              Dictionary part
1653+ E930             >
1653+ E930             >                org     Dict_Ptr
1653+ 7487             >
1653+ 7487 2E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 7489             >
1653+ 7489             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 7489 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 748C             >
1653+ 748C             >
1653+ 748C             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 748C             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 748C             >
1653+ 748C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 748C 61 71 5F 74                  dw      CHAR, LITERAL           // char [compile] literal
1655+ 7490 11 68                        dw      EXIT                    // ; immediate
1656+ 7492
1657+ 7492              //  ______________________________________________________________________
1658+ 7492              //
1659+ 7492              // 0x00         n --      ( compile time )
1660+ 7492                              Colon_Def NUL_WORD,  $00, is_immediate
1660+ 7492             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1660+ 7492             >
1660+ 7492             >Dict_Ptr        defl    $
1660+ 7492             >
1660+ 7492             >//              ______________________________________________________________________
1660+ 7492             >//              Heap part
1660+ 7492             >
1660+ 7492             >
1660+ 7492             >                org     (Heap_Ptr & $1FFF) + $E000
1660+ E930             >
1660+ E930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1660+ E930             >Latest_Definition defl  Heap_Ptr
1660+ E930             >
1660+ E930             >                // dummy db directives used to calculate length of namec
1660+ E930 00          >                db      $00
1660+ E931             >len_NFA         defl    $ - temp_NFA
1660+ E931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1660+ E930             >
1660+ E930 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1660+ E931 00          >                db      $00               // name string in 7-bit ascii, but
1660+ E932             >                org     $-1                 // alter last byte of Name just above to set
1660+ E931 80          >                db      {b $} | END_BIT     // msb as name end
1660+ E932             >
1660+ E932 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1660+ E934             >Prev_Ptr        defl    Heap_Ptr
1660+ E934             >
1660+ E934             >mirror_Ptr      defl    $
1660+ E934             >
1660+ E934 94 74       >                dw      Dict_Ptr + 2        // xt
1660+ E936             >Heap_Ptr        defl    $ - $E000           // save current HP
1660+ E936             >
1660+ E936             >Current_HP      defl  $ - $E000             // used to set HP once!
1660+ E936             >
1660+ E936             >//              ______________________________________________________________________
1660+ E936             >//              Dictionary part
1660+ E936             >
1660+ E936             >                org     Dict_Ptr
1660+ 7492             >
1660+ 7492 34 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1660+ 7494             >
1660+ 7494             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1660+ 7494 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1660+ 7497             >
1660+ 7497             >
1660+ 7497             >                endif           ; ok        // for other definitions it "points" the correct handler
1660+ 7497             >                // Use of "; ok" to suppress "warning[fwdref]"
1660+ 7497             >
1660+ 7497             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1661+ 7497 D9 6A 46 69                  dw      BLK, FETCH, ONE         // blk @ 1
1661+ 749B 3F 6A
1662+ 749D CE 6B                        dw      GREATER                 // > if
1663+ 749F                                                              // if
1664+ 749F F3 63                        dw      ZBRANCH
1665+ 74A1 28 00                        dw      Nul_Else_1 - $
1666+ 74A3 3F 6A D9 6A                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1666+ 74A7 2E 69
1667+ 74A9 38 6A DF 6A                  dw          ZERO, TO_IN, STORE  //      0 >in !
1667+ 74AD 50 69
1668+ 74AF D9 6A 46 69                  dw          BLK, FETCH          //      blk @
1669+ 74B3 70 6A                        dw          BSCR                //      b/scr
1670+ 74B5 7E 68                        dw          ONE_SUBTRACT        //      1 -
1671+ 74B7 D1 67                        dw          AND_OP              //      and  ( this is tricky )
1672+ 74B9 36 68                        dw          ZEQUAL              //      0=
1673+ 74BB                                                              //      if
1674+ 74BB F3 63                        dw          ZBRANCH
1675+ 74BD 08 00                        dw          Nul_Endif_2 - $
1676+ 74BF CF 6D                        dw              QEXEC           //          ?exec
1677+ 74C1 26 68 C1 68                  dw              R_TO, DROP      //          r> drop
1678+ 74C5              Nul_Endif_2:                                    //      endif
1679+ 74C5 EF 63                        dw      BRANCH
1680+ 74C7 06 00                        dw      Nul_Endif_1 - $
1681+ 74C9              Nul_Else_1:                                     // else
1682+ 74C9 26 68 C1 68                  dw          R_TO, DROP          //      r> drop
1683+ 74CD              Nul_Endif_1:                                    // endif
1684+ 74CD 11 68                        dw      EXIT                    // ;
1685+ 74CF
1686+ 74CF              //  ______________________________________________________________________
1687+ 74CF              //
1688+ 74CF              // ?stack       --
1689+ 74CF              // Raise error #1 if stack is empty and you pop it
1690+ 74CF              // Raise error #7 if stack is full.
1691+ 74CF              // This means SP must always stay between HERE and FFFF
1692+ 74CF              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1693+ 74CF              // for Next 8K MMU paging this is $DOE8
1694+ 74CF                              Colon_Def QSTACK, "?STACK", is_normal
1694+ 74CF             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1694+ 74CF             >
1694+ 74CF             >Dict_Ptr        defl    $
1694+ 74CF             >
1694+ 74CF             >//              ______________________________________________________________________
1694+ 74CF             >//              Heap part
1694+ 74CF             >
1694+ 74CF             >
1694+ 74CF             >                org     (Heap_Ptr & $1FFF) + $E000
1694+ E936             >
1694+ E936             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1694+ E936             >Latest_Definition defl  Heap_Ptr
1694+ E936             >
1694+ E936             >                // dummy db directives used to calculate length of namec
1694+ E936 3F 53 54 41 >                db      "?STACK"
1694+ E93A 43 4B       >
1694+ E93C             >len_NFA         defl    $ - temp_NFA
1694+ E93C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1694+ E936             >
1694+ E936 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1694+ E937 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1694+ E93B 43 4B       >
1694+ E93D             >                org     $-1                 // alter last byte of Name just above to set
1694+ E93C CB          >                db      {b $} | END_BIT     // msb as name end
1694+ E93D             >
1694+ E93D 30 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1694+ E93F             >Prev_Ptr        defl    Heap_Ptr
1694+ E93F             >
1694+ E93F             >mirror_Ptr      defl    $
1694+ E93F             >
1694+ E93F D1 74       >                dw      Dict_Ptr + 2        // xt
1694+ E941             >Heap_Ptr        defl    $ - $E000           // save current HP
1694+ E941             >
1694+ E941             >Current_HP      defl  $ - $E000             // used to set HP once!
1694+ E941             >
1694+ E941             >//              ______________________________________________________________________
1694+ E941             >//              Dictionary part
1694+ E941             >
1694+ E941             >                org     Dict_Ptr
1694+ 74CF             >
1694+ 74CF 3F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1694+ 74D1             >
1694+ 74D1             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1694+ 74D1 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1694+ 74D4             >
1694+ 74D4             >
1694+ 74D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1694+ 74D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1694+ 74D4             >
1694+ 74D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1695+ 74D4 F8 67                        dw      SPFETCH                 // sp@
1696+ 74D6 91 6A 46 69                  dw      S0, FETCH               // s0 @
1697+ 74DA D5 68 B3 6B                  dw      SWAP, ULESS             // swap u<
1698+ 74DE 3F 6A A7 6D                  dw      ONE, QERROR             // 1 ?error
1699+ 74E2 5D 6B                        dw      HERE                    // here
1700+ 74E4 91 6A 46 69                  dw      S0, FETCH, LESS         // s0 @ <
1700+ 74E8 C1 6B
1701+ 74EA                                                              // if
1702+ 74EA F3 63                        dw      ZBRANCH
1703+ 74EC 14 00                        dw      QStack_Endif - $
1704+ 74EE F8 67                        dw          SPFETCH             //      sp@
1705+ 74F0 5D 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1705+ 74F4 80 00
1706+ 74F6 5E 68 B3 6B                  dw          PLUS, ULESS         //      plus u<
1707+ 74FA A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1707+ 74FE A7 6D
1708+ 7500              QStack_Endif:                                   // endif
1709+ 7500 11 68                        dw      EXIT                    // ;
1710+ 7502
1711+ 7502
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
 150  7502                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
   1+ 7502              //  ______________________________________________________________________
   2+ 7502              //
   3+ 7502              //  L2.asm
   4+ 7502              //
   5+ 7502              //  Level-2 3dos
   6+ 7502              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7502              //  ______________________________________________________________________
   8+ 7502
   9+ 7502
  10+ 7502              //  ______________________________________________________________________
  11+ 7502              //
  12+ 7502              // interpret    --
  13+ 7502              // This is the text interpreter.
  14+ 7502              // It executes or compiles, depending on STATE, the text coming from
  15+ 7502              // current input stream.
  16+ 7502              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7502              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7502              // leaving on top of stack a single or double precision number, depending
  19+ 7502              // on the presence of a decimal point.
  20+ 7502              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7502              // by the offending word.
  22+ 7502                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7502             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7502             >
  22+ 7502             >Dict_Ptr        defl    $
  22+ 7502             >
  22+ 7502             >//              ______________________________________________________________________
  22+ 7502             >//              Heap part
  22+ 7502             >
  22+ 7502             >
  22+ 7502             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E941             >
  22+ E941             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E941             >Latest_Definition defl  Heap_Ptr
  22+ E941             >
  22+ E941             >                // dummy db directives used to calculate length of namec
  22+ E941 49 4E 54 45 >                db      "INTERPRET"
  22+ E945 52 50 52 45 >
  22+ E949 54          >
  22+ E94A             >len_NFA         defl    $ - temp_NFA
  22+ E94A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E941             >
  22+ E941 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E942 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E946 52 50 52 45 >
  22+ E94A 54          >
  22+ E94B             >                org     $-1                 // alter last byte of Name just above to set
  22+ E94A D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E94B             >
  22+ E94B 36 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E94D             >Prev_Ptr        defl    Heap_Ptr
  22+ E94D             >
  22+ E94D             >mirror_Ptr      defl    $
  22+ E94D             >
  22+ E94D 04 75       >                dw      Dict_Ptr + 2        // xt
  22+ E94F             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E94F             >
  22+ E94F             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E94F             >
  22+ E94F             >//              ______________________________________________________________________
  22+ E94F             >//              Dictionary part
  22+ E94F             >
  22+ E94F             >                org     Dict_Ptr
  22+ 7502             >
  22+ 7502 4D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 7504             >
  22+ 7504             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7504 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7507             >
  22+ 7507             >
  22+ 7507             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7507             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7507             >
  22+ 7507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7507
  24+ 7507              Interpret_Begin:                                        // begin
  25+ 7507 41 73                        dw          LFIND                       //      -find
  26+ 7509                                                                      //      if
  27+ 7509 F3 63                        dw          ZBRANCH
  28+ 750B 1A 00                        dw          Interpret_Else_1 - $
  29+ 750D 03 6B 46 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7511 C1 6B
  30+ 7513                                                                      //          if
  31+ 7513 F3 63                        dw              ZBRANCH
  32+ 7515 08 00                        dw              Interpret_Else_2 - $
  33+ 7517 2C 6E                        dw                  COMPILE_XT          //              compile,
  34+ 7519                                                                      //          else
  35+ 7519 EF 63                        dw              BRANCH
  36+ 751B 06 00                        dw              Interpret_Endif_2 - $
  37+ 751D              Interpret_Else_2:
  38+ 751D AE 63 FF 69                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7521              Interpret_Endif_2:                                      //          endif
  40+ 7521                                                                      //      else
  41+ 7521 EF 63                        dw          BRANCH
  42+ 7523 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7525              Interpret_Else_1:
  44+ 7525 5D 6B 93 72                  dw              HERE, NUMBER            //          here number
  45+ 7529 0F 6B 46 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 752D 77 68
  46+ 752F                                                                      //          if
  47+ 752F F3 63                        dw              ZBRANCH
  48+ 7531 08 00                        dw              Interpret_Else_3 - $
  49+ 7533              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7533              //                                                      //              if
  51+ 7533              //              dw                  ZBRANCH
  52+ 7533              //              dw                  Interpret_Endif_4 - $
  53+ 7533              //              dw                      ONE, ZERO       //                  1 0
  54+ 7533              //              dw                      TWO_DROP        //                  2drop
  55+ 7533              //Interpret_Endif_4:                                      //              endif
  56+ 7533 74 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7535                                                                      //          else
  58+ 7535 EF 63                        dw              BRANCH
  59+ 7537 06 00                        dw              Interpret_Endif_3 - $
  60+ 7539              Interpret_Else_3:
  61+ 7539 C1 68                        dw                  DROP                //              drop
  62+ 753B 5F 74                        dw                  LITERAL             //              [compile]  literal
  63+ 753D              Interpret_Endif_3:                                      //          endif
  64+ 753D              Interpret_Endif_1:                                      //      endif
  65+ 753D D1 74                        dw          QSTACK                      //      ?stack
  66+ 753F 70 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7541                                                                      //      if
  68+ 7541 F3 63                        dw          ZBRANCH
  69+ 7543 04 00                        dw          Interpret_Endif_5 - $
  70+ 7545 A6 75                        dw              QUIT                    //          quit
  71+ 7547              Interpret_Endif_5:                                      //      endif
  72+ 7547 EF 63                        dw      BRANCH
  73+ 7549 BE FF                        dw      Interpret_Begin - $
  74+ 754B 11 68                        dw      EXIT                            // ;
  75+ 754D
  76+ 754D              //  ______________________________________________________________________
  77+ 754D              //
  78+ 754D              // vocabulary   -- cccc     ( compile time )
  79+ 754D              // Defining word used in the form   VOCABULARY cccc
  80+ 754D              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 754D              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 754D              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 754D              // so new definitions can be inserted in that vocabulary.
  84+ 754D                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 754D             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 754D             >
  84+ 754D             >Dict_Ptr        defl    $
  84+ 754D             >
  84+ 754D             >//              ______________________________________________________________________
  84+ 754D             >//              Heap part
  84+ 754D             >
  84+ 754D             >
  84+ 754D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E94F             >
  84+ E94F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E94F             >Latest_Definition defl  Heap_Ptr
  84+ E94F             >
  84+ E94F             >                // dummy db directives used to calculate length of namec
  84+ E94F 56 4F 43 41 >                db      "VOCABULARY"
  84+ E953 42 55 4C 41 >
  84+ E957 52 59       >
  84+ E959             >len_NFA         defl    $ - temp_NFA
  84+ E959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E94F             >
  84+ E94F 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E950 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E954 42 55 4C 41 >
  84+ E958 52 59       >
  84+ E95A             >                org     $-1                 // alter last byte of Name just above to set
  84+ E959 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E95A             >
  84+ E95A 41 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E95C             >Prev_Ptr        defl    Heap_Ptr
  84+ E95C             >
  84+ E95C             >mirror_Ptr      defl    $
  84+ E95C             >
  84+ E95C 4F 75       >                dw      Dict_Ptr + 2        // xt
  84+ E95E             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E95E             >
  84+ E95E             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E95E             >
  84+ E95E             >//              ______________________________________________________________________
  84+ E95E             >//              Dictionary part
  84+ E95E             >
  84+ E95E             >                org     Dict_Ptr
  84+ 754D             >
  84+ 754D 5C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 754F             >
  84+ 754F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 754F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7552             >
  84+ 7552             >
  84+ 7552             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7552             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7552             >
  84+ 7552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7552
  86+ 7552 33 74                        dw      CREATE
  87+ 7554
  88+ 7554                              // dummy word + link part
  89+ 7554 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7558 73 6B
  90+ 755A FD 6A 46 69                  dw      CURRENT, FETCH          // current @
  91+ 755E 46 69                        dw      FETCH                   // @
  92+ 7560                          //  dw      CELL_MINUS              // cell-
  93+ 7560 73 6B                        dw      COMMA                   // ,
  94+ 7562
  95+ 7562                              // voc-link part
  96+ 7562 5D 6B                        dw      HERE                    // here
  97+ 7564 BB 6A 46 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7568 73 6B                        dw      COMMA                   // ,
  99+ 756A BB 6A 50 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 756E                              // DOES part
 101+ 756E C2 6E                        dw      C_DOES                  // _does>_
 102+ 7570              Vocabulary_Does:
 103+ 7570                        //    nop
 104+ 7570 CD E3 69                     call    Enter_Ptr
 105+ 7573
 106+ 7573 8D 68                        dw      CELL_PLUS               // cell+
 107+ 7575 F7 6A 50 69                  dw      CONTEXT, STORE          // context !
 108+ 7579 11 68                        dw      EXIT                    // ;
 109+ 757B
 110+ 757B              //  ______________________________________________________________________
 111+ 757B              //
 112+ 757B              // forth        --
 113+ 757B              // Name of the first vocabulary.
 114+ 757B              // It makes FORTH the CONTEXT vocabulary.
 115+ 757B              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 757B              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 757B              // of a colon definition to be able to select the vocabulary.
 118+ 757B
 119+ 757B                              New_Def FORTH, "FORTH", Vocabulary_Does, is_immediate
 119+ 757B             >
 119+ 757B             >Dict_Ptr        defl    $
 119+ 757B             >
 119+ 757B             >//              ______________________________________________________________________
 119+ 757B             >//              Heap part
 119+ 757B             >
 119+ 757B             >
 119+ 757B             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E95E             >
 119+ E95E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E95E             >Latest_Definition defl  Heap_Ptr
 119+ E95E             >
 119+ E95E             >                // dummy db directives used to calculate length of namec
 119+ E95E 46 4F 52 54 >                db      "FORTH"
 119+ E962 48          >
 119+ E963             >len_NFA         defl    $ - temp_NFA
 119+ E963             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E95E             >
 119+ E95E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E95F 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E963 48          >
 119+ E964             >                org     $-1                 // alter last byte of Name just above to set
 119+ E963 C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E964             >
 119+ E964 4F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E966             >Prev_Ptr        defl    Heap_Ptr
 119+ E966             >
 119+ E966             >mirror_Ptr      defl    $
 119+ E966             >
 119+ E966 7D 75       >                dw      Dict_Ptr + 2        // xt
 119+ E968             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E968             >
 119+ E968             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E968             >
 119+ E968             >//              ______________________________________________________________________
 119+ E968             >//              Dictionary part
 119+ E968             >
 119+ E968             >                org     Dict_Ptr
 119+ 757B             >
 119+ 757B 66 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 757D             >
 119+ 757D             >FORTH:          if Vocabulary_Does != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 757D CD 70 75    >                call    Vocabulary_Does ; ok        // for primitive definitions  actual code
 119+ 7580             >
 119+ 7580             >
 119+ 7580             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 7580             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 7580             >
 119+ 7580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 7580
 121+ 7580 81 A0                        db      $81, $A0
 122+ 7582              Forth_Latest_Ptr:
 123+ 7582 5E 09                        dw      Latest_Definition
 124+ 7584              Voclink_Ptr:
 125+ 7584 00 00                        dw      0
 126+ 7586
 127+ 7586              // ____
 128+ 7586              // temp_VOC        defl    $                   // save this address
 129+ 7586              //              org     (Heap_Ptr & $1FFF) + $E000
 130+ 7586              //              db      $81, $A0
 131+ 7586              // Forth_Latest_Ptr_HEAP:
 132+ 7586              //                 dw      Latest_Definition
 133+ 7586              // Voclink_Ptr_HEAP:
 134+ 7586              //                 dw      0
 135+ 7586              // Heap_Ptr        defl    $ - $E000           // save current HP
 136+ 7586              //                 org     temp_VOC
 137+ 7586              // ____
 138+ 7586
 139+ 7586              // Any new vocabulary is structured as follow:
 140+ 7586              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 141+ 7586              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 142+ 7586              // PFA+4 always contains the LATEST word of this VOCABULARY.
 143+ 7586              //       at creations it points to the null-word of its parent vocabulary
 144+ 7586              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 145+ 7586              // PFA+6 is the pointer that builds up the vocabulary linked list.
 146+ 7586              //       FORTH has 0 here to signal the end of the list and user's variable
 147+ 7586              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 148+ 7586              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 149+ 7586              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 150+ 7586
 151+ 7586              //  ______________________________________________________________________
 152+ 7586              //
 153+ 7586              // definitions  --
 154+ 7586              // Used in the form  cccc DEFINITIONS
 155+ 7586              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 156+ 7586              // vocabulary cccc.
 157+ 7586                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 157+ 7586             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 157+ 7586             >
 157+ 7586             >Dict_Ptr        defl    $
 157+ 7586             >
 157+ 7586             >//              ______________________________________________________________________
 157+ 7586             >//              Heap part
 157+ 7586             >
 157+ 7586             >
 157+ 7586             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E968             >
 157+ E968             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E968             >Latest_Definition defl  Heap_Ptr
 157+ E968             >
 157+ E968             >                // dummy db directives used to calculate length of namec
 157+ E968 44 45 46 49 >                db      "DEFINITIONS"
 157+ E96C 4E 49 54 49 >
 157+ E970 4F 4E 53    >
 157+ E973             >len_NFA         defl    $ - temp_NFA
 157+ E973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E968             >
 157+ E968 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E969 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 157+ E96D 4E 49 54 49 >
 157+ E971 4F 4E 53    >
 157+ E974             >                org     $-1                 // alter last byte of Name just above to set
 157+ E973 D3          >                db      {b $} | END_BIT     // msb as name end
 157+ E974             >
 157+ E974 5E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E976             >Prev_Ptr        defl    Heap_Ptr
 157+ E976             >
 157+ E976             >mirror_Ptr      defl    $
 157+ E976             >
 157+ E976 88 75       >                dw      Dict_Ptr + 2        // xt
 157+ E978             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E978             >
 157+ E978             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E978             >
 157+ E978             >//              ______________________________________________________________________
 157+ E978             >//              Dictionary part
 157+ E978             >
 157+ E978             >                org     Dict_Ptr
 157+ 7586             >
 157+ 7586 76 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 7588             >
 157+ 7588             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 7588 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 758B             >
 157+ 758B             >
 157+ 758B             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 758B             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 758B             >
 157+ 758B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 758B F7 6A 46 69                  dw      CONTEXT, FETCH          // context @
 159+ 758F FD 6A 50 69                  dw      CURRENT, STORE          // current !
 160+ 7593 11 68                        dw      EXIT                    // ;
 161+ 7595
 162+ 7595              //  ______________________________________________________________________
 163+ 7595              //
 164+ 7595              // (            -- cccc )
 165+ 7595              // the following text is interpreted as a comment until a closing )
 166+ 7595                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 166+ 7595             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 166+ 7595             >
 166+ 7595             >Dict_Ptr        defl    $
 166+ 7595             >
 166+ 7595             >//              ______________________________________________________________________
 166+ 7595             >//              Heap part
 166+ 7595             >
 166+ 7595             >
 166+ 7595             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E978             >
 166+ E978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E978             >Latest_Definition defl  Heap_Ptr
 166+ E978             >
 166+ E978             >                // dummy db directives used to calculate length of namec
 166+ E978 28          >                db      "("
 166+ E979             >len_NFA         defl    $ - temp_NFA
 166+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E978             >
 166+ E978 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E979 28          >                db      "("               // name string in 7-bit ascii, but
 166+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 166+ E979 A8          >                db      {b $} | END_BIT     // msb as name end
 166+ E97A             >
 166+ E97A 68 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E97C             >Prev_Ptr        defl    Heap_Ptr
 166+ E97C             >
 166+ E97C             >mirror_Ptr      defl    $
 166+ E97C             >
 166+ E97C 97 75       >                dw      Dict_Ptr + 2        // xt
 166+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E97E             >
 166+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E97E             >
 166+ E97E             >//              ______________________________________________________________________
 166+ E97E             >//              Dictionary part
 166+ E97E             >
 166+ E97E             >                org     Dict_Ptr
 166+ 7595             >
 166+ 7595 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 7597             >
 166+ 7597             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7597 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 166+ 759A             >
 166+ 759A             >
 166+ 759A             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 759A             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 759A             >
 166+ 759A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 759A A3 63 29 00                  dw      LIT, ")"                // [char] )
 168+ 759E FF 70 C1 68                  dw      WORD, DROP              // word drop
 169+ 75A2 11 68                        dw      EXIT                    // ;
 170+ 75A4
 171+ 75A4              //  ______________________________________________________________________
 172+ 75A4              //
 173+ 75A4              // quit         --
 174+ 75A4              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 175+ 75A4                              Colon_Def QUIT, "QUIT", is_normal
 175+ 75A4             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 175+ 75A4             >
 175+ 75A4             >Dict_Ptr        defl    $
 175+ 75A4             >
 175+ 75A4             >//              ______________________________________________________________________
 175+ 75A4             >//              Heap part
 175+ 75A4             >
 175+ 75A4             >
 175+ 75A4             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E97E             >
 175+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E97E             >Latest_Definition defl  Heap_Ptr
 175+ E97E             >
 175+ E97E             >                // dummy db directives used to calculate length of namec
 175+ E97E 51 55 49 54 >                db      "QUIT"
 175+ E982             >len_NFA         defl    $ - temp_NFA
 175+ E982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E97E             >
 175+ E97E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E97F 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 175+ E983             >                org     $-1                 // alter last byte of Name just above to set
 175+ E982 D4          >                db      {b $} | END_BIT     // msb as name end
 175+ E983             >
 175+ E983 78 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E985             >Prev_Ptr        defl    Heap_Ptr
 175+ E985             >
 175+ E985             >mirror_Ptr      defl    $
 175+ E985             >
 175+ E985 A6 75       >                dw      Dict_Ptr + 2        // xt
 175+ E987             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E987             >
 175+ E987             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E987             >
 175+ E987             >//              ______________________________________________________________________
 175+ E987             >//              Dictionary part
 175+ E987             >
 175+ E987             >                org     Dict_Ptr
 175+ 75A4             >
 175+ 75A4 85 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 75A6             >
 175+ 75A6             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 75A6 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 75A9             >
 175+ 75A9             >
 175+ 75A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 75A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 75A9             >
 175+ 75A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 75A9
 177+ 75A9 45 6B 46 69                  dw      SOURCE_ID, FETCH        // source-id @
 178+ 75AD BE 66 C1 68                  dw      F_CLOSE, DROP           // f_close drop
 179+ 75B1 38 6A 45 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 179+ 75B5 50 69
 180+ 75B7 38 6A D9 6A                  dw      ZERO, BLK, STORE        // 0 blk !
 180+ 75BB 50 69
 181+ 75BD 35 6E                        dw      SQUARED_OPEN            // [compile] [
 182+ 75BF                                                              // begin
 183+ 75BF              Quit_Begin:
 184+ 75BF 97 6A 46 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 184+ 75C3 0C 68
 185+ 75C5 3A 6C                        dw      CR                      //      cr
 186+ 75C7 9C 70                        dw      QUERY                   //      query
 187+ 75C9              Next_Breakpoint_1:
 188+ 75C9 04 75                        dw      INTERPRET               //      interpret
 189+ 75CB 03 6B 46 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 189+ 75CF 36 68
 190+ 75D1                                                              //      if
 191+ 75D1 F3 63                        dw      ZBRANCH
 192+ 75D3 07 00                        dw      Quit_Endif - $
 193+ 75D5 4A 71                        dw          C_DOT_QUOTE
 194+ 75D7 02 6F 6B                     db          2, "ok"             //          .( ok)
 195+ 75DA              Quit_Endif:                                     //      else
 196+ 75DA                                                              // again
 197+ 75DA EF 63                        dw      BRANCH
 198+ 75DC E3 FF                        dw      Quit_Begin - $
 199+ 75DE 11 68                        dw      EXIT                    // ;
 200+ 75E0
 201+ 75E0              //  ______________________________________________________________________
 202+ 75E0              //
 203+ 75E0              // abort        --
 204+ 75E0                              Colon_Def ABORT, "ABORT", is_normal
 204+ 75E0             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 204+ 75E0             >
 204+ 75E0             >Dict_Ptr        defl    $
 204+ 75E0             >
 204+ 75E0             >//              ______________________________________________________________________
 204+ 75E0             >//              Heap part
 204+ 75E0             >
 204+ 75E0             >
 204+ 75E0             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E987             >
 204+ E987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E987             >Latest_Definition defl  Heap_Ptr
 204+ E987             >
 204+ E987             >                // dummy db directives used to calculate length of namec
 204+ E987 41 42 4F 52 >                db      "ABORT"
 204+ E98B 54          >
 204+ E98C             >len_NFA         defl    $ - temp_NFA
 204+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E987             >
 204+ E987 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E988 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 204+ E98C 54          >
 204+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 204+ E98C D4          >                db      {b $} | END_BIT     // msb as name end
 204+ E98D             >
 204+ E98D 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E98F             >Prev_Ptr        defl    Heap_Ptr
 204+ E98F             >
 204+ E98F             >mirror_Ptr      defl    $
 204+ E98F             >
 204+ E98F E2 75       >                dw      Dict_Ptr + 2        // xt
 204+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E991             >
 204+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E991             >
 204+ E991             >//              ______________________________________________________________________
 204+ E991             >//              Dictionary part
 204+ E991             >
 204+ E991             >                org     Dict_Ptr
 204+ 75E0             >
 204+ 75E0 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 75E2             >
 204+ 75E2             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 75E2 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 75E5             >
 204+ 75E5             >
 204+ 75E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 75E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 75E5             >
 204+ 75E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 75E5 91 6A 46 69                  dw      S0, FETCH               // s0 @
 206+ 75E9 5B 6A                        dw      BL                      // bl
 207+ 75EB B8 68 50 69                  dw      OVER, STORE             // over !
 208+ 75EF 01 68                        dw      SPSTORE                 // sp!
 209+ 75F1 7E 6E                        dw      DECIMAL                 // decimal
 210+ 75F3 7D 75                        dw      FORTH                   // [compile] forth
 211+ 75F5 88 75                        dw      DEFINITIONS             // definitions
 212+ 75F7
 213+ 75F7 35 6E                        dw      SQUARED_OPEN            // [compile] [
 214+ 75F9 97 6A 46 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 214+ 75FD 0C 68
 215+ 75FF
 216+ 75FF              Autoexec_Ptr:
 217+ 75FF FB 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 218+ 7601 A6 75                        dw      QUIT                    // quit
 219+ 7603              //              dw      EXIT                    // ;
 220+ 7603
 221+ 7603              //  ______________________________________________________________________
 222+ 7603              //
 223+ 7603              // warm         --
 224+ 7603                              Colon_Def WARM, "WARM", is_normal
 224+ 7603             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 224+ 7603             >
 224+ 7603             >Dict_Ptr        defl    $
 224+ 7603             >
 224+ 7603             >//              ______________________________________________________________________
 224+ 7603             >//              Heap part
 224+ 7603             >
 224+ 7603             >
 224+ 7603             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E991             >
 224+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E991             >Latest_Definition defl  Heap_Ptr
 224+ E991             >
 224+ E991             >                // dummy db directives used to calculate length of namec
 224+ E991 57 41 52 4D >                db      "WARM"
 224+ E995             >len_NFA         defl    $ - temp_NFA
 224+ E995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E991             >
 224+ E991 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E992 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 224+ E996             >                org     $-1                 // alter last byte of Name just above to set
 224+ E995 CD          >                db      {b $} | END_BIT     // msb as name end
 224+ E996             >
 224+ E996 87 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E998             >Prev_Ptr        defl    Heap_Ptr
 224+ E998             >
 224+ E998             >mirror_Ptr      defl    $
 224+ E998             >
 224+ E998 05 76       >                dw      Dict_Ptr + 2        // xt
 224+ E99A             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E99A             >
 224+ E99A             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E99A             >
 224+ E99A             >//              ______________________________________________________________________
 224+ E99A             >//              Dictionary part
 224+ E99A             >
 224+ E99A             >                org     Dict_Ptr
 224+ 7603             >
 224+ 7603 98 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7605             >
 224+ 7605             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7605 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7608             >
 224+ 7608             >
 224+ 7608             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7608             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7608             >
 224+ 7608             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7608 CA 78                        dw      BLK_INIT                // blk-init
 226+ 760A                          //  dw      SPLASH                  // splash
 227+ 760A                          //  dw      LIT, 7, EMIT            // 7 emit
 228+ 760A E2 75                        dw      ABORT                   // abort
 229+ 760C                          //  dw      EXIT                    // exit
 230+ 760C
 231+ 760C              //  ______________________________________________________________________
 232+ 760C              //
 233+ 760C              // cold         --
 234+ 760C                              Colon_Def COLD, "COLD", is_normal
 234+ 760C             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 234+ 760C             >
 234+ 760C             >Dict_Ptr        defl    $
 234+ 760C             >
 234+ 760C             >//              ______________________________________________________________________
 234+ 760C             >//              Heap part
 234+ 760C             >
 234+ 760C             >
 234+ 760C             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E99A             >
 234+ E99A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E99A             >Latest_Definition defl  Heap_Ptr
 234+ E99A             >
 234+ E99A             >                // dummy db directives used to calculate length of namec
 234+ E99A 43 4F 4C 44 >                db      "COLD"
 234+ E99E             >len_NFA         defl    $ - temp_NFA
 234+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E99A             >
 234+ E99A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E99B 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 234+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 234+ E99E C4          >                db      {b $} | END_BIT     // msb as name end
 234+ E99F             >
 234+ E99F 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 234+ E9A1             >
 234+ E9A1             >mirror_Ptr      defl    $
 234+ E9A1             >
 234+ E9A1 0E 76       >                dw      Dict_Ptr + 2        // xt
 234+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E9A3             >
 234+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E9A3             >
 234+ E9A3             >//              ______________________________________________________________________
 234+ E9A3             >//              Dictionary part
 234+ E9A3             >
 234+ E9A3             >                org     Dict_Ptr
 234+ 760C             >
 234+ 760C A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 760E             >
 234+ 760E             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 760E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 7611             >
 234+ 7611             >
 234+ 7611             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 7611             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 7611             >
 234+ 7611             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 7611 FF 69 FF 69                  dw      NOOP, NOOP
 236+ 7615 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 237+ 7619 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 238+ 761D 46 69                        dw      FETCH                   // @
 239+ 761F A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 239+ 7623 5E 68
 240+ 7625 A3 63 16 00                  dw      LIT, 22                 // 22
 241+ 7629 56 67                        dw      CMOVE
 242+ 762B A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 243+ 762F 46 69                        dw      FETCH                   // @
 244+ 7631 A3 63 82 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 245+ 7635 50 69                        dw      STORE                   // !
 246+ 7637 38 6A D3 6A                  dw      ZERO, NMODE, STORE      // 0 nmode !
 246+ 763B 50 69
 247+ 763D C1 6A 46 69                  dw      FIRST, FETCH, DUP       // first @ dup
 247+ 7641 DC 68
 248+ 7643 2D 6B 50 69                  dw      USED, STORE             // used !
 249+ 7647 33 6B 50 69                  dw      PREV, STORE             // prev !
 250+ 764B A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 250+ 764F 3F 6B 50 69
 251+ 7653              //              dw      LIT, 8
 252+ 7653              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 253+ 7653 61 79                        dw      EMPTY_BUFFERS
 254+ 7655 38 6A D9 6A                  dw      ZERO, BLK, STORE
 254+ 7659 50 69
 255+ 765B 38 6A 45 6B                  dw      ZERO, SOURCE_ID, STORE
 255+ 765F 50 69
 256+ 7661
 257+ 7661 A3 63 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 257+ 7665 0F 6C
 258+ 7667 38 6A 0F 6C                  dw      ZERO, EMITC
 259+ 766B
 260+ 766B 05 76        Warm_Start:     dw      WARM
 261+ 766D 0E 76        Cold_Start:     dw      COLD
 262+ 766F              //              dw      EXIT
 263+ 766F
 264+ 766F              //  ______________________________________________________________________
 265+ 766F              WarmRoutine:
 266+ 766F              ColdRoutine:
 267+ 766F                              // First, save Basic's status: H'L' and SP
 268+ 766F D9                           exx
 269+ 7670 E5                           push    hl                      // save Basic's return address
 270+ 7671 D9                           exx
 271+ 7672 ED 73 6E 63                  ld      (SP_Basic), sp
 272+ 7676
 273+ 7676                              // pre-set the four main 16-bit registers
 274+ 7676 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 275+ 767A ED 5B 7A 63                  ld      de, (R0_origin)         // Return Stack Pointer
 276+ 767E 01 6B 76                     ld      bc, Warm_Start          // Instruction Pointer
 277+ 7681 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 278+ 7685
 279+ 7685 38 02                        jr      c, Warm_Skip
 280+ 7687 03                           inc     bc
 281+ 7688 03                           inc     bc
 282+ 7689              Warm_Skip:
 283+ 7689                              next
 283+ 7689 DD E9       >                jp      (ix)
 284+ 768B
 285+ 768B              //  ______________________________________________________________________
 286+ 768B              //
 287+ 768B              // basic        --
 288+ 768B                              New_Def BASIC, "BASIC", is_code, is_normal
 288+ 768B             >
 288+ 768B             >Dict_Ptr        defl    $
 288+ 768B             >
 288+ 768B             >//              ______________________________________________________________________
 288+ 768B             >//              Heap part
 288+ 768B             >
 288+ 768B             >
 288+ 768B             >                org     (Heap_Ptr & $1FFF) + $E000
 288+ E9A3             >
 288+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 288+ E9A3             >Latest_Definition defl  Heap_Ptr
 288+ E9A3             >
 288+ E9A3             >                // dummy db directives used to calculate length of namec
 288+ E9A3 42 41 53 49 >                db      "BASIC"
 288+ E9A7 43          >
 288+ E9A8             >len_NFA         defl    $ - temp_NFA
 288+ E9A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 288+ E9A3             >
 288+ E9A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 288+ E9A4 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 288+ E9A8 43          >
 288+ E9A9             >                org     $-1                 // alter last byte of Name just above to set
 288+ E9A8 C3          >                db      {b $} | END_BIT     // msb as name end
 288+ E9A9             >
 288+ E9A9 9A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 288+ E9AB             >Prev_Ptr        defl    Heap_Ptr
 288+ E9AB             >
 288+ E9AB             >mirror_Ptr      defl    $
 288+ E9AB             >
 288+ E9AB 8D 76       >                dw      Dict_Ptr + 2        // xt
 288+ E9AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 288+ E9AD             >
 288+ E9AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 288+ E9AD             >
 288+ E9AD             >//              ______________________________________________________________________
 288+ E9AD             >//              Dictionary part
 288+ E9AD             >
 288+ E9AD             >                org     Dict_Ptr
 288+ 768B             >
 288+ 768B AB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 288+ 768D             >
 288+ 768D             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 288+ 768D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 288+ 768D ~           >
 288+ 768D ~           >
 288+ 768D             >                endif           ; ok        // for other definitions it "points" the correct handler
 288+ 768D             >                // Use of "; ok" to suppress "warning[fwdref]"
 288+ 768D             >
 288+ 768D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 289+ 768D C1                           pop     bc                      // return  TOS  value to Basic
 290+ 768E 21 00 00                     ld      hl, 0
 291+ 7691 39                           add     hl, sp
 292+ 7692 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 293+ 7696              //              nop
 294+ 7696 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 295+ 7699 D9                           exx
 296+ 769A E1                           pop     hl                      // restore h'l'
 297+ 769B D9                           exx
 298+ 769C C9                           ret                             // to where USR Basic was left
 299+ 769D
 300+ 769D              //  ______________________________________________________________________
 301+ 769D              //
 302+ 769D              // +-           n1 n2 -- n3
 303+ 769D              // leaves n1 with the sign of n2 as n3.
 304+ 769D                              Colon_Def PLUS_MINUS, "+-", is_normal
 304+ 769D             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 304+ 769D             >
 304+ 769D             >Dict_Ptr        defl    $
 304+ 769D             >
 304+ 769D             >//              ______________________________________________________________________
 304+ 769D             >//              Heap part
 304+ 769D             >
 304+ 769D             >
 304+ 769D             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E9AD             >
 304+ E9AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E9AD             >Latest_Definition defl  Heap_Ptr
 304+ E9AD             >
 304+ E9AD             >                // dummy db directives used to calculate length of namec
 304+ E9AD 2B 2D       >                db      "+-"
 304+ E9AF             >len_NFA         defl    $ - temp_NFA
 304+ E9AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E9AD             >
 304+ E9AD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E9AE 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 304+ E9B0             >                org     $-1                 // alter last byte of Name just above to set
 304+ E9AF AD          >                db      {b $} | END_BIT     // msb as name end
 304+ E9B0             >
 304+ E9B0 A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E9B2             >Prev_Ptr        defl    Heap_Ptr
 304+ E9B2             >
 304+ E9B2             >mirror_Ptr      defl    $
 304+ E9B2             >
 304+ E9B2 9F 76       >                dw      Dict_Ptr + 2        // xt
 304+ E9B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E9B4             >
 304+ E9B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E9B4             >
 304+ E9B4             >//              ______________________________________________________________________
 304+ E9B4             >//              Dictionary part
 304+ E9B4             >
 304+ E9B4             >                org     Dict_Ptr
 304+ 769D             >
 304+ 769D B2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 769F             >
 304+ 769F             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 769F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 76A2             >
 304+ 76A2             >
 304+ 76A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 76A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 76A2             >
 304+ 76A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 76A2 47 68                        dw      ZLESS                   // 0<
 306+ 76A4                                                              // if
 307+ 76A4 F3 63                        dw      ZBRANCH
 308+ 76A6 04 00                        dw      Plus_Minus_Endif - $
 309+ 76A8 9E 68                        dw          MINUS               //      minus
 310+ 76AA              Plus_Minus_Endif:                               // endif
 311+ 76AA 11 68                        dw      EXIT                    // ;
 312+ 76AC
 313+ 76AC              //  ______________________________________________________________________
 314+ 76AC              //
 315+ 76AC              // d+-          d1 n -- d2
 316+ 76AC              // leaves d1 with the sign of n as d2.
 317+ 76AC                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 317+ 76AC             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 317+ 76AC             >
 317+ 76AC             >Dict_Ptr        defl    $
 317+ 76AC             >
 317+ 76AC             >//              ______________________________________________________________________
 317+ 76AC             >//              Heap part
 317+ 76AC             >
 317+ 76AC             >
 317+ 76AC             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ E9B4             >
 317+ E9B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ E9B4             >Latest_Definition defl  Heap_Ptr
 317+ E9B4             >
 317+ E9B4             >                // dummy db directives used to calculate length of namec
 317+ E9B4 44 2B 2D    >                db      "D+-"
 317+ E9B7             >len_NFA         defl    $ - temp_NFA
 317+ E9B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ E9B4             >
 317+ E9B4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ E9B5 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 317+ E9B8             >                org     $-1                 // alter last byte of Name just above to set
 317+ E9B7 AD          >                db      {b $} | END_BIT     // msb as name end
 317+ E9B8             >
 317+ E9B8 AD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 317+ E9BA             >Prev_Ptr        defl    Heap_Ptr
 317+ E9BA             >
 317+ E9BA             >mirror_Ptr      defl    $
 317+ E9BA             >
 317+ E9BA AE 76       >                dw      Dict_Ptr + 2        // xt
 317+ E9BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ E9BC             >
 317+ E9BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ E9BC             >
 317+ E9BC             >//              ______________________________________________________________________
 317+ E9BC             >//              Dictionary part
 317+ E9BC             >
 317+ E9BC             >                org     Dict_Ptr
 317+ 76AC             >
 317+ 76AC BA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 317+ 76AE             >
 317+ 76AE             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 76AE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 317+ 76B1             >
 317+ 76B1             >
 317+ 76B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 76B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 76B1             >
 317+ 76B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 76B1 47 68                        dw      ZLESS                   // 0<
 319+ 76B3                                                              // if
 320+ 76B3 F3 63                        dw      ZBRANCH
 321+ 76B5 04 00                        dw      DPlus_Minus_Endif - $
 322+ 76B7 AB 68                        dw          DMINUS              //      dminus
 323+ 76B9              DPlus_Minus_Endif:                              // endif
 324+ 76B9 11 68                        dw      EXIT                    // ;
 325+ 76BB
 326+ 76BB              //  ______________________________________________________________________
 327+ 76BB              //
 328+ 76BB              // abs          n1 -- n2
 329+ 76BB                              Colon_Def ABS_OP, "ABS", is_normal
 329+ 76BB             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 329+ 76BB             >
 329+ 76BB             >Dict_Ptr        defl    $
 329+ 76BB             >
 329+ 76BB             >//              ______________________________________________________________________
 329+ 76BB             >//              Heap part
 329+ 76BB             >
 329+ 76BB             >
 329+ 76BB             >                org     (Heap_Ptr & $1FFF) + $E000
 329+ E9BC             >
 329+ E9BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ E9BC             >Latest_Definition defl  Heap_Ptr
 329+ E9BC             >
 329+ E9BC             >                // dummy db directives used to calculate length of namec
 329+ E9BC 41 42 53    >                db      "ABS"
 329+ E9BF             >len_NFA         defl    $ - temp_NFA
 329+ E9BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ E9BC             >
 329+ E9BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ E9BD 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 329+ E9C0             >                org     $-1                 // alter last byte of Name just above to set
 329+ E9BF D3          >                db      {b $} | END_BIT     // msb as name end
 329+ E9C0             >
 329+ E9C0 B4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 329+ E9C2             >Prev_Ptr        defl    Heap_Ptr
 329+ E9C2             >
 329+ E9C2             >mirror_Ptr      defl    $
 329+ E9C2             >
 329+ E9C2 BD 76       >                dw      Dict_Ptr + 2        // xt
 329+ E9C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 329+ E9C4             >
 329+ E9C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 329+ E9C4             >
 329+ E9C4             >//              ______________________________________________________________________
 329+ E9C4             >//              Dictionary part
 329+ E9C4             >
 329+ E9C4             >                org     Dict_Ptr
 329+ 76BB             >
 329+ 76BB C2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 329+ 76BD             >
 329+ 76BD             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 76BD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 76C0             >
 329+ 76C0             >
 329+ 76C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 76C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 76C0             >
 329+ 76C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 76C0 DC 68                        dw      DUP                     // dup
 331+ 76C2 9F 76                        dw      PLUS_MINUS              // +-
 332+ 76C4 11 68                        dw      EXIT                    // ;
 333+ 76C6
 334+ 76C6              //  ______________________________________________________________________
 335+ 76C6              //
 336+ 76C6              // dabs         d1 -- d2
 337+ 76C6                              Colon_Def DABS, "DABS", is_normal
 337+ 76C6             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 337+ 76C6             >
 337+ 76C6             >Dict_Ptr        defl    $
 337+ 76C6             >
 337+ 76C6             >//              ______________________________________________________________________
 337+ 76C6             >//              Heap part
 337+ 76C6             >
 337+ 76C6             >
 337+ 76C6             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E9C4             >
 337+ E9C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E9C4             >Latest_Definition defl  Heap_Ptr
 337+ E9C4             >
 337+ E9C4             >                // dummy db directives used to calculate length of namec
 337+ E9C4 44 41 42 53 >                db      "DABS"
 337+ E9C8             >len_NFA         defl    $ - temp_NFA
 337+ E9C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E9C4             >
 337+ E9C4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E9C5 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 337+ E9C9             >                org     $-1                 // alter last byte of Name just above to set
 337+ E9C8 D3          >                db      {b $} | END_BIT     // msb as name end
 337+ E9C9             >
 337+ E9C9 BC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E9CB             >Prev_Ptr        defl    Heap_Ptr
 337+ E9CB             >
 337+ E9CB             >mirror_Ptr      defl    $
 337+ E9CB             >
 337+ E9CB C8 76       >                dw      Dict_Ptr + 2        // xt
 337+ E9CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E9CD             >
 337+ E9CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E9CD             >
 337+ E9CD             >//              ______________________________________________________________________
 337+ E9CD             >//              Dictionary part
 337+ E9CD             >
 337+ E9CD             >                org     Dict_Ptr
 337+ 76C6             >
 337+ 76C6 CB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 76C8             >
 337+ 76C8             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 76C8 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 337+ 76CB             >
 337+ 76CB             >
 337+ 76CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 76CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 76CB             >
 337+ 76CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 76CB DC 68                        dw      DUP                     // dup
 339+ 76CD AE 76                        dw      DPLUS_MINUS             // d+-
 340+ 76CF 11 68                        dw      EXIT                    // ;
 341+ 76D1
 342+ 76D1              //  ______________________________________________________________________
 343+ 76D1              //
 344+ 76D1              // m*           n1 n2 -- d
 345+ 76D1              // multiply two integer giving a double
 346+ 76D1                              Colon_Def MMUL, "M*", is_normal
 346+ 76D1             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 346+ 76D1             >
 346+ 76D1             >Dict_Ptr        defl    $
 346+ 76D1             >
 346+ 76D1             >//              ______________________________________________________________________
 346+ 76D1             >//              Heap part
 346+ 76D1             >
 346+ 76D1             >
 346+ 76D1             >                org     (Heap_Ptr & $1FFF) + $E000
 346+ E9CD             >
 346+ E9CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ E9CD             >Latest_Definition defl  Heap_Ptr
 346+ E9CD             >
 346+ E9CD             >                // dummy db directives used to calculate length of namec
 346+ E9CD 4D 2A       >                db      "M*"
 346+ E9CF             >len_NFA         defl    $ - temp_NFA
 346+ E9CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ E9CD             >
 346+ E9CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ E9CE 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 346+ E9D0             >                org     $-1                 // alter last byte of Name just above to set
 346+ E9CF AA          >                db      {b $} | END_BIT     // msb as name end
 346+ E9D0             >
 346+ E9D0 C4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 346+ E9D2             >Prev_Ptr        defl    Heap_Ptr
 346+ E9D2             >
 346+ E9D2             >mirror_Ptr      defl    $
 346+ E9D2             >
 346+ E9D2 D3 76       >                dw      Dict_Ptr + 2        // xt
 346+ E9D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 346+ E9D4             >
 346+ E9D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 346+ E9D4             >
 346+ E9D4             >//              ______________________________________________________________________
 346+ E9D4             >//              Dictionary part
 346+ E9D4             >
 346+ E9D4             >                org     Dict_Ptr
 346+ 76D1             >
 346+ 76D1 D2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 346+ 76D3             >
 346+ 76D3             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 76D3 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 76D6             >
 346+ 76D6             >
 346+ 76D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 76D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 76D6             >
 346+ 76D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 76D6 24 69 EC 67                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 347+ 76DA 1B 68
 348+ 76DC BD 76 D5 68                  dw      ABS_OP, SWAP            // abs swap
 349+ 76E0 BD 76 79 67                  dw      ABS_OP, UM_MUL          // abs um*
 350+ 76E4 26 68 AE 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 351+ 76E8 11 68                        dw      EXIT                    // ;
 352+ 76EA
 353+ 76EA              //  ______________________________________________________________________
 354+ 76EA              //
 355+ 76EA              // sm/rem       d n -- q r
 356+ 76EA              // Symmetric division: divides a double into n giving quotient q and remainder r
 357+ 76EA              // the remainder has the sign of d.
 358+ 76EA                              Colon_Def SMDIVM, "SM/REM", is_normal
 358+ 76EA             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 358+ 76EA             >
 358+ 76EA             >Dict_Ptr        defl    $
 358+ 76EA             >
 358+ 76EA             >//              ______________________________________________________________________
 358+ 76EA             >//              Heap part
 358+ 76EA             >
 358+ 76EA             >
 358+ 76EA             >                org     (Heap_Ptr & $1FFF) + $E000
 358+ E9D4             >
 358+ E9D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ E9D4             >Latest_Definition defl  Heap_Ptr
 358+ E9D4             >
 358+ E9D4             >                // dummy db directives used to calculate length of namec
 358+ E9D4 53 4D 2F 52 >                db      "SM/REM"
 358+ E9D8 45 4D       >
 358+ E9DA             >len_NFA         defl    $ - temp_NFA
 358+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ E9D4             >
 358+ E9D4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ E9D5 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 358+ E9D9 45 4D       >
 358+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 358+ E9DA CD          >                db      {b $} | END_BIT     // msb as name end
 358+ E9DB             >
 358+ E9DB CD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 358+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 358+ E9DD             >
 358+ E9DD             >mirror_Ptr      defl    $
 358+ E9DD             >
 358+ E9DD EC 76       >                dw      Dict_Ptr + 2        // xt
 358+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 358+ E9DF             >
 358+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 358+ E9DF             >
 358+ E9DF             >//              ______________________________________________________________________
 358+ E9DF             >//              Dictionary part
 358+ E9DF             >
 358+ E9DF             >                org     Dict_Ptr
 358+ 76EA             >
 358+ 76EA DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 358+ 76EC             >
 358+ 76EC             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 76EC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 358+ 76EF             >
 358+ 76EF             >
 358+ 76EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 76EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 76EF             >
 358+ 76EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 76EF B8 68 1B 68                  dw      OVER, TO_R, TO_R        // over >r >r
 359+ 76F3 1B 68
 360+ 76F5 C8 76 31 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 76F9 BD 76
 361+ 76FB A1 67                        dw      UMDIVMOD                // um/mod
 362+ 76FD 26 68                        dw      R_TO                    // r>
 363+ 76FF 31 68 EC 67                  dw      R_OP, XOR_OP            // r xor
 364+ 7703 9F 76 D5 68                  dw      PLUS_MINUS, SWAP        // +- swap
 365+ 7707 26 68                        dw      R_TO                    // r>
 366+ 7709 9F 76 D5 68                  dw      PLUS_MINUS, SWAP        // +- swap
 367+ 770D 11 68                        dw      EXIT                    // ;
 368+ 770F
 369+ 770F              //  ______________________________________________________________________
 370+ 770F              //
 371+ 770F              // fm/mod       d n -- q r
 372+ 770F              // Floored division: divides a double into n giving quotient q and remainder r
 373+ 770F              // the remainder has the sign of d.
 374+ 770F                              Colon_Def FMDIVM, "FM/MOD", is_normal
 374+ 770F             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 374+ 770F             >
 374+ 770F             >Dict_Ptr        defl    $
 374+ 770F             >
 374+ 770F             >//              ______________________________________________________________________
 374+ 770F             >//              Heap part
 374+ 770F             >
 374+ 770F             >
 374+ 770F             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E9DF             >
 374+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E9DF             >Latest_Definition defl  Heap_Ptr
 374+ E9DF             >
 374+ E9DF             >                // dummy db directives used to calculate length of namec
 374+ E9DF 46 4D 2F 4D >                db      "FM/MOD"
 374+ E9E3 4F 44       >
 374+ E9E5             >len_NFA         defl    $ - temp_NFA
 374+ E9E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E9DF             >
 374+ E9DF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E9E0 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 374+ E9E4 4F 44       >
 374+ E9E6             >                org     $-1                 // alter last byte of Name just above to set
 374+ E9E5 C4          >                db      {b $} | END_BIT     // msb as name end
 374+ E9E6             >
 374+ E9E6 D4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E9E8             >Prev_Ptr        defl    Heap_Ptr
 374+ E9E8             >
 374+ E9E8             >mirror_Ptr      defl    $
 374+ E9E8             >
 374+ E9E8 11 77       >                dw      Dict_Ptr + 2        // xt
 374+ E9EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E9EA             >
 374+ E9EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E9EA             >
 374+ E9EA             >//              ______________________________________________________________________
 374+ E9EA             >//              Dictionary part
 374+ E9EA             >
 374+ E9EA             >                org     Dict_Ptr
 374+ 770F             >
 374+ 770F E8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 7711             >
 374+ 7711             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 7711 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 7714             >
 374+ 7714             >
 374+ 7714             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 7714             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 7714             >
 374+ 7714             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 7714 DC 68 1B 68                  dw      DUP, TO_R               // dup >r
 376+ 7718 EC 76                        dw      SMDIVM
 377+ 771A B8 68 DC 68                  dw      OVER, DUP
 378+ 771E 36 68 36 68                  dw      ZEQUAL, ZEQUAL
 379+ 7722 D5 68 47 68                  dw      SWAP, ZLESS
 380+ 7726 31 68 47 68                  dw      R_OP, ZLESS
 381+ 772A EC 67 D1 67                  dw      XOR_OP, AND_OP
 382+ 772E F3 63                        dw      ZBRANCH
 383+ 7730 10 00                        dw      Fm_Mod_Else - $
 384+ 7732 7E 68                        dw          ONE_SUBTRACT
 385+ 7734 D5 68 26 68                  dw          SWAP, R_TO
 386+ 7738 5E 68 D5 68                  dw          PLUS, SWAP
 387+ 773C EF 63                        dw      BRANCH
 388+ 773E 06 00                        dw      Fm_Mod_Endif - $
 389+ 7740              Fm_Mod_Else:
 390+ 7740 26 68 C1 68                  dw          R_TO, DROP
 391+ 7744              Fm_Mod_Endif:
 392+ 7744 11 68                        dw      EXIT
 393+ 7746              //              dw      TWO_DUP                 // 2dup
 394+ 7746              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 395+ 7746              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 396+ 7746              //              dw      UMDIVMOD                // um/mod
 397+ 7746              //              dw      SWAP                    // swap
 398+ 7746              //              dw      II, ZLESS               // i'
 399+ 7746              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 400+ 7746              //              dw      R_TO                    // r>
 401+ 7746              //              dw      PLUS_MINUS, SWAP        // +- swap
 402+ 7746              //              dw      R_OP                    // r@
 403+ 7746              //              dw      ZLESS                   // i'
 404+ 7746              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 405+ 7746              //              dw      R_TO                    // r>
 406+ 7746              //              dw      PLUS_MINUS              // +- swap
 407+ 7746              //              dw      EXIT                    // ;
 408+ 7746
 409+ 7746              //  ______________________________________________________________________
 410+ 7746              //
 411+ 7746              // m/mod        d n -- q r
 412+ 7746              // multiply two integer giving a double
 413+ 7746                              Colon_Def MDIVM, "M/MOD", is_normal
 413+ 7746             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 413+ 7746             >
 413+ 7746             >Dict_Ptr        defl    $
 413+ 7746             >
 413+ 7746             >//              ______________________________________________________________________
 413+ 7746             >//              Heap part
 413+ 7746             >
 413+ 7746             >
 413+ 7746             >                org     (Heap_Ptr & $1FFF) + $E000
 413+ E9EA             >
 413+ E9EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ E9EA             >Latest_Definition defl  Heap_Ptr
 413+ E9EA             >
 413+ E9EA             >                // dummy db directives used to calculate length of namec
 413+ E9EA 4D 2F 4D 4F >                db      "M/MOD"
 413+ E9EE 44          >
 413+ E9EF             >len_NFA         defl    $ - temp_NFA
 413+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ E9EA             >
 413+ E9EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ E9EB 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 413+ E9EF 44          >
 413+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 413+ E9EF C4          >                db      {b $} | END_BIT     // msb as name end
 413+ E9F0             >
 413+ E9F0 DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 413+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 413+ E9F2             >
 413+ E9F2             >mirror_Ptr      defl    $
 413+ E9F2             >
 413+ E9F2 48 77       >                dw      Dict_Ptr + 2        // xt
 413+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 413+ E9F4             >
 413+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 413+ E9F4             >
 413+ E9F4             >//              ______________________________________________________________________
 413+ E9F4             >//              Dictionary part
 413+ E9F4             >
 413+ E9F4             >                org     Dict_Ptr
 413+ 7746             >
 413+ 7746 F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 413+ 7748             >
 413+ 7748             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 7748 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 413+ 774B             >
 413+ 774B             >
 413+ 774B             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 774B             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 774B             >
 413+ 774B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 774B EC 76                        dw      SMDIVM
 415+ 774D 11 68                        dw      EXIT                    // ;
 416+ 774F
 417+ 774F              //  ______________________________________________________________________
 418+ 774F              //
 419+ 774F              // m/           d n -- q
 420+ 774F              // multiply two integer giving a double
 421+ 774F                              Colon_Def MDIV, "M/", is_normal
 421+ 774F             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 421+ 774F             >
 421+ 774F             >Dict_Ptr        defl    $
 421+ 774F             >
 421+ 774F             >//              ______________________________________________________________________
 421+ 774F             >//              Heap part
 421+ 774F             >
 421+ 774F             >
 421+ 774F             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E9F4             >
 421+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E9F4             >Latest_Definition defl  Heap_Ptr
 421+ E9F4             >
 421+ E9F4             >                // dummy db directives used to calculate length of namec
 421+ E9F4 4D 2F       >                db      "M/"
 421+ E9F6             >len_NFA         defl    $ - temp_NFA
 421+ E9F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E9F4             >
 421+ E9F4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E9F5 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 421+ E9F7             >                org     $-1                 // alter last byte of Name just above to set
 421+ E9F6 AF          >                db      {b $} | END_BIT     // msb as name end
 421+ E9F7             >
 421+ E9F7 EA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E9F9             >Prev_Ptr        defl    Heap_Ptr
 421+ E9F9             >
 421+ E9F9             >mirror_Ptr      defl    $
 421+ E9F9             >
 421+ E9F9 51 77       >                dw      Dict_Ptr + 2        // xt
 421+ E9FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E9FB             >
 421+ E9FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E9FB             >
 421+ E9FB             >//              ______________________________________________________________________
 421+ E9FB             >//              Dictionary part
 421+ E9FB             >
 421+ E9FB             >                org     Dict_Ptr
 421+ 774F             >
 421+ 774F F9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 7751             >
 421+ 7751             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7751 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7754             >
 421+ 7754             >
 421+ 7754             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7754             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7754             >
 421+ 7754             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7754 48 77 C6 68                  dw      MDIVM, NIP
 423+ 7758 11 68                        dw      EXIT                    // ;
 424+ 775A
 425+ 775A              //  ______________________________________________________________________
 426+ 775A              //
 427+ 775A              // *            n1 n2 -- n3
 428+ 775A              // multiply two integer
 429+ 775A                              Colon_Def MUL, "*", is_normal
 429+ 775A             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 429+ 775A             >
 429+ 775A             >Dict_Ptr        defl    $
 429+ 775A             >
 429+ 775A             >//              ______________________________________________________________________
 429+ 775A             >//              Heap part
 429+ 775A             >
 429+ 775A             >
 429+ 775A             >                org     (Heap_Ptr & $1FFF) + $E000
 429+ E9FB             >
 429+ E9FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ E9FB             >Latest_Definition defl  Heap_Ptr
 429+ E9FB             >
 429+ E9FB             >                // dummy db directives used to calculate length of namec
 429+ E9FB 2A          >                db      "*"
 429+ E9FC             >len_NFA         defl    $ - temp_NFA
 429+ E9FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ E9FB             >
 429+ E9FB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ E9FC 2A          >                db      "*"               // name string in 7-bit ascii, but
 429+ E9FD             >                org     $-1                 // alter last byte of Name just above to set
 429+ E9FC AA          >                db      {b $} | END_BIT     // msb as name end
 429+ E9FD             >
 429+ E9FD F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 429+ E9FF             >Prev_Ptr        defl    Heap_Ptr
 429+ E9FF             >
 429+ E9FF             >mirror_Ptr      defl    $
 429+ E9FF             >
 429+ E9FF 5C 77       >                dw      Dict_Ptr + 2        // xt
 429+ EA01             >Heap_Ptr        defl    $ - $E000           // save current HP
 429+ EA01             >
 429+ EA01             >Current_HP      defl  $ - $E000             // used to set HP once!
 429+ EA01             >
 429+ EA01             >//              ______________________________________________________________________
 429+ EA01             >//              Dictionary part
 429+ EA01             >
 429+ EA01             >                org     Dict_Ptr
 429+ 775A             >
 429+ 775A FF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 429+ 775C             >
 429+ 775C             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 775C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 775F             >
 429+ 775F             >
 429+ 775F             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 775F             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 775F             >
 429+ 775F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 775F D3 76 C1 68                  dw      MMUL, DROP              // m* drop
 431+ 7763 11 68                        dw      EXIT                    // ;
 432+ 7765
 433+ 7765              //  ______________________________________________________________________
 434+ 7765              //
 435+ 7765              // /mod         n1 n2 -- n3 n4
 436+ 7765              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 437+ 7765              // The remainder has the sign of n1
 438+ 7765                              Colon_Def DIVMOD, "/MOD", is_normal
 438+ 7765             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 438+ 7765             >
 438+ 7765             >Dict_Ptr        defl    $
 438+ 7765             >
 438+ 7765             >//              ______________________________________________________________________
 438+ 7765             >//              Heap part
 438+ 7765             >
 438+ 7765             >
 438+ 7765             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ EA01             >
 438+ EA01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ EA01             >Latest_Definition defl  Heap_Ptr
 438+ EA01             >
 438+ EA01             >                // dummy db directives used to calculate length of namec
 438+ EA01 2F 4D 4F 44 >                db      "/MOD"
 438+ EA05             >len_NFA         defl    $ - temp_NFA
 438+ EA05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ EA01             >
 438+ EA01 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ EA02 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 438+ EA06             >                org     $-1                 // alter last byte of Name just above to set
 438+ EA05 C4          >                db      {b $} | END_BIT     // msb as name end
 438+ EA06             >
 438+ EA06 FB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ EA08             >Prev_Ptr        defl    Heap_Ptr
 438+ EA08             >
 438+ EA08             >mirror_Ptr      defl    $
 438+ EA08             >
 438+ EA08 67 77       >                dw      Dict_Ptr + 2        // xt
 438+ EA0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ EA0A             >
 438+ EA0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ EA0A             >
 438+ EA0A             >//              ______________________________________________________________________
 438+ EA0A             >//              Dictionary part
 438+ EA0A             >
 438+ EA0A             >                org     Dict_Ptr
 438+ 7765             >
 438+ 7765 08 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 7767             >
 438+ 7767             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 7767 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 776A             >
 438+ 776A             >
 438+ 776A             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 776A             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 776A             >
 438+ 776A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 776A 1B 68 91 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 439+ 776E 26 68
 440+ 7770 48 77                        dw      MDIVM                   // m/mod
 441+ 7772 11 68                        dw      EXIT                    // ;
 442+ 7774
 443+ 7774              //  ______________________________________________________________________
 444+ 7774              //
 445+ 7774              // /            n1 n2 -- n3
 446+ 7774              // division
 447+ 7774                              Colon_Def DIV, "/", is_normal
 447+ 7774             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 447+ 7774             >
 447+ 7774             >Dict_Ptr        defl    $
 447+ 7774             >
 447+ 7774             >//              ______________________________________________________________________
 447+ 7774             >//              Heap part
 447+ 7774             >
 447+ 7774             >
 447+ 7774             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ EA0A             >
 447+ EA0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ EA0A             >Latest_Definition defl  Heap_Ptr
 447+ EA0A             >
 447+ EA0A             >                // dummy db directives used to calculate length of namec
 447+ EA0A 2F          >                db      "/"
 447+ EA0B             >len_NFA         defl    $ - temp_NFA
 447+ EA0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ EA0A             >
 447+ EA0A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ EA0B 2F          >                db      "/"               // name string in 7-bit ascii, but
 447+ EA0C             >                org     $-1                 // alter last byte of Name just above to set
 447+ EA0B AF          >                db      {b $} | END_BIT     // msb as name end
 447+ EA0C             >
 447+ EA0C 01 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ EA0E             >Prev_Ptr        defl    Heap_Ptr
 447+ EA0E             >
 447+ EA0E             >mirror_Ptr      defl    $
 447+ EA0E             >
 447+ EA0E 76 77       >                dw      Dict_Ptr + 2        // xt
 447+ EA10             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ EA10             >
 447+ EA10             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ EA10             >
 447+ EA10             >//              ______________________________________________________________________
 447+ EA10             >//              Dictionary part
 447+ EA10             >
 447+ EA10             >                org     Dict_Ptr
 447+ 7774             >
 447+ 7774 0E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 7776             >
 447+ 7776             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 7776 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 447+ 7779             >
 447+ 7779             >
 447+ 7779             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 7779             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 7779             >
 447+ 7779             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 7779 67 77 C6 68                  dw      DIVMOD, NIP             // /mod nip
 449+ 777D 11 68                        dw      EXIT                    // ;
 450+ 777F
 451+ 777F              //  ______________________________________________________________________
 452+ 777F              //
 453+ 777F              // mod          n1 n2 -- n3
 454+ 777F                              Colon_Def MOD, "MOD", is_normal
 454+ 777F             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 454+ 777F             >
 454+ 777F             >Dict_Ptr        defl    $
 454+ 777F             >
 454+ 777F             >//              ______________________________________________________________________
 454+ 777F             >//              Heap part
 454+ 777F             >
 454+ 777F             >
 454+ 777F             >                org     (Heap_Ptr & $1FFF) + $E000
 454+ EA10             >
 454+ EA10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ EA10             >Latest_Definition defl  Heap_Ptr
 454+ EA10             >
 454+ EA10             >                // dummy db directives used to calculate length of namec
 454+ EA10 4D 4F 44    >                db      "MOD"
 454+ EA13             >len_NFA         defl    $ - temp_NFA
 454+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ EA10             >
 454+ EA10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ EA11 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 454+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 454+ EA13 C4          >                db      {b $} | END_BIT     // msb as name end
 454+ EA14             >
 454+ EA14 0A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 454+ EA16             >Prev_Ptr        defl    Heap_Ptr
 454+ EA16             >
 454+ EA16             >mirror_Ptr      defl    $
 454+ EA16             >
 454+ EA16 81 77       >                dw      Dict_Ptr + 2        // xt
 454+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 454+ EA18             >
 454+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 454+ EA18             >
 454+ EA18             >//              ______________________________________________________________________
 454+ EA18             >//              Dictionary part
 454+ EA18             >
 454+ EA18             >                org     Dict_Ptr
 454+ 777F             >
 454+ 777F 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 454+ 7781             >
 454+ 7781             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 7781 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 7784             >
 454+ 7784             >
 454+ 7784             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 7784             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 7784             >
 454+ 7784             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 7784 67 77 C1 68                  dw      DIVMOD, DROP            // /mod drop
 456+ 7788 11 68                        dw      EXIT                    // ;
 457+ 778A
 458+ 778A              //  ______________________________________________________________________
 459+ 778A              //
 460+ 778A              // */mod        n1 n2 n3 -- n4 n5
 461+ 778A              // leaves the quotient n5 and the remainder n4 of the operation
 462+ 778A              // (n1 * n2) / n3. The intermediate passage through a double number
 463+ 778A              // avoids loss of precision
 464+ 778A                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 464+ 778A             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 464+ 778A             >
 464+ 778A             >Dict_Ptr        defl    $
 464+ 778A             >
 464+ 778A             >//              ______________________________________________________________________
 464+ 778A             >//              Heap part
 464+ 778A             >
 464+ 778A             >
 464+ 778A             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ EA18             >
 464+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ EA18             >Latest_Definition defl  Heap_Ptr
 464+ EA18             >
 464+ EA18             >                // dummy db directives used to calculate length of namec
 464+ EA18 2A 2F 4D 4F >                db      "*/MOD"
 464+ EA1C 44          >
 464+ EA1D             >len_NFA         defl    $ - temp_NFA
 464+ EA1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ EA18             >
 464+ EA18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ EA19 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 464+ EA1D 44          >
 464+ EA1E             >                org     $-1                 // alter last byte of Name just above to set
 464+ EA1D C4          >                db      {b $} | END_BIT     // msb as name end
 464+ EA1E             >
 464+ EA1E 10 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ EA20             >Prev_Ptr        defl    Heap_Ptr
 464+ EA20             >
 464+ EA20             >mirror_Ptr      defl    $
 464+ EA20             >
 464+ EA20 8C 77       >                dw      Dict_Ptr + 2        // xt
 464+ EA22             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EA22             >
 464+ EA22             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EA22             >
 464+ EA22             >//              ______________________________________________________________________
 464+ EA22             >//              Dictionary part
 464+ EA22             >
 464+ EA22             >                org     Dict_Ptr
 464+ 778A             >
 464+ 778A 20 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 778C             >
 464+ 778C             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 778C CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 778F             >
 464+ 778F             >
 464+ 778F             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 778F             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 778F             >
 464+ 778F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 778F 1B 68 D3 76                  dw      TO_R, MMUL              // >r  m*
 466+ 7793 26 68 48 77                  dw      R_TO, MDIVM             // r>  m/mod
 467+ 7797 11 68                        dw      EXIT                    // ;
 468+ 7799
 469+ 7799              //  ______________________________________________________________________
 470+ 7799              //
 471+ 7799              // */          n1 n2 n3 -- n4
 472+ 7799              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 473+ 7799                              Colon_Def MUL_DIV, "*/", is_normal
 473+ 7799             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 473+ 7799             >
 473+ 7799             >Dict_Ptr        defl    $
 473+ 7799             >
 473+ 7799             >//              ______________________________________________________________________
 473+ 7799             >//              Heap part
 473+ 7799             >
 473+ 7799             >
 473+ 7799             >                org     (Heap_Ptr & $1FFF) + $E000
 473+ EA22             >
 473+ EA22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ EA22             >Latest_Definition defl  Heap_Ptr
 473+ EA22             >
 473+ EA22             >                // dummy db directives used to calculate length of namec
 473+ EA22 2A 2F       >                db      "*/"
 473+ EA24             >len_NFA         defl    $ - temp_NFA
 473+ EA24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ EA22             >
 473+ EA22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ EA23 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 473+ EA25             >                org     $-1                 // alter last byte of Name just above to set
 473+ EA24 AF          >                db      {b $} | END_BIT     // msb as name end
 473+ EA25             >
 473+ EA25 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 473+ EA27             >Prev_Ptr        defl    Heap_Ptr
 473+ EA27             >
 473+ EA27             >mirror_Ptr      defl    $
 473+ EA27             >
 473+ EA27 9B 77       >                dw      Dict_Ptr + 2        // xt
 473+ EA29             >Heap_Ptr        defl    $ - $E000           // save current HP
 473+ EA29             >
 473+ EA29             >Current_HP      defl  $ - $E000             // used to set HP once!
 473+ EA29             >
 473+ EA29             >//              ______________________________________________________________________
 473+ EA29             >//              Dictionary part
 473+ EA29             >
 473+ EA29             >                org     Dict_Ptr
 473+ 7799             >
 473+ 7799 27 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 473+ 779B             >
 473+ 779B             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 779B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 473+ 779E             >
 473+ 779E             >
 473+ 779E             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 779E             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 779E             >
 473+ 779E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 779E 8C 77                        dw     MUL_DIV_MOD              // */mod
 475+ 77A0 C6 68                        dw     NIP                      // nip
 476+ 77A2 11 68                        dw     EXIT                     // ;
 477+ 77A4
 478+ 77A4
 479+ 77A4              //  ______________________________________________________________________
 480+ 77A4              //
 481+ 77A4              // m/mod        ud1 u2 -- u3 ud4
 482+ 77A4              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 483+ 77A4              // All terms are unsigned.
 484+ 77A4              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 485+ 77A4              //              dw      TO_R                    // >r           ( ud1 )
 486+ 77A4              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 487+ 77A4              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 488+ 77A4              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 489+ 77A4              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 490+ 77A4              //              dw      EXIT                    // ;
 491+ 77A4
 492+ 77A4              //  ______________________________________________________________________
 493+ 77A4              //
 494+ 77A4              // (line)       n1 n2 -- a b
 495+ 77A4              // sends the line n1 of block n2 to the disk buffer.
 496+ 77A4              // it returns the address a and ca counter b = C/L meaning a whole line.
 497+ 77A4                              Colon_Def CLINE, "(LINE)", is_normal
 497+ 77A4             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 497+ 77A4             >
 497+ 77A4             >Dict_Ptr        defl    $
 497+ 77A4             >
 497+ 77A4             >//              ______________________________________________________________________
 497+ 77A4             >//              Heap part
 497+ 77A4             >
 497+ 77A4             >
 497+ 77A4             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ EA29             >
 497+ EA29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ EA29             >Latest_Definition defl  Heap_Ptr
 497+ EA29             >
 497+ EA29             >                // dummy db directives used to calculate length of namec
 497+ EA29 28 4C 49 4E >                db      "(LINE)"
 497+ EA2D 45 29       >
 497+ EA2F             >len_NFA         defl    $ - temp_NFA
 497+ EA2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ EA29             >
 497+ EA29 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ EA2A 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 497+ EA2E 45 29       >
 497+ EA30             >                org     $-1                 // alter last byte of Name just above to set
 497+ EA2F A9          >                db      {b $} | END_BIT     // msb as name end
 497+ EA30             >
 497+ EA30 22 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 497+ EA32             >Prev_Ptr        defl    Heap_Ptr
 497+ EA32             >
 497+ EA32             >mirror_Ptr      defl    $
 497+ EA32             >
 497+ EA32 A6 77       >                dw      Dict_Ptr + 2        // xt
 497+ EA34             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ EA34             >
 497+ EA34             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ EA34             >
 497+ EA34             >//              ______________________________________________________________________
 497+ EA34             >//              Dictionary part
 497+ EA34             >
 497+ EA34             >                org     Dict_Ptr
 497+ 77A4             >
 497+ 77A4 32 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 497+ 77A6             >
 497+ 77A6             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 77A6 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 497+ 77A9             >
 497+ 77A9             >
 497+ 77A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 77A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 77A9             >
 497+ 77A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 77A9 1B 68                        dw      TO_R                    // >r
 499+ 77AB 62 6A                        dw      CL                      // c/l
 500+ 77AD 69 6A 8C 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 501+ 77B1 26 68                        dw      R_TO                    // r>
 502+ 77B3 70 6A 5C 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 502+ 77B7 5E 68
 503+ 77B9 B9 79                        dw      BLOCK                   // block   ( forward )
 504+ 77BB 5E 68                        dw      PLUS                    // +
 505+ 77BD 62 6A                        dw      CL                      // c/l
 506+ 77BF 11 68                        dw      EXIT                    // ;
 507+ 77C1
 508+ 77C1              //  ______________________________________________________________________
 509+ 77C1              //
 510+ 77C1              // .line        n1 n2 --
 511+ 77C1              // Sends to output line  n1  of screen n2.
 512+ 77C1                              Colon_Def DOT_LINE, ".LINE", is_normal
 512+ 77C1             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 512+ 77C1             >
 512+ 77C1             >Dict_Ptr        defl    $
 512+ 77C1             >
 512+ 77C1             >//              ______________________________________________________________________
 512+ 77C1             >//              Heap part
 512+ 77C1             >
 512+ 77C1             >
 512+ 77C1             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EA34             >
 512+ EA34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EA34             >Latest_Definition defl  Heap_Ptr
 512+ EA34             >
 512+ EA34             >                // dummy db directives used to calculate length of namec
 512+ EA34 2E 4C 49 4E >                db      ".LINE"
 512+ EA38 45          >
 512+ EA39             >len_NFA         defl    $ - temp_NFA
 512+ EA39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EA34             >
 512+ EA34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EA35 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 512+ EA39 45          >
 512+ EA3A             >                org     $-1                 // alter last byte of Name just above to set
 512+ EA39 C5          >                db      {b $} | END_BIT     // msb as name end
 512+ EA3A             >
 512+ EA3A 29 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EA3C             >Prev_Ptr        defl    Heap_Ptr
 512+ EA3C             >
 512+ EA3C             >mirror_Ptr      defl    $
 512+ EA3C             >
 512+ EA3C C3 77       >                dw      Dict_Ptr + 2        // xt
 512+ EA3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EA3E             >
 512+ EA3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EA3E             >
 512+ EA3E             >//              ______________________________________________________________________
 512+ EA3E             >//              Dictionary part
 512+ EA3E             >
 512+ EA3E             >                org     Dict_Ptr
 512+ 77C1             >
 512+ 77C1 3C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 77C3             >
 512+ 77C3             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 77C3 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 77C6             >
 512+ 77C6             >
 512+ 77C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 77C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 77C6             >
 512+ 77C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 77C6 A6 77 C4 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 513+ 77CA AD 6F
 514+ 77CC 11 68                        dw      EXIT                    // ;
 515+ 77CE
 516+ 77CE              //  ______________________________________________________________________
 517+ 77CE              //
 518+ 77CE              // message       n1 n2 --
 519+ 77CE              // prints error message to current channel.
 520+ 77CE              // if WARNING is 0, prints "MSG#n".
 521+ 77CE              // if WARNING is 1, prints line n of screen 4.
 522+ 77CE              // if WARNING is -1, see ERROR
 523+ 77CE              // value can be negative or beyond block 4.
 524+ 77CE                              Colon_Def MESSAGE, "MESSAGE", is_normal
 524+ 77CE             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 524+ 77CE             >
 524+ 77CE             >Dict_Ptr        defl    $
 524+ 77CE             >
 524+ 77CE             >//              ______________________________________________________________________
 524+ 77CE             >//              Heap part
 524+ 77CE             >
 524+ 77CE             >
 524+ 77CE             >                org     (Heap_Ptr & $1FFF) + $E000
 524+ EA3E             >
 524+ EA3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 524+ EA3E             >Latest_Definition defl  Heap_Ptr
 524+ EA3E             >
 524+ EA3E             >                // dummy db directives used to calculate length of namec
 524+ EA3E 4D 45 53 53 >                db      "MESSAGE"
 524+ EA42 41 47 45    >
 524+ EA45             >len_NFA         defl    $ - temp_NFA
 524+ EA45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 524+ EA3E             >
 524+ EA3E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 524+ EA3F 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 524+ EA43 41 47 45    >
 524+ EA46             >                org     $-1                 // alter last byte of Name just above to set
 524+ EA45 C5          >                db      {b $} | END_BIT     // msb as name end
 524+ EA46             >
 524+ EA46 34 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 524+ EA48             >Prev_Ptr        defl    Heap_Ptr
 524+ EA48             >
 524+ EA48             >mirror_Ptr      defl    $
 524+ EA48             >
 524+ EA48 D0 77       >                dw      Dict_Ptr + 2        // xt
 524+ EA4A             >Heap_Ptr        defl    $ - $E000           // save current HP
 524+ EA4A             >
 524+ EA4A             >Current_HP      defl  $ - $E000             // used to set HP once!
 524+ EA4A             >
 524+ EA4A             >//              ______________________________________________________________________
 524+ EA4A             >//              Dictionary part
 524+ EA4A             >
 524+ EA4A             >                org     Dict_Ptr
 524+ 77CE             >
 524+ 77CE 48 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 524+ 77D0             >
 524+ 77D0             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 524+ 77D0 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 524+ 77D3             >
 524+ 77D3             >
 524+ 77D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 524+ 77D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 524+ 77D3             >
 524+ 77D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 525+ 77D3 A9 6A 46 69                  dw      WARNING, FETCH          // warning @
 526+ 77D7                                                              // if
 527+ 77D7 F3 63                        dw      ZBRANCH
 528+ 77D9 12 00                        dw      Message_Else - $
 529+ 77DB A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 529+ 77DF 5E 68
 530+ 77E1 46 6A                        dw          TWO                 //      2
 531+ 77E3 C3 77                        dw          DOT_LINE            //      .line
 532+ 77E5 2F 6C                        dw          SPACE               //      space
 533+ 77E7                                                              // else
 534+ 77E7
 535+ 77E7 EF 63                        dw      BRANCH
 536+ 77E9 0B 00                        dw      Message_ENdif - $
 537+ 77EB              Message_Else:
 538+ 77EB 4A 71                        dw          C_DOT_QUOTE         //      .( msg#)
 539+ 77ED 04 6D 73 67                  db          4, "msg#"
 539+ 77F1 23
 540+ 77F2 EA 7E                        dw          DOT                 //      .  ( forward )
 541+ 77F4              Message_ENdif:                                  // endif
 542+ 77F4 11 68                        dw      EXIT                    // ;
 543+ 77F6
 544+ 77F6
 545+ 77F6              //  ______________________________________________________________________
 546+ 77F6              //
 547+ 77F6              // device
 548+ 77F6                              Variable_Def DEVICE,   "DEVICE",   2
 548+ 77F6             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 548+ 77F6             >
 548+ 77F6             >Dict_Ptr        defl    $
 548+ 77F6             >
 548+ 77F6             >//              ______________________________________________________________________
 548+ 77F6             >//              Heap part
 548+ 77F6             >
 548+ 77F6             >
 548+ 77F6             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EA4A             >
 548+ EA4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EA4A             >Latest_Definition defl  Heap_Ptr
 548+ EA4A             >
 548+ EA4A             >                // dummy db directives used to calculate length of namec
 548+ EA4A 44 45 56 49 >                db      "DEVICE"
 548+ EA4E 43 45       >
 548+ EA50             >len_NFA         defl    $ - temp_NFA
 548+ EA50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EA4A             >
 548+ EA4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EA4B 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 548+ EA4F 43 45       >
 548+ EA51             >                org     $-1                 // alter last byte of Name just above to set
 548+ EA50 C5          >                db      {b $} | END_BIT     // msb as name end
 548+ EA51             >
 548+ EA51 3E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EA53             >Prev_Ptr        defl    Heap_Ptr
 548+ EA53             >
 548+ EA53             >mirror_Ptr      defl    $
 548+ EA53             >
 548+ EA53 F8 77       >                dw      Dict_Ptr + 2        // xt
 548+ EA55             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EA55             >
 548+ EA55             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EA55             >
 548+ EA55             >//              ______________________________________________________________________
 548+ EA55             >//              Dictionary part
 548+ EA55             >
 548+ EA55             >                org     Dict_Ptr
 548+ 77F6             >
 548+ 77F6 53 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 77F8             >
 548+ 77F8             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 77F8 CD 1F 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 548+ 77FB             >
 548+ 77FB             >
 548+ 77FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 77FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 77FB             >
 548+ 77FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 77FB 02 00       >                dw      2
 549+ 77FD
 550+ 77FD              //  ______________________________________________________________________
 551+ 77FD
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
 151  77FD                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
   1+ 77FD              //  ______________________________________________________________________
   2+ 77FD              //
   3+ 77FD              //  next-opt.asm
   4+ 77FD              //
   5+ 77FD              //  ZX Spectrum Next - peculiar definitions
   6+ 77FD              //  ______________________________________________________________________
   7+ 77FD
   8+ 77FD              //  ______________________________________________________________________
   9+ 77FD              //
  10+ 77FD              // reg@         n -- b
  11+ 77FD              // read Next REGister n giving byte b
  12+ 77FD              //
  13+ 77FD              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77FD              //              dw      LIT, $243B
  15+ 77FD              //              dw      PSTORE
  16+ 77FD              //              dw      LIT, $253B
  17+ 77FD              //              dw      PFETCH
  18+ 77FD              //              dw      EXIT
  19+ 77FD                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77FD             >
  19+ 77FD             >Dict_Ptr        defl    $
  19+ 77FD             >
  19+ 77FD             >//              ______________________________________________________________________
  19+ 77FD             >//              Heap part
  19+ 77FD             >
  19+ 77FD             >
  19+ 77FD             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA55             >
  19+ EA55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA55             >Latest_Definition defl  Heap_Ptr
  19+ EA55             >
  19+ EA55             >                // dummy db directives used to calculate length of namec
  19+ EA55 52 45 47 40 >                db      "REG@"
  19+ EA59             >len_NFA         defl    $ - temp_NFA
  19+ EA59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA55             >
  19+ EA55 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA56 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA5A             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA59 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA5A             >
  19+ EA5A 4A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA5C             >Prev_Ptr        defl    Heap_Ptr
  19+ EA5C             >
  19+ EA5C             >mirror_Ptr      defl    $
  19+ EA5C             >
  19+ EA5C FF 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA5E             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA5E             >
  19+ EA5E             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA5E             >
  19+ EA5E             >//              ______________________________________________________________________
  19+ EA5E             >//              Dictionary part
  19+ EA5E             >
  19+ EA5E             >                org     Dict_Ptr
  19+ 77FD             >
  19+ 77FD 5C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77FF             >
  19+ 77FF             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77FF ~           >
  19+ 77FF ~           >
  19+ 77FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77FF             >
  19+ 77FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77FF D9                           exx
  21+ 7800 01 3B 24                     ld      bc, $243B
  22+ 7803 E1                           pop     hl
  23+ 7804 ED 69                        out     (c), l
  24+ 7806 04                           inc     b
  25+ 7807 ED 68                        in      l, (c)
  26+ 7809 E5                           push    hl
  27+ 780A D9                           exx
  28+ 780B                              next
  28+ 780B DD E9       >                jp      (ix)
  29+ 780D
  30+ 780D
  31+ 780D              //  ______________________________________________________________________
  32+ 780D              //
  33+ 780D              // reg!         b n --
  34+ 780D              // write value b to Next REGister n
  35+ 780D              //
  36+ 780D              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 780D              //              dw      LIT, $243B
  38+ 780D              //              dw      PSTORE
  39+ 780D              //              dw      LIT, $253B
  40+ 780D              //              dw      PSTORE
  41+ 780D              //              dw      EXIT
  42+ 780D                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 780D             >
  42+ 780D             >Dict_Ptr        defl    $
  42+ 780D             >
  42+ 780D             >//              ______________________________________________________________________
  42+ 780D             >//              Heap part
  42+ 780D             >
  42+ 780D             >
  42+ 780D             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA5E             >
  42+ EA5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA5E             >Latest_Definition defl  Heap_Ptr
  42+ EA5E             >
  42+ EA5E             >                // dummy db directives used to calculate length of namec
  42+ EA5E 52 45 47 21 >                db      "REG!"
  42+ EA62             >len_NFA         defl    $ - temp_NFA
  42+ EA62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA5E             >
  42+ EA5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA5F 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA63             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA62 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA63             >
  42+ EA63 55 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA65             >Prev_Ptr        defl    Heap_Ptr
  42+ EA65             >
  42+ EA65             >mirror_Ptr      defl    $
  42+ EA65             >
  42+ EA65 0F 78       >                dw      Dict_Ptr + 2        // xt
  42+ EA67             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA67             >
  42+ EA67             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA67             >
  42+ EA67             >//              ______________________________________________________________________
  42+ EA67             >//              Dictionary part
  42+ EA67             >
  42+ EA67             >                org     Dict_Ptr
  42+ 780D             >
  42+ 780D 65 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 780F             >
  42+ 780F             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 780F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 780F ~           >
  42+ 780F ~           >
  42+ 780F             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 780F             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 780F             >
  42+ 780F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 780F D9                           exx
  44+ 7810 01 3B 24                     ld      bc, $243B
  45+ 7813 E1                           pop     hl
  46+ 7814 ED 69                        out     (c), l
  47+ 7816 04                           inc     b
  48+ 7817 E1                           pop     hl
  49+ 7818 ED 69                        out     (c), l
  50+ 781A D9                           exx
  51+ 781B                              next
  51+ 781B DD E9       >                jp      (ix)
  52+ 781D
  53+ 781D
  54+ 781D              //  ______________________________________________________________________
  55+ 781D              //
  56+ 781D              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 781D              // NextZXOS call wrapper.
  58+ 781D              //  n1 = hl register parameter value
  59+ 781D              //  n2 = de register parameter value
  60+ 781D              //  n3 = bc register parameter value
  61+ 781D              //  n4 =  a register parameter value
  62+ 781D              //   a = routine address in ROM 3
  63+ 781D              // ----
  64+ 781D              //  n5 = hl returned value
  65+ 781D              //  n6 = de returned value
  66+ 781D              //  n7 = bc returned value
  67+ 781D              //  n8 =  a returned value
  68+ 781D              //   f
  69+ 781D                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 781D             >
  69+ 781D             >Dict_Ptr        defl    $
  69+ 781D             >
  69+ 781D             >//              ______________________________________________________________________
  69+ 781D             >//              Heap part
  69+ 781D             >
  69+ 781D             >
  69+ 781D             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA67             >
  69+ EA67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA67             >Latest_Definition defl  Heap_Ptr
  69+ EA67             >
  69+ EA67             >                // dummy db directives used to calculate length of namec
  69+ EA67 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA6B 44 4F 53    >
  69+ EA6E             >len_NFA         defl    $ - temp_NFA
  69+ EA6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA67             >
  69+ EA67 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA68 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA6C 44 4F 53    >
  69+ EA6F             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA6E D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA6F             >
  69+ EA6F 5E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA71             >Prev_Ptr        defl    Heap_Ptr
  69+ EA71             >
  69+ EA71             >mirror_Ptr      defl    $
  69+ EA71             >
  69+ EA71 1F 78       >                dw      Dict_Ptr + 2        // xt
  69+ EA73             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA73             >
  69+ EA73             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA73             >
  69+ EA73             >//              ______________________________________________________________________
  69+ EA73             >//              Dictionary part
  69+ EA73             >
  69+ EA73             >                org     Dict_Ptr
  69+ 781D             >
  69+ 781D 71 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 781F             >
  69+ 781F             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 781F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 781F ~           >
  69+ 781F ~           >
  69+ 781F             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 781F             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 781F             >
  69+ 781F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 781F D9                            exx
  71+ 7820 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 7821 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 7822 7B                            ld      a, e
  74+ 7823 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 7824 D1                            pop     de                  // de' argument              //  n1
  76+ 7825 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 7826 D9                           exx
  78+ 7827 E1                           pop     hl                  // entry address a
  79+ 7828 DD E5                        push    ix
  80+ 782A D5                           push    de
  81+ 782B C5                           push    bc
  82+ 782C EB                           ex      de, hl              // de is entry address
  83+ 782D              //              ld      (SP_Saved), sp
  84+ 782D              //              ld      sp, Cold_origin - 5
  85+ 782D
  86+ 782D 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 782F F3                           di
  88+ 7830 CF                           rst     08
  89+ 7831 94                           db      $94
  90+ 7832 FB                           ei
  91+ 7833
  92+ 7833
  93+ 7833
  94+ 7833              //              ld      sp, (SP_Saved)
  95+ 7833              //              push    ix
  96+ 7833              //              pop     hl
  97+ 7833              //              ld      (IX_Echo), hl
  98+ 7833 DD 22 98 63                  ld      (IX_Echo), ix
  99+ 7837
 100+ 7837 D9                           exx
 101+ 7838 C1                           pop     bc
 102+ 7839 D1                           pop     de
 103+ 783A DD E1                        pop     ix
 104+ 783C D9                            exx
 105+ 783D E5                            push    hl
 106+ 783E D5                            push    de
 107+ 783F C5                            push    bc
 108+ 7840 26 00                         ld      h, 0
 109+ 7842 6F                            ld      l, a
 110+ 7843 E5                            push    hl
 111+ 7844 D9                           exx
 112+ 7845 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 7847 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 7848 E5                           push    hl
 115+ 7849                              next
 115+ 7849 DD E9       >                jp      (ix)
 116+ 784B
 117+ 784B              //  ______________________________________________________________________
 118+ 784B              //
 119+ 784B              // blk-fh
 120+ 784B
 121+ 784B                              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 784B             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 121+ 784B             >
 121+ 784B             >Dict_Ptr        defl    $
 121+ 784B             >
 121+ 784B             >//              ______________________________________________________________________
 121+ 784B             >//              Heap part
 121+ 784B             >
 121+ 784B             >
 121+ 784B             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ EA73             >
 121+ EA73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ EA73             >Latest_Definition defl  Heap_Ptr
 121+ EA73             >
 121+ EA73             >                // dummy db directives used to calculate length of namec
 121+ EA73 42 4C 4B 2D >                db      "BLK-FH"
 121+ EA77 46 48       >
 121+ EA79             >len_NFA         defl    $ - temp_NFA
 121+ EA79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ EA73             >
 121+ EA73 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ EA74 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 121+ EA78 46 48       >
 121+ EA7A             >                org     $-1                 // alter last byte of Name just above to set
 121+ EA79 C8          >                db      {b $} | END_BIT     // msb as name end
 121+ EA7A             >
 121+ EA7A 67 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ EA7C             >Prev_Ptr        defl    Heap_Ptr
 121+ EA7C             >
 121+ EA7C             >mirror_Ptr      defl    $
 121+ EA7C             >
 121+ EA7C 4D 78       >                dw      Dict_Ptr + 2        // xt
 121+ EA7E             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ EA7E             >
 121+ EA7E             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ EA7E             >
 121+ EA7E             >//              ______________________________________________________________________
 121+ EA7E             >//              Dictionary part
 121+ EA7E             >
 121+ EA7E             >                org     Dict_Ptr
 121+ 784B             >
 121+ 784B 7C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 784D             >
 121+ 784D             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 784D CD 1F 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 121+ 7850             >
 121+ 7850             >
 121+ 7850             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 7850             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 7850             >
 121+ 7850             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 7850 01 00       >                dw      1
 122+ 7852
 123+ 7852                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 7852             >
 123+ 7852             >Dict_Ptr        defl    $
 123+ 7852             >
 123+ 7852             >//              ______________________________________________________________________
 123+ 7852             >//              Heap part
 123+ 7852             >
 123+ 7852             >
 123+ 7852             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ EA7E             >
 123+ EA7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ EA7E             >Latest_Definition defl  Heap_Ptr
 123+ EA7E             >
 123+ EA7E             >                // dummy db directives used to calculate length of namec
 123+ EA7E 42 4C 4B 2D >                db      "BLK-FNAME"
 123+ EA82 46 4E 41 4D >
 123+ EA86 45          >
 123+ EA87             >len_NFA         defl    $ - temp_NFA
 123+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ EA7E             >
 123+ EA7E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ EA7F 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 123+ EA83 46 4E 41 4D >
 123+ EA87 45          >
 123+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 123+ EA87 C5          >                db      {b $} | END_BIT     // msb as name end
 123+ EA88             >
 123+ EA88 73 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 123+ EA8A             >
 123+ EA8A             >mirror_Ptr      defl    $
 123+ EA8A             >
 123+ EA8A 54 78       >                dw      Dict_Ptr + 2        // xt
 123+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ EA8C             >
 123+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ EA8C             >
 123+ EA8C             >//              ______________________________________________________________________
 123+ EA8C             >//              Dictionary part
 123+ EA8C             >
 123+ EA8C             >                org     Dict_Ptr
 123+ 7852             >
 123+ 7852 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 7854             >
 123+ 7854             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 7854 CD 48 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 123+ 7857             >
 123+ 7857             >
 123+ 7857             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 7857             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 7857             >
 123+ 7857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 7857
 125+ 7857 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 125+ 785B 6F 63 6B 73
 125+ 785F 2D 36 34 2E
 125+ 7863 62 69 6E 00
 126+ 7867 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 127+ 787F
 128+ 787F              //  ______________________________________________________________________
 129+ 787F              //
 130+ 787F              // blk-seek     n --
 131+ 787F              // seek block n  within blocks!.bin  file
 132+ 787F                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 787F             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 787F             >
 132+ 787F             >Dict_Ptr        defl    $
 132+ 787F             >
 132+ 787F             >//              ______________________________________________________________________
 132+ 787F             >//              Heap part
 132+ 787F             >
 132+ 787F             >
 132+ 787F             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA8C             >
 132+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA8C             >Latest_Definition defl  Heap_Ptr
 132+ EA8C             >
 132+ EA8C             >                // dummy db directives used to calculate length of namec
 132+ EA8C 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA90 53 45 45 4B >
 132+ EA94             >len_NFA         defl    $ - temp_NFA
 132+ EA94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA8C             >
 132+ EA8C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA8D 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA91 53 45 45 4B >
 132+ EA95             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA94 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA95             >
 132+ EA95 7E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA97             >Prev_Ptr        defl    Heap_Ptr
 132+ EA97             >
 132+ EA97             >mirror_Ptr      defl    $
 132+ EA97             >
 132+ EA97 81 78       >                dw      Dict_Ptr + 2        // xt
 132+ EA99             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA99             >
 132+ EA99             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA99             >
 132+ EA99             >//              ______________________________________________________________________
 132+ EA99             >//              Dictionary part
 132+ EA99             >
 132+ EA99             >                org     Dict_Ptr
 132+ 787F             >
 132+ 787F 97 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 7881             >
 132+ 7881             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7881 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 7884             >
 132+ 7884             >
 132+ 7884             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7884             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7884             >
 132+ 7884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7884 69 6A D3 76                  dw  BBUF, MMUL
 134+ 7888 4D 78 46 69                  dw  BLK_FH, FETCH
 135+ 788C A0 66                        dw  F_SEEK
 136+ 788E A3 63 2D 00                  dw  LIT, $2D, QERROR
 136+ 7892 A7 6D
 137+ 7894 11 68                        dw  EXIT
 138+ 7896
 139+ 7896              //  ______________________________________________________________________
 140+ 7896              //
 141+ 7896              // blk-read     n --
 142+ 7896              // seek block n  within blocks!.bin  file
 143+ 7896                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 7896             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 7896             >
 143+ 7896             >Dict_Ptr        defl    $
 143+ 7896             >
 143+ 7896             >//              ______________________________________________________________________
 143+ 7896             >//              Heap part
 143+ 7896             >
 143+ 7896             >
 143+ 7896             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA99             >
 143+ EA99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA99             >Latest_Definition defl  Heap_Ptr
 143+ EA99             >
 143+ EA99             >                // dummy db directives used to calculate length of namec
 143+ EA99 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA9D 52 45 41 44 >
 143+ EAA1             >len_NFA         defl    $ - temp_NFA
 143+ EAA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA99             >
 143+ EA99 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA9A 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA9E 52 45 41 44 >
 143+ EAA2             >                org     $-1                 // alter last byte of Name just above to set
 143+ EAA1 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EAA2             >
 143+ EAA2 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EAA4             >Prev_Ptr        defl    Heap_Ptr
 143+ EAA4             >
 143+ EAA4             >mirror_Ptr      defl    $
 143+ EAA4             >
 143+ EAA4 98 78       >                dw      Dict_Ptr + 2        // xt
 143+ EAA6             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EAA6             >
 143+ EAA6             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EAA6             >
 143+ EAA6             >//              ______________________________________________________________________
 143+ EAA6             >//              Dictionary part
 143+ EAA6             >
 143+ EAA6             >                org     Dict_Ptr
 143+ 7896             >
 143+ 7896 A4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 7898             >
 143+ 7898             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 7898 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 789B             >
 143+ 789B             >
 143+ 789B             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 789B             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 789B             >
 143+ 789B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 789B 81 78                        dw  BLK_SEEK
 145+ 789D 69 6A                        dw  BBUF
 146+ 789F 4D 78 46 69                  dw  BLK_FH, FETCH
 147+ 78A3 F2 66                        dw  F_READ
 148+ 78A5 A3 63 2E 00                  dw  LIT, $2E, QERROR
 148+ 78A9 A7 6D
 149+ 78AB C1 68                        dw  DROP
 150+ 78AD 11 68                        dw  EXIT
 151+ 78AF
 152+ 78AF              //  ______________________________________________________________________
 153+ 78AF              //
 154+ 78AF              // blk-write     n --
 155+ 78AF              // seek block n  within blocks!.bin  file
 156+ 78AF                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 78AF             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 78AF             >
 156+ 78AF             >Dict_Ptr        defl    $
 156+ 78AF             >
 156+ 78AF             >//              ______________________________________________________________________
 156+ 78AF             >//              Heap part
 156+ 78AF             >
 156+ 78AF             >
 156+ 78AF             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EAA6             >
 156+ EAA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EAA6             >Latest_Definition defl  Heap_Ptr
 156+ EAA6             >
 156+ EAA6             >                // dummy db directives used to calculate length of namec
 156+ EAA6 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EAAA 57 52 49 54 >
 156+ EAAE 45          >
 156+ EAAF             >len_NFA         defl    $ - temp_NFA
 156+ EAAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EAA6             >
 156+ EAA6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EAA7 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EAAB 57 52 49 54 >
 156+ EAAF 45          >
 156+ EAB0             >                org     $-1                 // alter last byte of Name just above to set
 156+ EAAF C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EAB0             >
 156+ EAB0 99 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EAB2             >Prev_Ptr        defl    Heap_Ptr
 156+ EAB2             >
 156+ EAB2             >mirror_Ptr      defl    $
 156+ EAB2             >
 156+ EAB2 B1 78       >                dw      Dict_Ptr + 2        // xt
 156+ EAB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EAB4             >
 156+ EAB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EAB4             >
 156+ EAB4             >//              ______________________________________________________________________
 156+ EAB4             >//              Dictionary part
 156+ EAB4             >
 156+ EAB4             >                org     Dict_Ptr
 156+ 78AF             >
 156+ 78AF B2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 78B1             >
 156+ 78B1             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 78B1 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 78B4             >
 156+ 78B4             >
 156+ 78B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 78B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 78B4             >
 156+ 78B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 78B4 81 78                        dw  BLK_SEEK
 158+ 78B6 69 6A                        dw  BBUF
 159+ 78B8 4D 78 46 69                  dw  BLK_FH, FETCH
 160+ 78BC 0F 67                        dw  F_WRITE
 161+ 78BE A3 63 2F 00                  dw  LIT, $2F, QERROR
 161+ 78C2 A7 6D
 162+ 78C4 C1 68                        dw  DROP
 163+ 78C6 11 68                        dw  EXIT
 164+ 78C8
 165+ 78C8              //  ______________________________________________________________________
 166+ 78C8              //
 167+ 78C8              // blk-init     n --
 168+ 78C8              // seek block n  within blocks!.bin  file
 169+ 78C8                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 78C8             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 78C8             >
 169+ 78C8             >Dict_Ptr        defl    $
 169+ 78C8             >
 169+ 78C8             >//              ______________________________________________________________________
 169+ 78C8             >//              Heap part
 169+ 78C8             >
 169+ 78C8             >
 169+ 78C8             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EAB4             >
 169+ EAB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EAB4             >Latest_Definition defl  Heap_Ptr
 169+ EAB4             >
 169+ EAB4             >                // dummy db directives used to calculate length of namec
 169+ EAB4 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EAB8 49 4E 49 54 >
 169+ EABC             >len_NFA         defl    $ - temp_NFA
 169+ EABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EAB4             >
 169+ EAB4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EAB5 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EAB9 49 4E 49 54 >
 169+ EABD             >                org     $-1                 // alter last byte of Name just above to set
 169+ EABC D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EABD             >
 169+ EABD A6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EABF             >Prev_Ptr        defl    Heap_Ptr
 169+ EABF             >
 169+ EABF             >mirror_Ptr      defl    $
 169+ EABF             >
 169+ EABF CA 78       >                dw      Dict_Ptr + 2        // xt
 169+ EAC1             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EAC1             >
 169+ EAC1             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EAC1             >
 169+ EAC1             >//              ______________________________________________________________________
 169+ EAC1             >//              Dictionary part
 169+ EAC1             >
 169+ EAC1             >                org     Dict_Ptr
 169+ 78C8             >
 169+ 78C8 BF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 78CA             >
 169+ 78CA             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 78CA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 78CD             >
 169+ 78CD             >
 169+ 78CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 78CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 78CD             >
 169+ 78CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 78CD 4D 78 46 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 78D1 BE 66 C1 68
 171+ 78D5 54 78 77 68                  dw  BLK_FNAME, ONE_PLUS
 172+ 78D9 5D 6B 4D 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 78DD 20 67
 173+ 78DF A3 63 2C 00                  dw  LIT, $2C, QERROR
 173+ 78E3 A7 6D
 174+ 78E5 4D 78 50 69                  dw  BLK_FH, STORE
 175+ 78E9 11 68                        dw  EXIT
 176+ 78EB
 177+ 78EB              //  ______________________________________________________________________
 178+ 78EB              //
 179+ 78EB              // #sec
 180+ 78EB              // number of 512-Byte "sectors" available on thie sysstem.
 181+ 78EB              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 182+ 78EB
 183+ 78EB                              Constant_Def NSEC , "#SEC", 32767
 183+ 78EB             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 183+ 78EB             >
 183+ 78EB             >Dict_Ptr        defl    $
 183+ 78EB             >
 183+ 78EB             >//              ______________________________________________________________________
 183+ 78EB             >//              Heap part
 183+ 78EB             >
 183+ 78EB             >
 183+ 78EB             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ EAC1             >
 183+ EAC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ EAC1             >Latest_Definition defl  Heap_Ptr
 183+ EAC1             >
 183+ EAC1             >                // dummy db directives used to calculate length of namec
 183+ EAC1 23 53 45 43 >                db      "#SEC"
 183+ EAC5             >len_NFA         defl    $ - temp_NFA
 183+ EAC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ EAC1             >
 183+ EAC1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ EAC2 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 183+ EAC6             >                org     $-1                 // alter last byte of Name just above to set
 183+ EAC5 C3          >                db      {b $} | END_BIT     // msb as name end
 183+ EAC6             >
 183+ EAC6 B4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ EAC8             >Prev_Ptr        defl    Heap_Ptr
 183+ EAC8             >
 183+ EAC8             >mirror_Ptr      defl    $
 183+ EAC8             >
 183+ EAC8 ED 78       >                dw      Dict_Ptr + 2        // xt
 183+ EACA             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ EACA             >
 183+ EACA             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ EACA             >
 183+ EACA             >//              ______________________________________________________________________
 183+ EACA             >//              Dictionary part
 183+ EACA             >
 183+ EACA             >                org     Dict_Ptr
 183+ 78EB             >
 183+ 78EB C8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 78ED             >
 183+ 78ED             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 78ED CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 183+ 78F0             >
 183+ 78F0             >
 183+ 78F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 78F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 78F0             >
 183+ 78F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78F0 FF 7F       >                dw      32767
 184+ 78F2
 185+ 78F2              //  ______________________________________________________________________
 186+ 78F2
 187+ 78F2
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
 152  78F2                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
   1+ 78F2              //  ______________________________________________________________________
   2+ 78F2              //
   3+ 78F2              //  L3.asm
   4+ 78F2              //
   5+ 78F2              //  Continuation of L2.asm
   6+ 78F2              //  I/O Block definitions
   7+ 78F2              //  ______________________________________________________________________
   8+ 78F2
   9+ 78F2
  10+ 78F2              //  ______________________________________________________________________
  11+ 78F2              //
  12+ 78F2              // r/w          a n f --
  13+ 78F2              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78F2                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78F2             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78F2             >
  14+ 78F2             >Dict_Ptr        defl    $
  14+ 78F2             >
  14+ 78F2             >//              ______________________________________________________________________
  14+ 78F2             >//              Heap part
  14+ 78F2             >
  14+ 78F2             >
  14+ 78F2             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EACA             >
  14+ EACA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EACA             >Latest_Definition defl  Heap_Ptr
  14+ EACA             >
  14+ EACA             >                // dummy db directives used to calculate length of namec
  14+ EACA 52 2F 57    >                db      "R/W"
  14+ EACD             >len_NFA         defl    $ - temp_NFA
  14+ EACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EACA             >
  14+ EACA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EACB 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EACE             >                org     $-1                 // alter last byte of Name just above to set
  14+ EACD D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EACE             >
  14+ EACE C1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAD0             >Prev_Ptr        defl    Heap_Ptr
  14+ EAD0             >
  14+ EAD0             >mirror_Ptr      defl    $
  14+ EAD0             >
  14+ EAD0 F4 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAD2             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAD2             >
  14+ EAD2             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAD2             >
  14+ EAD2             >//              ______________________________________________________________________
  14+ EAD2             >//              Dictionary part
  14+ EAD2             >
  14+ EAD2             >                org     Dict_Ptr
  14+ 78F2             >
  14+ 78F2 D0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78F4             >
  14+ 78F4             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78F4 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78F7             >
  14+ 78F7             >
  14+ 78F7             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78F7             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78F7             >
  14+ 78F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78F7 1B 68                        dw      TO_R                    // >r
  16+ 78F9 7E 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78FB DC 68 47 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78FF B8 68 ED 78                  dw      OVER, NSEC              // over #sec
  19+ 7903 7E 68 CE 6B                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7907 E0 67                        dw      OR_OP                   // or
  21+ 7909 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 790D A7 6D
  22+ 790F 26 68                        dw      R_TO                    // r>
  23+ 7911                                                              // if
  24+ 7911 F3 63                        dw      ZBRANCH
  25+ 7913 08 00                        dw      Read_Write_Else - $
  26+ 7915 98 78                        dw          BLK_READ            //      blk-read
  27+ 7917 EF 63                        dw      BRANCH
  28+ 7919 04 00                        dw      Read_Write_Endif - $
  29+ 791B              Read_Write_Else:                                // else
  30+ 791B B1 78                        dw          BLK_WRITE           //      blk-write
  31+ 791D              Read_Write_Endif:                               // endif
  32+ 791D 11 68                        dw      EXIT                    // ;
  33+ 791F
  34+ 791F
  35+ 791F              //  ______________________________________________________________________
  36+ 791F              //
  37+ 791F              // +buf        a1 -- a2 f
  38+ 791F              // advences to next buffer, cyclically rotating along them
  39+ 791F                              Colon_Def PBUF, "+BUF", is_normal
  39+ 791F             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 791F             >
  39+ 791F             >Dict_Ptr        defl    $
  39+ 791F             >
  39+ 791F             >//              ______________________________________________________________________
  39+ 791F             >//              Heap part
  39+ 791F             >
  39+ 791F             >
  39+ 791F             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAD2             >
  39+ EAD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAD2             >Latest_Definition defl  Heap_Ptr
  39+ EAD2             >
  39+ EAD2             >                // dummy db directives used to calculate length of namec
  39+ EAD2 2B 42 55 46 >                db      "+BUF"
  39+ EAD6             >len_NFA         defl    $ - temp_NFA
  39+ EAD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAD2             >
  39+ EAD2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAD3 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAD7             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAD6 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAD7             >
  39+ EAD7 CA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAD9             >Prev_Ptr        defl    Heap_Ptr
  39+ EAD9             >
  39+ EAD9             >mirror_Ptr      defl    $
  39+ EAD9             >
  39+ EAD9 21 79       >                dw      Dict_Ptr + 2        // xt
  39+ EADB             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EADB             >
  39+ EADB             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EADB             >
  39+ EADB             >//              ______________________________________________________________________
  39+ EADB             >//              Dictionary part
  39+ EADB             >
  39+ EADB             >                org     Dict_Ptr
  39+ 791F             >
  39+ 791F D9 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 7921             >
  39+ 7921             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7921 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7924             >
  39+ 7924             >
  39+ 7924             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7924             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7924             >
  39+ 7924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7924 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7928 5E 68
  41+ 792A DC 68 C7 6A                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 792E 46 69
  42+ 7930 A8 6B                        dw      EQUALS                  // =
  43+ 7932                                                              // if
  44+ 7932 F3 63                        dw      ZBRANCH
  45+ 7934 08 00                        dw      PBuf_Endif - $
  46+ 7936 C1 68                        dw          DROP                //      drop
  47+ 7938 C1 6A 46 69                  dw          FIRST, FETCH        //      first @
  48+ 793C              PBuf_Endif:                                     // endif
  49+ 793C DC 68 33 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7940 46 69
  50+ 7942 9C 6B                        dw      SUBTRACT                // -
  51+ 7944 11 68                        dw      EXIT                    // ;
  52+ 7946
  53+ 7946              //  ______________________________________________________________________
  54+ 7946              //
  55+ 7946              // update       --
  56+ 7946              // mark the last used block to be written to disk
  57+ 7946                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7946             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7946             >
  57+ 7946             >Dict_Ptr        defl    $
  57+ 7946             >
  57+ 7946             >//              ______________________________________________________________________
  57+ 7946             >//              Heap part
  57+ 7946             >
  57+ 7946             >
  57+ 7946             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EADB             >
  57+ EADB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EADB             >Latest_Definition defl  Heap_Ptr
  57+ EADB             >
  57+ EADB             >                // dummy db directives used to calculate length of namec
  57+ EADB 55 50 44 41 >                db      "UPDATE"
  57+ EADF 54 45       >
  57+ EAE1             >len_NFA         defl    $ - temp_NFA
  57+ EAE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EADB             >
  57+ EADB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EADC 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAE0 54 45       >
  57+ EAE2             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAE1 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAE2             >
  57+ EAE2 D2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAE4             >Prev_Ptr        defl    Heap_Ptr
  57+ EAE4             >
  57+ EAE4             >mirror_Ptr      defl    $
  57+ EAE4             >
  57+ EAE4 48 79       >                dw      Dict_Ptr + 2        // xt
  57+ EAE6             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAE6             >
  57+ EAE6             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAE6             >
  57+ EAE6             >//              ______________________________________________________________________
  57+ EAE6             >//              Dictionary part
  57+ EAE6             >
  57+ EAE6             >                org     Dict_Ptr
  57+ 7946             >
  57+ 7946 E4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 7948             >
  57+ 7948             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7948 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 794B             >
  57+ 794B             >
  57+ 794B             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 794B             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 794B             >
  57+ 794B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 794B 33 6B 46 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 794F 46 69
  59+ 7951 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7955 E0 67
  60+ 7957 33 6B 46 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 795B 50 69
  61+ 795D 11 68                        dw      EXIT                    // ;
  62+ 795F
  63+ 795F
  64+ 795F              //  ______________________________________________________________________
  65+ 795F              //
  66+ 795F              // empty-buffers --
  67+ 795F                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 795F             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 795F             >
  67+ 795F             >Dict_Ptr        defl    $
  67+ 795F             >
  67+ 795F             >//              ______________________________________________________________________
  67+ 795F             >//              Heap part
  67+ 795F             >
  67+ 795F             >
  67+ 795F             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAE6             >
  67+ EAE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAE6             >Latest_Definition defl  Heap_Ptr
  67+ EAE6             >
  67+ EAE6             >                // dummy db directives used to calculate length of namec
  67+ EAE6 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAEA 59 2D 42 55 >
  67+ EAEE 46 46 45 52 >
  67+ EAF2 53          >
  67+ EAF3             >len_NFA         defl    $ - temp_NFA
  67+ EAF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAE6             >
  67+ EAE6 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAE7 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAEB 59 2D 42 55 >
  67+ EAEF 46 46 45 52 >
  67+ EAF3 53          >
  67+ EAF4             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAF3 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAF4             >
  67+ EAF4 DB 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAF6             >Prev_Ptr        defl    Heap_Ptr
  67+ EAF6             >
  67+ EAF6             >mirror_Ptr      defl    $
  67+ EAF6             >
  67+ EAF6 61 79       >                dw      Dict_Ptr + 2        // xt
  67+ EAF8             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAF8             >
  67+ EAF8             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAF8             >
  67+ EAF8             >//              ______________________________________________________________________
  67+ EAF8             >//              Dictionary part
  67+ EAF8             >
  67+ EAF8             >                org     Dict_Ptr
  67+ 795F             >
  67+ 795F F6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7961             >
  67+ 7961             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7961 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7964             >
  67+ 7964             >
  67+ 7964             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7964             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7964             >
  67+ 7964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7964 C1 6A 46 69                  dw      FIRST, FETCH            // first @
  69+ 7968 C7 6A 46 69                  dw      LIMIT, FETCH            // limit @
  70+ 796C B8 68 9C 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7970 C7 70
  71+ 7972 11 68                        dw      EXIT                    // ;
  72+ 7974
  73+ 7974              //  ______________________________________________________________________
  74+ 7974              //
  75+ 7974              // buffer       n -- a
  76+ 7974              // read block n and gives the address to a buffer
  77+ 7974              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7974              // disk before reading the block n.
  79+ 7974
  80+ 7974                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7974             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7974             >
  80+ 7974             >Dict_Ptr        defl    $
  80+ 7974             >
  80+ 7974             >//              ______________________________________________________________________
  80+ 7974             >//              Heap part
  80+ 7974             >
  80+ 7974             >
  80+ 7974             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAF8             >
  80+ EAF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAF8             >Latest_Definition defl  Heap_Ptr
  80+ EAF8             >
  80+ EAF8             >                // dummy db directives used to calculate length of namec
  80+ EAF8 42 55 46 46 >                db      "BUFFER"
  80+ EAFC 45 52       >
  80+ EAFE             >len_NFA         defl    $ - temp_NFA
  80+ EAFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAF8             >
  80+ EAF8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAF9 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAFD 45 52       >
  80+ EAFF             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAFE D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAFF             >
  80+ EAFF E6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EB01             >Prev_Ptr        defl    Heap_Ptr
  80+ EB01             >
  80+ EB01             >mirror_Ptr      defl    $
  80+ EB01             >
  80+ EB01 76 79       >                dw      Dict_Ptr + 2        // xt
  80+ EB03             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EB03             >
  80+ EB03             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EB03             >
  80+ EB03             >//              ______________________________________________________________________
  80+ EB03             >//              Dictionary part
  80+ EB03             >
  80+ EB03             >                org     Dict_Ptr
  80+ 7974             >
  80+ 7974 01 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7976             >
  80+ 7976             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7976 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7979             >
  80+ 7979             >
  80+ 7979             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7979             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7979             >
  80+ 7979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7979 2D 6B 46 69                  dw      USED, FETCH             // used @
  82+ 797D DC 68 1B 68                  dw      DUP, TO_R               // dup >r
  83+ 7981                                                              // begin
  84+ 7981              Buffer_Begin:
  85+ 7981 21 79                        dw          PBUF                //      +buf
  86+ 7983                                                              // until
  87+ 7983 F3 63                        dw      ZBRANCH
  88+ 7985 FC FF                        dw      Buffer_Begin - $
  89+ 7987 2D 6B 50 69                  dw      USED, STORE             // used !
  90+ 798B 31 68 46 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 798F 47 68
  91+ 7991                                                              // if
  92+ 7991 F3 63                        dw      ZBRANCH
  93+ 7993 14 00                        dw      Buffer_Endif - $
  94+ 7995 31 68 8D 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7999 31 68 46 69                  dw          R_OP, FETCH         //      r fetch
  96+ 799D A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 79A1 D1 67                        dw          AND_OP              //      and
  98+ 79A3 38 6A F4 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 79A7              Buffer_Endif:                                   // endif
 100+ 79A7 31 68 50 69                  dw      R_OP, STORE             // r !
 101+ 79AB 31 68 33 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 79AF 50 69
 102+ 79B1 26 68 8D 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 79B5 11 68                        dw      EXIT                    // ;
 104+ 79B7
 105+ 79B7              //  ______________________________________________________________________
 106+ 79B7              //
 107+ 79B7              // block        n -- a
 108+ 79B7              // Leaves the buffer address that contains the block n.
 109+ 79B7              // If the block is not already present, it will be loaded from disk
 110+ 79B7              // The block previously inside the buffer, if modified, is rewritten to
 111+ 79B7              // disk before reading the block n.
 112+ 79B7              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 79B7
 114+ 79B7                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 79B7             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 79B7             >
 114+ 79B7             >Dict_Ptr        defl    $
 114+ 79B7             >
 114+ 79B7             >//              ______________________________________________________________________
 114+ 79B7             >//              Heap part
 114+ 79B7             >
 114+ 79B7             >
 114+ 79B7             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EB03             >
 114+ EB03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EB03             >Latest_Definition defl  Heap_Ptr
 114+ EB03             >
 114+ EB03             >                // dummy db directives used to calculate length of namec
 114+ EB03 42 4C 4F 43 >                db      "BLOCK"
 114+ EB07 4B          >
 114+ EB08             >len_NFA         defl    $ - temp_NFA
 114+ EB08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EB03             >
 114+ EB03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EB04 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EB08 4B          >
 114+ EB09             >                org     $-1                 // alter last byte of Name just above to set
 114+ EB08 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EB09             >
 114+ EB09 F8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EB0B             >Prev_Ptr        defl    Heap_Ptr
 114+ EB0B             >
 114+ EB0B             >mirror_Ptr      defl    $
 114+ EB0B             >
 114+ EB0B B9 79       >                dw      Dict_Ptr + 2        // xt
 114+ EB0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EB0D             >
 114+ EB0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EB0D             >
 114+ EB0D             >//              ______________________________________________________________________
 114+ EB0D             >//              Dictionary part
 114+ EB0D             >
 114+ EB0D             >                org     Dict_Ptr
 114+ 79B7             >
 114+ 79B7 0B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 79B9             >
 114+ 79B9             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 79B9 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 79BC             >
 114+ 79BC             >
 114+ 79BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 79BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 79BC             >
 114+ 79BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 79BC                          //  dw      OFFSET, FETCH           // offset @
 116+ 79BC                          //  dw      PLUS
 117+ 79BC 1B 68                        dw      TO_R                    // + >r
 118+ 79BE 33 6B 46 69                  dw      PREV, FETCH             // prev @
 119+ 79C2 DC 68 46 69                  dw      DUP, FETCH              // dup @
 120+ 79C6 31 68 9C 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 79CA DC 68 5E 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 79CE                                                              // if
 123+ 79CE F3 63                        dw        ZBRANCH
 124+ 79D0 32 00                        dw        Block_Endif_1 - $
 125+ 79D2              Block_Begin:                                    //      begin
 126+ 79D2 21 79 36 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 79D6                                                              //          if
 128+ 79D6 F3 63                        dw          ZBRANCH
 129+ 79D8 12 00                        dw          Block_Endif_2 - $
 130+ 79DA C1 68                        dw              DROP            //              drop
 131+ 79DC 31 68 76 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 79E0 DC 68                        dw              DUP             //              dup
 133+ 79E2 31 68 3F 6A                  dw              R_OP, ONE       //              r 1
 134+ 79E6 F4 78                        dw              READ_WRITE      //              r/w
 135+ 79E8 99 68                        dw              TWO_MINUS       //              2-
 136+ 79EA              Block_Endif_2:                                  //          endif
 137+ 79EA DC 68 46 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79EE 31 68
 138+ 79F0 9C 6B DC 68                  dw          SUBTRACT, DUP       //          - dup
 139+ 79F4 5E 68 36 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79F8                                                              //      until
 141+ 79F8 F3 63                        dw        ZBRANCH
 142+ 79FA D8 FF                        dw        Block_Begin - $
 143+ 79FC DC 68 33 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 7A00 50 69
 144+ 7A02              Block_Endif_1:                                  // endif
 145+ 7A02 26 68 C1 68                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 7A06 8D 68
 146+ 7A08 11 68                        dw      EXIT                    // ;
 147+ 7A0A
 148+ 7A0A              //  ______________________________________________________________________
 149+ 7A0A              //
 150+ 7A0A              // #buff        -- n
 151+ 7A0A              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 7A0A                              Constant_Def NBUFF,   "#BUFF", BUFFERS
 152+ 7A0A             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 7A0A             >
 152+ 7A0A             >Dict_Ptr        defl    $
 152+ 7A0A             >
 152+ 7A0A             >//              ______________________________________________________________________
 152+ 7A0A             >//              Heap part
 152+ 7A0A             >
 152+ 7A0A             >
 152+ 7A0A             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EB0D             >
 152+ EB0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EB0D             >Latest_Definition defl  Heap_Ptr
 152+ EB0D             >
 152+ EB0D             >                // dummy db directives used to calculate length of namec
 152+ EB0D 23 42 55 46 >                db      "#BUFF"
 152+ EB11 46          >
 152+ EB12             >len_NFA         defl    $ - temp_NFA
 152+ EB12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EB0D             >
 152+ EB0D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EB0E 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EB12 46          >
 152+ EB13             >                org     $-1                 // alter last byte of Name just above to set
 152+ EB12 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EB13             >
 152+ EB13 03 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EB15             >Prev_Ptr        defl    Heap_Ptr
 152+ EB15             >
 152+ EB15             >mirror_Ptr      defl    $
 152+ EB15             >
 152+ EB15 0C 7A       >                dw      Dict_Ptr + 2        // xt
 152+ EB17             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EB17             >
 152+ EB17             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EB17             >
 152+ EB17             >//              ______________________________________________________________________
 152+ EB17             >//              Dictionary part
 152+ EB17             >
 152+ EB17             >                org     Dict_Ptr
 152+ 7A0A             >
 152+ 7A0A 15 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 7A0C             >
 152+ 7A0C             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 7A0C CD 0C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 7A0F             >
 152+ 7A0F             >
 152+ 7A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 7A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 7A0F             >
 152+ 7A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 7A0F 06 00       >                dw      BUFFERS
 153+ 7A11
 154+ 7A11              //  ______________________________________________________________________
 155+ 7A11              //
 156+ 7A11              // flush        --
 157+ 7A11                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 7A11             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 7A11             >
 157+ 7A11             >Dict_Ptr        defl    $
 157+ 7A11             >
 157+ 7A11             >//              ______________________________________________________________________
 157+ 7A11             >//              Heap part
 157+ 7A11             >
 157+ 7A11             >
 157+ 7A11             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EB17             >
 157+ EB17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EB17             >Latest_Definition defl  Heap_Ptr
 157+ EB17             >
 157+ EB17             >                // dummy db directives used to calculate length of namec
 157+ EB17 46 4C 55 53 >                db      "FLUSH"
 157+ EB1B 48          >
 157+ EB1C             >len_NFA         defl    $ - temp_NFA
 157+ EB1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EB17             >
 157+ EB17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EB18 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB1C 48          >
 157+ EB1D             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB1C C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB1D             >
 157+ EB1D 0D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB1F             >Prev_Ptr        defl    Heap_Ptr
 157+ EB1F             >
 157+ EB1F             >mirror_Ptr      defl    $
 157+ EB1F             >
 157+ EB1F 13 7A       >                dw      Dict_Ptr + 2        // xt
 157+ EB21             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB21             >
 157+ EB21             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB21             >
 157+ EB21             >//              ______________________________________________________________________
 157+ EB21             >//              Dictionary part
 157+ EB21             >
 157+ EB21             >                org     Dict_Ptr
 157+ 7A11             >
 157+ 7A11 1F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 7A13             >
 157+ 7A13             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 7A13 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 7A16             >
 157+ 7A16             >
 157+ 7A16             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 7A16             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 7A16             >
 157+ 7A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 7A16 0C 7A 77 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 7A1A 38 6A
 159+ 7A1C              Flush_Do:                                       // do
 160+ 7A1C 2C 64                        dw      C_DO
 161+ 7A1E 38 6A 76 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 7A22 C1 68
 162+ 7A24                                                              // loop
 163+ 7A24 E7 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 7A28 4D 78 46 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 7A2C CB 66 C1 68                  dw      F_SYNC, DROP            // f_sync drop
 166+ 7A30 11 68                        dw      EXIT                    // exit
 167+ 7A32
 168+ 7A32              //  ______________________________________________________________________
 169+ 7A32              //
 170+ 7A32              // f_getline    a m fh -- n
 171+ 7A32              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 7A32              // Address a is left for subsequent processing
 173+ 7A32              // and n as the actual number of byte read, that is the length of line
 174+ 7A32                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 7A32             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 7A32             >
 174+ 7A32             >Dict_Ptr        defl    $
 174+ 7A32             >
 174+ 7A32             >//              ______________________________________________________________________
 174+ 7A32             >//              Heap part
 174+ 7A32             >
 174+ 7A32             >
 174+ 7A32             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB21             >
 174+ EB21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB21             >Latest_Definition defl  Heap_Ptr
 174+ EB21             >
 174+ EB21             >                // dummy db directives used to calculate length of namec
 174+ EB21 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB25 54 4C 49 4E >
 174+ EB29 45          >
 174+ EB2A             >len_NFA         defl    $ - temp_NFA
 174+ EB2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB21             >
 174+ EB21 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB22 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB26 54 4C 49 4E >
 174+ EB2A 45          >
 174+ EB2B             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB2A C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB2B             >
 174+ EB2B 17 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB2D             >Prev_Ptr        defl    Heap_Ptr
 174+ EB2D             >
 174+ EB2D             >mirror_Ptr      defl    $
 174+ EB2D             >
 174+ EB2D 34 7A       >                dw      Dict_Ptr + 2        // xt
 174+ EB2F             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB2F             >
 174+ EB2F             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB2F             >
 174+ EB2F             >//              ______________________________________________________________________
 174+ EB2F             >//              Dictionary part
 174+ EB2F             >
 174+ EB2F             >                org     Dict_Ptr
 174+ 7A32             >
 174+ 7A32 2D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 7A34             >
 174+ 7A34             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7A34 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7A37             >
 174+ 7A37             >
 174+ 7A37             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7A37             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7A37             >
 174+ 7A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7A37 1B 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 7A39 CC 68                        dw      TUCK                    // tuck             ( m a m )
 177+ 7A3B 31 68 D8 66                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 7A3F A3 63 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 7A43 A7 6D
 179+ 7A45
 180+ 7A45 17 69 B8 68                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A49 77 68 D5 68                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A4D
 183+ 7A4D 31 68 F2 66                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A51 A3 63 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 7A55 A7 6D
 185+ 7A57                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A57 F3 63                        dw      ZBRANCH
 187+ 7A59 3C 00                        dw      FGetline_Else - $
 188+ 7A5B A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A5F 20 65
 189+ 7A61 C1 68 C6 68                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A65 D5 68                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A67 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A6B 20 65
 192+ 7A6D C1 68 C6 68                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A71 E3 68 D9 6B                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A75 DC 68 4B 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A79 50 69
 195+ 7A7B DC 68 1B 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A7F 17 69 26 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A83 38 6A 68 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A87 26 68 A0 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A8B A3 63 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 7A8F A7 6D
 200+ 7A91                                                              // else
 201+ 7A91 EF 63                        dw      BRANCH
 202+ 7A93 0C 00                        dw      FGetline_Endif - $
 203+ 7A95              FGetline_Else:
 204+ 7A95 26 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A97 17 69 11 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A9B C1 68 38 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A9F              FGetline_Endif:                                 // endif
 208+ 7A9F 1B 68 DC 68                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7AA3 DC 68
 209+ 7AA5 77 68 D5 68                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7AA9 31 68 56 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7AAD 24 69 5E 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7AB1 38 6A D5 68                  dw      ZERO, SWAP              // 0 swap
 213+ 7AB5 91 68 50 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7AB9 31 68 5E 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7ABD 7E 68
 215+ 7ABF D5 68 31 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7AC3 9C 6B
 216+ 7AC5 D2 70                        dw      BLANK                   // blank
 217+ 7AC7 26 68                        dw      R_TO                    // r>                   ( n )
 218+ 7AC9 11 68                        dw      EXIT                    // ;
 219+ 7ACB
 220+ 7ACB              //  ______________________________________________________________________
 221+ 7ACB              //
 222+ 7ACB              // f_include    fh --
 223+ 7ACB              // Given a filehandle includes the source from file
 224+ 7ACB                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7ACB             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7ACB             >
 224+ 7ACB             >Dict_Ptr        defl    $
 224+ 7ACB             >
 224+ 7ACB             >//              ______________________________________________________________________
 224+ 7ACB             >//              Heap part
 224+ 7ACB             >
 224+ 7ACB             >
 224+ 7ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB2F             >
 224+ EB2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB2F             >Latest_Definition defl  Heap_Ptr
 224+ EB2F             >
 224+ EB2F             >                // dummy db directives used to calculate length of namec
 224+ EB2F 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB33 43 4C 55 44 >
 224+ EB37 45          >
 224+ EB38             >len_NFA         defl    $ - temp_NFA
 224+ EB38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB2F             >
 224+ EB2F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB30 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB34 43 4C 55 44 >
 224+ EB38 45          >
 224+ EB39             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB38 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB39             >
 224+ EB39 21 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB3B             >Prev_Ptr        defl    Heap_Ptr
 224+ EB3B             >
 224+ EB3B             >mirror_Ptr      defl    $
 224+ EB3B             >
 224+ EB3B CD 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB3D             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB3D             >
 224+ EB3D             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB3D             >
 224+ EB3D             >//              ______________________________________________________________________
 224+ EB3D             >//              Dictionary part
 224+ EB3D             >
 224+ EB3D             >                org     Dict_Ptr
 224+ 7ACB             >
 224+ 7ACB 3B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7ACD             >
 224+ 7ACD             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7ACD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7AD0             >
 224+ 7AD0             >
 224+ 7AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7AD0             >
 224+ 7AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7AD0 D9 6A 46 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7AD4 1B 68
 226+ 7AD6 DF 6A 46 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7ADA 1B 68
 227+ 7ADC 45 6B 46 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7AE0 1B 68
 228+ 7AE2 31 68                        dw      R_OP                    // r
 229+ 7AE4 50 68                        dw      ZGREATER                // 0>  (filehandle)
 230+ 7AE6                                                              // if
 231+ 7AE6 F3 63                        dw      ZBRANCH
 232+ 7AE8 20 00                        dw      FInclude_Else_1 - $
 233+ 7AEA 31 68 D8 66                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 7AEE A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 7AF2 A7 6D
 235+ 7AF4 DF 6A 46 69                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 7AF8 99 68                        dw          TWO_MINUS
 237+ 7AFA 4B 6B 46 69                  dw          SPAN, FETCH         //      span @ -
 238+ 7AFE 9C 6B                        dw          SUBTRACT
 239+ 7B00 91 6B 68 68                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 7B04                                                              // else
 241+ 7B04 EF 63                        dw      BRANCH
 242+ 7B06 06 00                        dw      FInclude_Endif_1 - $
 243+ 7B08              FInclude_Else_1:
 244+ 7B08 38 6A 38 6A                  dw          ZERO, ZERO          //      0 0
 245+ 7B0C                                                              // endif
 246+ 7B0C              FInclude_Endif_1:
 247+ 7B0C 1B 68 1B 68                  dw      TO_R, TO_R              // >r >r
 248+ 7B10 45 6B 50 69                  dw      SOURCE_ID, STORE        // source-id !
 249+ 7B14              FInclude_Begin:                                 // begin
 250+ 7B14 3F 6A B9 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 7B18 69 6A
 251+ 7B1A 24 69 D2 70                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 7B1E D5 68 77 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 7B22 D5 68 91 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 7B26 45 6B 46 69                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 7B2A 34 7A                        dw          F_GETLINE           //      f_getline
 256+ 7B2C                                                              // while
 257+ 7B2C F3 63                        dw      ZBRANCH
 258+ 7B2E 14 00                        dw      FInclude_Repeat - $
 259+ 7B30 3F 6A D9 6A                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 7B34 50 69
 260+ 7B36 38 6A DF 6A                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 7B3A 50 69
 261+ 7B3C 04 75                        dw          INTERPRET           //      interpret
 262+ 7B3E EF 63                        dw      BRANCH
 263+ 7B40 D4 FF                        dw      FInclude_Begin - $
 264+ 7B42              FInclude_Repeat:                                // repeat
 265+ 7B42                              //  close current file
 266+ 7B42 45 6B 46 69                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 7B46 BE 66                        dw      F_CLOSE                 // f_close
 268+ 7B48 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 7B4C A7 6D
 269+ 7B4E
 270+ 7B4E 26 68 26 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 7B52 26 68
 271+ 7B54 DC 68 45 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 7B58 50 69
 272+ 7B5A 50 68                        dw      ZGREATER                // 0>
 273+ 7B5C                                                              // if
 274+ 7B5C F3 63                        dw      ZBRANCH
 275+ 7B5E 12 00                        dw      FInclude_Else_2 - $
 276+ 7B60 45 6B 46 69                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 7B64 A0 66                        dw          F_SEEK              //      f_seek
 278+ 7B66 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 7B6A A7 6D
 279+ 7B6C                                                              // else
 280+ 7B6C EF 63                        dw      BRANCH
 281+ 7B6E 04 00                        dw      FInclude_Endif_2 - $
 282+ 7B70              FInclude_Else_2:
 283+ 7B70 11 69                        dw          TWO_DROP            //      2drop
 284+ 7B72              FInclude_Endif_2:                               // endif
 285+ 7B72 26 68 DF 6A                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 7B76 50 69
 286+ 7B78 26 68 D9 6A                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 7B7C 50 69
 287+ 7B7E 11 68                        dw      EXIT                    // ;
 288+ 7B80
 289+ 7B80              //  ______________________________________________________________________
 290+ 7B80              //
 291+ 7B80              // open<         -- fh
 292+ 7B80              // Open the following filename and return it file-handle
 293+ 7B80              // Used in the form OPEN CCCC
 294+ 7B80                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 7B80             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 7B80             >
 294+ 7B80             >Dict_Ptr        defl    $
 294+ 7B80             >
 294+ 7B80             >//              ______________________________________________________________________
 294+ 7B80             >//              Heap part
 294+ 7B80             >
 294+ 7B80             >
 294+ 7B80             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB3D             >
 294+ EB3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB3D             >Latest_Definition defl  Heap_Ptr
 294+ EB3D             >
 294+ EB3D             >                // dummy db directives used to calculate length of namec
 294+ EB3D 4F 50 45 4E >                db      "OPEN<"
 294+ EB41 3C          >
 294+ EB42             >len_NFA         defl    $ - temp_NFA
 294+ EB42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB3D             >
 294+ EB3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB3E 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB42 3C          >
 294+ EB43             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB42 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB43             >
 294+ EB43 2F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB45             >Prev_Ptr        defl    Heap_Ptr
 294+ EB45             >
 294+ EB45             >mirror_Ptr      defl    $
 294+ EB45             >
 294+ EB45 82 7B       >                dw      Dict_Ptr + 2        // xt
 294+ EB47             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB47             >
 294+ EB47             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB47             >
 294+ EB47             >//              ______________________________________________________________________
 294+ EB47             >//              Dictionary part
 294+ EB47             >
 294+ EB47             >                org     Dict_Ptr
 294+ 7B80             >
 294+ 7B80 45 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 7B82             >
 294+ 7B82             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 7B82 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 7B85             >
 294+ 7B85             >
 294+ 7B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 7B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 7B85             >
 294+ 7B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 7B85 5B 6A                        dw      BL
 296+ 7B87 FF 70 EC 6E                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 7B8B B8 68
 297+ 7B8D 5E 68 38 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 7B91 D5 68 50 69
 298+ 7B95 F0 70 3F 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 7B99 20 67
 299+ 7B9B A3 63 2B 00                  dw      LIT, 43                 // 43
 300+ 7B9F A7 6D                        dw      QERROR                  // ?error
 301+ 7BA1 11 68                        dw      EXIT                    // ;
 302+ 7BA3
 303+ 7BA3              //  ______________________________________________________________________
 304+ 7BA3              //
 305+ 7BA3              // use          -- cccc
 306+ 7BA3              // Include the following filename
 307+ 7BA3              //              Colon_Def USE, "USE", is_normal
 308+ 7BA3              //              dw      OPEN_FH                 // open<
 309+ 7BA3              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 7BA3              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 7BA3              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 7BA3              //              dw      EXIT                    // ;
 313+ 7BA3
 314+ 7BA3              //  ______________________________________________________________________
 315+ 7BA3              //
 316+ 7BA3              // include      -- cccc
 317+ 7BA3              // Include the following filename
 318+ 7BA3                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 7BA3             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 7BA3             >
 318+ 7BA3             >Dict_Ptr        defl    $
 318+ 7BA3             >
 318+ 7BA3             >//              ______________________________________________________________________
 318+ 7BA3             >//              Heap part
 318+ 7BA3             >
 318+ 7BA3             >
 318+ 7BA3             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB47             >
 318+ EB47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB47             >Latest_Definition defl  Heap_Ptr
 318+ EB47             >
 318+ EB47             >                // dummy db directives used to calculate length of namec
 318+ EB47 49 4E 43 4C >                db      "INCLUDE"
 318+ EB4B 55 44 45    >
 318+ EB4E             >len_NFA         defl    $ - temp_NFA
 318+ EB4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB47             >
 318+ EB47 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB48 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB4C 55 44 45    >
 318+ EB4F             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB4E C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB4F             >
 318+ EB4F 3D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB51             >Prev_Ptr        defl    Heap_Ptr
 318+ EB51             >
 318+ EB51             >mirror_Ptr      defl    $
 318+ EB51             >
 318+ EB51 A5 7B       >                dw      Dict_Ptr + 2        // xt
 318+ EB53             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB53             >
 318+ EB53             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB53             >
 318+ EB53             >//              ______________________________________________________________________
 318+ EB53             >//              Dictionary part
 318+ EB53             >
 318+ EB53             >                org     Dict_Ptr
 318+ 7BA3             >
 318+ 7BA3 51 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 7BA5             >
 318+ 7BA5             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7BA5 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 7BA8             >
 318+ 7BA8             >
 318+ 7BA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7BA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7BA8             >
 318+ 7BA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7BA8 82 7B                        dw      OPEN_FH                 // open<
 320+ 7BAA CD 7A                        dw      F_INCLUDE               //  f_include
 321+ 7BAC 11 68                        dw      EXIT                    // ;
 322+ 7BAE
 323+ 7BAE              //  ______________________________________________________________________
 324+ 7BAE              //
 325+ 7BAE              // needs
 326+ 7BAE              // check for cccc exists in vocabulary
 327+ 7BAE              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 7BAE
 329+ 7BAE              // temp filename cccc.f as counted string zero-padded
 330+ 7BAE                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 7BAE             >
 330+ 7BAE             >Dict_Ptr        defl    $
 330+ 7BAE             >
 330+ 7BAE             >//              ______________________________________________________________________
 330+ 7BAE             >//              Heap part
 330+ 7BAE             >
 330+ 7BAE             >
 330+ 7BAE             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB53             >
 330+ EB53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB53             >Latest_Definition defl  Heap_Ptr
 330+ EB53             >
 330+ EB53             >                // dummy db directives used to calculate length of namec
 330+ EB53 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB57 53 2D 57    >
 330+ EB5A             >len_NFA         defl    $ - temp_NFA
 330+ EB5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB53             >
 330+ EB53 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB54 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB58 53 2D 57    >
 330+ EB5B             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB5A D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB5B             >
 330+ EB5B 47 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB5D             >Prev_Ptr        defl    Heap_Ptr
 330+ EB5D             >
 330+ EB5D             >mirror_Ptr      defl    $
 330+ EB5D             >
 330+ EB5D B0 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB5F             >
 330+ EB5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB5F             >
 330+ EB5F             >//              ______________________________________________________________________
 330+ EB5F             >//              Dictionary part
 330+ EB5F             >
 330+ EB5F             >                org     Dict_Ptr
 330+ 7BAE             >
 330+ 7BAE 5D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7BB0             >
 330+ 7BB0             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7BB0 CD 48 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 7BB3             >
 330+ 7BB3             >
 330+ 7BB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7BB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7BB3             >
 330+ 7BB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7BB3 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 7BD6              // temp complete path+filename
 333+ 7BD6                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 7BD6             >
 333+ 7BD6             >Dict_Ptr        defl    $
 333+ 7BD6             >
 333+ 7BD6             >//              ______________________________________________________________________
 333+ 7BD6             >//              Heap part
 333+ 7BD6             >
 333+ 7BD6             >
 333+ 7BD6             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB5F             >
 333+ EB5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB5F             >Latest_Definition defl  Heap_Ptr
 333+ EB5F             >
 333+ EB5F             >                // dummy db directives used to calculate length of namec
 333+ EB5F 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB63 53 2D 46 4E >
 333+ EB67             >len_NFA         defl    $ - temp_NFA
 333+ EB67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB5F             >
 333+ EB5F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB60 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB64 53 2D 46 4E >
 333+ EB68             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB67 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB68             >
 333+ EB68 53 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB6A             >Prev_Ptr        defl    Heap_Ptr
 333+ EB6A             >
 333+ EB6A             >mirror_Ptr      defl    $
 333+ EB6A             >
 333+ EB6A D8 7B       >                dw      Dict_Ptr + 2        // xt
 333+ EB6C             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB6C             >
 333+ EB6C             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB6C             >
 333+ EB6C             >//              ______________________________________________________________________
 333+ EB6C             >//              Dictionary part
 333+ EB6C             >
 333+ EB6C             >                org     Dict_Ptr
 333+ 7BD6             >
 333+ 7BD6 6A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7BD8             >
 333+ 7BD8             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7BD8 CD 48 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 7BDB             >
 333+ 7BDB             >
 333+ 7BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7BDB             >
 333+ 7BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7BDB
 335+ 7BDB 00 00 00...                  ds      40
 336+ 7C03              // constant path
 337+ 7C03                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 7C03             >
 337+ 7C03             >Dict_Ptr        defl    $
 337+ 7C03             >
 337+ 7C03             >//              ______________________________________________________________________
 337+ 7C03             >//              Heap part
 337+ 7C03             >
 337+ 7C03             >
 337+ 7C03             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB6C             >
 337+ EB6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB6C             >Latest_Definition defl  Heap_Ptr
 337+ EB6C             >
 337+ EB6C             >                // dummy db directives used to calculate length of namec
 337+ EB6C 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB70 53 2D 49 4E >
 337+ EB74 43          >
 337+ EB75             >len_NFA         defl    $ - temp_NFA
 337+ EB75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB6C             >
 337+ EB6C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB6D 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB71 53 2D 49 4E >
 337+ EB75 43          >
 337+ EB76             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB75 C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB76             >
 337+ EB76 5F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB78             >Prev_Ptr        defl    Heap_Ptr
 337+ EB78             >
 337+ EB78             >mirror_Ptr      defl    $
 337+ EB78             >
 337+ EB78 05 7C       >                dw      Dict_Ptr + 2        // xt
 337+ EB7A             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB7A             >
 337+ EB7A             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB7A             >
 337+ EB7A             >//              ______________________________________________________________________
 337+ EB7A             >//              Dictionary part
 337+ EB7A             >
 337+ EB7A             >                org     Dict_Ptr
 337+ 7C03             >
 337+ 7C03 78 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7C05             >
 337+ 7C05             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7C05 CD 48 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 7C08             >
 337+ 7C08             >
 337+ 7C08             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7C08             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7C08             >
 337+ 7C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7C08 04 69 6E 63                  db      4, "inc/", 0
 338+ 7C0C 2F 00
 339+ 7C0E                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 7C0E             >
 339+ 7C0E             >Dict_Ptr        defl    $
 339+ 7C0E             >
 339+ 7C0E             >//              ______________________________________________________________________
 339+ 7C0E             >//              Heap part
 339+ 7C0E             >
 339+ 7C0E             >
 339+ 7C0E             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB7A             >
 339+ EB7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB7A             >Latest_Definition defl  Heap_Ptr
 339+ EB7A             >
 339+ EB7A             >                // dummy db directives used to calculate length of namec
 339+ EB7A 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB7E 53 2D 4C 49 >
 339+ EB82 42          >
 339+ EB83             >len_NFA         defl    $ - temp_NFA
 339+ EB83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB7A             >
 339+ EB7A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB7B 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB7F 53 2D 4C 49 >
 339+ EB83 42          >
 339+ EB84             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB83 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB84             >
 339+ EB84 6C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB86             >Prev_Ptr        defl    Heap_Ptr
 339+ EB86             >
 339+ EB86             >mirror_Ptr      defl    $
 339+ EB86             >
 339+ EB86 10 7C       >                dw      Dict_Ptr + 2        // xt
 339+ EB88             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB88             >
 339+ EB88             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB88             >
 339+ EB88             >//              ______________________________________________________________________
 339+ EB88             >//              Dictionary part
 339+ EB88             >
 339+ EB88             >                org     Dict_Ptr
 339+ 7C0E             >
 339+ 7C0E 86 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 7C10             >
 339+ 7C10             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 7C10 CD 48 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 7C13             >
 339+ 7C13             >
 339+ 7C13             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 7C13             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 7C13             >
 339+ 7C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 7C13 04 6C 69 62                  db      4, "lib/", 0
 340+ 7C17 2F 00
 341+ 7C19
 342+ 7C19              // Concatenate path at a and filename and include it
 343+ 7C19              // No error is issued if filename doesn't exist.
 344+ 7C19                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 7C19             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 7C19             >
 344+ 7C19             >Dict_Ptr        defl    $
 344+ 7C19             >
 344+ 7C19             >//              ______________________________________________________________________
 344+ 7C19             >//              Heap part
 344+ 7C19             >
 344+ 7C19             >
 344+ 7C19             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB88             >
 344+ EB88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB88             >Latest_Definition defl  Heap_Ptr
 344+ EB88             >
 344+ EB88             >                // dummy db directives used to calculate length of namec
 344+ EB88 4E 45 45 44 >                db      "NEEDS/"
 344+ EB8C 53 2F       >
 344+ EB8E             >len_NFA         defl    $ - temp_NFA
 344+ EB8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB88             >
 344+ EB88 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB89 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB8D 53 2F       >
 344+ EB8F             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB8E AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB8F             >
 344+ EB8F 7A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB91             >Prev_Ptr        defl    Heap_Ptr
 344+ EB91             >
 344+ EB91             >mirror_Ptr      defl    $
 344+ EB91             >
 344+ EB91 1B 7C       >                dw      Dict_Ptr + 2        // xt
 344+ EB93             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB93             >
 344+ EB93             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB93             >
 344+ EB93             >//              ______________________________________________________________________
 344+ EB93             >//              Dictionary part
 344+ EB93             >
 344+ EB93             >                org     Dict_Ptr
 344+ 7C19             >
 344+ 7C19 91 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 7C1B             >
 344+ 7C1B             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7C1B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7C1E             >
 344+ 7C1E             >
 344+ 7C1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7C1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7C1E             >
 344+ 7C1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7C1E EC 6E CC 68                  dw      COUNT, TUCK             // n a n
 346+ 7C22 D8 7B D5 68                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 7C26 56 67
 347+ 7C28 D8 7B 5E 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 7C2C B0 7B 77 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 7C30 D5 68
 349+ 7C32 A3 63 23 00                  dw      LIT, 35
 350+ 7C36 56 67                        dw      CMOVE
 351+ 7C38 D8 7B                        dw      NEEDS_FN
 352+ 7C3A F0 70 3F 6A                  dw      PAD, ONE, F_OPEN
 352+ 7C3E 20 67
 353+ 7C40 36 68                        dw      ZEQUAL
 354+ 7C42 F3 63                        dw      ZBRANCH
 355+ 7C44 08 00                        dw      Needs_1 - $
 356+ 7C46 CD 7A                        dw          F_INCLUDE
 357+ 7C48 EF 63                        dw      BRANCH
 358+ 7C4A 04 00                        dw      Needs_2 - $
 359+ 7C4C              Needs_1:
 360+ 7C4C              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 7C4C              //              dw          LIT, 43, MESSAGE
 362+ 7C4C C1 68                        dw          DROP
 363+ 7C4E              Needs_2:
 364+ 7C4E 11 68                        dw      EXIT                    // ;
 365+ 7C50
 366+ 7C50              NDOM_PTR:
 367+ 7C50              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 368+ 7C50              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 7C50 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 7C54 7C 5C 3C 3E
 369+ 7C58 22
 370+ 7C59              //              db 0
 371+ 7C59
 372+ 7C59              NCDM_PTR:
 373+ 7C59              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 374+ 7C59              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 375+ 7C59 5F 5E 25 26                  db '_^%&$_{}~'
 375+ 7C5D 24 5F 7B 7D
 375+ 7C61 7E
 376+ 7C62              //              db 0
 377+ 7C62
 378+ 7C62              // Replace illegal character in filename using the map here above
 379+ 7C62              // at the moment we need only  "
 380+ 7C62                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 380+ 7C62             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 380+ 7C62             >
 380+ 7C62             >Dict_Ptr        defl    $
 380+ 7C62             >
 380+ 7C62             >//              ______________________________________________________________________
 380+ 7C62             >//              Heap part
 380+ 7C62             >
 380+ 7C62             >
 380+ 7C62             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB93             >
 380+ EB93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB93             >Latest_Definition defl  Heap_Ptr
 380+ EB93             >
 380+ EB93             >                // dummy db directives used to calculate length of namec
 380+ EB93 4D 41 50 2D >                db      "MAP-FN"
 380+ EB97 46 4E       >
 380+ EB99             >len_NFA         defl    $ - temp_NFA
 380+ EB99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB93             >
 380+ EB93 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB94 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 380+ EB98 46 4E       >
 380+ EB9A             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB99 CE          >                db      {b $} | END_BIT     // msb as name end
 380+ EB9A             >
 380+ EB9A 88 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ EB9C             >Prev_Ptr        defl    Heap_Ptr
 380+ EB9C             >
 380+ EB9C             >mirror_Ptr      defl    $
 380+ EB9C             >
 380+ EB9C 64 7C       >                dw      Dict_Ptr + 2        // xt
 380+ EB9E             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB9E             >
 380+ EB9E             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB9E             >
 380+ EB9E             >//              ______________________________________________________________________
 380+ EB9E             >//              Dictionary part
 380+ EB9E             >
 380+ EB9E             >                org     Dict_Ptr
 380+ 7C62             >
 380+ 7C62 9C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 7C64             >
 380+ 7C64             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7C64 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7C67             >
 380+ 7C67             >
 380+ 7C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7C67             >
 380+ 7C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7C67 EC 6E F9 6E                  dw      COUNT, BOUNDS
 382+ 7C6B 2C 64                        dw      C_DO
 383+ 7C6D              Needs_3:
 384+ 7C6D              //              dw          NCDM, NDOM, LIT, 10
 385+ 7C6D A3 63 59 7C                  dw          LIT, NCDM_PTR           //
 386+ 7C71 A3 63 50 7C                  dw          LIT, NDOM_PTR           //
 387+ 7C75 A3 63 09 00                  dw          LIT, 9
 388+ 7C79 32 64 5B 69                  dw          I, CFETCH
 389+ 7C7D 4E 65                        dw          C_MAP
 390+ 7C7F 32 64 64 69                  dw          I, CSTORE
 391+ 7C83              Needs_4:
 392+ 7C83 E7 63                        dw      C_LOOP
 393+ 7C85 E8 FF                        dw      Needs_3 - $
 394+ 7C87 11 68                        dw      EXIT
 395+ 7C89
 396+ 7C89
 397+ 7C89              // include  "path/cccc.f" if cccc is not defined
 398+ 7C89              // filename cccc.f is temporary stored at NEEDS-W
 399+ 7C89                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 399+ 7C89             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 399+ 7C89             >
 399+ 7C89             >Dict_Ptr        defl    $
 399+ 7C89             >
 399+ 7C89             >//              ______________________________________________________________________
 399+ 7C89             >//              Heap part
 399+ 7C89             >
 399+ 7C89             >
 399+ 7C89             >                org     (Heap_Ptr & $1FFF) + $E000
 399+ EB9E             >
 399+ EB9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ EB9E             >Latest_Definition defl  Heap_Ptr
 399+ EB9E             >
 399+ EB9E             >                // dummy db directives used to calculate length of namec
 399+ EB9E 4E 45 45 44 >                db      "NEEDS-F"
 399+ EBA2 53 2D 46    >
 399+ EBA5             >len_NFA         defl    $ - temp_NFA
 399+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ EB9E             >
 399+ EB9E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ EB9F 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 399+ EBA3 53 2D 46    >
 399+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 399+ EBA5 C6          >                db      {b $} | END_BIT     // msb as name end
 399+ EBA6             >
 399+ EBA6 93 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 399+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 399+ EBA8             >
 399+ EBA8             >mirror_Ptr      defl    $
 399+ EBA8             >
 399+ EBA8 8B 7C       >                dw      Dict_Ptr + 2        // xt
 399+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 399+ EBAA             >
 399+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 399+ EBAA             >
 399+ EBAA             >//              ______________________________________________________________________
 399+ EBAA             >//              Dictionary part
 399+ EBAA             >
 399+ EBAA             >                org     Dict_Ptr
 399+ 7C89             >
 399+ 7C89 A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 399+ 7C8B             >
 399+ 7C8B             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 7C8B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 7C8E             >
 399+ 7C8E             >
 399+ 7C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 7C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 7C8E             >
 399+ 7C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 7C8E 41 73                        dw      LFIND
 401+ 7C90 F3 63                        dw      ZBRANCH
 402+ 7C92 0A 00                        dw      Needs_5 - $
 403+ 7C94
 404+ 7C94 C1 68 11 69                  dw          DROP, TWO_DROP
 405+ 7C98 EF 63                        dw      BRANCH
 406+ 7C9A 2C 00                        dw      Needs_6 - $
 407+ 7C9C              Needs_5:
 408+ 7C9C B0 7B                        dw          NEEDS_W
 409+ 7C9E A3 63 23 00                  dw          LIT, 35
 410+ 7CA2 C7 70                        dw          ERASE                   // a
 411+ 7CA4 5D 6B 5B 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 411+ 7CA8 77 68
 412+ 7CAA 5D 6B B8 68                  dw          HERE, OVER              // a n here n
 413+ 7CAE B0 7B D5 68                  dw          NEEDS_W, SWAP, CMOVE    // a n
 413+ 7CB2 56 67
 414+ 7CB4 B0 7B 64 7C                  dw          NEEDS_W, NEEDS_CHECK
 415+ 7CB8 B0 7B 5E 68                  dw          NEEDS_W, PLUS           // a a1+1
 416+ 7CBC A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 417+ 7CC0 D5 68 50 69                  dw          SWAP, STORE             // a
 418+ 7CC4 1B 7C                        dw          NEEDS_SLASH
 419+ 7CC6              Needs_6:
 420+ 7CC6 11 68                        dw      EXIT
 421+ 7CC8
 422+ 7CC8
 423+ 7CC8              // check for cccc exists in vocabulary
 424+ 7CC8              // if it doesn't then  INCLUDE  inc/cccc.F
 425+ 7CC8              // search in inc subdirectory
 426+ 7CC8                              Colon_Def NEEDS, "NEEDS", is_normal
 426+ 7CC8             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 426+ 7CC8             >
 426+ 7CC8             >Dict_Ptr        defl    $
 426+ 7CC8             >
 426+ 7CC8             >//              ______________________________________________________________________
 426+ 7CC8             >//              Heap part
 426+ 7CC8             >
 426+ 7CC8             >
 426+ 7CC8             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ EBAA             >
 426+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ EBAA             >Latest_Definition defl  Heap_Ptr
 426+ EBAA             >
 426+ EBAA             >                // dummy db directives used to calculate length of namec
 426+ EBAA 4E 45 45 44 >                db      "NEEDS"
 426+ EBAE 53          >
 426+ EBAF             >len_NFA         defl    $ - temp_NFA
 426+ EBAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ EBAA             >
 426+ EBAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ EBAB 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 426+ EBAF 53          >
 426+ EBB0             >                org     $-1                 // alter last byte of Name just above to set
 426+ EBAF D3          >                db      {b $} | END_BIT     // msb as name end
 426+ EBB0             >
 426+ EBB0 9E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ EBB2             >Prev_Ptr        defl    Heap_Ptr
 426+ EBB2             >
 426+ EBB2             >mirror_Ptr      defl    $
 426+ EBB2             >
 426+ EBB2 CA 7C       >                dw      Dict_Ptr + 2        // xt
 426+ EBB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ EBB4             >
 426+ EBB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ EBB4             >
 426+ EBB4             >//              ______________________________________________________________________
 426+ EBB4             >//              Dictionary part
 426+ EBB4             >
 426+ EBB4             >                org     Dict_Ptr
 426+ 7CC8             >
 426+ 7CC8 B2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 7CCA             >
 426+ 7CCA             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7CCA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7CCD             >
 426+ 7CCD             >
 426+ 7CCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7CCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7CCD             >
 426+ 7CCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7CCD DF 6A 46 69                  dw      TO_IN, FETCH
 428+ 7CD1 DC 68                        dw      DUP
 429+ 7CD3 05 7C 8B 7C                  dw      NEEDS_INC, NEEDS_PATH
 430+ 7CD7 DF 6A 50 69                  dw      TO_IN, STORE
 431+ 7CDB 10 7C 8B 7C                  dw      NEEDS_LIB, NEEDS_PATH
 432+ 7CDF DF 6A 50 69                  dw      TO_IN, STORE
 433+ 7CE3 41 73                        dw      LFIND
 434+ 7CE5 F3 63                        dw      ZBRANCH
 435+ 7CE7 08 00                        dw      Needs_10 - $
 436+ 7CE9 11 69                        dw          TWO_DROP
 437+ 7CEB EF 63                        dw      BRANCH
 438+ 7CED 10 00                        dw      Needs_11 - $
 439+ 7CEF              Needs_10:
 440+ 7CEF B0 7B EC 6E                  dw      NEEDS_W, COUNT, TYPE, SPACE
 440+ 7CF3 AD 6F 2F 6C
 441+ 7CF7 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 441+ 7CFB D0 77
 442+ 7CFD              Needs_11:
 443+ 7CFD 11 68                        dw      EXIT
 444+ 7CFF
 445+ 7CFF
 446+ 7CFF              //  ______________________________________________________________________
 447+ 7CFF              //
 448+ 7CFF              // load         n --
 449+ 7CFF                              Colon_Def LOAD, "LOAD", is_normal
 449+ 7CFF             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 449+ 7CFF             >
 449+ 7CFF             >Dict_Ptr        defl    $
 449+ 7CFF             >
 449+ 7CFF             >//              ______________________________________________________________________
 449+ 7CFF             >//              Heap part
 449+ 7CFF             >
 449+ 7CFF             >
 449+ 7CFF             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ EBB4             >
 449+ EBB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ EBB4             >Latest_Definition defl  Heap_Ptr
 449+ EBB4             >
 449+ EBB4             >                // dummy db directives used to calculate length of namec
 449+ EBB4 4C 4F 41 44 >                db      "LOAD"
 449+ EBB8             >len_NFA         defl    $ - temp_NFA
 449+ EBB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ EBB4             >
 449+ EBB4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ EBB5 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 449+ EBB9             >                org     $-1                 // alter last byte of Name just above to set
 449+ EBB8 C4          >                db      {b $} | END_BIT     // msb as name end
 449+ EBB9             >
 449+ EBB9 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ EBBB             >Prev_Ptr        defl    Heap_Ptr
 449+ EBBB             >
 449+ EBBB             >mirror_Ptr      defl    $
 449+ EBBB             >
 449+ EBBB 01 7D       >                dw      Dict_Ptr + 2        // xt
 449+ EBBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ EBBD             >
 449+ EBBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ EBBD             >
 449+ EBBD             >//              ______________________________________________________________________
 449+ EBBD             >//              Dictionary part
 449+ EBBD             >
 449+ EBBD             >                org     Dict_Ptr
 449+ 7CFF             >
 449+ 7CFF BB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 7D01             >
 449+ 7D01             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7D01 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7D04             >
 449+ 7D04             >
 449+ 7D04             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7D04             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7D04             >
 449+ 7D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7D04 D9 6A 46 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 450+ 7D08 1B 68
 451+ 7D0A DF 6A 46 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 451+ 7D0E 1B 68
 452+ 7D10
 453+ 7D10 38 6A DF 6A                  dw      ZERO, TO_IN, STORE      // 0 >in !
 453+ 7D14 50 69
 454+ 7D16 70 6A 5C 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 454+ 7D1A D9 6A 50 69
 455+ 7D1E 04 75                        dw      INTERPRET               // interpret
 456+ 7D20
 457+ 7D20 26 68 DF 6A                  dw      R_TO, TO_IN, STORE      // r> >in !
 457+ 7D24 50 69
 458+ 7D26 26 68 D9 6A                  dw      R_TO, BLK, STORE        // r> blk !
 458+ 7D2A 50 69
 459+ 7D2C 11 68                        dw      EXIT                    // ;
 460+ 7D2E
 461+ 7D2E              //  ______________________________________________________________________
 462+ 7D2E              //
 463+ 7D2E              // -->          --
 464+ 7D2E                              Colon_Def LOAD_NEXT, "-->", is_immediate
 464+ 7D2E             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 464+ 7D2E             >
 464+ 7D2E             >Dict_Ptr        defl    $
 464+ 7D2E             >
 464+ 7D2E             >//              ______________________________________________________________________
 464+ 7D2E             >//              Heap part
 464+ 7D2E             >
 464+ 7D2E             >
 464+ 7D2E             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ EBBD             >
 464+ EBBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ EBBD             >Latest_Definition defl  Heap_Ptr
 464+ EBBD             >
 464+ EBBD             >                // dummy db directives used to calculate length of namec
 464+ EBBD 2D 2D 3E    >                db      "-->"
 464+ EBC0             >len_NFA         defl    $ - temp_NFA
 464+ EBC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ EBBD             >
 464+ EBBD C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ EBBE 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 464+ EBC1             >                org     $-1                 // alter last byte of Name just above to set
 464+ EBC0 BE          >                db      {b $} | END_BIT     // msb as name end
 464+ EBC1             >
 464+ EBC1 B4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ EBC3             >Prev_Ptr        defl    Heap_Ptr
 464+ EBC3             >
 464+ EBC3             >mirror_Ptr      defl    $
 464+ EBC3             >
 464+ EBC3 30 7D       >                dw      Dict_Ptr + 2        // xt
 464+ EBC5             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EBC5             >
 464+ EBC5             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EBC5             >
 464+ EBC5             >//              ______________________________________________________________________
 464+ EBC5             >//              Dictionary part
 464+ EBC5             >
 464+ EBC5             >                org     Dict_Ptr
 464+ 7D2E             >
 464+ 7D2E C3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7D30             >
 464+ 7D30             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7D30 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7D33             >
 464+ 7D33             >
 464+ 7D33             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7D33             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7D33             >
 464+ 7D33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7D33 04 6E                        dw      QLOADING                // ?loading
 466+ 7D35 38 6A DF 6A                  dw      ZERO, TO_IN, STORE      // 0 >in !
 466+ 7D39 50 69
 467+ 7D3B 70 6A                        dw      BSCR                    // b/scr
 468+ 7D3D D9 6A 46 69                  dw      BLK, FETCH              // blk @
 469+ 7D41 B8 68                        dw      OVER                    // over
 470+ 7D43 81 77                        dw      MOD                     // mod
 471+ 7D45 9C 6B                        dw      SUBTRACT                // -
 472+ 7D47 D9 6A 2E 69                  dw      BLK, PLUSSTORE          // +!
 473+ 7D4B 11 68                        dw      EXIT                    // ;
 474+ 7D4D
 475+ 7D4D              //  ______________________________________________________________________
 476+ 7D4D              //
 477+ 7D4D              // '            -- xt
 478+ 7D4D                              Colon_Def TICK, "'", is_normal
 478+ 7D4D             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 478+ 7D4D             >
 478+ 7D4D             >Dict_Ptr        defl    $
 478+ 7D4D             >
 478+ 7D4D             >//              ______________________________________________________________________
 478+ 7D4D             >//              Heap part
 478+ 7D4D             >
 478+ 7D4D             >
 478+ 7D4D             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ EBC5             >
 478+ EBC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ EBC5             >Latest_Definition defl  Heap_Ptr
 478+ EBC5             >
 478+ EBC5             >                // dummy db directives used to calculate length of namec
 478+ EBC5 27          >                db      "'"
 478+ EBC6             >len_NFA         defl    $ - temp_NFA
 478+ EBC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ EBC5             >
 478+ EBC5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ EBC6 27          >                db      "'"               // name string in 7-bit ascii, but
 478+ EBC7             >                org     $-1                 // alter last byte of Name just above to set
 478+ EBC6 A7          >                db      {b $} | END_BIT     // msb as name end
 478+ EBC7             >
 478+ EBC7 BD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ EBC9             >Prev_Ptr        defl    Heap_Ptr
 478+ EBC9             >
 478+ EBC9             >mirror_Ptr      defl    $
 478+ EBC9             >
 478+ EBC9 4F 7D       >                dw      Dict_Ptr + 2        // xt
 478+ EBCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ EBCB             >
 478+ EBCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ EBCB             >
 478+ EBCB             >//              ______________________________________________________________________
 478+ EBCB             >//              Dictionary part
 478+ EBCB             >
 478+ EBCB             >                org     Dict_Ptr
 478+ 7D4D             >
 478+ 7D4D C9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 7D4F             >
 478+ 7D4F             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7D4F CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7D52             >
 478+ 7D52             >
 478+ 7D52             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7D52             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7D52             >
 478+ 7D52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7D52 41 73                        dw      LFIND                   // -find
 480+ 7D54 36 68                        dw      ZEQUAL                  // 0=
 481+ 7D56 38 6A A7 6D                  dw      ZERO, QERROR            // 0 ?error
 482+ 7D5A C1 68                        dw      DROP                    // drop
 483+ 7D5C 11 68                        dw      EXIT                    // ;
 484+ 7D5E
 485+ 7D5E              //  ______________________________________________________________________
 486+ 7D5E              //
 487+ 7D5E              // forget       -- cccc
 488+ 7D5E                              Colon_Def FORGET, "FORGET", is_normal
 488+ 7D5E             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 488+ 7D5E             >
 488+ 7D5E             >Dict_Ptr        defl    $
 488+ 7D5E             >
 488+ 7D5E             >//              ______________________________________________________________________
 488+ 7D5E             >//              Heap part
 488+ 7D5E             >
 488+ 7D5E             >
 488+ 7D5E             >                org     (Heap_Ptr & $1FFF) + $E000
 488+ EBCB             >
 488+ EBCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ EBCB             >Latest_Definition defl  Heap_Ptr
 488+ EBCB             >
 488+ EBCB             >                // dummy db directives used to calculate length of namec
 488+ EBCB 46 4F 52 47 >                db      "FORGET"
 488+ EBCF 45 54       >
 488+ EBD1             >len_NFA         defl    $ - temp_NFA
 488+ EBD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ EBCB             >
 488+ EBCB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ EBCC 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 488+ EBD0 45 54       >
 488+ EBD2             >                org     $-1                 // alter last byte of Name just above to set
 488+ EBD1 D4          >                db      {b $} | END_BIT     // msb as name end
 488+ EBD2             >
 488+ EBD2 C5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 488+ EBD4             >Prev_Ptr        defl    Heap_Ptr
 488+ EBD4             >
 488+ EBD4             >mirror_Ptr      defl    $
 488+ EBD4             >
 488+ EBD4 60 7D       >                dw      Dict_Ptr + 2        // xt
 488+ EBD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 488+ EBD6             >
 488+ EBD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 488+ EBD6             >
 488+ EBD6             >//              ______________________________________________________________________
 488+ EBD6             >//              Dictionary part
 488+ EBD6             >
 488+ EBD6             >                org     Dict_Ptr
 488+ 7D5E             >
 488+ 7D5E D4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 488+ 7D60             >
 488+ 7D60             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 7D60 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 7D63             >
 488+ 7D63             >
 488+ 7D63             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 7D63             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 7D63             >
 488+ 7D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 7D63 FD 6A 46 69                  dw      CURRENT, FETCH          // current @
 490+ 7D67 F7 6A 46 69                  dw      CONTEXT, FETCH          // context @
 491+ 7D6B 9C 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 491+ 7D6F 17 00 A7 6D
 492+ 7D73 4F 7D 26 6D                  dw      TICK, TO_BODY           // ' >body
 493+ 7D77 DC 68 AF 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 493+ 7D7B 46 69
 494+ 7D7D B3 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 494+ 7D81 15 00 A7 6D
 495+ 7D85 DC 68 5B 6D                  dw      DUP, NFA                // dup nfa
 496+ 7D89
 497+ 7D89                          //  dw      DUP
 498+ 7D89                          //  dw      LIT, $E000, LESS
 499+ 7D89                          //  dw      MMU7_FETCH, ONE, EQUALS
 500+ 7D89                          //  dw      OR_OP, NOT_OP
 501+ 7D89                          //  dw      ZBRANCH
 502+ 7D89                          //  dw      Forget_then - $
 503+ 7D89
 504+ 7D89 64 6C 87 6C                  dw      MMU7_FETCH, FROM_FAR
 505+ 7D8D CD 6A 50 69                  dw      HP, STORE
 506+ 7D91 DC 68 50 6D                  dw      DUP, CFA, CELL_MINUS
 506+ 7D95 91 68
 507+ 7D97              // Forget_then:
 508+ 7D97 B5 6A 50 69                  dw      DP, STORE               // dp !
 509+ 7D9B 66 6D 46 69                  dw      LFA, FETCH              // lfa @
 510+ 7D9F F7 6A 46 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 510+ 7DA3 50 69
 511+ 7DA5 11 68                        dw      EXIT                    // ;
 512+ 7DA7
 513+ 7DA7              //  ______________________________________________________________________
 514+ 7DA7              //
 515+ 7DA7              // marker       -- cccc
 516+ 7DA7                              Colon_Def MARKER, "MARKER", is_immediate
 516+ 7DA7             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 516+ 7DA7             >
 516+ 7DA7             >Dict_Ptr        defl    $
 516+ 7DA7             >
 516+ 7DA7             >//              ______________________________________________________________________
 516+ 7DA7             >//              Heap part
 516+ 7DA7             >
 516+ 7DA7             >
 516+ 7DA7             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ EBD6             >
 516+ EBD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ EBD6             >Latest_Definition defl  Heap_Ptr
 516+ EBD6             >
 516+ EBD6             >                // dummy db directives used to calculate length of namec
 516+ EBD6 4D 41 52 4B >                db      "MARKER"
 516+ EBDA 45 52       >
 516+ EBDC             >len_NFA         defl    $ - temp_NFA
 516+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ EBD6             >
 516+ EBD6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ EBD7 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 516+ EBDB 45 52       >
 516+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 516+ EBDC D2          >                db      {b $} | END_BIT     // msb as name end
 516+ EBDD             >
 516+ EBDD CB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 516+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 516+ EBDF             >
 516+ EBDF             >mirror_Ptr      defl    $
 516+ EBDF             >
 516+ EBDF A9 7D       >                dw      Dict_Ptr + 2        // xt
 516+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ EBE1             >
 516+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ EBE1             >
 516+ EBE1             >//              ______________________________________________________________________
 516+ EBE1             >//              Dictionary part
 516+ EBE1             >
 516+ EBE1             >                org     Dict_Ptr
 516+ 7DA7             >
 516+ 7DA7 DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 516+ 7DA9             >
 516+ 7DA9             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7DA9 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 7DAC             >
 516+ 7DAC             >
 516+ 7DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7DAC             >
 516+ 7DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 7DAC 33 74                        dw      CREATE
 518+ 7DAE
 519+ 7DAE BB 6A 46 69                  dw      VOC_LINK, FETCH, COMMA
 519+ 7DB2 73 6B
 520+ 7DB4 FD 6A 46 69                  dw      CURRENT, FETCH, COMMA
 520+ 7DB8 73 6B
 521+ 7DBA F7 6A 46 69                  dw      CONTEXT, FETCH, COMMA
 521+ 7DBE 73 6B
 522+ 7DC0 FD 6A 46 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 522+ 7DC4 46 69 73 6B
 523+ 7DC8 17 6D 75 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 523+ 7DCC 66 6D 46 69
 523+ 7DD0 73 6B
 524+ 7DD2
 525+ 7DD2 C2 6E                        dw      C_DOES
 526+ 7DD4
 527+ 7DD4                        //    nop
 528+ 7DD4 CD E3 69                     call    Enter_Ptr
 529+ 7DD7
 530+ 7DD7 DC 68 46 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 530+ 7DDB BB 6A 50 69
 530+ 7DDF 8D 68
 531+ 7DE1 DC 68 46 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 531+ 7DE5 FD 6A 50 69
 531+ 7DE9 8D 68
 532+ 7DEB DC 68 46 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 532+ 7DEF F7 6A 50 69
 532+ 7DF3 8D 68
 533+ 7DF5 DC 68 46 69                  dw      DUP, FETCH
 534+ 7DF9                          //  dw      DUP, QHEAPP
 535+ 7DF9                          //  dw      ZBRANCH
 536+ 7DF9                          //  dw      Marker_then - $
 537+ 7DF9 DC 68 CD 6A                  dw          DUP, HP, STORE
 537+ 7DFD 50 69
 538+ 7DFF 75 6D 50 6D                  dw          PFA, CFA, CELL_MINUS
 538+ 7E03 91 68
 539+ 7E05              // Marker_then:
 540+ 7E05 B5 6A 50 69                  dw      DP, STORE, CELL_PLUS
 540+ 7E09 8D 68
 541+ 7E0B 46 69 FD 6A                  dw      FETCH, CURRENT, FETCH, STORE
 541+ 7E0F 46 69 50 69
 542+ 7E13 11 68                        dw      EXIT
 543+ 7E15
 544+ 7E15              //  ______________________________________________________________________
 545+ 7E15              //
 546+ 7E15              // spaces       n --
 547+ 7E15                              Colon_Def SPACES, "SPACES", is_normal
 547+ 7E15             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 547+ 7E15             >
 547+ 7E15             >Dict_Ptr        defl    $
 547+ 7E15             >
 547+ 7E15             >//              ______________________________________________________________________
 547+ 7E15             >//              Heap part
 547+ 7E15             >
 547+ 7E15             >
 547+ 7E15             >                org     (Heap_Ptr & $1FFF) + $E000
 547+ EBE1             >
 547+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ EBE1             >Latest_Definition defl  Heap_Ptr
 547+ EBE1             >
 547+ EBE1             >                // dummy db directives used to calculate length of namec
 547+ EBE1 53 50 41 43 >                db      "SPACES"
 547+ EBE5 45 53       >
 547+ EBE7             >len_NFA         defl    $ - temp_NFA
 547+ EBE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ EBE1             >
 547+ EBE1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ EBE2 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 547+ EBE6 45 53       >
 547+ EBE8             >                org     $-1                 // alter last byte of Name just above to set
 547+ EBE7 D3          >                db      {b $} | END_BIT     // msb as name end
 547+ EBE8             >
 547+ EBE8 D6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 547+ EBEA             >Prev_Ptr        defl    Heap_Ptr
 547+ EBEA             >
 547+ EBEA             >mirror_Ptr      defl    $
 547+ EBEA             >
 547+ EBEA 17 7E       >                dw      Dict_Ptr + 2        // xt
 547+ EBEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 547+ EBEC             >
 547+ EBEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 547+ EBEC             >
 547+ EBEC             >//              ______________________________________________________________________
 547+ EBEC             >//              Dictionary part
 547+ EBEC             >
 547+ EBEC             >                org     Dict_Ptr
 547+ 7E15             >
 547+ 7E15 EA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 547+ 7E17             >
 547+ 7E17             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7E17 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 7E1A             >
 547+ 7E1A             >
 547+ 7E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 7E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 7E1A             >
 547+ 7E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 7E1A 38 6A EC 6B                  dw      ZERO, MAX
 549+ 7E1E 38 6A 06 64                  dw      ZERO, C_Q_DO
 550+ 7E22 08 00                        dw      Spaces_Leave - $
 551+ 7E24              Spaces_Loop:
 552+ 7E24 2F 6C                        dw          SPACE
 553+ 7E26 E7 63                        dw      C_LOOP
 554+ 7E28 FC FF                        dw      Spaces_Loop - $
 555+ 7E2A              Spaces_Leave:
 556+ 7E2A 11 68                        dw      EXIT                    // ;
 557+ 7E2C
 558+ 7E2C              //  ______________________________________________________________________
 559+ 7E2C              //
 560+ 7E2C              // <#           --
 561+ 7E2C                              Colon_Def BEGIN_DASH, "<#", is_normal
 561+ 7E2C             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 561+ 7E2C             >
 561+ 7E2C             >Dict_Ptr        defl    $
 561+ 7E2C             >
 561+ 7E2C             >//              ______________________________________________________________________
 561+ 7E2C             >//              Heap part
 561+ 7E2C             >
 561+ 7E2C             >
 561+ 7E2C             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ EBEC             >
 561+ EBEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ EBEC             >Latest_Definition defl  Heap_Ptr
 561+ EBEC             >
 561+ EBEC             >                // dummy db directives used to calculate length of namec
 561+ EBEC 3C 23       >                db      "<#"
 561+ EBEE             >len_NFA         defl    $ - temp_NFA
 561+ EBEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ EBEC             >
 561+ EBEC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ EBED 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 561+ EBEF             >                org     $-1                 // alter last byte of Name just above to set
 561+ EBEE A3          >                db      {b $} | END_BIT     // msb as name end
 561+ EBEF             >
 561+ EBEF E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 561+ EBF1             >Prev_Ptr        defl    Heap_Ptr
 561+ EBF1             >
 561+ EBF1             >mirror_Ptr      defl    $
 561+ EBF1             >
 561+ EBF1 2E 7E       >                dw      Dict_Ptr + 2        // xt
 561+ EBF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ EBF3             >
 561+ EBF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ EBF3             >
 561+ EBF3             >//              ______________________________________________________________________
 561+ EBF3             >//              Dictionary part
 561+ EBF3             >
 561+ EBF3             >                org     Dict_Ptr
 561+ 7E2C             >
 561+ 7E2C F1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 561+ 7E2E             >
 561+ 7E2E             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 7E2E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 7E31             >
 561+ 7E31             >
 561+ 7E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 7E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 7E31             >
 561+ 7E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 7E31 F0 70 27 6B                  dw      PAD, HLD, STORE
 562+ 7E35 50 69
 563+ 7E37 11 68                        dw      EXIT
 564+ 7E39
 565+ 7E39              //  ______________________________________________________________________
 566+ 7E39              //
 567+ 7E39              // #>           --
 568+ 7E39                              Colon_Def DASH_END, "#>", is_normal
 568+ 7E39             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 568+ 7E39             >
 568+ 7E39             >Dict_Ptr        defl    $
 568+ 7E39             >
 568+ 7E39             >//              ______________________________________________________________________
 568+ 7E39             >//              Heap part
 568+ 7E39             >
 568+ 7E39             >
 568+ 7E39             >                org     (Heap_Ptr & $1FFF) + $E000
 568+ EBF3             >
 568+ EBF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ EBF3             >Latest_Definition defl  Heap_Ptr
 568+ EBF3             >
 568+ EBF3             >                // dummy db directives used to calculate length of namec
 568+ EBF3 23 3E       >                db      "#>"
 568+ EBF5             >len_NFA         defl    $ - temp_NFA
 568+ EBF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ EBF3             >
 568+ EBF3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ EBF4 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 568+ EBF6             >                org     $-1                 // alter last byte of Name just above to set
 568+ EBF5 BE          >                db      {b $} | END_BIT     // msb as name end
 568+ EBF6             >
 568+ EBF6 EC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 568+ EBF8             >Prev_Ptr        defl    Heap_Ptr
 568+ EBF8             >
 568+ EBF8             >mirror_Ptr      defl    $
 568+ EBF8             >
 568+ EBF8 3B 7E       >                dw      Dict_Ptr + 2        // xt
 568+ EBFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 568+ EBFA             >
 568+ EBFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 568+ EBFA             >
 568+ EBFA             >//              ______________________________________________________________________
 568+ EBFA             >//              Dictionary part
 568+ EBFA             >
 568+ EBFA             >                org     Dict_Ptr
 568+ 7E39             >
 568+ 7E39 F8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 568+ 7E3B             >
 568+ 7E3B             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 7E3B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 7E3E             >
 568+ 7E3E             >
 568+ 7E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 7E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 7E3E             >
 568+ 7E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 7E3E 11 69                        dw      TWO_DROP
 570+ 7E40 27 6B 46 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 570+ 7E44 F0 70 B8 68
 570+ 7E48 9C 6B
 571+ 7E4A 11 68                        dw      EXIT
 572+ 7E4C
 573+ 7E4C              //  ______________________________________________________________________
 574+ 7E4C              //
 575+ 7E4C              // sign         n d -- d
 576+ 7E4C                              Colon_Def SIGN, "SIGN", is_normal
 576+ 7E4C             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 576+ 7E4C             >
 576+ 7E4C             >Dict_Ptr        defl    $
 576+ 7E4C             >
 576+ 7E4C             >//              ______________________________________________________________________
 576+ 7E4C             >//              Heap part
 576+ 7E4C             >
 576+ 7E4C             >
 576+ 7E4C             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ EBFA             >
 576+ EBFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ EBFA             >Latest_Definition defl  Heap_Ptr
 576+ EBFA             >
 576+ EBFA             >                // dummy db directives used to calculate length of namec
 576+ EBFA 53 49 47 4E >                db      "SIGN"
 576+ EBFE             >len_NFA         defl    $ - temp_NFA
 576+ EBFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ EBFA             >
 576+ EBFA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ EBFB 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 576+ EBFF             >                org     $-1                 // alter last byte of Name just above to set
 576+ EBFE CE          >                db      {b $} | END_BIT     // msb as name end
 576+ EBFF             >
 576+ EBFF F3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ EC01             >Prev_Ptr        defl    Heap_Ptr
 576+ EC01             >
 576+ EC01             >mirror_Ptr      defl    $
 576+ EC01             >
 576+ EC01 4E 7E       >                dw      Dict_Ptr + 2        // xt
 576+ EC03             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ EC03             >
 576+ EC03             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ EC03             >
 576+ EC03             >//              ______________________________________________________________________
 576+ EC03             >//              Dictionary part
 576+ EC03             >
 576+ EC03             >                org     Dict_Ptr
 576+ 7E4C             >
 576+ 7E4C 01 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 7E4E             >
 576+ 7E4E             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 7E4E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 7E51             >
 576+ 7E51             >
 576+ 7E51             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 7E51             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 7E51             >
 576+ 7E51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 7E51 47 68                        dw      ZLESS
 578+ 7E53 F3 63                        dw      ZBRANCH
 579+ 7E55 08 00                        dw      Sign_Endif - $
 580+ 7E57 A3 63 2D 00                  dw          LIT, 45, HOLD
 580+ 7E5B DD 70
 581+ 7E5D              Sign_Endif:
 582+ 7E5D 11 68                        dw      EXIT
 583+ 7E5F
 584+ 7E5F              //  ______________________________________________________________________
 585+ 7E5F              //
 586+ 7E5F              // #           d1 -- d2
 587+ 7E5F                              Colon_Def DASH, "#", is_normal
 587+ 7E5F             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 587+ 7E5F             >
 587+ 7E5F             >Dict_Ptr        defl    $
 587+ 7E5F             >
 587+ 7E5F             >//              ______________________________________________________________________
 587+ 7E5F             >//              Heap part
 587+ 7E5F             >
 587+ 7E5F             >
 587+ 7E5F             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ EC03             >
 587+ EC03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ EC03             >Latest_Definition defl  Heap_Ptr
 587+ EC03             >
 587+ EC03             >                // dummy db directives used to calculate length of namec
 587+ EC03 23          >                db      "#"
 587+ EC04             >len_NFA         defl    $ - temp_NFA
 587+ EC04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ EC03             >
 587+ EC03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ EC04 23          >                db      "#"               // name string in 7-bit ascii, but
 587+ EC05             >                org     $-1                 // alter last byte of Name just above to set
 587+ EC04 A3          >                db      {b $} | END_BIT     // msb as name end
 587+ EC05             >
 587+ EC05 FA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ EC07             >Prev_Ptr        defl    Heap_Ptr
 587+ EC07             >
 587+ EC07             >mirror_Ptr      defl    $
 587+ EC07             >
 587+ EC07 61 7E       >                dw      Dict_Ptr + 2        // xt
 587+ EC09             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ EC09             >
 587+ EC09             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ EC09             >
 587+ EC09             >//              ______________________________________________________________________
 587+ EC09             >//              Dictionary part
 587+ EC09             >
 587+ EC09             >                org     Dict_Ptr
 587+ 7E5F             >
 587+ 7E5F 07 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 7E61             >
 587+ 7E61             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 7E61 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 7E64             >
 587+ 7E64             >
 587+ 7E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 7E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 7E64             >
 587+ 7E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 7E64 09 6B 46 69                  dw      BASE, FETCH
 589+ 7E68
 590+ 7E68 1B 68                        dw      TO_R                    // >r           ( ud1 )
 591+ 7E6A 38 6A 31 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 591+ 7E6E A1 67
 592+ 7E70 26 68 D5 68                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 592+ 7E74 1B 68
 593+ 7E76 A1 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 594+ 7E78 26 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 595+ 7E7A
 596+ 7E7A E3 68                        dw      ROT
 597+ 7E7C A3 63 09 00                  dw      LIT, 9, OVER, LESS
 597+ 7E80 B8 68 C1 6B
 598+ 7E84 F3 63                        dw      ZBRANCH
 599+ 7E86 08 00                        dw      Dash_Endif - $
 600+ 7E88 A3 63 07 00                  dw          LIT, 7, PLUS
 600+ 7E8C 5E 68
 601+ 7E8E              Dash_Endif:
 602+ 7E8E
 603+ 7E8E A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 603+ 7E92 5E 68 DD 70
 604+ 7E96 11 68                        dw      EXIT
 605+ 7E98
 606+ 7E98              //  ______________________________________________________________________
 607+ 7E98              //
 608+ 7E98              // #s           d1 -- d2
 609+ 7E98                              Colon_Def DASHES, "#S", is_normal
 609+ 7E98             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 609+ 7E98             >
 609+ 7E98             >Dict_Ptr        defl    $
 609+ 7E98             >
 609+ 7E98             >//              ______________________________________________________________________
 609+ 7E98             >//              Heap part
 609+ 7E98             >
 609+ 7E98             >
 609+ 7E98             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ EC09             >
 609+ EC09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ EC09             >Latest_Definition defl  Heap_Ptr
 609+ EC09             >
 609+ EC09             >                // dummy db directives used to calculate length of namec
 609+ EC09 23 53       >                db      "#S"
 609+ EC0B             >len_NFA         defl    $ - temp_NFA
 609+ EC0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ EC09             >
 609+ EC09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ EC0A 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 609+ EC0C             >                org     $-1                 // alter last byte of Name just above to set
 609+ EC0B D3          >                db      {b $} | END_BIT     // msb as name end
 609+ EC0C             >
 609+ EC0C 03 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ EC0E             >Prev_Ptr        defl    Heap_Ptr
 609+ EC0E             >
 609+ EC0E             >mirror_Ptr      defl    $
 609+ EC0E             >
 609+ EC0E 9A 7E       >                dw      Dict_Ptr + 2        // xt
 609+ EC10             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ EC10             >
 609+ EC10             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ EC10             >
 609+ EC10             >//              ______________________________________________________________________
 609+ EC10             >//              Dictionary part
 609+ EC10             >
 609+ EC10             >                org     Dict_Ptr
 609+ 7E98             >
 609+ 7E98 0E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 7E9A             >
 609+ 7E9A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7E9A CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7E9D             >
 609+ 7E9D             >
 609+ 7E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7E9D             >
 609+ 7E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7E9D              Dashes_Begin:
 611+ 7E9D 61 7E 24 69                  dw      DASH, TWO_DUP
 612+ 7EA1 E0 67 36 68                  dw          OR_OP, ZEQUAL
 613+ 7EA5 F3 63                        dw      ZBRANCH
 614+ 7EA7 F6 FF                        dw      Dashes_Begin - $
 615+ 7EA9 11 68                        dw      EXIT
 616+ 7EAB
 617+ 7EAB              //  ______________________________________________________________________
 618+ 7EAB              //
 619+ 7EAB              // d.r          d n --
 620+ 7EAB                              Colon_Def D_DOT_R, "D.R", is_normal
 620+ 7EAB             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 620+ 7EAB             >
 620+ 7EAB             >Dict_Ptr        defl    $
 620+ 7EAB             >
 620+ 7EAB             >//              ______________________________________________________________________
 620+ 7EAB             >//              Heap part
 620+ 7EAB             >
 620+ 7EAB             >
 620+ 7EAB             >                org     (Heap_Ptr & $1FFF) + $E000
 620+ EC10             >
 620+ EC10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ EC10             >Latest_Definition defl  Heap_Ptr
 620+ EC10             >
 620+ EC10             >                // dummy db directives used to calculate length of namec
 620+ EC10 44 2E 52    >                db      "D.R"
 620+ EC13             >len_NFA         defl    $ - temp_NFA
 620+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ EC10             >
 620+ EC10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ EC11 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 620+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 620+ EC13 D2          >                db      {b $} | END_BIT     // msb as name end
 620+ EC14             >
 620+ EC14 09 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 620+ EC16             >Prev_Ptr        defl    Heap_Ptr
 620+ EC16             >
 620+ EC16             >mirror_Ptr      defl    $
 620+ EC16             >
 620+ EC16 AD 7E       >                dw      Dict_Ptr + 2        // xt
 620+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 620+ EC18             >
 620+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 620+ EC18             >
 620+ EC18             >//              ______________________________________________________________________
 620+ EC18             >//              Dictionary part
 620+ EC18             >
 620+ EC18             >                org     Dict_Ptr
 620+ 7EAB             >
 620+ 7EAB 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 620+ 7EAD             >
 620+ 7EAD             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7EAD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7EB0             >
 620+ 7EB0             >
 620+ 7EB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7EB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7EB0             >
 620+ 7EB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7EB0 1B 68                        dw      TO_R
 622+ 7EB2 CC 68 C8 76                  dw      TUCK, DABS
 623+ 7EB6 2E 7E 9A 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 623+ 7EBA E3 68 4E 7E
 623+ 7EBE 3B 7E
 624+ 7EC0 26 68                        dw      R_TO
 625+ 7EC2 B8 68 9C 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 625+ 7EC6 17 7E AD 6F
 626+ 7ECA 11 68                        dw      EXIT
 627+ 7ECC
 628+ 7ECC              //  ______________________________________________________________________
 629+ 7ECC              //
 630+ 7ECC              // .r           n1 n2 --
 631+ 7ECC                              Colon_Def DOT_R, ".R", is_normal
 631+ 7ECC             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 631+ 7ECC             >
 631+ 7ECC             >Dict_Ptr        defl    $
 631+ 7ECC             >
 631+ 7ECC             >//              ______________________________________________________________________
 631+ 7ECC             >//              Heap part
 631+ 7ECC             >
 631+ 7ECC             >
 631+ 7ECC             >                org     (Heap_Ptr & $1FFF) + $E000
 631+ EC18             >
 631+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 631+ EC18             >Latest_Definition defl  Heap_Ptr
 631+ EC18             >
 631+ EC18             >                // dummy db directives used to calculate length of namec
 631+ EC18 2E 52       >                db      ".R"
 631+ EC1A             >len_NFA         defl    $ - temp_NFA
 631+ EC1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 631+ EC18             >
 631+ EC18 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 631+ EC19 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 631+ EC1B             >                org     $-1                 // alter last byte of Name just above to set
 631+ EC1A D2          >                db      {b $} | END_BIT     // msb as name end
 631+ EC1B             >
 631+ EC1B 10 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 631+ EC1D             >Prev_Ptr        defl    Heap_Ptr
 631+ EC1D             >
 631+ EC1D             >mirror_Ptr      defl    $
 631+ EC1D             >
 631+ EC1D CE 7E       >                dw      Dict_Ptr + 2        // xt
 631+ EC1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 631+ EC1F             >
 631+ EC1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 631+ EC1F             >
 631+ EC1F             >//              ______________________________________________________________________
 631+ EC1F             >//              Dictionary part
 631+ EC1F             >
 631+ EC1F             >                org     Dict_Ptr
 631+ 7ECC             >
 631+ 7ECC 1D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 631+ 7ECE             >
 631+ 7ECE             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 631+ 7ECE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 631+ 7ED1             >
 631+ 7ED1             >
 631+ 7ED1             >                endif           ; ok        // for other definitions it "points" the correct handler
 631+ 7ED1             >                // Use of "; ok" to suppress "warning[fwdref]"
 631+ 7ED1             >
 631+ 7ED1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 632+ 7ED1 1B 68                        dw      TO_R
 633+ 7ED3 91 6B 26 68                  dw      S_TO_D, R_TO
 634+ 7ED7 AD 7E                        dw      D_DOT_R
 635+ 7ED9 11 68                        dw      EXIT
 636+ 7EDB
 637+ 7EDB              //  ______________________________________________________________________
 638+ 7EDB              //
 639+ 7EDB              // d.           d --
 640+ 7EDB                              Colon_Def D_DOT, "D.", is_normal
 640+ 7EDB             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 640+ 7EDB             >
 640+ 7EDB             >Dict_Ptr        defl    $
 640+ 7EDB             >
 640+ 7EDB             >//              ______________________________________________________________________
 640+ 7EDB             >//              Heap part
 640+ 7EDB             >
 640+ 7EDB             >
 640+ 7EDB             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ EC1F             >
 640+ EC1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ EC1F             >Latest_Definition defl  Heap_Ptr
 640+ EC1F             >
 640+ EC1F             >                // dummy db directives used to calculate length of namec
 640+ EC1F 44 2E       >                db      "D."
 640+ EC21             >len_NFA         defl    $ - temp_NFA
 640+ EC21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ EC1F             >
 640+ EC1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ EC20 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 640+ EC22             >                org     $-1                 // alter last byte of Name just above to set
 640+ EC21 AE          >                db      {b $} | END_BIT     // msb as name end
 640+ EC22             >
 640+ EC22 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ EC24             >Prev_Ptr        defl    Heap_Ptr
 640+ EC24             >
 640+ EC24             >mirror_Ptr      defl    $
 640+ EC24             >
 640+ EC24 DD 7E       >                dw      Dict_Ptr + 2        // xt
 640+ EC26             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ EC26             >
 640+ EC26             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ EC26             >
 640+ EC26             >//              ______________________________________________________________________
 640+ EC26             >//              Dictionary part
 640+ EC26             >
 640+ EC26             >                org     Dict_Ptr
 640+ 7EDB             >
 640+ 7EDB 24 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 7EDD             >
 640+ 7EDD             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 7EDD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 7EE0             >
 640+ 7EE0             >
 640+ 7EE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 7EE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 7EE0             >
 640+ 7EE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 7EE0 38 6A AD 7E                  dw      ZERO, D_DOT_R, SPACE
 641+ 7EE4 2F 6C
 642+ 7EE6 11 68                        dw      EXIT
 643+ 7EE8
 644+ 7EE8              //  ______________________________________________________________________
 645+ 7EE8              //
 646+ 7EE8              // .            n --
 647+ 7EE8                              Colon_Def DOT, ".", is_normal
 647+ 7EE8             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 647+ 7EE8             >
 647+ 7EE8             >Dict_Ptr        defl    $
 647+ 7EE8             >
 647+ 7EE8             >//              ______________________________________________________________________
 647+ 7EE8             >//              Heap part
 647+ 7EE8             >
 647+ 7EE8             >
 647+ 7EE8             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ EC26             >
 647+ EC26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ EC26             >Latest_Definition defl  Heap_Ptr
 647+ EC26             >
 647+ EC26             >                // dummy db directives used to calculate length of namec
 647+ EC26 2E          >                db      "."
 647+ EC27             >len_NFA         defl    $ - temp_NFA
 647+ EC27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ EC26             >
 647+ EC26 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ EC27 2E          >                db      "."               // name string in 7-bit ascii, but
 647+ EC28             >                org     $-1                 // alter last byte of Name just above to set
 647+ EC27 AE          >                db      {b $} | END_BIT     // msb as name end
 647+ EC28             >
 647+ EC28 1F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ EC2A             >Prev_Ptr        defl    Heap_Ptr
 647+ EC2A             >
 647+ EC2A             >mirror_Ptr      defl    $
 647+ EC2A             >
 647+ EC2A EA 7E       >                dw      Dict_Ptr + 2        // xt
 647+ EC2C             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ EC2C             >
 647+ EC2C             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ EC2C             >
 647+ EC2C             >//              ______________________________________________________________________
 647+ EC2C             >//              Dictionary part
 647+ EC2C             >
 647+ EC2C             >                org     Dict_Ptr
 647+ 7EE8             >
 647+ 7EE8 2A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 7EEA             >
 647+ 7EEA             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 7EEA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 7EED             >
 647+ 7EED             >
 647+ 7EED             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 7EED             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 7EED             >
 647+ 7EED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 7EED 91 6B DD 7E                  dw      S_TO_D, D_DOT
 649+ 7EF1 11 68                        dw      EXIT
 650+ 7EF3
 651+ 7EF3              //  ______________________________________________________________________
 652+ 7EF3              //
 653+ 7EF3              // ?            n --
 654+ 7EF3                              Colon_Def QUESTION, "?", is_normal
 654+ 7EF3             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 654+ 7EF3             >
 654+ 7EF3             >Dict_Ptr        defl    $
 654+ 7EF3             >
 654+ 7EF3             >//              ______________________________________________________________________
 654+ 7EF3             >//              Heap part
 654+ 7EF3             >
 654+ 7EF3             >
 654+ 7EF3             >                org     (Heap_Ptr & $1FFF) + $E000
 654+ EC2C             >
 654+ EC2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ EC2C             >Latest_Definition defl  Heap_Ptr
 654+ EC2C             >
 654+ EC2C             >                // dummy db directives used to calculate length of namec
 654+ EC2C 3F          >                db      "?"
 654+ EC2D             >len_NFA         defl    $ - temp_NFA
 654+ EC2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ EC2C             >
 654+ EC2C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ EC2D 3F          >                db      "?"               // name string in 7-bit ascii, but
 654+ EC2E             >                org     $-1                 // alter last byte of Name just above to set
 654+ EC2D BF          >                db      {b $} | END_BIT     // msb as name end
 654+ EC2E             >
 654+ EC2E 26 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 654+ EC30             >Prev_Ptr        defl    Heap_Ptr
 654+ EC30             >
 654+ EC30             >mirror_Ptr      defl    $
 654+ EC30             >
 654+ EC30 F5 7E       >                dw      Dict_Ptr + 2        // xt
 654+ EC32             >Heap_Ptr        defl    $ - $E000           // save current HP
 654+ EC32             >
 654+ EC32             >Current_HP      defl  $ - $E000             // used to set HP once!
 654+ EC32             >
 654+ EC32             >//              ______________________________________________________________________
 654+ EC32             >//              Dictionary part
 654+ EC32             >
 654+ EC32             >                org     Dict_Ptr
 654+ 7EF3             >
 654+ 7EF3 30 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 654+ 7EF5             >
 654+ 7EF5             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 7EF5 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 7EF8             >
 654+ 7EF8             >
 654+ 7EF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 7EF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 7EF8             >
 654+ 7EF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 7EF8 46 69 EA 7E                  dw      FETCH, DOT
 656+ 7EFC 11 68                        dw      EXIT
 657+ 7EFE
 658+ 7EFE              //  ______________________________________________________________________
 659+ 7EFE              //
 660+ 7EFE              // u.           u --
 661+ 7EFE                              Colon_Def U_DOT, "U.", is_normal
 661+ 7EFE             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 661+ 7EFE             >
 661+ 7EFE             >Dict_Ptr        defl    $
 661+ 7EFE             >
 661+ 7EFE             >//              ______________________________________________________________________
 661+ 7EFE             >//              Heap part
 661+ 7EFE             >
 661+ 7EFE             >
 661+ 7EFE             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ EC32             >
 661+ EC32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ EC32             >Latest_Definition defl  Heap_Ptr
 661+ EC32             >
 661+ EC32             >                // dummy db directives used to calculate length of namec
 661+ EC32 55 2E       >                db      "U."
 661+ EC34             >len_NFA         defl    $ - temp_NFA
 661+ EC34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ EC32             >
 661+ EC32 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ EC33 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 661+ EC35             >                org     $-1                 // alter last byte of Name just above to set
 661+ EC34 AE          >                db      {b $} | END_BIT     // msb as name end
 661+ EC35             >
 661+ EC35 2C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ EC37             >Prev_Ptr        defl    Heap_Ptr
 661+ EC37             >
 661+ EC37             >mirror_Ptr      defl    $
 661+ EC37             >
 661+ EC37 00 7F       >                dw      Dict_Ptr + 2        // xt
 661+ EC39             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ EC39             >
 661+ EC39             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ EC39             >
 661+ EC39             >//              ______________________________________________________________________
 661+ EC39             >//              Dictionary part
 661+ EC39             >
 661+ EC39             >                org     Dict_Ptr
 661+ 7EFE             >
 661+ 7EFE 37 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 7F00             >
 661+ 7F00             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 7F00 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 7F03             >
 661+ 7F03             >
 661+ 7F03             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 7F03             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 7F03             >
 661+ 7F03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 7F03 38 6A DD 7E                  dw      ZERO, D_DOT
 663+ 7F07 11 68                        dw      EXIT
 664+ 7F09
 665+ 7F09              //  ______________________________________________________________________
 666+ 7F09              //
 667+ 7F09              // words        --
 668+ 7F09                              Colon_Def WORDS, "WORDS", is_normal
 668+ 7F09             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 668+ 7F09             >
 668+ 7F09             >Dict_Ptr        defl    $
 668+ 7F09             >
 668+ 7F09             >//              ______________________________________________________________________
 668+ 7F09             >//              Heap part
 668+ 7F09             >
 668+ 7F09             >
 668+ 7F09             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ EC39             >
 668+ EC39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ EC39             >Latest_Definition defl  Heap_Ptr
 668+ EC39             >
 668+ EC39             >                // dummy db directives used to calculate length of namec
 668+ EC39 57 4F 52 44 >                db      "WORDS"
 668+ EC3D 53          >
 668+ EC3E             >len_NFA         defl    $ - temp_NFA
 668+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ EC39             >
 668+ EC39 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ EC3A 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 668+ EC3E 53          >
 668+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 668+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 668+ EC3F             >
 668+ EC3F 32 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ EC41             >Prev_Ptr        defl    Heap_Ptr
 668+ EC41             >
 668+ EC41             >mirror_Ptr      defl    $
 668+ EC41             >
 668+ EC41 0B 7F       >                dw      Dict_Ptr + 2        // xt
 668+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ EC43             >
 668+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ EC43             >
 668+ EC43             >//              ______________________________________________________________________
 668+ EC43             >//              Dictionary part
 668+ EC43             >
 668+ EC43             >                org     Dict_Ptr
 668+ 7F09             >
 668+ 7F09 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 7F0B             >
 668+ 7F0B             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 7F0B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 7F0E             >
 668+ 7F0E             >
 668+ 7F0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 7F0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 7F0E             >
 668+ 7F0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 7F0E A3 63 80 00                  dw      LIT, 128, OUT, STORE
 669+ 7F12 E5 6A 50 69
 670+ 7F16 F7 6A 46 69                  dw      CONTEXT, FETCH, FETCH
 670+ 7F1A 46 69
 671+ 7F1C              Words_Begin:
 672+ 7F1C AD 6C                        dw          FAR // Q TO HEAP
 673+ 7F1E DC 68 5B 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 673+ 7F22 A3 63 1F 00
 673+ 7F26 D1 67
 674+ 7F28 E5 6A 46 69                  dw          OUT, FETCH, PLUS
 674+ 7F2C 5E 68
 675+ 7F2E 62 6A C1 6B                  dw          CL, LESS, ZEQUAL
 675+ 7F32 36 68
 676+ 7F34 F3 63                        dw          ZBRANCH
 677+ 7F36 0A 00                        dw          Words_Endif - $
 678+ 7F38 3A 6C 38 6A                  dw              CR, ZERO, OUT, STORE
 678+ 7F3C E5 6A 50 69
 679+ 7F40              Words_Endif:
 680+ 7F40 DC 68 8F 73                  dw          DUP, ID_DOT
 681+ 7F44 3F 6A 47 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 681+ 7F48 77 68 46 69
 682+ 7F4C DC 68 36 68                  dw          DUP, ZEQUAL
 683+ 7F50 70 66 E0 67                  dw          QTERMINAL, OR_OP
 684+ 7F54 F3 63                        dw      ZBRANCH
 685+ 7F56 C6 FF                        dw      Words_Begin - $
 686+ 7F58 C1 68                        dw      DROP
 687+ 7F5A 11 68                        dw      EXIT
 688+ 7F5C
 689+ 7F5C              //  ______________________________________________________________________
 690+ 7F5C              //
 691+ 7F5C              // list         n --
 692+ 7F5C                              Colon_Def LIST, "LIST", is_normal
 692+ 7F5C             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 692+ 7F5C             >
 692+ 7F5C             >Dict_Ptr        defl    $
 692+ 7F5C             >
 692+ 7F5C             >//              ______________________________________________________________________
 692+ 7F5C             >//              Heap part
 692+ 7F5C             >
 692+ 7F5C             >
 692+ 7F5C             >                org     (Heap_Ptr & $1FFF) + $E000
 692+ EC43             >
 692+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ EC43             >Latest_Definition defl  Heap_Ptr
 692+ EC43             >
 692+ EC43             >                // dummy db directives used to calculate length of namec
 692+ EC43 4C 49 53 54 >                db      "LIST"
 692+ EC47             >len_NFA         defl    $ - temp_NFA
 692+ EC47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ EC43             >
 692+ EC43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ EC44 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 692+ EC48             >                org     $-1                 // alter last byte of Name just above to set
 692+ EC47 D4          >                db      {b $} | END_BIT     // msb as name end
 692+ EC48             >
 692+ EC48 39 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 692+ EC4A             >Prev_Ptr        defl    Heap_Ptr
 692+ EC4A             >
 692+ EC4A             >mirror_Ptr      defl    $
 692+ EC4A             >
 692+ EC4A 5E 7F       >                dw      Dict_Ptr + 2        // xt
 692+ EC4C             >Heap_Ptr        defl    $ - $E000           // save current HP
 692+ EC4C             >
 692+ EC4C             >Current_HP      defl  $ - $E000             // used to set HP once!
 692+ EC4C             >
 692+ EC4C             >//              ______________________________________________________________________
 692+ EC4C             >//              Dictionary part
 692+ EC4C             >
 692+ EC4C             >                org     Dict_Ptr
 692+ 7F5C             >
 692+ 7F5C 4A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 692+ 7F5E             >
 692+ 7F5E             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 7F5E CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 7F61             >
 692+ 7F61             >
 692+ 7F61             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 7F61             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 7F61             >
 692+ 7F61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 7F61 7E 6E 3A 6C                  dw      DECIMAL, CR
 694+ 7F65 DC 68 EB 6A                  dw      DUP, SCR, STORE
 694+ 7F69 50 69
 695+ 7F6B 4A 71                        dw      C_DOT_QUOTE
 696+ 7F6D 05 53 63 72                  db      5, "Scr# "
 696+ 7F71 23 20
 697+ 7F73 EA 7E                        dw      DOT
 698+ 7F75 77 6A 38 6A                  dw      LSCR, ZERO, C_DO
 698+ 7F79 2C 64
 699+ 7F7B              List_Loop:
 700+ 7F7B 3A 6C                        dw          CR
 701+ 7F7D 32 64 4D 6A                  dw          I, THREE
 702+ 7F81 CE 7E 2F 6C                  dw          DOT_R, SPACE
 703+ 7F85 32 64 EB 6A                  dw          I, SCR, FETCH, DOT_LINE
 703+ 7F89 46 69 C3 77
 704+ 7F8D 70 66                        dw          QTERMINAL
 705+ 7F8F F3 63                        dw          ZBRANCH
 706+ 7F91 06 00                        dw          List_Endif - $
 707+ 7F93 FC 63                        dw              C_LEAVE
 708+ 7F95 06 00                        dw              List_Leave - $
 709+ 7F97              List_Endif:
 710+ 7F97 E7 63                        dw      C_LOOP
 711+ 7F99 E2 FF                        dw      List_Loop - $
 712+ 7F9B              List_Leave:
 713+ 7F9B 3A 6C                        dw      CR
 714+ 7F9D 11 68                        dw      EXIT
 715+ 7F9F
 716+ 7F9F              //  ______________________________________________________________________
 717+ 7F9F              //
 718+ 7F9F              // index        n1 n2 --
 719+ 7F9F                              Colon_Def INDEX, "INDEX", is_normal
 719+ 7F9F             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 719+ 7F9F             >
 719+ 7F9F             >Dict_Ptr        defl    $
 719+ 7F9F             >
 719+ 7F9F             >//              ______________________________________________________________________
 719+ 7F9F             >//              Heap part
 719+ 7F9F             >
 719+ 7F9F             >
 719+ 7F9F             >                org     (Heap_Ptr & $1FFF) + $E000
 719+ EC4C             >
 719+ EC4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ EC4C             >Latest_Definition defl  Heap_Ptr
 719+ EC4C             >
 719+ EC4C             >                // dummy db directives used to calculate length of namec
 719+ EC4C 49 4E 44 45 >                db      "INDEX"
 719+ EC50 58          >
 719+ EC51             >len_NFA         defl    $ - temp_NFA
 719+ EC51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ EC4C             >
 719+ EC4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ EC4D 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 719+ EC51 58          >
 719+ EC52             >                org     $-1                 // alter last byte of Name just above to set
 719+ EC51 D8          >                db      {b $} | END_BIT     // msb as name end
 719+ EC52             >
 719+ EC52 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 719+ EC54             >Prev_Ptr        defl    Heap_Ptr
 719+ EC54             >
 719+ EC54             >mirror_Ptr      defl    $
 719+ EC54             >
 719+ EC54 A1 7F       >                dw      Dict_Ptr + 2        // xt
 719+ EC56             >Heap_Ptr        defl    $ - $E000           // save current HP
 719+ EC56             >
 719+ EC56             >Current_HP      defl  $ - $E000             // used to set HP once!
 719+ EC56             >
 719+ EC56             >//              ______________________________________________________________________
 719+ EC56             >//              Dictionary part
 719+ EC56             >
 719+ EC56             >                org     Dict_Ptr
 719+ 7F9F             >
 719+ 7F9F 54 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 719+ 7FA1             >
 719+ 7FA1             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 7FA1 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 7FA4             >
 719+ 7FA4             >
 719+ 7FA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 7FA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 7FA4             >
 719+ 7FA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 7FA4 77 68 D5 68                  dw      ONE_PLUS, SWAP, C_DO
 720+ 7FA8 2C 64
 721+ 7FAA              Index_Loop:
 722+ 7FAA 3A 6C 32 64                  dw          CR, I, THREE
 722+ 7FAE 4D 6A
 723+ 7FB0 CE 7E 2F 6C                  dw          DOT_R, SPACE
 724+ 7FB4 38 6A 32 64                  dw          ZERO, I, DOT_LINE
 724+ 7FB8 C3 77
 725+ 7FBA 70 66                        dw          QTERMINAL
 726+ 7FBC F3 63                        dw          ZBRANCH
 727+ 7FBE 06 00                        dw          Index_Endif - $
 728+ 7FC0 FC 63                        dw              C_LEAVE
 729+ 7FC2 06 00                        dw              Index_Leave - $
 730+ 7FC4              Index_Endif:
 731+ 7FC4 E7 63                        dw      C_LOOP
 732+ 7FC6 E4 FF                        dw      Index_Loop - $
 733+ 7FC8              Index_Leave:
 734+ 7FC8 3A 6C                        dw      CR
 735+ 7FCA 11 68                        dw      EXIT
 736+ 7FCC
 737+ 7FCC              //  ______________________________________________________________________
 738+ 7FCC              //
 739+ 7FCC              // cls          --
 740+ 7FCC                              Colon_Def CLS, "CLS", is_normal
 740+ 7FCC             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 740+ 7FCC             >
 740+ 7FCC             >Dict_Ptr        defl    $
 740+ 7FCC             >
 740+ 7FCC             >//              ______________________________________________________________________
 740+ 7FCC             >//              Heap part
 740+ 7FCC             >
 740+ 7FCC             >
 740+ 7FCC             >                org     (Heap_Ptr & $1FFF) + $E000
 740+ EC56             >
 740+ EC56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ EC56             >Latest_Definition defl  Heap_Ptr
 740+ EC56             >
 740+ EC56             >                // dummy db directives used to calculate length of namec
 740+ EC56 43 4C 53    >                db      "CLS"
 740+ EC59             >len_NFA         defl    $ - temp_NFA
 740+ EC59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ EC56             >
 740+ EC56 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ EC57 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 740+ EC5A             >                org     $-1                 // alter last byte of Name just above to set
 740+ EC59 D3          >                db      {b $} | END_BIT     // msb as name end
 740+ EC5A             >
 740+ EC5A 4C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 740+ EC5C             >Prev_Ptr        defl    Heap_Ptr
 740+ EC5C             >
 740+ EC5C             >mirror_Ptr      defl    $
 740+ EC5C             >
 740+ EC5C CE 7F       >                dw      Dict_Ptr + 2        // xt
 740+ EC5E             >Heap_Ptr        defl    $ - $E000           // save current HP
 740+ EC5E             >
 740+ EC5E             >Current_HP      defl  $ - $E000             // used to set HP once!
 740+ EC5E             >
 740+ EC5E             >//              ______________________________________________________________________
 740+ EC5E             >//              Dictionary part
 740+ EC5E             >
 740+ EC5E             >                org     Dict_Ptr
 740+ 7FCC             >
 740+ 7FCC 5C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 740+ 7FCE             >
 740+ 7FCE             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 7FCE CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 7FD1             >
 740+ 7FD1             >
 740+ 7FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 7FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 7FD1             >
 740+ 7FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 7FD1 A5 65                        dw      CCLS
 742+ 7FD3 11 68                        dw      EXIT
 743+ 7FD5
 744+ 7FD5
 745+ 7FD5              //  ______________________________________________________________________
 746+ 7FD5              //
 747+ 7FD5              // splash       --
 748+ 7FD5              //              Colon_Def SPLASH, "SPLASH", is_normal
 749+ 7FD5              //              dw      CLS
 750+ 7FD5              //              dw      C_DOT_QUOTE
 751+ 7FD5              //              db      87
 752+ 7FD5              //              db      "v-Forth 1.8 NextZXOS version", 13    // 29
 753+ 7FD5              //              db      "Heap Vocabulary - build 20250719", 13  // 33
 754+ 7FD5              //              db      "1990-2025 Matteo Vitturi", 13        // 25
 755+ 7FD5              //              dw      EXIT
 756+ 7FD5
 757+ 7FD5              //  ______________________________________________________________________
 758+ 7FD5              //
 759+ 7FD5              // splash       --
 760+ 7FD5                              Colon_Def SPLASH, "SPLASH", is_normal
 760+ 7FD5             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 760+ 7FD5             >
 760+ 7FD5             >Dict_Ptr        defl    $
 760+ 7FD5             >
 760+ 7FD5             >//              ______________________________________________________________________
 760+ 7FD5             >//              Heap part
 760+ 7FD5             >
 760+ 7FD5             >
 760+ 7FD5             >                org     (Heap_Ptr & $1FFF) + $E000
 760+ EC5E             >
 760+ EC5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 760+ EC5E             >Latest_Definition defl  Heap_Ptr
 760+ EC5E             >
 760+ EC5E             >                // dummy db directives used to calculate length of namec
 760+ EC5E 53 50 4C 41 >                db      "SPLASH"
 760+ EC62 53 48       >
 760+ EC64             >len_NFA         defl    $ - temp_NFA
 760+ EC64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 760+ EC5E             >
 760+ EC5E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 760+ EC5F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 760+ EC63 53 48       >
 760+ EC65             >                org     $-1                 // alter last byte of Name just above to set
 760+ EC64 C8          >                db      {b $} | END_BIT     // msb as name end
 760+ EC65             >
 760+ EC65 56 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 760+ EC67             >Prev_Ptr        defl    Heap_Ptr
 760+ EC67             >
 760+ EC67             >mirror_Ptr      defl    $
 760+ EC67             >
 760+ EC67 D7 7F       >                dw      Dict_Ptr + 2        // xt
 760+ EC69             >Heap_Ptr        defl    $ - $E000           // save current HP
 760+ EC69             >
 760+ EC69             >Current_HP      defl  $ - $E000             // used to set HP once!
 760+ EC69             >
 760+ EC69             >//              ______________________________________________________________________
 760+ EC69             >//              Dictionary part
 760+ EC69             >
 760+ EC69             >                org     Dict_Ptr
 760+ 7FD5             >
 760+ 7FD5 67 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 760+ 7FD7             >
 760+ 7FD7             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 760+ 7FD7 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 760+ 7FDA             >
 760+ 7FDA             >
 760+ 7FDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 760+ 7FDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 760+ 7FDA             >
 760+ 7FDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 761+ 7FDA CE 7F                        dw      CLS
 762+ 7FDC A3 63 02 00                  dw      LIT, Splash_Ptr
 763+ 7FE0 AD 6C                        dw      FAR
 764+ 7FE2 EC 6E AD 6F                  dw      COUNT, TYPE
 765+ 7FE6 11 68                        dw      EXIT
 766+ 7FE8
 767+ 7FE8              //  ______________________________________________________________________
 768+ 7FE8              //
 769+ 7FE8              // video        --
 770+ 7FE8                              Colon_Def VIDEO, "VIDEO", is_normal
 770+ 7FE8             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 770+ 7FE8             >
 770+ 7FE8             >Dict_Ptr        defl    $
 770+ 7FE8             >
 770+ 7FE8             >//              ______________________________________________________________________
 770+ 7FE8             >//              Heap part
 770+ 7FE8             >
 770+ 7FE8             >
 770+ 7FE8             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ EC69             >
 770+ EC69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ EC69             >Latest_Definition defl  Heap_Ptr
 770+ EC69             >
 770+ EC69             >                // dummy db directives used to calculate length of namec
 770+ EC69 56 49 44 45 >                db      "VIDEO"
 770+ EC6D 4F          >
 770+ EC6E             >len_NFA         defl    $ - temp_NFA
 770+ EC6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ EC69             >
 770+ EC69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ EC6A 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 770+ EC6E 4F          >
 770+ EC6F             >                org     $-1                 // alter last byte of Name just above to set
 770+ EC6E CF          >                db      {b $} | END_BIT     // msb as name end
 770+ EC6F             >
 770+ EC6F 5E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ EC71             >Prev_Ptr        defl    Heap_Ptr
 770+ EC71             >
 770+ EC71             >mirror_Ptr      defl    $
 770+ EC71             >
 770+ EC71 EA 7F       >                dw      Dict_Ptr + 2        // xt
 770+ EC73             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ EC73             >
 770+ EC73             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ EC73             >
 770+ EC73             >//              ______________________________________________________________________
 770+ EC73             >//              Dictionary part
 770+ EC73             >
 770+ EC73             >                org     Dict_Ptr
 770+ 7FE8             >
 770+ 7FE8 71 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 7FEA             >
 770+ 7FEA             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 7FEA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 770+ 7FED             >
 770+ 7FED             >
 770+ 7FED             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 7FED             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 7FED             >
 770+ 7FED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 7FED 46 6A DC 68                  dw      TWO, DUP, DEVICE, STORE
 771+ 7FF1 F8 77 50 69
 772+ 7FF5 84 66                        dw      SELECT
 773+ 7FF7 11 68                        dw      EXIT
 774+ 7FF9
 775+ 7FF9              //  ______________________________________________________________________
 776+ 7FF9              //
 777+ 7FF9              // autoexec     --
 778+ 7FF9              // this word is called the first time the Forth system boot to
 779+ 7FF9              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 780+ 7FF9                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 780+ 7FF9             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 780+ 7FF9             >
 780+ 7FF9             >Dict_Ptr        defl    $
 780+ 7FF9             >
 780+ 7FF9             >//              ______________________________________________________________________
 780+ 7FF9             >//              Heap part
 780+ 7FF9             >
 780+ 7FF9             >
 780+ 7FF9             >                org     (Heap_Ptr & $1FFF) + $E000
 780+ EC73             >
 780+ EC73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ EC73             >Latest_Definition defl  Heap_Ptr
 780+ EC73             >
 780+ EC73             >                // dummy db directives used to calculate length of namec
 780+ EC73 41 55 54 4F >                db      "AUTOEXEC"
 780+ EC77 45 58 45 43 >
 780+ EC7B             >len_NFA         defl    $ - temp_NFA
 780+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ EC73             >
 780+ EC73 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ EC74 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 780+ EC78 45 58 45 43 >
 780+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 780+ EC7B C3          >                db      {b $} | END_BIT     // msb as name end
 780+ EC7C             >
 780+ EC7C 69 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 780+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 780+ EC7E             >
 780+ EC7E             >mirror_Ptr      defl    $
 780+ EC7E             >
 780+ EC7E FB 7F       >                dw      Dict_Ptr + 2        // xt
 780+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 780+ EC80             >
 780+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 780+ EC80             >
 780+ EC80             >//              ______________________________________________________________________
 780+ EC80             >//              Dictionary part
 780+ EC80             >
 780+ EC80             >                org     Dict_Ptr
 780+ 7FF9             >
 780+ 7FF9 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 780+ 7FFB             >
 780+ 7FFB             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ 7FFB CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ 7FFE             >
 780+ 7FFE             >
 780+ 7FFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ 7FFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ 7FFE             >
 780+ 7FFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ 7FFE A3 63 0B 00                  dw      LIT, 11
 782+ 8002 A3 63 FF 69                  dw      LIT, NOOP
 783+ 8006 A3 63 FF 75                  dw      LIT, Autoexec_Ptr
 784+ 800A 50 69                        dw      STORE
 785+ 800C 01 7D                        dw      LOAD
 786+ 800E A6 75                        dw      QUIT
 787+ 8010 11 68                        dw      EXIT
 788+ 8012
 789+ 8012
 790+ 8012              //  ______________________________________________________________________
 791+ 8012              //
 792+ 8012              // bye     --
 793+ 8012              //
 794+ 8012                              Colon_Def BYE, "BYE", is_normal
 794+ 8012             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 794+ 8012             >
 794+ 8012             >Dict_Ptr        defl    $
 794+ 8012             >
 794+ 8012             >//              ______________________________________________________________________
 794+ 8012             >//              Heap part
 794+ 8012             >
 794+ 8012             >
 794+ 8012             >                org     (Heap_Ptr & $1FFF) + $E000
 794+ EC80             >
 794+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ EC80             >Latest_Definition defl  Heap_Ptr
 794+ EC80             >
 794+ EC80             >                // dummy db directives used to calculate length of namec
 794+ EC80 42 59 45    >                db      "BYE"
 794+ EC83             >len_NFA         defl    $ - temp_NFA
 794+ EC83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ EC80             >
 794+ EC80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ EC81 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 794+ EC84             >                org     $-1                 // alter last byte of Name just above to set
 794+ EC83 C5          >                db      {b $} | END_BIT     // msb as name end
 794+ EC84             >
 794+ EC84 73 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 794+ EC86             >Prev_Ptr        defl    Heap_Ptr
 794+ EC86             >
 794+ EC86             >mirror_Ptr      defl    $
 794+ EC86             >
 794+ EC86 14 80       >                dw      Dict_Ptr + 2        // xt
 794+ EC88             >Heap_Ptr        defl    $ - $E000           // save current HP
 794+ EC88             >
 794+ EC88             >Current_HP      defl  $ - $E000             // used to set HP once!
 794+ EC88             >
 794+ EC88             >//              ______________________________________________________________________
 794+ EC88             >//              Dictionary part
 794+ EC88             >
 794+ EC88             >                org     Dict_Ptr
 794+ 8012             >
 794+ 8012 86 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 794+ 8014             >
 794+ 8014             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 8014 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 8017             >
 794+ 8017             >
 794+ 8017             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 8017             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 8017             >
 794+ 8017             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 8017 13 7A                        dw      FLUSH
 796+ 8019 61 79                        dw      EMPTY_BUFFERS
 797+ 801B 4D 78 46 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 797+ 801F BE 66 C1 68
 798+ 8023 38 6A 7E 6A                  dw      ZERO, PLUS_ORIGIN
 799+ 8027 8D 76                        dw      BASIC
 800+ 8029
 801+ 8029              //  ______________________________________________________________________
 802+ 8029              //
 803+ 8029              // invv     --
 804+ 8029              //
 805+ 8029              //              Colon_Def INVV, "INVV", is_normal
 806+ 8029              //              dw      LIT, 20, EMITC, ONE, EMITC
 807+ 8029              //              dw      EXIT
 808+ 8029
 809+ 8029              //  ______________________________________________________________________
 810+ 8029              //
 811+ 8029              // truv     --
 812+ 8029              //
 813+ 8029              //              Colon_Def TRUV, "TRUV", is_normal
 814+ 8029              //              dw      LIT, 20, EMITC, ZERO, EMITC
 815+ 8029              //              dw      EXIT
 816+ 8029
 817+ 8029              //  ______________________________________________________________________
 818+ 8029              //
 819+ 8029              // mark     --
 820+ 8029              //
 821+ 8029              //              Colon_Def MARK, "MARK", is_normal
 822+ 8029              //              dw      INVV, TYPE, TRUV
 823+ 8029              //              dw      EXIT
 824+ 8029
 825+ 8029              //  ______________________________________________________________________
 826+ 8029              //
 827+ 8029              // back     --
 828+ 8029              //
 829+ 8029                              Colon_Def BACK, "BACK", is_normal
 829+ 8029             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 829+ 8029             >
 829+ 8029             >Dict_Ptr        defl    $
 829+ 8029             >
 829+ 8029             >//              ______________________________________________________________________
 829+ 8029             >//              Heap part
 829+ 8029             >
 829+ 8029             >
 829+ 8029             >                org     (Heap_Ptr & $1FFF) + $E000
 829+ EC88             >
 829+ EC88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ EC88             >Latest_Definition defl  Heap_Ptr
 829+ EC88             >
 829+ EC88             >                // dummy db directives used to calculate length of namec
 829+ EC88 42 41 43 4B >                db      "BACK"
 829+ EC8C             >len_NFA         defl    $ - temp_NFA
 829+ EC8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ EC88             >
 829+ EC88 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ EC89 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 829+ EC8D             >                org     $-1                 // alter last byte of Name just above to set
 829+ EC8C CB          >                db      {b $} | END_BIT     // msb as name end
 829+ EC8D             >
 829+ EC8D 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 829+ EC8F             >Prev_Ptr        defl    Heap_Ptr
 829+ EC8F             >
 829+ EC8F             >mirror_Ptr      defl    $
 829+ EC8F             >
 829+ EC8F 2B 80       >                dw      Dict_Ptr + 2        // xt
 829+ EC91             >Heap_Ptr        defl    $ - $E000           // save current HP
 829+ EC91             >
 829+ EC91             >Current_HP      defl  $ - $E000             // used to set HP once!
 829+ EC91             >
 829+ EC91             >//              ______________________________________________________________________
 829+ EC91             >//              Dictionary part
 829+ EC91             >
 829+ EC91             >                org     Dict_Ptr
 829+ 8029             >
 829+ 8029 8F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 829+ 802B             >
 829+ 802B             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 802B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 802E             >
 829+ 802E             >
 829+ 802E             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 802E             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 802E             >
 829+ 802E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 802E 5D 6B 9C 6B                  dw      HERE, SUBTRACT, COMMA
 830+ 8032 73 6B
 831+ 8034 11 68                        dw      EXIT
 832+ 8036
 833+ 8036              //  ______________________________________________________________________
 834+ 8036              //
 835+ 8036              // if          ( -- a 2 ) \ compile-time
 836+ 8036              // IF ... THEN
 837+ 8036              // IF ... ELSE ... ENDIF
 838+ 8036                              Colon_Def IF, "IF", is_immediate
 838+ 8036             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 838+ 8036             >
 838+ 8036             >Dict_Ptr        defl    $
 838+ 8036             >
 838+ 8036             >//              ______________________________________________________________________
 838+ 8036             >//              Heap part
 838+ 8036             >
 838+ 8036             >
 838+ 8036             >                org     (Heap_Ptr & $1FFF) + $E000
 838+ EC91             >
 838+ EC91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 838+ EC91             >Latest_Definition defl  Heap_Ptr
 838+ EC91             >
 838+ EC91             >                // dummy db directives used to calculate length of namec
 838+ EC91 49 46       >                db      "IF"
 838+ EC93             >len_NFA         defl    $ - temp_NFA
 838+ EC93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 838+ EC91             >
 838+ EC91 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 838+ EC92 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 838+ EC94             >                org     $-1                 // alter last byte of Name just above to set
 838+ EC93 C6          >                db      {b $} | END_BIT     // msb as name end
 838+ EC94             >
 838+ EC94 88 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 838+ EC96             >Prev_Ptr        defl    Heap_Ptr
 838+ EC96             >
 838+ EC96             >mirror_Ptr      defl    $
 838+ EC96             >
 838+ EC96 38 80       >                dw      Dict_Ptr + 2        // xt
 838+ EC98             >Heap_Ptr        defl    $ - $E000           // save current HP
 838+ EC98             >
 838+ EC98             >Current_HP      defl  $ - $E000             // used to set HP once!
 838+ EC98             >
 838+ EC98             >//              ______________________________________________________________________
 838+ EC98             >//              Dictionary part
 838+ EC98             >
 838+ EC98             >                org     Dict_Ptr
 838+ 8036             >
 838+ 8036 96 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 838+ 8038             >
 838+ 8038             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 838+ 8038 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 838+ 803B             >
 838+ 803B             >
 838+ 803B             >                endif           ; ok        // for other definitions it "points" the correct handler
 838+ 803B             >                // Use of "; ok" to suppress "warning[fwdref]"
 838+ 803B             >
 838+ 803B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 839+ 803B 17 6E F3 63                  dw      COMPILE, ZBRANCH
 840+ 803F 5D 6B 38 6A                  dw      HERE, ZERO, COMMA
 840+ 8043 73 6B
 841+ 8045 46 6A                        dw      TWO
 842+ 8047 11 68                        dw      EXIT
 843+ 8049
 844+ 8049              //  ______________________________________________________________________
 845+ 8049              //
 846+ 8049              // then        ( a 2 -- ) \ compile-time
 847+ 8049              //
 848+ 8049                              Colon_Def THEN, "THEN", is_immediate
 848+ 8049             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 848+ 8049             >
 848+ 8049             >Dict_Ptr        defl    $
 848+ 8049             >
 848+ 8049             >//              ______________________________________________________________________
 848+ 8049             >//              Heap part
 848+ 8049             >
 848+ 8049             >
 848+ 8049             >                org     (Heap_Ptr & $1FFF) + $E000
 848+ EC98             >
 848+ EC98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 848+ EC98             >Latest_Definition defl  Heap_Ptr
 848+ EC98             >
 848+ EC98             >                // dummy db directives used to calculate length of namec
 848+ EC98 54 48 45 4E >                db      "THEN"
 848+ EC9C             >len_NFA         defl    $ - temp_NFA
 848+ EC9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 848+ EC98             >
 848+ EC98 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 848+ EC99 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 848+ EC9D             >                org     $-1                 // alter last byte of Name just above to set
 848+ EC9C CE          >                db      {b $} | END_BIT     // msb as name end
 848+ EC9D             >
 848+ EC9D 91 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 848+ EC9F             >Prev_Ptr        defl    Heap_Ptr
 848+ EC9F             >
 848+ EC9F             >mirror_Ptr      defl    $
 848+ EC9F             >
 848+ EC9F 4B 80       >                dw      Dict_Ptr + 2        // xt
 848+ ECA1             >Heap_Ptr        defl    $ - $E000           // save current HP
 848+ ECA1             >
 848+ ECA1             >Current_HP      defl  $ - $E000             // used to set HP once!
 848+ ECA1             >
 848+ ECA1             >//              ______________________________________________________________________
 848+ ECA1             >//              Dictionary part
 848+ ECA1             >
 848+ ECA1             >                org     Dict_Ptr
 848+ 8049             >
 848+ 8049 9F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 848+ 804B             >
 848+ 804B             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 848+ 804B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 848+ 804E             >
 848+ 804E             >
 848+ 804E             >                endif           ; ok        // for other definitions it "points" the correct handler
 848+ 804E             >                // Use of "; ok" to suppress "warning[fwdref]"
 848+ 804E             >
 848+ 804E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 849+ 804E BC 6D                        dw      QCOMP
 850+ 8050 46 6A E0 6D                  dw      TWO, QPAIRS
 851+ 8054 5D 6B B8 68                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 851+ 8058 9C 6B D5 68
 851+ 805C 50 69
 852+ 805E 11 68                        dw      EXIT
 853+ 8060
 854+ 8060              //  ______________________________________________________________________
 855+ 8060              //
 856+ 8060              // endif       ( a 2 -- ) \ compile-time
 857+ 8060              //
 858+ 8060                              Colon_Def ENDIF, "ENDIF", is_immediate
 858+ 8060             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 858+ 8060             >
 858+ 8060             >Dict_Ptr        defl    $
 858+ 8060             >
 858+ 8060             >//              ______________________________________________________________________
 858+ 8060             >//              Heap part
 858+ 8060             >
 858+ 8060             >
 858+ 8060             >                org     (Heap_Ptr & $1FFF) + $E000
 858+ ECA1             >
 858+ ECA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ ECA1             >Latest_Definition defl  Heap_Ptr
 858+ ECA1             >
 858+ ECA1             >                // dummy db directives used to calculate length of namec
 858+ ECA1 45 4E 44 49 >                db      "ENDIF"
 858+ ECA5 46          >
 858+ ECA6             >len_NFA         defl    $ - temp_NFA
 858+ ECA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ ECA1             >
 858+ ECA1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ ECA2 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 858+ ECA6 46          >
 858+ ECA7             >                org     $-1                 // alter last byte of Name just above to set
 858+ ECA6 C6          >                db      {b $} | END_BIT     // msb as name end
 858+ ECA7             >
 858+ ECA7 98 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 858+ ECA9             >Prev_Ptr        defl    Heap_Ptr
 858+ ECA9             >
 858+ ECA9             >mirror_Ptr      defl    $
 858+ ECA9             >
 858+ ECA9 62 80       >                dw      Dict_Ptr + 2        // xt
 858+ ECAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 858+ ECAB             >
 858+ ECAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 858+ ECAB             >
 858+ ECAB             >//              ______________________________________________________________________
 858+ ECAB             >//              Dictionary part
 858+ ECAB             >
 858+ ECAB             >                org     Dict_Ptr
 858+ 8060             >
 858+ 8060 A9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 858+ 8062             >
 858+ 8062             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 8062 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 8065             >
 858+ 8065             >
 858+ 8065             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 8065             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 8065             >
 858+ 8065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 8065 4B 80                        dw      THEN
 860+ 8067 11 68                        dw      EXIT
 861+ 8069
 862+ 8069              //  ______________________________________________________________________
 863+ 8069              //
 864+ 8069              // else        ( a1 2 -- a2 2 ) \ compile-time
 865+ 8069              //
 866+ 8069                              Colon_Def ELSE, "ELSE", is_immediate
 866+ 8069             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 866+ 8069             >
 866+ 8069             >Dict_Ptr        defl    $
 866+ 8069             >
 866+ 8069             >//              ______________________________________________________________________
 866+ 8069             >//              Heap part
 866+ 8069             >
 866+ 8069             >
 866+ 8069             >                org     (Heap_Ptr & $1FFF) + $E000
 866+ ECAB             >
 866+ ECAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ ECAB             >Latest_Definition defl  Heap_Ptr
 866+ ECAB             >
 866+ ECAB             >                // dummy db directives used to calculate length of namec
 866+ ECAB 45 4C 53 45 >                db      "ELSE"
 866+ ECAF             >len_NFA         defl    $ - temp_NFA
 866+ ECAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ ECAB             >
 866+ ECAB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ ECAC 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 866+ ECB0             >                org     $-1                 // alter last byte of Name just above to set
 866+ ECAF C5          >                db      {b $} | END_BIT     // msb as name end
 866+ ECB0             >
 866+ ECB0 A1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 866+ ECB2             >Prev_Ptr        defl    Heap_Ptr
 866+ ECB2             >
 866+ ECB2             >mirror_Ptr      defl    $
 866+ ECB2             >
 866+ ECB2 6B 80       >                dw      Dict_Ptr + 2        // xt
 866+ ECB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 866+ ECB4             >
 866+ ECB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 866+ ECB4             >
 866+ ECB4             >//              ______________________________________________________________________
 866+ ECB4             >//              Dictionary part
 866+ ECB4             >
 866+ ECB4             >                org     Dict_Ptr
 866+ 8069             >
 866+ 8069 B2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 866+ 806B             >
 866+ 806B             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 806B CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 806E             >
 866+ 806E             >
 866+ 806E             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 806E             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 806E             >
 866+ 806E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 806E BC 6D                        dw      QCOMP
 868+ 8070 46 6A E0 6D                  dw      TWO, QPAIRS
 869+ 8074 17 6E EF 63                  dw      COMPILE, BRANCH
 870+ 8078 5D 6B 38 6A                  dw      HERE, ZERO, COMMA
 870+ 807C 73 6B
 871+ 807E D5 68 46 6A                  dw      SWAP, TWO, THEN
 871+ 8082 4B 80
 872+ 8084 46 6A                        dw      TWO
 873+ 8086 11 68                        dw      EXIT
 874+ 8088
 875+ 8088              //  ______________________________________________________________________
 876+ 8088              //
 877+ 8088              // begin        ( -- a 1 ) \ compile-time
 878+ 8088              // BEGIN ... AGAIN
 879+ 8088              // BEGIN ... f UNTIL
 880+ 8088              // BEGIN ... f WHILE ... REPEAT
 881+ 8088                              Colon_Def BEGIN, "BEGIN", is_immediate
 881+ 8088             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 881+ 8088             >
 881+ 8088             >Dict_Ptr        defl    $
 881+ 8088             >
 881+ 8088             >//              ______________________________________________________________________
 881+ 8088             >//              Heap part
 881+ 8088             >
 881+ 8088             >
 881+ 8088             >                org     (Heap_Ptr & $1FFF) + $E000
 881+ ECB4             >
 881+ ECB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ ECB4             >Latest_Definition defl  Heap_Ptr
 881+ ECB4             >
 881+ ECB4             >                // dummy db directives used to calculate length of namec
 881+ ECB4 42 45 47 49 >                db      "BEGIN"
 881+ ECB8 4E          >
 881+ ECB9             >len_NFA         defl    $ - temp_NFA
 881+ ECB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ ECB4             >
 881+ ECB4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ ECB5 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 881+ ECB9 4E          >
 881+ ECBA             >                org     $-1                 // alter last byte of Name just above to set
 881+ ECB9 CE          >                db      {b $} | END_BIT     // msb as name end
 881+ ECBA             >
 881+ ECBA AB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 881+ ECBC             >Prev_Ptr        defl    Heap_Ptr
 881+ ECBC             >
 881+ ECBC             >mirror_Ptr      defl    $
 881+ ECBC             >
 881+ ECBC 8A 80       >                dw      Dict_Ptr + 2        // xt
 881+ ECBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 881+ ECBE             >
 881+ ECBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 881+ ECBE             >
 881+ ECBE             >//              ______________________________________________________________________
 881+ ECBE             >//              Dictionary part
 881+ ECBE             >
 881+ ECBE             >                org     Dict_Ptr
 881+ 8088             >
 881+ 8088 BC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 881+ 808A             >
 881+ 808A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 808A CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 808D             >
 881+ 808D             >
 881+ 808D             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 808D             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 808D             >
 881+ 808D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 808D BC 6D                        dw      QCOMP
 883+ 808F 5D 6B                        dw      HERE
 884+ 8091 46 6A                        dw      TWO
 885+ 8093 11 68                        dw      EXIT
 886+ 8095
 887+ 8095              //  ______________________________________________________________________
 888+ 8095              //
 889+ 8095              // again        ( a 1 -- ) \ compile-time
 890+ 8095                              Colon_Def AGAIN, "AGAIN", is_immediate
 890+ 8095             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 890+ 8095             >
 890+ 8095             >Dict_Ptr        defl    $
 890+ 8095             >
 890+ 8095             >//              ______________________________________________________________________
 890+ 8095             >//              Heap part
 890+ 8095             >
 890+ 8095             >
 890+ 8095             >                org     (Heap_Ptr & $1FFF) + $E000
 890+ ECBE             >
 890+ ECBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ ECBE             >Latest_Definition defl  Heap_Ptr
 890+ ECBE             >
 890+ ECBE             >                // dummy db directives used to calculate length of namec
 890+ ECBE 41 47 41 49 >                db      "AGAIN"
 890+ ECC2 4E          >
 890+ ECC3             >len_NFA         defl    $ - temp_NFA
 890+ ECC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ ECBE             >
 890+ ECBE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ ECBF 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 890+ ECC3 4E          >
 890+ ECC4             >                org     $-1                 // alter last byte of Name just above to set
 890+ ECC3 CE          >                db      {b $} | END_BIT     // msb as name end
 890+ ECC4             >
 890+ ECC4 B4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 890+ ECC6             >Prev_Ptr        defl    Heap_Ptr
 890+ ECC6             >
 890+ ECC6             >mirror_Ptr      defl    $
 890+ ECC6             >
 890+ ECC6 97 80       >                dw      Dict_Ptr + 2        // xt
 890+ ECC8             >Heap_Ptr        defl    $ - $E000           // save current HP
 890+ ECC8             >
 890+ ECC8             >Current_HP      defl  $ - $E000             // used to set HP once!
 890+ ECC8             >
 890+ ECC8             >//              ______________________________________________________________________
 890+ ECC8             >//              Dictionary part
 890+ ECC8             >
 890+ ECC8             >                org     Dict_Ptr
 890+ 8095             >
 890+ 8095 C6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 890+ 8097             >
 890+ 8097             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 8097 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 809A             >
 890+ 809A             >
 890+ 809A             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 809A             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 809A             >
 890+ 809A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 809A BC 6D                        dw      QCOMP
 892+ 809C 46 6A E0 6D                  dw      TWO, QPAIRS
 893+ 80A0 17 6E EF 63                  dw      COMPILE, BRANCH
 894+ 80A4 2B 80                        dw      BACK
 895+ 80A6 11 68                        dw      EXIT
 896+ 80A8
 897+ 80A8              //  ______________________________________________________________________
 898+ 80A8              //
 899+ 80A8              // until        ( a 1 -- ) \ compile-time
 900+ 80A8                              Colon_Def UNTIL, "UNTIL", is_immediate
 900+ 80A8             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 900+ 80A8             >
 900+ 80A8             >Dict_Ptr        defl    $
 900+ 80A8             >
 900+ 80A8             >//              ______________________________________________________________________
 900+ 80A8             >//              Heap part
 900+ 80A8             >
 900+ 80A8             >
 900+ 80A8             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ ECC8             >
 900+ ECC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ ECC8             >Latest_Definition defl  Heap_Ptr
 900+ ECC8             >
 900+ ECC8             >                // dummy db directives used to calculate length of namec
 900+ ECC8 55 4E 54 49 >                db      "UNTIL"
 900+ ECCC 4C          >
 900+ ECCD             >len_NFA         defl    $ - temp_NFA
 900+ ECCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ ECC8             >
 900+ ECC8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ ECC9 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 900+ ECCD 4C          >
 900+ ECCE             >                org     $-1                 // alter last byte of Name just above to set
 900+ ECCD CC          >                db      {b $} | END_BIT     // msb as name end
 900+ ECCE             >
 900+ ECCE BE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ ECD0             >Prev_Ptr        defl    Heap_Ptr
 900+ ECD0             >
 900+ ECD0             >mirror_Ptr      defl    $
 900+ ECD0             >
 900+ ECD0 AA 80       >                dw      Dict_Ptr + 2        // xt
 900+ ECD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ ECD2             >
 900+ ECD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ ECD2             >
 900+ ECD2             >//              ______________________________________________________________________
 900+ ECD2             >//              Dictionary part
 900+ ECD2             >
 900+ ECD2             >                org     Dict_Ptr
 900+ 80A8             >
 900+ 80A8 D0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 80AA             >
 900+ 80AA             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 80AA CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 900+ 80AD             >
 900+ 80AD             >
 900+ 80AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 80AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 80AD             >
 900+ 80AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 80AD BC 6D                        dw      QCOMP
 902+ 80AF 46 6A E0 6D                  dw      TWO, QPAIRS
 903+ 80B3 17 6E F3 63                  dw      COMPILE, ZBRANCH
 904+ 80B7 2B 80                        dw      BACK
 905+ 80B9 11 68                        dw      EXIT
 906+ 80BB
 907+ 80BB              //  ______________________________________________________________________
 908+ 80BB              //
 909+ 80BB              // end          ( a 1 -- ) \ compile-time
 910+ 80BB                              Colon_Def END, "END", is_immediate
 910+ 80BB             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 910+ 80BB             >
 910+ 80BB             >Dict_Ptr        defl    $
 910+ 80BB             >
 910+ 80BB             >//              ______________________________________________________________________
 910+ 80BB             >//              Heap part
 910+ 80BB             >
 910+ 80BB             >
 910+ 80BB             >                org     (Heap_Ptr & $1FFF) + $E000
 910+ ECD2             >
 910+ ECD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ ECD2             >Latest_Definition defl  Heap_Ptr
 910+ ECD2             >
 910+ ECD2             >                // dummy db directives used to calculate length of namec
 910+ ECD2 45 4E 44    >                db      "END"
 910+ ECD5             >len_NFA         defl    $ - temp_NFA
 910+ ECD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ ECD2             >
 910+ ECD2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ ECD3 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 910+ ECD6             >                org     $-1                 // alter last byte of Name just above to set
 910+ ECD5 C4          >                db      {b $} | END_BIT     // msb as name end
 910+ ECD6             >
 910+ ECD6 C8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 910+ ECD8             >Prev_Ptr        defl    Heap_Ptr
 910+ ECD8             >
 910+ ECD8             >mirror_Ptr      defl    $
 910+ ECD8             >
 910+ ECD8 BD 80       >                dw      Dict_Ptr + 2        // xt
 910+ ECDA             >Heap_Ptr        defl    $ - $E000           // save current HP
 910+ ECDA             >
 910+ ECDA             >Current_HP      defl  $ - $E000             // used to set HP once!
 910+ ECDA             >
 910+ ECDA             >//              ______________________________________________________________________
 910+ ECDA             >//              Dictionary part
 910+ ECDA             >
 910+ ECDA             >                org     Dict_Ptr
 910+ 80BB             >
 910+ 80BB D8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 910+ 80BD             >
 910+ 80BD             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 80BD CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 80C0             >
 910+ 80C0             >
 910+ 80C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 80C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 80C0             >
 910+ 80C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 80C0 AA 80                        dw      UNTIL
 912+ 80C2 11 68                        dw      EXIT
 913+ 80C4
 914+ 80C4              //  ______________________________________________________________________
 915+ 80C4              //
 916+ 80C4              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 917+ 80C4                              Colon_Def WHILE, "WHILE", is_immediate
 917+ 80C4             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 917+ 80C4             >
 917+ 80C4             >Dict_Ptr        defl    $
 917+ 80C4             >
 917+ 80C4             >//              ______________________________________________________________________
 917+ 80C4             >//              Heap part
 917+ 80C4             >
 917+ 80C4             >
 917+ 80C4             >                org     (Heap_Ptr & $1FFF) + $E000
 917+ ECDA             >
 917+ ECDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ ECDA             >Latest_Definition defl  Heap_Ptr
 917+ ECDA             >
 917+ ECDA             >                // dummy db directives used to calculate length of namec
 917+ ECDA 57 48 49 4C >                db      "WHILE"
 917+ ECDE 45          >
 917+ ECDF             >len_NFA         defl    $ - temp_NFA
 917+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ ECDA             >
 917+ ECDA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ ECDB 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 917+ ECDF 45          >
 917+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 917+ ECDF C5          >                db      {b $} | END_BIT     // msb as name end
 917+ ECE0             >
 917+ ECE0 D2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 917+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 917+ ECE2             >
 917+ ECE2             >mirror_Ptr      defl    $
 917+ ECE2             >
 917+ ECE2 C6 80       >                dw      Dict_Ptr + 2        // xt
 917+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 917+ ECE4             >
 917+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 917+ ECE4             >
 917+ ECE4             >//              ______________________________________________________________________
 917+ ECE4             >//              Dictionary part
 917+ ECE4             >
 917+ ECE4             >                org     Dict_Ptr
 917+ 80C4             >
 917+ 80C4 E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 917+ 80C6             >
 917+ 80C6             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 80C6 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 80C9             >
 917+ 80C9             >
 917+ 80C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 80C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 80C9             >
 917+ 80C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 80C9 38 80                        dw      IF
 919+ 80CB              //              dw      TWO_PLUS // ( that is 4 )
 920+ 80CB 17 69                        dw      TWO_SWAP
 921+ 80CD 11 68                        dw      EXIT
 922+ 80CF
 923+ 80CF              //  ______________________________________________________________________
 924+ 80CF              //
 925+ 80CF              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 926+ 80CF                              Colon_Def REPEAT, "REPEAT", is_immediate
 926+ 80CF             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 926+ 80CF             >
 926+ 80CF             >Dict_Ptr        defl    $
 926+ 80CF             >
 926+ 80CF             >//              ______________________________________________________________________
 926+ 80CF             >//              Heap part
 926+ 80CF             >
 926+ 80CF             >
 926+ 80CF             >                org     (Heap_Ptr & $1FFF) + $E000
 926+ ECE4             >
 926+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ ECE4             >Latest_Definition defl  Heap_Ptr
 926+ ECE4             >
 926+ ECE4             >                // dummy db directives used to calculate length of namec
 926+ ECE4 52 45 50 45 >                db      "REPEAT"
 926+ ECE8 41 54       >
 926+ ECEA             >len_NFA         defl    $ - temp_NFA
 926+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ ECE4             >
 926+ ECE4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ ECE5 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 926+ ECE9 41 54       >
 926+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
 926+ ECEA D4          >                db      {b $} | END_BIT     // msb as name end
 926+ ECEB             >
 926+ ECEB DA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 926+ ECED             >Prev_Ptr        defl    Heap_Ptr
 926+ ECED             >
 926+ ECED             >mirror_Ptr      defl    $
 926+ ECED             >
 926+ ECED D1 80       >                dw      Dict_Ptr + 2        // xt
 926+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 926+ ECEF             >
 926+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 926+ ECEF             >
 926+ ECEF             >//              ______________________________________________________________________
 926+ ECEF             >//              Dictionary part
 926+ ECEF             >
 926+ ECEF             >                org     Dict_Ptr
 926+ 80CF             >
 926+ 80CF ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 926+ 80D1             >
 926+ 80D1             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 80D1 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 80D4             >
 926+ 80D4             >
 926+ 80D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 80D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 80D4             >
 926+ 80D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 80D4 97 80                        dw      AGAIN
 928+ 80D6              //              dw      TWO_MINUS
 929+ 80D6 4B 80                        dw      THEN
 930+ 80D8 11 68                        dw      EXIT
 931+ 80DA
 932+ 80DA              //  ______________________________________________________________________
 933+ 80DA              //
 934+ 80DA              // ?do-
 935+ 80DA              // special version of "BACK" used by ?DO and LOOP
 936+ 80DA                              Colon_Def C_DO_BACK, "?DO-", is_normal
 936+ 80DA             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 936+ 80DA             >
 936+ 80DA             >Dict_Ptr        defl    $
 936+ 80DA             >
 936+ 80DA             >//              ______________________________________________________________________
 936+ 80DA             >//              Heap part
 936+ 80DA             >
 936+ 80DA             >
 936+ 80DA             >                org     (Heap_Ptr & $1FFF) + $E000
 936+ ECEF             >
 936+ ECEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 936+ ECEF             >Latest_Definition defl  Heap_Ptr
 936+ ECEF             >
 936+ ECEF             >                // dummy db directives used to calculate length of namec
 936+ ECEF 3F 44 4F 2D >                db      "?DO-"
 936+ ECF3             >len_NFA         defl    $ - temp_NFA
 936+ ECF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 936+ ECEF             >
 936+ ECEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 936+ ECF0 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 936+ ECF4             >                org     $-1                 // alter last byte of Name just above to set
 936+ ECF3 AD          >                db      {b $} | END_BIT     // msb as name end
 936+ ECF4             >
 936+ ECF4 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 936+ ECF6             >Prev_Ptr        defl    Heap_Ptr
 936+ ECF6             >
 936+ ECF6             >mirror_Ptr      defl    $
 936+ ECF6             >
 936+ ECF6 DC 80       >                dw      Dict_Ptr + 2        // xt
 936+ ECF8             >Heap_Ptr        defl    $ - $E000           // save current HP
 936+ ECF8             >
 936+ ECF8             >Current_HP      defl  $ - $E000             // used to set HP once!
 936+ ECF8             >
 936+ ECF8             >//              ______________________________________________________________________
 936+ ECF8             >//              Dictionary part
 936+ ECF8             >
 936+ ECF8             >                org     Dict_Ptr
 936+ 80DA             >
 936+ 80DA F6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 936+ 80DC             >
 936+ 80DC             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 936+ 80DC CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 936+ 80DF             >
 936+ 80DF             >
 936+ 80DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 936+ 80DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 936+ 80DF             >
 936+ 80DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 937+ 80DF 2B 80                        dw      BACK
 938+ 80E1              CDoBack_Begin:
 939+ 80E1 F8 67 1B 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 939+ 80E5 46 69 9C 6B
 940+ 80E9 F3 63                        dw      ZBRANCH
 941+ 80EB 0A 00                        dw      CDoBack_While - $
 942+ 80ED 85 68 4B 80                  dw          TWO_PLUS, THEN
 943+ 80F1 EF 63                        dw      BRANCH
 944+ 80F3 EE FF                        dw      CDoBack_Begin - $
 945+ 80F5              CDoBack_While:
 946+ 80F5 EF 6D 1B 6B                  dw      QCSP, CSP, STORE
 946+ 80F9 50 69
 947+ 80FB 11 68                        dw      EXIT
 948+ 80FD
 949+ 80FD              //  ______________________________________________________________________
 950+ 80FD              //
 951+ 80FD              // do
 952+ 80FD              // DO  ... LOOP
 953+ 80FD              // DO  ... n +LOOP
 954+ 80FD              // ?DO ... LOOP
 955+ 80FD              // ?DO ... n +LOOP
 956+ 80FD                              Colon_Def DO, "DO", is_immediate
 956+ 80FD             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 956+ 80FD             >
 956+ 80FD             >Dict_Ptr        defl    $
 956+ 80FD             >
 956+ 80FD             >//              ______________________________________________________________________
 956+ 80FD             >//              Heap part
 956+ 80FD             >
 956+ 80FD             >
 956+ 80FD             >                org     (Heap_Ptr & $1FFF) + $E000
 956+ ECF8             >
 956+ ECF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ ECF8             >Latest_Definition defl  Heap_Ptr
 956+ ECF8             >
 956+ ECF8             >                // dummy db directives used to calculate length of namec
 956+ ECF8 44 4F       >                db      "DO"
 956+ ECFA             >len_NFA         defl    $ - temp_NFA
 956+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ ECF8             >
 956+ ECF8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ ECF9 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 956+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 956+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 956+ ECFB             >
 956+ ECFB EF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 956+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 956+ ECFD             >
 956+ ECFD             >mirror_Ptr      defl    $
 956+ ECFD             >
 956+ ECFD FF 80       >                dw      Dict_Ptr + 2        // xt
 956+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 956+ ECFF             >
 956+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 956+ ECFF             >
 956+ ECFF             >//              ______________________________________________________________________
 956+ ECFF             >//              Dictionary part
 956+ ECFF             >
 956+ ECFF             >                org     Dict_Ptr
 956+ 80FD             >
 956+ 80FD FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 956+ 80FF             >
 956+ 80FF             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 80FF CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 8102             >
 956+ 8102             >
 956+ 8102             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 8102             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 8102             >
 956+ 8102             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 8102 17 6E 2C 64                  dw      COMPILE, C_DO
 958+ 8106 1B 6B 46 69                  dw      CSP, FETCH, STORE_CSP
 958+ 810A 9A 6D
 959+ 810C 5D 6B 4D 6A                  dw      HERE, THREE
 960+ 8110 11 68                        dw      EXIT
 961+ 8112
 962+ 8112              //  ______________________________________________________________________
 963+ 8112              //
 964+ 8112              // loop
 965+ 8112                              Colon_Def LOOP, "LOOP", is_immediate
 965+ 8112             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 965+ 8112             >
 965+ 8112             >Dict_Ptr        defl    $
 965+ 8112             >
 965+ 8112             >//              ______________________________________________________________________
 965+ 8112             >//              Heap part
 965+ 8112             >
 965+ 8112             >
 965+ 8112             >                org     (Heap_Ptr & $1FFF) + $E000
 965+ ECFF             >
 965+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 965+ ECFF             >Latest_Definition defl  Heap_Ptr
 965+ ECFF             >
 965+ ECFF             >                // dummy db directives used to calculate length of namec
 965+ ECFF 4C 4F 4F 50 >                db      "LOOP"
 965+ ED03             >len_NFA         defl    $ - temp_NFA
 965+ ED03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 965+ ECFF             >
 965+ ECFF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 965+ ED00 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 965+ ED04             >                org     $-1                 // alter last byte of Name just above to set
 965+ ED03 D0          >                db      {b $} | END_BIT     // msb as name end
 965+ ED04             >
 965+ ED04 F8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 965+ ED06             >Prev_Ptr        defl    Heap_Ptr
 965+ ED06             >
 965+ ED06             >mirror_Ptr      defl    $
 965+ ED06             >
 965+ ED06 14 81       >                dw      Dict_Ptr + 2        // xt
 965+ ED08             >Heap_Ptr        defl    $ - $E000           // save current HP
 965+ ED08             >
 965+ ED08             >Current_HP      defl  $ - $E000             // used to set HP once!
 965+ ED08             >
 965+ ED08             >//              ______________________________________________________________________
 965+ ED08             >//              Dictionary part
 965+ ED08             >
 965+ ED08             >                org     Dict_Ptr
 965+ 8112             >
 965+ 8112 06 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 965+ 8114             >
 965+ 8114             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 965+ 8114 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 965+ 8117             >
 965+ 8117             >
 965+ 8117             >                endif           ; ok        // for other definitions it "points" the correct handler
 965+ 8117             >                // Use of "; ok" to suppress "warning[fwdref]"
 965+ 8117             >
 965+ 8117             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 966+ 8117 4D 6A E0 6D                  dw      THREE, QPAIRS
 967+ 811B 17 6E E7 63                  dw      COMPILE, C_LOOP
 968+ 811F DC 80                        dw      C_DO_BACK
 969+ 8121 11 68                        dw      EXIT
 970+ 8123
 971+ 8123              //  ______________________________________________________________________
 972+ 8123              //
 973+ 8123              // +loop
 974+ 8123                              Colon_Def PLOOP, "+LOOP", is_immediate
 974+ 8123             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 974+ 8123             >
 974+ 8123             >Dict_Ptr        defl    $
 974+ 8123             >
 974+ 8123             >//              ______________________________________________________________________
 974+ 8123             >//              Heap part
 974+ 8123             >
 974+ 8123             >
 974+ 8123             >                org     (Heap_Ptr & $1FFF) + $E000
 974+ ED08             >
 974+ ED08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ ED08             >Latest_Definition defl  Heap_Ptr
 974+ ED08             >
 974+ ED08             >                // dummy db directives used to calculate length of namec
 974+ ED08 2B 4C 4F 4F >                db      "+LOOP"
 974+ ED0C 50          >
 974+ ED0D             >len_NFA         defl    $ - temp_NFA
 974+ ED0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ ED08             >
 974+ ED08 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ ED09 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 974+ ED0D 50          >
 974+ ED0E             >                org     $-1                 // alter last byte of Name just above to set
 974+ ED0D D0          >                db      {b $} | END_BIT     // msb as name end
 974+ ED0E             >
 974+ ED0E FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 974+ ED10             >Prev_Ptr        defl    Heap_Ptr
 974+ ED10             >
 974+ ED10             >mirror_Ptr      defl    $
 974+ ED10             >
 974+ ED10 25 81       >                dw      Dict_Ptr + 2        // xt
 974+ ED12             >Heap_Ptr        defl    $ - $E000           // save current HP
 974+ ED12             >
 974+ ED12             >Current_HP      defl  $ - $E000             // used to set HP once!
 974+ ED12             >
 974+ ED12             >//              ______________________________________________________________________
 974+ ED12             >//              Dictionary part
 974+ ED12             >
 974+ ED12             >                org     Dict_Ptr
 974+ 8123             >
 974+ 8123 10 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 974+ 8125             >
 974+ 8125             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 8125 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 8128             >
 974+ 8128             >
 974+ 8128             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 8128             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 8128             >
 974+ 8128             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 8128 4D 6A E0 6D                  dw      THREE, QPAIRS
 976+ 812C 17 6E B1 63                  dw      COMPILE, C_PLOOP
 977+ 8130 DC 80                        dw      C_DO_BACK
 978+ 8132 11 68                        dw      EXIT
 979+ 8134
 980+ 8134              //  ______________________________________________________________________
 981+ 8134              //
 982+ 8134              // ?do
 983+ 8134                              Colon_Def QDO, "?DO", is_immediate
 983+ 8134             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 983+ 8134             >
 983+ 8134             >Dict_Ptr        defl    $
 983+ 8134             >
 983+ 8134             >//              ______________________________________________________________________
 983+ 8134             >//              Heap part
 983+ 8134             >
 983+ 8134             >
 983+ 8134             >                org     (Heap_Ptr & $1FFF) + $E000
 983+ ED12             >
 983+ ED12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 983+ ED12             >Latest_Definition defl  Heap_Ptr
 983+ ED12             >
 983+ ED12             >                // dummy db directives used to calculate length of namec
 983+ ED12 3F 44 4F    >                db      "?DO"
 983+ ED15             >len_NFA         defl    $ - temp_NFA
 983+ ED15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 983+ ED12             >
 983+ ED12 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 983+ ED13 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 983+ ED16             >                org     $-1                 // alter last byte of Name just above to set
 983+ ED15 CF          >                db      {b $} | END_BIT     // msb as name end
 983+ ED16             >
 983+ ED16 08 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 983+ ED18             >Prev_Ptr        defl    Heap_Ptr
 983+ ED18             >
 983+ ED18             >mirror_Ptr      defl    $
 983+ ED18             >
 983+ ED18 36 81       >                dw      Dict_Ptr + 2        // xt
 983+ ED1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 983+ ED1A             >
 983+ ED1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 983+ ED1A             >
 983+ ED1A             >//              ______________________________________________________________________
 983+ ED1A             >//              Dictionary part
 983+ ED1A             >
 983+ ED1A             >                org     Dict_Ptr
 983+ 8134             >
 983+ 8134 18 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 983+ 8136             >
 983+ 8136             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 983+ 8136 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 983+ 8139             >
 983+ 8139             >
 983+ 8139             >                endif           ; ok        // for other definitions it "points" the correct handler
 983+ 8139             >                // Use of "; ok" to suppress "warning[fwdref]"
 983+ 8139             >
 983+ 8139             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 984+ 8139 17 6E 06 64                  dw      COMPILE, C_Q_DO
 985+ 813D 1B 6B 46 69                  dw      CSP, FETCH, STORE_CSP
 985+ 8141 9A 6D
 986+ 8143 5D 6B 38 6A                  dw      HERE, ZERO, COMMA, ZERO
 986+ 8147 73 6B 38 6A
 987+ 814B 5D 6B 4D 6A                  dw      HERE, THREE
 988+ 814F 11 68                        dw      EXIT
 989+ 8151
 990+ 8151              //  ______________________________________________________________________
 991+ 8151              //
 992+ 8151              // \
 993+ 8151                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 993+ 8151             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 993+ 8151             >
 993+ 8151             >Dict_Ptr        defl    $
 993+ 8151             >
 993+ 8151             >//              ______________________________________________________________________
 993+ 8151             >//              Heap part
 993+ 8151             >
 993+ 8151             >
 993+ 8151             >                org     (Heap_Ptr & $1FFF) + $E000
 993+ ED1A             >
 993+ ED1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ ED1A             >Latest_Definition defl  Heap_Ptr
 993+ ED1A             >
 993+ ED1A             >                // dummy db directives used to calculate length of namec
 993+ ED1A 5C          >                db      "\\"
 993+ ED1B             >len_NFA         defl    $ - temp_NFA
 993+ ED1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ ED1A             >
 993+ ED1A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ ED1B 5C          >                db      "\\"               // name string in 7-bit ascii, but
 993+ ED1C             >                org     $-1                 // alter last byte of Name just above to set
 993+ ED1B DC          >                db      {b $} | END_BIT     // msb as name end
 993+ ED1C             >
 993+ ED1C 12 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 993+ ED1E             >Prev_Ptr        defl    Heap_Ptr
 993+ ED1E             >
 993+ ED1E             >mirror_Ptr      defl    $
 993+ ED1E             >
 993+ ED1E 53 81       >                dw      Dict_Ptr + 2        // xt
 993+ ED20             >Heap_Ptr        defl    $ - $E000           // save current HP
 993+ ED20             >
 993+ ED20             >Current_HP      defl  $ - $E000             // used to set HP once!
 993+ ED20             >
 993+ ED20             >//              ______________________________________________________________________
 993+ ED20             >//              Dictionary part
 993+ ED20             >
 993+ ED20             >                org     Dict_Ptr
 993+ 8151             >
 993+ 8151 1E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 993+ 8153             >
 993+ 8153             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 8153 CD E3 69    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 8156             >
 993+ 8156             >
 993+ 8156             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 8156             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 8156             >
 993+ 8156             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 8156 D9 6A 46 69                  dw      BLK, FETCH
 995+ 815A 7E 68                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
 996+ 815C F3 63                        dw      ZBRANCH
 997+ 815E 34 00                        dw      Backslash_Else_1 - $
 998+ 8160
 999+ 8160 D9 6A 46 69                  dw          BLK, FETCH
1000+ 8164 F3 63                        dw          ZBRANCH
1001+ 8166 1A 00                        dw          Backslash_Else_2 - $
1002+ 8168
1003+ 8168 DF 6A 46 69                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1003+ 816C 62 6A 7E 68
1003+ 8170 D1 67 62 6A
1004+ 8174 D5 68 9C 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1004+ 8178 DF 6A 2E 69
1005+ 817C EF 63                        dw          BRANCH
1006+ 817E 10 00                        dw          Backslash_Endif_2 - $
1007+ 8180              Backslash_Else_2:
1008+ 8180 38 6A 9D 6A                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1008+ 8184 46 69 DF 6A
1008+ 8188 46 69 5E 68
1008+ 818C 64 69
1009+ 818E              Backslash_Endif_2:
1010+ 818E EF 63                        dw      BRANCH
1011+ 8190 0A 00                        dw      Backslash_Endif_1 - $
1012+ 8192              Backslash_Else_1:
1013+ 8192 69 6A 91 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1013+ 8196 DF 6A 50 69
1014+ 819A              Backslash_Endif_1:
1015+ 819A 11 68                        dw      EXIT
1016+ 819C
1017+ 819C              Fence_Word:
1018+ 819C              //  ______________________________________________________________________
1019+ 819C              //
1020+ 819C
1021+ 819C 00           Here_Dictionary db      0
1022+ 819D
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
 153  819D
 154  819D              // now we save the compiled file so we can either run it or debug it
 155  819D              //              SAVENEX OPEN "output/forth17.nex", ORIGIN, S0_system
 156  819D              //              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 157  819D              //              SAVENEX CFG  7, 0
 158  819D              //              SAVENEX BANK 5,2,0,1,16
 159  819D              //              SAVENEX BANK 5,2,0,1,3,4,6,7, 16,17,18,19
 160  819D              //              SAVENEX AUTO
 161  819D              //              SAVENEX CLOSE
 162  819D
 163  819D              //              PAGE 7 ;set 7 page to current slot
 164  819D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 165  819D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 166  819D
 167  819D              //              SAVETAP "output/F16d.tap", CODE, "forth18d", ORIGIN, 9999
 168  819D              //              SAVETAP "output/F16e.tap", CODE, "forth18e", $E000, $2000
 169  819D
 170  819D                              SAVEBIN "output/forth18e.bin", ORIGIN, 9999
 171  819D                              SAVEBIN "output/ram8.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 172  819D
 173  819D                              // To load on ZX Spectrum Next you have to type
 174  819D                              //      LOAD "ram7.bin" BANK 16
 175  819D                              //      LOAD "forth18e.bin" CODE
 176  819D
 177  819D                              END
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
