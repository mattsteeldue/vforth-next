# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20230910
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  70  0000 ~            Heap_offset     defl    $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366
 103+ 6366              Behave          macro   xp
 104+ 6366 ~            temp_PTR        defl    $                   // save this org
 105+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 106+ 6366 ~                            dw      xp
 107+ 6366 ~                            org     temp_PTR
 108+ 6366                              endm
 109+ 6366
 110+ 6366              //  ______________________________________________________________________
 111+ 6366              //
 112+ 6366              //  Create a new "low-level" definition
 113+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 114+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 115+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 116+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 117+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 118+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 119+ 6366              //  This macro acts much like the standard Forth definition CREATE
 120+ 6366
 121+ 6366              New_Def         macro   label, namec, runcode, bits
 122+ 6366 ~
 123+ 6366 ~            Dict_Ptr        defl    $
 124+ 6366 ~
 125+ 6366 ~            //              ______________________________________________________________________
 126+ 6366 ~            //              Heap part
 127+ 6366 ~
 128+ 6366 ~
 129+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 130+ 6366 ~
 131+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6366 ~            Latest_Definition defl  Heap_Ptr
 133+ 6366 ~
 134+ 6366 ~                            // dummy db directives used to calculate length of namec
 135+ 6366 ~                            db      namec
 136+ 6366 ~            len_NFA         defl    $ - temp_NFA
 137+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 6366 ~
 139+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 141+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 142+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 143+ 6366 ~
 144+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 145+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 146+ 6366 ~
 147+ 6366 ~            mirror_Ptr      defl    $
 148+ 6366 ~
 149+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 150+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 151+ 6366 ~
 152+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 153+ 6366 ~
 154+ 6366 ~            //              ______________________________________________________________________
 155+ 6366 ~            //              Dictionary part
 156+ 6366 ~
 157+ 6366 ~                            org     Dict_Ptr
 158+ 6366 ~
 159+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6366 ~
 161+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 163+ 6366 ~
 164+ 6366 ~
 165+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6366 ~
 168+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6366                              endm
 170+ 6366
 171+ 6366              //  ______________________________________________________________________
 172+ 6366              //
 173+ 6366              // Create a "constant"
 174+ 6366              // The constant value is compiled in first PFA cell
 175+ 6366              Constant_Def    macro   label, namec, constant_value
 176+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 177+ 6366 ~                            dw      constant_value
 178+ 6366                              endm
 179+ 6366
 180+ 6366              //  ______________________________________________________________________
 181+ 6366              //
 182+ 6366              // Create a "variable"
 183+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 184+ 6366              // this allow creation of "variables" which content is  of any length
 185+ 6366              Variable_Def    macro   label, namec, initial_value
 186+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 187+ 6366 ~                            dw      initial_value
 188+ 6366                              endm
 189+ 6366
 190+ 6366              //  ______________________________________________________________________
 191+ 6366              //
 192+ 6366              // Create a "user"
 193+ 6366              // It uses a single byte as offset to calculate the address of the variable
 194+ 6366              User_Def        macro   label, namec, offset_value
 195+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 196+ 6366 ~                            db      offset_value
 197+ 6366                              endm
 198+ 6366
 199+ 6366              //  ______________________________________________________________________
 200+ 6366              //
 201+ 6366              // Create a "colon-definition"
 202+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 203+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 204+ 6366              Colon_Def       macro   label, namec, bits
 205+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 206+ 6366                              endm
 207+ 6366
 208+ 6366              //  ______________________________________________________________________
 209+ 6366              //
 210+ 6366              // Create a "heap-string"
 211+ 6366              Start_Heap      macro
 212+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 213+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 214+ 6366 ~
 215+ 6366                              endm
 216+ 6366
 217+ 6366              End_Heap        macro
 218+ 6366 ~            Heap_Ptr        defl    $ - $E000
 219+ 6366 ~                            org     temp_ORG
 220+ 6366 ~
 221+ 6366                              endm
 222+ 6366
 223+ 6366
 224+ 6366              //  ______________________________________________________________________
 225+ 6366              //
 226+ 6366
 227+ 6366
 228+ 6366
 229+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 230+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 231+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 232+ 6366              USER_system:    equ     $D188               // User variables zone.
 233+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 234+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 235+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 28 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 28 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 1B 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 67 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 67 81        DP_origin       dw      Fence_Word
  38+ 6386 53 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 21 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 78                           db      120
  65+ E003 20 20 20 20                  db      "    v-Forth 1.7 - NextZXOS version ", $0D      // 36
  65+ E007 76 2D 46 6F
  65+ E00B 72 74 68 20
  65+ E00F 31 2E 37 20
  65+ E013 2D 20 4E 65
  65+ E017 78 74 5A 58
  65+ E01B 4F 53 20 76
  65+ E01F 65 72 73 69
  65+ E023 6F 6E 20 0D
  66+ E027 20 20 20 20                  db      "    Heap Vocabulary - build 2023-08-09 ", $0D  // 40
  66+ E02B 48 65 61 70
  66+ E02F 20 56 6F 63
  66+ E033 61 62 75 6C
  66+ E037 61 72 79 20
  66+ E03B 2D 20 62 75
  66+ E03F 69 6C 64 20
  66+ E043 32 30 32 33
  66+ E047 2D 30 38 2D
  66+ E04B 30 39 20 0D
  67+ E04F 20 20 20 20                  db      "    MIT License ", 127                         // 17
  67+ E053 4D 49 54 20
  67+ E057 4C 69 63 65
  67+ E05B 6E 73 65 20
  67+ E05F 7F
  68+ E060 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D               // 27
  68+ E064 30 2D 32 30
  68+ E068 32 33 20 4D
  68+ E06C 61 74 74 65
  68+ E070 6F 20 56 69
  68+ E074 74 74 75 72
  68+ E078 69 20 0D
  69+ E07B 20                           db      " "
  70+ E07C                              End_Heap
  70+ E07C             >Heap_Ptr        defl    $ - $E000
  70+ E07C             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E07C             >
 124+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E07C             >Latest_Definition defl  Heap_Ptr
 124+ E07C             >
 124+ E07C             >                // dummy db directives used to calculate length of namec
 124+ E07C 4C 49 54    >                db      "LIT"
 124+ E07F             >len_NFA         defl    $ - temp_NFA
 124+ E07F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E07C             >
 124+ E07C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E07D 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E080             >                org     $-1                 // alter last byte of Name just above to set
 124+ E07F D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E080             >
 124+ E080 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E082             >Prev_Ptr        defl    Heap_Ptr
 124+ E082             >
 124+ E082             >mirror_Ptr      defl    $
 124+ E082             >
 124+ E082 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E084             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E084             >
 124+ E084             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E084             >
 124+ E084             >//              ______________________________________________________________________
 124+ E084             >//              Dictionary part
 124+ E084             >
 124+ E084             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 82 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E084             >
 140+ E084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E084             >Latest_Definition defl  Heap_Ptr
 140+ E084             >
 140+ E084             >                // dummy db directives used to calculate length of namec
 140+ E084 45 58 45 43 >                db      "EXECUTE"
 140+ E088 55 54 45    >
 140+ E08B             >len_NFA         defl    $ - temp_NFA
 140+ E08B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E084             >
 140+ E084 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E085 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E089 55 54 45    >
 140+ E08C             >                org     $-1                 // alter last byte of Name just above to set
 140+ E08B C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E08C             >
 140+ E08C 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E08E             >Prev_Ptr        defl    Heap_Ptr
 140+ E08E             >
 140+ E08E             >mirror_Ptr      defl    $
 140+ E08E             >
 140+ E08E AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E090             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E090             >
 140+ E090             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E090             >
 140+ E090             >//              ______________________________________________________________________
 140+ E090             >//              Dictionary part
 140+ E090             >
 140+ E090             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 8E 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E090             >
 160+ E090             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E090             >Latest_Definition defl  Heap_Ptr
 160+ E090             >
 160+ E090             >                // dummy db directives used to calculate length of namec
 160+ E090 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E094 4F 50 29    >
 160+ E097             >len_NFA         defl    $ - temp_NFA
 160+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E090             >
 160+ E090 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E091 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E095 4F 50 29    >
 160+ E098             >                org     $-1                 // alter last byte of Name just above to set
 160+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E098             >
 160+ E098 84 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E09A             >Prev_Ptr        defl    Heap_Ptr
 160+ E09A             >
 160+ E09A             >mirror_Ptr      defl    $
 160+ E09A             >
 160+ E09A B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E09C             >
 160+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E09C             >
 160+ E09C             >//              ______________________________________________________________________
 160+ E09C             >//              Dictionary part
 160+ E09C             >
 160+ E09C             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 E1                           pop     hl                  // get increment
 164+ 63B2 EB                           ex      de, hl
 165+ 63B3                              // *** ldhlrp
 166+ 63B3 C5                           push    bc                  // Save IP
 167+ 63B4 42                           ld      b, d                // bc is increment
 168+ 63B5 4B                           ld      c, e
 169+ 63B6 E5                           push    hl
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 04                        jr      c, Loop_Endif
 196+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 63D2 C1                               pop     bc                  // Retrieve IP
 198+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 63D5              Loop_Endif:
 200+ 63D5 C1                           pop     bc                  // discard original RP
 201+ 63D6 EB                           ex      de, hl
 202+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 63D8 EB                           ex      de, hl
 205+ 63D9 C1                           pop     bc                  // Retrieve IP
 206+ 63DA 03                           inc     bc                  // skip branch-style offset
 207+ 63DB 03                           inc     bc
 208+ 63DC                              next
 208+ 63DC DD E9       >                jp      (ix)
 209+ 63DE
 210+ 63DE              //  ______________________________________________________________________
 211+ 63DE              //
 212+ 63DE              // (loop)       n --
 213+ 63DE              // same as (LOOP) but index is incremented by 1
 214+ 63DE              // compiled by LOOP.
 215+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 63DE             >
 215+ 63DE             >Dict_Ptr        defl    $
 215+ 63DE             >
 215+ 63DE             >//              ______________________________________________________________________
 215+ 63DE             >//              Heap part
 215+ 63DE             >
 215+ 63DE             >
 215+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E09C             >
 215+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E09C             >Latest_Definition defl  Heap_Ptr
 215+ E09C             >
 215+ E09C             >                // dummy db directives used to calculate length of namec
 215+ E09C 28 4C 4F 4F >                db      "(LOOP)"
 215+ E0A0 50 29       >
 215+ E0A2             >len_NFA         defl    $ - temp_NFA
 215+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E09C             >
 215+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E09D 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E0A1 50 29       >
 215+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 215+ E0A2 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E0A3             >
 215+ E0A3 90 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 215+ E0A5             >
 215+ E0A5             >mirror_Ptr      defl    $
 215+ E0A5             >
 215+ E0A5 E0 63       >                dw      Dict_Ptr + 2        // xt
 215+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E0A7             >
 215+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E0A7             >
 215+ E0A7             >//              ______________________________________________________________________
 215+ E0A7             >//              Dictionary part
 215+ E0A7             >
 215+ E0A7             >                org     Dict_Ptr
 215+ 63DE             >
 215+ 63DE A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 63E0             >
 215+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 63E0 ~           >
 215+ 63E0 ~           >
 215+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 63E0             >
 215+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 63E0 ED 8A 00 01                  push    1
 217+ 63E4 18 CB                        jr      Loop_Ptr
 218+ 63E6
 219+ 63E6              //  ______________________________________________________________________
 220+ 63E6              //
 221+ 63E6              // branch       --
 222+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 224+ 63E6
 225+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 63E6             >
 225+ 63E6             >Dict_Ptr        defl    $
 225+ 63E6             >
 225+ 63E6             >//              ______________________________________________________________________
 225+ 63E6             >//              Heap part
 225+ 63E6             >
 225+ 63E6             >
 225+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E0A7             >
 225+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E0A7             >Latest_Definition defl  Heap_Ptr
 225+ E0A7             >
 225+ E0A7             >                // dummy db directives used to calculate length of namec
 225+ E0A7 42 52 41 4E >                db      "BRANCH"
 225+ E0AB 43 48       >
 225+ E0AD             >len_NFA         defl    $ - temp_NFA
 225+ E0AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E0A7             >
 225+ E0A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E0A8 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0AC 43 48       >
 225+ E0AE             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0AD C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0AE             >
 225+ E0AE 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0B0             >Prev_Ptr        defl    Heap_Ptr
 225+ E0B0             >
 225+ E0B0             >mirror_Ptr      defl    $
 225+ E0B0             >
 225+ E0B0 E8 63       >                dw      Dict_Ptr + 2        // xt
 225+ E0B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0B2             >
 225+ E0B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0B2             >
 225+ E0B2             >//              ______________________________________________________________________
 225+ E0B2             >//              Dictionary part
 225+ E0B2             >
 225+ E0B2             >                org     Dict_Ptr
 225+ 63E6             >
 225+ 63E6 B0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 63E8             >
 225+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 63E8 ~           >
 225+ 63E8 ~           >
 225+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 63E8             >
 225+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 63E8              Branch_Ptr:
 227+ 63E8 0A                           ld      a, (bc)
 228+ 63E9 6F                           ld      l, a
 229+ 63EA 03                           inc     bc
 230+ 63EB 0A                           ld      a, (bc)
 231+ 63EC 67                           ld      h, a
 232+ 63ED 0B                           dec     bc
 233+ 63EE 09                           add     hl, bc
 234+ 63EF 4D                           ld      c, l
 235+ 63F0 44                           ld      b, h
 236+ 63F1                              next
 236+ 63F1 DD E9       >                jp      (ix)
 237+ 63F3
 238+ 63F3
 239+ 63F3              //  ______________________________________________________________________
 240+ 63F3              //
 241+ 63F3              // 0branch      f --
 242+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 63F3              // compiled by IF, UNTIL and some other immediate words
 244+ 63F3
 245+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 63F3             >
 245+ 63F3             >Dict_Ptr        defl    $
 245+ 63F3             >
 245+ 63F3             >//              ______________________________________________________________________
 245+ 63F3             >//              Heap part
 245+ 63F3             >
 245+ 63F3             >
 245+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0B2             >
 245+ E0B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0B2             >Latest_Definition defl  Heap_Ptr
 245+ E0B2             >
 245+ E0B2             >                // dummy db directives used to calculate length of namec
 245+ E0B2 30 42 52 41 >                db      "0BRANCH"
 245+ E0B6 4E 43 48    >
 245+ E0B9             >len_NFA         defl    $ - temp_NFA
 245+ E0B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0B2             >
 245+ E0B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0B3 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0B7 4E 43 48    >
 245+ E0BA             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B9 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0BA             >
 245+ E0BA A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0BC             >Prev_Ptr        defl    Heap_Ptr
 245+ E0BC             >
 245+ E0BC             >mirror_Ptr      defl    $
 245+ E0BC             >
 245+ E0BC F5 63       >                dw      Dict_Ptr + 2        // xt
 245+ E0BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0BE             >
 245+ E0BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0BE             >
 245+ E0BE             >//              ______________________________________________________________________
 245+ E0BE             >//              Dictionary part
 245+ E0BE             >
 245+ E0BE             >                org     Dict_Ptr
 245+ 63F3             >
 245+ 63F3 BC 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 63F5             >
 245+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 63F5 ~           >
 245+ 63F5 ~           >
 245+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 63F5             >
 245+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 63F5              ZBranch_Ptr:
 247+ 63F5 E1                           pop     hl
 248+ 63F6 7D                           ld      a, l
 249+ 63F7 B4                           or      h
 250+ 63F8 28 EE                        jr      z, Branch_Ptr
 251+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 63FB 03                           inc     bc
 253+ 63FC                              next
 253+ 63FC DD E9       >                jp      (ix)
 254+ 63FE
 255+ 63FE              //  ______________________________________________________________________
 256+ 63FE              //
 257+ 63FE              // (leave)        --
 258+ 63FE              // compiled by LEAVE
 259+ 63FE              // this forces to exit from loop and jump past
 260+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FE             >
 260+ 63FE             >Dict_Ptr        defl    $
 260+ 63FE             >
 260+ 63FE             >//              ______________________________________________________________________
 260+ 63FE             >//              Heap part
 260+ 63FE             >
 260+ 63FE             >
 260+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0BE             >
 260+ E0BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0BE             >Latest_Definition defl  Heap_Ptr
 260+ E0BE             >
 260+ E0BE             >                // dummy db directives used to calculate length of namec
 260+ E0BE 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0C2 56 45 29    >
 260+ E0C5             >len_NFA         defl    $ - temp_NFA
 260+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0BE             >
 260+ E0BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0BF 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0C3 56 45 29    >
 260+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0C6             >
 260+ E0C6 B2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 260+ E0C8             >
 260+ E0C8             >mirror_Ptr      defl    $
 260+ E0C8             >
 260+ E0C8 00 64       >                dw      Dict_Ptr + 2        // xt
 260+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0CA             >
 260+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0CA             >
 260+ E0CA             >//              ______________________________________________________________________
 260+ E0CA             >//              Dictionary part
 260+ E0CA             >
 260+ E0CA             >                org     Dict_Ptr
 260+ 63FE             >
 260+ 63FE C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6400             >
 260+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6400 ~           >
 260+ 6400 ~           >
 260+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6400             >
 260+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6400 EB                           ex      de, hl
 262+ 6401                              // *** ldhlrp
 263+ 6401 3E 04                        ld      a, 4
 264+ 6403 ED 31                        add     hl, a
 265+ 6405                              // *** ldrphl
 266+ 6405 EB                           ex      de, hl
 267+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6408                              next
 268+ 6408 DD E9       >                jp      (ix)
 269+ 640A
 270+ 640A              //  ______________________________________________________________________
 271+ 640A              //
 272+ 640A              // (?do)        lim ind --
 273+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 640A              // used to skip the loop if lim == ind
 276+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 640A             >
 276+ 640A             >Dict_Ptr        defl    $
 276+ 640A             >
 276+ 640A             >//              ______________________________________________________________________
 276+ 640A             >//              Heap part
 276+ 640A             >
 276+ 640A             >
 276+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0CA             >
 276+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0CA             >Latest_Definition defl  Heap_Ptr
 276+ E0CA             >
 276+ E0CA             >                // dummy db directives used to calculate length of namec
 276+ E0CA 28 3F 44 4F >                db      "(?DO)"
 276+ E0CE 29          >
 276+ E0CF             >len_NFA         defl    $ - temp_NFA
 276+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0CA             >
 276+ E0CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0CB 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0CF 29          >
 276+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0CF A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0D0             >
 276+ E0D0 BE 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 276+ E0D2             >
 276+ E0D2             >mirror_Ptr      defl    $
 276+ E0D2             >
 276+ E0D2 0C 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0D4             >
 276+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0D4             >
 276+ E0D4             >//              ______________________________________________________________________
 276+ E0D4             >//              Dictionary part
 276+ E0D4             >
 276+ E0D4             >                org     Dict_Ptr
 276+ 640A             >
 276+ 640A D2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 640C             >
 276+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 640C ~           >
 276+ 640C ~           >
 276+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 640C             >
 276+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 640C D9                           exx
 278+ 640D D1                            pop     de                  // de has the index
 279+ 640E E1                            pop     hl                  // hl has the limit
 280+ 640F 44                            ld      b, h
 281+ 6410 4D                            ld      c, l
 282+ 6411 E5                            push    hl                  // put them back to stack for later
 283+ 6412 D5                            push    de
 284+ 6413 A7                            and     a                   // reset carry flag
 285+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 286+ 6416 D9                           exx
 287+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6419 E1                               pop     hl
 289+ 641A E1                               pop     hl
 290+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 641D              Do_Ptr:
 292+ 641D                              // *** ldhlrp                 // prepare RP
 293+ 641D                              // *** ex      de, hl
 294+ 641D                              // dec     de
 295+ 641D                              // dec     de
 296+ 641D                              // dec     de
 297+ 641D                              // dec     de
 298+ 641D ED 35 FC FF                  add     de, -4
 299+ 6421 D5                           push    de                  // pass it to h'l'
 300+ 6422                              // *** ex      de, hl
 301+ 6422                              // *** ldrphl
 302+ 6422 D9                           exx
 303+ 6423 E1                            pop     hl
 304+ 6424
 305+ 6424                               // store index as top RP
 306+ 6424 D1                            pop     de
 307+ 6425 73                            ld      (hl), e
 308+ 6426 23                            inc     hl
 309+ 6427 72                            ld      (hl), d
 310+ 6428 23                            inc     hl
 311+ 6429                               // stores lim as second from top RP
 312+ 6429 D1                            pop     de
 313+ 642A 73                            ld      (hl), e
 314+ 642B 23                            inc     hl
 315+ 642C 72                            ld      (hl), d
 316+ 642D D9                           exx
 317+ 642E                              // skip branch-style offseet
 318+ 642E 03                           inc     bc
 319+ 642F 03                           inc     bc
 320+ 6430                              next
 320+ 6430 DD E9       >                jp      (ix)
 321+ 6432
 322+ 6432              //  ______________________________________________________________________
 323+ 6432              //
 324+ 6432              // (do)        lim ind --
 325+ 6432              // compiled by DO to make a loop checking for lim == ind first
 326+ 6432              // this is a simpler version of (?DO)
 327+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 6432             >
 327+ 6432             >Dict_Ptr        defl    $
 327+ 6432             >
 327+ 6432             >//              ______________________________________________________________________
 327+ 6432             >//              Heap part
 327+ 6432             >
 327+ 6432             >
 327+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0D4             >
 327+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0D4             >Latest_Definition defl  Heap_Ptr
 327+ E0D4             >
 327+ E0D4             >                // dummy db directives used to calculate length of namec
 327+ E0D4 28 44 4F 29 >                db      "(DO)"
 327+ E0D8             >len_NFA         defl    $ - temp_NFA
 327+ E0D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0D4             >
 327+ E0D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0D5 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D9             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0D8 A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D9             >
 327+ E0D9 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0DB             >Prev_Ptr        defl    Heap_Ptr
 327+ E0DB             >
 327+ E0DB             >mirror_Ptr      defl    $
 327+ E0DB             >
 327+ E0DB 34 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0DD             >
 327+ E0DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0DD             >
 327+ E0DD             >//              ______________________________________________________________________
 327+ E0DD             >//              Dictionary part
 327+ E0DD             >
 327+ E0DD             >                org     Dict_Ptr
 327+ 6432             >
 327+ 6432 DB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 6434             >
 327+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 6434 ~           >
 327+ 6434 ~           >
 327+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 6434             >
 327+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 6434 0B                           dec     bc                  // prepare IP beforehand
 329+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 6436 18 E5                        jr      Do_Ptr
 331+ 6438
 332+ 6438              //  ______________________________________________________________________
 333+ 6438              //
 334+ 6438              // i            -- n
 335+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6438              // the current value of the index-loop
 337+ 6438                              New_Def I, "I", is_code, is_normal
 337+ 6438             >
 337+ 6438             >Dict_Ptr        defl    $
 337+ 6438             >
 337+ 6438             >//              ______________________________________________________________________
 337+ 6438             >//              Heap part
 337+ 6438             >
 337+ 6438             >
 337+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0DD             >
 337+ E0DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0DD             >Latest_Definition defl  Heap_Ptr
 337+ E0DD             >
 337+ E0DD             >                // dummy db directives used to calculate length of namec
 337+ E0DD 49          >                db      "I"
 337+ E0DE             >len_NFA         defl    $ - temp_NFA
 337+ E0DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0DD             >
 337+ E0DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0DE 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0DF             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0DE C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0DF             >
 337+ E0DF D4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0E1             >Prev_Ptr        defl    Heap_Ptr
 337+ E0E1             >
 337+ E0E1             >mirror_Ptr      defl    $
 337+ E0E1             >
 337+ E0E1 3A 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0E3             >
 337+ E0E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0E3             >
 337+ E0E3             >//              ______________________________________________________________________
 337+ E0E3             >//              Dictionary part
 337+ E0E3             >
 337+ E0E3             >                org     Dict_Ptr
 337+ 6438             >
 337+ 6438 E1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 643A             >
 337+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 643A ~           >
 337+ 643A ~           >
 337+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 643A             >
 337+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 643A              I_Ptr:
 339+ 643A 62                           ld      h, d
 340+ 643B 6B                           ld      l, e
 341+ 643C                              // *** ldhlrp
 342+ 643C              I_Ptr_prime:
 343+ 643C 7E                           ld      a, (hl)
 344+ 643D 23                           inc     hl
 345+ 643E 66                           ld      h, (hl)
 346+ 643F 6F                           ld      l, a
 347+ 6440 E5                           push    hl
 348+ 6441                              next
 348+ 6441 DD E9       >                jp      (ix)
 349+ 6443
 350+ 6443
 351+ 6443              //  ______________________________________________________________________
 352+ 6443              //
 353+ 6443              // i'            -- n
 354+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 6443              // the limit of the index-loop
 356+ 6443
 357+ 6443                              New_Def II, "I'", is_code, is_normal
 357+ 6443             >
 357+ 6443             >Dict_Ptr        defl    $
 357+ 6443             >
 357+ 6443             >//              ______________________________________________________________________
 357+ 6443             >//              Heap part
 357+ 6443             >
 357+ 6443             >
 357+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0E3             >
 357+ E0E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0E3             >Latest_Definition defl  Heap_Ptr
 357+ E0E3             >
 357+ E0E3             >                // dummy db directives used to calculate length of namec
 357+ E0E3 49 27       >                db      "I'"
 357+ E0E5             >len_NFA         defl    $ - temp_NFA
 357+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0E3             >
 357+ E0E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0E4 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0E5 A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0E6             >
 357+ E0E6 DD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 357+ E0E8             >
 357+ E0E8             >mirror_Ptr      defl    $
 357+ E0E8             >
 357+ E0E8 45 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0EA             >
 357+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0EA             >
 357+ E0EA             >//              ______________________________________________________________________
 357+ E0EA             >//              Dictionary part
 357+ E0EA             >
 357+ E0EA             >                org     Dict_Ptr
 357+ 6443             >
 357+ 6443 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 6445             >
 357+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 6445 ~           >
 357+ 6445 ~           >
 357+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6445             >
 357+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6445 62                           ld      h, d
 359+ 6446 6B                           ld      l, e
 360+ 6447                              // *** ldhlrp
 361+ 6447 23                           inc     hl
 362+ 6448 23                           inc     hl
 363+ 6449 18 F1                        jr      I_Ptr_prime
 364+ 644B
 365+ 644B
 366+ 644B              //  ______________________________________________________________________
 367+ 644B              //
 368+ 644B              // digit        c n -- u tf  |  ff
 369+ 644B              // convert a character c using base n
 370+ 644B              // returns a unsigned number and a true flag
 371+ 644B              // or just a false flag if the conversion fails
 372+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 644B             >
 372+ 644B             >Dict_Ptr        defl    $
 372+ 644B             >
 372+ 644B             >//              ______________________________________________________________________
 372+ 644B             >//              Heap part
 372+ 644B             >
 372+ 644B             >
 372+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0EA             >
 372+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0EA             >Latest_Definition defl  Heap_Ptr
 372+ E0EA             >
 372+ E0EA             >                // dummy db directives used to calculate length of namec
 372+ E0EA 44 49 47 49 >                db      "DIGIT"
 372+ E0EE 54          >
 372+ E0EF             >len_NFA         defl    $ - temp_NFA
 372+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0EA             >
 372+ E0EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0EB 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0EF 54          >
 372+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0EF D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0F0             >
 372+ E0F0 E3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 372+ E0F2             >
 372+ E0F2             >mirror_Ptr      defl    $
 372+ E0F2             >
 372+ E0F2 4D 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0F4             >
 372+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0F4             >
 372+ E0F4             >//              ______________________________________________________________________
 372+ E0F4             >//              Dictionary part
 372+ E0F4             >
 372+ E0F4             >                org     Dict_Ptr
 372+ 644B             >
 372+ 644B F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 644D             >
 372+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 644D ~           >
 372+ 644D ~           >
 372+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 644D             >
 372+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 644D D9                           exx
 374+ 644E E1                           pop     hl                  // l has the base
 375+ 644F D1                           pop     de                  // e has the digit
 376+ 6450 7B                           ld      a, e
 377+ 6451 FE 60                        cp      $60                 // check if lowercase
 378+ 6453 38 02                        jr      c, Digit_Uppercase
 379+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 6457              Digit_Uppercase:
 381+ 6457 D6 30                        sub     $30
 382+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 645B FE 0A                            cp      $0A
 384+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 645F D6 07                                sub     7                   // try hex and subtract 7
 386+ 6461 FE 0A                                cp      $0A
 387+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 6465
 389+ 6465              Digit_Decimal:
 390+ 6465                              // compare digit
 391+ 6465 BD                           cp      l                   // compare with base
 392+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6469 21 01 00                         ld      hl, 1
 395+ 646C D5                               push    de
 396+ 646D E5                               push    hl
 397+ 646E D9                               exx
 398+ 646F                                  next
 398+ 646F DD E9       >                jp      (ix)
 399+ 6471              Digit_Fail:
 400+ 6471 21 00 00                     ld      hl, 0
 401+ 6474 E5                           push    hl
 402+ 6475 D9                           exx
 403+ 6476                              next
 403+ 6476 DD E9       >                jp      (ix)
 404+ 6478
 405+ 6478              //  ______________________________________________________________________
 406+ 6478              //
 407+ 6478              //  parametric uppercase routine
 408+ 6478              //  depending on the following op-code the routine can be by-passed
 409+ 6478              //  changing the behaviour of some callers.
 410+ 6478              //  If it is "ret" then the system is Case-Sensitive
 411+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 412+ 6478              //  Only A register is touched.
 413+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 6479              Case_Upper:
 415+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 647B D8                           ret     c                   // no change if A < "a"
 417+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 647E D0                           ret     nc                  // no change if A > "z"
 419+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 6481 C9                           ret
 421+ 6482
 422+ 6482              //  ______________________________________________________________________
 423+ 6482              //
 424+ 6482              //  caseon      --
 425+ 6482              // set system case-sensitivity on
 426+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 6482             >
 427+ 6482             >Dict_Ptr        defl    $
 427+ 6482             >
 427+ 6482             >//              ______________________________________________________________________
 427+ 6482             >//              Heap part
 427+ 6482             >
 427+ 6482             >
 427+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0F4             >
 427+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0F4             >Latest_Definition defl  Heap_Ptr
 427+ E0F4             >
 427+ E0F4             >                // dummy db directives used to calculate length of namec
 427+ E0F4 43 41 53 45 >                db      "CASEON"
 427+ E0F8 4F 4E       >
 427+ E0FA             >len_NFA         defl    $ - temp_NFA
 427+ E0FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0F4             >
 427+ E0F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0F5 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0F9 4F 4E       >
 427+ E0FB             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0FA CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0FB             >
 427+ E0FB EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0FD             >Prev_Ptr        defl    Heap_Ptr
 427+ E0FD             >
 427+ E0FD             >mirror_Ptr      defl    $
 427+ E0FD             >
 427+ E0FD 84 64       >                dw      Dict_Ptr + 2        // xt
 427+ E0FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0FF             >
 427+ E0FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0FF             >
 427+ E0FF             >//              ______________________________________________________________________
 427+ E0FF             >//              Dictionary part
 427+ E0FF             >
 427+ E0FF             >                org     Dict_Ptr
 427+ 6482             >
 427+ 6482 FD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 6484             >
 427+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 6484 ~           >
 427+ 6484 ~           >
 427+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 6484             >
 427+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 6484 3E C9                        ld      a, $C9              // "ret"
 429+ 6486 32 78 64                     ld      (Case_Sensitive), a
 430+ 6489                              next
 430+ 6489 DD E9       >                jp      (ix)
 431+ 648B
 432+ 648B              //  ______________________________________________________________________
 433+ 648B              //
 434+ 648B              //  caseoff     --
 435+ 648B              // set system case-sensitivity on
 436+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 648B             >
 437+ 648B             >Dict_Ptr        defl    $
 437+ 648B             >
 437+ 648B             >//              ______________________________________________________________________
 437+ 648B             >//              Heap part
 437+ 648B             >
 437+ 648B             >
 437+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0FF             >
 437+ E0FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0FF             >Latest_Definition defl  Heap_Ptr
 437+ E0FF             >
 437+ E0FF             >                // dummy db directives used to calculate length of namec
 437+ E0FF 43 41 53 45 >                db      "CASEOFF"
 437+ E103 4F 46 46    >
 437+ E106             >len_NFA         defl    $ - temp_NFA
 437+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0FF             >
 437+ E0FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E100 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E104 4F 46 46    >
 437+ E107             >                org     $-1                 // alter last byte of Name just above to set
 437+ E106 C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E107             >
 437+ E107 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E109             >Prev_Ptr        defl    Heap_Ptr
 437+ E109             >
 437+ E109             >mirror_Ptr      defl    $
 437+ E109             >
 437+ E109 8D 64       >                dw      Dict_Ptr + 2        // xt
 437+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E10B             >
 437+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E10B             >
 437+ E10B             >//              ______________________________________________________________________
 437+ E10B             >//              Dictionary part
 437+ E10B             >
 437+ E10B             >                org     Dict_Ptr
 437+ 648B             >
 437+ 648B 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 648D             >
 437+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 648D ~           >
 437+ 648D ~           >
 437+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 648D             >
 437+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 648D 3E 00                        ld      a, $00              // "nop"
 439+ 648F 32 78 64                     ld      (Case_Sensitive), a
 440+ 6492                              next
 440+ 6492 DD E9       >                jp      (ix)
 441+ 6494
 442+ 6494              //  ______________________________________________________________________
 443+ 6494              //
 444+ 6494              //  upper       c1 -- c1 | c2
 445+ 6494              // character on top of stack is forced to Uppercase.
 446+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 6494             >
 446+ 6494             >Dict_Ptr        defl    $
 446+ 6494             >
 446+ 6494             >//              ______________________________________________________________________
 446+ 6494             >//              Heap part
 446+ 6494             >
 446+ 6494             >
 446+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E10B             >
 446+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E10B             >Latest_Definition defl  Heap_Ptr
 446+ E10B             >
 446+ E10B             >                // dummy db directives used to calculate length of namec
 446+ E10B 55 50 50 45 >                db      "UPPER"
 446+ E10F 52          >
 446+ E110             >len_NFA         defl    $ - temp_NFA
 446+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E10B             >
 446+ E10B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E10C 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E110 52          >
 446+ E111             >                org     $-1                 // alter last byte of Name just above to set
 446+ E110 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E111             >
 446+ E111 FF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E113             >Prev_Ptr        defl    Heap_Ptr
 446+ E113             >
 446+ E113             >mirror_Ptr      defl    $
 446+ E113             >
 446+ E113 96 64       >                dw      Dict_Ptr + 2        // xt
 446+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E115             >
 446+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E115             >
 446+ E115             >//              ______________________________________________________________________
 446+ E115             >//              Dictionary part
 446+ E115             >
 446+ E115             >                org     Dict_Ptr
 446+ 6494             >
 446+ 6494 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 6496             >
 446+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 6496 ~           >
 446+ 6496 ~           >
 446+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 6496             >
 446+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 6496 E1                           pop     hl
 448+ 6497 7D                           ld      a, l
 449+ 6498 CD 79 64                     call    Case_Upper
 450+ 649B 6F                           ld      l, a
 451+ 649C
 452+ 649C                              psh1
 452+ 649C E5          >                push    hl
 452+ 649D DD E9       >                jp      (ix)
 453+ 649F
 454+ 649F              //  ______________________________________________________________________
 455+ 649F
 456+ 649F              MMU7_read:
 457+ 649F 01 3B 24                     ld      bc, $243B
 458+ 64A2 3E 57                        ld      a, 87
 459+ 64A4 ED 79                        out     (c), a
 460+ 64A6 04                           inc     b
 461+ 64A7 ED 78                        in      a, (c)
 462+ 64A9 C9                           ret
 463+ 64AA
 464+ 64AA              //  ______________________________________________________________________
 465+ 64AA
 466+ 64AA              TO_FAR_rout:
 467+ 64AA 7C                           ld      a, h
 468+ 64AB 08                           ex      af, af
 469+ 64AC 7C                           ld      a, h
 470+ 64AD F6 E0                        or      $E0
 471+ 64AF 67                           ld      h, a
 472+ 64B0 08                           ex      af, af
 473+ 64B1 07                           rlca
 474+ 64B2 07                           rlca
 475+ 64B3 07                           rlca
 476+ 64B4 E6 07                        and     $07
 477+ 64B6 C6 20                        add     $20
 478+ 64B8 C9                           ret
 479+ 64B9
 480+ 64B9
 481+ 64B9              //  ______________________________________________________________________
 482+ 64B9              //
 483+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 484+ 64B9              // vocabulary search,
 485+ 64B9              // - voc is starting word's NFA
 486+ 64B9              // - addr is the string to be searched for
 487+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 488+ 64B9              // (which contains length and some flags) and a true flag.
 489+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 490+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 490+ 64B9             >
 490+ 64B9             >Dict_Ptr        defl    $
 490+ 64B9             >
 490+ 64B9             >//              ______________________________________________________________________
 490+ 64B9             >//              Heap part
 490+ 64B9             >
 490+ 64B9             >
 490+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E115             >
 490+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E115             >Latest_Definition defl  Heap_Ptr
 490+ E115             >
 490+ E115             >                // dummy db directives used to calculate length of namec
 490+ E115 28 46 49 4E >                db      "(FIND)"
 490+ E119 44 29       >
 490+ E11B             >len_NFA         defl    $ - temp_NFA
 490+ E11B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E115             >
 490+ E115 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E116 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 490+ E11A 44 29       >
 490+ E11C             >                org     $-1                 // alter last byte of Name just above to set
 490+ E11B A9          >                db      {b $} | END_BIT     // msb as name end
 490+ E11C             >
 490+ E11C 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E11E             >Prev_Ptr        defl    Heap_Ptr
 490+ E11E             >
 490+ E11E             >mirror_Ptr      defl    $
 490+ E11E             >
 490+ E11E BB 64       >                dw      Dict_Ptr + 2        // xt
 490+ E120             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E120             >
 490+ E120             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E120             >
 490+ E120             >//              ______________________________________________________________________
 490+ E120             >//              Dictionary part
 490+ E120             >
 490+ E120             >                org     Dict_Ptr
 490+ 64B9             >
 490+ 64B9 1E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 64BB             >
 490+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 490+ 64BB ~           >
 490+ 64BB ~           >
 490+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 64BB             >
 490+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 64BB D9                           exx
 492+ 64BC CD 9F 64                     call    MMU7_read
 493+ 64BF D9                           exx
 494+ 64C0 6F                           ld      l, a
 495+ 64C1 D9                           exx
 496+ 64C2
 497+ 64C2 D1                           pop     de                      // de has dictionary pointer
 498+ 64C3              Find_VocabularyLoop:
 499+ 64C3 7A                               ld      a, d
 500+ 64C4 D6 60                            sub     $60
 501+ 64C6 30 08                            jr      nc, Find_far_endif
 502+ 64C8 EB                                   ex      de, hl
 503+ 64C9 CD AA 64                             call    TO_FAR_rout
 504+ 64CC EB                                   ex      de, hl
 505+ 64CD ED 92 57                             nextreg 87, a
 506+ 64D0              Find_far_endif:
 507+ 64D0 E1                               pop     hl                  // string pointer to search for
 508+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 509+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 510+ 64D3 08                               ex      af,af'              // for later use (!)
 511+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 512+ 64D5 AE                               xor     (hl)                // check if same length
 513+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 514+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 515+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 516+ 64DA
 517+ 64DA              Find_ThisWord:      // begin loop
 518+ 64DA 23                                   inc     hl
 519+ 64DB 13                                   inc     de
 520+ 64DC 1A                                   ld      a, (de)
 521+ 64DD                                      // case insensitive option - begin
 522+ 64DD                                      // push    bc
 523+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 524+ 64DF 47                                   ld      b, a
 525+ 64E0 1A                                   ld      a, (de)
 526+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 527+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 528+ 64E6 4F                                   ld      c, a
 529+ 64E7 7E                                   ld      a, (hl)
 530+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 531+ 64EB A9                                   xor     c
 532+ 64EC A8                                   xor     b
 533+ 64ED                                      // pop     bc
 534+ 64ED                                      // case insensitive option - end
 535+ 64ED 87                                   add     a                   // ignore msb during compare
 536+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 537+ 64F0
 538+ 64F0                                  // loop back until last byte msb is found set
 539+ 64F0                                  // that bit marks the ending char of this word
 540+ 64F0 30 E8                            jr      nc, Find_ThisWord
 541+ 64F2
 542+ 64F2                                  // match found !
 543+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 544+ 64F5 19                               add     hl, de
 545+ 64F6
 546+ 64F6                              //  ld      a, h
 547+ 64F6                              //  and     $E0
 548+ 64F6                              //  xor     h
 549+ 64F6                              //  jr      nz, Non_MMU7
 550+ 64F6                                  //  call    MMU7_read
 551+ 64F6                                  //  dec     a
 552+ 64F6                                  //  jr      z, Non_MMU7
 553+ 64F6 5E                                       ld      e, (hl)
 554+ 64F7 23                                       inc     hl
 555+ 64F8 56                                       ld      d, (hl)
 556+ 64F9 EB                                       ex      de, hl
 557+ 64FA              //Non_MMU7:
 558+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64FC 5F                               ld      e, a
 561+ 64FD 16 00                            ld      d, 0
 562+ 64FF 21 FF FF                         ld      hl, -1
 563+ 6502 D5                               push    de
 564+ 6503 E5                               push    hl
 565+ 6504 D9                               exx
 566+ 6505 7D                               ld      a, l
 567+ 6506 ED 92 57                         nextreg 87, a
 568+ 6509                                  next
 568+ 6509 DD E9       >                jp      (ix)
 569+ 650B
 570+ 650B              Find_DidntMatch: // didn't match (*)
 571+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 650D
 573+ 650D              Find_DifferentLenght:
 574+ 650D                                  // consume chars until the end of the word
 575+ 650D                                  // that is last byte msb is found set
 576+ 650D 13                                   inc     de
 577+ 650E 1A                                   ld      a, (de)
 578+ 650F 87                                   add     a, a
 579+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6512
 581+ 6512              Find_WordEnd:   // word-end  found (**)
 582+ 6512                                  // take LFA and use it
 583+ 6512 13                               inc     de
 584+ 6513 EB                               ex      de, hl
 585+ 6514 5E                               ld      e, (hl)
 586+ 6515 23                               inc     hl
 587+ 6516 56                               ld      d, (hl)
 588+ 6517 7A                               ld      a, d
 589+ 6518 B3                               or      e
 590+ 6519
 591+ 6519                              // loop until end of vocabulary
 592+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 651B
 594+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 595+ 651C 21 00 00                     ld      hl, 0
 596+ 651F E5                           push    hl
 597+ 6520 D9                           exx
 598+ 6521 7D                           ld      a, l
 599+ 6522 ED 92 57                     nextreg 87, a
 600+ 6525                              next
 600+ 6525 DD E9       >                jp      (ix)
 601+ 6527
 602+ 6527              //  ______________________________________________________________________
 603+ 6527              //
 604+ 6527              // enclose      a c -- a  n1 n2 n3
 605+ 6527              // starting from a, using delimiter c, determines the offsets:
 606+ 6527              //   n1   the first character non-delimiter
 607+ 6527              //   n2   the first delimiter after the text
 608+ 6527              //   n3   the first character non enclosed.
 609+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 6527              // an uncoditional delimiter.
 611+ 6527              // Examples:
 612+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 615+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 6527             >
 615+ 6527             >Dict_Ptr        defl    $
 615+ 6527             >
 615+ 6527             >//              ______________________________________________________________________
 615+ 6527             >//              Heap part
 615+ 6527             >
 615+ 6527             >
 615+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E120             >
 615+ E120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E120             >Latest_Definition defl  Heap_Ptr
 615+ E120             >
 615+ E120             >                // dummy db directives used to calculate length of namec
 615+ E120 45 4E 43 4C >                db      "ENCLOSE"
 615+ E124 4F 53 45    >
 615+ E127             >len_NFA         defl    $ - temp_NFA
 615+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E120             >
 615+ E120 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E121 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E125 4F 53 45    >
 615+ E128             >                org     $-1                 // alter last byte of Name just above to set
 615+ E127 C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E128             >
 615+ E128 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E12A             >Prev_Ptr        defl    Heap_Ptr
 615+ E12A             >
 615+ E12A             >mirror_Ptr      defl    $
 615+ E12A             >
 615+ E12A 29 65       >                dw      Dict_Ptr + 2        // xt
 615+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E12C             >
 615+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E12C             >
 615+ E12C             >//              ______________________________________________________________________
 615+ E12C             >//              Dictionary part
 615+ E12C             >
 615+ E12C             >                org     Dict_Ptr
 615+ 6527             >
 615+ 6527 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6529             >
 615+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6529 ~           >
 615+ 6529 ~           >
 615+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6529             >
 615+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6529 D9                           exx
 617+ 652A D1                           pop     de                  //  e has the character
 618+ 652B E1                           pop     hl                  // hl has the string address
 619+ 652C E5                           push    hl
 620+ 652D 7B                           ld      a, e
 621+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6531 2B                           dec     hl
 623+ 6532              Enclose_NonDelimiter:
 624+ 6532                              // find first non delimiter
 625+ 6532 23                               inc     hl
 626+ 6533 13                               inc     de
 627+ 6534 BE                               cp      (hl)
 628+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 6537 D5                           push    de
 630+ 6538
 631+ 6538                              // push    bc                  // save Instruction Pointer
 632+ 6538
 633+ 6538 4F                           ld      c, a                // save char
 634+ 6539 7E                           ld      a, (hl)
 635+ 653A A7                           and     a                   // stop if 0x00
 636+ 653B 20 07                        jr      nz, Enclose_NextChar
 637+ 653D                              /// case iii. no more character in string
 638+ 653D                                  // pop     bc                  // restore Instruction Pointer
 639+ 653D 13                               inc     de
 640+ 653E D5                               push    de
 641+ 653F 1B                               dec     de
 642+ 6540 D5                               push    de
 643+ 6541 D9                               exx
 644+ 6542                                  next
 644+ 6542 DD E9       >                jp      (ix)
 645+ 6544              Enclose_NextChar:
 646+ 6544 79                               ld      a, c
 647+ 6545 23                               inc     hl
 648+ 6546 13                               inc     de
 649+ 6547 BE                               cp      (hl)
 650+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 651+ 654A                                      // case i. first non enclosed
 652+ 654A                                      // pop     bc                  // restore Instruction Pointer
 653+ 654A D5                                   push    de
 654+ 654B 13                                   inc     de
 655+ 654C D5                                   push    de
 656+ 654D D9                                   exx
 657+ 654E                                      next
 657+ 654E DD E9       >                jp      (ix)
 658+ 6550              Enclose_NonSeparator:
 659+ 6550 7E                               ld      a, (hl)
 660+ 6551 A7                               and     a
 661+ 6552 20 F0                        jr      nz, Enclose_NextChar
 662+ 6554
 663+ 6554                              // case ii. separator & terminator
 664+ 6554                              // pop     bc                  // restore Instruction Pointer
 665+ 6554 D5                           push    de
 666+ 6555 D5                           push    de
 667+ 6556 D9                           exx
 668+ 6557                              next
 668+ 6557 DD E9       >                jp      (ix)
 669+ 6559
 670+ 6559              //  ______________________________________________________________________
 671+ 6559              //
 672+ 6559              // (map)        a2 a1 n c1 -- c2
 673+ 6559              // translate character c1 using mapping string a2 and a2
 674+ 6559              // if c1 is not present within string a1 then
 675+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 676+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 676+ 6559             >
 676+ 6559             >Dict_Ptr        defl    $
 676+ 6559             >
 676+ 6559             >//              ______________________________________________________________________
 676+ 6559             >//              Heap part
 676+ 6559             >
 676+ 6559             >
 676+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 676+ E12C             >
 676+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ E12C             >Latest_Definition defl  Heap_Ptr
 676+ E12C             >
 676+ E12C             >                // dummy db directives used to calculate length of namec
 676+ E12C 28 4D 41 50 >                db      "(MAP)"
 676+ E130 29          >
 676+ E131             >len_NFA         defl    $ - temp_NFA
 676+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ E12C             >
 676+ E12C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ E12D 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 676+ E131 29          >
 676+ E132             >                org     $-1                 // alter last byte of Name just above to set
 676+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 676+ E132             >
 676+ E132 20 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 676+ E134             >Prev_Ptr        defl    Heap_Ptr
 676+ E134             >
 676+ E134             >mirror_Ptr      defl    $
 676+ E134             >
 676+ E134 5B 65       >                dw      Dict_Ptr + 2        // xt
 676+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 676+ E136             >
 676+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 676+ E136             >
 676+ E136             >//              ______________________________________________________________________
 676+ E136             >//              Dictionary part
 676+ E136             >
 676+ E136             >                org     Dict_Ptr
 676+ 6559             >
 676+ 6559 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 676+ 655B             >
 676+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 676+ 655B ~           >
 676+ 655B ~           >
 676+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 655B             >
 676+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 655B D9                           exx
 678+ 655C E1                           pop     hl
 679+ 655D 7D                           ld      a, l
 680+ 655E C1                           pop     bc
 681+ 655F E1                           pop     hl
 682+ 6560 50                           ld      d, b
 683+ 6561 59                           ld      e, c
 684+ 6562 ED B1                        cpir
 685+ 6564 E1                           pop     hl
 686+ 6565 20 05                        jr      nz, C_Map_Then
 686+ 6567
 687+ 6567 19                               add     hl, de
 688+ 6568 2B                               dec     hl
 689+ 6569 ED 42                            sbc     hl, bc
 690+ 656B 7E                               ld      a, (hl)
 691+ 656C              C_Map_Then:
 692+ 656C 6F                           ld      l, a
 693+ 656D 26 00                        ld      h, 0
 694+ 656F E5                           push    hl
 695+ 6570 D9                           exx
 696+ 6571                              next
 696+ 6571 DD E9       >                jp      (ix)
 697+ 6573
 698+ 6573              //  ______________________________________________________________________
 699+ 6573              //
 700+ 6573              // (compare)    a1 a2 n -- b
 701+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 702+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 703+ 6573              //  0 : if strings are equal
 704+ 6573              // +1 : if string at a1 greater than string at a2
 705+ 6573              // -1 : if string at a1 less than string at a2
 706+ 6573              // strings can be 256 bytes in length at most.
 707+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 707+ 6573             >
 707+ 6573             >Dict_Ptr        defl    $
 707+ 6573             >
 707+ 6573             >//              ______________________________________________________________________
 707+ 6573             >//              Heap part
 707+ 6573             >
 707+ 6573             >
 707+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E136             >
 707+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E136             >Latest_Definition defl  Heap_Ptr
 707+ E136             >
 707+ E136             >                // dummy db directives used to calculate length of namec
 707+ E136 28 43 4F 4D >                db      "(COMPARE)"
 707+ E13A 50 41 52 45 >
 707+ E13E 29          >
 707+ E13F             >len_NFA         defl    $ - temp_NFA
 707+ E13F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E136             >
 707+ E136 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E137 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 707+ E13B 50 41 52 45 >
 707+ E13F 29          >
 707+ E140             >                org     $-1                 // alter last byte of Name just above to set
 707+ E13F A9          >                db      {b $} | END_BIT     // msb as name end
 707+ E140             >
 707+ E140 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E142             >Prev_Ptr        defl    Heap_Ptr
 707+ E142             >
 707+ E142             >mirror_Ptr      defl    $
 707+ E142             >
 707+ E142 75 65       >                dw      Dict_Ptr + 2        // xt
 707+ E144             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E144             >
 707+ E144             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E144             >
 707+ E144             >//              ______________________________________________________________________
 707+ E144             >//              Dictionary part
 707+ E144             >
 707+ E144             >                org     Dict_Ptr
 707+ 6573             >
 707+ 6573 42 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 6575             >
 707+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 707+ 6575 ~           >
 707+ 6575 ~           >
 707+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 6575             >
 707+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 6575 D9                           exx
 709+ 6576 E1                           pop     hl                  // Number of bytes
 710+ 6577 7D                           ld      a, l
 711+ 6578 E1                           pop     hl                  // hl points string a2
 712+ 6579 D1                           pop     de                  // hl points string a1
 713+ 657A              //              push    bc                  // Instruction pointer on stack
 714+ 657A 47                           ld      b, a
 715+ 657B              C_Compare_Loop:
 716+ 657B 7E                               ld      a, (hl)
 717+ 657C CD 78 64                         call    Case_Sensitive
 718+ 657F 4F                               ld      c, a
 719+ 6580 1A                               ld      a, (de)
 720+ 6581 CD 78 64                         call    Case_Sensitive
 721+ 6584 B9                               cp      c
 722+ 6585 13                               inc     de
 723+ 6586 23                               inc     hl
 724+ 6587 28 0E                            jr      z, C_Compare_Equal
 725+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 726+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 727+ 658E 18 03                                jr      C_Compare_Then      // Else
 728+ 6590              C_Compare_NotLessThan:
 729+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 730+ 6593              C_Compare_Then:                                 // Endif
 731+ 6593              //                      pop     bc              // restore Instruction Pointer
 732+ 6593 E5                                   push    hl
 733+ 6594 D9                                   exx
 734+ 6595
 735+ 6595                                      next
 735+ 6595 DD E9       >                jp      (ix)
 736+ 6597
 737+ 6597              C_Compare_Equal:
 738+ 6597 10 E2                        djnz    C_Compare_Loop
 739+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 740+ 659C              //              pop     bc                  // restore Instruction Pointer
 741+ 659C E5                           push    hl
 742+ 659D D9                           exx
 743+ 659E
 744+ 659E                              next
 744+ 659E DD E9       >                jp      (ix)
 745+ 65A0
 746+ 65A0              //  ______________________________________________________________________
 747+ 65A0              //
 748+ 65A0              // emitc        c --
 749+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 750+ 65A0              // the the current channel (see SELECT to change stream-channel)
 751+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 751+ 65A0             >
 751+ 65A0             >Dict_Ptr        defl    $
 751+ 65A0             >
 751+ 65A0             >//              ______________________________________________________________________
 751+ 65A0             >//              Heap part
 751+ 65A0             >
 751+ 65A0             >
 751+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 751+ E144             >
 751+ E144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ E144             >Latest_Definition defl  Heap_Ptr
 751+ E144             >
 751+ E144             >                // dummy db directives used to calculate length of namec
 751+ E144 45 4D 49 54 >                db      "EMITC"
 751+ E148 43          >
 751+ E149             >len_NFA         defl    $ - temp_NFA
 751+ E149             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ E144             >
 751+ E144 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ E145 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 751+ E149 43          >
 751+ E14A             >                org     $-1                 // alter last byte of Name just above to set
 751+ E149 C3          >                db      {b $} | END_BIT     // msb as name end
 751+ E14A             >
 751+ E14A 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 751+ E14C             >Prev_Ptr        defl    Heap_Ptr
 751+ E14C             >
 751+ E14C             >mirror_Ptr      defl    $
 751+ E14C             >
 751+ E14C A2 65       >                dw      Dict_Ptr + 2        // xt
 751+ E14E             >Heap_Ptr        defl    $ - $E000           // save current HP
 751+ E14E             >
 751+ E14E             >Current_HP      defl  $ - $E000             // used to set HP once!
 751+ E14E             >
 751+ E14E             >//              ______________________________________________________________________
 751+ E14E             >//              Dictionary part
 751+ E14E             >
 751+ E14E             >                org     Dict_Ptr
 751+ 65A0             >
 751+ 65A0 4C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 751+ 65A2             >
 751+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 751+ 65A2 ~           >
 751+ 65A2 ~           >
 751+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 65A2             >
 751+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 65A2 E1                           pop     hl
 753+ 65A3 7D                           ld      a, l
 754+ 65A4              Emitc_Ptr:
 755+ 65A4 C5                           push    bc
 756+ 65A5 D5                           push    de
 757+ 65A6 DD E5                        push    ix
 758+ 65A8 D7                           rst     $10
 759+ 65A9 DD E1                        pop     ix
 760+ 65AB D1                           pop     de
 761+ 65AC C1                           pop     bc
 762+ 65AD 3E FF                        ld      a, 255            // max possible
 763+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 764+ 65B2                              next
 764+ 65B2 DD E9       >                jp      (ix)
 765+ 65B4
 766+ 65B4              //  ______________________________________________________________________
 767+ 65B4              //
 768+ 65B4              // cr           --
 769+ 65B4              // send a CR via EMITC
 770+ 65B4                              New_Def CR, "CR", is_code, is_normal
 770+ 65B4             >
 770+ 65B4             >Dict_Ptr        defl    $
 770+ 65B4             >
 770+ 65B4             >//              ______________________________________________________________________
 770+ 65B4             >//              Heap part
 770+ 65B4             >
 770+ 65B4             >
 770+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E14E             >
 770+ E14E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E14E             >Latest_Definition defl  Heap_Ptr
 770+ E14E             >
 770+ E14E             >                // dummy db directives used to calculate length of namec
 770+ E14E 43 52       >                db      "CR"
 770+ E150             >len_NFA         defl    $ - temp_NFA
 770+ E150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E14E             >
 770+ E14E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E14F 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 770+ E151             >                org     $-1                 // alter last byte of Name just above to set
 770+ E150 D2          >                db      {b $} | END_BIT     // msb as name end
 770+ E151             >
 770+ E151 44 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E153             >Prev_Ptr        defl    Heap_Ptr
 770+ E153             >
 770+ E153             >mirror_Ptr      defl    $
 770+ E153             >
 770+ E153 B6 65       >                dw      Dict_Ptr + 2        // xt
 770+ E155             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E155             >
 770+ E155             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E155             >
 770+ E155             >//              ______________________________________________________________________
 770+ E155             >//              Dictionary part
 770+ E155             >
 770+ E155             >                org     Dict_Ptr
 770+ 65B4             >
 770+ 65B4 53 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 65B6             >
 770+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 770+ 65B6 ~           >
 770+ 65B6 ~           >
 770+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 65B6             >
 770+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 65B6
 772+ 65B6 3E 0D                        ld      a, CR_CHAR
 773+ 65B8 18 EA                        jr      Emitc_Ptr
 774+ 65BA
 775+ 65BA              Emitc_Vec:
 776+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 777+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 778+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 779+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 780+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 781+ 65C4 19 66                        dw      C_Emit_NL         // lf (unix newline)
 782+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 783+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 784+ 65CA
 785+ 65CA              Emit_Selector_Start:
 786+ 65CA 06                           db      $06                 // comma
 787+ 65CB 07                           db      $07                 // bel
 788+ 65CC 08                           db      $08                 // bs
 789+ 65CD 09                           db      $09                 // tab
 790+ 65CE 0D                           db      $0D                 // cr
 791+ 65CF 0A                           db      $0A                 // lf (unix newline)
 792+ 65D0 20                           db      $20
 793+ 65D1              Emit_Selector_End:
 794+ 65D1 20                           db      $20
 795+ 65D2
 796+ 65D2              //  ______________________________________________________________________
 797+ 65D2              //
 798+ 65D2              // (?emit)      c1 -- c2 | c1
 799+ 65D2              // decode a character to be sent via EMIT
 800+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 801+ 65D2              // the routine should resolve anything and convert the character anyway.
 802+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 802+ 65D2             >
 802+ 65D2             >Dict_Ptr        defl    $
 802+ 65D2             >
 802+ 65D2             >//              ______________________________________________________________________
 802+ 65D2             >//              Heap part
 802+ 65D2             >
 802+ 65D2             >
 802+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ E155             >
 802+ E155             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ E155             >Latest_Definition defl  Heap_Ptr
 802+ E155             >
 802+ E155             >                // dummy db directives used to calculate length of namec
 802+ E155 28 3F 45 4D >                db      "(?EMIT)"
 802+ E159 49 54 29    >
 802+ E15C             >len_NFA         defl    $ - temp_NFA
 802+ E15C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ E155             >
 802+ E155 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ E156 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 802+ E15A 49 54 29    >
 802+ E15D             >                org     $-1                 // alter last byte of Name just above to set
 802+ E15C A9          >                db      {b $} | END_BIT     // msb as name end
 802+ E15D             >
 802+ E15D 4E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ E15F             >Prev_Ptr        defl    Heap_Ptr
 802+ E15F             >
 802+ E15F             >mirror_Ptr      defl    $
 802+ E15F             >
 802+ E15F D4 65       >                dw      Dict_Ptr + 2        // xt
 802+ E161             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ E161             >
 802+ E161             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ E161             >
 802+ E161             >//              ______________________________________________________________________
 802+ E161             >//              Dictionary part
 802+ E161             >
 802+ E161             >                org     Dict_Ptr
 802+ 65D2             >
 802+ 65D2 5F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 65D4             >
 802+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 802+ 65D4 ~           >
 802+ 65D4 ~           >
 802+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 65D4             >
 802+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 65D4 D9                           exx
 804+ 65D5 D1                           pop     de
 805+ 65D6 7B                           ld      a, e                //  de has c1
 806+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 807+ 65D9                              // push    bc                  // save Instruction Pointer
 808+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 809+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 810+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 811+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 812+ 65E3                                  // Found then decode it
 813+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 814+ 65E6 09                               add     hl, bc
 815+ 65E7 09                               add     hl, bc
 816+ 65E8 5E                               ld      e, (hl)
 817+ 65E9 23                               inc     hl
 818+ 65EA 56                               ld      d, (hl)
 819+ 65EB EB                               ex      de, hl
 820+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 821+ 65EC E9                               jp      (hl)                // one of the following labels
 822+ 65ED              C_Emit_Not_Found:
 823+ 65ED                              // pop     bc                  // restore Instruction Pointer
 824+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 825+ 65EF 30 02                        jr      nc, C_Emit_Printable
 826+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 827+ 65F3              C_Emit_Printable:
 828+ 65F3 6F                           ld      l, a
 829+ 65F4 26 00                        ld      h, 0
 830+ 65F6 E5                           push    hl
 831+ 65F7 D9                           exx
 832+ 65F8                              next
 832+ 65F8 DD E9       >                jp      (ix)
 833+ 65FA
 834+ 65FA              C_Emit_Bel:
 835+ 65FA D9                            exx
 836+ 65FB C5                           push    bc                  // save Instruction Pointer
 837+ 65FC D5                           push    de
 838+ 65FD 11 00 01                     ld      de, $0100
 839+ 6600 21 00 02                     ld      hl, $0200
 840+ 6603 DD E5                        push    ix                  // save Next Pointer
 841+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 842+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 843+ 660A D1                           pop     de
 844+ 660B C1                           pop     bc                  // restore Instruction Pointer
 845+ 660C 21 00 00                     ld      hl, NUL_CHAR
 846+ 660F E5                           push    hl
 847+ 6610                              next
 847+ 6610 DD E9       >                jp      (ix)
 848+ 6612
 849+ 6612 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 850+ 6615 E5                           push    hl
 851+ 6616 D9                           exx
 852+ 6617                              next
 852+ 6617 DD E9       >                jp      (ix)
 853+ 6619
 854+ 6619 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 855+ 661C E5                           push    hl
 856+ 661D D9                           exx
 857+ 661E                              next
 857+ 661E DD E9       >                jp      (ix)
 858+ 6620
 859+ 6620              //  ______________________________________________________________________
 860+ 6620
 861+ 6620              Key_Table:
 862+ 6620 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 863+ 6621 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 864+ 6622 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 865+ 6623 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 866+ 6624 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 867+ 6625 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 868+ 6626 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 869+ 6627 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 870+ 6628 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 871+ 6629 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 872+ 662A C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 873+ 662B              Key_MapTo:
 874+ 662B 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 875+ 662C 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 876+ 662D 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 877+ 662E 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 878+ 662F 5D                           db      $5D                 //  6: SYMBOL+U : ]
 879+ 6630 5B                           db      $5B                 //  5: SYMBOL+Y : [
 880+ 6631 7D                           db      $7D                 //  4: SYMBOL+G : }
 881+ 6632 7B                           db      $7B                 //  3: SYMBOL+F : {
 882+ 6633 5C                           db      $5C                 //  2: SYMBOl+D : //
 883+ 6634 7C                           db      $7C                 //  1: SYMBOL+S : |
 884+ 6635 7E                           db      $7E                 //  0: SYMBOL+A : ~
 885+ 6636
 886+ 6636              //  ______________________________________________________________________
 887+ 6636              //
 888+ 6636              // curs         -- c
 889+ 6636              // wait for a keypress
 890+ 6636              // This definition need Standard ROM Interrupt to be served
 891+ 6636
 892+ 6636                              New_Def CUR, "CURS", is_code, is_normal
 892+ 6636             >
 892+ 6636             >Dict_Ptr        defl    $
 892+ 6636             >
 892+ 6636             >//              ______________________________________________________________________
 892+ 6636             >//              Heap part
 892+ 6636             >
 892+ 6636             >
 892+ 6636             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ E161             >
 892+ E161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ E161             >Latest_Definition defl  Heap_Ptr
 892+ E161             >
 892+ E161             >                // dummy db directives used to calculate length of namec
 892+ E161 43 55 52 53 >                db      "CURS"
 892+ E165             >len_NFA         defl    $ - temp_NFA
 892+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ E161             >
 892+ E161 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ E162 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 892+ E166             >                org     $-1                 // alter last byte of Name just above to set
 892+ E165 D3          >                db      {b $} | END_BIT     // msb as name end
 892+ E166             >
 892+ E166 55 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ E168             >Prev_Ptr        defl    Heap_Ptr
 892+ E168             >
 892+ E168             >mirror_Ptr      defl    $
 892+ E168             >
 892+ E168 38 66       >                dw      Dict_Ptr + 2        // xt
 892+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ E16A             >
 892+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ E16A             >
 892+ E16A             >//              ______________________________________________________________________
 892+ E16A             >//              Dictionary part
 892+ E16A             >
 892+ E16A             >                org     Dict_Ptr
 892+ 6636             >
 892+ 6636 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 6638             >
 892+ 6638             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 6638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 892+ 6638 ~           >
 892+ 6638 ~           >
 892+ 6638             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 6638             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 6638             >
 892+ 6638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 6638
 894+ 6638 C5                           push    bc                  // save Instruction Pointer
 895+ 6639 D5                           push    de                  // save Return Stack Pointer
 896+ 663A DD E5                        push    ix
 897+ 663C ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 898+ 6640 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 899+ 6643 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 900+ 6647
 901+ 6647              Cur_Wait:
 902+ 6647 76                               halt
 903+ 6648 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 904+ 664A CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 905+ 664D
 906+ 664D                                  // software-flash: flips face every 320 ms
 907+ 664D 3E 20                            ld      a, $20              // Timing based
 908+ 664F FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 909+ 6652
 910+ 6652 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 911+ 6655 20 0C                            jr      nz, Cur_Cursor
 912+ 6657 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 913+ 665A FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 914+ 665E 28 03                                jr      z, Cur_Cursor
 915+ 6660 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 916+ 6663              Cur_Cursor:
 917+ 6663 D7                               rst     $10
 918+ 6664 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 919+ 6666 D7                               rst     $10
 920+ 6667
 921+ 6667 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 922+ 666B 28 DA                        jr      z, Cur_Wait
 923+ 666D
 924+ 666D 76                           halt    // this is to sync flashing cursor.
 925+ 666E
 926+ 666E 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 927+ 6670 D7                           rst     $10
 928+ 6671 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 929+ 6673 D7                           rst     $10
 930+ 6674
 931+ 6674 ED 7B 92 63                  ld      sp, (SP_Saved)
 932+ 6678
 933+ 6678 DD E1                        pop     ix
 934+ 667A D1                           pop     de                  // Restore Return Stack Pointer
 935+ 667B C1                           pop     bc                  // Restore Instruction Pointer
 936+ 667C                              next
 936+ 667C DD E9       >                jp      (ix)
 937+ 667E
 938+ 667E
 939+ 667E              //  ______________________________________________________________________
 940+ 667E              //
 941+ 667E              // key          -- c
 942+ 667E              // This definition need Standard ROM Interrupt to be served
 943+ 667E
 944+ 667E                              New_Def KEY, "KEY", is_code, is_normal
 944+ 667E             >
 944+ 667E             >Dict_Ptr        defl    $
 944+ 667E             >
 944+ 667E             >//              ______________________________________________________________________
 944+ 667E             >//              Heap part
 944+ 667E             >
 944+ 667E             >
 944+ 667E             >                org     (Heap_Ptr & $1FFF) + $E000
 944+ E16A             >
 944+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ E16A             >Latest_Definition defl  Heap_Ptr
 944+ E16A             >
 944+ E16A             >                // dummy db directives used to calculate length of namec
 944+ E16A 4B 45 59    >                db      "KEY"
 944+ E16D             >len_NFA         defl    $ - temp_NFA
 944+ E16D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ E16A             >
 944+ E16A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ E16B 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 944+ E16E             >                org     $-1                 // alter last byte of Name just above to set
 944+ E16D D9          >                db      {b $} | END_BIT     // msb as name end
 944+ E16E             >
 944+ E16E 61 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 944+ E170             >Prev_Ptr        defl    Heap_Ptr
 944+ E170             >
 944+ E170             >mirror_Ptr      defl    $
 944+ E170             >
 944+ E170 80 66       >                dw      Dict_Ptr + 2        // xt
 944+ E172             >Heap_Ptr        defl    $ - $E000           // save current HP
 944+ E172             >
 944+ E172             >Current_HP      defl  $ - $E000             // used to set HP once!
 944+ E172             >
 944+ E172             >//              ______________________________________________________________________
 944+ E172             >//              Dictionary part
 944+ E172             >
 944+ E172             >                org     Dict_Ptr
 944+ 667E             >
 944+ 667E 70 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 944+ 6680             >
 944+ 6680             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 6680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 944+ 6680 ~           >
 944+ 6680 ~           >
 944+ 6680             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 6680             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 6680             >
 944+ 6680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 6680
 946+ 6680 C5                           push    bc                  // Save Instruction Pointer
 947+ 6681
 948+ 6681              Key_Wait:
 949+ 6681 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 950+ 6685 28 FA                        jr      z, Key_Wait
 951+ 6687
 952+ 6687 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 953+ 668A
 954+ 668A                              // decode character from above table
 955+ 668A 21 20 66                     ld      hl, Key_Table
 956+ 668D 01 0B 00                     ld      bc, $000B
 957+ 6690 ED B1                        cpir
 958+ 6692 20 05                        jr      nz, Key_DontMap
 959+ 6694 21 2B 66                         ld      hl, Key_MapTo
 960+ 6697 09                               add     hl, bc
 961+ 6698 7E                               ld      a, (hl)
 962+ 6699 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 963+ 669B 20 09                        jr      nz, Key_NoCapsLock
 964+ 669D 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 965+ 66A0 7E                               ld      a, (hl)
 966+ 66A1 EE 08                            xor     $08
 967+ 66A3 77                               ld      (hl), a
 968+ 66A4 3E 00                            ld      a, NUL_CHAR
 969+ 66A6 6F           Key_NoCapsLock: ld      l, a
 970+ 66A7 26 00                        ld      h, 0                // Prepare TOS
 971+ 66A9
 972+ 66A9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 973+ 66AD
 974+ 66AD C1                           pop     bc                  // Restore Instruction Pointer
 975+ 66AE
 976+ 66AE                              psh1
 976+ 66AE E5          >                push    hl
 976+ 66AF DD E9       >                jp      (ix)
 977+ 66B1
 978+ 66B1
 979+ 66B1              //  ______________________________________________________________________
 980+ 66B1              //
 981+ 66B1              // click        --
 982+ 66B1              // This definition need Standard ROM Interrupt to be served
 983+ 66B1              //
 984+ 66B1              //              New_Def CLICK, "CLICK", is_code, is_normal
 985+ 66B1              //
 986+ 66B1              //                push    bc
 987+ 66B1              //              ld      a, ($5C48)          // BORDCR system variable
 988+ 66B1              //              rra
 989+ 66B1              //              rra
 990+ 66B1              //              rra
 991+ 66B1              //              or      $18                 // quick'n'dirty click
 992+ 66B1              //              out     ($fe), a
 993+ 66B1              //              ld      b, 0
 994+ 66B1              //              djnz    $                   // wait loop
 995+ 66B1              //              xor     $18
 996+ 66B1              //              out     ($fe), a
 997+ 66B1              //                pop     bc
 998+ 66B1
 999+ 66B1              //              next
1000+ 66B1
1001+ 66B1              //  ______________________________________________________________________
1002+ 66B1              //
1003+ 66B1              // key?         -- f
1004+ 66B1              // key available
1005+ 66B1              //
1006+ 66B1              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1007+ 66B1              //
1008+ 66B1              //              ld      hl, 0000
1009+ 66B1              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1010+ 66B1              //              jr      z, Key_Q
1011+ 66B1              //                  dec     hl
1012+ 66B1              // Key_Q:
1013+ 66B1              //                psh1
1014+ 66B1              //              next
1015+ 66B1
1016+ 66B1              //  ______________________________________________________________________
1017+ 66B1              //
1018+ 66B1              // ?terminal    -- FALSE | TRUE
1019+ 66B1              // test for BREAK keypress
1020+ 66B1                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1020+ 66B1             >
1020+ 66B1             >Dict_Ptr        defl    $
1020+ 66B1             >
1020+ 66B1             >//              ______________________________________________________________________
1020+ 66B1             >//              Heap part
1020+ 66B1             >
1020+ 66B1             >
1020+ 66B1             >                org     (Heap_Ptr & $1FFF) + $E000
1020+ E172             >
1020+ E172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ E172             >Latest_Definition defl  Heap_Ptr
1020+ E172             >
1020+ E172             >                // dummy db directives used to calculate length of namec
1020+ E172 3F 54 45 52 >                db      "?TERMINAL"
1020+ E176 4D 49 4E 41 >
1020+ E17A 4C          >
1020+ E17B             >len_NFA         defl    $ - temp_NFA
1020+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ E172             >
1020+ E172 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ E173 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1020+ E177 4D 49 4E 41 >
1020+ E17B 4C          >
1020+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1020+ E17B CC          >                db      {b $} | END_BIT     // msb as name end
1020+ E17C             >
1020+ E17C 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1020+ E17E             >Prev_Ptr        defl    Heap_Ptr
1020+ E17E             >
1020+ E17E             >mirror_Ptr      defl    $
1020+ E17E             >
1020+ E17E B3 66       >                dw      Dict_Ptr + 2        // xt
1020+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1020+ E180             >
1020+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1020+ E180             >
1020+ E180             >//              ______________________________________________________________________
1020+ E180             >//              Dictionary part
1020+ E180             >
1020+ E180             >                org     Dict_Ptr
1020+ 66B1             >
1020+ 66B1 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1020+ 66B3             >
1020+ 66B3             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 66B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1020+ 66B3 ~           >
1020+ 66B3 ~           >
1020+ 66B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 66B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 66B3             >
1020+ 66B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 66B3 D9                           exx
1022+ 66B4 01 FE 7F                     ld      bc, $7ffe
1023+ 66B7 ED 50                        in      d, (c)
1024+ 66B9 41                           ld      b, c
1025+ 66BA ED 78                        in      a, (c)
1026+ 66BC B2                           or       d
1027+ 66BD 1F                           rra
1028+ 66BE 3F                           ccf
1029+ 66BF ED 62                        sbc     hl, hl
1030+ 66C1 E5                           push    hl
1031+ 66C2 D9                           exx
1032+ 66C3                              next
1032+ 66C3 DD E9       >                jp      (ix)
1033+ 66C5
1034+ 66C5
1035+ 66C5              //  ______________________________________________________________________
1036+ 66C5              //
1037+ 66C5              // inkey        -- c | 0
1038+ 66C5              // call ROM inkey$ routine, returns c or "zero".
1039+ 66C5              //
1040+ 66C5              //              New_Def INKEY, "INKEY", is_code, is_normal
1041+ 66C5              //              push    bc
1042+ 66C5              //              push    de
1043+ 66C5              //              ld      (SP_Saved), sp
1044+ 66C5              //              ld      sp, Cold_origin - 5
1045+ 66C5              //              push    ix
1046+ 66C5              //              call    $15E6                   // instead of 15E9
1047+ 66C5              //              pop     ix
1048+ 66C5              //              ld      sp, (SP_Saved)
1049+ 66C5              //              ld      l, a
1050+ 66C5              //              ld      h, 0
1051+ 66C5              //              pop     de
1052+ 66C5              //              pop     bc
1053+ 66C5              //              psh1
1054+ 66C5
1055+ 66C5              //  ______________________________________________________________________
1056+ 66C5              //
1057+ 66C5              // select      n --
1058+ 66C5              // selects the given channel number
1059+ 66C5
1060+ 66C5                              New_Def SELECT, "SELECT", is_code, is_normal
1060+ 66C5             >
1060+ 66C5             >Dict_Ptr        defl    $
1060+ 66C5             >
1060+ 66C5             >//              ______________________________________________________________________
1060+ 66C5             >//              Heap part
1060+ 66C5             >
1060+ 66C5             >
1060+ 66C5             >                org     (Heap_Ptr & $1FFF) + $E000
1060+ E180             >
1060+ E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1060+ E180             >Latest_Definition defl  Heap_Ptr
1060+ E180             >
1060+ E180             >                // dummy db directives used to calculate length of namec
1060+ E180 53 45 4C 45 >                db      "SELECT"
1060+ E184 43 54       >
1060+ E186             >len_NFA         defl    $ - temp_NFA
1060+ E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1060+ E180             >
1060+ E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1060+ E181 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1060+ E185 43 54       >
1060+ E187             >                org     $-1                 // alter last byte of Name just above to set
1060+ E186 D4          >                db      {b $} | END_BIT     // msb as name end
1060+ E187             >
1060+ E187 72 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1060+ E189             >Prev_Ptr        defl    Heap_Ptr
1060+ E189             >
1060+ E189             >mirror_Ptr      defl    $
1060+ E189             >
1060+ E189 C7 66       >                dw      Dict_Ptr + 2        // xt
1060+ E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
1060+ E18B             >
1060+ E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
1060+ E18B             >
1060+ E18B             >//              ______________________________________________________________________
1060+ E18B             >//              Dictionary part
1060+ E18B             >
1060+ E18B             >                org     Dict_Ptr
1060+ 66C5             >
1060+ 66C5 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1060+ 66C7             >
1060+ 66C7             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1060+ 66C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1060+ 66C7 ~           >
1060+ 66C7 ~           >
1060+ 66C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1060+ 66C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1060+ 66C7             >
1060+ 66C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1061+ 66C7 E1                           pop     hl
1062+ 66C8 C5                           push    bc
1063+ 66C9 D5                           push    de
1064+ 66CA 7D                           ld      a, l
1065+ 66CB ED 73 92 63                  ld      (SP_Saved), sp
1066+ 66CF 31 61 63                     ld      sp, Cold_origin - 5
1067+ 66D2 DD E5                        push    ix
1068+ 66D4 CD 01 16                     call    $1601
1069+ 66D7 DD E1                        pop     ix
1070+ 66D9 ED 7B 92 63                  ld      sp, (SP_Saved)
1071+ 66DD D1                           pop     de
1072+ 66DE C1                           pop     bc
1073+ 66DF                              next
1073+ 66DF DD E9       >                jp      (ix)
1074+ 66E1
1075+ 66E1              //  ______________________________________________________________________
1076+ 66E1              //
1077+ 66E1              // ZX Spectrum Next - Low Level disk primitives.
1078+ 66E1              // this include is "here" for backward compatibility
1079+ 66E1
1080+ 66E1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66E1              //  ______________________________________________________________________
   2++66E1              //
   3++66E1              //  next-opt.asm
   4++66E1              //
   5++66E1              //  ZX Spectrum Next - peculiar definitions
   6++66E1              //  ______________________________________________________________________
   7++66E1
   8++66E1              //  ______________________________________________________________________
   9++66E1              //
  10++66E1              // f_seek       d u -- f
  11++66E1              // Seek to position d in file-handle u.
  12++66E1              // Return a false-flag 0 on success, True flag on error
  13++66E1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66E1             >
  13++66E1             >Dict_Ptr        defl    $
  13++66E1             >
  13++66E1             >//              ______________________________________________________________________
  13++66E1             >//              Heap part
  13++66E1             >
  13++66E1             >
  13++66E1             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E18B             >
  13++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E18B             >Latest_Definition defl  Heap_Ptr
  13++E18B             >
  13++E18B             >                // dummy db directives used to calculate length of namec
  13++E18B 46 5F 53 45 >                db      "F_SEEK"
  13++E18F 45 4B       >
  13++E191             >len_NFA         defl    $ - temp_NFA
  13++E191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E18B             >
  13++E18B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E18C 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E190 45 4B       >
  13++E192             >                org     $-1                 // alter last byte of Name just above to set
  13++E191 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E192             >
  13++E192 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E194             >Prev_Ptr        defl    Heap_Ptr
  13++E194             >
  13++E194             >mirror_Ptr      defl    $
  13++E194             >
  13++E194 E3 66       >                dw      Dict_Ptr + 2        // xt
  13++E196             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E196             >
  13++E196             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E196             >
  13++E196             >//              ______________________________________________________________________
  13++E196             >//              Dictionary part
  13++E196             >
  13++E196             >                org     Dict_Ptr
  13++66E1             >
  13++66E1 94 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66E3             >
  13++66E3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66E3 ~           >
  13++66E3 ~           >
  13++66E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66E3             >
  13++66E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66E3 D9                            exx
  15++66E4 E1                            pop     hl                  // file-handle
  16++66E5 7D                            ld      a, l
  17++66E6 C1                            pop     bc                  // bc has high-word of d
  18++66E7 D1                            pop     de
  19++66E8 D9                           exx
  20++66E9 DD E5                        push    ix
  21++66EB D5                           push    de
  22++66EC C5                           push    bc                  // save Instruction Pointer
  23++66ED D9                            exx
  24++66EE DD 21 00 00                   ld      ix, 0
  25++66F2 CF                            rst     $08
  26++66F3 9F                            db      $9F
  27++66F4              F_Seek_Exit:
  28++66F4 C1                           pop     bc                  // restore Instruction Pointer
  29++66F5 D1                           pop     de
  30++66F6 DD E1                        pop     ix
  31++66F8 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++66FA
  33++66FA                              psh1
  33++66FA E5          >                push    hl
  33++66FB DD E9       >                jp      (ix)
  34++66FD
  35++66FD              //  ______________________________________________________________________
  36++66FD              //
  37++66FD              // f_close      u -- f
  38++66FD              // Close file-handle u.
  39++66FD              // Return 0 on success, True flag on error
  40++66FD
  41++66FD                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++66FD             >
  41++66FD             >Dict_Ptr        defl    $
  41++66FD             >
  41++66FD             >//              ______________________________________________________________________
  41++66FD             >//              Heap part
  41++66FD             >
  41++66FD             >
  41++66FD             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E196             >
  41++E196             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E196             >Latest_Definition defl  Heap_Ptr
  41++E196             >
  41++E196             >                // dummy db directives used to calculate length of namec
  41++E196 46 5F 43 4C >                db      "F_CLOSE"
  41++E19A 4F 53 45    >
  41++E19D             >len_NFA         defl    $ - temp_NFA
  41++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E196             >
  41++E196 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E197 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E19B 4F 53 45    >
  41++E19E             >                org     $-1                 // alter last byte of Name just above to set
  41++E19D C5          >                db      {b $} | END_BIT     // msb as name end
  41++E19E             >
  41++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E1A0             >Prev_Ptr        defl    Heap_Ptr
  41++E1A0             >
  41++E1A0             >mirror_Ptr      defl    $
  41++E1A0             >
  41++E1A0 FF 66       >                dw      Dict_Ptr + 2        // xt
  41++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E1A2             >
  41++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E1A2             >
  41++E1A2             >//              ______________________________________________________________________
  41++E1A2             >//              Dictionary part
  41++E1A2             >
  41++E1A2             >                org     Dict_Ptr
  41++66FD             >
  41++66FD A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++66FF             >
  41++66FF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++66FF ~           >
  41++66FF ~           >
  41++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++66FF             >
  41++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++66FF
  43++66FF E1                           pop     hl
  44++6700 7D                           ld      a, l                // file-handle
  45++6701 DD E5                        push    ix
  46++6703 D5                           push    de
  47++6704 C5                           push    bc                  // Save Instruction pointer
  48++6705 CF                           rst     $08
  49++6706 9B                           db      $9B
  50++6707 18 EB                        jr      F_Seek_Exit
  51++6709              //              pop     de
  52++6709              //              pop     bc
  53++6709              //              pop     ix
  54++6709              //              sbc     hl, hl
  55++6709              //              psh1
  56++6709
  57++6709              //  ______________________________________________________________________
  58++6709              //
  59++6709              // f_sync      u -- f
  60++6709              // Close file-handle u.
  61++6709              // Return 0 on success, True flag on error
  62++6709
  63++6709                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6709             >
  63++6709             >Dict_Ptr        defl    $
  63++6709             >
  63++6709             >//              ______________________________________________________________________
  63++6709             >//              Heap part
  63++6709             >
  63++6709             >
  63++6709             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E1A2             >
  63++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E1A2             >Latest_Definition defl  Heap_Ptr
  63++E1A2             >
  63++E1A2             >                // dummy db directives used to calculate length of namec
  63++E1A2 46 5F 53 59 >                db      "F_SYNC"
  63++E1A6 4E 43       >
  63++E1A8             >len_NFA         defl    $ - temp_NFA
  63++E1A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E1A2             >
  63++E1A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E1A3 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E1A7 4E 43       >
  63++E1A9             >                org     $-1                 // alter last byte of Name just above to set
  63++E1A8 C3          >                db      {b $} | END_BIT     // msb as name end
  63++E1A9             >
  63++E1A9 96 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1AB             >Prev_Ptr        defl    Heap_Ptr
  63++E1AB             >
  63++E1AB             >mirror_Ptr      defl    $
  63++E1AB             >
  63++E1AB 0B 67       >                dw      Dict_Ptr + 2        // xt
  63++E1AD             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1AD             >
  63++E1AD             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1AD             >
  63++E1AD             >//              ______________________________________________________________________
  63++E1AD             >//              Dictionary part
  63++E1AD             >
  63++E1AD             >                org     Dict_Ptr
  63++6709             >
  63++6709 AB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++670B             >
  63++670B             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++670B ~           >
  63++670B ~           >
  63++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++670B             >
  63++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++670B E1                           pop     hl
  65++670C 7D                           ld      a, l                // file-handle
  66++670D DD E5                        push    ix
  67++670F D5                           push    de
  68++6710 C5                           push    bc
  69++6711 CF                           rst     $08
  70++6712 9C                           db      $9C
  71++6713 18 DF                        jr      F_Seek_Exit
  72++6715              //              pop     de
  73++6715              //              pop     bc
  74++6715              //              pop     ix
  75++6715              //              sbc     hl, hl
  76++6715              //              psh1
  77++6715
  78++6715              //  ______________________________________________________________________
  79++6715              //
  80++6715              // f_fgetpos    u -- d f
  81++6715              // Seek to position d in file-handle u.
  82++6715              // Return a false-flag 0 on success, True flag on error
  83++6715                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6715             >
  83++6715             >Dict_Ptr        defl    $
  83++6715             >
  83++6715             >//              ______________________________________________________________________
  83++6715             >//              Heap part
  83++6715             >
  83++6715             >
  83++6715             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1AD             >
  83++E1AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1AD             >Latest_Definition defl  Heap_Ptr
  83++E1AD             >
  83++E1AD             >                // dummy db directives used to calculate length of namec
  83++E1AD 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1B1 45 54 50 4F >
  83++E1B5 53          >
  83++E1B6             >len_NFA         defl    $ - temp_NFA
  83++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1AD             >
  83++E1AD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1AE 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1B2 45 54 50 4F >
  83++E1B6 53          >
  83++E1B7             >                org     $-1                 // alter last byte of Name just above to set
  83++E1B6 D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1B7             >
  83++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1B9             >Prev_Ptr        defl    Heap_Ptr
  83++E1B9             >
  83++E1B9             >mirror_Ptr      defl    $
  83++E1B9             >
  83++E1B9 17 67       >                dw      Dict_Ptr + 2        // xt
  83++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1BB             >
  83++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1BB             >
  83++E1BB             >//              ______________________________________________________________________
  83++E1BB             >//              Dictionary part
  83++E1BB             >
  83++E1BB             >                org     Dict_Ptr
  83++6715             >
  83++6715 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++6717             >
  83++6717             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++6717 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++6717 ~           >
  83++6717 ~           >
  83++6717             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++6717             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++6717             >
  83++6717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++6717 E1                            pop     hl
  85++6718 7D                            ld      a, l                // file-handle
  86++6719 DD E5                         push    ix
  87++671B D5                            push    de
  88++671C C5                            push    bc
  89++671D CF                            rst     $08
  90++671E A0                            db      $A0
  91++671F D9                           exx
  92++6720 C1                           pop     bc                  // IP
  93++6721 D1                           pop     de                  // Return Stack Pointer
  94++6722 DD E1                        pop     ix
  95++6724 D9                            exx
  96++6725 D5                            push    de
  97++6726 C5                            push    bc
  98++6727 ED 62                         sbc     hl, hl
  99++6729 E5                            push    hl
 100++672A D9                           exx
 101++672B                              next
 101++672B DD E9       >                jp      (ix)
 102++672D
 103++672D              //  ______________________________________________________________________
 104++672D              //
 105++672D              // f_read       a b u -- n f
 106++672D              // Read b bytes from file-handle u to address a
 107++672D              // Return the actual number n of bytes read
 108++672D              // Return 0 on success, True flag on error
 109++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 109++672D             >
 109++672D             >Dict_Ptr        defl    $
 109++672D             >
 109++672D             >//              ______________________________________________________________________
 109++672D             >//              Heap part
 109++672D             >
 109++672D             >
 109++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1BB             >
 109++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1BB             >Latest_Definition defl  Heap_Ptr
 109++E1BB             >
 109++E1BB             >                // dummy db directives used to calculate length of namec
 109++E1BB 46 5F 52 45 >                db      "F_READ"
 109++E1BF 41 44       >
 109++E1C1             >len_NFA         defl    $ - temp_NFA
 109++E1C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1BB             >
 109++E1BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1BC 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1C0 41 44       >
 109++E1C2             >                org     $-1                 // alter last byte of Name just above to set
 109++E1C1 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1C2             >
 109++E1C2 AD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1C4             >Prev_Ptr        defl    Heap_Ptr
 109++E1C4             >
 109++E1C4             >mirror_Ptr      defl    $
 109++E1C4             >
 109++E1C4 2F 67       >                dw      Dict_Ptr + 2        // xt
 109++E1C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1C6             >
 109++E1C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1C6             >
 109++E1C6             >//              ______________________________________________________________________
 109++E1C6             >//              Dictionary part
 109++E1C6             >
 109++E1C6             >                org     Dict_Ptr
 109++672D             >
 109++672D C4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++672F             >
 109++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++672F ~           >
 109++672F ~           >
 109++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++672F             >
 109++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++672F D9                            exx
 111++6730 E1                            pop     hl
 112++6731 7D                            ld      a, l                // file-handle
 113++6732 C1                            pop     bc                  // bc has bytes to read
 114++6733 DD E3                         ex      (sp), ix            // ix has address
 115++6735 D9                           exx
 116++6736 D5                           push    de                  // Save Return Stack pointer
 117++6737 C5                           push    bc                  // Save Instruction pointer
 118++6738 D9                            exx
 119++6739 CF                            rst     $08
 120++673A 9D                            db      $9D
 121++673B              F_Read_Exit:
 122++673B D9                           exx
 123++673C C1                           pop     bc                  // Restore Instruction pointer
 124++673D D1                           pop     de                  // Restore Return Stack pointer
 125++673E DD E1                        pop     ix                  // Restore ix
 126++6740 D9                            exx
 127++6741 D5                            push    de                  // bytes involved in i/o operation
 128++6742 ED 62                         sbc     hl, hl
 129++6744 E5                            push    hl
 130++6745 D9                           exx
 131++6746                              next
 131++6746 DD E9       >                jp      (ix)
 132++6748
 133++6748              //  ______________________________________________________________________
 134++6748              //
 135++6748              // f_write      a b u -- n f
 136++6748              // Write bytes currently stored at address a to file-handle u.
 137++6748              // Return the actual n bytes written and 0 on success, True flag on error.
 138++6748                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++6748             >
 138++6748             >Dict_Ptr        defl    $
 138++6748             >
 138++6748             >//              ______________________________________________________________________
 138++6748             >//              Heap part
 138++6748             >
 138++6748             >
 138++6748             >                org     (Heap_Ptr & $1FFF) + $E000
 138++E1C6             >
 138++E1C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++E1C6             >Latest_Definition defl  Heap_Ptr
 138++E1C6             >
 138++E1C6             >                // dummy db directives used to calculate length of namec
 138++E1C6 46 5F 57 52 >                db      "F_WRITE"
 138++E1CA 49 54 45    >
 138++E1CD             >len_NFA         defl    $ - temp_NFA
 138++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++E1C6             >
 138++E1C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++E1C7 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++E1CB 49 54 45    >
 138++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 138++E1CD C5          >                db      {b $} | END_BIT     // msb as name end
 138++E1CE             >
 138++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138++E1D0             >Prev_Ptr        defl    Heap_Ptr
 138++E1D0             >
 138++E1D0             >mirror_Ptr      defl    $
 138++E1D0             >
 138++E1D0 4A 67       >                dw      Dict_Ptr + 2        // xt
 138++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 138++E1D2             >
 138++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 138++E1D2             >
 138++E1D2             >//              ______________________________________________________________________
 138++E1D2             >//              Dictionary part
 138++E1D2             >
 138++E1D2             >                org     Dict_Ptr
 138++6748             >
 138++6748 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 138++674A             >
 138++674A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++674A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++674A ~           >
 138++674A ~           >
 138++674A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++674A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++674A             >
 138++674A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++674A D9                            exx
 140++674B E1                            pop     hl
 141++674C 7D                            ld      a, l                // file-handle
 142++674D C1                            pop     bc                  // bc has bytes to read
 143++674E DD E3                         ex      (sp), ix            // ix has address
 144++6750 D9                           exx
 145++6751 D5                           push    de                  // Save Return Stack pointer
 146++6752 C5                           push    bc                  // Save Instruction pointer
 147++6753 D9                            exx
 148++6754 CF                            rst     $08
 149++6755 9E                            db      $9E
 150++6756 18 E3                         jr F_Read_Exit
 151++6758              //                exx
 152++6758              //                pop     de                  // Restore Return Stack pointer
 153++6758              //                pop     bc                  // Restore Instruction pointer
 154++6758              //                pop     ix                  // Restore ix
 155++6758              //                 exx
 156++6758              //                 push    de                  // bytes involved in i/o operation
 157++6758              //                 sbc     hl, hl
 158++6758              //                 push    hl
 159++6758              //                exx
 160++6758              //                next
 161++6758
 162++6758              //  ______________________________________________________________________
 163++6758              //
 164++6758              // f_open       a1 a2 b -- u f
 165++6758              // open a file
 166++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++6758              // a2 is address to an 8-byte header data used in some cases.
 168++6758              // b is access mode-byte, that is a combination of:
 169++6758              // any/all of:
 170++6758              //   esx_mode_read          $01 request read access
 171++6758              //   esx_mode_write         $02 request write access
 172++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 173++6758              // plus one of:
 174++6758              //   esx_mode_open_exist    $00 only open existing file
 175++6758              //   esx_mode_open_creat    $08 open existing or create file
 176++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++6758              // Return file-handle u and 0 on success, True flag on error
 179++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++6758             >
 179++6758             >Dict_Ptr        defl    $
 179++6758             >
 179++6758             >//              ______________________________________________________________________
 179++6758             >//              Heap part
 179++6758             >
 179++6758             >
 179++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 179++E1D2             >
 179++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++E1D2             >Latest_Definition defl  Heap_Ptr
 179++E1D2             >
 179++E1D2             >                // dummy db directives used to calculate length of namec
 179++E1D2 46 5F 4F 50 >                db      "F_OPEN"
 179++E1D6 45 4E       >
 179++E1D8             >len_NFA         defl    $ - temp_NFA
 179++E1D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++E1D2             >
 179++E1D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++E1D3 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++E1D7 45 4E       >
 179++E1D9             >                org     $-1                 // alter last byte of Name just above to set
 179++E1D8 CE          >                db      {b $} | END_BIT     // msb as name end
 179++E1D9             >
 179++E1D9 C6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179++E1DB             >Prev_Ptr        defl    Heap_Ptr
 179++E1DB             >
 179++E1DB             >mirror_Ptr      defl    $
 179++E1DB             >
 179++E1DB 5A 67       >                dw      Dict_Ptr + 2        // xt
 179++E1DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 179++E1DD             >
 179++E1DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 179++E1DD             >
 179++E1DD             >//              ______________________________________________________________________
 179++E1DD             >//              Dictionary part
 179++E1DD             >
 179++E1DD             >                org     Dict_Ptr
 179++6758             >
 179++6758 DB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 179++675A             >
 179++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++675A ~           >
 179++675A ~           >
 179++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++675A             >
 179++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++675A D9                            exx
 181++675B C1                            pop     bc                  // file-mode
 182++675C 41                            ld      b, c                // file-mode
 183++675D D1                            pop     de                  // 8-bytes buffer if any
 184++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6760 D9                           exx
 186++6761 D5                           push    de                  // Save Return Stack pointer
 187++6762 C5                           push    bc                  // Save Instruction pointer
 188++6763 D9                            exx
 189++6764 3E 2A                         ld      a, "*"
 190++6766 CF                            rst     $08
 191++6767 9A                            db      $9A
 192++6768              F_Open_Exit:
 193++6768 5F                            ld      e, a                // return the handle-number
 194++6769 16 00                         ld      d, 0
 195++676B 18 CE                        jr F_Read_Exit
 196++676D
 197++676D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++676D              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++676D              //   \ DROP
 200++676D              //   \ F_CLOSE
 201++676D
 202++676D
 203++676D              //  ______________________________________________________________________
 204++676D              //
 205++676D              // f_opendir    a1 -- u f
 206++676D              // open a file
 207++676D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++676D             >
 207++676D             >Dict_Ptr        defl    $
 207++676D             >
 207++676D             >//              ______________________________________________________________________
 207++676D             >//              Heap part
 207++676D             >
 207++676D             >
 207++676D             >                org     (Heap_Ptr & $1FFF) + $E000
 207++E1DD             >
 207++E1DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++E1DD             >Latest_Definition defl  Heap_Ptr
 207++E1DD             >
 207++E1DD             >                // dummy db directives used to calculate length of namec
 207++E1DD 46 5F 4F 50 >                db      "F_OPENDIR"
 207++E1E1 45 4E 44 49 >
 207++E1E5 52          >
 207++E1E6             >len_NFA         defl    $ - temp_NFA
 207++E1E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++E1DD             >
 207++E1DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++E1DE 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++E1E2 45 4E 44 49 >
 207++E1E6 52          >
 207++E1E7             >                org     $-1                 // alter last byte of Name just above to set
 207++E1E6 D2          >                db      {b $} | END_BIT     // msb as name end
 207++E1E7             >
 207++E1E7 D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207++E1E9             >Prev_Ptr        defl    Heap_Ptr
 207++E1E9             >
 207++E1E9             >mirror_Ptr      defl    $
 207++E1E9             >
 207++E1E9 6F 67       >                dw      Dict_Ptr + 2        // xt
 207++E1EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 207++E1EB             >
 207++E1EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 207++E1EB             >
 207++E1EB             >//              ______________________________________________________________________
 207++E1EB             >//              Dictionary part
 207++E1EB             >
 207++E1EB             >                org     Dict_Ptr
 207++676D             >
 207++676D E9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 207++676F             >
 207++676F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++676F ~           >
 207++676F ~           >
 207++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++676F             >
 207++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++676F DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6771 D5                           push    de                  // Save Return Stack pointer
 210++6772 C5                           push    bc                  // Save Instruction pointer
 211++6773 06 10                        ld      b, $10              // file-mode
 212++6775 3E 43                        ld      a, "C"
 213++6777 CF                           rst     $08
 214++6778 A3                           db      $A3
 215++6779 18 ED                        jr      F_Open_Exit
 216++677B
 217++677B
 218++677B              //  ______________________________________________________________________
 219++677B              //
 220++677B              // f_readdir    a1 a2 b -- u f
 221++677B              // open a file
 222++677B                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++677B             >
 222++677B             >Dict_Ptr        defl    $
 222++677B             >
 222++677B             >//              ______________________________________________________________________
 222++677B             >//              Heap part
 222++677B             >
 222++677B             >
 222++677B             >                org     (Heap_Ptr & $1FFF) + $E000
 222++E1EB             >
 222++E1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++E1EB             >Latest_Definition defl  Heap_Ptr
 222++E1EB             >
 222++E1EB             >                // dummy db directives used to calculate length of namec
 222++E1EB 46 5F 52 45 >                db      "F_READDIR"
 222++E1EF 41 44 44 49 >
 222++E1F3 52          >
 222++E1F4             >len_NFA         defl    $ - temp_NFA
 222++E1F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++E1EB             >
 222++E1EB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++E1EC 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++E1F0 41 44 44 49 >
 222++E1F4 52          >
 222++E1F5             >                org     $-1                 // alter last byte of Name just above to set
 222++E1F4 D2          >                db      {b $} | END_BIT     // msb as name end
 222++E1F5             >
 222++E1F5 DD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222++E1F7             >Prev_Ptr        defl    Heap_Ptr
 222++E1F7             >
 222++E1F7             >mirror_Ptr      defl    $
 222++E1F7             >
 222++E1F7 7D 67       >                dw      Dict_Ptr + 2        // xt
 222++E1F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 222++E1F9             >
 222++E1F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 222++E1F9             >
 222++E1F9             >//              ______________________________________________________________________
 222++E1F9             >//              Dictionary part
 222++E1F9             >
 222++E1F9             >                org     Dict_Ptr
 222++677B             >
 222++677B F7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 222++677D             >
 222++677D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++677D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++677D ~           >
 222++677D ~           >
 222++677D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++677D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++677D             >
 222++677D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++677D D9                            exx
 224++677E E1                            pop     hl
 225++677F 7D                            ld      a, l
 226++6780 D1                            pop     de
 227++6781 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6783 D9                           exx
 229++6784 D5                           push    de                  // Save Return Stack pointer
 230++6785 C5                           push    bc                  // Save Instruction pointer
 231++6786 D9                            exx
 232++6787 CF                            rst     $08
 233++6788 A4                            db      $A4
 234++6789 18 DD                         jr      F_Open_Exit
 235++678B
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1081+ 678B
1082+ 678B
1083+ 678B              //  ______________________________________________________________________
1084+ 678B              //
1085+ 678B              // cmove    a1 a2 u --
1086+ 678B              // If u > 0, moves memory content starting at address a1 for n bytes long
1087+ 678B              // storing then starting at address addr2.
1088+ 678B              // The content of a1 is moved first. See CMOVE> also.
1089+ 678B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1089+ 678B             >
1089+ 678B             >Dict_Ptr        defl    $
1089+ 678B             >
1089+ 678B             >//              ______________________________________________________________________
1089+ 678B             >//              Heap part
1089+ 678B             >
1089+ 678B             >
1089+ 678B             >                org     (Heap_Ptr & $1FFF) + $E000
1089+ E1F9             >
1089+ E1F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ E1F9             >Latest_Definition defl  Heap_Ptr
1089+ E1F9             >
1089+ E1F9             >                // dummy db directives used to calculate length of namec
1089+ E1F9 43 4D 4F 56 >                db      "CMOVE"
1089+ E1FD 45          >
1089+ E1FE             >len_NFA         defl    $ - temp_NFA
1089+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ E1F9             >
1089+ E1F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ E1FA 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1089+ E1FE 45          >
1089+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1089+ E1FE C5          >                db      {b $} | END_BIT     // msb as name end
1089+ E1FF             >
1089+ E1FF EB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1089+ E201             >Prev_Ptr        defl    Heap_Ptr
1089+ E201             >
1089+ E201             >mirror_Ptr      defl    $
1089+ E201             >
1089+ E201 8D 67       >                dw      Dict_Ptr + 2        // xt
1089+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1089+ E203             >
1089+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1089+ E203             >
1089+ E203             >//              ______________________________________________________________________
1089+ E203             >//              Dictionary part
1089+ E203             >
1089+ E203             >                org     Dict_Ptr
1089+ 678B             >
1089+ 678B 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1089+ 678D             >
1089+ 678D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1089+ 678D ~           >
1089+ 678D ~           >
1089+ 678D             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 678D             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 678D             >
1089+ 678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 678D D9                           exx
1091+ 678E
1092+ 678E C1                           pop     bc                  // bc has counter
1093+ 678F D1                           pop     de                  // de now has dest
1094+ 6790 E1                           pop     hl                 // hl has source, save Instruction Pointer
1095+ 6791 78                           ld      a, b
1096+ 6792 B1                           or      c
1097+ 6793 28 02                        jr      z, Cmove_NoMove
1098+ 6795 ED B0                            ldir
1099+ 6797              Cmove_NoMove:
1100+ 6797 D9                           exx
1101+ 6798
1102+ 6798                              next
1102+ 6798 DD E9       >                jp      (ix)
1103+ 679A
1104+ 679A              //  ______________________________________________________________________
1105+ 679A              //
1106+ 679A              // cmove>    a1 a2 u --
1107+ 679A              // If u > 0, moves memory content starting at address a1 for n bytes long
1108+ 679A              // storing then starting at address addr2.
1109+ 679A              // The content of a1 is moved last. See cmove.
1110+ 679A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1110+ 679A             >
1110+ 679A             >Dict_Ptr        defl    $
1110+ 679A             >
1110+ 679A             >//              ______________________________________________________________________
1110+ 679A             >//              Heap part
1110+ 679A             >
1110+ 679A             >
1110+ 679A             >                org     (Heap_Ptr & $1FFF) + $E000
1110+ E203             >
1110+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ E203             >Latest_Definition defl  Heap_Ptr
1110+ E203             >
1110+ E203             >                // dummy db directives used to calculate length of namec
1110+ E203 43 4D 4F 56 >                db      "CMOVE>"
1110+ E207 45 3E       >
1110+ E209             >len_NFA         defl    $ - temp_NFA
1110+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ E203             >
1110+ E203 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ E204 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1110+ E208 45 3E       >
1110+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1110+ E209 BE          >                db      {b $} | END_BIT     // msb as name end
1110+ E20A             >
1110+ E20A F9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1110+ E20C             >Prev_Ptr        defl    Heap_Ptr
1110+ E20C             >
1110+ E20C             >mirror_Ptr      defl    $
1110+ E20C             >
1110+ E20C 9C 67       >                dw      Dict_Ptr + 2        // xt
1110+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1110+ E20E             >
1110+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1110+ E20E             >
1110+ E20E             >//              ______________________________________________________________________
1110+ E20E             >//              Dictionary part
1110+ E20E             >
1110+ E20E             >                org     Dict_Ptr
1110+ 679A             >
1110+ 679A 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1110+ 679C             >
1110+ 679C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1110+ 679C ~           >
1110+ 679C ~           >
1110+ 679C             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 679C             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 679C             >
1110+ 679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 679C D9                           exx
1112+ 679D
1113+ 679D C1                           pop     bc                  // bc has counter
1114+ 679E D1                           pop     de                  // de has dest
1115+ 679F E1                           pop     hl                  // hl has source, save Instruction Pointer
1116+ 67A0 78                           ld      a, b
1117+ 67A1 B1                           or      c
1118+ 67A2 28 08                        jr      z, CmoveV_NoMove
1119+ 67A4 EB                               ex      de, hl              // compute address to
1120+ 67A5 09                               add     hl, bc              // operate backward
1121+ 67A6 2B                               dec     hl
1122+ 67A7 EB                               ex      de, hl
1123+ 67A8 09                               add     hl, bc
1124+ 67A9 2B                               dec     hl
1125+ 67AA ED B8                            lddr                        // backward
1126+ 67AC              CmoveV_NoMove:
1127+ 67AC D9                           exx
1128+ 67AD
1129+ 67AD                              next
1129+ 67AD DD E9       >                jp      (ix)
1130+ 67AF
1131+ 67AF              //  ______________________________________________________________________
1132+ 67AF              //
1133+ 67AF              // um*      u1 u2 -- ud
1134+ 67AF              // Unsigned multiplication
1135+ 67AF              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1136+ 67AF              // On the stack a double number is treated as two single numbers
1137+ 67AF              // where DE is on the top of the stack and HL is the second from top,
1138+ 67AF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1139+ 67AF              // this definition could use "MUL" Z80N new op-code.
1140+ 67AF                              New_Def UM_MUL, "UM*", is_code, is_normal
1140+ 67AF             >
1140+ 67AF             >Dict_Ptr        defl    $
1140+ 67AF             >
1140+ 67AF             >//              ______________________________________________________________________
1140+ 67AF             >//              Heap part
1140+ 67AF             >
1140+ 67AF             >
1140+ 67AF             >                org     (Heap_Ptr & $1FFF) + $E000
1140+ E20E             >
1140+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1140+ E20E             >Latest_Definition defl  Heap_Ptr
1140+ E20E             >
1140+ E20E             >                // dummy db directives used to calculate length of namec
1140+ E20E 55 4D 2A    >                db      "UM*"
1140+ E211             >len_NFA         defl    $ - temp_NFA
1140+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1140+ E20E             >
1140+ E20E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1140+ E20F 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1140+ E212             >                org     $-1                 // alter last byte of Name just above to set
1140+ E211 AA          >                db      {b $} | END_BIT     // msb as name end
1140+ E212             >
1140+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1140+ E214             >Prev_Ptr        defl    Heap_Ptr
1140+ E214             >
1140+ E214             >mirror_Ptr      defl    $
1140+ E214             >
1140+ E214 B1 67       >                dw      Dict_Ptr + 2        // xt
1140+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1140+ E216             >
1140+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1140+ E216             >
1140+ E216             >//              ______________________________________________________________________
1140+ E216             >//              Dictionary part
1140+ E216             >
1140+ E216             >                org     Dict_Ptr
1140+ 67AF             >
1140+ 67AF 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1140+ 67B1             >
1140+ 67B1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1140+ 67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1140+ 67B1 ~           >
1140+ 67B1 ~           >
1140+ 67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1140+ 67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1140+ 67B1             >
1140+ 67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1141+ 67B1 D9                           exx
1142+ 67B2 D1                           pop     de                    // de has u2 operand
1143+ 67B3 E1                           pop     hl                    // hl has u1 operand
1144+ 67B4 45                           ld      b, l
1145+ 67B5 4B                           ld      c, e
1146+ 67B6 5D                           ld      e, l
1147+ 67B7 6A                           ld      l, d
1148+ 67B8 E5                           push    hl
1149+ 67B9 69                           ld      l, c
1150+ 67BA ED 30                        mul
1151+ 67BC EB                           ex      de, hl
1152+ 67BD ED 30                        mul
1153+ 67BF AF                           xor     a
1154+ 67C0 19                           add     hl, de
1155+ 67C1 8F                           adc     a
1156+ 67C2 59                           ld      e, c
1157+ 67C3 50                           ld      d, b
1158+ 67C4 ED 30                        mul
1159+ 67C6 47                           ld      b, a
1160+ 67C7 4C                           ld      c, h
1161+ 67C8 7A                           ld      a, d
1162+ 67C9 85                           add     l
1163+ 67CA 67                           ld      h, a
1164+ 67CB 6B                           ld      l, e
1165+ 67CC D1                           pop     de
1166+ 67CD ED 30                        mul
1167+ 67CF EB                           ex      de, hl
1168+ 67D0 ED 4A                        adc     hl, bc
1169+ 67D2 D5                           push    de
1170+ 67D3 E5                           push    hl
1171+ 67D4 D9                           exx
1172+ 67D5                              next
1172+ 67D5 DD E9       >                jp      (ix)
1173+ 67D7
1174+ 67D7              //  ______________________________________________________________________
1175+ 67D7              //
1176+ 67D7              // um/mod      ud u1 -- q r
1177+ 67D7              // divides ud into u1 giving quotient q and remainder r
1178+ 67D7              // algorithm takes 16 bit at a time starting from msb
1179+ 67D7              // DE grows from lsb upward with quotient result
1180+ 67D7              // HL keeps the remainder at each stage of division
1181+ 67D7              // each loop 'lowers' the next binary digit to form the current dividend
1182+ 67D7                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1182+ 67D7             >
1182+ 67D7             >Dict_Ptr        defl    $
1182+ 67D7             >
1182+ 67D7             >//              ______________________________________________________________________
1182+ 67D7             >//              Heap part
1182+ 67D7             >
1182+ 67D7             >
1182+ 67D7             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E216             >
1182+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E216             >Latest_Definition defl  Heap_Ptr
1182+ E216             >
1182+ E216             >                // dummy db directives used to calculate length of namec
1182+ E216 55 4D 2F 4D >                db      "UM/MOD"
1182+ E21A 4F 44       >
1182+ E21C             >len_NFA         defl    $ - temp_NFA
1182+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E216             >
1182+ E216 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E217 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1182+ E21B 4F 44       >
1182+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1182+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1182+ E21D             >
1182+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1182+ E21F             >Prev_Ptr        defl    Heap_Ptr
1182+ E21F             >
1182+ E21F             >mirror_Ptr      defl    $
1182+ E21F             >
1182+ E21F D9 67       >                dw      Dict_Ptr + 2        // xt
1182+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E221             >
1182+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E221             >
1182+ E221             >//              ______________________________________________________________________
1182+ E221             >//              Dictionary part
1182+ E221             >
1182+ E221             >                org     Dict_Ptr
1182+ 67D7             >
1182+ 67D7 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1182+ 67D9             >
1182+ 67D9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 67D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1182+ 67D9 ~           >
1182+ 67D9 ~           >
1182+ 67D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 67D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 67D9             >
1182+ 67D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 67D9 D9                           exx
1184+ 67DA C1                           pop     bc                      // divisor
1185+ 67DB
1186+ 67DB E1                           pop     hl                      // < high part
1187+ 67DC D1                           pop     de                      // < low part and
1188+ 67DD
1189+ 67DD 7D                           ld      a, l                    // check without changing arguments
1190+ 67DE 91                           sub     c                       // if divisor is greater than high part
1191+ 67DF 7C                           ld      a, h                    // so quotient will be in range
1192+ 67E0 98                           sbc     a, b
1193+ 67E1 30 20                        jr      nc, Um_DivMod_OutOfRange
1194+ 67E3 3E 10                            ld      a, 16
1195+ 67E5              Um_DivMod_Loop:
1196+ 67E5 CB 23                                sla     e
1197+ 67E7 CB 12                                rl      d
1198+ 67E9 ED 6A                                adc     hl, hl
1199+ 67EB 30 05                                jr      nc, Um_DivMod_Carry
1200+ 67ED A7                                       and     a
1201+ 67EE ED 42                                    sbc     hl, bc
1202+ 67F0 18 07                                jr      Um_DivMod_Endif    // else
1203+ 67F2              Um_DivMod_Carry:
1204+ 67F2 A7                                       and     a
1205+ 67F3 ED 42                                    sbc     hl, bc
1206+ 67F5 30 02                                    jr      nc, Um_DivMod_Endif
1207+ 67F7 09                                           add     hl, bc
1208+ 67F8 1B                                           dec     de
1209+ 67F9              Um_DivMod_Endif:                                   // endif
1210+ 67F9 13                                   inc     de
1211+ 67FA 3D                                   dec     a
1212+ 67FB 20 E8                            jr      nz, Um_DivMod_Loop
1213+ 67FD EB                               ex      de, hl
1214+ 67FE              Um_DivMod_Bailout:
1215+ 67FE D5                               push    de                  // de := remanider
1216+ 67FF E5                               push    hl                  // hl := quotient
1217+ 6800 D9                               exx
1218+ 6801                                  next
1218+ 6801 DD E9       >                jp      (ix)
1219+ 6803
1220+ 6803              Um_DivMod_OutOfRange:
1221+ 6803 21 FF FF                     ld      hl, -1
1222+ 6806 54                           ld      d, h
1223+ 6807 5D                           ld      e, l
1224+ 6808 18 F4                        jr      Um_DivMod_Bailout
1225+ 680A
1226+ 680A              //  ______________________________________________________________________
1227+ 680A              //
1228+ 680A              // and          n1 n2 -- n3
1229+ 680A              // bit logical AND. Returns n3 as n1 & n2
1230+ 680A                              New_Def AND_OP, "AND", is_code, is_normal
1230+ 680A             >
1230+ 680A             >Dict_Ptr        defl    $
1230+ 680A             >
1230+ 680A             >//              ______________________________________________________________________
1230+ 680A             >//              Heap part
1230+ 680A             >
1230+ 680A             >
1230+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1230+ E221             >
1230+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ E221             >Latest_Definition defl  Heap_Ptr
1230+ E221             >
1230+ E221             >                // dummy db directives used to calculate length of namec
1230+ E221 41 4E 44    >                db      "AND"
1230+ E224             >len_NFA         defl    $ - temp_NFA
1230+ E224             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ E221             >
1230+ E221 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ E222 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1230+ E225             >                org     $-1                 // alter last byte of Name just above to set
1230+ E224 C4          >                db      {b $} | END_BIT     // msb as name end
1230+ E225             >
1230+ E225 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1230+ E227             >Prev_Ptr        defl    Heap_Ptr
1230+ E227             >
1230+ E227             >mirror_Ptr      defl    $
1230+ E227             >
1230+ E227 0C 68       >                dw      Dict_Ptr + 2        // xt
1230+ E229             >Heap_Ptr        defl    $ - $E000           // save current HP
1230+ E229             >
1230+ E229             >Current_HP      defl  $ - $E000             // used to set HP once!
1230+ E229             >
1230+ E229             >//              ______________________________________________________________________
1230+ E229             >//              Dictionary part
1230+ E229             >
1230+ E229             >                org     Dict_Ptr
1230+ 680A             >
1230+ 680A 27 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1230+ 680C             >
1230+ 680C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1230+ 680C ~           >
1230+ 680C ~           >
1230+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 680C             >
1230+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 680C D9                           exx
1232+ 680D D1                           pop     de
1233+ 680E E1                           pop     hl
1234+ 680F 7B                           ld      a, e
1235+ 6810 A5                           and     l
1236+ 6811 6F                           ld      l, a
1237+ 6812 7A                           ld      a, d
1238+ 6813 A4                           and     h
1239+ 6814              Boolean_exit:
1240+ 6814 67                           ld      h, a
1241+ 6815 E5                           push    hl
1242+ 6816 D9                           exx
1243+ 6817                              next
1243+ 6817 DD E9       >                jp      (ix)
1244+ 6819
1245+ 6819              //  ______________________________________________________________________
1246+ 6819              //
1247+ 6819              // or           n1 n2 -- n3
1248+ 6819              // bit logical OR. Returns n3 as n1 | n2
1249+ 6819                              New_Def OR_OP, "OR", is_code, is_normal
1249+ 6819             >
1249+ 6819             >Dict_Ptr        defl    $
1249+ 6819             >
1249+ 6819             >//              ______________________________________________________________________
1249+ 6819             >//              Heap part
1249+ 6819             >
1249+ 6819             >
1249+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1249+ E229             >
1249+ E229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ E229             >Latest_Definition defl  Heap_Ptr
1249+ E229             >
1249+ E229             >                // dummy db directives used to calculate length of namec
1249+ E229 4F 52       >                db      "OR"
1249+ E22B             >len_NFA         defl    $ - temp_NFA
1249+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ E229             >
1249+ E229 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ E22A 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1249+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1249+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1249+ E22C             >
1249+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1249+ E22E             >Prev_Ptr        defl    Heap_Ptr
1249+ E22E             >
1249+ E22E             >mirror_Ptr      defl    $
1249+ E22E             >
1249+ E22E 1B 68       >                dw      Dict_Ptr + 2        // xt
1249+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1249+ E230             >
1249+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1249+ E230             >
1249+ E230             >//              ______________________________________________________________________
1249+ E230             >//              Dictionary part
1249+ E230             >
1249+ E230             >                org     Dict_Ptr
1249+ 6819             >
1249+ 6819 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1249+ 681B             >
1249+ 681B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 681B ~           >
1249+ 681B ~           >
1249+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 681B             >
1249+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 681B D9                           exx
1251+ 681C D1                           pop     de
1252+ 681D E1                           pop     hl
1253+ 681E 7B                           ld      a, e
1254+ 681F B5                           or      l
1255+ 6820 6F                           ld      l, a
1256+ 6821 7A                           ld      a, d
1257+ 6822 B4                           or      h
1258+ 6823 18 EF                        jr      Boolean_exit
1259+ 6825                        //    ld      h, a
1260+ 6825                        //    push    hl
1261+ 6825                        //    exx
1262+ 6825                        //    next
1263+ 6825
1264+ 6825              //  ______________________________________________________________________
1265+ 6825              //
1266+ 6825              // xor          n1 n2 -- n3
1267+ 6825              // bit logical OR. Returns n3 as n1 ^ n2
1268+ 6825                              New_Def XOR_OP, "XOR", is_code, is_normal
1268+ 6825             >
1268+ 6825             >Dict_Ptr        defl    $
1268+ 6825             >
1268+ 6825             >//              ______________________________________________________________________
1268+ 6825             >//              Heap part
1268+ 6825             >
1268+ 6825             >
1268+ 6825             >                org     (Heap_Ptr & $1FFF) + $E000
1268+ E230             >
1268+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ E230             >Latest_Definition defl  Heap_Ptr
1268+ E230             >
1268+ E230             >                // dummy db directives used to calculate length of namec
1268+ E230 58 4F 52    >                db      "XOR"
1268+ E233             >len_NFA         defl    $ - temp_NFA
1268+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ E230             >
1268+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ E231 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1268+ E234             >                org     $-1                 // alter last byte of Name just above to set
1268+ E233 D2          >                db      {b $} | END_BIT     // msb as name end
1268+ E234             >
1268+ E234 29 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1268+ E236             >Prev_Ptr        defl    Heap_Ptr
1268+ E236             >
1268+ E236             >mirror_Ptr      defl    $
1268+ E236             >
1268+ E236 27 68       >                dw      Dict_Ptr + 2        // xt
1268+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1268+ E238             >
1268+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1268+ E238             >
1268+ E238             >//              ______________________________________________________________________
1268+ E238             >//              Dictionary part
1268+ E238             >
1268+ E238             >                org     Dict_Ptr
1268+ 6825             >
1268+ 6825 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1268+ 6827             >
1268+ 6827             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 6827 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1268+ 6827 ~           >
1268+ 6827 ~           >
1268+ 6827             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 6827             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 6827             >
1268+ 6827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 6827 D9                           exx
1270+ 6828 D1                           pop     de
1271+ 6829 E1                           pop     hl
1272+ 682A 7B                           ld      a, e
1273+ 682B AD                           xor     l
1274+ 682C 6F                           ld      l, a
1275+ 682D 7A                           ld      a, d
1276+ 682E AC                           xor     h
1277+ 682F 18 E3                        jr      Boolean_exit
1278+ 6831                        //    ld      h, a
1279+ 6831                        //    push    hl
1280+ 6831                        //    exx
1281+ 6831                        //    next
1282+ 6831
1283+ 6831              //  ______________________________________________________________________
1284+ 6831              //
1285+ 6831              // sp@      -- a
1286+ 6831              // returns on top of stack the value of SP before execution
1287+ 6831                              New_Def SPFETCH, "SP@", is_code, is_normal
1287+ 6831             >
1287+ 6831             >Dict_Ptr        defl    $
1287+ 6831             >
1287+ 6831             >//              ______________________________________________________________________
1287+ 6831             >//              Heap part
1287+ 6831             >
1287+ 6831             >
1287+ 6831             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E238             >
1287+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E238             >Latest_Definition defl  Heap_Ptr
1287+ E238             >
1287+ E238             >                // dummy db directives used to calculate length of namec
1287+ E238 53 50 40    >                db      "SP@"
1287+ E23B             >len_NFA         defl    $ - temp_NFA
1287+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E238             >
1287+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E239 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1287+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1287+ E23B C0          >                db      {b $} | END_BIT     // msb as name end
1287+ E23C             >
1287+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E23E             >Prev_Ptr        defl    Heap_Ptr
1287+ E23E             >
1287+ E23E             >mirror_Ptr      defl    $
1287+ E23E             >
1287+ E23E 33 68       >                dw      Dict_Ptr + 2        // xt
1287+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E240             >
1287+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E240             >
1287+ E240             >//              ______________________________________________________________________
1287+ E240             >//              Dictionary part
1287+ E240             >
1287+ E240             >                org     Dict_Ptr
1287+ 6831             >
1287+ 6831 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 6833             >
1287+ 6833             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 6833 ~           >
1287+ 6833 ~           >
1287+ 6833             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 6833             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 6833             >
1287+ 6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 6833
1289+ 6833 21 00 00                     ld      hl, 0
1290+ 6836 39                           add     hl, sp
1291+ 6837
1292+ 6837                              psh1
1292+ 6837 E5          >                push    hl
1292+ 6838 DD E9       >                jp      (ix)
1293+ 683A
1294+ 683A              //  ______________________________________________________________________
1295+ 683A              //
1296+ 683A              // sp!      a --
1297+ 683A              // restore SP to the initial value passed
1298+ 683A              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1299+ 683A                              New_Def SPSTORE, "SP!", is_code, is_normal
1299+ 683A             >
1299+ 683A             >Dict_Ptr        defl    $
1299+ 683A             >
1299+ 683A             >//              ______________________________________________________________________
1299+ 683A             >//              Heap part
1299+ 683A             >
1299+ 683A             >
1299+ 683A             >                org     (Heap_Ptr & $1FFF) + $E000
1299+ E240             >
1299+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ E240             >Latest_Definition defl  Heap_Ptr
1299+ E240             >
1299+ E240             >                // dummy db directives used to calculate length of namec
1299+ E240 53 50 21    >                db      "SP!"
1299+ E243             >len_NFA         defl    $ - temp_NFA
1299+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ E240             >
1299+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ E241 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1299+ E244             >                org     $-1                 // alter last byte of Name just above to set
1299+ E243 A1          >                db      {b $} | END_BIT     // msb as name end
1299+ E244             >
1299+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1299+ E246             >Prev_Ptr        defl    Heap_Ptr
1299+ E246             >
1299+ E246             >mirror_Ptr      defl    $
1299+ E246             >
1299+ E246 3C 68       >                dw      Dict_Ptr + 2        // xt
1299+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1299+ E248             >
1299+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1299+ E248             >
1299+ E248             >//              ______________________________________________________________________
1299+ E248             >//              Dictionary part
1299+ E248             >
1299+ E248             >                org     Dict_Ptr
1299+ 683A             >
1299+ 683A 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1299+ 683C             >
1299+ 683C             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 683C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1299+ 683C ~           >
1299+ 683C ~           >
1299+ 683C             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 683C             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 683C             >
1299+ 683C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 683C E1                           pop     hl
1301+ 683D F9                           ld      sp, hl
1302+ 683E
1303+ 683E                              next
1303+ 683E DD E9       >                jp      (ix)
1304+ 6840
1305+ 6840              //  ______________________________________________________________________
1306+ 6840              //
1307+ 6840              // rp@      -- a
1308+ 6840              // returns on top of stack the value of Return-Pointer
1309+ 6840                              New_Def RPFETCH, "RP@", is_code, is_normal
1309+ 6840             >
1309+ 6840             >Dict_Ptr        defl    $
1309+ 6840             >
1309+ 6840             >//              ______________________________________________________________________
1309+ 6840             >//              Heap part
1309+ 6840             >
1309+ 6840             >
1309+ 6840             >                org     (Heap_Ptr & $1FFF) + $E000
1309+ E248             >
1309+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ E248             >Latest_Definition defl  Heap_Ptr
1309+ E248             >
1309+ E248             >                // dummy db directives used to calculate length of namec
1309+ E248 52 50 40    >                db      "RP@"
1309+ E24B             >len_NFA         defl    $ - temp_NFA
1309+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ E248             >
1309+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ E249 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1309+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1309+ E24B C0          >                db      {b $} | END_BIT     // msb as name end
1309+ E24C             >
1309+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1309+ E24E             >Prev_Ptr        defl    Heap_Ptr
1309+ E24E             >
1309+ E24E             >mirror_Ptr      defl    $
1309+ E24E             >
1309+ E24E 42 68       >                dw      Dict_Ptr + 2        // xt
1309+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1309+ E250             >
1309+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1309+ E250             >
1309+ E250             >//              ______________________________________________________________________
1309+ E250             >//              Dictionary part
1309+ E250             >
1309+ E250             >                org     Dict_Ptr
1309+ 6840             >
1309+ 6840 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1309+ 6842             >
1309+ 6842             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 6842 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1309+ 6842 ~           >
1309+ 6842 ~           >
1309+ 6842             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 6842             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 6842             >
1309+ 6842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 6842
1311+ 6842                              // *** ldhlrp
1312+ 6842                              // *** ex      de, hl
1313+ 6842 D5                           push de
1314+ 6843
1315+ 6843                              next
1315+ 6843 DD E9       >                jp      (ix)
1316+ 6845
1317+ 6845              //  ______________________________________________________________________
1318+ 6845              //
1319+ 6845              // rp!      a --
1320+ 6845              // restore RP to the initial value passed
1321+ 6845              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1322+ 6845                              New_Def RPSTORE, "RP!", is_code, is_normal
1322+ 6845             >
1322+ 6845             >Dict_Ptr        defl    $
1322+ 6845             >
1322+ 6845             >//              ______________________________________________________________________
1322+ 6845             >//              Heap part
1322+ 6845             >
1322+ 6845             >
1322+ 6845             >                org     (Heap_Ptr & $1FFF) + $E000
1322+ E250             >
1322+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1322+ E250             >Latest_Definition defl  Heap_Ptr
1322+ E250             >
1322+ E250             >                // dummy db directives used to calculate length of namec
1322+ E250 52 50 21    >                db      "RP!"
1322+ E253             >len_NFA         defl    $ - temp_NFA
1322+ E253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1322+ E250             >
1322+ E250 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1322+ E251 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1322+ E254             >                org     $-1                 // alter last byte of Name just above to set
1322+ E253 A1          >                db      {b $} | END_BIT     // msb as name end
1322+ E254             >
1322+ E254 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1322+ E256             >Prev_Ptr        defl    Heap_Ptr
1322+ E256             >
1322+ E256             >mirror_Ptr      defl    $
1322+ E256             >
1322+ E256 47 68       >                dw      Dict_Ptr + 2        // xt
1322+ E258             >Heap_Ptr        defl    $ - $E000           // save current HP
1322+ E258             >
1322+ E258             >Current_HP      defl  $ - $E000             // used to set HP once!
1322+ E258             >
1322+ E258             >//              ______________________________________________________________________
1322+ E258             >//              Dictionary part
1322+ E258             >
1322+ E258             >                org     Dict_Ptr
1322+ 6845             >
1322+ 6845 56 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1322+ 6847             >
1322+ 6847             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1322+ 6847 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1322+ 6847 ~           >
1322+ 6847 ~           >
1322+ 6847             >                endif           ; ok        // for other definitions it "points" the correct handler
1322+ 6847             >                // Use of "; ok" to suppress "warning[fwdref]"
1322+ 6847             >
1322+ 6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1323+ 6847 D1                           pop     de
1324+ 6848                              // *** ex      de, hl
1325+ 6848                              // *** ldrphl
1326+ 6848
1327+ 6848                              next
1327+ 6848 DD E9       >                jp      (ix)
1328+ 684A
1329+ 684A              //  ______________________________________________________________________
1330+ 684A              //
1331+ 684A              // exit       --
1332+ 684A              // exits back to the caller word
1333+ 684A                              New_Def EXIT, "EXIT", is_code, is_normal
1333+ 684A             >
1333+ 684A             >Dict_Ptr        defl    $
1333+ 684A             >
1333+ 684A             >//              ______________________________________________________________________
1333+ 684A             >//              Heap part
1333+ 684A             >
1333+ 684A             >
1333+ 684A             >                org     (Heap_Ptr & $1FFF) + $E000
1333+ E258             >
1333+ E258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1333+ E258             >Latest_Definition defl  Heap_Ptr
1333+ E258             >
1333+ E258             >                // dummy db directives used to calculate length of namec
1333+ E258 45 58 49 54 >                db      "EXIT"
1333+ E25C             >len_NFA         defl    $ - temp_NFA
1333+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1333+ E258             >
1333+ E258 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1333+ E259 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1333+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1333+ E25C D4          >                db      {b $} | END_BIT     // msb as name end
1333+ E25D             >
1333+ E25D 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1333+ E25F             >Prev_Ptr        defl    Heap_Ptr
1333+ E25F             >
1333+ E25F             >mirror_Ptr      defl    $
1333+ E25F             >
1333+ E25F 4C 68       >                dw      Dict_Ptr + 2        // xt
1333+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1333+ E261             >
1333+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1333+ E261             >
1333+ E261             >//              ______________________________________________________________________
1333+ E261             >//              Dictionary part
1333+ E261             >
1333+ E261             >                org     Dict_Ptr
1333+ 684A             >
1333+ 684A 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1333+ 684C             >
1333+ 684C             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1333+ 684C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1333+ 684C ~           >
1333+ 684C ~           >
1333+ 684C             >                endif           ; ok        // for other definitions it "points" the correct handler
1333+ 684C             >                // Use of "; ok" to suppress "warning[fwdref]"
1333+ 684C             >
1333+ 684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1334+ 684C EB                           ex      de, hl
1335+ 684D                              // *** ldhlrp                      // Get Return Stack Pointer
1336+ 684D 4E                           ld      c, (hl)             // pop Instruction Pointer
1337+ 684E 23                           inc     hl                  // from Return Stack
1338+ 684F 46                           ld      b, (hl)
1339+ 6850 23                           inc     hl
1340+ 6851                              // *** ldrphl                      // Set Return Stack Pointer
1341+ 6851 EB                           ex      de, hl
1342+ 6852                              next
1342+ 6852 DD E9       >                jp      (ix)
1343+ 6854
1344+ 6854              //  ______________________________________________________________________
1345+ 6854              //
1346+ 6854              // lastl      --
1347+ 6854              // exits back to the caller word
1348+ 6854              //              New_Def EXIT, "LASTL", is_code, is_normal
1349+ 6854              //              push    de
1350+ 6854              //              ex      de, hl //**
1351+ 6854              //              // *** ldhlrp                      // Get Return Stack Pointer
1352+ 6854              //              ld      e, (hl)             // pop Instruction Pointer
1353+ 6854              //              inc     hl                  // from Return Stack
1354+ 6854              //              ld      d, (hl)
1355+ 6854              //              inc     hl
1356+ 6854              //              ld      (hl), e
1357+ 6854              //              inc     hl
1358+ 6854              //              ld      (hl), d
1359+ 6854              //              add     hl, -3
1360+ 6854              //              pop     de
1361+ 6854              //              next
1362+ 6854
1363+ 6854              //  ______________________________________________________________________
1364+ 6854              //
1365+ 6854              // >r      n --
1366+ 6854              // pop from calculator-stack and push into return-stack
1367+ 6854                              New_Def TO_R, ">R", is_code, is_normal
1367+ 6854             >
1367+ 6854             >Dict_Ptr        defl    $
1367+ 6854             >
1367+ 6854             >//              ______________________________________________________________________
1367+ 6854             >//              Heap part
1367+ 6854             >
1367+ 6854             >
1367+ 6854             >                org     (Heap_Ptr & $1FFF) + $E000
1367+ E261             >
1367+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ E261             >Latest_Definition defl  Heap_Ptr
1367+ E261             >
1367+ E261             >                // dummy db directives used to calculate length of namec
1367+ E261 3E 52       >                db      ">R"
1367+ E263             >len_NFA         defl    $ - temp_NFA
1367+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ E261             >
1367+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ E262 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1367+ E264             >                org     $-1                 // alter last byte of Name just above to set
1367+ E263 D2          >                db      {b $} | END_BIT     // msb as name end
1367+ E264             >
1367+ E264 58 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1367+ E266             >Prev_Ptr        defl    Heap_Ptr
1367+ E266             >
1367+ E266             >mirror_Ptr      defl    $
1367+ E266             >
1367+ E266 56 68       >                dw      Dict_Ptr + 2        // xt
1367+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1367+ E268             >
1367+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1367+ E268             >
1367+ E268             >//              ______________________________________________________________________
1367+ E268             >//              Dictionary part
1367+ E268             >
1367+ E268             >                org     Dict_Ptr
1367+ 6854             >
1367+ 6854 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1367+ 6856             >
1367+ 6856             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6856 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1367+ 6856 ~           >
1367+ 6856 ~           >
1367+ 6856             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6856             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6856             >
1367+ 6856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6856 E1                           pop     hl
1369+ 6857 EB                           ex      de, hl //**
1370+ 6858                              // *** ldhlrp
1371+ 6858 2B                           dec     hl
1372+ 6859 72                           ld      (hl), d             // store current TOS
1373+ 685A 2B                           dec     hl                  // to Return Stack
1374+ 685B 73                           ld      (hl), e
1375+ 685C                              // *** ldrphl
1376+ 685C EB                           ex      de, hl //**
1377+ 685D                              next
1377+ 685D DD E9       >                jp      (ix)
1378+ 685F
1379+ 685F              //  ______________________________________________________________________
1380+ 685F              //
1381+ 685F              // r>      -- n
1382+ 685F              // pop from return-stack and push into calculator-stack
1383+ 685F                              New_Def R_TO, "R>", is_code, is_normal
1383+ 685F             >
1383+ 685F             >Dict_Ptr        defl    $
1383+ 685F             >
1383+ 685F             >//              ______________________________________________________________________
1383+ 685F             >//              Heap part
1383+ 685F             >
1383+ 685F             >
1383+ 685F             >                org     (Heap_Ptr & $1FFF) + $E000
1383+ E268             >
1383+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1383+ E268             >Latest_Definition defl  Heap_Ptr
1383+ E268             >
1383+ E268             >                // dummy db directives used to calculate length of namec
1383+ E268 52 3E       >                db      "R>"
1383+ E26A             >len_NFA         defl    $ - temp_NFA
1383+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1383+ E268             >
1383+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1383+ E269 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1383+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1383+ E26A BE          >                db      {b $} | END_BIT     // msb as name end
1383+ E26B             >
1383+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1383+ E26D             >Prev_Ptr        defl    Heap_Ptr
1383+ E26D             >
1383+ E26D             >mirror_Ptr      defl    $
1383+ E26D             >
1383+ E26D 61 68       >                dw      Dict_Ptr + 2        // xt
1383+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1383+ E26F             >
1383+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1383+ E26F             >
1383+ E26F             >//              ______________________________________________________________________
1383+ E26F             >//              Dictionary part
1383+ E26F             >
1383+ E26F             >                org     Dict_Ptr
1383+ 685F             >
1383+ 685F 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1383+ 6861             >
1383+ 6861             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1383+ 6861 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1383+ 6861 ~           >
1383+ 6861 ~           >
1383+ 6861             >                endif           ; ok        // for other definitions it "points" the correct handler
1383+ 6861             >                // Use of "; ok" to suppress "warning[fwdref]"
1383+ 6861             >
1383+ 6861             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1384+ 6861
1385+ 6861 EB                           ex      de, hl //**
1386+ 6862                              // *** ldhlrp
1387+ 6862 5E                           ld      e, (hl)             // retrieve from Return Stack
1388+ 6863 23                           inc     hl
1389+ 6864 56                           ld      d, (hl)
1390+ 6865 23                           inc     hl
1391+ 6866                              // *** ldrphl
1392+ 6866 EB                           ex      de, hl //**
1393+ 6867 E5                           push    hl
1394+ 6868                              next
1394+ 6868 DD E9       >                jp      (ix)
1395+ 686A
1396+ 686A              //  ______________________________________________________________________
1397+ 686A              //
1398+ 686A              // r@           -- n
1399+ 686A              // return on top of stack the value of top of return-stack
1400+ 686A              // Since this is the same as I, we alter R's CFA to jump there
1401+ 686A                              New_Def R_OP, "R@", is_code, is_normal
1401+ 686A             >
1401+ 686A             >Dict_Ptr        defl    $
1401+ 686A             >
1401+ 686A             >//              ______________________________________________________________________
1401+ 686A             >//              Heap part
1401+ 686A             >
1401+ 686A             >
1401+ 686A             >                org     (Heap_Ptr & $1FFF) + $E000
1401+ E26F             >
1401+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ E26F             >Latest_Definition defl  Heap_Ptr
1401+ E26F             >
1401+ E26F             >                // dummy db directives used to calculate length of namec
1401+ E26F 52 40       >                db      "R@"
1401+ E271             >len_NFA         defl    $ - temp_NFA
1401+ E271             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ E26F             >
1401+ E26F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ E270 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1401+ E272             >                org     $-1                 // alter last byte of Name just above to set
1401+ E271 C0          >                db      {b $} | END_BIT     // msb as name end
1401+ E272             >
1401+ E272 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1401+ E274             >Prev_Ptr        defl    Heap_Ptr
1401+ E274             >
1401+ E274             >mirror_Ptr      defl    $
1401+ E274             >
1401+ E274 6C 68       >                dw      Dict_Ptr + 2        // xt
1401+ E276             >Heap_Ptr        defl    $ - $E000           // save current HP
1401+ E276             >
1401+ E276             >Current_HP      defl  $ - $E000             // used to set HP once!
1401+ E276             >
1401+ E276             >//              ______________________________________________________________________
1401+ E276             >//              Dictionary part
1401+ E276             >
1401+ E276             >                org     Dict_Ptr
1401+ 686A             >
1401+ 686A 74 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1401+ 686C             >
1401+ 686C             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 686C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1401+ 686C ~           >
1401+ 686C ~           >
1401+ 686C             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 686C             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 686C             >
1401+ 686C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 686C                          //  Behave  I_Ptr
1403+ 686C C3 3A 64                     jp      I_Ptr
1404+ 686F
1405+ 686F              //  ______________________________________________________________________
1406+ 686F              //
1407+ 686F              // r            -- n
1408+ 686F              // return on top of stack the value of top of return-stack
1409+ 686F              // Since this is the same as I, we alter R's CFA to jump there
1410+ 686F              //              New_Def R_OLD, "R", is_code, is_normal
1411+ 686F              //              jp      I_Ptr
1412+ 686F
1413+ 686F              //  ______________________________________________________________________
1414+ 686F              //
1415+ 686F              // 0=           n -- f
1416+ 686F              // true (non zero) if n is zero, false (0) elsewere
1417+ 686F                              New_Def ZEQUAL, "0=", is_code, is_normal
1417+ 686F             >
1417+ 686F             >Dict_Ptr        defl    $
1417+ 686F             >
1417+ 686F             >//              ______________________________________________________________________
1417+ 686F             >//              Heap part
1417+ 686F             >
1417+ 686F             >
1417+ 686F             >                org     (Heap_Ptr & $1FFF) + $E000
1417+ E276             >
1417+ E276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ E276             >Latest_Definition defl  Heap_Ptr
1417+ E276             >
1417+ E276             >                // dummy db directives used to calculate length of namec
1417+ E276 30 3D       >                db      "0="
1417+ E278             >len_NFA         defl    $ - temp_NFA
1417+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ E276             >
1417+ E276 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ E277 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1417+ E279             >                org     $-1                 // alter last byte of Name just above to set
1417+ E278 BD          >                db      {b $} | END_BIT     // msb as name end
1417+ E279             >
1417+ E279 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1417+ E27B             >Prev_Ptr        defl    Heap_Ptr
1417+ E27B             >
1417+ E27B             >mirror_Ptr      defl    $
1417+ E27B             >
1417+ E27B 71 68       >                dw      Dict_Ptr + 2        // xt
1417+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1417+ E27D             >
1417+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1417+ E27D             >
1417+ E27D             >//              ______________________________________________________________________
1417+ E27D             >//              Dictionary part
1417+ E27D             >
1417+ E27D             >                org     Dict_Ptr
1417+ 686F             >
1417+ 686F 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1417+ 6871             >
1417+ 6871             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6871 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1417+ 6871 ~           >
1417+ 6871 ~           >
1417+ 6871             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6871             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6871             >
1417+ 6871             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6871              Zero_Equal:
1419+ 6871 E1                           pop     hl
1420+ 6872 7D                           ld      a, l
1421+ 6873 B4                           or      h
1422+ 6874 21 00 00                     ld      hl, FALSE_FLAG
1423+ 6877 20 01                        jr      nz, ZEqual_Skip
1424+ 6879 2B                               dec     hl
1425+ 687A              ZEqual_Skip:
1426+ 687A                              psh1
1426+ 687A E5          >                push    hl
1426+ 687B DD E9       >                jp      (ix)
1427+ 687D
1428+ 687D              //  ______________________________________________________________________
1429+ 687D              //
1430+ 687D              // not         a1 -- a2
1431+ 687D              // increment by 2 top of stack
1432+ 687D                              New_Def NOT_OP, "NOT", is_code, is_normal
1432+ 687D             >
1432+ 687D             >Dict_Ptr        defl    $
1432+ 687D             >
1432+ 687D             >//              ______________________________________________________________________
1432+ 687D             >//              Heap part
1432+ 687D             >
1432+ 687D             >
1432+ 687D             >                org     (Heap_Ptr & $1FFF) + $E000
1432+ E27D             >
1432+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ E27D             >Latest_Definition defl  Heap_Ptr
1432+ E27D             >
1432+ E27D             >                // dummy db directives used to calculate length of namec
1432+ E27D 4E 4F 54    >                db      "NOT"
1432+ E280             >len_NFA         defl    $ - temp_NFA
1432+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ E27D             >
1432+ E27D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ E27E 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1432+ E281             >                org     $-1                 // alter last byte of Name just above to set
1432+ E280 D4          >                db      {b $} | END_BIT     // msb as name end
1432+ E281             >
1432+ E281 76 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1432+ E283             >Prev_Ptr        defl    Heap_Ptr
1432+ E283             >
1432+ E283             >mirror_Ptr      defl    $
1432+ E283             >
1432+ E283 7F 68       >                dw      Dict_Ptr + 2        // xt
1432+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1432+ E285             >
1432+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1432+ E285             >
1432+ E285             >//              ______________________________________________________________________
1432+ E285             >//              Dictionary part
1432+ E285             >
1432+ E285             >                org     Dict_Ptr
1432+ 687D             >
1432+ 687D 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1432+ 687F             >
1432+ 687F             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 687F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 687F ~           >
1432+ 687F ~           >
1432+ 687F             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 687F             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 687F             >
1432+ 687F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 687F                          //  Behave  Zero_Equal
1434+ 687F C3 71 68                     jp      Zero_Equal
1435+ 6882
1436+ 6882              //  ______________________________________________________________________
1437+ 6882              //
1438+ 6882              // 0<           n -- f
1439+ 6882              // true (non zero) if n is less than zero, false (0) elsewere
1440+ 6882                              New_Def ZLESS, "0<", is_code, is_normal
1440+ 6882             >
1440+ 6882             >Dict_Ptr        defl    $
1440+ 6882             >
1440+ 6882             >//              ______________________________________________________________________
1440+ 6882             >//              Heap part
1440+ 6882             >
1440+ 6882             >
1440+ 6882             >                org     (Heap_Ptr & $1FFF) + $E000
1440+ E285             >
1440+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1440+ E285             >Latest_Definition defl  Heap_Ptr
1440+ E285             >
1440+ E285             >                // dummy db directives used to calculate length of namec
1440+ E285 30 3C       >                db      "0<"
1440+ E287             >len_NFA         defl    $ - temp_NFA
1440+ E287             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1440+ E285             >
1440+ E285 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1440+ E286 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1440+ E288             >                org     $-1                 // alter last byte of Name just above to set
1440+ E287 BC          >                db      {b $} | END_BIT     // msb as name end
1440+ E288             >
1440+ E288 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1440+ E28A             >Prev_Ptr        defl    Heap_Ptr
1440+ E28A             >
1440+ E28A             >mirror_Ptr      defl    $
1440+ E28A             >
1440+ E28A 84 68       >                dw      Dict_Ptr + 2        // xt
1440+ E28C             >Heap_Ptr        defl    $ - $E000           // save current HP
1440+ E28C             >
1440+ E28C             >Current_HP      defl  $ - $E000             // used to set HP once!
1440+ E28C             >
1440+ E28C             >//              ______________________________________________________________________
1440+ E28C             >//              Dictionary part
1440+ E28C             >
1440+ E28C             >                org     Dict_Ptr
1440+ 6882             >
1440+ 6882 8A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1440+ 6884             >
1440+ 6884             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1440+ 6884 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1440+ 6884 ~           >
1440+ 6884 ~           >
1440+ 6884             >                endif           ; ok        // for other definitions it "points" the correct handler
1440+ 6884             >                // Use of "; ok" to suppress "warning[fwdref]"
1440+ 6884             >
1440+ 6884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1441+ 6884 E1                           pop     hl
1442+ 6885 29                           add     hl, hl
1443+ 6886 ED 62                        sbc     hl, hl
1444+ 6888                              psh1
1444+ 6888 E5          >                push    hl
1444+ 6889 DD E9       >                jp      (ix)
1445+ 688B
1446+ 688B              //  ______________________________________________________________________
1447+ 688B              //
1448+ 688B              // 0>           n -- f
1449+ 688B              // true (non zero) if n is less than zero, false (0) elsewere
1450+ 688B                              New_Def ZGREATER, "0>", is_code, is_normal
1450+ 688B             >
1450+ 688B             >Dict_Ptr        defl    $
1450+ 688B             >
1450+ 688B             >//              ______________________________________________________________________
1450+ 688B             >//              Heap part
1450+ 688B             >
1450+ 688B             >
1450+ 688B             >                org     (Heap_Ptr & $1FFF) + $E000
1450+ E28C             >
1450+ E28C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1450+ E28C             >Latest_Definition defl  Heap_Ptr
1450+ E28C             >
1450+ E28C             >                // dummy db directives used to calculate length of namec
1450+ E28C 30 3E       >                db      "0>"
1450+ E28E             >len_NFA         defl    $ - temp_NFA
1450+ E28E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1450+ E28C             >
1450+ E28C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1450+ E28D 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1450+ E28F             >                org     $-1                 // alter last byte of Name just above to set
1450+ E28E BE          >                db      {b $} | END_BIT     // msb as name end
1450+ E28F             >
1450+ E28F 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1450+ E291             >Prev_Ptr        defl    Heap_Ptr
1450+ E291             >
1450+ E291             >mirror_Ptr      defl    $
1450+ E291             >
1450+ E291 8D 68       >                dw      Dict_Ptr + 2        // xt
1450+ E293             >Heap_Ptr        defl    $ - $E000           // save current HP
1450+ E293             >
1450+ E293             >Current_HP      defl  $ - $E000             // used to set HP once!
1450+ E293             >
1450+ E293             >//              ______________________________________________________________________
1450+ E293             >//              Dictionary part
1450+ E293             >
1450+ E293             >                org     Dict_Ptr
1450+ 688B             >
1450+ 688B 91 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1450+ 688D             >
1450+ 688D             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1450+ 688D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1450+ 688D ~           >
1450+ 688D ~           >
1450+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
1450+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
1450+ 688D             >
1450+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1451+ 688D E1                           pop     hl
1452+ 688E 7D                           ld      a, l
1453+ 688F B4                           or      h
1454+ 6890 29                           add     hl, hl
1455+ 6891 21 00 00                     ld      hl, FALSE_FLAG
1456+ 6894 38 04                        jr      c, ZGreater_Skip
1457+ 6896 A7                               and     a
1458+ 6897 28 01                            jr      z, ZGreater_Skip
1459+ 6899 2B                                   dec     hl
1460+ 689A              ZGreater_Skip:
1461+ 689A                              psh1
1461+ 689A E5          >                push    hl
1461+ 689B DD E9       >                jp      (ix)
1462+ 689D
1463+ 689D              //  ______________________________________________________________________
1464+ 689D              //
1465+ 689D              // +            n1 n2 -- n3
1466+ 689D              // returns the unsigned sum of two top values
1467+ 689D                              New_Def PLUS, "+", is_code, is_normal
1467+ 689D             >
1467+ 689D             >Dict_Ptr        defl    $
1467+ 689D             >
1467+ 689D             >//              ______________________________________________________________________
1467+ 689D             >//              Heap part
1467+ 689D             >
1467+ 689D             >
1467+ 689D             >                org     (Heap_Ptr & $1FFF) + $E000
1467+ E293             >
1467+ E293             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1467+ E293             >Latest_Definition defl  Heap_Ptr
1467+ E293             >
1467+ E293             >                // dummy db directives used to calculate length of namec
1467+ E293 2B          >                db      "+"
1467+ E294             >len_NFA         defl    $ - temp_NFA
1467+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1467+ E293             >
1467+ E293 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1467+ E294 2B          >                db      "+"               // name string in 7-bit ascii, but
1467+ E295             >                org     $-1                 // alter last byte of Name just above to set
1467+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1467+ E295             >
1467+ E295 8C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1467+ E297             >Prev_Ptr        defl    Heap_Ptr
1467+ E297             >
1467+ E297             >mirror_Ptr      defl    $
1467+ E297             >
1467+ E297 9F 68       >                dw      Dict_Ptr + 2        // xt
1467+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1467+ E299             >
1467+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1467+ E299             >
1467+ E299             >//              ______________________________________________________________________
1467+ E299             >//              Dictionary part
1467+ E299             >
1467+ E299             >                org     Dict_Ptr
1467+ 689D             >
1467+ 689D 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1467+ 689F             >
1467+ 689F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1467+ 689F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1467+ 689F ~           >
1467+ 689F ~           >
1467+ 689F             >                endif           ; ok        // for other definitions it "points" the correct handler
1467+ 689F             >                // Use of "; ok" to suppress "warning[fwdref]"
1467+ 689F             >
1467+ 689F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1468+ 689F D9                           exx
1469+ 68A0 E1                           pop     hl
1470+ 68A1 D1                           pop     de
1471+ 68A2 19                           add     hl, de
1472+ 68A3 E5                           push    hl
1473+ 68A4 D9                           exx
1474+ 68A5                              next
1474+ 68A5 DD E9       >                jp      (ix)
1475+ 68A7
1476+ 68A7
1477+ 68A7              //  ______________________________________________________________________
1478+ 68A7              //
1479+ 68A7              // d+           d1 d2 -- d3
1480+ 68A7              // returns the unsigned sum of two top double-numbers
1481+ 68A7              //      d2  d1
1482+ 68A7              //      h l h l
1483+ 68A7              // SP   LHEDLHED
1484+ 68A7              // SP  +01234567
1485+ 68A7                              New_Def DPLUS, "D+", is_code, is_normal
1485+ 68A7             >
1485+ 68A7             >Dict_Ptr        defl    $
1485+ 68A7             >
1485+ 68A7             >//              ______________________________________________________________________
1485+ 68A7             >//              Heap part
1485+ 68A7             >
1485+ 68A7             >
1485+ 68A7             >                org     (Heap_Ptr & $1FFF) + $E000
1485+ E299             >
1485+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1485+ E299             >Latest_Definition defl  Heap_Ptr
1485+ E299             >
1485+ E299             >                // dummy db directives used to calculate length of namec
1485+ E299 44 2B       >                db      "D+"
1485+ E29B             >len_NFA         defl    $ - temp_NFA
1485+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1485+ E299             >
1485+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1485+ E29A 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1485+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1485+ E29B AB          >                db      {b $} | END_BIT     // msb as name end
1485+ E29C             >
1485+ E29C 93 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1485+ E29E             >Prev_Ptr        defl    Heap_Ptr
1485+ E29E             >
1485+ E29E             >mirror_Ptr      defl    $
1485+ E29E             >
1485+ E29E A9 68       >                dw      Dict_Ptr + 2        // xt
1485+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1485+ E2A0             >
1485+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1485+ E2A0             >
1485+ E2A0             >//              ______________________________________________________________________
1485+ E2A0             >//              Dictionary part
1485+ E2A0             >
1485+ E2A0             >                org     Dict_Ptr
1485+ 68A7             >
1485+ 68A7 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1485+ 68A9             >
1485+ 68A9             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1485+ 68A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1485+ 68A9 ~           >
1485+ 68A9 ~           >
1485+ 68A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1485+ 68A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1485+ 68A9             >
1485+ 68A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1486+ 68A9
1487+ 68A9 D9                           exx
1488+ 68AA C1                           pop     bc                  // bc := d2.H
1489+ 68AB D1                           pop     de                  // hl := d2.L
1490+ 68AC E1                           pop     hl                  // d1.H
1491+ 68AD E3                           ex      (sp), hl            // d1.L
1492+ 68AE 19                           add     hl, de              // hl := d2.L + d1.L
1493+ 68AF E3                           ex      (sp), hl            // d1.H
1494+ 68B0 ED 4A                        adc     hl, bc              // d1.H + d2.H
1495+ 68B2 E5                           push    hl
1496+ 68B3 D9                           exx
1497+ 68B4                              next
1497+ 68B4 DD E9       >                jp      (ix)
1498+ 68B6
1499+ 68B6              //  ______________________________________________________________________
1500+ 68B6              //
1501+ 68B6              // 1+           n1 -- n2
1502+ 68B6              // increment by 1 top of stack
1503+ 68B6                              New_Def ONE_PLUS, "1+", is_code, is_normal
1503+ 68B6             >
1503+ 68B6             >Dict_Ptr        defl    $
1503+ 68B6             >
1503+ 68B6             >//              ______________________________________________________________________
1503+ 68B6             >//              Heap part
1503+ 68B6             >
1503+ 68B6             >
1503+ 68B6             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E2A0             >
1503+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E2A0             >Latest_Definition defl  Heap_Ptr
1503+ E2A0             >
1503+ E2A0             >                // dummy db directives used to calculate length of namec
1503+ E2A0 31 2B       >                db      "1+"
1503+ E2A2             >len_NFA         defl    $ - temp_NFA
1503+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E2A0             >
1503+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E2A1 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1503+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1503+ E2A2 AB          >                db      {b $} | END_BIT     // msb as name end
1503+ E2A3             >
1503+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1503+ E2A5             >
1503+ E2A5             >mirror_Ptr      defl    $
1503+ E2A5             >
1503+ E2A5 B8 68       >                dw      Dict_Ptr + 2        // xt
1503+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E2A7             >
1503+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E2A7             >
1503+ E2A7             >//              ______________________________________________________________________
1503+ E2A7             >//              Dictionary part
1503+ E2A7             >
1503+ E2A7             >                org     Dict_Ptr
1503+ 68B6             >
1503+ 68B6 A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 68B8             >
1503+ 68B8             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 68B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1503+ 68B8 ~           >
1503+ 68B8 ~           >
1503+ 68B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 68B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 68B8             >
1503+ 68B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 68B8 E1                           pop     hl
1505+ 68B9 23                           inc     hl
1506+ 68BA
1507+ 68BA                              psh1
1507+ 68BA E5          >                push    hl
1507+ 68BB DD E9       >                jp      (ix)
1508+ 68BD
1509+ 68BD              //  ______________________________________________________________________
1510+ 68BD              //
1511+ 68BD              // 1-           n1 -- n2
1512+ 68BD              // decrement by 1 top of stack
1513+ 68BD                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1513+ 68BD             >
1513+ 68BD             >Dict_Ptr        defl    $
1513+ 68BD             >
1513+ 68BD             >//              ______________________________________________________________________
1513+ 68BD             >//              Heap part
1513+ 68BD             >
1513+ 68BD             >
1513+ 68BD             >                org     (Heap_Ptr & $1FFF) + $E000
1513+ E2A7             >
1513+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1513+ E2A7             >Latest_Definition defl  Heap_Ptr
1513+ E2A7             >
1513+ E2A7             >                // dummy db directives used to calculate length of namec
1513+ E2A7 31 2D       >                db      "1-"
1513+ E2A9             >len_NFA         defl    $ - temp_NFA
1513+ E2A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1513+ E2A7             >
1513+ E2A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1513+ E2A8 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1513+ E2AA             >                org     $-1                 // alter last byte of Name just above to set
1513+ E2A9 AD          >                db      {b $} | END_BIT     // msb as name end
1513+ E2AA             >
1513+ E2AA A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1513+ E2AC             >Prev_Ptr        defl    Heap_Ptr
1513+ E2AC             >
1513+ E2AC             >mirror_Ptr      defl    $
1513+ E2AC             >
1513+ E2AC BF 68       >                dw      Dict_Ptr + 2        // xt
1513+ E2AE             >Heap_Ptr        defl    $ - $E000           // save current HP
1513+ E2AE             >
1513+ E2AE             >Current_HP      defl  $ - $E000             // used to set HP once!
1513+ E2AE             >
1513+ E2AE             >//              ______________________________________________________________________
1513+ E2AE             >//              Dictionary part
1513+ E2AE             >
1513+ E2AE             >                org     Dict_Ptr
1513+ 68BD             >
1513+ 68BD AC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1513+ 68BF             >
1513+ 68BF             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1513+ 68BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1513+ 68BF ~           >
1513+ 68BF ~           >
1513+ 68BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1513+ 68BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1513+ 68BF             >
1513+ 68BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1514+ 68BF E1                           pop     hl
1515+ 68C0 2B                           dec     hl
1516+ 68C1
1517+ 68C1                              psh1
1517+ 68C1 E5          >                push    hl
1517+ 68C2 DD E9       >                jp      (ix)
1518+ 68C4
1519+ 68C4              //  ______________________________________________________________________
1520+ 68C4              //
1521+ 68C4              // 2+           n1 -- n2
1522+ 68C4              // increment by 2 top of stack
1523+ 68C4                              New_Def TWO_PLUS, "2+", is_code, is_normal
1523+ 68C4             >
1523+ 68C4             >Dict_Ptr        defl    $
1523+ 68C4             >
1523+ 68C4             >//              ______________________________________________________________________
1523+ 68C4             >//              Heap part
1523+ 68C4             >
1523+ 68C4             >
1523+ 68C4             >                org     (Heap_Ptr & $1FFF) + $E000
1523+ E2AE             >
1523+ E2AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1523+ E2AE             >Latest_Definition defl  Heap_Ptr
1523+ E2AE             >
1523+ E2AE             >                // dummy db directives used to calculate length of namec
1523+ E2AE 32 2B       >                db      "2+"
1523+ E2B0             >len_NFA         defl    $ - temp_NFA
1523+ E2B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1523+ E2AE             >
1523+ E2AE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1523+ E2AF 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1523+ E2B1             >                org     $-1                 // alter last byte of Name just above to set
1523+ E2B0 AB          >                db      {b $} | END_BIT     // msb as name end
1523+ E2B1             >
1523+ E2B1 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1523+ E2B3             >Prev_Ptr        defl    Heap_Ptr
1523+ E2B3             >
1523+ E2B3             >mirror_Ptr      defl    $
1523+ E2B3             >
1523+ E2B3 C6 68       >                dw      Dict_Ptr + 2        // xt
1523+ E2B5             >Heap_Ptr        defl    $ - $E000           // save current HP
1523+ E2B5             >
1523+ E2B5             >Current_HP      defl  $ - $E000             // used to set HP once!
1523+ E2B5             >
1523+ E2B5             >//              ______________________________________________________________________
1523+ E2B5             >//              Dictionary part
1523+ E2B5             >
1523+ E2B5             >                org     Dict_Ptr
1523+ 68C4             >
1523+ 68C4 B3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1523+ 68C6             >
1523+ 68C6             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1523+ 68C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1523+ 68C6 ~           >
1523+ 68C6 ~           >
1523+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1523+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1523+ 68C6             >
1523+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1524+ 68C6              Two_Plus:
1525+ 68C6 E1                           pop     hl
1526+ 68C7 23                           inc     hl
1527+ 68C8 23                           inc     hl
1528+ 68C9
1529+ 68C9                              psh1
1529+ 68C9 E5          >                push    hl
1529+ 68CA DD E9       >                jp      (ix)
1530+ 68CC
1531+ 68CC              //  ______________________________________________________________________
1532+ 68CC              //
1533+ 68CC              // cell+        a1 -- a2
1534+ 68CC              // increment by 2 top of stack
1535+ 68CC                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1535+ 68CC             >
1535+ 68CC             >Dict_Ptr        defl    $
1535+ 68CC             >
1535+ 68CC             >//              ______________________________________________________________________
1535+ 68CC             >//              Heap part
1535+ 68CC             >
1535+ 68CC             >
1535+ 68CC             >                org     (Heap_Ptr & $1FFF) + $E000
1535+ E2B5             >
1535+ E2B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1535+ E2B5             >Latest_Definition defl  Heap_Ptr
1535+ E2B5             >
1535+ E2B5             >                // dummy db directives used to calculate length of namec
1535+ E2B5 43 45 4C 4C >                db      "CELL+"
1535+ E2B9 2B          >
1535+ E2BA             >len_NFA         defl    $ - temp_NFA
1535+ E2BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1535+ E2B5             >
1535+ E2B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1535+ E2B6 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1535+ E2BA 2B          >
1535+ E2BB             >                org     $-1                 // alter last byte of Name just above to set
1535+ E2BA AB          >                db      {b $} | END_BIT     // msb as name end
1535+ E2BB             >
1535+ E2BB AE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1535+ E2BD             >Prev_Ptr        defl    Heap_Ptr
1535+ E2BD             >
1535+ E2BD             >mirror_Ptr      defl    $
1535+ E2BD             >
1535+ E2BD CE 68       >                dw      Dict_Ptr + 2        // xt
1535+ E2BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1535+ E2BF             >
1535+ E2BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1535+ E2BF             >
1535+ E2BF             >//              ______________________________________________________________________
1535+ E2BF             >//              Dictionary part
1535+ E2BF             >
1535+ E2BF             >                org     Dict_Ptr
1535+ 68CC             >
1535+ 68CC BD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1535+ 68CE             >
1535+ 68CE             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1535+ 68CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1535+ 68CE ~           >
1535+ 68CE ~           >
1535+ 68CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1535+ 68CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1535+ 68CE             >
1535+ 68CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1536+ 68CE C3 C6 68                     jp      Two_Plus
1537+ 68D1
1538+ 68D1              //  ______________________________________________________________________
1539+ 68D1              //
1540+ 68D1              // align        a1 -- a2
1541+ 68D1              // align memory : not used
1542+ 68D1              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1543+ 68D1              //            next
1544+ 68D1
1545+ 68D1              //  ______________________________________________________________________
1546+ 68D1              //
1547+ 68D1              // cell-        a1 -- a2
1548+ 68D1              // decrement by 2 top of stack
1549+ 68D1                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1549+ 68D1             >
1549+ 68D1             >Dict_Ptr        defl    $
1549+ 68D1             >
1549+ 68D1             >//              ______________________________________________________________________
1549+ 68D1             >//              Heap part
1549+ 68D1             >
1549+ 68D1             >
1549+ 68D1             >                org     (Heap_Ptr & $1FFF) + $E000
1549+ E2BF             >
1549+ E2BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1549+ E2BF             >Latest_Definition defl  Heap_Ptr
1549+ E2BF             >
1549+ E2BF             >                // dummy db directives used to calculate length of namec
1549+ E2BF 43 45 4C 4C >                db      "CELL-"
1549+ E2C3 2D          >
1549+ E2C4             >len_NFA         defl    $ - temp_NFA
1549+ E2C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1549+ E2BF             >
1549+ E2BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1549+ E2C0 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1549+ E2C4 2D          >
1549+ E2C5             >                org     $-1                 // alter last byte of Name just above to set
1549+ E2C4 AD          >                db      {b $} | END_BIT     // msb as name end
1549+ E2C5             >
1549+ E2C5 B5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1549+ E2C7             >Prev_Ptr        defl    Heap_Ptr
1549+ E2C7             >
1549+ E2C7             >mirror_Ptr      defl    $
1549+ E2C7             >
1549+ E2C7 D3 68       >                dw      Dict_Ptr + 2        // xt
1549+ E2C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1549+ E2C9             >
1549+ E2C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1549+ E2C9             >
1549+ E2C9             >//              ______________________________________________________________________
1549+ E2C9             >//              Dictionary part
1549+ E2C9             >
1549+ E2C9             >                org     Dict_Ptr
1549+ 68D1             >
1549+ 68D1 C7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1549+ 68D3             >
1549+ 68D3             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1549+ 68D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1549+ 68D3 ~           >
1549+ 68D3 ~           >
1549+ 68D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1549+ 68D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1549+ 68D3             >
1549+ 68D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1550+ 68D3              CellMinus:
1551+ 68D3 E1                           pop     hl
1552+ 68D4 2B                           dec     hl
1553+ 68D5 2B                           dec     hl
1554+ 68D6
1555+ 68D6                              psh1
1555+ 68D6 E5          >                push    hl
1555+ 68D7 DD E9       >                jp      (ix)
1556+ 68D9
1557+ 68D9              //  ______________________________________________________________________
1558+ 68D9              //
1559+ 68D9              // 2-           a1 -- a2
1560+ 68D9              // decrement by 2 top of stack
1561+ 68D9                              New_Def TWO_MINUS, "2-", is_code, is_normal
1561+ 68D9             >
1561+ 68D9             >Dict_Ptr        defl    $
1561+ 68D9             >
1561+ 68D9             >//              ______________________________________________________________________
1561+ 68D9             >//              Heap part
1561+ 68D9             >
1561+ 68D9             >
1561+ 68D9             >                org     (Heap_Ptr & $1FFF) + $E000
1561+ E2C9             >
1561+ E2C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1561+ E2C9             >Latest_Definition defl  Heap_Ptr
1561+ E2C9             >
1561+ E2C9             >                // dummy db directives used to calculate length of namec
1561+ E2C9 32 2D       >                db      "2-"
1561+ E2CB             >len_NFA         defl    $ - temp_NFA
1561+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1561+ E2C9             >
1561+ E2C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1561+ E2CA 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1561+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1561+ E2CB AD          >                db      {b $} | END_BIT     // msb as name end
1561+ E2CC             >
1561+ E2CC BF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1561+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1561+ E2CE             >
1561+ E2CE             >mirror_Ptr      defl    $
1561+ E2CE             >
1561+ E2CE DB 68       >                dw      Dict_Ptr + 2        // xt
1561+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1561+ E2D0             >
1561+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1561+ E2D0             >
1561+ E2D0             >//              ______________________________________________________________________
1561+ E2D0             >//              Dictionary part
1561+ E2D0             >
1561+ E2D0             >                org     Dict_Ptr
1561+ 68D9             >
1561+ 68D9 CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1561+ 68DB             >
1561+ 68DB             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1561+ 68DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1561+ 68DB ~           >
1561+ 68DB ~           >
1561+ 68DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1561+ 68DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1561+ 68DB             >
1561+ 68DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1562+ 68DB C3 D3 68                     jp      CellMinus
1563+ 68DE
1564+ 68DE              //  ______________________________________________________________________
1565+ 68DE              //
1566+ 68DE              // negate       n1 -- n2
1567+ 68DE              // change the sign of number
1568+ 68DE                              New_Def MINUS, "NEGATE", is_code, is_normal
1568+ 68DE             >
1568+ 68DE             >Dict_Ptr        defl    $
1568+ 68DE             >
1568+ 68DE             >//              ______________________________________________________________________
1568+ 68DE             >//              Heap part
1568+ 68DE             >
1568+ 68DE             >
1568+ 68DE             >                org     (Heap_Ptr & $1FFF) + $E000
1568+ E2D0             >
1568+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1568+ E2D0             >Latest_Definition defl  Heap_Ptr
1568+ E2D0             >
1568+ E2D0             >                // dummy db directives used to calculate length of namec
1568+ E2D0 4E 45 47 41 >                db      "NEGATE"
1568+ E2D4 54 45       >
1568+ E2D6             >len_NFA         defl    $ - temp_NFA
1568+ E2D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1568+ E2D0             >
1568+ E2D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1568+ E2D1 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1568+ E2D5 54 45       >
1568+ E2D7             >                org     $-1                 // alter last byte of Name just above to set
1568+ E2D6 C5          >                db      {b $} | END_BIT     // msb as name end
1568+ E2D7             >
1568+ E2D7 C9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1568+ E2D9             >Prev_Ptr        defl    Heap_Ptr
1568+ E2D9             >
1568+ E2D9             >mirror_Ptr      defl    $
1568+ E2D9             >
1568+ E2D9 E0 68       >                dw      Dict_Ptr + 2        // xt
1568+ E2DB             >Heap_Ptr        defl    $ - $E000           // save current HP
1568+ E2DB             >
1568+ E2DB             >Current_HP      defl  $ - $E000             // used to set HP once!
1568+ E2DB             >
1568+ E2DB             >//              ______________________________________________________________________
1568+ E2DB             >//              Dictionary part
1568+ E2DB             >
1568+ E2DB             >                org     Dict_Ptr
1568+ 68DE             >
1568+ 68DE D9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1568+ 68E0             >
1568+ 68E0             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1568+ 68E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1568+ 68E0 ~           >
1568+ 68E0 ~           >
1568+ 68E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1568+ 68E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1568+ 68E0             >
1568+ 68E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1569+ 68E0 D9                           exx
1570+ 68E1 21 00 00                     ld      hl, 0               // subtract from 0
1571+ 68E4 D1                           pop     de
1572+ 68E5 B7                           or      a
1573+ 68E6 ED 52                        sbc     hl, de
1574+ 68E8 E5                           push    hl
1575+ 68E9 D9                           exx
1576+ 68EA                              next
1576+ 68EA DD E9       >                jp      (ix)
1577+ 68EC
1578+ 68EC              //  ______________________________________________________________________
1579+ 68EC              //
1580+ 68EC              // dnegate      d1 -- d2
1581+ 68EC              // change the sign of a double number
1582+ 68EC                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1582+ 68EC             >
1582+ 68EC             >Dict_Ptr        defl    $
1582+ 68EC             >
1582+ 68EC             >//              ______________________________________________________________________
1582+ 68EC             >//              Heap part
1582+ 68EC             >
1582+ 68EC             >
1582+ 68EC             >                org     (Heap_Ptr & $1FFF) + $E000
1582+ E2DB             >
1582+ E2DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ E2DB             >Latest_Definition defl  Heap_Ptr
1582+ E2DB             >
1582+ E2DB             >                // dummy db directives used to calculate length of namec
1582+ E2DB 44 4E 45 47 >                db      "DNEGATE"
1582+ E2DF 41 54 45    >
1582+ E2E2             >len_NFA         defl    $ - temp_NFA
1582+ E2E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ E2DB             >
1582+ E2DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ E2DC 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1582+ E2E0 41 54 45    >
1582+ E2E3             >                org     $-1                 // alter last byte of Name just above to set
1582+ E2E2 C5          >                db      {b $} | END_BIT     // msb as name end
1582+ E2E3             >
1582+ E2E3 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1582+ E2E5             >Prev_Ptr        defl    Heap_Ptr
1582+ E2E5             >
1582+ E2E5             >mirror_Ptr      defl    $
1582+ E2E5             >
1582+ E2E5 EE 68       >                dw      Dict_Ptr + 2        // xt
1582+ E2E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1582+ E2E7             >
1582+ E2E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1582+ E2E7             >
1582+ E2E7             >//              ______________________________________________________________________
1582+ E2E7             >//              Dictionary part
1582+ E2E7             >
1582+ E2E7             >                org     Dict_Ptr
1582+ 68EC             >
1582+ 68EC E5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1582+ 68EE             >
1582+ 68EE             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 68EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1582+ 68EE ~           >
1582+ 68EE ~           >
1582+ 68EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 68EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 68EE             >
1582+ 68EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 68EE D9                           exx
1584+ 68EF C1                           pop     bc                  // d1.H
1585+ 68F0 D1                           pop     de                  // d1.L
1586+ 68F1 AF                           xor     a
1587+ 68F2 67                           ld      h, a
1588+ 68F3 6F                           ld      l, a
1589+ 68F4 ED 52                        sbc     hl, de              // subtact from zero
1590+ 68F6 E5                           push    hl                  // > d2-L
1591+ 68F7 67                           ld      h, a
1592+ 68F8 6F                           ld      l, a
1593+ 68F9 ED 42                        sbc     hl, bc              // subtract from zero with carry
1594+ 68FB                                                          // > d2-H
1595+ 68FB E5                           push    hl
1596+ 68FC D9                           exx
1597+ 68FD                              next
1597+ 68FD DD E9       >                jp      (ix)
1598+ 68FF
1599+ 68FF              //  ______________________________________________________________________
1600+ 68FF              //
1601+ 68FF              // over         n1 n2 -- n1 n2 n1
1602+ 68FF              // copy the second value of stack and put it on top.
1603+ 68FF                              New_Def OVER, "OVER", is_code, is_normal
1603+ 68FF             >
1603+ 68FF             >Dict_Ptr        defl    $
1603+ 68FF             >
1603+ 68FF             >//              ______________________________________________________________________
1603+ 68FF             >//              Heap part
1603+ 68FF             >
1603+ 68FF             >
1603+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1603+ E2E7             >
1603+ E2E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1603+ E2E7             >Latest_Definition defl  Heap_Ptr
1603+ E2E7             >
1603+ E2E7             >                // dummy db directives used to calculate length of namec
1603+ E2E7 4F 56 45 52 >                db      "OVER"
1603+ E2EB             >len_NFA         defl    $ - temp_NFA
1603+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1603+ E2E7             >
1603+ E2E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1603+ E2E8 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1603+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1603+ E2EB D2          >                db      {b $} | END_BIT     // msb as name end
1603+ E2EC             >
1603+ E2EC DB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1603+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1603+ E2EE             >
1603+ E2EE             >mirror_Ptr      defl    $
1603+ E2EE             >
1603+ E2EE 01 69       >                dw      Dict_Ptr + 2        // xt
1603+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1603+ E2F0             >
1603+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1603+ E2F0             >
1603+ E2F0             >//              ______________________________________________________________________
1603+ E2F0             >//              Dictionary part
1603+ E2F0             >
1603+ E2F0             >                org     Dict_Ptr
1603+ 68FF             >
1603+ 68FF EE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1603+ 6901             >
1603+ 6901             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1603+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1603+ 6901 ~           >
1603+ 6901 ~           >
1603+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1603+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1603+ 6901             >
1603+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1604+ 6901                              // exx     // we can use af instead OPTIMIZATION possible
1605+ 6901 F1                           pop     af                  //   n2
1606+ 6902 E1                           pop     hl                  // < n1
1607+ 6903 E5                           push    hl                  // > n1
1608+ 6904 F5                           push    af                  // > n2
1609+ 6905 E5                           push    hl                  // > n1
1610+ 6906                              // exx
1611+ 6906                              next
1611+ 6906 DD E9       >                jp      (ix)
1612+ 6908
1613+ 6908              //  ______________________________________________________________________
1614+ 6908              //
1615+ 6908              // drop         n1 --
1616+ 6908              // drops the top of stack
1617+ 6908                              New_Def DROP, "DROP", is_code, is_normal
1617+ 6908             >
1617+ 6908             >Dict_Ptr        defl    $
1617+ 6908             >
1617+ 6908             >//              ______________________________________________________________________
1617+ 6908             >//              Heap part
1617+ 6908             >
1617+ 6908             >
1617+ 6908             >                org     (Heap_Ptr & $1FFF) + $E000
1617+ E2F0             >
1617+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ E2F0             >Latest_Definition defl  Heap_Ptr
1617+ E2F0             >
1617+ E2F0             >                // dummy db directives used to calculate length of namec
1617+ E2F0 44 52 4F 50 >                db      "DROP"
1617+ E2F4             >len_NFA         defl    $ - temp_NFA
1617+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ E2F0             >
1617+ E2F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ E2F1 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1617+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1617+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1617+ E2F5             >
1617+ E2F5 E7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1617+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1617+ E2F7             >
1617+ E2F7             >mirror_Ptr      defl    $
1617+ E2F7             >
1617+ E2F7 0A 69       >                dw      Dict_Ptr + 2        // xt
1617+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1617+ E2F9             >
1617+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1617+ E2F9             >
1617+ E2F9             >//              ______________________________________________________________________
1617+ E2F9             >//              Dictionary part
1617+ E2F9             >
1617+ E2F9             >                org     Dict_Ptr
1617+ 6908             >
1617+ 6908 F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1617+ 690A             >
1617+ 690A             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 690A ~           >
1617+ 690A ~           >
1617+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 690A             >
1617+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 690A E1                           pop     hl                  // < n1 and discard previous TOS
1619+ 690B                              next
1619+ 690B DD E9       >                jp      (ix)
1620+ 690D
1621+ 690D              //  ______________________________________________________________________
1622+ 690D              //
1623+ 690D              // nip          n1 n2 -- n2
1624+ 690D              // drops the second elemento on the stack
1625+ 690D                              New_Def NIP, "NIP", is_code, is_normal
1625+ 690D             >
1625+ 690D             >Dict_Ptr        defl    $
1625+ 690D             >
1625+ 690D             >//              ______________________________________________________________________
1625+ 690D             >//              Heap part
1625+ 690D             >
1625+ 690D             >
1625+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E2F9             >
1625+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E2F9             >Latest_Definition defl  Heap_Ptr
1625+ E2F9             >
1625+ E2F9             >                // dummy db directives used to calculate length of namec
1625+ E2F9 4E 49 50    >                db      "NIP"
1625+ E2FC             >len_NFA         defl    $ - temp_NFA
1625+ E2FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E2F9             >
1625+ E2F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E2FA 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1625+ E2FD             >                org     $-1                 // alter last byte of Name just above to set
1625+ E2FC D0          >                db      {b $} | END_BIT     // msb as name end
1625+ E2FD             >
1625+ E2FD F0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E2FF             >Prev_Ptr        defl    Heap_Ptr
1625+ E2FF             >
1625+ E2FF             >mirror_Ptr      defl    $
1625+ E2FF             >
1625+ E2FF 0F 69       >                dw      Dict_Ptr + 2        // xt
1625+ E301             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E301             >
1625+ E301             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E301             >
1625+ E301             >//              ______________________________________________________________________
1625+ E301             >//              Dictionary part
1625+ E301             >
1625+ E301             >                org     Dict_Ptr
1625+ 690D             >
1625+ 690D FF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 690F             >
1625+ 690F             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1625+ 690F ~           >
1625+ 690F ~           >
1625+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 690F             >
1625+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 690F
1627+ 690F E1                           pop     hl                  // < n1 discarded
1628+ 6910 E3                           ex      (sp), hl
1629+ 6911                              next
1629+ 6911 DD E9       >                jp      (ix)
1630+ 6913
1631+ 6913              //  ______________________________________________________________________
1632+ 6913              //
1633+ 6913              // tuck         n1 n2 -- n2 n1 n2
1634+ 6913              // copy the top element after the second.
1635+ 6913                              New_Def TUCK, "TUCK", is_code, is_normal
1635+ 6913             >
1635+ 6913             >Dict_Ptr        defl    $
1635+ 6913             >
1635+ 6913             >//              ______________________________________________________________________
1635+ 6913             >//              Heap part
1635+ 6913             >
1635+ 6913             >
1635+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1635+ E301             >
1635+ E301             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1635+ E301             >Latest_Definition defl  Heap_Ptr
1635+ E301             >
1635+ E301             >                // dummy db directives used to calculate length of namec
1635+ E301 54 55 43 4B >                db      "TUCK"
1635+ E305             >len_NFA         defl    $ - temp_NFA
1635+ E305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1635+ E301             >
1635+ E301 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1635+ E302 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1635+ E306             >                org     $-1                 // alter last byte of Name just above to set
1635+ E305 CB          >                db      {b $} | END_BIT     // msb as name end
1635+ E306             >
1635+ E306 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1635+ E308             >Prev_Ptr        defl    Heap_Ptr
1635+ E308             >
1635+ E308             >mirror_Ptr      defl    $
1635+ E308             >
1635+ E308 15 69       >                dw      Dict_Ptr + 2        // xt
1635+ E30A             >Heap_Ptr        defl    $ - $E000           // save current HP
1635+ E30A             >
1635+ E30A             >Current_HP      defl  $ - $E000             // used to set HP once!
1635+ E30A             >
1635+ E30A             >//              ______________________________________________________________________
1635+ E30A             >//              Dictionary part
1635+ E30A             >
1635+ E30A             >                org     Dict_Ptr
1635+ 6913             >
1635+ 6913 08 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1635+ 6915             >
1635+ 6915             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1635+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1635+ 6915 ~           >
1635+ 6915 ~           >
1635+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1635+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1635+ 6915             >
1635+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1636+ 6915 E1                           pop     hl
1637+ 6916 F1                           pop     af                  // < n1
1638+ 6917 E5                           push    hl                  // > n2  and TOS
1639+ 6918 F5                           push    af                  // > n1
1640+ 6919 E5                           push    hl
1641+ 691A                              next
1641+ 691A DD E9       >                jp      (ix)
1642+ 691C
1643+ 691C              //  ______________________________________________________________________
1644+ 691C              //
1645+ 691C              // swap         n1 n2 -- n2 n1
1646+ 691C              // swaps the two values on top of stack
1647+ 691C                              New_Def SWAP, "SWAP", is_code, is_normal
1647+ 691C             >
1647+ 691C             >Dict_Ptr        defl    $
1647+ 691C             >
1647+ 691C             >//              ______________________________________________________________________
1647+ 691C             >//              Heap part
1647+ 691C             >
1647+ 691C             >
1647+ 691C             >                org     (Heap_Ptr & $1FFF) + $E000
1647+ E30A             >
1647+ E30A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ E30A             >Latest_Definition defl  Heap_Ptr
1647+ E30A             >
1647+ E30A             >                // dummy db directives used to calculate length of namec
1647+ E30A 53 57 41 50 >                db      "SWAP"
1647+ E30E             >len_NFA         defl    $ - temp_NFA
1647+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ E30A             >
1647+ E30A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ E30B 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1647+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1647+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1647+ E30F             >
1647+ E30F 01 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1647+ E311             >Prev_Ptr        defl    Heap_Ptr
1647+ E311             >
1647+ E311             >mirror_Ptr      defl    $
1647+ E311             >
1647+ E311 1E 69       >                dw      Dict_Ptr + 2        // xt
1647+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1647+ E313             >
1647+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1647+ E313             >
1647+ E313             >//              ______________________________________________________________________
1647+ E313             >//              Dictionary part
1647+ E313             >
1647+ E313             >                org     Dict_Ptr
1647+ 691C             >
1647+ 691C 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1647+ 691E             >
1647+ 691E             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 691E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1647+ 691E ~           >
1647+ 691E ~           >
1647+ 691E             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 691E             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 691E             >
1647+ 691E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 691E E1                           pop     hl                  // < n1
1649+ 691F E3                           ex      (sp),hl             // > n2
1650+ 6920 E5                           push    hl                  // copy n1 to TOS
1651+ 6921                              next
1651+ 6921 DD E9       >                jp      (ix)
1652+ 6923
1653+ 6923              //  ______________________________________________________________________
1654+ 6923              //
1655+ 6923              // dup         n -- n n
1656+ 6923              // duplicates the top value of stack
1657+ 6923                              New_Def DUP, "DUP", is_code, is_normal
1657+ 6923             >
1657+ 6923             >Dict_Ptr        defl    $
1657+ 6923             >
1657+ 6923             >//              ______________________________________________________________________
1657+ 6923             >//              Heap part
1657+ 6923             >
1657+ 6923             >
1657+ 6923             >                org     (Heap_Ptr & $1FFF) + $E000
1657+ E313             >
1657+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ E313             >Latest_Definition defl  Heap_Ptr
1657+ E313             >
1657+ E313             >                // dummy db directives used to calculate length of namec
1657+ E313 44 55 50    >                db      "DUP"
1657+ E316             >len_NFA         defl    $ - temp_NFA
1657+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ E313             >
1657+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ E314 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1657+ E317             >                org     $-1                 // alter last byte of Name just above to set
1657+ E316 D0          >                db      {b $} | END_BIT     // msb as name end
1657+ E317             >
1657+ E317 0A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1657+ E319             >Prev_Ptr        defl    Heap_Ptr
1657+ E319             >
1657+ E319             >mirror_Ptr      defl    $
1657+ E319             >
1657+ E319 25 69       >                dw      Dict_Ptr + 2        // xt
1657+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1657+ E31B             >
1657+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1657+ E31B             >
1657+ E31B             >//              ______________________________________________________________________
1657+ E31B             >//              Dictionary part
1657+ E31B             >
1657+ E31B             >                org     Dict_Ptr
1657+ 6923             >
1657+ 6923 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1657+ 6925             >
1657+ 6925             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1657+ 6925 ~           >
1657+ 6925 ~           >
1657+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 6925             >
1657+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 6925 E1                           pop     hl
1659+ 6926 E5                           push    hl                  // > n duplicate TOS
1660+ 6927 E5                           push    hl
1661+ 6928                              next
1661+ 6928 DD E9       >                jp      (ix)
1662+ 692A
1663+ 692A              //  ______________________________________________________________________
1664+ 692A              //
1665+ 692A              // rot         n1 n2 n3 -- n2 n3 n1
1666+ 692A              // Rotates the 3 top values of stack by picking the 3rd in access-order
1667+ 692A              // and putting it on top. The other two are shifted down one place.
1668+ 692A                              New_Def ROT, "ROT", is_code, is_normal
1668+ 692A             >
1668+ 692A             >Dict_Ptr        defl    $
1668+ 692A             >
1668+ 692A             >//              ______________________________________________________________________
1668+ 692A             >//              Heap part
1668+ 692A             >
1668+ 692A             >
1668+ 692A             >                org     (Heap_Ptr & $1FFF) + $E000
1668+ E31B             >
1668+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1668+ E31B             >Latest_Definition defl  Heap_Ptr
1668+ E31B             >
1668+ E31B             >                // dummy db directives used to calculate length of namec
1668+ E31B 52 4F 54    >                db      "ROT"
1668+ E31E             >len_NFA         defl    $ - temp_NFA
1668+ E31E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1668+ E31B             >
1668+ E31B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1668+ E31C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1668+ E31F             >                org     $-1                 // alter last byte of Name just above to set
1668+ E31E D4          >                db      {b $} | END_BIT     // msb as name end
1668+ E31F             >
1668+ E31F 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1668+ E321             >Prev_Ptr        defl    Heap_Ptr
1668+ E321             >
1668+ E321             >mirror_Ptr      defl    $
1668+ E321             >
1668+ E321 2C 69       >                dw      Dict_Ptr + 2        // xt
1668+ E323             >Heap_Ptr        defl    $ - $E000           // save current HP
1668+ E323             >
1668+ E323             >Current_HP      defl  $ - $E000             // used to set HP once!
1668+ E323             >
1668+ E323             >//              ______________________________________________________________________
1668+ E323             >//              Dictionary part
1668+ E323             >
1668+ E323             >                org     Dict_Ptr
1668+ 692A             >
1668+ 692A 21 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1668+ 692C             >
1668+ 692C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1668+ 692C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1668+ 692C ~           >
1668+ 692C ~           >
1668+ 692C             >                endif           ; ok        // for other definitions it "points" the correct handler
1668+ 692C             >                // Use of "; ok" to suppress "warning[fwdref]"
1668+ 692C             >
1668+ 692C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1669+ 692C D9                           exx
1670+ 692D D1                           pop     de                  // < n3
1671+ 692E E1                           pop     hl                  // < n2
1672+ 692F E3                           ex      (sp),hl             // > n2 < n1
1673+ 6930 D5                           push    de                  // > n3
1674+ 6931 E5                           push    hl                  // copy n1 to TOS
1675+ 6932 D9                           exx
1676+ 6933                              next
1676+ 6933 DD E9       >                jp      (ix)
1677+ 6935
1678+ 6935              //  ______________________________________________________________________
1679+ 6935              //
1680+ 6935              // -rot         n1 n2 n3 -- n3 n1 n2
1681+ 6935              // Rotates the 3 top values of stack by picking the 1st in access-order
1682+ 6935              // and putting back to 3rd place. The other two are shifted down one place.
1683+ 6935                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1683+ 6935             >
1683+ 6935             >Dict_Ptr        defl    $
1683+ 6935             >
1683+ 6935             >//              ______________________________________________________________________
1683+ 6935             >//              Heap part
1683+ 6935             >
1683+ 6935             >
1683+ 6935             >                org     (Heap_Ptr & $1FFF) + $E000
1683+ E323             >
1683+ E323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ E323             >Latest_Definition defl  Heap_Ptr
1683+ E323             >
1683+ E323             >                // dummy db directives used to calculate length of namec
1683+ E323 2D 52 4F 54 >                db      "-ROT"
1683+ E327             >len_NFA         defl    $ - temp_NFA
1683+ E327             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ E323             >
1683+ E323 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ E324 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1683+ E328             >                org     $-1                 // alter last byte of Name just above to set
1683+ E327 D4          >                db      {b $} | END_BIT     // msb as name end
1683+ E328             >
1683+ E328 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1683+ E32A             >Prev_Ptr        defl    Heap_Ptr
1683+ E32A             >
1683+ E32A             >mirror_Ptr      defl    $
1683+ E32A             >
1683+ E32A 37 69       >                dw      Dict_Ptr + 2        // xt
1683+ E32C             >Heap_Ptr        defl    $ - $E000           // save current HP
1683+ E32C             >
1683+ E32C             >Current_HP      defl  $ - $E000             // used to set HP once!
1683+ E32C             >
1683+ E32C             >//              ______________________________________________________________________
1683+ E32C             >//              Dictionary part
1683+ E32C             >
1683+ E32C             >                org     Dict_Ptr
1683+ 6935             >
1683+ 6935 2A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1683+ 6937             >
1683+ 6937             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6937 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 6937 ~           >
1683+ 6937 ~           >
1683+ 6937             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6937             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6937             >
1683+ 6937             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6937 D9                           exx
1685+ 6938 E1                           pop     hl                  // < n3
1686+ 6939 D1                           pop     de                  // < n2
1687+ 693A E3                           ex      (sp),hl             // > n3 < n1
1688+ 693B E5                           push    hl                  // > n1
1689+ 693C D5                           push    de                  // copy n3 to TOS
1690+ 693D D9                           exx
1691+ 693E                              next
1691+ 693E DD E9       >                jp      (ix)
1692+ 6940
1693+ 6940              //  ______________________________________________________________________
1694+ 6940              //
1695+ 6940              // pick        n1 -- nx
1696+ 6940              // picks the nth element from TOS
1697+ 6940                              New_Def PICK, "PICK", is_code, is_normal
1697+ 6940             >
1697+ 6940             >Dict_Ptr        defl    $
1697+ 6940             >
1697+ 6940             >//              ______________________________________________________________________
1697+ 6940             >//              Heap part
1697+ 6940             >
1697+ 6940             >
1697+ 6940             >                org     (Heap_Ptr & $1FFF) + $E000
1697+ E32C             >
1697+ E32C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ E32C             >Latest_Definition defl  Heap_Ptr
1697+ E32C             >
1697+ E32C             >                // dummy db directives used to calculate length of namec
1697+ E32C 50 49 43 4B >                db      "PICK"
1697+ E330             >len_NFA         defl    $ - temp_NFA
1697+ E330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ E32C             >
1697+ E32C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ E32D 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1697+ E331             >                org     $-1                 // alter last byte of Name just above to set
1697+ E330 CB          >                db      {b $} | END_BIT     // msb as name end
1697+ E331             >
1697+ E331 23 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1697+ E333             >Prev_Ptr        defl    Heap_Ptr
1697+ E333             >
1697+ E333             >mirror_Ptr      defl    $
1697+ E333             >
1697+ E333 42 69       >                dw      Dict_Ptr + 2        // xt
1697+ E335             >Heap_Ptr        defl    $ - $E000           // save current HP
1697+ E335             >
1697+ E335             >Current_HP      defl  $ - $E000             // used to set HP once!
1697+ E335             >
1697+ E335             >//              ______________________________________________________________________
1697+ E335             >//              Dictionary part
1697+ E335             >
1697+ E335             >                org     Dict_Ptr
1697+ 6940             >
1697+ 6940 33 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1697+ 6942             >
1697+ 6942             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 6942 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1697+ 6942 ~           >
1697+ 6942 ~           >
1697+ 6942             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 6942             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 6942             >
1697+ 6942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 6942 E1                           pop     hl                  // take TOS as index
1699+ 6943 29                           add     hl, hl              // as cells
1700+ 6944 39                           add     hl, sp              // from Stack Pointer
1701+ 6945 7E                           ld      a, (hl)             // replace TOS
1702+ 6946 23                           inc     hl
1703+ 6947 66                           ld      h, (hl)
1704+ 6948 6F                           ld      l, a
1705+ 6949 E5                           push    hl
1706+ 694A                              next
1706+ 694A DD E9       >                jp      (ix)
1707+ 694C
1708+ 694C
1709+ 694C              //  ______________________________________________________________________
1710+ 694C              //
1711+ 694C              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1712+ 694C              // picks the nth element from TOS
1713+ 694C              //              New_Def ROLL, "ROLL", is_code, is_normal
1714+ 694C              //              exx                     // we need all registers free
1715+ 694C              //              pop     hl              // number of cells to roll
1716+ 694C              //              ld      a, h
1717+ 694C              //              or       l
1718+ 694C              //              jr      z, Roll_Zero
1719+ 694C              //                  add     hl, hl              // number of bytes to move
1720+ 694C              //                  ld      b, h
1721+ 694C              //                  ld      c, l
1722+ 694C              //                  add     hl, sp          // address of n1
1723+ 694C              //                  ld      a, (hl)         // take n1 into a and a,
1724+ 694C              //                  inc     hl
1725+ 694C              //                  ex      af, af'
1726+ 694C              //                  ld      a, (hl)         // take n1 into a and a,
1727+ 694C              //                  ld      d, h
1728+ 694C              //                  ld      e, l
1729+ 694C              //                  dec     hl
1730+ 694C              //                  dec     hl
1731+ 694C              //                  lddr
1732+ 694C              //                  ex      de, hl
1733+ 694C              //                  ld      (hl), a
1734+ 694C              //                  dec     hl
1735+ 694C              //                  ex      af, af'
1736+ 694C              //                  ld      (hl), a
1737+ 694C              //Roll_Zero:
1738+ 694C              //              exx
1739+ 694C              //              next
1740+ 694C
1741+ 694C
1742+ 694C              //  ______________________________________________________________________
1743+ 694C              //
1744+ 694C              // 2over        d1 d2 -- d1 d2 d1
1745+ 694C              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1746+ 694C              // copy the second double of stack and put on top.
1747+ 694C                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1747+ 694C             >
1747+ 694C             >Dict_Ptr        defl    $
1747+ 694C             >
1747+ 694C             >//              ______________________________________________________________________
1747+ 694C             >//              Heap part
1747+ 694C             >
1747+ 694C             >
1747+ 694C             >                org     (Heap_Ptr & $1FFF) + $E000
1747+ E335             >
1747+ E335             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1747+ E335             >Latest_Definition defl  Heap_Ptr
1747+ E335             >
1747+ E335             >                // dummy db directives used to calculate length of namec
1747+ E335 32 4F 56 45 >                db      "2OVER"
1747+ E339 52          >
1747+ E33A             >len_NFA         defl    $ - temp_NFA
1747+ E33A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1747+ E335             >
1747+ E335 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1747+ E336 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1747+ E33A 52          >
1747+ E33B             >                org     $-1                 // alter last byte of Name just above to set
1747+ E33A D2          >                db      {b $} | END_BIT     // msb as name end
1747+ E33B             >
1747+ E33B 2C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1747+ E33D             >Prev_Ptr        defl    Heap_Ptr
1747+ E33D             >
1747+ E33D             >mirror_Ptr      defl    $
1747+ E33D             >
1747+ E33D 4E 69       >                dw      Dict_Ptr + 2        // xt
1747+ E33F             >Heap_Ptr        defl    $ - $E000           // save current HP
1747+ E33F             >
1747+ E33F             >Current_HP      defl  $ - $E000             // used to set HP once!
1747+ E33F             >
1747+ E33F             >//              ______________________________________________________________________
1747+ E33F             >//              Dictionary part
1747+ E33F             >
1747+ E33F             >                org     Dict_Ptr
1747+ 694C             >
1747+ 694C 3D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1747+ 694E             >
1747+ 694E             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1747+ 694E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1747+ 694E ~           >
1747+ 694E ~           >
1747+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
1747+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
1747+ 694E             >
1747+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1748+ 694E D9                           exx
1749+ 694F 21 07 00                     ld      hl, 7
1750+ 6952 39                           add     hl, sp
1751+ 6953 56                           ld      d, (hl)
1752+ 6954 2B                           dec     hl
1753+ 6955 5E                           ld      e, (hl)             // d1-L
1754+ 6956 D5                           push    de
1755+ 6957 2B                           dec     hl
1756+ 6958 56                           ld      d, (hl)
1757+ 6959 2B                           dec     hl
1758+ 695A 5E                           ld      e, (hl)             // d1-H
1759+ 695B D5                           push    de
1760+ 695C D9                           exx
1761+ 695D                              next
1761+ 695D DD E9       >                jp      (ix)
1762+ 695F
1763+ 695F              //  ______________________________________________________________________
1764+ 695F              //
1765+ 695F              // 2drop        d --
1766+ 695F              //              n1 n2 --
1767+ 695F              // drops the top double from stack
1768+ 695F                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1768+ 695F             >
1768+ 695F             >Dict_Ptr        defl    $
1768+ 695F             >
1768+ 695F             >//              ______________________________________________________________________
1768+ 695F             >//              Heap part
1768+ 695F             >
1768+ 695F             >
1768+ 695F             >                org     (Heap_Ptr & $1FFF) + $E000
1768+ E33F             >
1768+ E33F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1768+ E33F             >Latest_Definition defl  Heap_Ptr
1768+ E33F             >
1768+ E33F             >                // dummy db directives used to calculate length of namec
1768+ E33F 32 44 52 4F >                db      "2DROP"
1768+ E343 50          >
1768+ E344             >len_NFA         defl    $ - temp_NFA
1768+ E344             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1768+ E33F             >
1768+ E33F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1768+ E340 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1768+ E344 50          >
1768+ E345             >                org     $-1                 // alter last byte of Name just above to set
1768+ E344 D0          >                db      {b $} | END_BIT     // msb as name end
1768+ E345             >
1768+ E345 35 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1768+ E347             >Prev_Ptr        defl    Heap_Ptr
1768+ E347             >
1768+ E347             >mirror_Ptr      defl    $
1768+ E347             >
1768+ E347 61 69       >                dw      Dict_Ptr + 2        // xt
1768+ E349             >Heap_Ptr        defl    $ - $E000           // save current HP
1768+ E349             >
1768+ E349             >Current_HP      defl  $ - $E000             // used to set HP once!
1768+ E349             >
1768+ E349             >//              ______________________________________________________________________
1768+ E349             >//              Dictionary part
1768+ E349             >
1768+ E349             >                org     Dict_Ptr
1768+ 695F             >
1768+ 695F 47 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1768+ 6961             >
1768+ 6961             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1768+ 6961 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1768+ 6961 ~           >
1768+ 6961 ~           >
1768+ 6961             >                endif           ; ok        // for other definitions it "points" the correct handler
1768+ 6961             >                // Use of "; ok" to suppress "warning[fwdref]"
1768+ 6961             >
1768+ 6961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1769+ 6961 E1                           pop     hl
1770+ 6962 E1                           pop     hl
1771+ 6963                              next
1771+ 6963 DD E9       >                jp      (ix)
1772+ 6965
1773+ 6965              //  ______________________________________________________________________
1774+ 6965              //
1775+ 6965              // 2nip         d1 d2 -- d2
1776+ 6965              //              n1 n2 n3 n4 -- n3 n4
1777+ 6965              // drops the second double on the stack
1778+ 6965              //              New_Def TWO_NIP, 4, "2nip"
1779+ 6965              //              ...
1780+ 6965
1781+ 6965              //  ______________________________________________________________________
1782+ 6965              //
1783+ 6965              // 2tuck         d1 d2 -- d2 d1 d2
1784+ 6965              // copy the top element after the second.
1785+ 6965              //              New_Def TWO_TUCK, 5, "2tuck"
1786+ 6965              //              ...
1787+ 6965
1788+ 6965              //  ______________________________________________________________________
1789+ 6965              //
1790+ 6965              // 2swap         d1 d2 -- d2 d1
1791+ 6965              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1792+ 6965              // swaps the two doubles on top of stack
1793+ 6965                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1793+ 6965             >
1793+ 6965             >Dict_Ptr        defl    $
1793+ 6965             >
1793+ 6965             >//              ______________________________________________________________________
1793+ 6965             >//              Heap part
1793+ 6965             >
1793+ 6965             >
1793+ 6965             >                org     (Heap_Ptr & $1FFF) + $E000
1793+ E349             >
1793+ E349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ E349             >Latest_Definition defl  Heap_Ptr
1793+ E349             >
1793+ E349             >                // dummy db directives used to calculate length of namec
1793+ E349 32 53 57 41 >                db      "2SWAP"
1793+ E34D 50          >
1793+ E34E             >len_NFA         defl    $ - temp_NFA
1793+ E34E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ E349             >
1793+ E349 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ E34A 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1793+ E34E 50          >
1793+ E34F             >                org     $-1                 // alter last byte of Name just above to set
1793+ E34E D0          >                db      {b $} | END_BIT     // msb as name end
1793+ E34F             >
1793+ E34F 3F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1793+ E351             >Prev_Ptr        defl    Heap_Ptr
1793+ E351             >
1793+ E351             >mirror_Ptr      defl    $
1793+ E351             >
1793+ E351 67 69       >                dw      Dict_Ptr + 2        // xt
1793+ E353             >Heap_Ptr        defl    $ - $E000           // save current HP
1793+ E353             >
1793+ E353             >Current_HP      defl  $ - $E000             // used to set HP once!
1793+ E353             >
1793+ E353             >//              ______________________________________________________________________
1793+ E353             >//              Dictionary part
1793+ E353             >
1793+ E353             >                org     Dict_Ptr
1793+ 6965             >
1793+ 6965 51 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1793+ 6967             >
1793+ 6967             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6967 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6967 ~           >
1793+ 6967 ~           >
1793+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6967             >
1793+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6967 D9                           exx
1795+ 6968 F1                           pop     af                  //   d2-H
1796+ 6969 E1                           pop     hl                  // < d2-L
1797+ 696A D1                           pop     de                  // < d1-H
1798+ 696B E3                           ex      (sp), hl            // < d1-L > d2-L
1799+ 696C F5                           push    af                  // > d2-H
1800+ 696D E5                           push    hl                  // > d1-L
1801+ 696E D5                           push    de
1802+ 696F D9                           exx
1803+ 6970                              next
1803+ 6970 DD E9       >                jp      (ix)
1804+ 6972
1805+ 6972              //  ______________________________________________________________________
1806+ 6972              //
1807+ 6972              // 2dup         d -- d d
1808+ 6972              //              n1 n2 -- n1 n2 n1 n2
1809+ 6972              // duplicates the top double of stack
1810+ 6972                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1810+ 6972             >
1810+ 6972             >Dict_Ptr        defl    $
1810+ 6972             >
1810+ 6972             >//              ______________________________________________________________________
1810+ 6972             >//              Heap part
1810+ 6972             >
1810+ 6972             >
1810+ 6972             >                org     (Heap_Ptr & $1FFF) + $E000
1810+ E353             >
1810+ E353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1810+ E353             >Latest_Definition defl  Heap_Ptr
1810+ E353             >
1810+ E353             >                // dummy db directives used to calculate length of namec
1810+ E353 32 44 55 50 >                db      "2DUP"
1810+ E357             >len_NFA         defl    $ - temp_NFA
1810+ E357             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1810+ E353             >
1810+ E353 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1810+ E354 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1810+ E358             >                org     $-1                 // alter last byte of Name just above to set
1810+ E357 D0          >                db      {b $} | END_BIT     // msb as name end
1810+ E358             >
1810+ E358 49 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1810+ E35A             >Prev_Ptr        defl    Heap_Ptr
1810+ E35A             >
1810+ E35A             >mirror_Ptr      defl    $
1810+ E35A             >
1810+ E35A 74 69       >                dw      Dict_Ptr + 2        // xt
1810+ E35C             >Heap_Ptr        defl    $ - $E000           // save current HP
1810+ E35C             >
1810+ E35C             >Current_HP      defl  $ - $E000             // used to set HP once!
1810+ E35C             >
1810+ E35C             >//              ______________________________________________________________________
1810+ E35C             >//              Dictionary part
1810+ E35C             >
1810+ E35C             >                org     Dict_Ptr
1810+ 6972             >
1810+ 6972 5A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1810+ 6974             >
1810+ 6974             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1810+ 6974 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1810+ 6974 ~           >
1810+ 6974 ~           >
1810+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1810+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1810+ 6974             >
1810+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1811+ 6974 E1                           pop     hl                  // < d-H
1812+ 6975 F1                           pop     af                  // < d-L
1813+ 6976 F5                           push    af                  // < d-L
1814+ 6977 E5                           push    hl                  // > d-H
1815+ 6978 F5                           push    af                  // > d-L
1816+ 6979 E5                           push    hl                  // > d-H
1817+ 697A                              next
1817+ 697A DD E9       >                jp      (ix)
1818+ 697C
1819+ 697C              //  ______________________________________________________________________
1820+ 697C              //
1821+ 697C              // 2rot         d1 d2 d3 -- d2 d3 d1
1822+ 697C              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1823+ 697C              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1824+ 697C              // and putting it on top. The other two are shifted down one place.
1825+ 697C              //              New_Def TWO?ROT, 4, "2rot"
1826+ 697C              //              ...
1827+ 697C              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1828+ 697C              //
1829+ 697C              //      d3  |d2  |d1  |
1830+ 697C              //      h l |h l |h l |
1831+ 697C              // SP   LHED|LHED|LHED|
1832+ 697C              // SP  +0123|4567|89ab|
1833+ 697C              //              ld      hl, $000B
1834+ 697C              //              add     hl, sp
1835+ 697C              //              ld      d, (hl)
1836+ 697C              //              dec     hl
1837+ 697C              //              ld      e, (hl)
1838+ 697C              //              dec     hl
1839+ 697C              //              push    de
1840+ 697C              //              ld      d, (hl)
1841+ 697C              //              dec     hl
1842+ 697C              //              ld      e, (hl)
1843+ 697C              //              dec     hl
1844+ 697C              //              push    de
1845+ 697C
1846+ 697C              //      d1  |d3  |d2  |d1  |
1847+ 697C              //      h l |h l |h l |h l |
1848+ 697C              // SP   LHED|LHED|LHED|LHED|
1849+ 697C              // SP       +0123|4567|89ab|
1850+ 697C
1851+ 697C              //              ld      d, h
1852+ 697C              //              ld      e, l
1853+ 697C              //              inc     de
1854+ 697C              //              inc     de
1855+ 697C              //              inc     de
1856+ 697C              //              inc     de
1857+ 697C              //              push    bc
1858+ 697C              //              ld      bc, $000C
1859+ 697C              //              lddr
1860+ 697C              //              pop     bc
1861+ 697C              //              pop     de
1862+ 697C              //              pop     de
1863+ 697C              //
1864+ 697C              //              next
1865+ 697C
1866+ 697C
1867+ 697C              //  ______________________________________________________________________
1868+ 697C              //
1869+ 697C              // +!           n a --
1870+ 697C              // Sums to the content of address a the number n.
1871+ 697C              // It is the same of  a @ n + a !
1872+ 697C                              New_Def PLUSSTORE, "+!", is_code, is_normal
1872+ 697C             >
1872+ 697C             >Dict_Ptr        defl    $
1872+ 697C             >
1872+ 697C             >//              ______________________________________________________________________
1872+ 697C             >//              Heap part
1872+ 697C             >
1872+ 697C             >
1872+ 697C             >                org     (Heap_Ptr & $1FFF) + $E000
1872+ E35C             >
1872+ E35C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1872+ E35C             >Latest_Definition defl  Heap_Ptr
1872+ E35C             >
1872+ E35C             >                // dummy db directives used to calculate length of namec
1872+ E35C 2B 21       >                db      "+!"
1872+ E35E             >len_NFA         defl    $ - temp_NFA
1872+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1872+ E35C             >
1872+ E35C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1872+ E35D 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1872+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1872+ E35E A1          >                db      {b $} | END_BIT     // msb as name end
1872+ E35F             >
1872+ E35F 53 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1872+ E361             >Prev_Ptr        defl    Heap_Ptr
1872+ E361             >
1872+ E361             >mirror_Ptr      defl    $
1872+ E361             >
1872+ E361 7E 69       >                dw      Dict_Ptr + 2        // xt
1872+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1872+ E363             >
1872+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1872+ E363             >
1872+ E363             >//              ______________________________________________________________________
1872+ E363             >//              Dictionary part
1872+ E363             >
1872+ E363             >                org     Dict_Ptr
1872+ 697C             >
1872+ 697C 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1872+ 697E             >
1872+ 697E             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1872+ 697E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1872+ 697E ~           >
1872+ 697E ~           >
1872+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1872+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1872+ 697E             >
1872+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1873+ 697E D9                           exx
1874+ 697F E1                           pop     hl                  // hl is the address
1875+ 6980 D1                           pop     de                  // de is the number
1876+ 6981 7E                           ld      a, (hl)
1877+ 6982 83                           add     e
1878+ 6983 77                           ld      (hl), a
1879+ 6984 23                           inc     hl
1880+ 6985 7E                           ld      a, (hl)
1881+ 6986 8A                           adc     d
1882+ 6987 77                           ld      (hl), a
1883+ 6988 D9                           exx
1884+ 6989                              next
1884+ 6989 DD E9       >                jp      (ix)
1885+ 698B
1886+ 698B              //  ______________________________________________________________________
1887+ 698B              //
1888+ 698B              // toggle       a n --
1889+ 698B              // Complements (xor) the byte at addrress  a  with the model n.
1890+ 698B                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1890+ 698B             >
1890+ 698B             >Dict_Ptr        defl    $
1890+ 698B             >
1890+ 698B             >//              ______________________________________________________________________
1890+ 698B             >//              Heap part
1890+ 698B             >
1890+ 698B             >
1890+ 698B             >                org     (Heap_Ptr & $1FFF) + $E000
1890+ E363             >
1890+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ E363             >Latest_Definition defl  Heap_Ptr
1890+ E363             >
1890+ E363             >                // dummy db directives used to calculate length of namec
1890+ E363 54 4F 47 47 >                db      "TOGGLE"
1890+ E367 4C 45       >
1890+ E369             >len_NFA         defl    $ - temp_NFA
1890+ E369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ E363             >
1890+ E363 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ E364 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1890+ E368 4C 45       >
1890+ E36A             >                org     $-1                 // alter last byte of Name just above to set
1890+ E369 C5          >                db      {b $} | END_BIT     // msb as name end
1890+ E36A             >
1890+ E36A 5C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1890+ E36C             >Prev_Ptr        defl    Heap_Ptr
1890+ E36C             >
1890+ E36C             >mirror_Ptr      defl    $
1890+ E36C             >
1890+ E36C 8D 69       >                dw      Dict_Ptr + 2        // xt
1890+ E36E             >Heap_Ptr        defl    $ - $E000           // save current HP
1890+ E36E             >
1890+ E36E             >Current_HP      defl  $ - $E000             // used to set HP once!
1890+ E36E             >
1890+ E36E             >//              ______________________________________________________________________
1890+ E36E             >//              Dictionary part
1890+ E36E             >
1890+ E36E             >                org     Dict_Ptr
1890+ 698B             >
1890+ 698B 6C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1890+ 698D             >
1890+ 698D             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 698D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1890+ 698D ~           >
1890+ 698D ~           >
1890+ 698D             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 698D             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 698D             >
1890+ 698D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 698D E1                           pop     hl
1892+ 698E 7D                           ld      a, l
1893+ 698F E1                           pop     hl
1894+ 6990 AE                           xor     (hl)
1895+ 6991 77                           ld      (hl), a
1896+ 6992
1897+ 6992                              next
1897+ 6992 DD E9       >                jp      (ix)
1898+ 6994
1899+ 6994              //  ______________________________________________________________________
1900+ 6994              //
1901+ 6994              // @            a -- n
1902+ 6994              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1903+ 6994                              New_Def FETCH, "@", is_code, is_normal
1903+ 6994             >
1903+ 6994             >Dict_Ptr        defl    $
1903+ 6994             >
1903+ 6994             >//              ______________________________________________________________________
1903+ 6994             >//              Heap part
1903+ 6994             >
1903+ 6994             >
1903+ 6994             >                org     (Heap_Ptr & $1FFF) + $E000
1903+ E36E             >
1903+ E36E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1903+ E36E             >Latest_Definition defl  Heap_Ptr
1903+ E36E             >
1903+ E36E             >                // dummy db directives used to calculate length of namec
1903+ E36E 40          >                db      "@"
1903+ E36F             >len_NFA         defl    $ - temp_NFA
1903+ E36F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1903+ E36E             >
1903+ E36E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1903+ E36F 40          >                db      "@"               // name string in 7-bit ascii, but
1903+ E370             >                org     $-1                 // alter last byte of Name just above to set
1903+ E36F C0          >                db      {b $} | END_BIT     // msb as name end
1903+ E370             >
1903+ E370 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1903+ E372             >Prev_Ptr        defl    Heap_Ptr
1903+ E372             >
1903+ E372             >mirror_Ptr      defl    $
1903+ E372             >
1903+ E372 96 69       >                dw      Dict_Ptr + 2        // xt
1903+ E374             >Heap_Ptr        defl    $ - $E000           // save current HP
1903+ E374             >
1903+ E374             >Current_HP      defl  $ - $E000             // used to set HP once!
1903+ E374             >
1903+ E374             >//              ______________________________________________________________________
1903+ E374             >//              Dictionary part
1903+ E374             >
1903+ E374             >                org     Dict_Ptr
1903+ 6994             >
1903+ 6994 72 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1903+ 6996             >
1903+ 6996             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1903+ 6996 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1903+ 6996 ~           >
1903+ 6996 ~           >
1903+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1903+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1903+ 6996             >
1903+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1904+ 6996 E1                           pop     hl
1905+ 6997 7E                           ld      a, (hl)             // low-byte
1906+ 6998 23                           inc     hl
1907+ 6999 66                           ld      h, (hl)             // high-byte
1908+ 699A 6F                           ld      l, a
1909+ 699B E5                           push    hl
1910+ 699C                              next
1910+ 699C DD E9       >                jp      (ix)
1911+ 699E
1912+ 699E              //  ______________________________________________________________________
1913+ 699E              //
1914+ 699E              // !            n a --
1915+ 699E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1916+ 699E                              New_Def STORE, "!", is_code, is_normal
1916+ 699E             >
1916+ 699E             >Dict_Ptr        defl    $
1916+ 699E             >
1916+ 699E             >//              ______________________________________________________________________
1916+ 699E             >//              Heap part
1916+ 699E             >
1916+ 699E             >
1916+ 699E             >                org     (Heap_Ptr & $1FFF) + $E000
1916+ E374             >
1916+ E374             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1916+ E374             >Latest_Definition defl  Heap_Ptr
1916+ E374             >
1916+ E374             >                // dummy db directives used to calculate length of namec
1916+ E374 21          >                db      "!"
1916+ E375             >len_NFA         defl    $ - temp_NFA
1916+ E375             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1916+ E374             >
1916+ E374 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1916+ E375 21          >                db      "!"               // name string in 7-bit ascii, but
1916+ E376             >                org     $-1                 // alter last byte of Name just above to set
1916+ E375 A1          >                db      {b $} | END_BIT     // msb as name end
1916+ E376             >
1916+ E376 6E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1916+ E378             >Prev_Ptr        defl    Heap_Ptr
1916+ E378             >
1916+ E378             >mirror_Ptr      defl    $
1916+ E378             >
1916+ E378 A0 69       >                dw      Dict_Ptr + 2        // xt
1916+ E37A             >Heap_Ptr        defl    $ - $E000           // save current HP
1916+ E37A             >
1916+ E37A             >Current_HP      defl  $ - $E000             // used to set HP once!
1916+ E37A             >
1916+ E37A             >//              ______________________________________________________________________
1916+ E37A             >//              Dictionary part
1916+ E37A             >
1916+ E37A             >                org     Dict_Ptr
1916+ 699E             >
1916+ 699E 78 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1916+ 69A0             >
1916+ 69A0             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1916+ 69A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1916+ 69A0 ~           >
1916+ 69A0 ~           >
1916+ 69A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1916+ 69A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1916+ 69A0             >
1916+ 69A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1917+ 69A0 D9                           exx
1918+ 69A1 E1                           pop     hl                  // address
1919+ 69A2 D1                           pop     de                  // < n
1920+ 69A3 73                           ld      (hl), e             // low-byte
1921+ 69A4 23                           inc     hl
1922+ 69A5 72                           ld      (hl), d             // high-byte
1923+ 69A6 D9                           exx
1924+ 69A7                              next
1924+ 69A7 DD E9       >                jp      (ix)
1925+ 69A9
1926+ 69A9              //  ______________________________________________________________________
1927+ 69A9              //
1928+ 69A9              // c@           a -- c
1929+ 69A9              // fetch a character n from address a
1930+ 69A9                              New_Def CFETCH, "C@", is_code, is_normal
1930+ 69A9             >
1930+ 69A9             >Dict_Ptr        defl    $
1930+ 69A9             >
1930+ 69A9             >//              ______________________________________________________________________
1930+ 69A9             >//              Heap part
1930+ 69A9             >
1930+ 69A9             >
1930+ 69A9             >                org     (Heap_Ptr & $1FFF) + $E000
1930+ E37A             >
1930+ E37A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1930+ E37A             >Latest_Definition defl  Heap_Ptr
1930+ E37A             >
1930+ E37A             >                // dummy db directives used to calculate length of namec
1930+ E37A 43 40       >                db      "C@"
1930+ E37C             >len_NFA         defl    $ - temp_NFA
1930+ E37C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1930+ E37A             >
1930+ E37A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1930+ E37B 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1930+ E37D             >                org     $-1                 // alter last byte of Name just above to set
1930+ E37C C0          >                db      {b $} | END_BIT     // msb as name end
1930+ E37D             >
1930+ E37D 74 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1930+ E37F             >Prev_Ptr        defl    Heap_Ptr
1930+ E37F             >
1930+ E37F             >mirror_Ptr      defl    $
1930+ E37F             >
1930+ E37F AB 69       >                dw      Dict_Ptr + 2        // xt
1930+ E381             >Heap_Ptr        defl    $ - $E000           // save current HP
1930+ E381             >
1930+ E381             >Current_HP      defl  $ - $E000             // used to set HP once!
1930+ E381             >
1930+ E381             >//              ______________________________________________________________________
1930+ E381             >//              Dictionary part
1930+ E381             >
1930+ E381             >                org     Dict_Ptr
1930+ 69A9             >
1930+ 69A9 7F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1930+ 69AB             >
1930+ 69AB             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1930+ 69AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1930+ 69AB ~           >
1930+ 69AB ~           >
1930+ 69AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1930+ 69AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1930+ 69AB             >
1930+ 69AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1931+ 69AB E1                           pop     hl
1932+ 69AC 6E                           ld      l, (hl)             // low-byte
1933+ 69AD 26 00                        ld      h, 0
1934+ 69AF
1935+ 69AF                              psh1
1935+ 69AF E5          >                push    hl
1935+ 69B0 DD E9       >                jp      (ix)
1936+ 69B2
1937+ 69B2              //  ______________________________________________________________________
1938+ 69B2              //
1939+ 69B2              // c!           c a --
1940+ 69B2              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1941+ 69B2                              New_Def CSTORE, "C!", is_code, is_normal
1941+ 69B2             >
1941+ 69B2             >Dict_Ptr        defl    $
1941+ 69B2             >
1941+ 69B2             >//              ______________________________________________________________________
1941+ 69B2             >//              Heap part
1941+ 69B2             >
1941+ 69B2             >
1941+ 69B2             >                org     (Heap_Ptr & $1FFF) + $E000
1941+ E381             >
1941+ E381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1941+ E381             >Latest_Definition defl  Heap_Ptr
1941+ E381             >
1941+ E381             >                // dummy db directives used to calculate length of namec
1941+ E381 43 21       >                db      "C!"
1941+ E383             >len_NFA         defl    $ - temp_NFA
1941+ E383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1941+ E381             >
1941+ E381 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1941+ E382 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1941+ E384             >                org     $-1                 // alter last byte of Name just above to set
1941+ E383 A1          >                db      {b $} | END_BIT     // msb as name end
1941+ E384             >
1941+ E384 7A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1941+ E386             >Prev_Ptr        defl    Heap_Ptr
1941+ E386             >
1941+ E386             >mirror_Ptr      defl    $
1941+ E386             >
1941+ E386 B4 69       >                dw      Dict_Ptr + 2        // xt
1941+ E388             >Heap_Ptr        defl    $ - $E000           // save current HP
1941+ E388             >
1941+ E388             >Current_HP      defl  $ - $E000             // used to set HP once!
1941+ E388             >
1941+ E388             >//              ______________________________________________________________________
1941+ E388             >//              Dictionary part
1941+ E388             >
1941+ E388             >                org     Dict_Ptr
1941+ 69B2             >
1941+ 69B2 86 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1941+ 69B4             >
1941+ 69B4             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1941+ 69B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1941+ 69B4 ~           >
1941+ 69B4 ~           >
1941+ 69B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1941+ 69B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1941+ 69B4             >
1941+ 69B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1942+ 69B4 D9                           exx
1943+ 69B5 E1                           pop     hl                  // < address
1944+ 69B6 D1                           pop     de
1945+ 69B7 73                           ld      (hl), e             // low-byte
1946+ 69B8 D9                           exx
1947+ 69B9                              next
1947+ 69B9 DD E9       >                jp      (ix)
1948+ 69BB
1949+ 69BB              //  ______________________________________________________________________
1950+ 69BB              //
1951+ 69BB              // 2@           a -- d
1952+ 69BB              // fetch a 32 bits number d from address a and leaves it on top of the
1953+ 69BB              // stack as two single numbers, high part as top of the stack.
1954+ 69BB              // A double number is normally kept in CPU registers as HLDE.
1955+ 69BB              // On stack a double number is treated as two single numbers
1956+ 69BB              // where BC is on the top of the stack and HL is the second from top,
1957+ 69BB              // so the sign of the number can be checked on top of stack
1958+ 69BB              // and in the stack memory it appears as LHED.
1959+ 69BB                              New_Def TWO_FETCH, "2@", is_code, is_normal
1959+ 69BB             >
1959+ 69BB             >Dict_Ptr        defl    $
1959+ 69BB             >
1959+ 69BB             >//              ______________________________________________________________________
1959+ 69BB             >//              Heap part
1959+ 69BB             >
1959+ 69BB             >
1959+ 69BB             >                org     (Heap_Ptr & $1FFF) + $E000
1959+ E388             >
1959+ E388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ E388             >Latest_Definition defl  Heap_Ptr
1959+ E388             >
1959+ E388             >                // dummy db directives used to calculate length of namec
1959+ E388 32 40       >                db      "2@"
1959+ E38A             >len_NFA         defl    $ - temp_NFA
1959+ E38A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ E388             >
1959+ E388 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ E389 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1959+ E38B             >                org     $-1                 // alter last byte of Name just above to set
1959+ E38A C0          >                db      {b $} | END_BIT     // msb as name end
1959+ E38B             >
1959+ E38B 81 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1959+ E38D             >Prev_Ptr        defl    Heap_Ptr
1959+ E38D             >
1959+ E38D             >mirror_Ptr      defl    $
1959+ E38D             >
1959+ E38D BD 69       >                dw      Dict_Ptr + 2        // xt
1959+ E38F             >Heap_Ptr        defl    $ - $E000           // save current HP
1959+ E38F             >
1959+ E38F             >Current_HP      defl  $ - $E000             // used to set HP once!
1959+ E38F             >
1959+ E38F             >//              ______________________________________________________________________
1959+ E38F             >//              Dictionary part
1959+ E38F             >
1959+ E38F             >                org     Dict_Ptr
1959+ 69BB             >
1959+ 69BB 8D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1959+ 69BD             >
1959+ 69BD             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 69BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 69BD ~           >
1959+ 69BD ~           >
1959+ 69BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 69BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 69BD             >
1959+ 69BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 69BD D9                           exx
1961+ 69BE E1                           pop     hl                  // address
1962+ 69BF 5E                           ld      e, (hl)             // low-byte
1963+ 69C0 23                           inc     hl
1964+ 69C1 56                           ld      d, (hl)             // high-byte
1965+ 69C2 23                           inc     hl
1966+ 69C3 7E                           ld      a, (hl)             // low-byte
1967+ 69C4 23                           inc     hl
1968+ 69C5 66                           ld      h, (hl)             // high-byte
1969+ 69C6 6F                           ld      l, a
1970+ 69C7 E5                           push    hl
1971+ 69C8 D5                           push    de
1972+ 69C9 D9                           exx
1973+ 69CA                              next
1973+ 69CA DD E9       >                jp      (ix)
1974+ 69CC
1975+ 69CC              //  ______________________________________________________________________
1976+ 69CC              //
1977+ 69CC              // 2!           d a --
1978+ 69CC              // stores a 32 bits number d from address a and leaves it on top of the
1979+ 69CC              // stack as two single numbers, high part as top of the stack.
1980+ 69CC              // A double number is normally kept in CPU registers as HLDE.
1981+ 69CC              // On stack a double number is treated as two single numbers
1982+ 69CC              // where BC is on the top of the stack and HL is the second from top,
1983+ 69CC              // so the sign of the number can be checked on top of stack
1984+ 69CC              // and in the stack memory it appears as LHED.
1985+ 69CC                              New_Def TWO_STORE, "2!", is_code, is_normal
1985+ 69CC             >
1985+ 69CC             >Dict_Ptr        defl    $
1985+ 69CC             >
1985+ 69CC             >//              ______________________________________________________________________
1985+ 69CC             >//              Heap part
1985+ 69CC             >
1985+ 69CC             >
1985+ 69CC             >                org     (Heap_Ptr & $1FFF) + $E000
1985+ E38F             >
1985+ E38F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1985+ E38F             >Latest_Definition defl  Heap_Ptr
1985+ E38F             >
1985+ E38F             >                // dummy db directives used to calculate length of namec
1985+ E38F 32 21       >                db      "2!"
1985+ E391             >len_NFA         defl    $ - temp_NFA
1985+ E391             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1985+ E38F             >
1985+ E38F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1985+ E390 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1985+ E392             >                org     $-1                 // alter last byte of Name just above to set
1985+ E391 A1          >                db      {b $} | END_BIT     // msb as name end
1985+ E392             >
1985+ E392 88 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1985+ E394             >Prev_Ptr        defl    Heap_Ptr
1985+ E394             >
1985+ E394             >mirror_Ptr      defl    $
1985+ E394             >
1985+ E394 CE 69       >                dw      Dict_Ptr + 2        // xt
1985+ E396             >Heap_Ptr        defl    $ - $E000           // save current HP
1985+ E396             >
1985+ E396             >Current_HP      defl  $ - $E000             // used to set HP once!
1985+ E396             >
1985+ E396             >//              ______________________________________________________________________
1985+ E396             >//              Dictionary part
1985+ E396             >
1985+ E396             >                org     Dict_Ptr
1985+ 69CC             >
1985+ 69CC 94 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1985+ 69CE             >
1985+ 69CE             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1985+ 69CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1985+ 69CE ~           >
1985+ 69CE ~           >
1985+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1985+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1985+ 69CE             >
1985+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1986+ 69CE D9                           exx
1987+ 69CF E1                           pop     hl                  // address
1988+ 69D0 C1                           pop     bc                  // < high-part
1989+ 69D1 D1                           pop     de                  // < low-part > Instruction Pointer
1990+ 69D2 71                           ld      (hl), c
1991+ 69D3 23                           inc     hl
1992+ 69D4 70                           ld      (hl), b
1993+ 69D5 23                           inc     hl
1994+ 69D6 73                           ld      (hl), e
1995+ 69D7 23                           inc     hl
1996+ 69D8 72                           ld      (hl), d
1997+ 69D9 D9                           exx
1998+ 69DA                              next
1998+ 69DA DD E9       >                jp      (ix)
1999+ 69DC
2000+ 69DC              //  ______________________________________________________________________
2001+ 69DC              //
2002+ 69DC              // p@           a -- c
2003+ 69DC              // Read one byte from port a and leave the result on top of stack
2004+ 69DC                              New_Def PFETCH, "P@", is_code, is_normal
2004+ 69DC             >
2004+ 69DC             >Dict_Ptr        defl    $
2004+ 69DC             >
2004+ 69DC             >//              ______________________________________________________________________
2004+ 69DC             >//              Heap part
2004+ 69DC             >
2004+ 69DC             >
2004+ 69DC             >                org     (Heap_Ptr & $1FFF) + $E000
2004+ E396             >
2004+ E396             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2004+ E396             >Latest_Definition defl  Heap_Ptr
2004+ E396             >
2004+ E396             >                // dummy db directives used to calculate length of namec
2004+ E396 50 40       >                db      "P@"
2004+ E398             >len_NFA         defl    $ - temp_NFA
2004+ E398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2004+ E396             >
2004+ E396 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2004+ E397 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2004+ E399             >                org     $-1                 // alter last byte of Name just above to set
2004+ E398 C0          >                db      {b $} | END_BIT     // msb as name end
2004+ E399             >
2004+ E399 8F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2004+ E39B             >Prev_Ptr        defl    Heap_Ptr
2004+ E39B             >
2004+ E39B             >mirror_Ptr      defl    $
2004+ E39B             >
2004+ E39B DE 69       >                dw      Dict_Ptr + 2        // xt
2004+ E39D             >Heap_Ptr        defl    $ - $E000           // save current HP
2004+ E39D             >
2004+ E39D             >Current_HP      defl  $ - $E000             // used to set HP once!
2004+ E39D             >
2004+ E39D             >//              ______________________________________________________________________
2004+ E39D             >//              Dictionary part
2004+ E39D             >
2004+ E39D             >                org     Dict_Ptr
2004+ 69DC             >
2004+ 69DC 9B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2004+ 69DE             >
2004+ 69DE             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2004+ 69DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2004+ 69DE ~           >
2004+ 69DE ~           >
2004+ 69DE             >                endif           ; ok        // for other definitions it "points" the correct handler
2004+ 69DE             >                // Use of "; ok" to suppress "warning[fwdref]"
2004+ 69DE             >
2004+ 69DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2005+ 69DE D9                           exx
2006+ 69DF C1                           pop     bc
2007+ 69E0 26 00                        ld      h, 0
2008+ 69E2 ED 68                        in      l, (c)
2009+ 69E4 E5                           push    hl
2010+ 69E5 D9                           exx
2011+ 69E6                              next
2011+ 69E6 DD E9       >                jp      (ix)
2012+ 69E8
2013+ 69E8              //  ______________________________________________________________________
2014+ 69E8              //
2015+ 69E8              // p!           c a --
2016+ 69E8              // Send one byte (top of stack) to port a
2017+ 69E8                              New_Def PSTORE, "P!", is_code, is_normal
2017+ 69E8             >
2017+ 69E8             >Dict_Ptr        defl    $
2017+ 69E8             >
2017+ 69E8             >//              ______________________________________________________________________
2017+ 69E8             >//              Heap part
2017+ 69E8             >
2017+ 69E8             >
2017+ 69E8             >                org     (Heap_Ptr & $1FFF) + $E000
2017+ E39D             >
2017+ E39D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2017+ E39D             >Latest_Definition defl  Heap_Ptr
2017+ E39D             >
2017+ E39D             >                // dummy db directives used to calculate length of namec
2017+ E39D 50 21       >                db      "P!"
2017+ E39F             >len_NFA         defl    $ - temp_NFA
2017+ E39F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2017+ E39D             >
2017+ E39D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2017+ E39E 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2017+ E3A0             >                org     $-1                 // alter last byte of Name just above to set
2017+ E39F A1          >                db      {b $} | END_BIT     // msb as name end
2017+ E3A0             >
2017+ E3A0 96 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2017+ E3A2             >Prev_Ptr        defl    Heap_Ptr
2017+ E3A2             >
2017+ E3A2             >mirror_Ptr      defl    $
2017+ E3A2             >
2017+ E3A2 EA 69       >                dw      Dict_Ptr + 2        // xt
2017+ E3A4             >Heap_Ptr        defl    $ - $E000           // save current HP
2017+ E3A4             >
2017+ E3A4             >Current_HP      defl  $ - $E000             // used to set HP once!
2017+ E3A4             >
2017+ E3A4             >//              ______________________________________________________________________
2017+ E3A4             >//              Dictionary part
2017+ E3A4             >
2017+ E3A4             >                org     Dict_Ptr
2017+ 69E8             >
2017+ 69E8 A2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2017+ 69EA             >
2017+ 69EA             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2017+ 69EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2017+ 69EA ~           >
2017+ 69EA ~           >
2017+ 69EA             >                endif           ; ok        // for other definitions it "points" the correct handler
2017+ 69EA             >                // Use of "; ok" to suppress "warning[fwdref]"
2017+ 69EA             >
2017+ 69EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2018+ 69EA D9                           exx
2019+ 69EB C1                           pop     bc
2020+ 69EC E1                           pop     hl                  // < c
2021+ 69ED ED 69                        out     (c), l              // low-byte
2022+ 69EF D9                           exx
2023+ 69F0                              next
2023+ 69F0 DD E9       >                jp      (ix)
2024+ 69F2
2025+ 69F2
2026+ 69F2              //  ______________________________________________________________________
2027+ 69F2              //
2028+ 69F2              // 2*           n1 -- n2
2029+ 69F2              // doubles the number at top of stack
2030+ 69F2                              New_Def TWO_MUL, "2*", is_code, is_normal
2030+ 69F2             >
2030+ 69F2             >Dict_Ptr        defl    $
2030+ 69F2             >
2030+ 69F2             >//              ______________________________________________________________________
2030+ 69F2             >//              Heap part
2030+ 69F2             >
2030+ 69F2             >
2030+ 69F2             >                org     (Heap_Ptr & $1FFF) + $E000
2030+ E3A4             >
2030+ E3A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2030+ E3A4             >Latest_Definition defl  Heap_Ptr
2030+ E3A4             >
2030+ E3A4             >                // dummy db directives used to calculate length of namec
2030+ E3A4 32 2A       >                db      "2*"
2030+ E3A6             >len_NFA         defl    $ - temp_NFA
2030+ E3A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2030+ E3A4             >
2030+ E3A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2030+ E3A5 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2030+ E3A7             >                org     $-1                 // alter last byte of Name just above to set
2030+ E3A6 AA          >                db      {b $} | END_BIT     // msb as name end
2030+ E3A7             >
2030+ E3A7 9D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2030+ E3A9             >Prev_Ptr        defl    Heap_Ptr
2030+ E3A9             >
2030+ E3A9             >mirror_Ptr      defl    $
2030+ E3A9             >
2030+ E3A9 F4 69       >                dw      Dict_Ptr + 2        // xt
2030+ E3AB             >Heap_Ptr        defl    $ - $E000           // save current HP
2030+ E3AB             >
2030+ E3AB             >Current_HP      defl  $ - $E000             // used to set HP once!
2030+ E3AB             >
2030+ E3AB             >//              ______________________________________________________________________
2030+ E3AB             >//              Dictionary part
2030+ E3AB             >
2030+ E3AB             >                org     Dict_Ptr
2030+ 69F2             >
2030+ 69F2 A9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2030+ 69F4             >
2030+ 69F4             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2030+ 69F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2030+ 69F4 ~           >
2030+ 69F4 ~           >
2030+ 69F4             >                endif           ; ok        // for other definitions it "points" the correct handler
2030+ 69F4             >                // Use of "; ok" to suppress "warning[fwdref]"
2030+ 69F4             >
2030+ 69F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2031+ 69F4              Two_Mul_Ptr:
2032+ 69F4 E1                           pop     hl
2033+ 69F5 29                           add     hl, hl
2034+ 69F6
2035+ 69F6                              psh1
2035+ 69F6 E5          >                push    hl
2035+ 69F7 DD E9       >                jp      (ix)
2036+ 69F9
2037+ 69F9              //  ______________________________________________________________________
2038+ 69F9              //
2039+ 69F9              // 2/           n1 -- n2
2040+ 69F9              // halves the top of stack, sign is unchanged
2041+ 69F9                              New_Def TWO_DIV, "2/", is_code, is_normal
2041+ 69F9             >
2041+ 69F9             >Dict_Ptr        defl    $
2041+ 69F9             >
2041+ 69F9             >//              ______________________________________________________________________
2041+ 69F9             >//              Heap part
2041+ 69F9             >
2041+ 69F9             >
2041+ 69F9             >                org     (Heap_Ptr & $1FFF) + $E000
2041+ E3AB             >
2041+ E3AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2041+ E3AB             >Latest_Definition defl  Heap_Ptr
2041+ E3AB             >
2041+ E3AB             >                // dummy db directives used to calculate length of namec
2041+ E3AB 32 2F       >                db      "2/"
2041+ E3AD             >len_NFA         defl    $ - temp_NFA
2041+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2041+ E3AB             >
2041+ E3AB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2041+ E3AC 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2041+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2041+ E3AD AF          >                db      {b $} | END_BIT     // msb as name end
2041+ E3AE             >
2041+ E3AE A4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2041+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2041+ E3B0             >
2041+ E3B0             >mirror_Ptr      defl    $
2041+ E3B0             >
2041+ E3B0 FB 69       >                dw      Dict_Ptr + 2        // xt
2041+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2041+ E3B2             >
2041+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2041+ E3B2             >
2041+ E3B2             >//              ______________________________________________________________________
2041+ E3B2             >//              Dictionary part
2041+ E3B2             >
2041+ E3B2             >                org     Dict_Ptr
2041+ 69F9             >
2041+ 69F9 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2041+ 69FB             >
2041+ 69FB             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2041+ 69FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2041+ 69FB ~           >
2041+ 69FB ~           >
2041+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
2041+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
2041+ 69FB             >
2041+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2042+ 69FB E1                           pop     hl
2043+ 69FC CB 2C                        sra     h
2044+ 69FE CB 1D                        rr      l
2045+ 6A00
2046+ 6A00                              psh1
2046+ 6A00 E5          >                push    hl
2046+ 6A01 DD E9       >                jp      (ix)
2047+ 6A03
2048+ 6A03              //  ______________________________________________________________________
2049+ 6A03              //
2050+ 6A03              // lshift       n1 u -- n2
2051+ 6A03              // bit left shift of u bits
2052+ 6A03                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2052+ 6A03             >
2052+ 6A03             >Dict_Ptr        defl    $
2052+ 6A03             >
2052+ 6A03             >//              ______________________________________________________________________
2052+ 6A03             >//              Heap part
2052+ 6A03             >
2052+ 6A03             >
2052+ 6A03             >                org     (Heap_Ptr & $1FFF) + $E000
2052+ E3B2             >
2052+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2052+ E3B2             >Latest_Definition defl  Heap_Ptr
2052+ E3B2             >
2052+ E3B2             >                // dummy db directives used to calculate length of namec
2052+ E3B2 4C 53 48 49 >                db      "LSHIFT"
2052+ E3B6 46 54       >
2052+ E3B8             >len_NFA         defl    $ - temp_NFA
2052+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2052+ E3B2             >
2052+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2052+ E3B3 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2052+ E3B7 46 54       >
2052+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2052+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2052+ E3B9             >
2052+ E3B9 AB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2052+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2052+ E3BB             >
2052+ E3BB             >mirror_Ptr      defl    $
2052+ E3BB             >
2052+ E3BB 05 6A       >                dw      Dict_Ptr + 2        // xt
2052+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2052+ E3BD             >
2052+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2052+ E3BD             >
2052+ E3BD             >//              ______________________________________________________________________
2052+ E3BD             >//              Dictionary part
2052+ E3BD             >
2052+ E3BD             >                org     Dict_Ptr
2052+ 6A03             >
2052+ 6A03 BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2052+ 6A05             >
2052+ 6A05             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2052+ 6A05 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2052+ 6A05 ~           >
2052+ 6A05 ~           >
2052+ 6A05             >                endif           ; ok        // for other definitions it "points" the correct handler
2052+ 6A05             >                // Use of "; ok" to suppress "warning[fwdref]"
2052+ 6A05             >
2052+ 6A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2053+ 6A05 D9                           exx
2054+ 6A06 C1                           pop     bc
2055+ 6A07 41                           ld      b, c
2056+ 6A08 D1                           pop     de
2057+ 6A09 ED 28                        bsla    de, b
2058+ 6A0B D5                           push    de
2059+ 6A0C D9                           exx
2060+ 6A0D                              next
2060+ 6A0D DD E9       >                jp      (ix)
2061+ 6A0F
2062+ 6A0F              //  ______________________________________________________________________
2063+ 6A0F              //
2064+ 6A0F              // rshift       n1 u -- n2
2065+ 6A0F              // bit right shift of u bits
2066+ 6A0F                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2066+ 6A0F             >
2066+ 6A0F             >Dict_Ptr        defl    $
2066+ 6A0F             >
2066+ 6A0F             >//              ______________________________________________________________________
2066+ 6A0F             >//              Heap part
2066+ 6A0F             >
2066+ 6A0F             >
2066+ 6A0F             >                org     (Heap_Ptr & $1FFF) + $E000
2066+ E3BD             >
2066+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2066+ E3BD             >Latest_Definition defl  Heap_Ptr
2066+ E3BD             >
2066+ E3BD             >                // dummy db directives used to calculate length of namec
2066+ E3BD 52 53 48 49 >                db      "RSHIFT"
2066+ E3C1 46 54       >
2066+ E3C3             >len_NFA         defl    $ - temp_NFA
2066+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2066+ E3BD             >
2066+ E3BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2066+ E3BE 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2066+ E3C2 46 54       >
2066+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
2066+ E3C3 D4          >                db      {b $} | END_BIT     // msb as name end
2066+ E3C4             >
2066+ E3C4 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2066+ E3C6             >Prev_Ptr        defl    Heap_Ptr
2066+ E3C6             >
2066+ E3C6             >mirror_Ptr      defl    $
2066+ E3C6             >
2066+ E3C6 11 6A       >                dw      Dict_Ptr + 2        // xt
2066+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
2066+ E3C8             >
2066+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
2066+ E3C8             >
2066+ E3C8             >//              ______________________________________________________________________
2066+ E3C8             >//              Dictionary part
2066+ E3C8             >
2066+ E3C8             >                org     Dict_Ptr
2066+ 6A0F             >
2066+ 6A0F C6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2066+ 6A11             >
2066+ 6A11             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2066+ 6A11 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2066+ 6A11 ~           >
2066+ 6A11 ~           >
2066+ 6A11             >                endif           ; ok        // for other definitions it "points" the correct handler
2066+ 6A11             >                // Use of "; ok" to suppress "warning[fwdref]"
2066+ 6A11             >
2066+ 6A11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2067+ 6A11 D9                           exx
2068+ 6A12 C1                           pop     bc
2069+ 6A13 41                           ld      b, c
2070+ 6A14 D1                           pop     de
2071+ 6A15 ED 2A                        bsrl    de, b
2072+ 6A17 D5                           push    de
2073+ 6A18 D9                           exx
2074+ 6A19                              next
2074+ 6A19 DD E9       >                jp      (ix)
2075+ 6A1B
2076+ 6A1B              //  ______________________________________________________________________
2077+ 6A1B              //
2078+ 6A1B              // cells        n1 -- n2
2079+ 6A1B              // decrement by 2 top of stack
2080+ 6A1B                              New_Def CELLS, "CELLS", is_code, is_normal
2080+ 6A1B             >
2080+ 6A1B             >Dict_Ptr        defl    $
2080+ 6A1B             >
2080+ 6A1B             >//              ______________________________________________________________________
2080+ 6A1B             >//              Heap part
2080+ 6A1B             >
2080+ 6A1B             >
2080+ 6A1B             >                org     (Heap_Ptr & $1FFF) + $E000
2080+ E3C8             >
2080+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2080+ E3C8             >Latest_Definition defl  Heap_Ptr
2080+ E3C8             >
2080+ E3C8             >                // dummy db directives used to calculate length of namec
2080+ E3C8 43 45 4C 4C >                db      "CELLS"
2080+ E3CC 53          >
2080+ E3CD             >len_NFA         defl    $ - temp_NFA
2080+ E3CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2080+ E3C8             >
2080+ E3C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2080+ E3C9 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2080+ E3CD 53          >
2080+ E3CE             >                org     $-1                 // alter last byte of Name just above to set
2080+ E3CD D3          >                db      {b $} | END_BIT     // msb as name end
2080+ E3CE             >
2080+ E3CE BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2080+ E3D0             >Prev_Ptr        defl    Heap_Ptr
2080+ E3D0             >
2080+ E3D0             >mirror_Ptr      defl    $
2080+ E3D0             >
2080+ E3D0 1D 6A       >                dw      Dict_Ptr + 2        // xt
2080+ E3D2             >Heap_Ptr        defl    $ - $E000           // save current HP
2080+ E3D2             >
2080+ E3D2             >Current_HP      defl  $ - $E000             // used to set HP once!
2080+ E3D2             >
2080+ E3D2             >//              ______________________________________________________________________
2080+ E3D2             >//              Dictionary part
2080+ E3D2             >
2080+ E3D2             >                org     Dict_Ptr
2080+ 6A1B             >
2080+ 6A1B D0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2080+ 6A1D             >
2080+ 6A1D             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2080+ 6A1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2080+ 6A1D ~           >
2080+ 6A1D ~           >
2080+ 6A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
2080+ 6A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
2080+ 6A1D             >
2080+ 6A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2081+ 6A1D C3 F4 69                     jp      Two_Mul_Ptr
2082+ 6A20
2083+ 6A20
2084+ 6A20              //  ______________________________________________________________________
2085+ 6A20
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A20                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A20              //  ______________________________________________________________________
   2+ 6A20              //
   3+ 6A20              //  L1.asm
   4+ 6A20              //
   5+ 6A20              //  Level-1 definitions and derivate
   6+ 6A20              //  ______________________________________________________________________
   7+ 6A20
   8+ 6A20              //  ______________________________________________________________________
   9+ 6A20              //
  10+ 6A20              // :            -- cccc     ( compile time )
  11+ 6A20              //              i*x -- j*x  ( run time )
  12+ 6A20              // Colon Definition
  13+ 6A20                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A20             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A20             >
  13+ 6A20             >Dict_Ptr        defl    $
  13+ 6A20             >
  13+ 6A20             >//              ______________________________________________________________________
  13+ 6A20             >//              Heap part
  13+ 6A20             >
  13+ 6A20             >
  13+ 6A20             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3D2             >
  13+ E3D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3D2             >Latest_Definition defl  Heap_Ptr
  13+ E3D2             >
  13+ E3D2             >                // dummy db directives used to calculate length of namec
  13+ E3D2 3A          >                db      ":"
  13+ E3D3             >len_NFA         defl    $ - temp_NFA
  13+ E3D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3D2             >
  13+ E3D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3D3 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3D4             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3D3 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3D4             >
  13+ E3D4 C8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3D6             >Prev_Ptr        defl    Heap_Ptr
  13+ E3D6             >
  13+ E3D6             >mirror_Ptr      defl    $
  13+ E3D6             >
  13+ E3D6 22 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3D8             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D8             >
  13+ E3D8             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D8             >
  13+ E3D8             >//              ______________________________________________________________________
  13+ E3D8             >//              Dictionary part
  13+ E3D8             >
  13+ E3D8             >                org     Dict_Ptr
  13+ 6A20             >
  13+ 6A20 D6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A22             >
  13+ 6A22             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A22 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A25             >
  13+ 6A25             >
  13+ 6A25             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A25             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A25             >
  13+ 6A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A25
  15+ 6A25 17 6E                        dw      QEXEC                   // ?exec
  16+ 6A27 E2 6D                        dw      STORE_CSP               // !csp
  17+ 6A29 53 6B 96 69                  dw      CURRENT, FETCH          // current @
  18+ 6A2D 4D 6B A0 69                  dw      CONTEXT, STORE          // context !
  19+ 6A31 03 74                        dw      CREATE                  // create  ( forward )
  20+ 6A33 9B 6E                        dw      SMUDGE                  // dmudge
  21+ 6A35 8C 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A37 D7 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A39                                                              // ... immediate
  24+ 6A39              Enter_Ptr:
  25+ 6A39                              // via call coded in CFA
  26+ 6A39 EB                           ex      de, hl //**
  27+ 6A3A                              // *** ldhlrp
  28+ 6A3A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A3B 70                           ld      (hl), b
  30+ 6A3C 2B                           dec     hl
  31+ 6A3D 71                           ld      (hl), c
  32+ 6A3E                              // *** ldrphl
  33+ 6A3E EB                           ex      de, hl //**
  34+ 6A3F
  35+ 6A3F
  36+ 6A3F C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A40                              next
  37+ 6A40 DD E9       >                jp      (ix)
  38+ 6A42
  39+ 6A42              //  ______________________________________________________________________
  40+ 6A42              //
  41+ 6A42              // ;            --
  42+ 6A42              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A42                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A42             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A42             >
  43+ 6A42             >Dict_Ptr        defl    $
  43+ 6A42             >
  43+ 6A42             >//              ______________________________________________________________________
  43+ 6A42             >//              Heap part
  43+ 6A42             >
  43+ 6A42             >
  43+ 6A42             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D8             >
  43+ E3D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D8             >Latest_Definition defl  Heap_Ptr
  43+ E3D8             >
  43+ E3D8             >                // dummy db directives used to calculate length of namec
  43+ E3D8 3B          >                db      ";"
  43+ E3D9             >len_NFA         defl    $ - temp_NFA
  43+ E3D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D8             >
  43+ E3D8 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D9 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3DA             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D9 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3DA             >
  43+ E3DA D2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3DC             >Prev_Ptr        defl    Heap_Ptr
  43+ E3DC             >
  43+ E3DC             >mirror_Ptr      defl    $
  43+ E3DC             >
  43+ E3DC 44 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3DE             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3DE             >
  43+ E3DE             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3DE             >
  43+ E3DE             >//              ______________________________________________________________________
  43+ E3DE             >//              Dictionary part
  43+ E3DE             >
  43+ E3DE             >                org     Dict_Ptr
  43+ 6A42             >
  43+ 6A42 DC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A44             >
  43+ 6A44             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A44 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A47             >
  43+ 6A47             >
  43+ 6A47             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A47             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A47             >
  43+ 6A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A47
  45+ 6A47 37 6E                        dw      QCSP                    // ?csp
  46+ 6A49 5F 6E 4C 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A4D 9B 6E                        dw      SMUDGE                  // smudge
  48+ 6A4F 7F 6E                        dw      SQUARED_OPEN            // [
  49+ 6A51 4C 68                        dw      EXIT                    // ; immediate
  50+ 6A53
  51+ 6A53              //  ______________________________________________________________________
  52+ 6A53              //
  53+ 6A53              // noop         --
  54+ 6A53
  55+ 6A53                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A53             >
  55+ 6A53             >Dict_Ptr        defl    $
  55+ 6A53             >
  55+ 6A53             >//              ______________________________________________________________________
  55+ 6A53             >//              Heap part
  55+ 6A53             >
  55+ 6A53             >
  55+ 6A53             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3DE             >
  55+ E3DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3DE             >Latest_Definition defl  Heap_Ptr
  55+ E3DE             >
  55+ E3DE             >                // dummy db directives used to calculate length of namec
  55+ E3DE 4E 4F 4F 50 >                db      "NOOP"
  55+ E3E2             >len_NFA         defl    $ - temp_NFA
  55+ E3E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3DE             >
  55+ E3DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3DF 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3E3             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3E2 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3E3             >
  55+ E3E3 D8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3E5             >Prev_Ptr        defl    Heap_Ptr
  55+ E3E5             >
  55+ E3E5             >mirror_Ptr      defl    $
  55+ E3E5             >
  55+ E3E5 55 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3E7             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3E7             >
  55+ E3E7             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3E7             >
  55+ E3E7             >//              ______________________________________________________________________
  55+ E3E7             >//              Dictionary part
  55+ E3E7             >
  55+ E3E7             >                org     Dict_Ptr
  55+ 6A53             >
  55+ 6A53 E5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A55             >
  55+ 6A55             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A55 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A55 ~           >
  55+ 6A55 ~           >
  55+ 6A55             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A55             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A55             >
  55+ 6A55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A55                              next
  56+ 6A55 DD E9       >                jp      (ix)
  57+ 6A57
  58+ 6A57              //  ______________________________________________________________________
  59+ 6A57              //
  60+ 6A57              // constant     n -- cccc     ( compile time )
  61+ 6A57              //              -- n          ( run time )
  62+ 6A57              // Constant definition.
  63+ 6A57                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A57             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A57             >
  63+ 6A57             >Dict_Ptr        defl    $
  63+ 6A57             >
  63+ 6A57             >//              ______________________________________________________________________
  63+ 6A57             >//              Heap part
  63+ 6A57             >
  63+ 6A57             >
  63+ 6A57             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3E7             >
  63+ E3E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3E7             >Latest_Definition defl  Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >                // dummy db directives used to calculate length of namec
  63+ E3E7 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3EB 54 41 4E 54 >
  63+ E3EF             >len_NFA         defl    $ - temp_NFA
  63+ E3EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3E7             >
  63+ E3E7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E8 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3EC 54 41 4E 54 >
  63+ E3F0             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3EF D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3F0             >
  63+ E3F0 DE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3F2             >Prev_Ptr        defl    Heap_Ptr
  63+ E3F2             >
  63+ E3F2             >mirror_Ptr      defl    $
  63+ E3F2             >
  63+ E3F2 59 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3F4             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3F4             >
  63+ E3F4             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3F4             >
  63+ E3F4             >//              ______________________________________________________________________
  63+ E3F4             >//              Dictionary part
  63+ E3F4             >
  63+ E3F4             >                org     Dict_Ptr
  63+ 6A57             >
  63+ 6A57 F2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A59             >
  63+ 6A59             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A59 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A5C             >
  63+ 6A5C             >
  63+ 6A5C             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A5C             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A5C             >
  63+ 6A5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A5C 03 74                        dw      CREATE                  // create
  65+ 6A5E C9 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A60 D7 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A62              Constant_Ptr:
  68+ 6A62
  69+ 6A62
  70+ 6A62 E1                           pop     hl
  71+ 6A63
  72+ 6A63 7E                           ld      a, (hl)
  73+ 6A64 23                           inc     hl
  74+ 6A65 66                           ld      h, (hl)
  75+ 6A66 6F                           ld      l, a
  76+ 6A67 E5                           push    hl
  77+ 6A68                              next
  77+ 6A68 DD E9       >                jp      (ix)
  78+ 6A6A
  79+ 6A6A              //  ______________________________________________________________________
  80+ 6A6A              //
  81+ 6A6A              // variable     n -- cccc     ( compile time )
  82+ 6A6A              //              -- a          ( run time )
  83+ 6A6A              // Variable definition, n is the initial value.
  84+ 6A6A                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A6A             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A6A             >
  84+ 6A6A             >Dict_Ptr        defl    $
  84+ 6A6A             >
  84+ 6A6A             >//              ______________________________________________________________________
  84+ 6A6A             >//              Heap part
  84+ 6A6A             >
  84+ 6A6A             >
  84+ 6A6A             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3F4             >
  84+ E3F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3F4             >Latest_Definition defl  Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >                // dummy db directives used to calculate length of namec
  84+ E3F4 56 41 52 49 >                db      "VARIABLE"
  84+ E3F8 41 42 4C 45 >
  84+ E3FC             >len_NFA         defl    $ - temp_NFA
  84+ E3FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3F4             >
  84+ E3F4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3F5 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F9 41 42 4C 45 >
  84+ E3FD             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3FC C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3FD             >
  84+ E3FD E7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3FF             >Prev_Ptr        defl    Heap_Ptr
  84+ E3FF             >
  84+ E3FF             >mirror_Ptr      defl    $
  84+ E3FF             >
  84+ E3FF 6C 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E401             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E401             >
  84+ E401             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E401             >
  84+ E401             >//              ______________________________________________________________________
  84+ E401             >//              Dictionary part
  84+ E401             >
  84+ E401             >                org     Dict_Ptr
  84+ 6A6A             >
  84+ 6A6A FF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A6C             >
  84+ 6A6C             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A6C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A6F             >
  84+ 6A6F             >
  84+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A6F             >
  84+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A6F
  86+ 6A6F 8E 6A                        dw      ZERO
  87+ 6A71 59 6A                        dw      CONSTANT                // constant
  88+ 6A73 D7 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A75              Variable_Ptr:
  90+ 6A75
  91+ 6A75
  92+ 6A75
  93+ 6A75
  94+ 6A75                              next
  94+ 6A75 DD E9       >                jp      (ix)
  95+ 6A77
  96+ 6A77              //  ______________________________________________________________________
  97+ 6A77              //
  98+ 6A77              // user         b -- cccc     ( compile time )
  99+ 6A77              //              -- a          ( run time )
 100+ 6A77              // User variable definition
 101+ 6A77                              Colon_Def USER, "USER", is_normal
 101+ 6A77             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A77             >
 101+ 6A77             >Dict_Ptr        defl    $
 101+ 6A77             >
 101+ 6A77             >//              ______________________________________________________________________
 101+ 6A77             >//              Heap part
 101+ 6A77             >
 101+ 6A77             >
 101+ 6A77             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E401             >
 101+ E401             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E401             >Latest_Definition defl  Heap_Ptr
 101+ E401             >
 101+ E401             >                // dummy db directives used to calculate length of namec
 101+ E401 55 53 45 52 >                db      "USER"
 101+ E405             >len_NFA         defl    $ - temp_NFA
 101+ E405             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E401             >
 101+ E401 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E402 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E406             >                org     $-1                 // alter last byte of Name just above to set
 101+ E405 D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E406             >
 101+ E406 F4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E408             >Prev_Ptr        defl    Heap_Ptr
 101+ E408             >
 101+ E408             >mirror_Ptr      defl    $
 101+ E408             >
 101+ E408 79 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E40A             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E40A             >
 101+ E40A             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E40A             >
 101+ E40A             >//              ______________________________________________________________________
 101+ E40A             >//              Dictionary part
 101+ E40A             >
 101+ E40A             >                org     Dict_Ptr
 101+ 6A77             >
 101+ 6A77 08 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A79             >
 101+ 6A79             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A79 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A7C             >
 101+ 6A7C             >
 101+ 6A7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A7C             >
 101+ 6A7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A7C
 103+ 6A7C 03 74                        dw      CREATE                  // create
 104+ 6A7E D8 6B                        dw      CCOMMA                  // c,
 105+ 6A80 D7 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A82
 107+ 6A82
 108+ 6A82              User_Ptr:
 109+ 6A82                              // via call coded in CFA
 110+ 6A82 E1                           pop     hl
 111+ 6A83
 112+ 6A83 7E                           ld      a, (hl)
 113+ 6A84 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A87 ED 31                        add     hl, a
 115+ 6A89 E5                           push    hl
 116+ 6A8A                              next
 116+ 6A8A DD E9       >                jp      (ix)
 117+ 6A8C
 118+ 6A8C              //  ______________________________________________________________________
 119+ 6A8C              //
 120+ 6A8C                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A8C             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A8C             >
 120+ 6A8C             >Dict_Ptr        defl    $
 120+ 6A8C             >
 120+ 6A8C             >//              ______________________________________________________________________
 120+ 6A8C             >//              Heap part
 120+ 6A8C             >
 120+ 6A8C             >
 120+ 6A8C             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E40A             >
 120+ E40A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E40A             >Latest_Definition defl  Heap_Ptr
 120+ E40A             >
 120+ E40A             >                // dummy db directives used to calculate length of namec
 120+ E40A 30          >                db      "0"
 120+ E40B             >len_NFA         defl    $ - temp_NFA
 120+ E40B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E40A             >
 120+ E40A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E40B 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E40C             >                org     $-1                 // alter last byte of Name just above to set
 120+ E40B B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E40C             >
 120+ E40C 01 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E40E             >Prev_Ptr        defl    Heap_Ptr
 120+ E40E             >
 120+ E40E             >mirror_Ptr      defl    $
 120+ E40E             >
 120+ E40E 8E 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E410             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E410             >
 120+ E410             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E410             >
 120+ E410             >//              ______________________________________________________________________
 120+ E410             >//              Dictionary part
 120+ E410             >
 120+ E410             >                org     Dict_Ptr
 120+ 6A8C             >
 120+ 6A8C 0E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A8E             >
 120+ 6A8E             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A8E CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A91             >
 120+ 6A91             >
 120+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A91             >
 120+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A91 00 00       >                dw      0
 121+ 6A93                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A93             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A93             >
 121+ 6A93             >Dict_Ptr        defl    $
 121+ 6A93             >
 121+ 6A93             >//              ______________________________________________________________________
 121+ 6A93             >//              Heap part
 121+ 6A93             >
 121+ 6A93             >
 121+ 6A93             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E410             >
 121+ E410             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E410             >Latest_Definition defl  Heap_Ptr
 121+ E410             >
 121+ E410             >                // dummy db directives used to calculate length of namec
 121+ E410 31          >                db      "1"
 121+ E411             >len_NFA         defl    $ - temp_NFA
 121+ E411             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E410             >
 121+ E410 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E411 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E412             >                org     $-1                 // alter last byte of Name just above to set
 121+ E411 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E412             >
 121+ E412 0A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E414             >Prev_Ptr        defl    Heap_Ptr
 121+ E414             >
 121+ E414             >mirror_Ptr      defl    $
 121+ E414             >
 121+ E414 95 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E416             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E416             >
 121+ E416             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E416             >
 121+ E416             >//              ______________________________________________________________________
 121+ E416             >//              Dictionary part
 121+ E416             >
 121+ E416             >                org     Dict_Ptr
 121+ 6A93             >
 121+ 6A93 14 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A95             >
 121+ 6A95             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A95 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A98             >
 121+ 6A98             >
 121+ 6A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A98             >
 121+ 6A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A98 01 00       >                dw      1
 122+ 6A9A                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A9A             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A9A             >
 122+ 6A9A             >Dict_Ptr        defl    $
 122+ 6A9A             >
 122+ 6A9A             >//              ______________________________________________________________________
 122+ 6A9A             >//              Heap part
 122+ 6A9A             >
 122+ 6A9A             >
 122+ 6A9A             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E416             >
 122+ E416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E416             >Latest_Definition defl  Heap_Ptr
 122+ E416             >
 122+ E416             >                // dummy db directives used to calculate length of namec
 122+ E416 32          >                db      "2"
 122+ E417             >len_NFA         defl    $ - temp_NFA
 122+ E417             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E416             >
 122+ E416 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E417 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E418             >                org     $-1                 // alter last byte of Name just above to set
 122+ E417 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E418             >
 122+ E418 10 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E41A             >Prev_Ptr        defl    Heap_Ptr
 122+ E41A             >
 122+ E41A             >mirror_Ptr      defl    $
 122+ E41A             >
 122+ E41A 9C 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E41C             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E41C             >
 122+ E41C             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E41C             >
 122+ E41C             >//              ______________________________________________________________________
 122+ E41C             >//              Dictionary part
 122+ E41C             >
 122+ E41C             >                org     Dict_Ptr
 122+ 6A9A             >
 122+ 6A9A 1A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A9C             >
 122+ 6A9C             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A9C CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A9F             >
 122+ 6A9F             >
 122+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A9F             >
 122+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A9F 02 00       >                dw      2
 123+ 6AA1                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6AA1             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6AA1             >
 123+ 6AA1             >Dict_Ptr        defl    $
 123+ 6AA1             >
 123+ 6AA1             >//              ______________________________________________________________________
 123+ 6AA1             >//              Heap part
 123+ 6AA1             >
 123+ 6AA1             >
 123+ 6AA1             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E41C             >
 123+ E41C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E41C             >Latest_Definition defl  Heap_Ptr
 123+ E41C             >
 123+ E41C             >                // dummy db directives used to calculate length of namec
 123+ E41C 33          >                db      "3"
 123+ E41D             >len_NFA         defl    $ - temp_NFA
 123+ E41D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E41C             >
 123+ E41C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E41D 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E41E             >                org     $-1                 // alter last byte of Name just above to set
 123+ E41D B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E41E             >
 123+ E41E 16 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E420             >Prev_Ptr        defl    Heap_Ptr
 123+ E420             >
 123+ E420             >mirror_Ptr      defl    $
 123+ E420             >
 123+ E420 A3 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E422             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E422             >
 123+ E422             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E422             >
 123+ E422             >//              ______________________________________________________________________
 123+ E422             >//              Dictionary part
 123+ E422             >
 123+ E422             >                org     Dict_Ptr
 123+ 6AA1             >
 123+ 6AA1 20 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6AA3             >
 123+ 6AA3             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6AA3 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6AA6             >
 123+ 6AA6             >
 123+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6AA6             >
 123+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6AA6 03 00       >                dw      3
 124+ 6AA8                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6AA8             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6AA8             >
 124+ 6AA8             >Dict_Ptr        defl    $
 124+ 6AA8             >
 124+ 6AA8             >//              ______________________________________________________________________
 124+ 6AA8             >//              Heap part
 124+ 6AA8             >
 124+ 6AA8             >
 124+ 6AA8             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E422             >
 124+ E422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E422             >Latest_Definition defl  Heap_Ptr
 124+ E422             >
 124+ E422             >                // dummy db directives used to calculate length of namec
 124+ E422 2D 31       >                db      "-1"
 124+ E424             >len_NFA         defl    $ - temp_NFA
 124+ E424             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E422             >
 124+ E422 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E423 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E425             >                org     $-1                 // alter last byte of Name just above to set
 124+ E424 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E425             >
 124+ E425 1C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E427             >Prev_Ptr        defl    Heap_Ptr
 124+ E427             >
 124+ E427             >mirror_Ptr      defl    $
 124+ E427             >
 124+ E427 AA 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E429             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E429             >
 124+ E429             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E429             >
 124+ E429             >//              ______________________________________________________________________
 124+ E429             >//              Dictionary part
 124+ E429             >
 124+ E429             >                org     Dict_Ptr
 124+ 6AA8             >
 124+ 6AA8 27 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6AAA             >
 124+ 6AAA             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6AAA CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AAD             >
 124+ 6AAD             >
 124+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AAD             >
 124+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AAD FF FF       >                dw      -1
 125+ 6AAF                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AAF             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AAF             >
 125+ 6AAF             >Dict_Ptr        defl    $
 125+ 6AAF             >
 125+ 6AAF             >//              ______________________________________________________________________
 125+ 6AAF             >//              Heap part
 125+ 6AAF             >
 125+ 6AAF             >
 125+ 6AAF             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E429             >
 125+ E429             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E429             >Latest_Definition defl  Heap_Ptr
 125+ E429             >
 125+ E429             >                // dummy db directives used to calculate length of namec
 125+ E429 42 4C       >                db      "BL"
 125+ E42B             >len_NFA         defl    $ - temp_NFA
 125+ E42B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E429             >
 125+ E429 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E42A 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E42C             >                org     $-1                 // alter last byte of Name just above to set
 125+ E42B CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E42C             >
 125+ E42C 22 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E42E             >Prev_Ptr        defl    Heap_Ptr
 125+ E42E             >
 125+ E42E             >mirror_Ptr      defl    $
 125+ E42E             >
 125+ E42E B1 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E430             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E430             >
 125+ E430             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E430             >
 125+ E430             >//              ______________________________________________________________________
 125+ E430             >//              Dictionary part
 125+ E430             >
 125+ E430             >                org     Dict_Ptr
 125+ 6AAF             >
 125+ 6AAF 2E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AB1             >
 125+ 6AB1             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AB1 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AB4             >
 125+ 6AB4             >
 125+ 6AB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AB4             >
 125+ 6AB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AB4 20 00       >                dw      $20
 126+ 6AB6                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AB6             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AB6             >
 126+ 6AB6             >Dict_Ptr        defl    $
 126+ 6AB6             >
 126+ 6AB6             >//              ______________________________________________________________________
 126+ 6AB6             >//              Heap part
 126+ 6AB6             >
 126+ 6AB6             >
 126+ 6AB6             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E430             >
 126+ E430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E430             >Latest_Definition defl  Heap_Ptr
 126+ E430             >
 126+ E430             >                // dummy db directives used to calculate length of namec
 126+ E430 43 2F 4C    >                db      "C/L"
 126+ E433             >len_NFA         defl    $ - temp_NFA
 126+ E433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E430             >
 126+ E430 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E431 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E434             >                org     $-1                 // alter last byte of Name just above to set
 126+ E433 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E434             >
 126+ E434 29 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E436             >Prev_Ptr        defl    Heap_Ptr
 126+ E436             >
 126+ E436             >mirror_Ptr      defl    $
 126+ E436             >
 126+ E436 B8 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E438             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E438             >
 126+ E438             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E438             >
 126+ E438             >//              ______________________________________________________________________
 126+ E438             >//              Dictionary part
 126+ E438             >
 126+ E438             >                org     Dict_Ptr
 126+ 6AB6             >
 126+ 6AB6 36 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AB8             >
 126+ 6AB8             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AB8 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6ABB             >
 126+ 6ABB             >
 126+ 6ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6ABB             >
 126+ 6ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6ABB 40 00       >                dw      64
 127+ 6ABD                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6ABD             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6ABD             >
 127+ 6ABD             >Dict_Ptr        defl    $
 127+ 6ABD             >
 127+ 6ABD             >//              ______________________________________________________________________
 127+ 6ABD             >//              Heap part
 127+ 6ABD             >
 127+ 6ABD             >
 127+ 6ABD             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E438             >
 127+ E438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E438             >Latest_Definition defl  Heap_Ptr
 127+ E438             >
 127+ E438             >                // dummy db directives used to calculate length of namec
 127+ E438 42 2F 42 55 >                db      "B/BUF"
 127+ E43C 46          >
 127+ E43D             >len_NFA         defl    $ - temp_NFA
 127+ E43D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E438             >
 127+ E438 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E439 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E43D 46          >
 127+ E43E             >                org     $-1                 // alter last byte of Name just above to set
 127+ E43D C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E43E             >
 127+ E43E 30 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E440             >Prev_Ptr        defl    Heap_Ptr
 127+ E440             >
 127+ E440             >mirror_Ptr      defl    $
 127+ E440             >
 127+ E440 BF 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E442             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E442             >
 127+ E442             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E442             >
 127+ E442             >//              ______________________________________________________________________
 127+ E442             >//              Dictionary part
 127+ E442             >
 127+ E442             >                org     Dict_Ptr
 127+ 6ABD             >
 127+ 6ABD 40 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6ABF             >
 127+ 6ABF             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6ABF CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AC2             >
 127+ 6AC2             >
 127+ 6AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AC2             >
 127+ 6AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AC2 00 02       >                dw      512
 128+ 6AC4                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AC4             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AC4             >
 128+ 6AC4             >Dict_Ptr        defl    $
 128+ 6AC4             >
 128+ 6AC4             >//              ______________________________________________________________________
 128+ 6AC4             >//              Heap part
 128+ 6AC4             >
 128+ 6AC4             >
 128+ 6AC4             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E442             >
 128+ E442             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E442             >Latest_Definition defl  Heap_Ptr
 128+ E442             >
 128+ E442             >                // dummy db directives used to calculate length of namec
 128+ E442 42 2F 53 43 >                db      "B/SCR"
 128+ E446 52          >
 128+ E447             >len_NFA         defl    $ - temp_NFA
 128+ E447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E442             >
 128+ E442 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E443 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E447 52          >
 128+ E448             >                org     $-1                 // alter last byte of Name just above to set
 128+ E447 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E448             >
 128+ E448 38 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E44A             >Prev_Ptr        defl    Heap_Ptr
 128+ E44A             >
 128+ E44A             >mirror_Ptr      defl    $
 128+ E44A             >
 128+ E44A C6 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E44C             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E44C             >
 128+ E44C             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E44C             >
 128+ E44C             >//              ______________________________________________________________________
 128+ E44C             >//              Dictionary part
 128+ E44C             >
 128+ E44C             >                org     Dict_Ptr
 128+ 6AC4             >
 128+ 6AC4 4A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AC6             >
 128+ 6AC6             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AC6 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AC9             >
 128+ 6AC9             >
 128+ 6AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AC9             >
 128+ 6AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AC9 02 00       >                dw      2
 129+ 6ACB                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ACB             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ACB             >
 129+ 6ACB             >Dict_Ptr        defl    $
 129+ 6ACB             >
 129+ 6ACB             >//              ______________________________________________________________________
 129+ 6ACB             >//              Heap part
 129+ 6ACB             >
 129+ 6ACB             >
 129+ 6ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E44C             >
 129+ E44C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E44C             >Latest_Definition defl  Heap_Ptr
 129+ E44C             >
 129+ E44C             >                // dummy db directives used to calculate length of namec
 129+ E44C 4C 2F 53 43 >                db      "L/SCR"
 129+ E450 52          >
 129+ E451             >len_NFA         defl    $ - temp_NFA
 129+ E451             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E44C             >
 129+ E44C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E44D 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E451 52          >
 129+ E452             >                org     $-1                 // alter last byte of Name just above to set
 129+ E451 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E452             >
 129+ E452 42 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E454             >Prev_Ptr        defl    Heap_Ptr
 129+ E454             >
 129+ E454             >mirror_Ptr      defl    $
 129+ E454             >
 129+ E454 CD 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E456             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E456             >
 129+ E456             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E456             >
 129+ E456             >//              ______________________________________________________________________
 129+ E456             >//              Dictionary part
 129+ E456             >
 129+ E456             >                org     Dict_Ptr
 129+ 6ACB             >
 129+ 6ACB 54 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6ACD             >
 129+ 6ACD             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6ACD CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AD0             >
 129+ 6AD0             >
 129+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AD0             >
 129+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AD0 10 00       >                dw      16
 130+ 6AD2
 131+ 6AD2              //  ______________________________________________________________________
 132+ 6AD2              //
 133+ 6AD2              // +origin         --
 134+ 6AD2              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AD2              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AD2              //              dw      PLUS                    // +
 137+ 6AD2              //              dw      EXIT                    // ;
 138+ 6AD2                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AD2             >
 138+ 6AD2             >Dict_Ptr        defl    $
 138+ 6AD2             >
 138+ 6AD2             >//              ______________________________________________________________________
 138+ 6AD2             >//              Heap part
 138+ 6AD2             >
 138+ 6AD2             >
 138+ 6AD2             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E456             >
 138+ E456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E456             >Latest_Definition defl  Heap_Ptr
 138+ E456             >
 138+ E456             >                // dummy db directives used to calculate length of namec
 138+ E456 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E45A 47 49 4E    >
 138+ E45D             >len_NFA         defl    $ - temp_NFA
 138+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E456             >
 138+ E456 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E457 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E45B 47 49 4E    >
 138+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 138+ E45D CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E45E             >
 138+ E45E 4C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E460             >Prev_Ptr        defl    Heap_Ptr
 138+ E460             >
 138+ E460             >mirror_Ptr      defl    $
 138+ E460             >
 138+ E460 D4 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E462             >
 138+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E462             >
 138+ E462             >//              ______________________________________________________________________
 138+ E462             >//              Dictionary part
 138+ E462             >
 138+ E462             >                org     Dict_Ptr
 138+ 6AD2             >
 138+ 6AD2 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AD4             >
 138+ 6AD4             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AD4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AD4 ~           >
 138+ 6AD4 ~           >
 138+ 6AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AD4             >
 138+ 6AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AD4 D9                           exx
 140+ 6AD5 E1                           pop     hl
 141+ 6AD6 11 66 63                     ld      de, Cold_origin
 142+ 6AD9 19                           add     hl, de
 143+ 6ADA E5                           push    hl
 144+ 6ADB D9                           exx
 145+ 6ADC                              next
 145+ 6ADC DD E9       >                jp      (ix)
 146+ 6ADE
 147+ 6ADE
 148+ 6ADE              //  ______________________________________________________________________
 149+ 6ADE              //
 150+ 6ADE                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6ADE             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6ADE             >
 150+ 6ADE             >Dict_Ptr        defl    $
 150+ 6ADE             >
 150+ 6ADE             >//              ______________________________________________________________________
 150+ 6ADE             >//              Heap part
 150+ 6ADE             >
 150+ 6ADE             >
 150+ 6ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E462             >
 150+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E462             >Latest_Definition defl  Heap_Ptr
 150+ E462             >
 150+ E462             >                // dummy db directives used to calculate length of namec
 150+ E462 28 4E 45 58 >                db      "(NEXT)"
 150+ E466 54 29       >
 150+ E468             >len_NFA         defl    $ - temp_NFA
 150+ E468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E462             >
 150+ E462 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E463 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E467 54 29       >
 150+ E469             >                org     $-1                 // alter last byte of Name just above to set
 150+ E468 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E469             >
 150+ E469 56 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E46B             >Prev_Ptr        defl    Heap_Ptr
 150+ E46B             >
 150+ E46B             >mirror_Ptr      defl    $
 150+ E46B             >
 150+ E46B E0 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E46D             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E46D             >
 150+ E46D             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E46D             >
 150+ E46D             >//              ______________________________________________________________________
 150+ E46D             >//              Dictionary part
 150+ E46D             >
 150+ E46D             >                org     Dict_Ptr
 150+ 6ADE             >
 150+ 6ADE 6B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AE0             >
 150+ 6AE0             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AE0 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AE3             >
 150+ 6AE3             >
 150+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AE3             >
 150+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AE3 9A 63       >                dw      Next_Ptr
 151+ 6AE5
 152+ 6AE5              //  ______________________________________________________________________
 153+ 6AE5              //
 154+ 6AE5
 155+ 6AE5                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AE5             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AE5             >
 155+ 6AE5             >Dict_Ptr        defl    $
 155+ 6AE5             >
 155+ 6AE5             >//              ______________________________________________________________________
 155+ 6AE5             >//              Heap part
 155+ 6AE5             >
 155+ 6AE5             >
 155+ 6AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E46D             >
 155+ E46D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E46D             >Latest_Definition defl  Heap_Ptr
 155+ E46D             >
 155+ E46D             >                // dummy db directives used to calculate length of namec
 155+ E46D 53 30       >                db      "S0"
 155+ E46F             >len_NFA         defl    $ - temp_NFA
 155+ E46F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E46D             >
 155+ E46D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E46E 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E470             >                org     $-1                 // alter last byte of Name just above to set
 155+ E46F B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E470             >
 155+ E470 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E472             >Prev_Ptr        defl    Heap_Ptr
 155+ E472             >
 155+ E472             >mirror_Ptr      defl    $
 155+ E472             >
 155+ E472 E7 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E474             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E474             >
 155+ E474             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E474             >
 155+ E474             >//              ______________________________________________________________________
 155+ E474             >//              Dictionary part
 155+ E474             >
 155+ E474             >                org     Dict_Ptr
 155+ 6AE5             >
 155+ 6AE5 72 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6AE7             >
 155+ 6AE7             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6AE7 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AEA             >
 155+ 6AEA             >
 155+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AEA             >
 155+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AEA 06          >                db      06
 156+ 6AEB                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AEB             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AEB             >
 156+ 6AEB             >Dict_Ptr        defl    $
 156+ 6AEB             >
 156+ 6AEB             >//              ______________________________________________________________________
 156+ 6AEB             >//              Heap part
 156+ 6AEB             >
 156+ 6AEB             >
 156+ 6AEB             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E474             >
 156+ E474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E474             >Latest_Definition defl  Heap_Ptr
 156+ E474             >
 156+ E474             >                // dummy db directives used to calculate length of namec
 156+ E474 52 30       >                db      "R0"
 156+ E476             >len_NFA         defl    $ - temp_NFA
 156+ E476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E474             >
 156+ E474 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E475 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E477             >                org     $-1                 // alter last byte of Name just above to set
 156+ E476 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E477             >
 156+ E477 6D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E479             >Prev_Ptr        defl    Heap_Ptr
 156+ E479             >
 156+ E479             >mirror_Ptr      defl    $
 156+ E479             >
 156+ E479 ED 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E47B             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E47B             >
 156+ E47B             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E47B             >
 156+ E47B             >//              ______________________________________________________________________
 156+ E47B             >//              Dictionary part
 156+ E47B             >
 156+ E47B             >                org     Dict_Ptr
 156+ 6AEB             >
 156+ 6AEB 79 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AED             >
 156+ 6AED             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AED CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AF0             >
 156+ 6AF0             >
 156+ 6AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AF0             >
 156+ 6AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AF0 08          >                db      08
 157+ 6AF1                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AF1             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AF1             >
 157+ 6AF1             >Dict_Ptr        defl    $
 157+ 6AF1             >
 157+ 6AF1             >//              ______________________________________________________________________
 157+ 6AF1             >//              Heap part
 157+ 6AF1             >
 157+ 6AF1             >
 157+ 6AF1             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E47B             >
 157+ E47B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E47B             >Latest_Definition defl  Heap_Ptr
 157+ E47B             >
 157+ E47B             >                // dummy db directives used to calculate length of namec
 157+ E47B 54 49 42    >                db      "TIB"
 157+ E47E             >len_NFA         defl    $ - temp_NFA
 157+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E47B             >
 157+ E47B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E47C 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 157+ E47E C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E47F             >
 157+ E47F 74 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E481             >Prev_Ptr        defl    Heap_Ptr
 157+ E481             >
 157+ E481             >mirror_Ptr      defl    $
 157+ E481             >
 157+ E481 F3 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E483             >
 157+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E483             >
 157+ E483             >//              ______________________________________________________________________
 157+ E483             >//              Dictionary part
 157+ E483             >
 157+ E483             >                org     Dict_Ptr
 157+ 6AF1             >
 157+ 6AF1 81 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AF3             >
 157+ 6AF3             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AF3 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AF6             >
 157+ 6AF6             >
 157+ 6AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AF6             >
 157+ 6AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AF6 0A          >                db      10
 158+ 6AF7                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AF7             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AF7             >
 158+ 6AF7             >Dict_Ptr        defl    $
 158+ 6AF7             >
 158+ 6AF7             >//              ______________________________________________________________________
 158+ 6AF7             >//              Heap part
 158+ 6AF7             >
 158+ 6AF7             >
 158+ 6AF7             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E483             >
 158+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E483             >Latest_Definition defl  Heap_Ptr
 158+ E483             >
 158+ E483             >                // dummy db directives used to calculate length of namec
 158+ E483 57 49 44 54 >                db      "WIDTH"
 158+ E487 48          >
 158+ E488             >len_NFA         defl    $ - temp_NFA
 158+ E488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E483             >
 158+ E483 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E484 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E488 48          >
 158+ E489             >                org     $-1                 // alter last byte of Name just above to set
 158+ E488 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E489             >
 158+ E489 7B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E48B             >Prev_Ptr        defl    Heap_Ptr
 158+ E48B             >
 158+ E48B             >mirror_Ptr      defl    $
 158+ E48B             >
 158+ E48B F9 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E48D             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E48D             >
 158+ E48D             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E48D             >
 158+ E48D             >//              ______________________________________________________________________
 158+ E48D             >//              Dictionary part
 158+ E48D             >
 158+ E48D             >                org     Dict_Ptr
 158+ 6AF7             >
 158+ 6AF7 8B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AF9             >
 158+ 6AF9             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AF9 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AFC             >
 158+ 6AFC             >
 158+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AFC             >
 158+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AFC 0C          >                db      12
 159+ 6AFD                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AFD             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AFD             >
 159+ 6AFD             >Dict_Ptr        defl    $
 159+ 6AFD             >
 159+ 6AFD             >//              ______________________________________________________________________
 159+ 6AFD             >//              Heap part
 159+ 6AFD             >
 159+ 6AFD             >
 159+ 6AFD             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E48D             >
 159+ E48D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E48D             >Latest_Definition defl  Heap_Ptr
 159+ E48D             >
 159+ E48D             >                // dummy db directives used to calculate length of namec
 159+ E48D 57 41 52 4E >                db      "WARNING"
 159+ E491 49 4E 47    >
 159+ E494             >len_NFA         defl    $ - temp_NFA
 159+ E494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E48D             >
 159+ E48D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E48E 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E492 49 4E 47    >
 159+ E495             >                org     $-1                 // alter last byte of Name just above to set
 159+ E494 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E495             >
 159+ E495 83 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E497             >Prev_Ptr        defl    Heap_Ptr
 159+ E497             >
 159+ E497             >mirror_Ptr      defl    $
 159+ E497             >
 159+ E497 FF 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E499             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E499             >
 159+ E499             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E499             >
 159+ E499             >//              ______________________________________________________________________
 159+ E499             >//              Dictionary part
 159+ E499             >
 159+ E499             >                org     Dict_Ptr
 159+ 6AFD             >
 159+ 6AFD 97 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AFF             >
 159+ 6AFF             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AFF CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6B02             >
 159+ 6B02             >
 159+ 6B02             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6B02             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6B02             >
 159+ 6B02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6B02 0E          >                db      14
 160+ 6B03                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6B03             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6B03             >
 160+ 6B03             >Dict_Ptr        defl    $
 160+ 6B03             >
 160+ 6B03             >//              ______________________________________________________________________
 160+ 6B03             >//              Heap part
 160+ 6B03             >
 160+ 6B03             >
 160+ 6B03             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E499             >
 160+ E499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E499             >Latest_Definition defl  Heap_Ptr
 160+ E499             >
 160+ E499             >                // dummy db directives used to calculate length of namec
 160+ E499 46 45 4E 43 >                db      "FENCE"
 160+ E49D 45          >
 160+ E49E             >len_NFA         defl    $ - temp_NFA
 160+ E49E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E499             >
 160+ E499 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E49A 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E49E 45          >
 160+ E49F             >                org     $-1                 // alter last byte of Name just above to set
 160+ E49E C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E49F             >
 160+ E49F 8D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E4A1             >Prev_Ptr        defl    Heap_Ptr
 160+ E4A1             >
 160+ E4A1             >mirror_Ptr      defl    $
 160+ E4A1             >
 160+ E4A1 05 6B       >                dw      Dict_Ptr + 2        // xt
 160+ E4A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E4A3             >
 160+ E4A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E4A3             >
 160+ E4A3             >//              ______________________________________________________________________
 160+ E4A3             >//              Dictionary part
 160+ E4A3             >
 160+ E4A3             >                org     Dict_Ptr
 160+ 6B03             >
 160+ 6B03 A1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6B05             >
 160+ 6B05             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6B05 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6B08             >
 160+ 6B08             >
 160+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6B08             >
 160+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6B08 10          >                db      16
 161+ 6B09                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6B09             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6B09             >
 161+ 6B09             >Dict_Ptr        defl    $
 161+ 6B09             >
 161+ 6B09             >//              ______________________________________________________________________
 161+ 6B09             >//              Heap part
 161+ 6B09             >
 161+ 6B09             >
 161+ 6B09             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E4A3             >
 161+ E4A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E4A3             >Latest_Definition defl  Heap_Ptr
 161+ E4A3             >
 161+ E4A3             >                // dummy db directives used to calculate length of namec
 161+ E4A3 44 50       >                db      "DP"
 161+ E4A5             >len_NFA         defl    $ - temp_NFA
 161+ E4A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E4A3             >
 161+ E4A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E4A4 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E4A6             >                org     $-1                 // alter last byte of Name just above to set
 161+ E4A5 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E4A6             >
 161+ E4A6 99 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A8             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A8             >
 161+ E4A8             >mirror_Ptr      defl    $
 161+ E4A8             >
 161+ E4A8 0B 6B       >                dw      Dict_Ptr + 2        // xt
 161+ E4AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4AA             >
 161+ E4AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4AA             >
 161+ E4AA             >//              ______________________________________________________________________
 161+ E4AA             >//              Dictionary part
 161+ E4AA             >
 161+ E4AA             >                org     Dict_Ptr
 161+ 6B09             >
 161+ 6B09 A8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6B0B             >
 161+ 6B0B             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6B0B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B0E             >
 161+ 6B0E             >
 161+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B0E             >
 161+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B0E 12          >                db      18
 162+ 6B0F                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B0F             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B0F             >
 162+ 6B0F             >Dict_Ptr        defl    $
 162+ 6B0F             >
 162+ 6B0F             >//              ______________________________________________________________________
 162+ 6B0F             >//              Heap part
 162+ 6B0F             >
 162+ 6B0F             >
 162+ 6B0F             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4AA             >
 162+ E4AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4AA             >Latest_Definition defl  Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >                // dummy db directives used to calculate length of namec
 162+ E4AA 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4AE 4C 49 4E 4B >
 162+ E4B2             >len_NFA         defl    $ - temp_NFA
 162+ E4B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4AA             >
 162+ E4AA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4AB 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4AF 4C 49 4E 4B >
 162+ E4B3             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4B2 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4B3             >
 162+ E4B3 A3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4B5             >Prev_Ptr        defl    Heap_Ptr
 162+ E4B5             >
 162+ E4B5             >mirror_Ptr      defl    $
 162+ E4B5             >
 162+ E4B5 11 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4B7             >
 162+ E4B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4B7             >
 162+ E4B7             >//              ______________________________________________________________________
 162+ E4B7             >//              Dictionary part
 162+ E4B7             >
 162+ E4B7             >                org     Dict_Ptr
 162+ 6B0F             >
 162+ 6B0F B5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B11             >
 162+ 6B11             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B11 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B14             >
 162+ 6B14             >
 162+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B14             >
 162+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B14 14          >                db      20
 163+ 6B15                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B15             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B15             >
 163+ 6B15             >Dict_Ptr        defl    $
 163+ 6B15             >
 163+ 6B15             >//              ______________________________________________________________________
 163+ 6B15             >//              Heap part
 163+ 6B15             >
 163+ 6B15             >
 163+ 6B15             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4B7             >
 163+ E4B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4B7             >Latest_Definition defl  Heap_Ptr
 163+ E4B7             >
 163+ E4B7             >                // dummy db directives used to calculate length of namec
 163+ E4B7 46 49 52 53 >                db      "FIRST"
 163+ E4BB 54          >
 163+ E4BC             >len_NFA         defl    $ - temp_NFA
 163+ E4BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4B7             >
 163+ E4B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B8 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4BC 54          >
 163+ E4BD             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4BC D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4BD             >
 163+ E4BD AA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4BF             >Prev_Ptr        defl    Heap_Ptr
 163+ E4BF             >
 163+ E4BF             >mirror_Ptr      defl    $
 163+ E4BF             >
 163+ E4BF 17 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4C1             >
 163+ E4C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4C1             >
 163+ E4C1             >//              ______________________________________________________________________
 163+ E4C1             >//              Dictionary part
 163+ E4C1             >
 163+ E4C1             >                org     Dict_Ptr
 163+ 6B15             >
 163+ 6B15 BF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B17             >
 163+ 6B17             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B17 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B1A             >
 163+ 6B1A             >
 163+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B1A             >
 163+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B1A 16          >                db      22
 164+ 6B1B                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B1B             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B1B             >
 164+ 6B1B             >Dict_Ptr        defl    $
 164+ 6B1B             >
 164+ 6B1B             >//              ______________________________________________________________________
 164+ 6B1B             >//              Heap part
 164+ 6B1B             >
 164+ 6B1B             >
 164+ 6B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4C1             >
 164+ E4C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4C1             >Latest_Definition defl  Heap_Ptr
 164+ E4C1             >
 164+ E4C1             >                // dummy db directives used to calculate length of namec
 164+ E4C1 4C 49 4D 49 >                db      "LIMIT"
 164+ E4C5 54          >
 164+ E4C6             >len_NFA         defl    $ - temp_NFA
 164+ E4C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4C1             >
 164+ E4C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4C2 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4C6 54          >
 164+ E4C7             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4C6 D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4C7             >
 164+ E4C7 B7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C9             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C9             >
 164+ E4C9             >mirror_Ptr      defl    $
 164+ E4C9             >
 164+ E4C9 1D 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4CB             >
 164+ E4CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4CB             >
 164+ E4CB             >//              ______________________________________________________________________
 164+ E4CB             >//              Dictionary part
 164+ E4CB             >
 164+ E4CB             >                org     Dict_Ptr
 164+ 6B1B             >
 164+ 6B1B C9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B1D             >
 164+ 6B1D             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B1D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B20             >
 164+ 6B20             >
 164+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B20             >
 164+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B20 18          >                db      24
 165+ 6B21                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B21             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B21             >
 165+ 6B21             >Dict_Ptr        defl    $
 165+ 6B21             >
 165+ 6B21             >//              ______________________________________________________________________
 165+ 6B21             >//              Heap part
 165+ 6B21             >
 165+ 6B21             >
 165+ 6B21             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4CB             >
 165+ E4CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4CB             >Latest_Definition defl  Heap_Ptr
 165+ E4CB             >
 165+ E4CB             >                // dummy db directives used to calculate length of namec
 165+ E4CB 48 50       >                db      "HP"
 165+ E4CD             >len_NFA         defl    $ - temp_NFA
 165+ E4CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4CB             >
 165+ E4CB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4CC 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4CE             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4CD D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4CE             >
 165+ E4CE C1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4D0             >Prev_Ptr        defl    Heap_Ptr
 165+ E4D0             >
 165+ E4D0             >mirror_Ptr      defl    $
 165+ E4D0             >
 165+ E4D0 23 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4D2             >
 165+ E4D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4D2             >
 165+ E4D2             >//              ______________________________________________________________________
 165+ E4D2             >//              Dictionary part
 165+ E4D2             >
 165+ E4D2             >                org     Dict_Ptr
 165+ 6B21             >
 165+ 6B21 D0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B23             >
 165+ 6B23             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B23 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B26             >
 165+ 6B26             >
 165+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B26             >
 165+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B26 1A          >                db      26
 166+ 6B27                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B27             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B27             >
 166+ 6B27             >Dict_Ptr        defl    $
 166+ 6B27             >
 166+ 6B27             >//              ______________________________________________________________________
 166+ 6B27             >//              Heap part
 166+ 6B27             >
 166+ 6B27             >
 166+ 6B27             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4D2             >
 166+ E4D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4D2             >Latest_Definition defl  Heap_Ptr
 166+ E4D2             >
 166+ E4D2             >                // dummy db directives used to calculate length of namec
 166+ E4D2 4E 4D 4F 44 >                db      "NMODE"
 166+ E4D6 45          >
 166+ E4D7             >len_NFA         defl    $ - temp_NFA
 166+ E4D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4D2             >
 166+ E4D2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4D3 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4D7 45          >
 166+ E4D8             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4D7 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D8             >
 166+ E4D8 CB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4DA             >Prev_Ptr        defl    Heap_Ptr
 166+ E4DA             >
 166+ E4DA             >mirror_Ptr      defl    $
 166+ E4DA             >
 166+ E4DA 29 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4DC             >
 166+ E4DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4DC             >
 166+ E4DC             >//              ______________________________________________________________________
 166+ E4DC             >//              Dictionary part
 166+ E4DC             >
 166+ E4DC             >                org     Dict_Ptr
 166+ 6B27             >
 166+ 6B27 DA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B29             >
 166+ 6B29             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B29 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B2C             >
 166+ 6B2C             >
 166+ 6B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B2C             >
 166+ 6B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B2C 1C          >                db      28
 167+ 6B2D                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B2D             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B2D             >
 167+ 6B2D             >Dict_Ptr        defl    $
 167+ 6B2D             >
 167+ 6B2D             >//              ______________________________________________________________________
 167+ 6B2D             >//              Heap part
 167+ 6B2D             >
 167+ 6B2D             >
 167+ 6B2D             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4DC             >
 167+ E4DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4DC             >Latest_Definition defl  Heap_Ptr
 167+ E4DC             >
 167+ E4DC             >                // dummy db directives used to calculate length of namec
 167+ E4DC 42 4C 4B    >                db      "BLK"
 167+ E4DF             >len_NFA         defl    $ - temp_NFA
 167+ E4DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4DC             >
 167+ E4DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4DD 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4E0             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4DF CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4E0             >
 167+ E4E0 D2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4E2             >Prev_Ptr        defl    Heap_Ptr
 167+ E4E2             >
 167+ E4E2             >mirror_Ptr      defl    $
 167+ E4E2             >
 167+ E4E2 2F 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4E4             >
 167+ E4E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4E4             >
 167+ E4E4             >//              ______________________________________________________________________
 167+ E4E4             >//              Dictionary part
 167+ E4E4             >
 167+ E4E4             >                org     Dict_Ptr
 167+ 6B2D             >
 167+ 6B2D E2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B2F             >
 167+ 6B2F             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B2F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B32             >
 167+ 6B32             >
 167+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B32             >
 167+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B32 1E          >                db      30
 168+ 6B33                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B33             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B33             >
 168+ 6B33             >Dict_Ptr        defl    $
 168+ 6B33             >
 168+ 6B33             >//              ______________________________________________________________________
 168+ 6B33             >//              Heap part
 168+ 6B33             >
 168+ 6B33             >
 168+ 6B33             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4E4             >
 168+ E4E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4E4             >Latest_Definition defl  Heap_Ptr
 168+ E4E4             >
 168+ E4E4             >                // dummy db directives used to calculate length of namec
 168+ E4E4 3E 49 4E    >                db      ">IN"
 168+ E4E7             >len_NFA         defl    $ - temp_NFA
 168+ E4E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4E4             >
 168+ E4E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4E5 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E8             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4E7 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E8             >
 168+ E4E8 DC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4EA             >Prev_Ptr        defl    Heap_Ptr
 168+ E4EA             >
 168+ E4EA             >mirror_Ptr      defl    $
 168+ E4EA             >
 168+ E4EA 35 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4EC             >
 168+ E4EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4EC             >
 168+ E4EC             >//              ______________________________________________________________________
 168+ E4EC             >//              Dictionary part
 168+ E4EC             >
 168+ E4EC             >                org     Dict_Ptr
 168+ 6B33             >
 168+ 6B33 EA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B35             >
 168+ 6B35             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B35 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B38             >
 168+ 6B38             >
 168+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B38             >
 168+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B38 20          >                db      32
 169+ 6B39                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B39             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B39             >
 169+ 6B39             >Dict_Ptr        defl    $
 169+ 6B39             >
 169+ 6B39             >//              ______________________________________________________________________
 169+ 6B39             >//              Heap part
 169+ 6B39             >
 169+ 6B39             >
 169+ 6B39             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4EC             >
 169+ E4EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4EC             >Latest_Definition defl  Heap_Ptr
 169+ E4EC             >
 169+ E4EC             >                // dummy db directives used to calculate length of namec
 169+ E4EC 4F 55 54    >                db      "OUT"
 169+ E4EF             >len_NFA         defl    $ - temp_NFA
 169+ E4EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4EC             >
 169+ E4EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4ED 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4F0             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4EF D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4F0             >
 169+ E4F0 E4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4F2             >Prev_Ptr        defl    Heap_Ptr
 169+ E4F2             >
 169+ E4F2             >mirror_Ptr      defl    $
 169+ E4F2             >
 169+ E4F2 3B 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4F4             >
 169+ E4F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4F4             >
 169+ E4F4             >//              ______________________________________________________________________
 169+ E4F4             >//              Dictionary part
 169+ E4F4             >
 169+ E4F4             >                org     Dict_Ptr
 169+ 6B39             >
 169+ 6B39 F2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B3B             >
 169+ 6B3B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B3B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B3E             >
 169+ 6B3E             >
 169+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B3E             >
 169+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B3E 22          >                db      34
 170+ 6B3F                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B3F             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B3F             >
 170+ 6B3F             >Dict_Ptr        defl    $
 170+ 6B3F             >
 170+ 6B3F             >//              ______________________________________________________________________
 170+ 6B3F             >//              Heap part
 170+ 6B3F             >
 170+ 6B3F             >
 170+ 6B3F             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4F4             >
 170+ E4F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4F4             >Latest_Definition defl  Heap_Ptr
 170+ E4F4             >
 170+ E4F4             >                // dummy db directives used to calculate length of namec
 170+ E4F4 53 43 52    >                db      "SCR"
 170+ E4F7             >len_NFA         defl    $ - temp_NFA
 170+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4F4             >
 170+ E4F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4F5 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4F7 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F8             >
 170+ E4F8 EC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 170+ E4FA             >
 170+ E4FA             >mirror_Ptr      defl    $
 170+ E4FA             >
 170+ E4FA 41 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4FC             >
 170+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4FC             >
 170+ E4FC             >//              ______________________________________________________________________
 170+ E4FC             >//              Dictionary part
 170+ E4FC             >
 170+ E4FC             >                org     Dict_Ptr
 170+ 6B3F             >
 170+ 6B3F FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B41             >
 170+ 6B41             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B41 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B44             >
 170+ 6B44             >
 170+ 6B44             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B44             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B44             >
 170+ 6B44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B44 24          >                db      36
 171+ 6B45                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B45             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B45             >
 171+ 6B45             >Dict_Ptr        defl    $
 171+ 6B45             >
 171+ 6B45             >//              ______________________________________________________________________
 171+ 6B45             >//              Heap part
 171+ 6B45             >
 171+ 6B45             >
 171+ 6B45             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4FC             >
 171+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4FC             >Latest_Definition defl  Heap_Ptr
 171+ E4FC             >
 171+ E4FC             >                // dummy db directives used to calculate length of namec
 171+ E4FC 4F 46 46 53 >                db      "OFFSET"
 171+ E500 45 54       >
 171+ E502             >len_NFA         defl    $ - temp_NFA
 171+ E502             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4FC             >
 171+ E4FC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4FD 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E501 45 54       >
 171+ E503             >                org     $-1                 // alter last byte of Name just above to set
 171+ E502 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E503             >
 171+ E503 F4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E505             >Prev_Ptr        defl    Heap_Ptr
 171+ E505             >
 171+ E505             >mirror_Ptr      defl    $
 171+ E505             >
 171+ E505 47 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E507             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E507             >
 171+ E507             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E507             >
 171+ E507             >//              ______________________________________________________________________
 171+ E507             >//              Dictionary part
 171+ E507             >
 171+ E507             >                org     Dict_Ptr
 171+ 6B45             >
 171+ 6B45 05 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B47             >
 171+ 6B47             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B47 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B4A             >
 171+ 6B4A             >
 171+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B4A             >
 171+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B4A 26          >                db      38
 172+ 6B4B                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B4B             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B4B             >
 172+ 6B4B             >Dict_Ptr        defl    $
 172+ 6B4B             >
 172+ 6B4B             >//              ______________________________________________________________________
 172+ 6B4B             >//              Heap part
 172+ 6B4B             >
 172+ 6B4B             >
 172+ 6B4B             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E507             >
 172+ E507             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E507             >Latest_Definition defl  Heap_Ptr
 172+ E507             >
 172+ E507             >                // dummy db directives used to calculate length of namec
 172+ E507 43 4F 4E 54 >                db      "CONTEXT"
 172+ E50B 45 58 54    >
 172+ E50E             >len_NFA         defl    $ - temp_NFA
 172+ E50E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E507             >
 172+ E507 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E508 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E50C 45 58 54    >
 172+ E50F             >                org     $-1                 // alter last byte of Name just above to set
 172+ E50E D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E50F             >
 172+ E50F FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E511             >Prev_Ptr        defl    Heap_Ptr
 172+ E511             >
 172+ E511             >mirror_Ptr      defl    $
 172+ E511             >
 172+ E511 4D 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E513             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E513             >
 172+ E513             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E513             >
 172+ E513             >//              ______________________________________________________________________
 172+ E513             >//              Dictionary part
 172+ E513             >
 172+ E513             >                org     Dict_Ptr
 172+ 6B4B             >
 172+ 6B4B 11 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B4D             >
 172+ 6B4D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B4D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B50             >
 172+ 6B50             >
 172+ 6B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B50             >
 172+ 6B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B50 28          >                db      40
 173+ 6B51                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B51             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B51             >
 173+ 6B51             >Dict_Ptr        defl    $
 173+ 6B51             >
 173+ 6B51             >//              ______________________________________________________________________
 173+ 6B51             >//              Heap part
 173+ 6B51             >
 173+ 6B51             >
 173+ 6B51             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E513             >
 173+ E513             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E513             >Latest_Definition defl  Heap_Ptr
 173+ E513             >
 173+ E513             >                // dummy db directives used to calculate length of namec
 173+ E513 43 55 52 52 >                db      "CURRENT"
 173+ E517 45 4E 54    >
 173+ E51A             >len_NFA         defl    $ - temp_NFA
 173+ E51A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E513             >
 173+ E513 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E514 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E518 45 4E 54    >
 173+ E51B             >                org     $-1                 // alter last byte of Name just above to set
 173+ E51A D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E51B             >
 173+ E51B 07 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E51D             >Prev_Ptr        defl    Heap_Ptr
 173+ E51D             >
 173+ E51D             >mirror_Ptr      defl    $
 173+ E51D             >
 173+ E51D 53 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E51F             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E51F             >
 173+ E51F             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E51F             >
 173+ E51F             >//              ______________________________________________________________________
 173+ E51F             >//              Dictionary part
 173+ E51F             >
 173+ E51F             >                org     Dict_Ptr
 173+ 6B51             >
 173+ 6B51 1D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B53             >
 173+ 6B53             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B53 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B56             >
 173+ 6B56             >
 173+ 6B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B56             >
 173+ 6B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B56 2A          >                db      42
 174+ 6B57                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B57             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B57             >
 174+ 6B57             >Dict_Ptr        defl    $
 174+ 6B57             >
 174+ 6B57             >//              ______________________________________________________________________
 174+ 6B57             >//              Heap part
 174+ 6B57             >
 174+ 6B57             >
 174+ 6B57             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E51F             >
 174+ E51F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E51F             >Latest_Definition defl  Heap_Ptr
 174+ E51F             >
 174+ E51F             >                // dummy db directives used to calculate length of namec
 174+ E51F 53 54 41 54 >                db      "STATE"
 174+ E523 45          >
 174+ E524             >len_NFA         defl    $ - temp_NFA
 174+ E524             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E51F             >
 174+ E51F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E520 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E524 45          >
 174+ E525             >                org     $-1                 // alter last byte of Name just above to set
 174+ E524 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E525             >
 174+ E525 13 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E527             >Prev_Ptr        defl    Heap_Ptr
 174+ E527             >
 174+ E527             >mirror_Ptr      defl    $
 174+ E527             >
 174+ E527 59 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E529             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E529             >
 174+ E529             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E529             >
 174+ E529             >//              ______________________________________________________________________
 174+ E529             >//              Dictionary part
 174+ E529             >
 174+ E529             >                org     Dict_Ptr
 174+ 6B57             >
 174+ 6B57 27 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B59             >
 174+ 6B59             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B59 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B5C             >
 174+ 6B5C             >
 174+ 6B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B5C             >
 174+ 6B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B5C 2C          >                db      44
 175+ 6B5D                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B5D             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B5D             >
 175+ 6B5D             >Dict_Ptr        defl    $
 175+ 6B5D             >
 175+ 6B5D             >//              ______________________________________________________________________
 175+ 6B5D             >//              Heap part
 175+ 6B5D             >
 175+ 6B5D             >
 175+ 6B5D             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E529             >
 175+ E529             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E529             >Latest_Definition defl  Heap_Ptr
 175+ E529             >
 175+ E529             >                // dummy db directives used to calculate length of namec
 175+ E529 42 41 53 45 >                db      "BASE"
 175+ E52D             >len_NFA         defl    $ - temp_NFA
 175+ E52D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E529             >
 175+ E529 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E52A 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E52E             >                org     $-1                 // alter last byte of Name just above to set
 175+ E52D C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E52E             >
 175+ E52E 1F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E530             >Prev_Ptr        defl    Heap_Ptr
 175+ E530             >
 175+ E530             >mirror_Ptr      defl    $
 175+ E530             >
 175+ E530 5F 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E532             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E532             >
 175+ E532             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E532             >
 175+ E532             >//              ______________________________________________________________________
 175+ E532             >//              Dictionary part
 175+ E532             >
 175+ E532             >                org     Dict_Ptr
 175+ 6B5D             >
 175+ 6B5D 30 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B5F             >
 175+ 6B5F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B5F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B62             >
 175+ 6B62             >
 175+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B62             >
 175+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B62 2E          >                db      46
 176+ 6B63                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B63             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B63             >
 176+ 6B63             >Dict_Ptr        defl    $
 176+ 6B63             >
 176+ 6B63             >//              ______________________________________________________________________
 176+ 6B63             >//              Heap part
 176+ 6B63             >
 176+ 6B63             >
 176+ 6B63             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E532             >
 176+ E532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E532             >Latest_Definition defl  Heap_Ptr
 176+ E532             >
 176+ E532             >                // dummy db directives used to calculate length of namec
 176+ E532 44 50 4C    >                db      "DPL"
 176+ E535             >len_NFA         defl    $ - temp_NFA
 176+ E535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E532             >
 176+ E532 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E533 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E536             >                org     $-1                 // alter last byte of Name just above to set
 176+ E535 CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E536             >
 176+ E536 29 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E538             >Prev_Ptr        defl    Heap_Ptr
 176+ E538             >
 176+ E538             >mirror_Ptr      defl    $
 176+ E538             >
 176+ E538 65 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E53A             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E53A             >
 176+ E53A             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E53A             >
 176+ E53A             >//              ______________________________________________________________________
 176+ E53A             >//              Dictionary part
 176+ E53A             >
 176+ E53A             >                org     Dict_Ptr
 176+ 6B63             >
 176+ 6B63 38 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B65             >
 176+ 6B65             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B65 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B68             >
 176+ 6B68             >
 176+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B68             >
 176+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B68 30          >                db      48
 177+ 6B69                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B69             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B69             >
 177+ 6B69             >Dict_Ptr        defl    $
 177+ 6B69             >
 177+ 6B69             >//              ______________________________________________________________________
 177+ 6B69             >//              Heap part
 177+ 6B69             >
 177+ 6B69             >
 177+ 6B69             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E53A             >
 177+ E53A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E53A             >Latest_Definition defl  Heap_Ptr
 177+ E53A             >
 177+ E53A             >                // dummy db directives used to calculate length of namec
 177+ E53A 46 4C 44    >                db      "FLD"
 177+ E53D             >len_NFA         defl    $ - temp_NFA
 177+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E53A             >
 177+ E53A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E53B 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 177+ E53D C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E53E             >
 177+ E53E 32 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E540             >Prev_Ptr        defl    Heap_Ptr
 177+ E540             >
 177+ E540             >mirror_Ptr      defl    $
 177+ E540             >
 177+ E540 6B 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E542             >
 177+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E542             >
 177+ E542             >//              ______________________________________________________________________
 177+ E542             >//              Dictionary part
 177+ E542             >
 177+ E542             >                org     Dict_Ptr
 177+ 6B69             >
 177+ 6B69 40 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B6B             >
 177+ 6B6B             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B6B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B6E             >
 177+ 6B6E             >
 177+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B6E             >
 177+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B6E 32          >                db      50
 178+ 6B6F                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B6F             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B6F             >
 178+ 6B6F             >Dict_Ptr        defl    $
 178+ 6B6F             >
 178+ 6B6F             >//              ______________________________________________________________________
 178+ 6B6F             >//              Heap part
 178+ 6B6F             >
 178+ 6B6F             >
 178+ 6B6F             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E542             >
 178+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E542             >Latest_Definition defl  Heap_Ptr
 178+ E542             >
 178+ E542             >                // dummy db directives used to calculate length of namec
 178+ E542 43 53 50    >                db      "CSP"
 178+ E545             >len_NFA         defl    $ - temp_NFA
 178+ E545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E542             >
 178+ E542 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E543 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E546             >                org     $-1                 // alter last byte of Name just above to set
 178+ E545 D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E546             >
 178+ E546 3A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E548             >Prev_Ptr        defl    Heap_Ptr
 178+ E548             >
 178+ E548             >mirror_Ptr      defl    $
 178+ E548             >
 178+ E548 71 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E54A             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E54A             >
 178+ E54A             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E54A             >
 178+ E54A             >//              ______________________________________________________________________
 178+ E54A             >//              Dictionary part
 178+ E54A             >
 178+ E54A             >                org     Dict_Ptr
 178+ 6B6F             >
 178+ 6B6F 48 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B71             >
 178+ 6B71             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B71 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B74             >
 178+ 6B74             >
 178+ 6B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B74             >
 178+ 6B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B74 34          >                db      52
 179+ 6B75                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B75             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B75             >
 179+ 6B75             >Dict_Ptr        defl    $
 179+ 6B75             >
 179+ 6B75             >//              ______________________________________________________________________
 179+ 6B75             >//              Heap part
 179+ 6B75             >
 179+ 6B75             >
 179+ 6B75             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E54A             >
 179+ E54A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E54A             >Latest_Definition defl  Heap_Ptr
 179+ E54A             >
 179+ E54A             >                // dummy db directives used to calculate length of namec
 179+ E54A 52 23       >                db      "R#"
 179+ E54C             >len_NFA         defl    $ - temp_NFA
 179+ E54C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E54A             >
 179+ E54A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E54B 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E54D             >                org     $-1                 // alter last byte of Name just above to set
 179+ E54C A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E54D             >
 179+ E54D 42 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E54F             >Prev_Ptr        defl    Heap_Ptr
 179+ E54F             >
 179+ E54F             >mirror_Ptr      defl    $
 179+ E54F             >
 179+ E54F 77 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E551             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E551             >
 179+ E551             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E551             >
 179+ E551             >//              ______________________________________________________________________
 179+ E551             >//              Dictionary part
 179+ E551             >
 179+ E551             >                org     Dict_Ptr
 179+ 6B75             >
 179+ 6B75 4F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B77             >
 179+ 6B77             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B77 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B7A             >
 179+ 6B7A             >
 179+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B7A             >
 179+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B7A 36          >                db      54
 180+ 6B7B                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B7B             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B7B             >
 180+ 6B7B             >Dict_Ptr        defl    $
 180+ 6B7B             >
 180+ 6B7B             >//              ______________________________________________________________________
 180+ 6B7B             >//              Heap part
 180+ 6B7B             >
 180+ 6B7B             >
 180+ 6B7B             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E551             >
 180+ E551             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E551             >Latest_Definition defl  Heap_Ptr
 180+ E551             >
 180+ E551             >                // dummy db directives used to calculate length of namec
 180+ E551 48 4C 44    >                db      "HLD"
 180+ E554             >len_NFA         defl    $ - temp_NFA
 180+ E554             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E551             >
 180+ E551 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E552 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E555             >                org     $-1                 // alter last byte of Name just above to set
 180+ E554 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E555             >
 180+ E555 4A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E557             >Prev_Ptr        defl    Heap_Ptr
 180+ E557             >
 180+ E557             >mirror_Ptr      defl    $
 180+ E557             >
 180+ E557 7D 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E559             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E559             >
 180+ E559             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E559             >
 180+ E559             >//              ______________________________________________________________________
 180+ E559             >//              Dictionary part
 180+ E559             >
 180+ E559             >                org     Dict_Ptr
 180+ 6B7B             >
 180+ 6B7B 57 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B7D             >
 180+ 6B7D             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B7D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B80             >
 180+ 6B80             >
 180+ 6B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B80             >
 180+ 6B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B80 38          >                db      56
 181+ 6B81                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B81             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B81             >
 181+ 6B81             >Dict_Ptr        defl    $
 181+ 6B81             >
 181+ 6B81             >//              ______________________________________________________________________
 181+ 6B81             >//              Heap part
 181+ 6B81             >
 181+ 6B81             >
 181+ 6B81             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E559             >
 181+ E559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E559             >Latest_Definition defl  Heap_Ptr
 181+ E559             >
 181+ E559             >                // dummy db directives used to calculate length of namec
 181+ E559 55 53 45 44 >                db      "USED"
 181+ E55D             >len_NFA         defl    $ - temp_NFA
 181+ E55D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E559             >
 181+ E559 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E55A 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E55E             >                org     $-1                 // alter last byte of Name just above to set
 181+ E55D C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E55E             >
 181+ E55E 51 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E560             >Prev_Ptr        defl    Heap_Ptr
 181+ E560             >
 181+ E560             >mirror_Ptr      defl    $
 181+ E560             >
 181+ E560 83 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E562             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E562             >
 181+ E562             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E562             >
 181+ E562             >//              ______________________________________________________________________
 181+ E562             >//              Dictionary part
 181+ E562             >
 181+ E562             >                org     Dict_Ptr
 181+ 6B81             >
 181+ 6B81 60 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B83             >
 181+ 6B83             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B83 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B86             >
 181+ 6B86             >
 181+ 6B86             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B86             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B86             >
 181+ 6B86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B86 3A          >                db      58
 182+ 6B87                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B87             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B87             >
 182+ 6B87             >Dict_Ptr        defl    $
 182+ 6B87             >
 182+ 6B87             >//              ______________________________________________________________________
 182+ 6B87             >//              Heap part
 182+ 6B87             >
 182+ 6B87             >
 182+ 6B87             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E562             >
 182+ E562             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E562             >Latest_Definition defl  Heap_Ptr
 182+ E562             >
 182+ E562             >                // dummy db directives used to calculate length of namec
 182+ E562 50 52 45 56 >                db      "PREV"
 182+ E566             >len_NFA         defl    $ - temp_NFA
 182+ E566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E562             >
 182+ E562 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E563 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E567             >                org     $-1                 // alter last byte of Name just above to set
 182+ E566 D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E567             >
 182+ E567 59 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E569             >Prev_Ptr        defl    Heap_Ptr
 182+ E569             >
 182+ E569             >mirror_Ptr      defl    $
 182+ E569             >
 182+ E569 89 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E56B             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E56B             >
 182+ E56B             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E56B             >
 182+ E56B             >//              ______________________________________________________________________
 182+ E56B             >//              Dictionary part
 182+ E56B             >
 182+ E56B             >                org     Dict_Ptr
 182+ 6B87             >
 182+ 6B87 69 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B89             >
 182+ 6B89             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B89 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B8C             >
 182+ 6B8C             >
 182+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B8C             >
 182+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B8C 3C          >                db      60
 183+ 6B8D                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B8D             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B8D             >
 183+ 6B8D             >Dict_Ptr        defl    $
 183+ 6B8D             >
 183+ 6B8D             >//              ______________________________________________________________________
 183+ 6B8D             >//              Heap part
 183+ 6B8D             >
 183+ 6B8D             >
 183+ 6B8D             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E56B             >
 183+ E56B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E56B             >Latest_Definition defl  Heap_Ptr
 183+ E56B             >
 183+ E56B             >                // dummy db directives used to calculate length of namec
 183+ E56B 4C 50       >                db      "LP"
 183+ E56D             >len_NFA         defl    $ - temp_NFA
 183+ E56D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E56B             >
 183+ E56B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E56C 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E56E             >                org     $-1                 // alter last byte of Name just above to set
 183+ E56D D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E56E             >
 183+ E56E 62 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E570             >Prev_Ptr        defl    Heap_Ptr
 183+ E570             >
 183+ E570             >mirror_Ptr      defl    $
 183+ E570             >
 183+ E570 8F 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E572             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E572             >
 183+ E572             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E572             >
 183+ E572             >//              ______________________________________________________________________
 183+ E572             >//              Dictionary part
 183+ E572             >
 183+ E572             >                org     Dict_Ptr
 183+ 6B8D             >
 183+ 6B8D 70 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B8F             >
 183+ 6B8F             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B8F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B92             >
 183+ 6B92             >
 183+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B92             >
 183+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B92 3E          >                db      62
 184+ 6B93                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B93             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B93             >
 184+ 6B93             >Dict_Ptr        defl    $
 184+ 6B93             >
 184+ 6B93             >//              ______________________________________________________________________
 184+ 6B93             >//              Heap part
 184+ 6B93             >
 184+ 6B93             >
 184+ 6B93             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E572             >
 184+ E572             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E572             >Latest_Definition defl  Heap_Ptr
 184+ E572             >
 184+ E572             >                // dummy db directives used to calculate length of namec
 184+ E572 50 4C 41 43 >                db      "PLACE"
 184+ E576 45          >
 184+ E577             >len_NFA         defl    $ - temp_NFA
 184+ E577             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E572             >
 184+ E572 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E573 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E577 45          >
 184+ E578             >                org     $-1                 // alter last byte of Name just above to set
 184+ E577 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E578             >
 184+ E578 6B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E57A             >Prev_Ptr        defl    Heap_Ptr
 184+ E57A             >
 184+ E57A             >mirror_Ptr      defl    $
 184+ E57A             >
 184+ E57A 95 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E57C             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E57C             >
 184+ E57C             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E57C             >
 184+ E57C             >//              ______________________________________________________________________
 184+ E57C             >//              Dictionary part
 184+ E57C             >
 184+ E57C             >                org     Dict_Ptr
 184+ 6B93             >
 184+ 6B93 7A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B95             >
 184+ 6B95             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B95 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B98             >
 184+ 6B98             >
 184+ 6B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B98             >
 184+ 6B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B98 40          >                db      64
 185+ 6B99                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B99             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B99             >
 185+ 6B99             >Dict_Ptr        defl    $
 185+ 6B99             >
 185+ 6B99             >//              ______________________________________________________________________
 185+ 6B99             >//              Heap part
 185+ 6B99             >
 185+ 6B99             >
 185+ 6B99             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E57C             >
 185+ E57C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E57C             >Latest_Definition defl  Heap_Ptr
 185+ E57C             >
 185+ E57C             >                // dummy db directives used to calculate length of namec
 185+ E57C 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E580 43 45 2D 49 >
 185+ E584 44          >
 185+ E585             >len_NFA         defl    $ - temp_NFA
 185+ E585             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E57C             >
 185+ E57C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E57D 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E581 43 45 2D 49 >
 185+ E585 44          >
 185+ E586             >                org     $-1                 // alter last byte of Name just above to set
 185+ E585 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E586             >
 185+ E586 72 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E588             >Prev_Ptr        defl    Heap_Ptr
 185+ E588             >
 185+ E588             >mirror_Ptr      defl    $
 185+ E588             >
 185+ E588 9B 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E58A             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E58A             >
 185+ E58A             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E58A             >
 185+ E58A             >//              ______________________________________________________________________
 185+ E58A             >//              Dictionary part
 185+ E58A             >
 185+ E58A             >                org     Dict_Ptr
 185+ 6B99             >
 185+ 6B99 88 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B9B             >
 185+ 6B9B             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B9B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B9E             >
 185+ 6B9E             >
 185+ 6B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B9E             >
 185+ 6B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B9E 42          >                db      66
 186+ 6B9F                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B9F             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B9F             >
 186+ 6B9F             >Dict_Ptr        defl    $
 186+ 6B9F             >
 186+ 6B9F             >//              ______________________________________________________________________
 186+ 6B9F             >//              Heap part
 186+ 6B9F             >
 186+ 6B9F             >
 186+ 6B9F             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E58A             >
 186+ E58A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E58A             >Latest_Definition defl  Heap_Ptr
 186+ E58A             >
 186+ E58A             >                // dummy db directives used to calculate length of namec
 186+ E58A 53 50 41 4E >                db      "SPAN"
 186+ E58E             >len_NFA         defl    $ - temp_NFA
 186+ E58E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E58A             >
 186+ E58A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E58B 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E58F             >                org     $-1                 // alter last byte of Name just above to set
 186+ E58E CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E58F             >
 186+ E58F 7C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E591             >Prev_Ptr        defl    Heap_Ptr
 186+ E591             >
 186+ E591             >mirror_Ptr      defl    $
 186+ E591             >
 186+ E591 A1 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E593             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E593             >
 186+ E593             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E593             >
 186+ E593             >//              ______________________________________________________________________
 186+ E593             >//              Dictionary part
 186+ E593             >
 186+ E593             >                org     Dict_Ptr
 186+ 6B9F             >
 186+ 6B9F 91 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6BA1             >
 186+ 6BA1             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6BA1 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6BA4             >
 186+ 6BA4             >
 186+ 6BA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6BA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6BA4             >
 186+ 6BA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6BA4 44          >                db      68
 187+ 6BA5                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6BA5             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6BA5             >
 187+ 6BA5             >Dict_Ptr        defl    $
 187+ 6BA5             >
 187+ 6BA5             >//              ______________________________________________________________________
 187+ 6BA5             >//              Heap part
 187+ 6BA5             >
 187+ 6BA5             >
 187+ 6BA5             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E593             >
 187+ E593             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E593             >Latest_Definition defl  Heap_Ptr
 187+ E593             >
 187+ E593             >                // dummy db directives used to calculate length of namec
 187+ E593 48 41 4E 44 >                db      "HANDLER"
 187+ E597 4C 45 52    >
 187+ E59A             >len_NFA         defl    $ - temp_NFA
 187+ E59A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E593             >
 187+ E593 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E594 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E598 4C 45 52    >
 187+ E59B             >                org     $-1                 // alter last byte of Name just above to set
 187+ E59A D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E59B             >
 187+ E59B 8A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E59D             >Prev_Ptr        defl    Heap_Ptr
 187+ E59D             >
 187+ E59D             >mirror_Ptr      defl    $
 187+ E59D             >
 187+ E59D A7 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E59F             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E59F             >
 187+ E59F             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E59F             >
 187+ E59F             >//              ______________________________________________________________________
 187+ E59F             >//              Dictionary part
 187+ E59F             >
 187+ E59F             >                org     Dict_Ptr
 187+ 6BA5             >
 187+ 6BA5 9D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6BA7             >
 187+ 6BA7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6BA7 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6BAA             >
 187+ 6BAA             >
 187+ 6BAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6BAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6BAA             >
 187+ 6BAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6BAA 46          >                db      70
 188+ 6BAB                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6BAB             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6BAB             >
 188+ 6BAB             >Dict_Ptr        defl    $
 188+ 6BAB             >
 188+ 6BAB             >//              ______________________________________________________________________
 188+ 6BAB             >//              Heap part
 188+ 6BAB             >
 188+ 6BAB             >
 188+ 6BAB             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E59F             >
 188+ E59F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E59F             >Latest_Definition defl  Heap_Ptr
 188+ E59F             >
 188+ E59F             >                // dummy db directives used to calculate length of namec
 188+ E59F 45 58 50    >                db      "EXP"
 188+ E5A2             >len_NFA         defl    $ - temp_NFA
 188+ E5A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E59F             >
 188+ E59F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E5A0 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E5A3             >                org     $-1                 // alter last byte of Name just above to set
 188+ E5A2 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E5A3             >
 188+ E5A3 93 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E5A5             >Prev_Ptr        defl    Heap_Ptr
 188+ E5A5             >
 188+ E5A5             >mirror_Ptr      defl    $
 188+ E5A5             >
 188+ E5A5 AD 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E5A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E5A7             >
 188+ E5A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E5A7             >
 188+ E5A7             >//              ______________________________________________________________________
 188+ E5A7             >//              Dictionary part
 188+ E5A7             >
 188+ E5A7             >                org     Dict_Ptr
 188+ 6BAB             >
 188+ 6BAB A5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BAD             >
 188+ 6BAD             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BAD CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BB0             >
 188+ 6BB0             >
 188+ 6BB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BB0             >
 188+ 6BB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BB0 48          >                db      72
 189+ 6BB1
 190+ 6BB1              //  ______________________________________________________________________
 191+ 6BB1              //
 192+ 6BB1              // here         -- a
 193+ 6BB1                              Colon_Def HERE, "HERE", is_normal
 193+ 6BB1             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BB1             >
 193+ 6BB1             >Dict_Ptr        defl    $
 193+ 6BB1             >
 193+ 6BB1             >//              ______________________________________________________________________
 193+ 6BB1             >//              Heap part
 193+ 6BB1             >
 193+ 6BB1             >
 193+ 6BB1             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E5A7             >
 193+ E5A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E5A7             >Latest_Definition defl  Heap_Ptr
 193+ E5A7             >
 193+ E5A7             >                // dummy db directives used to calculate length of namec
 193+ E5A7 48 45 52 45 >                db      "HERE"
 193+ E5AB             >len_NFA         defl    $ - temp_NFA
 193+ E5AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E5A7             >
 193+ E5A7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A8 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5AC             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5AB C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5AC             >
 193+ E5AC 9F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5AE             >Prev_Ptr        defl    Heap_Ptr
 193+ E5AE             >
 193+ E5AE             >mirror_Ptr      defl    $
 193+ E5AE             >
 193+ E5AE B3 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5B0             >
 193+ E5B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5B0             >
 193+ E5B0             >//              ______________________________________________________________________
 193+ E5B0             >//              Dictionary part
 193+ E5B0             >
 193+ E5B0             >                org     Dict_Ptr
 193+ 6BB1             >
 193+ 6BB1 AE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BB3             >
 193+ 6BB3             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BB3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BB6             >
 193+ 6BB6             >
 193+ 6BB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BB6             >
 193+ 6BB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BB6 0B 6B 96 69                  dw      DP, FETCH               // dp @
 195+ 6BBA 4C 68                        dw      EXIT                    // ;
 196+ 6BBC
 197+ 6BBC              //  ______________________________________________________________________
 198+ 6BBC              //
 199+ 6BBC              // allot        n --
 200+ 6BBC                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BBC             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BBC             >
 200+ 6BBC             >Dict_Ptr        defl    $
 200+ 6BBC             >
 200+ 6BBC             >//              ______________________________________________________________________
 200+ 6BBC             >//              Heap part
 200+ 6BBC             >
 200+ 6BBC             >
 200+ 6BBC             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5B0             >
 200+ E5B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5B0             >Latest_Definition defl  Heap_Ptr
 200+ E5B0             >
 200+ E5B0             >                // dummy db directives used to calculate length of namec
 200+ E5B0 41 4C 4C 4F >                db      "ALLOT"
 200+ E5B4 54          >
 200+ E5B5             >len_NFA         defl    $ - temp_NFA
 200+ E5B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5B0             >
 200+ E5B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5B1 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5B5 54          >
 200+ E5B6             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5B5 D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5B6             >
 200+ E5B6 A7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B8             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B8             >
 200+ E5B8             >mirror_Ptr      defl    $
 200+ E5B8             >
 200+ E5B8 BE 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5BA             >
 200+ E5BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5BA             >
 200+ E5BA             >//              ______________________________________________________________________
 200+ E5BA             >//              Dictionary part
 200+ E5BA             >
 200+ E5BA             >                org     Dict_Ptr
 200+ 6BBC             >
 200+ 6BBC B8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BBE             >
 200+ 6BBE             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BBE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BC1             >
 200+ 6BC1             >
 200+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BC1             >
 200+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BC1 0B 6B 7E 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BC5 4C 68                        dw      EXIT                    // ;
 203+ 6BC7
 204+ 6BC7              //  ______________________________________________________________________
 205+ 6BC7              //
 206+ 6BC7              // comma        n --
 207+ 6BC7                              Colon_Def COMMA, ",", is_normal
 207+ 6BC7             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BC7             >
 207+ 6BC7             >Dict_Ptr        defl    $
 207+ 6BC7             >
 207+ 6BC7             >//              ______________________________________________________________________
 207+ 6BC7             >//              Heap part
 207+ 6BC7             >
 207+ 6BC7             >
 207+ 6BC7             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5BA             >
 207+ E5BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5BA             >Latest_Definition defl  Heap_Ptr
 207+ E5BA             >
 207+ E5BA             >                // dummy db directives used to calculate length of namec
 207+ E5BA 2C          >                db      ","
 207+ E5BB             >len_NFA         defl    $ - temp_NFA
 207+ E5BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5BA             >
 207+ E5BA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5BB 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5BC             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5BB AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5BC             >
 207+ E5BC B0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5BE             >Prev_Ptr        defl    Heap_Ptr
 207+ E5BE             >
 207+ E5BE             >mirror_Ptr      defl    $
 207+ E5BE             >
 207+ E5BE C9 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5C0             >
 207+ E5C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5C0             >
 207+ E5C0             >//              ______________________________________________________________________
 207+ E5C0             >//              Dictionary part
 207+ E5C0             >
 207+ E5C0             >                org     Dict_Ptr
 207+ 6BC7             >
 207+ 6BC7 BE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BC9             >
 207+ 6BC9             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BC9 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BCC             >
 207+ 6BCC             >
 207+ 6BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BCC             >
 207+ 6BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BCC B3 6B A0 69                  dw      HERE, STORE             // here !
 209+ 6BD0 9C 6A BE 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BD4 4C 68                        dw      EXIT                    // ;
 211+ 6BD6
 212+ 6BD6              //  ______________________________________________________________________
 213+ 6BD6              //
 214+ 6BD6              // ccomma       c --
 215+ 6BD6                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BD6             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BD6             >
 215+ 6BD6             >Dict_Ptr        defl    $
 215+ 6BD6             >
 215+ 6BD6             >//              ______________________________________________________________________
 215+ 6BD6             >//              Heap part
 215+ 6BD6             >
 215+ 6BD6             >
 215+ 6BD6             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5C0             >
 215+ E5C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5C0             >Latest_Definition defl  Heap_Ptr
 215+ E5C0             >
 215+ E5C0             >                // dummy db directives used to calculate length of namec
 215+ E5C0 43 2C       >                db      "C,"
 215+ E5C2             >len_NFA         defl    $ - temp_NFA
 215+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5C0             >
 215+ E5C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5C1 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5C2 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5C3             >
 215+ E5C3 BA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 215+ E5C5             >
 215+ E5C5             >mirror_Ptr      defl    $
 215+ E5C5             >
 215+ E5C5 D8 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5C7             >
 215+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5C7             >
 215+ E5C7             >//              ______________________________________________________________________
 215+ E5C7             >//              Dictionary part
 215+ E5C7             >
 215+ E5C7             >                org     Dict_Ptr
 215+ 6BD6             >
 215+ 6BD6 C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BD8             >
 215+ 6BD8             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BD8 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BDB             >
 215+ 6BDB             >
 215+ 6BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BDB             >
 215+ 6BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BDB B3 6B B4 69                  dw      HERE, CSTORE            // here c!
 217+ 6BDF 95 6A BE 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BE3 4C 68                        dw      EXIT                    // ;
 219+ 6BE5
 220+ 6BE5              //  ______________________________________________________________________
 221+ 6BE5              //
 222+ 6BE5              // hpcomma      n --
 223+ 6BE5              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BE5              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BE5              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BE5              //              dw      EXIT                    // ;
 227+ 6BE5
 228+ 6BE5              //  ______________________________________________________________________
 229+ 6BE5              //
 230+ 6BE5              // s>d          n -- d
 231+ 6BE5              // converts a single precision integer in a double precision
 232+ 6BE5                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BE5             >
 232+ 6BE5             >Dict_Ptr        defl    $
 232+ 6BE5             >
 232+ 6BE5             >//              ______________________________________________________________________
 232+ 6BE5             >//              Heap part
 232+ 6BE5             >
 232+ 6BE5             >
 232+ 6BE5             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5C7             >
 232+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5C7             >Latest_Definition defl  Heap_Ptr
 232+ E5C7             >
 232+ E5C7             >                // dummy db directives used to calculate length of namec
 232+ E5C7 53 3E 44    >                db      "S>D"
 232+ E5CA             >len_NFA         defl    $ - temp_NFA
 232+ E5CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5C7             >
 232+ E5C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C8 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5CB             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5CA C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5CB             >
 232+ E5CB C0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5CD             >Prev_Ptr        defl    Heap_Ptr
 232+ E5CD             >
 232+ E5CD             >mirror_Ptr      defl    $
 232+ E5CD             >
 232+ E5CD E7 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5CF             >
 232+ E5CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5CF             >
 232+ E5CF             >//              ______________________________________________________________________
 232+ E5CF             >//              Dictionary part
 232+ E5CF             >
 232+ E5CF             >                org     Dict_Ptr
 232+ 6BE5             >
 232+ 6BE5 CD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BE7             >
 232+ 6BE7             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BE7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BE7 ~           >
 232+ 6BE7 ~           >
 232+ 6BE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BE7             >
 232+ 6BE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BE7 E1                           pop     hl
 234+ 6BE8 7C                           ld      a, h
 235+ 6BE9 E5                           push    hl
 236+ 6BEA 17                           rla
 237+ 6BEB ED 62                        sbc     hl, hl
 238+ 6BED E5                           push    hl
 239+ 6BEE                              next
 239+ 6BEE DD E9       >                jp      (ix)
 240+ 6BF0
 241+ 6BF0              //  ______________________________________________________________________
 242+ 6BF0              //
 243+ 6BF0              // -            n1 n2 -- n3
 244+ 6BF0              // subtraction
 245+ 6BF0                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BF0             >
 245+ 6BF0             >Dict_Ptr        defl    $
 245+ 6BF0             >
 245+ 6BF0             >//              ______________________________________________________________________
 245+ 6BF0             >//              Heap part
 245+ 6BF0             >
 245+ 6BF0             >
 245+ 6BF0             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5CF             >
 245+ E5CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5CF             >Latest_Definition defl  Heap_Ptr
 245+ E5CF             >
 245+ E5CF             >                // dummy db directives used to calculate length of namec
 245+ E5CF 2D          >                db      "-"
 245+ E5D0             >len_NFA         defl    $ - temp_NFA
 245+ E5D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5CF             >
 245+ E5CF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5D0 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5D1             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5D0 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5D1             >
 245+ E5D1 C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5D3             >Prev_Ptr        defl    Heap_Ptr
 245+ E5D3             >
 245+ E5D3             >mirror_Ptr      defl    $
 245+ E5D3             >
 245+ E5D3 F2 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5D5             >
 245+ E5D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5D5             >
 245+ E5D5             >//              ______________________________________________________________________
 245+ E5D5             >//              Dictionary part
 245+ E5D5             >
 245+ E5D5             >                org     Dict_Ptr
 245+ 6BF0             >
 245+ 6BF0 D3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BF2             >
 245+ 6BF2             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BF2 ~           >
 245+ 6BF2 ~           >
 245+ 6BF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BF2             >
 245+ 6BF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BF2 D9                           exx
 247+ 6BF3 D1                           pop     de
 248+ 6BF4 E1                           pop     hl
 249+ 6BF5 A7                           and     a
 250+ 6BF6 ED 52                        sbc     hl, de
 251+ 6BF8 E5                           push    hl
 252+ 6BF9 D9                           exx
 253+ 6BFA                              next
 253+ 6BFA DD E9       >                jp      (ix)
 254+ 6BFC
 255+ 6BFC
 256+ 6BFC              //  ______________________________________________________________________
 257+ 6BFC              //
 258+ 6BFC              // =            n1 n2 -- n3
 259+ 6BFC              // equals
 260+ 6BFC                              Colon_Def EQUALS, "=", is_normal
 260+ 6BFC             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BFC             >
 260+ 6BFC             >Dict_Ptr        defl    $
 260+ 6BFC             >
 260+ 6BFC             >//              ______________________________________________________________________
 260+ 6BFC             >//              Heap part
 260+ 6BFC             >
 260+ 6BFC             >
 260+ 6BFC             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5D5             >
 260+ E5D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5D5             >Latest_Definition defl  Heap_Ptr
 260+ E5D5             >
 260+ E5D5             >                // dummy db directives used to calculate length of namec
 260+ E5D5 3D          >                db      "="
 260+ E5D6             >len_NFA         defl    $ - temp_NFA
 260+ E5D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5D5             >
 260+ E5D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5D6 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5D7             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5D6 BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5D7             >
 260+ E5D7 CF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D9             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D9             >
 260+ E5D9             >mirror_Ptr      defl    $
 260+ E5D9             >
 260+ E5D9 FE 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5DB             >
 260+ E5DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5DB             >
 260+ E5DB             >//              ______________________________________________________________________
 260+ E5DB             >//              Dictionary part
 260+ E5DB             >
 260+ E5DB             >                org     Dict_Ptr
 260+ 6BFC             >
 260+ 6BFC D9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BFE             >
 260+ 6BFE             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BFE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6C01             >
 260+ 6C01             >
 260+ 6C01             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6C01             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6C01             >
 260+ 6C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6C01 F2 6B 71 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6C05 4C 68                        dw      EXIT                    // ;
 263+ 6C07
 264+ 6C07              //  ______________________________________________________________________
 265+ 6C07              //
 266+ 6C07              // u<           u1 u2 -- u3
 267+ 6C07              // unsigned less-than
 268+ 6C07                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6C07             >
 268+ 6C07             >Dict_Ptr        defl    $
 268+ 6C07             >
 268+ 6C07             >//              ______________________________________________________________________
 268+ 6C07             >//              Heap part
 268+ 6C07             >
 268+ 6C07             >
 268+ 6C07             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5DB             >
 268+ E5DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5DB             >Latest_Definition defl  Heap_Ptr
 268+ E5DB             >
 268+ E5DB             >                // dummy db directives used to calculate length of namec
 268+ E5DB 55 3C       >                db      "U<"
 268+ E5DD             >len_NFA         defl    $ - temp_NFA
 268+ E5DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5DB             >
 268+ E5DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5DC 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5DE             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5DD BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5DE             >
 268+ E5DE D5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5E0             >Prev_Ptr        defl    Heap_Ptr
 268+ E5E0             >
 268+ E5E0             >mirror_Ptr      defl    $
 268+ E5E0             >
 268+ E5E0 09 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5E2             >
 268+ E5E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5E2             >
 268+ E5E2             >//              ______________________________________________________________________
 268+ E5E2             >//              Dictionary part
 268+ E5E2             >
 268+ E5E2             >                org     Dict_Ptr
 268+ 6C07             >
 268+ 6C07 E0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C09             >
 268+ 6C09             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C09 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C09 ~           >
 268+ 6C09 ~           >
 268+ 6C09             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C09             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C09             >
 268+ 6C09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C09 D9                           exx
 270+ 6C0A D1                           pop     de
 271+ 6C0B E1                           pop     hl
 272+ 6C0C A7                           and     a
 273+ 6C0D ED 52                        sbc     hl, de
 274+ 6C0F ED 62                        sbc     hl, hl
 275+ 6C11 E5                           push    hl
 276+ 6C12 D9                           exx
 277+ 6C13                              next
 277+ 6C13 DD E9       >                jp      (ix)
 278+ 6C15
 279+ 6C15              //  ______________________________________________________________________
 280+ 6C15              //
 281+ 6C15              // <           n1 n2 -- n3
 282+ 6C15              // less-than
 283+ 6C15                              New_Def LESS, "<", is_code, is_normal
 283+ 6C15             >
 283+ 6C15             >Dict_Ptr        defl    $
 283+ 6C15             >
 283+ 6C15             >//              ______________________________________________________________________
 283+ 6C15             >//              Heap part
 283+ 6C15             >
 283+ 6C15             >
 283+ 6C15             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5E2             >
 283+ E5E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5E2             >Latest_Definition defl  Heap_Ptr
 283+ E5E2             >
 283+ E5E2             >                // dummy db directives used to calculate length of namec
 283+ E5E2 3C          >                db      "<"
 283+ E5E3             >len_NFA         defl    $ - temp_NFA
 283+ E5E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5E2             >
 283+ E5E2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5E3 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5E4             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5E3 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5E4             >
 283+ E5E4 DB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5E6             >Prev_Ptr        defl    Heap_Ptr
 283+ E5E6             >
 283+ E5E6             >mirror_Ptr      defl    $
 283+ E5E6             >
 283+ E5E6 17 6C       >                dw      Dict_Ptr + 2        // xt
 283+ E5E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5E8             >
 283+ E5E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5E8             >
 283+ E5E8             >//              ______________________________________________________________________
 283+ E5E8             >//              Dictionary part
 283+ E5E8             >
 283+ E5E8             >                org     Dict_Ptr
 283+ 6C15             >
 283+ 6C15 E6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 6C17             >
 283+ 6C17             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 6C17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 6C17 ~           >
 283+ 6C17 ~           >
 283+ 6C17             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 6C17             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 6C17             >
 283+ 6C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 6C17 D9                           exx
 285+ 6C18 D1                           pop     de
 286+ 6C19 E1                           pop     hl
 287+ 6C1A 7C                           ld      a, h
 288+ 6C1B EE 80                        xor     $80
 289+ 6C1D 67                           ld      h, a
 290+ 6C1E 7A                           ld      a, d
 291+ 6C1F EE 80                        xor     $80
 292+ 6C21 57                           ld      d, a
 293+ 6C22              //              and     a
 294+ 6C22 ED 52                        sbc     hl, de
 295+ 6C24 ED 62                        sbc     hl, hl
 296+ 6C26 E5                           push    hl
 297+ 6C27 D9                           exx
 298+ 6C28                              next
 298+ 6C28 DD E9       >                jp      (ix)
 299+ 6C2A
 300+ 6C2A              //  ______________________________________________________________________
 301+ 6C2A              //
 302+ 6C2A              // >            n1 n2 -- n3
 303+ 6C2A              // greater than
 304+ 6C2A                              Colon_Def GREATER, ">", is_normal
 304+ 6C2A             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C2A             >
 304+ 6C2A             >Dict_Ptr        defl    $
 304+ 6C2A             >
 304+ 6C2A             >//              ______________________________________________________________________
 304+ 6C2A             >//              Heap part
 304+ 6C2A             >
 304+ 6C2A             >
 304+ 6C2A             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E8             >
 304+ E5E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E8             >Latest_Definition defl  Heap_Ptr
 304+ E5E8             >
 304+ E5E8             >                // dummy db directives used to calculate length of namec
 304+ E5E8 3E          >                db      ">"
 304+ E5E9             >len_NFA         defl    $ - temp_NFA
 304+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E8             >
 304+ E5E8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E9 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E9 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5EA             >
 304+ E5EA E2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 304+ E5EC             >
 304+ E5EC             >mirror_Ptr      defl    $
 304+ E5EC             >
 304+ E5EC 2C 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5EE             >
 304+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5EE             >
 304+ E5EE             >//              ______________________________________________________________________
 304+ E5EE             >//              Dictionary part
 304+ E5EE             >
 304+ E5EE             >                org     Dict_Ptr
 304+ 6C2A             >
 304+ 6C2A EC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C2C             >
 304+ 6C2C             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C2C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C2F             >
 304+ 6C2F             >
 304+ 6C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C2F             >
 304+ 6C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C2F 1E 69 17 6C                  dw      SWAP, LESS              // swap <
 306+ 6C33 4C 68                        dw      EXIT                    // ;
 307+ 6C35              //  ______________________________________________________________________
 308+ 6C35              //
 309+ 6C35              // min          n1 n2 -- n3
 310+ 6C35              // minimum between n1 and n2
 311+ 6C35                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C35             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C35             >
 311+ 6C35             >Dict_Ptr        defl    $
 311+ 6C35             >
 311+ 6C35             >//              ______________________________________________________________________
 311+ 6C35             >//              Heap part
 311+ 6C35             >
 311+ 6C35             >
 311+ 6C35             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5EE             >
 311+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5EE             >Latest_Definition defl  Heap_Ptr
 311+ E5EE             >
 311+ E5EE             >                // dummy db directives used to calculate length of namec
 311+ E5EE 4D 49 4E    >                db      "MIN"
 311+ E5F1             >len_NFA         defl    $ - temp_NFA
 311+ E5F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5EE             >
 311+ E5EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5EF 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5F2             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5F1 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5F2             >
 311+ E5F2 E8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5F4             >Prev_Ptr        defl    Heap_Ptr
 311+ E5F4             >
 311+ E5F4             >mirror_Ptr      defl    $
 311+ E5F4             >
 311+ E5F4 37 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5F6             >
 311+ E5F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5F6             >
 311+ E5F6             >//              ______________________________________________________________________
 311+ E5F6             >//              Dictionary part
 311+ E5F6             >
 311+ E5F6             >                org     Dict_Ptr
 311+ 6C35             >
 311+ 6C35 F4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C37             >
 311+ 6C37             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C37 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C3A             >
 311+ 6C3A             >
 311+ 6C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C3A             >
 311+ 6C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C3A 74 69                        dw      TWO_DUP                 // 2dup
 313+ 6C3C 2C 6C                        dw      GREATER                 // >
 314+ 6C3E F5 63                        dw      ZBRANCH
 315+ 6C40 04 00                        dw      Min_Skip - $   // if
 316+ 6C42 1E 69                        dw          SWAP                //      swap
 317+ 6C44              Min_Skip:                                       // endif
 318+ 6C44 0A 69                        dw      DROP                    // drop
 319+ 6C46 4C 68                        dw      EXIT                    // ;
 320+ 6C48
 321+ 6C48              //  ______________________________________________________________________
 322+ 6C48              //
 323+ 6C48              // max          n1 n2 -- n3
 324+ 6C48              // maximum between n1 and n2
 325+ 6C48                              Colon_Def MAX, "MAX", is_normal
 325+ 6C48             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C48             >
 325+ 6C48             >Dict_Ptr        defl    $
 325+ 6C48             >
 325+ 6C48             >//              ______________________________________________________________________
 325+ 6C48             >//              Heap part
 325+ 6C48             >
 325+ 6C48             >
 325+ 6C48             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5F6             >
 325+ E5F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5F6             >Latest_Definition defl  Heap_Ptr
 325+ E5F6             >
 325+ E5F6             >                // dummy db directives used to calculate length of namec
 325+ E5F6 4D 41 58    >                db      "MAX"
 325+ E5F9             >len_NFA         defl    $ - temp_NFA
 325+ E5F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5F6             >
 325+ E5F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5F7 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5FA             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F9 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5FA             >
 325+ E5FA EE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5FC             >Prev_Ptr        defl    Heap_Ptr
 325+ E5FC             >
 325+ E5FC             >mirror_Ptr      defl    $
 325+ E5FC             >
 325+ E5FC 4A 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5FE             >
 325+ E5FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5FE             >
 325+ E5FE             >//              ______________________________________________________________________
 325+ E5FE             >//              Dictionary part
 325+ E5FE             >
 325+ E5FE             >                org     Dict_Ptr
 325+ 6C48             >
 325+ 6C48 FC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C4A             >
 325+ 6C4A             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C4A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C4D             >
 325+ 6C4D             >
 325+ 6C4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C4D             >
 325+ 6C4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C4D 74 69                        dw      TWO_DUP                 // 2dup
 327+ 6C4F 17 6C                        dw      LESS                    // <
 328+ 6C51 F5 63                        dw      ZBRANCH
 329+ 6C53 04 00                        dw      Max_Skip - $   // if
 330+ 6C55 1E 69                        dw          SWAP                //      swap
 331+ 6C57              Max_Skip:                                       // endif
 332+ 6C57 0A 69                        dw      DROP                    // drop
 333+ 6C59 4C 68                        dw      EXIT                    // ;
 334+ 6C5B
 335+ 6C5B              //  ______________________________________________________________________
 336+ 6C5B              //
 337+ 6C5B              // ?dup         n -- 0 | n n
 338+ 6C5B              // duplicate if not zero
 339+ 6C5B                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C5B             >
 339+ 6C5B             >Dict_Ptr        defl    $
 339+ 6C5B             >
 339+ 6C5B             >//              ______________________________________________________________________
 339+ 6C5B             >//              Heap part
 339+ 6C5B             >
 339+ 6C5B             >
 339+ 6C5B             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5FE             >
 339+ E5FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5FE             >Latest_Definition defl  Heap_Ptr
 339+ E5FE             >
 339+ E5FE             >                // dummy db directives used to calculate length of namec
 339+ E5FE 3F 44 55 50 >                db      "?DUP"
 339+ E602             >len_NFA         defl    $ - temp_NFA
 339+ E602             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5FE             >
 339+ E5FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5FF 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E603             >                org     $-1                 // alter last byte of Name just above to set
 339+ E602 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E603             >
 339+ E603 F6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E605             >Prev_Ptr        defl    Heap_Ptr
 339+ E605             >
 339+ E605             >mirror_Ptr      defl    $
 339+ E605             >
 339+ E605 5D 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E607             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E607             >
 339+ E607             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E607             >
 339+ E607             >//              ______________________________________________________________________
 339+ E607             >//              Dictionary part
 339+ E607             >
 339+ E607             >                org     Dict_Ptr
 339+ 6C5B             >
 339+ 6C5B 05 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C5D             >
 339+ 6C5D             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C5D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C5D ~           >
 339+ 6C5D ~           >
 339+ 6C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C5D             >
 339+ 6C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C5D              QDup_Ptr:
 341+ 6C5D E1                           pop     hl
 342+ 6C5E 7C                           ld      a, h
 343+ 6C5F B5                           or      l
 344+ 6C60 28 01                        jr      z, QDup_Skip
 345+ 6C62 E5                               push    hl
 346+ 6C63              QDup_Skip:
 347+ 6C63                              psh1
 347+ 6C63 E5          >                push    hl
 347+ 6C64 DD E9       >                jp      (ix)
 348+ 6C66
 349+ 6C66              //  ______________________________________________________________________
 350+ 6C66              //
 351+ 6C66              // -dup         n -- 0 | n n
 352+ 6C66              // duplicate if not zero
 353+ 6C66                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C66             >
 353+ 6C66             >Dict_Ptr        defl    $
 353+ 6C66             >
 353+ 6C66             >//              ______________________________________________________________________
 353+ 6C66             >//              Heap part
 353+ 6C66             >
 353+ 6C66             >
 353+ 6C66             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E607             >
 353+ E607             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E607             >Latest_Definition defl  Heap_Ptr
 353+ E607             >
 353+ E607             >                // dummy db directives used to calculate length of namec
 353+ E607 2D 44 55 50 >                db      "-DUP"
 353+ E60B             >len_NFA         defl    $ - temp_NFA
 353+ E60B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E607             >
 353+ E607 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E608 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E60C             >                org     $-1                 // alter last byte of Name just above to set
 353+ E60B D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E60C             >
 353+ E60C FE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E60E             >Prev_Ptr        defl    Heap_Ptr
 353+ E60E             >
 353+ E60E             >mirror_Ptr      defl    $
 353+ E60E             >
 353+ E60E 68 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E610             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E610             >
 353+ E610             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E610             >
 353+ E610             >//              ______________________________________________________________________
 353+ E610             >//              Dictionary part
 353+ E610             >
 353+ E610             >                org     Dict_Ptr
 353+ 6C66             >
 353+ 6C66 0E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C68             >
 353+ 6C68             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C68 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C68 ~           >
 353+ 6C68 ~           >
 353+ 6C68             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C68             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C68             >
 353+ 6C68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C68 C3 5D 6C                     jp      QDup_Ptr
 355+ 6C6B
 356+ 6C6B              //  ______________________________________________________________________
 357+ 6C6B              //
 358+ 6C6B              // emit         c --
 359+ 6C6B                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C6B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C6B             >
 359+ 6C6B             >Dict_Ptr        defl    $
 359+ 6C6B             >
 359+ 6C6B             >//              ______________________________________________________________________
 359+ 6C6B             >//              Heap part
 359+ 6C6B             >
 359+ 6C6B             >
 359+ 6C6B             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E610             >
 359+ E610             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E610             >Latest_Definition defl  Heap_Ptr
 359+ E610             >
 359+ E610             >                // dummy db directives used to calculate length of namec
 359+ E610 45 4D 49 54 >                db      "EMIT"
 359+ E614             >len_NFA         defl    $ - temp_NFA
 359+ E614             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E610             >
 359+ E610 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E611 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E615             >                org     $-1                 // alter last byte of Name just above to set
 359+ E614 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E615             >
 359+ E615 07 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E617             >Prev_Ptr        defl    Heap_Ptr
 359+ E617             >
 359+ E617             >mirror_Ptr      defl    $
 359+ E617             >
 359+ E617 6D 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E619             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E619             >
 359+ E619             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E619             >
 359+ E619             >//              ______________________________________________________________________
 359+ E619             >//              Dictionary part
 359+ E619             >
 359+ E619             >                org     Dict_Ptr
 359+ 6C6B             >
 359+ 6C6B 17 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C6D             >
 359+ 6C6D             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C6D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C70             >
 359+ 6C70             >
 359+ 6C70             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C70             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C70             >
 359+ 6C70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C70 D4 65                        dw      C_EMIT                      // (?emit)
 361+ 6C72 5D 6C                        dw      QDUP                        // ?dup
 362+ 6C74                                                                  // if
 363+ 6C74 F5 63                        dw      ZBRANCH
 364+ 6C76 0A 00                        dw      Emit_Skip - $
 365+ 6C78 A2 65                        dw          EMITC                   //      emitc
 366+ 6C7A 95 6A                        dw          ONE                     //      1
 367+ 6C7C 3B 6B 7E 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C80              Emit_Skip:                                          // endif
 369+ 6C80 4C 68                        dw      EXIT                        // ;
 370+ 6C82
 371+ 6C82              //  ______________________________________________________________________
 372+ 6C82              //
 373+ 6C82              // space        --
 374+ 6C82                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C82             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C82             >
 374+ 6C82             >Dict_Ptr        defl    $
 374+ 6C82             >
 374+ 6C82             >//              ______________________________________________________________________
 374+ 6C82             >//              Heap part
 374+ 6C82             >
 374+ 6C82             >
 374+ 6C82             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E619             >
 374+ E619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E619             >Latest_Definition defl  Heap_Ptr
 374+ E619             >
 374+ E619             >                // dummy db directives used to calculate length of namec
 374+ E619 53 50 41 43 >                db      "SPACE"
 374+ E61D 45          >
 374+ E61E             >len_NFA         defl    $ - temp_NFA
 374+ E61E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E619             >
 374+ E619 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E61A 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E61E 45          >
 374+ E61F             >                org     $-1                 // alter last byte of Name just above to set
 374+ E61E C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E61F             >
 374+ E61F 10 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E621             >Prev_Ptr        defl    Heap_Ptr
 374+ E621             >
 374+ E621             >mirror_Ptr      defl    $
 374+ E621             >
 374+ E621 84 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E623             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E623             >
 374+ E623             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E623             >
 374+ E623             >//              ______________________________________________________________________
 374+ E623             >//              Dictionary part
 374+ E623             >
 374+ E623             >                org     Dict_Ptr
 374+ 6C82             >
 374+ 6C82 21 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C84             >
 374+ 6C84             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C84 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C87             >
 374+ 6C87             >
 374+ 6C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C87             >
 374+ 6C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C87 B1 6A 6D 6C                  dw      BL, EMIT                // bl emit
 376+ 6C8B 4C 68                        dw      EXIT                    // ;
 377+ 6C8D
 378+ 6C8D              //  ______________________________________________________________________
 379+ 6C8D              //
 380+ 6C8D              // traverse     a n -- a
 381+ 6C8D              // A dictionary entry is structured as follows
 382+ 6C8D              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C8D              //      +1   word name, last character is toggled with $80
 384+ 6C8D              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C8D              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C8D              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C8D              //
 388+ 6C8D                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C8D             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C8D             >
 388+ 6C8D             >Dict_Ptr        defl    $
 388+ 6C8D             >
 388+ 6C8D             >//              ______________________________________________________________________
 388+ 6C8D             >//              Heap part
 388+ 6C8D             >
 388+ 6C8D             >
 388+ 6C8D             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E623             >
 388+ E623             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E623             >Latest_Definition defl  Heap_Ptr
 388+ E623             >
 388+ E623             >                // dummy db directives used to calculate length of namec
 388+ E623 54 52 41 56 >                db      "TRAVERSE"
 388+ E627 45 52 53 45 >
 388+ E62B             >len_NFA         defl    $ - temp_NFA
 388+ E62B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E623             >
 388+ E623 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E624 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E628 45 52 53 45 >
 388+ E62C             >                org     $-1                 // alter last byte of Name just above to set
 388+ E62B C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E62C             >
 388+ E62C 19 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E62E             >Prev_Ptr        defl    Heap_Ptr
 388+ E62E             >
 388+ E62E             >mirror_Ptr      defl    $
 388+ E62E             >
 388+ E62E 8F 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E630             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E630             >
 388+ E630             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E630             >
 388+ E630             >//              ______________________________________________________________________
 388+ E630             >//              Dictionary part
 388+ E630             >
 388+ E630             >                org     Dict_Ptr
 388+ 6C8D             >
 388+ 6C8D 2E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C8F             >
 388+ 6C8F             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C8F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C92             >
 388+ 6C92             >
 388+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C92             >
 388+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C92 1E 69                        dw      SWAP                    // swap
 390+ 6C94              Traverse_Begin:                                 // begin
 391+ 6C94 01 69 9F 68                  dw          OVER, PLUS          //      over +
 392+ 6C98 A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C9C 01 69 AB 69                  dw          OVER, CFETCH        //      over @
 394+ 6CA0 17 6C                        dw          LESS                //      <
 395+ 6CA2                                                              // until
 396+ 6CA2 F5 63                        dw      ZBRANCH
 397+ 6CA4 F0 FF                        dw      Traverse_Begin - $
 398+ 6CA6 0F 69                        dw      NIP                     //  nip
 399+ 6CA8 4C 68                        dw      EXIT                    //  ;
 400+ 6CAA
 401+ 6CAA              //  ______________________________________________________________________
 402+ 6CAA              //
 403+ 6CAA              // mmu7@        -- n
 404+ 6CAA              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6CAA
 406+ 6CAA                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6CAA             >
 406+ 6CAA             >Dict_Ptr        defl    $
 406+ 6CAA             >
 406+ 6CAA             >//              ______________________________________________________________________
 406+ 6CAA             >//              Heap part
 406+ 6CAA             >
 406+ 6CAA             >
 406+ 6CAA             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E630             >
 406+ E630             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E630             >Latest_Definition defl  Heap_Ptr
 406+ E630             >
 406+ E630             >                // dummy db directives used to calculate length of namec
 406+ E630 4D 4D 55 37 >                db      "MMU7@"
 406+ E634 40          >
 406+ E635             >len_NFA         defl    $ - temp_NFA
 406+ E635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E630             >
 406+ E630 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E631 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E635 40          >
 406+ E636             >                org     $-1                 // alter last byte of Name just above to set
 406+ E635 C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E636             >
 406+ E636 23 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E638             >Prev_Ptr        defl    Heap_Ptr
 406+ E638             >
 406+ E638             >mirror_Ptr      defl    $
 406+ E638             >
 406+ E638 AC 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E63A             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E63A             >
 406+ E63A             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E63A             >
 406+ E63A             >//              ______________________________________________________________________
 406+ E63A             >//              Dictionary part
 406+ E63A             >
 406+ E63A             >                org     Dict_Ptr
 406+ 6CAA             >
 406+ 6CAA 38 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6CAC             >
 406+ 6CAC             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6CAC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6CAC ~           >
 406+ 6CAC ~           >
 406+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6CAC             >
 406+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6CAC D9                           exx
 408+ 6CAD CD 9F 64                     call    MMU7_read
 409+ 6CB0 D9                           exx
 410+ 6CB1 6F                           ld      l, a
 411+ 6CB2 26 00                        ld      h, 0
 412+ 6CB4 E5                           push    hl
 413+ 6CB5                              next
 413+ 6CB5 DD E9       >                jp      (ix)
 414+ 6CB7
 415+ 6CB7              //  ______________________________________________________________________
 416+ 6CB7              //
 417+ 6CB7              // mmu7!        n --
 418+ 6CB7              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CB7              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CB7
 421+ 6CB7                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CB7             >
 421+ 6CB7             >Dict_Ptr        defl    $
 421+ 6CB7             >
 421+ 6CB7             >//              ______________________________________________________________________
 421+ 6CB7             >//              Heap part
 421+ 6CB7             >
 421+ 6CB7             >
 421+ 6CB7             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E63A             >
 421+ E63A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E63A             >Latest_Definition defl  Heap_Ptr
 421+ E63A             >
 421+ E63A             >                // dummy db directives used to calculate length of namec
 421+ E63A 4D 4D 55 37 >                db      "MMU7!"
 421+ E63E 21          >
 421+ E63F             >len_NFA         defl    $ - temp_NFA
 421+ E63F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E63A             >
 421+ E63A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E63B 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E63F 21          >
 421+ E640             >                org     $-1                 // alter last byte of Name just above to set
 421+ E63F A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E640             >
 421+ E640 30 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E642             >Prev_Ptr        defl    Heap_Ptr
 421+ E642             >
 421+ E642             >mirror_Ptr      defl    $
 421+ E642             >
 421+ E642 B9 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E644             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E644             >
 421+ E644             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E644             >
 421+ E644             >//              ______________________________________________________________________
 421+ E644             >//              Dictionary part
 421+ E644             >
 421+ E644             >                org     Dict_Ptr
 421+ 6CB7             >
 421+ 6CB7 42 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CB9             >
 421+ 6CB9             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CB9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CB9 ~           >
 421+ 6CB9 ~           >
 421+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CB9             >
 421+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CB9 E1                           pop     hl
 423+ 6CBA 7D                           ld      a, l
 424+ 6CBB ED 92 57                     nextreg 87, a
 425+ 6CBE
 426+ 6CBE                              next
 426+ 6CBE DD E9       >                jp      (ix)
 427+ 6CC0
 428+ 6CC0              //  ______________________________________________________________________
 429+ 6CC0              //
 430+ 6CC0              // >far         ha -- a n
 431+ 6CC0              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CC0              // take lower bits of H and L as an offset from E000h
 433+ 6CC0              // then return address  a  between E000h-FFFFh
 434+ 6CC0              // and page number n  between 64-71 (40h-47h)
 435+ 6CC0              // For example, in hex:
 436+ 6CC0              //   0000 >FAR  gives  40.E000
 437+ 6CC0              //   1FFF >FAR  gives  40.FFFF
 438+ 6CC0              //   2000 >FAR  gives  41.E000
 439+ 6CC0              //   3FFF >FAR  gives  41.FFFF
 440+ 6CC0              //   EFFF >FAR  gives  47.EFFF
 441+ 6CC0              //   FFFF >FAR  gives  47.FFFF
 442+ 6CC0                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CC0             >
 442+ 6CC0             >Dict_Ptr        defl    $
 442+ 6CC0             >
 442+ 6CC0             >//              ______________________________________________________________________
 442+ 6CC0             >//              Heap part
 442+ 6CC0             >
 442+ 6CC0             >
 442+ 6CC0             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E644             >
 442+ E644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E644             >Latest_Definition defl  Heap_Ptr
 442+ E644             >
 442+ E644             >                // dummy db directives used to calculate length of namec
 442+ E644 3E 46 41 52 >                db      ">FAR"
 442+ E648             >len_NFA         defl    $ - temp_NFA
 442+ E648             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E644             >
 442+ E644 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E645 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E649             >                org     $-1                 // alter last byte of Name just above to set
 442+ E648 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E649             >
 442+ E649 3A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E64B             >Prev_Ptr        defl    Heap_Ptr
 442+ E64B             >
 442+ E64B             >mirror_Ptr      defl    $
 442+ E64B             >
 442+ E64B C2 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E64D             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E64D             >
 442+ E64D             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E64D             >
 442+ E64D             >//              ______________________________________________________________________
 442+ E64D             >//              Dictionary part
 442+ E64D             >
 442+ E64D             >                org     Dict_Ptr
 442+ 6CC0             >
 442+ 6CC0 4B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CC2             >
 442+ 6CC2             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CC2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CC2 ~           >
 442+ 6CC2 ~           >
 442+ 6CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CC2             >
 442+ 6CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CC2 E1                           pop     hl
 444+ 6CC3 CD AA 64                     call    TO_FAR_rout
 445+ 6CC6 E5                           push    hl
 446+ 6CC7 6F                           ld      l, a
 447+ 6CC8 26 00                        ld      h, 0
 448+ 6CCA E5                           push    hl
 449+ 6CCB                              next
 449+ 6CCB DD E9       >                jp      (ix)
 450+ 6CCD
 451+ 6CCD              //  ______________________________________________________________________
 452+ 6CCD              //
 453+ 6CCD              // <far         a n  -- ha
 454+ 6CCD              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CCD              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CCD              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CCD                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CCD             >
 457+ 6CCD             >Dict_Ptr        defl    $
 457+ 6CCD             >
 457+ 6CCD             >//              ______________________________________________________________________
 457+ 6CCD             >//              Heap part
 457+ 6CCD             >
 457+ 6CCD             >
 457+ 6CCD             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E64D             >
 457+ E64D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E64D             >Latest_Definition defl  Heap_Ptr
 457+ E64D             >
 457+ E64D             >                // dummy db directives used to calculate length of namec
 457+ E64D 3C 46 41 52 >                db      "<FAR"
 457+ E651             >len_NFA         defl    $ - temp_NFA
 457+ E651             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E64D             >
 457+ E64D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E64E 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E652             >                org     $-1                 // alter last byte of Name just above to set
 457+ E651 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E652             >
 457+ E652 44 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E654             >Prev_Ptr        defl    Heap_Ptr
 457+ E654             >
 457+ E654             >mirror_Ptr      defl    $
 457+ E654             >
 457+ E654 CF 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E656             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E656             >
 457+ E656             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E656             >
 457+ E656             >//              ______________________________________________________________________
 457+ E656             >//              Dictionary part
 457+ E656             >
 457+ E656             >                org     Dict_Ptr
 457+ 6CCD             >
 457+ 6CCD 54 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CCF             >
 457+ 6CCF             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CCF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CCF ~           >
 457+ 6CCF ~           >
 457+ 6CCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CCF             >
 457+ 6CCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CCF E1                           pop     hl                  // page number in e
 459+ 6CD0 7D                           ld      a, l
 460+ 6CD1 E6 07                        and     07
 461+ 6CD3 0F                           rrca
 462+ 6CD4 0F                           rrca
 463+ 6CD5 0F                           rrca
 464+ 6CD6 08                           ex      af, af
 465+ 6CD7 E1                           pop     hl                  // address in hl
 466+ 6CD8 7C                           ld      a, h
 467+ 6CD9 E6 1F                        and     $1F
 468+ 6CDB 67                           ld      h, a
 469+ 6CDC 08                           ex      af, af
 470+ 6CDD B4                           or      h
 471+ 6CDE 67                           ld      h, a
 472+ 6CDF                              psh1
 472+ 6CDF E5          >                push    hl
 472+ 6CE0 DD E9       >                jp      (ix)
 473+ 6CE2
 474+ 6CE2              //  ______________________________________________________________________
 475+ 6CE2              //
 476+ 6CE2              // ?IN_MMU7        a -- f
 477+ 6CE2              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 6CE2                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 6CE2             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 6CE2             >
 478+ 6CE2             >Dict_Ptr        defl    $
 478+ 6CE2             >
 478+ 6CE2             >//              ______________________________________________________________________
 478+ 6CE2             >//              Heap part
 478+ 6CE2             >
 478+ 6CE2             >
 478+ 6CE2             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E656             >
 478+ E656             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E656             >Latest_Definition defl  Heap_Ptr
 478+ E656             >
 478+ E656             >                // dummy db directives used to calculate length of namec
 478+ E656 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E65A 4D 4D 55 37 >
 478+ E65E             >len_NFA         defl    $ - temp_NFA
 478+ E65E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E656             >
 478+ E656 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E657 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E65B 4D 4D 55 37 >
 478+ E65F             >                org     $-1                 // alter last byte of Name just above to set
 478+ E65E B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E65F             >
 478+ E65F 4D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E661             >Prev_Ptr        defl    Heap_Ptr
 478+ E661             >
 478+ E661             >mirror_Ptr      defl    $
 478+ E661             >
 478+ E661 E4 6C       >                dw      Dict_Ptr + 2        // xt
 478+ E663             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E663             >
 478+ E663             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E663             >
 478+ E663             >//              ______________________________________________________________________
 478+ E663             >//              Dictionary part
 478+ E663             >
 478+ E663             >                org     Dict_Ptr
 478+ 6CE2             >
 478+ 6CE2 61 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 6CE4             >
 478+ 6CE4             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 6CE4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 6CE7             >
 478+ 6CE7             >
 478+ 6CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 6CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 6CE7             >
 478+ 6CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 6CE7 25 69                        dw      DUP
 480+ 6CE9 A3 63 00 E0                  dw      LIT, $E000
 481+ 6CED 09 6C                        dw      ULESS
 482+ 6CEF 7F 68                        dw      NOT_OP
 483+ 6CF1 4C 68                        dw      EXIT
 484+ 6CF3
 485+ 6CF3              //  ______________________________________________________________________
 486+ 6CF3              //
 487+ 6CF3              // far          hp -- ha
 488+ 6CF3              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 6CF3                              Colon_Def FAR, "FAR", is_normal
 489+ 6CF3             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 6CF3             >
 489+ 6CF3             >Dict_Ptr        defl    $
 489+ 6CF3             >
 489+ 6CF3             >//              ______________________________________________________________________
 489+ 6CF3             >//              Heap part
 489+ 6CF3             >
 489+ 6CF3             >
 489+ 6CF3             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E663             >
 489+ E663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E663             >Latest_Definition defl  Heap_Ptr
 489+ E663             >
 489+ E663             >                // dummy db directives used to calculate length of namec
 489+ E663 46 41 52    >                db      "FAR"
 489+ E666             >len_NFA         defl    $ - temp_NFA
 489+ E666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E663             >
 489+ E663 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E664 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E667             >                org     $-1                 // alter last byte of Name just above to set
 489+ E666 D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E667             >
 489+ E667 56 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E669             >Prev_Ptr        defl    Heap_Ptr
 489+ E669             >
 489+ E669             >mirror_Ptr      defl    $
 489+ E669             >
 489+ E669 F5 6C       >                dw      Dict_Ptr + 2        // xt
 489+ E66B             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E66B             >
 489+ E66B             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E66B             >
 489+ E66B             >//              ______________________________________________________________________
 489+ E66B             >//              Dictionary part
 489+ E66B             >
 489+ E66B             >                org     Dict_Ptr
 489+ 6CF3             >
 489+ 6CF3 69 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 6CF5             >
 489+ 6CF5             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 6CF5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 6CF8             >
 489+ 6CF8             >
 489+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 6CF8             >
 489+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 6CF8 C2 6C                        dw      TO_FAR
 491+ 6CFA B9 6C                        dw      MMU7_STORE
 492+ 6CFC 4C 68                        dw      EXIT
 493+ 6CFE
 494+ 6CFE              //  ______________________________________________________________________
 495+ 6CFE              //
 496+ 6CFE              // ?HEAP_PTR       n -- n f
 497+ 6CFE              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 6CFE                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 6CFE             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 6CFE             >
 498+ 6CFE             >Dict_Ptr        defl    $
 498+ 6CFE             >
 498+ 6CFE             >//              ______________________________________________________________________
 498+ 6CFE             >//              Heap part
 498+ 6CFE             >
 498+ 6CFE             >
 498+ 6CFE             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E66B             >
 498+ E66B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E66B             >Latest_Definition defl  Heap_Ptr
 498+ E66B             >
 498+ E66B             >                // dummy db directives used to calculate length of namec
 498+ E66B 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E66F 50 5F 50 54 >
 498+ E673 52          >
 498+ E674             >len_NFA         defl    $ - temp_NFA
 498+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E66B             >
 498+ E66B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E66C 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E670 50 5F 50 54 >
 498+ E674 52          >
 498+ E675             >                org     $-1                 // alter last byte of Name just above to set
 498+ E674 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E675             >
 498+ E675 63 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E677             >Prev_Ptr        defl    Heap_Ptr
 498+ E677             >
 498+ E677             >mirror_Ptr      defl    $
 498+ E677             >
 498+ E677 00 6D       >                dw      Dict_Ptr + 2        // xt
 498+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E679             >
 498+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E679             >
 498+ E679             >//              ______________________________________________________________________
 498+ E679             >//              Dictionary part
 498+ E679             >
 498+ E679             >                org     Dict_Ptr
 498+ 6CFE             >
 498+ 6CFE 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 6D00             >
 498+ 6D00             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6D00 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 6D03             >
 498+ 6D03             >
 498+ 6D03             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6D03             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6D03             >
 498+ 6D03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6D03 25 69                        dw      DUP
 500+ 6D05 F5 63                        dw      ZBRANCH
 501+ 6D07 08 00                        dw      QHeap_Skip - $
 502+ 6D09 A3 63 00 60                  dw          LIT, $6000
 503+ 6D0D 09 6C                        dw          ULESS
 504+ 6D0F              QHeap_Skip:                                          // endif
 505+ 6D0F 4C 68                        dw      EXIT                        // ;
 506+ 6D11
 507+ 6D11              //  ______________________________________________________________________
 508+ 6D11              //
 509+ 6D11              // ?>heap       n1 -- n2
 510+ 6D11              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 6D11                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 6D11             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 6D11             >
 511+ 6D11             >Dict_Ptr        defl    $
 511+ 6D11             >
 511+ 6D11             >//              ______________________________________________________________________
 511+ 6D11             >//              Heap part
 511+ 6D11             >
 511+ 6D11             >
 511+ 6D11             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E679             >
 511+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E679             >Latest_Definition defl  Heap_Ptr
 511+ E679             >
 511+ E679             >                // dummy db directives used to calculate length of namec
 511+ E679 3F 3E 48 45 >                db      "?>HEAP"
 511+ E67D 41 50       >
 511+ E67F             >len_NFA         defl    $ - temp_NFA
 511+ E67F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E679             >
 511+ E679 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E67A 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E67E 41 50       >
 511+ E680             >                org     $-1                 // alter last byte of Name just above to set
 511+ E67F D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E680             >
 511+ E680 6B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E682             >Prev_Ptr        defl    Heap_Ptr
 511+ E682             >
 511+ E682             >mirror_Ptr      defl    $
 511+ E682             >
 511+ E682 13 6D       >                dw      Dict_Ptr + 2        // xt
 511+ E684             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E684             >
 511+ E684             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E684             >
 511+ E684             >//              ______________________________________________________________________
 511+ E684             >//              Dictionary part
 511+ E684             >
 511+ E684             >                org     Dict_Ptr
 511+ 6D11             >
 511+ 6D11 82 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 6D13             >
 511+ 6D13             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 6D13 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 6D16             >
 511+ 6D16             >
 511+ 6D16             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6D16             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6D16             >
 511+ 6D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6D16 25 69                        dw      DUP
 513+ 6D18 00 6D                        dw      QHEAPP
 514+ 6D1A F5 63                        dw      ZBRANCH
 515+ 6D1C 04 00                        dw      Q2Heap_Skip - $
 516+ 6D1E F5 6C                        dw          FAR
 517+ 6D20              Q2Heap_Skip:                                          // endif
 518+ 6D20 4C 68                        dw      EXIT                        // ;
 519+ 6D22
 520+ 6D22              //  ______________________________________________________________________
 521+ 6D22              //
 522+ 6D22              // hp_fetch     -- a
 523+ 6D22                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 6D22             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 6D22             >
 523+ 6D22             >Dict_Ptr        defl    $
 523+ 6D22             >
 523+ 6D22             >//              ______________________________________________________________________
 523+ 6D22             >//              Heap part
 523+ 6D22             >
 523+ 6D22             >
 523+ 6D22             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E684             >
 523+ E684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E684             >Latest_Definition defl  Heap_Ptr
 523+ E684             >
 523+ E684             >                // dummy db directives used to calculate length of namec
 523+ E684 48 50 40    >                db      "HP@"
 523+ E687             >len_NFA         defl    $ - temp_NFA
 523+ E687             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E684             >
 523+ E684 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E685 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E688             >                org     $-1                 // alter last byte of Name just above to set
 523+ E687 C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E688             >
 523+ E688 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E68A             >Prev_Ptr        defl    Heap_Ptr
 523+ E68A             >
 523+ E68A             >mirror_Ptr      defl    $
 523+ E68A             >
 523+ E68A 24 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E68C             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E68C             >
 523+ E68C             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E68C             >
 523+ E68C             >//              ______________________________________________________________________
 523+ E68C             >//              Dictionary part
 523+ E68C             >
 523+ E68C             >                org     Dict_Ptr
 523+ 6D22             >
 523+ 6D22 8A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D24             >
 523+ 6D24             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D24 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D27             >
 523+ 6D27             >
 523+ 6D27             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D27             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D27             >
 523+ 6D27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 6D27 23 6B 96 69                  dw      HP, FETCH               // hp @
 525+ 6D2B 4C 68                        dw      EXIT                    // ;
 526+ 6D2D
 527+ 6D2D              //  ______________________________________________________________________
 528+ 6D2D              //
 529+ 6D2D              // page-watermark   -- n
 530+ 6D2D              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 6D2D                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 6D2D             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 6D2D             >
 531+ 6D2D             >Dict_Ptr        defl    $
 531+ 6D2D             >
 531+ 6D2D             >//              ______________________________________________________________________
 531+ 6D2D             >//              Heap part
 531+ 6D2D             >
 531+ 6D2D             >
 531+ 6D2D             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E68C             >
 531+ E68C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E68C             >Latest_Definition defl  Heap_Ptr
 531+ E68C             >
 531+ E68C             >                // dummy db directives used to calculate length of namec
 531+ E68C 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E690 2D 57 41 54 >
 531+ E694 45 52 4D 41 >
 531+ E698 52 4B       >
 531+ E69A             >len_NFA         defl    $ - temp_NFA
 531+ E69A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E68C             >
 531+ E68C 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E68D 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E691 2D 57 41 54 >
 531+ E695 45 52 4D 41 >
 531+ E699 52 4B       >
 531+ E69B             >                org     $-1                 // alter last byte of Name just above to set
 531+ E69A CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E69B             >
 531+ E69B 84 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E69D             >Prev_Ptr        defl    Heap_Ptr
 531+ E69D             >
 531+ E69D             >mirror_Ptr      defl    $
 531+ E69D             >
 531+ E69D 2F 6D       >                dw      Dict_Ptr + 2        // xt
 531+ E69F             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E69F             >
 531+ E69F             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E69F             >
 531+ E69F             >//              ______________________________________________________________________
 531+ E69F             >//              Dictionary part
 531+ E69F             >
 531+ E69F             >                org     Dict_Ptr
 531+ 6D2D             >
 531+ 6D2D 9D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 6D2F             >
 531+ 6D2F             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 6D2F CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 6D32             >
 531+ 6D32             >
 531+ 6D32             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 6D32             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 6D32             >
 531+ 6D32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D32 80 1F       >                dw      $1F80
 532+ 6D34
 533+ 6D34              //  ______________________________________________________________________
 534+ 6D34              //
 535+ 6D34              // skip-hp-page ha -- a
 536+ 6D34                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 6D34             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 6D34             >
 536+ 6D34             >Dict_Ptr        defl    $
 536+ 6D34             >
 536+ 6D34             >//              ______________________________________________________________________
 536+ 6D34             >//              Heap part
 536+ 6D34             >
 536+ 6D34             >
 536+ 6D34             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E69F             >
 536+ E69F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E69F             >Latest_Definition defl  Heap_Ptr
 536+ E69F             >
 536+ E69F             >                // dummy db directives used to calculate length of namec
 536+ E69F 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E6A3 2D 48 50 2D >
 536+ E6A7 50 41 47 45 >
 536+ E6AB             >len_NFA         defl    $ - temp_NFA
 536+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E69F             >
 536+ E69F 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E6A0 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E6A4 2D 48 50 2D >
 536+ E6A8 50 41 47 45 >
 536+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6AB C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6AC             >
 536+ E6AC 8C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 536+ E6AE             >
 536+ E6AE             >mirror_Ptr      defl    $
 536+ E6AE             >
 536+ E6AE 36 6D       >                dw      Dict_Ptr + 2        // xt
 536+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6B0             >
 536+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6B0             >
 536+ E6B0             >//              ______________________________________________________________________
 536+ E6B0             >//              Dictionary part
 536+ E6B0             >
 536+ E6B0             >                org     Dict_Ptr
 536+ 6D34             >
 536+ 6D34 AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 6D36             >
 536+ 6D36             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 6D36 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 6D39             >
 536+ 6D39             >
 536+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 6D39             >
 536+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 6D39 24 6D                        dw      HP_FETCH                // hp@
 538+ 6D3B A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 6D3F 0C 68
 539+ 6D41 9F 68                        dw      PLUS
 540+ 6D43 2F 6D                        dw      PAGE_WATERMARK
 541+ 6D45 2C 6C                        dw      GREATER
 542+ 6D47 F5 63                        dw      ZBRANCH
 543+ 6D49 12 00                        dw      Skip_Skip - $   // if
 544+ 6D4B 24 6D                        dw      HP_FETCH
 545+ 6D4D A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 6D51 1B 68
 546+ 6D53 B8 68 C6 68                  dw      ONE_PLUS, TWO_PLUS
 547+ 6D57 23 6B A0 69                  dw      HP, STORE
 548+ 6D5B              Skip_Skip:
 549+ 6D5B 4C 68                        dw      EXIT                    // ;
 550+ 6D5D              //  ______________________________________________________________________
 551+ 6D5D              //
 552+ 6D5D              // latest       -- nfa
 553+ 6D5D                              Colon_Def LATEST, "LATEST", is_normal
 553+ 6D5D             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 6D5D             >
 553+ 6D5D             >Dict_Ptr        defl    $
 553+ 6D5D             >
 553+ 6D5D             >//              ______________________________________________________________________
 553+ 6D5D             >//              Heap part
 553+ 6D5D             >
 553+ 6D5D             >
 553+ 6D5D             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6B0             >
 553+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6B0             >Latest_Definition defl  Heap_Ptr
 553+ E6B0             >
 553+ E6B0             >                // dummy db directives used to calculate length of namec
 553+ E6B0 4C 41 54 45 >                db      "LATEST"
 553+ E6B4 53 54       >
 553+ E6B6             >len_NFA         defl    $ - temp_NFA
 553+ E6B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6B0             >
 553+ E6B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6B1 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6B5 53 54       >
 553+ E6B7             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6B6 D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6B7             >
 553+ E6B7 9F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B9             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B9             >
 553+ E6B9             >mirror_Ptr      defl    $
 553+ E6B9             >
 553+ E6B9 5F 6D       >                dw      Dict_Ptr + 2        // xt
 553+ E6BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6BB             >
 553+ E6BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6BB             >
 553+ E6BB             >//              ______________________________________________________________________
 553+ E6BB             >//              Dictionary part
 553+ E6BB             >
 553+ E6BB             >                org     Dict_Ptr
 553+ 6D5D             >
 553+ 6D5D B9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6D5F             >
 553+ 6D5F             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6D5F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 6D62             >
 553+ 6D62             >
 553+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6D62             >
 553+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 6D62 53 6B                        dw      CURRENT                 // current
 555+ 6D64 96 69 96 69                  dw      FETCH, FETCH            // @ @
 556+ 6D68 F5 6C                        dw      FAR // Q TO HEAP
 557+ 6D6A 4C 68                        dw      EXIT                    // ;
 558+ 6D6C
 559+ 6D6C              //  ______________________________________________________________________
 560+ 6D6C              //
 561+ 6D6C              // >body        cfa -- pfa
 562+ 6D6C                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 6D6C             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 6D6C             >
 562+ 6D6C             >Dict_Ptr        defl    $
 562+ 6D6C             >
 562+ 6D6C             >//              ______________________________________________________________________
 562+ 6D6C             >//              Heap part
 562+ 6D6C             >
 562+ 6D6C             >
 562+ 6D6C             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6BB             >
 562+ E6BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6BB             >Latest_Definition defl  Heap_Ptr
 562+ E6BB             >
 562+ E6BB             >                // dummy db directives used to calculate length of namec
 562+ E6BB 3E 42 4F 44 >                db      ">BODY"
 562+ E6BF 59          >
 562+ E6C0             >len_NFA         defl    $ - temp_NFA
 562+ E6C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6BB             >
 562+ E6BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6BC 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6C0 59          >
 562+ E6C1             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6C0 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6C1             >
 562+ E6C1 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6C3             >Prev_Ptr        defl    Heap_Ptr
 562+ E6C3             >
 562+ E6C3             >mirror_Ptr      defl    $
 562+ E6C3             >
 562+ E6C3 6E 6D       >                dw      Dict_Ptr + 2        // xt
 562+ E6C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6C5             >
 562+ E6C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6C5             >
 562+ E6C5             >//              ______________________________________________________________________
 562+ E6C5             >//              Dictionary part
 562+ E6C5             >
 562+ E6C5             >                org     Dict_Ptr
 562+ 6D6C             >
 562+ 6D6C C3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 6D6E             >
 562+ 6D6E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 6D6E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 6D71             >
 562+ 6D71             >
 562+ 6D71             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 6D71             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 6D71             >
 562+ 6D71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 6D71 A3 6A 9F 68                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 6D75 4C 68                        dw      EXIT                    // ;
 565+ 6D77
 566+ 6D77              //  ______________________________________________________________________
 567+ 6D77              //
 568+ 6D77              // <name        cfa -- nfa
 569+ 6D77                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 6D77             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 6D77             >
 569+ 6D77             >Dict_Ptr        defl    $
 569+ 6D77             >
 569+ 6D77             >//              ______________________________________________________________________
 569+ 6D77             >//              Heap part
 569+ 6D77             >
 569+ 6D77             >
 569+ 6D77             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6C5             >
 569+ E6C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6C5             >Latest_Definition defl  Heap_Ptr
 569+ E6C5             >
 569+ E6C5             >                // dummy db directives used to calculate length of namec
 569+ E6C5 3C 4E 41 4D >                db      "<NAME"
 569+ E6C9 45          >
 569+ E6CA             >len_NFA         defl    $ - temp_NFA
 569+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6C5             >
 569+ E6C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6C6 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6CA 45          >
 569+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6CA C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6CB             >
 569+ E6CB BB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 569+ E6CD             >
 569+ E6CD             >mirror_Ptr      defl    $
 569+ E6CD             >
 569+ E6CD 79 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6CF             >
 569+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6CF             >
 569+ E6CF             >//              ______________________________________________________________________
 569+ E6CF             >//              Dictionary part
 569+ E6CF             >
 569+ E6CF             >                org     Dict_Ptr
 569+ 6D77             >
 569+ 6D77 CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D79             >
 569+ 6D79             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D79 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D7C             >
 569+ 6D7C             >
 569+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D7C             >
 569+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D7C D3 68                        dw      CELL_MINUS              // cell-
 571+ 6D7E 25 69 96 69                  dw      DUP, FETCH
 572+ 6D82 00 6D                        dw      QHEAPP
 573+ 6D84 F5 63                        dw      ZBRANCH
 574+ 6D86 08 00                        dw      ToName_Skip - $
 575+ 6D88 96 69 F5 6C                  dw          FETCH, FAR
 576+ 6D8C D3 68                        dw          CELL_MINUS
 577+ 6D8E              ToName_Skip:                                    // endif
 578+ 6D8E
 579+ 6D8E BF 68                        dw      ONE_SUBTRACT            // 1-
 580+ 6D90 AA 6A                        dw      NEG_ONE                 // -1
 581+ 6D92 8F 6C                        dw      TRAVERSE                // traverse
 582+ 6D94 4C 68                        dw      EXIT                    // ;
 583+ 6D96
 584+ 6D96              //  ______________________________________________________________________
 585+ 6D96              //
 586+ 6D96              // cfa          pfa -- cfa
 587+ 6D96                              Colon_Def CFA, "CFA", is_normal
 587+ 6D96             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 6D96             >
 587+ 6D96             >Dict_Ptr        defl    $
 587+ 6D96             >
 587+ 6D96             >//              ______________________________________________________________________
 587+ 6D96             >//              Heap part
 587+ 6D96             >
 587+ 6D96             >
 587+ 6D96             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6CF             >
 587+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6CF             >Latest_Definition defl  Heap_Ptr
 587+ E6CF             >
 587+ E6CF             >                // dummy db directives used to calculate length of namec
 587+ E6CF 43 46 41    >                db      "CFA"
 587+ E6D2             >len_NFA         defl    $ - temp_NFA
 587+ E6D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6CF             >
 587+ E6CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6D0 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6D3             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6D2 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6D3             >
 587+ E6D3 C5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6D5             >Prev_Ptr        defl    Heap_Ptr
 587+ E6D5             >
 587+ E6D5             >mirror_Ptr      defl    $
 587+ E6D5             >
 587+ E6D5 98 6D       >                dw      Dict_Ptr + 2        // xt
 587+ E6D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6D7             >
 587+ E6D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6D7             >
 587+ E6D7             >//              ______________________________________________________________________
 587+ E6D7             >//              Dictionary part
 587+ E6D7             >
 587+ E6D7             >                org     Dict_Ptr
 587+ 6D96             >
 587+ 6D96 D5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 6D98             >
 587+ 6D98             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6D98 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 6D9B             >
 587+ 6D9B             >
 587+ 6D9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6D9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6D9B             >
 587+ 6D9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6D9B A3 6A F2 6B                  dw      THREE, SUBTRACT         // 3 -
 589+ 6D9F 4C 68                        dw      EXIT                    // ;
 590+ 6DA1
 591+ 6DA1              //  ______________________________________________________________________
 592+ 6DA1              //
 593+ 6DA1              // nfa          pfa -- nfa
 594+ 6DA1                              Colon_Def NFA, "NFA", is_normal
 594+ 6DA1             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 6DA1             >
 594+ 6DA1             >Dict_Ptr        defl    $
 594+ 6DA1             >
 594+ 6DA1             >//              ______________________________________________________________________
 594+ 6DA1             >//              Heap part
 594+ 6DA1             >
 594+ 6DA1             >
 594+ 6DA1             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6D7             >
 594+ E6D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6D7             >Latest_Definition defl  Heap_Ptr
 594+ E6D7             >
 594+ E6D7             >                // dummy db directives used to calculate length of namec
 594+ E6D7 4E 46 41    >                db      "NFA"
 594+ E6DA             >len_NFA         defl    $ - temp_NFA
 594+ E6DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6D7             >
 594+ E6D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6D8 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6DB             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6DA C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6DB             >
 594+ E6DB CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6DD             >Prev_Ptr        defl    Heap_Ptr
 594+ E6DD             >
 594+ E6DD             >mirror_Ptr      defl    $
 594+ E6DD             >
 594+ E6DD A3 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6DF             >
 594+ E6DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6DF             >
 594+ E6DF             >//              ______________________________________________________________________
 594+ E6DF             >//              Dictionary part
 594+ E6DF             >
 594+ E6DF             >                org     Dict_Ptr
 594+ 6DA1             >
 594+ 6DA1 DD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DA3             >
 594+ 6DA3             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DA6             >
 594+ 6DA6             >
 594+ 6DA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DA6             >
 594+ 6DA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DA6 98 6D                        dw      CFA                     // cfa
 596+ 6DA8 79 6D                        dw      TO_NAME                 // traverse
 597+ 6DAA 4C 68                        dw      EXIT                    // ;
 598+ 6DAC
 599+ 6DAC              //  ______________________________________________________________________
 600+ 6DAC              //
 601+ 6DAC              // lfa          pfa -- lfa
 602+ 6DAC                              Colon_Def LFA, "LFA", is_normal
 602+ 6DAC             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 6DAC             >
 602+ 6DAC             >Dict_Ptr        defl    $
 602+ 6DAC             >
 602+ 6DAC             >//              ______________________________________________________________________
 602+ 6DAC             >//              Heap part
 602+ 6DAC             >
 602+ 6DAC             >
 602+ 6DAC             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6DF             >
 602+ E6DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6DF             >Latest_Definition defl  Heap_Ptr
 602+ E6DF             >
 602+ E6DF             >                // dummy db directives used to calculate length of namec
 602+ E6DF 4C 46 41    >                db      "LFA"
 602+ E6E2             >len_NFA         defl    $ - temp_NFA
 602+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6DF             >
 602+ E6DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6E0 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6E2 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6E3             >
 602+ E6E3 D7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 602+ E6E5             >
 602+ E6E5             >mirror_Ptr      defl    $
 602+ E6E5             >
 602+ E6E5 AE 6D       >                dw      Dict_Ptr + 2        // xt
 602+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6E7             >
 602+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6E7             >
 602+ E6E7             >//              ______________________________________________________________________
 602+ E6E7             >//              Dictionary part
 602+ E6E7             >
 602+ E6E7             >                org     Dict_Ptr
 602+ 6DAC             >
 602+ 6DAC E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 6DAE             >
 602+ 6DAE             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 6DAE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 6DB1             >
 602+ 6DB1             >
 602+ 6DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 6DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 6DB1             >
 602+ 6DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 6DB1 A3 6D                        dw      NFA                     // nfa
 604+ 6DB3 95 6A                        dw      ONE                     // 1
 605+ 6DB5 8F 6C                        dw      TRAVERSE                // traverse
 606+ 6DB7 B8 68                        dw      ONE_PLUS                // 1+
 607+ 6DB9 4C 68                        dw      EXIT                    // ;
 608+ 6DBB
 609+ 6DBB              //  ______________________________________________________________________
 610+ 6DBB              //
 611+ 6DBB              // pfa          nfa -- pfa
 612+ 6DBB                              Colon_Def PFA, "PFA", is_normal
 612+ 6DBB             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 6DBB             >
 612+ 6DBB             >Dict_Ptr        defl    $
 612+ 6DBB             >
 612+ 6DBB             >//              ______________________________________________________________________
 612+ 6DBB             >//              Heap part
 612+ 6DBB             >
 612+ 6DBB             >
 612+ 6DBB             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6E7             >
 612+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6E7             >Latest_Definition defl  Heap_Ptr
 612+ E6E7             >
 612+ E6E7             >                // dummy db directives used to calculate length of namec
 612+ E6E7 50 46 41    >                db      "PFA"
 612+ E6EA             >len_NFA         defl    $ - temp_NFA
 612+ E6EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6E7             >
 612+ E6E7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6E8 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6EB             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6EA C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6EB             >
 612+ E6EB DF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6ED             >Prev_Ptr        defl    Heap_Ptr
 612+ E6ED             >
 612+ E6ED             >mirror_Ptr      defl    $
 612+ E6ED             >
 612+ E6ED BD 6D       >                dw      Dict_Ptr + 2        // xt
 612+ E6EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6EF             >
 612+ E6EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6EF             >
 612+ E6EF             >//              ______________________________________________________________________
 612+ E6EF             >//              Dictionary part
 612+ E6EF             >
 612+ E6EF             >                org     Dict_Ptr
 612+ 6DBB             >
 612+ 6DBB ED 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 6DBD             >
 612+ 6DBD             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 6DBD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 6DC0             >
 612+ 6DC0             >
 612+ 6DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 6DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 6DC0             >
 612+ 6DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 6DC0 13 6D                        dw      QTOHEAP
 614+ 6DC2 95 6A                        dw      ONE                     // 1
 615+ 6DC4 8F 6C                        dw      TRAVERSE                // traverse
 616+ 6DC6 B8 68                        dw      ONE_PLUS                // 1+
 617+ 6DC8 CE 68                        dw      CELL_PLUS               // cell+
 618+ 6DCA E4 6C                        dw      QMMU7
 619+ 6DCC F5 63                        dw      ZBRANCH
 620+ 6DCE 0E 00                        dw      PFA_Skip - $
 621+ 6DD0 AC 6C                        dw          MMU7_FETCH
 622+ 6DD2 95 6A F2 6B                  dw          ONE, SUBTRACT
 623+ 6DD6 F5 63                        dw          ZBRANCH
 624+ 6DD8 04 00                        dw          PFA_Skip - $
 625+ 6DDA 96 69                        dw              FETCH
 626+ 6DDC              PFA_Skip:                                    // endif
 627+ 6DDC 6E 6D                        dw      TO_BODY                 // >body
 628+ 6DDE 4C 68                        dw      EXIT                    // ;
 629+ 6DE0
 630+ 6DE0              //  ______________________________________________________________________
 631+ 6DE0              //
 632+ 6DE0              // !csp         --
 633+ 6DE0              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 6DE0                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 6DE0             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 6DE0             >
 634+ 6DE0             >Dict_Ptr        defl    $
 634+ 6DE0             >
 634+ 6DE0             >//              ______________________________________________________________________
 634+ 6DE0             >//              Heap part
 634+ 6DE0             >
 634+ 6DE0             >
 634+ 6DE0             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6EF             >
 634+ E6EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6EF             >Latest_Definition defl  Heap_Ptr
 634+ E6EF             >
 634+ E6EF             >                // dummy db directives used to calculate length of namec
 634+ E6EF 21 43 53 50 >                db      "!CSP"
 634+ E6F3             >len_NFA         defl    $ - temp_NFA
 634+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6EF             >
 634+ E6EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6F0 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6F3 D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6F4             >
 634+ E6F4 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 634+ E6F6             >
 634+ E6F6             >mirror_Ptr      defl    $
 634+ E6F6             >
 634+ E6F6 E2 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6F8             >
 634+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6F8             >
 634+ E6F8             >//              ______________________________________________________________________
 634+ E6F8             >//              Dictionary part
 634+ E6F8             >
 634+ E6F8             >                org     Dict_Ptr
 634+ 6DE0             >
 634+ 6DE0 F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6DE2             >
 634+ 6DE2             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6DE2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6DE5             >
 634+ 6DE5             >
 634+ 6DE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6DE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6DE5             >
 634+ 6DE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6DE5 33 68                        dw      SPFETCH                 // sp@
 636+ 6DE7 71 6B A0 69                  dw      CSP, STORE              // csp !
 637+ 6DEB 4C 68                        dw      EXIT                    // ;
 638+ 6DED
 639+ 6DED              //  ______________________________________________________________________
 640+ 6DED              //
 641+ 6DED              // ?error       f n --
 642+ 6DED              // rase error n if flag f it true
 643+ 6DED                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 6DED             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 6DED             >
 643+ 6DED             >Dict_Ptr        defl    $
 643+ 6DED             >
 643+ 6DED             >//              ______________________________________________________________________
 643+ 6DED             >//              Heap part
 643+ 6DED             >
 643+ 6DED             >
 643+ 6DED             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6F8             >
 643+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6F8             >Latest_Definition defl  Heap_Ptr
 643+ E6F8             >
 643+ E6F8             >                // dummy db directives used to calculate length of namec
 643+ E6F8 3F 45 52 52 >                db      "?ERROR"
 643+ E6FC 4F 52       >
 643+ E6FE             >len_NFA         defl    $ - temp_NFA
 643+ E6FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6F8             >
 643+ E6F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F9 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6FD 4F 52       >
 643+ E6FF             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6FE D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6FF             >
 643+ E6FF EF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E701             >Prev_Ptr        defl    Heap_Ptr
 643+ E701             >
 643+ E701             >mirror_Ptr      defl    $
 643+ E701             >
 643+ E701 EF 6D       >                dw      Dict_Ptr + 2        // xt
 643+ E703             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E703             >
 643+ E703             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E703             >
 643+ E703             >//              ______________________________________________________________________
 643+ E703             >//              Dictionary part
 643+ E703             >
 643+ E703             >                org     Dict_Ptr
 643+ 6DED             >
 643+ 6DED 01 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 6DEF             >
 643+ 6DEF             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 6DEF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 6DF2             >
 643+ 6DF2             >
 643+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 6DF2             >
 643+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 6DF2 1E 69                        dw      SWAP                    // swap
 645+ 6DF4                                                              // if
 646+ 6DF4 F5 63                        dw      ZBRANCH
 647+ 6DF6 08 00                        dw      QError_Else - $
 648+ 6DF8 27 73                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 6DFA                                                              // else
 650+ 6DFA E8 63                        dw      BRANCH
 651+ 6DFC 04 00                        dw      QError_Endif - $
 652+ 6DFE              QError_Else:
 653+ 6DFE 0A 69                        dw          DROP                //      drop
 654+ 6E00              QError_Endif:                                   // endif
 655+ 6E00 4C 68                        dw      EXIT                    // ;
 656+ 6E02
 657+ 6E02              //  ______________________________________________________________________
 658+ 6E02              //
 659+ 6E02              // ?comp       --
 660+ 6E02              // raise msg #17 if not compiling
 661+ 6E02                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 6E02             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 6E02             >
 661+ 6E02             >Dict_Ptr        defl    $
 661+ 6E02             >
 661+ 6E02             >//              ______________________________________________________________________
 661+ 6E02             >//              Heap part
 661+ 6E02             >
 661+ 6E02             >
 661+ 6E02             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E703             >
 661+ E703             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E703             >Latest_Definition defl  Heap_Ptr
 661+ E703             >
 661+ E703             >                // dummy db directives used to calculate length of namec
 661+ E703 3F 43 4F 4D >                db      "?COMP"
 661+ E707 50          >
 661+ E708             >len_NFA         defl    $ - temp_NFA
 661+ E708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E703             >
 661+ E703 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E704 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E708 50          >
 661+ E709             >                org     $-1                 // alter last byte of Name just above to set
 661+ E708 D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E709             >
 661+ E709 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E70B             >Prev_Ptr        defl    Heap_Ptr
 661+ E70B             >
 661+ E70B             >mirror_Ptr      defl    $
 661+ E70B             >
 661+ E70B 04 6E       >                dw      Dict_Ptr + 2        // xt
 661+ E70D             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E70D             >
 661+ E70D             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E70D             >
 661+ E70D             >//              ______________________________________________________________________
 661+ E70D             >//              Dictionary part
 661+ E70D             >
 661+ E70D             >                org     Dict_Ptr
 661+ 6E02             >
 661+ 6E02 0B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 6E04             >
 661+ 6E04             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 6E04 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 6E07             >
 661+ 6E07             >
 661+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 6E07             >
 661+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 6E07 59 6B 96 69                  dw      STATE, FETCH            // state @
 663+ 6E0B 71 68                        dw      ZEQUAL                  // 0=
 664+ 6E0D A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 6E11 EF 6D                        dw      QERROR                  // ?error
 666+ 6E13 4C 68                        dw      EXIT                    // ;
 667+ 6E15
 668+ 6E15              //  ______________________________________________________________________
 669+ 6E15              //
 670+ 6E15              // ?exec       --
 671+ 6E15              // raise msg #18 if compiling
 672+ 6E15                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 6E15             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 6E15             >
 672+ 6E15             >Dict_Ptr        defl    $
 672+ 6E15             >
 672+ 6E15             >//              ______________________________________________________________________
 672+ 6E15             >//              Heap part
 672+ 6E15             >
 672+ 6E15             >
 672+ 6E15             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E70D             >
 672+ E70D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E70D             >Latest_Definition defl  Heap_Ptr
 672+ E70D             >
 672+ E70D             >                // dummy db directives used to calculate length of namec
 672+ E70D 3F 45 58 45 >                db      "?EXEC"
 672+ E711 43          >
 672+ E712             >len_NFA         defl    $ - temp_NFA
 672+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E70D             >
 672+ E70D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E70E 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E712 43          >
 672+ E713             >                org     $-1                 // alter last byte of Name just above to set
 672+ E712 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E713             >
 672+ E713 03 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E715             >Prev_Ptr        defl    Heap_Ptr
 672+ E715             >
 672+ E715             >mirror_Ptr      defl    $
 672+ E715             >
 672+ E715 17 6E       >                dw      Dict_Ptr + 2        // xt
 672+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E717             >
 672+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E717             >
 672+ E717             >//              ______________________________________________________________________
 672+ E717             >//              Dictionary part
 672+ E717             >
 672+ E717             >                org     Dict_Ptr
 672+ 6E15             >
 672+ 6E15 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 6E17             >
 672+ 6E17             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 6E17 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 6E1A             >
 672+ 6E1A             >
 672+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 6E1A             >
 672+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 6E1A 59 6B 96 69                  dw      STATE, FETCH            // state @
 674+ 6E1E A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 6E22 EF 6D                        dw      QERROR                  // ?error
 676+ 6E24 4C 68                        dw      EXIT                    // ;
 677+ 6E26
 678+ 6E26              //  ______________________________________________________________________
 679+ 6E26              //
 680+ 6E26              // ?pairs       n1 n2 --
 681+ 6E26              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 6E26                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 6E26             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 6E26             >
 682+ 6E26             >Dict_Ptr        defl    $
 682+ 6E26             >
 682+ 6E26             >//              ______________________________________________________________________
 682+ 6E26             >//              Heap part
 682+ 6E26             >
 682+ 6E26             >
 682+ 6E26             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E717             >
 682+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E717             >Latest_Definition defl  Heap_Ptr
 682+ E717             >
 682+ E717             >                // dummy db directives used to calculate length of namec
 682+ E717 3F 50 41 49 >                db      "?PAIRS"
 682+ E71B 52 53       >
 682+ E71D             >len_NFA         defl    $ - temp_NFA
 682+ E71D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E717             >
 682+ E717 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E718 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E71C 52 53       >
 682+ E71E             >                org     $-1                 // alter last byte of Name just above to set
 682+ E71D D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E71E             >
 682+ E71E 0D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E720             >Prev_Ptr        defl    Heap_Ptr
 682+ E720             >
 682+ E720             >mirror_Ptr      defl    $
 682+ E720             >
 682+ E720 28 6E       >                dw      Dict_Ptr + 2        // xt
 682+ E722             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E722             >
 682+ E722             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E722             >
 682+ E722             >//              ______________________________________________________________________
 682+ E722             >//              Dictionary part
 682+ E722             >
 682+ E722             >                org     Dict_Ptr
 682+ 6E26             >
 682+ 6E26 20 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 6E28             >
 682+ 6E28             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 6E28 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 6E2B             >
 682+ 6E2B             >
 682+ 6E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 6E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 6E2B             >
 682+ 6E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 6E2B F2 6B                        dw      SUBTRACT                // -
 684+ 6E2D A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 6E31 EF 6D                        dw      QERROR                  // ?error
 686+ 6E33 4C 68                        dw      EXIT                    // ;
 687+ 6E35
 688+ 6E35              //  ______________________________________________________________________
 689+ 6E35              //
 690+ 6E35              // ?csp       --
 691+ 6E35              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 6E35              // Compiler relies on that for  syntax checking of structures
 693+ 6E35                              Colon_Def QCSP, "?CSP", is_normal
 693+ 6E35             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 6E35             >
 693+ 6E35             >Dict_Ptr        defl    $
 693+ 6E35             >
 693+ 6E35             >//              ______________________________________________________________________
 693+ 6E35             >//              Heap part
 693+ 6E35             >
 693+ 6E35             >
 693+ 6E35             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E722             >
 693+ E722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E722             >Latest_Definition defl  Heap_Ptr
 693+ E722             >
 693+ E722             >                // dummy db directives used to calculate length of namec
 693+ E722 3F 43 53 50 >                db      "?CSP"
 693+ E726             >len_NFA         defl    $ - temp_NFA
 693+ E726             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E722             >
 693+ E722 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E723 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E727             >                org     $-1                 // alter last byte of Name just above to set
 693+ E726 D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E727             >
 693+ E727 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E729             >Prev_Ptr        defl    Heap_Ptr
 693+ E729             >
 693+ E729             >mirror_Ptr      defl    $
 693+ E729             >
 693+ E729 37 6E       >                dw      Dict_Ptr + 2        // xt
 693+ E72B             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E72B             >
 693+ E72B             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E72B             >
 693+ E72B             >//              ______________________________________________________________________
 693+ E72B             >//              Dictionary part
 693+ E72B             >
 693+ E72B             >                org     Dict_Ptr
 693+ 6E35             >
 693+ 6E35 29 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 6E37             >
 693+ 6E37             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6E37 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 6E3A             >
 693+ 6E3A             >
 693+ 6E3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6E3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6E3A             >
 693+ 6E3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6E3A 33 68                        dw      SPFETCH                 // sp@
 695+ 6E3C 71 6B 96 69                  dw      CSP, FETCH              // csp @
 696+ 6E40 F2 6B                        dw      SUBTRACT                // -
 697+ 6E42 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 6E46 EF 6D                        dw      QERROR                  // ?error
 699+ 6E48 4C 68                        dw      EXIT                    // ;
 700+ 6E4A
 701+ 6E4A              //  ______________________________________________________________________
 702+ 6E4A              //
 703+ 6E4A              // ?loading      --
 704+ 6E4A              // raise msg #22 if not loading
 705+ 6E4A                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 6E4A             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 6E4A             >
 705+ 6E4A             >Dict_Ptr        defl    $
 705+ 6E4A             >
 705+ 6E4A             >//              ______________________________________________________________________
 705+ 6E4A             >//              Heap part
 705+ 6E4A             >
 705+ 6E4A             >
 705+ 6E4A             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E72B             >
 705+ E72B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E72B             >Latest_Definition defl  Heap_Ptr
 705+ E72B             >
 705+ E72B             >                // dummy db directives used to calculate length of namec
 705+ E72B 3F 4C 4F 41 >                db      "?LOADING"
 705+ E72F 44 49 4E 47 >
 705+ E733             >len_NFA         defl    $ - temp_NFA
 705+ E733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E72B             >
 705+ E72B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E72C 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E730 44 49 4E 47 >
 705+ E734             >                org     $-1                 // alter last byte of Name just above to set
 705+ E733 C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E734             >
 705+ E734 22 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E736             >Prev_Ptr        defl    Heap_Ptr
 705+ E736             >
 705+ E736             >mirror_Ptr      defl    $
 705+ E736             >
 705+ E736 4C 6E       >                dw      Dict_Ptr + 2        // xt
 705+ E738             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E738             >
 705+ E738             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E738             >
 705+ E738             >//              ______________________________________________________________________
 705+ E738             >//              Dictionary part
 705+ E738             >
 705+ E738             >                org     Dict_Ptr
 705+ 6E4A             >
 705+ 6E4A 36 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 6E4C             >
 705+ 6E4C             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 6E4C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 6E4F             >
 705+ 6E4F             >
 705+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 6E4F             >
 705+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 6E4F 2F 6B 96 69                  dw      BLK, FETCH              // blk @
 707+ 6E53 71 68                        dw      ZEQUAL                  // 0=
 708+ 6E55 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 6E59 EF 6D                        dw      QERROR                  // ?error
 710+ 6E5B 4C 68                        dw      EXIT                    // ;
 711+ 6E5D
 712+ 6E5D              //  ______________________________________________________________________
 713+ 6E5D              //
 714+ 6E5D              // compile      --
 715+ 6E5D              // compiles the following word
 716+ 6E5D                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 6E5D             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 6E5D             >
 716+ 6E5D             >Dict_Ptr        defl    $
 716+ 6E5D             >
 716+ 6E5D             >//              ______________________________________________________________________
 716+ 6E5D             >//              Heap part
 716+ 6E5D             >
 716+ 6E5D             >
 716+ 6E5D             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E738             >
 716+ E738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E738             >Latest_Definition defl  Heap_Ptr
 716+ E738             >
 716+ E738             >                // dummy db directives used to calculate length of namec
 716+ E738 43 4F 4D 50 >                db      "COMPILE"
 716+ E73C 49 4C 45    >
 716+ E73F             >len_NFA         defl    $ - temp_NFA
 716+ E73F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E738             >
 716+ E738 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E739 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E73D 49 4C 45    >
 716+ E740             >                org     $-1                 // alter last byte of Name just above to set
 716+ E73F C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E740             >
 716+ E740 2B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E742             >Prev_Ptr        defl    Heap_Ptr
 716+ E742             >
 716+ E742             >mirror_Ptr      defl    $
 716+ E742             >
 716+ E742 5F 6E       >                dw      Dict_Ptr + 2        // xt
 716+ E744             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E744             >
 716+ E744             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E744             >
 716+ E744             >//              ______________________________________________________________________
 716+ E744             >//              Dictionary part
 716+ E744             >
 716+ E744             >                org     Dict_Ptr
 716+ 6E5D             >
 716+ 6E5D 42 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 6E5F             >
 716+ 6E5F             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 6E5F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 6E62             >
 716+ 6E62             >
 716+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 6E62             >
 716+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 6E62 04 6E                        dw      QCOMP                   // ?comp
 718+ 6E64 61 68                        dw      R_TO                    // r>
 719+ 6E66 25 69 CE 68                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 6E6A 56 68                        dw      TO_R                    // >r
 721+ 6E6C 96 69 C9 6B                  dw      FETCH, COMMA            // @ ,
 722+ 6E70 4C 68                        dw      EXIT                    // ;
 723+ 6E72
 724+ 6E72              //  ______________________________________________________________________
 725+ 6E72              //
 726+ 6E72              // compile,     --
 727+ 6E72              // compiles the following word
 728+ 6E72                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 6E72             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 6E72             >
 728+ 6E72             >Dict_Ptr        defl    $
 728+ 6E72             >
 728+ 6E72             >//              ______________________________________________________________________
 728+ 6E72             >//              Heap part
 728+ 6E72             >
 728+ 6E72             >
 728+ 6E72             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E744             >
 728+ E744             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E744             >Latest_Definition defl  Heap_Ptr
 728+ E744             >
 728+ E744             >                // dummy db directives used to calculate length of namec
 728+ E744 43 4F 4D 50 >                db      "COMPILE,"
 728+ E748 49 4C 45 2C >
 728+ E74C             >len_NFA         defl    $ - temp_NFA
 728+ E74C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E744             >
 728+ E744 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E745 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E749 49 4C 45 2C >
 728+ E74D             >                org     $-1                 // alter last byte of Name just above to set
 728+ E74C AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E74D             >
 728+ E74D 38 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E74F             >Prev_Ptr        defl    Heap_Ptr
 728+ E74F             >
 728+ E74F             >mirror_Ptr      defl    $
 728+ E74F             >
 728+ E74F 74 6E       >                dw      Dict_Ptr + 2        // xt
 728+ E751             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E751             >
 728+ E751             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E751             >
 728+ E751             >//              ______________________________________________________________________
 728+ E751             >//              Dictionary part
 728+ E751             >
 728+ E751             >                org     Dict_Ptr
 728+ 6E72             >
 728+ 6E72 4F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 6E74             >
 728+ 6E74             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 6E74 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 6E77             >
 728+ 6E77             >
 728+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 6E77             >
 728+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 6E77 04 6E                        dw      QCOMP                   // ?comp
 730+ 6E79 C9 6B                        dw      COMMA                   // ,
 731+ 6E7B 4C 68                        dw      EXIT                    // ;
 732+ 6E7D
 733+ 6E7D              //  ______________________________________________________________________
 734+ 6E7D              //
 735+ 6E7D              // [            --
 736+ 6E7D              // stop compilation
 737+ 6E7D                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 6E7D             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 6E7D             >
 737+ 6E7D             >Dict_Ptr        defl    $
 737+ 6E7D             >
 737+ 6E7D             >//              ______________________________________________________________________
 737+ 6E7D             >//              Heap part
 737+ 6E7D             >
 737+ 6E7D             >
 737+ 6E7D             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E751             >
 737+ E751             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E751             >Latest_Definition defl  Heap_Ptr
 737+ E751             >
 737+ E751             >                // dummy db directives used to calculate length of namec
 737+ E751 5B          >                db      "["
 737+ E752             >len_NFA         defl    $ - temp_NFA
 737+ E752             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E751             >
 737+ E751 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E752 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E753             >                org     $-1                 // alter last byte of Name just above to set
 737+ E752 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E753             >
 737+ E753 44 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E755             >Prev_Ptr        defl    Heap_Ptr
 737+ E755             >
 737+ E755             >mirror_Ptr      defl    $
 737+ E755             >
 737+ E755 7F 6E       >                dw      Dict_Ptr + 2        // xt
 737+ E757             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E757             >
 737+ E757             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E757             >
 737+ E757             >//              ______________________________________________________________________
 737+ E757             >//              Dictionary part
 737+ E757             >
 737+ E757             >                org     Dict_Ptr
 737+ 6E7D             >
 737+ 6E7D 55 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 6E7F             >
 737+ 6E7F             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 6E7F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 6E82             >
 737+ 6E82             >
 737+ 6E82             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 6E82             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 6E82             >
 737+ 6E82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 6E82 8E 6A                        dw      ZERO                    // 0
 739+ 6E84 59 6B A0 69                  dw      STATE, STORE            // state !
 740+ 6E88 4C 68                        dw      EXIT                    // ; immediate
 741+ 6E8A
 742+ 6E8A              //  ______________________________________________________________________
 743+ 6E8A              //
 744+ 6E8A              // ]            --
 745+ 6E8A              // start compilation
 746+ 6E8A                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 6E8A             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 6E8A             >
 746+ 6E8A             >Dict_Ptr        defl    $
 746+ 6E8A             >
 746+ 6E8A             >//              ______________________________________________________________________
 746+ 6E8A             >//              Heap part
 746+ 6E8A             >
 746+ 6E8A             >
 746+ 6E8A             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E757             >
 746+ E757             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E757             >Latest_Definition defl  Heap_Ptr
 746+ E757             >
 746+ E757             >                // dummy db directives used to calculate length of namec
 746+ E757 5D          >                db      "]"
 746+ E758             >len_NFA         defl    $ - temp_NFA
 746+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E757             >
 746+ E757 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E758 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E759             >                org     $-1                 // alter last byte of Name just above to set
 746+ E758 DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E759             >
 746+ E759 51 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E75B             >Prev_Ptr        defl    Heap_Ptr
 746+ E75B             >
 746+ E75B             >mirror_Ptr      defl    $
 746+ E75B             >
 746+ E75B 8C 6E       >                dw      Dict_Ptr + 2        // xt
 746+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E75D             >
 746+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E75D             >
 746+ E75D             >//              ______________________________________________________________________
 746+ E75D             >//              Dictionary part
 746+ E75D             >
 746+ E75D             >                org     Dict_Ptr
 746+ 6E8A             >
 746+ 6E8A 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 6E8C             >
 746+ 6E8C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 6E8C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 6E8F             >
 746+ 6E8F             >
 746+ 6E8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 6E8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 6E8F             >
 746+ 6E8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 6E8F A3 63 C0 00                  dw      LIT, $C0                // 192
 748+ 6E93 59 6B A0 69                  dw      STATE, STORE            // state !
 749+ 6E97 4C 68                        dw      EXIT                    // ;
 750+ 6E99
 751+ 6E99              //  ______________________________________________________________________
 752+ 6E99              //
 753+ 6E99              // smudge       --
 754+ 6E99              // toggle smudge bit of latest definition
 755+ 6E99                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 6E99             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 6E99             >
 755+ 6E99             >Dict_Ptr        defl    $
 755+ 6E99             >
 755+ 6E99             >//              ______________________________________________________________________
 755+ 6E99             >//              Heap part
 755+ 6E99             >
 755+ 6E99             >
 755+ 6E99             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E75D             >
 755+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E75D             >Latest_Definition defl  Heap_Ptr
 755+ E75D             >
 755+ E75D             >                // dummy db directives used to calculate length of namec
 755+ E75D 53 4D 55 44 >                db      "SMUDGE"
 755+ E761 47 45       >
 755+ E763             >len_NFA         defl    $ - temp_NFA
 755+ E763             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E75D             >
 755+ E75D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E75E 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E762 47 45       >
 755+ E764             >                org     $-1                 // alter last byte of Name just above to set
 755+ E763 C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E764             >
 755+ E764 57 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E766             >Prev_Ptr        defl    Heap_Ptr
 755+ E766             >
 755+ E766             >mirror_Ptr      defl    $
 755+ E766             >
 755+ E766 9B 6E       >                dw      Dict_Ptr + 2        // xt
 755+ E768             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E768             >
 755+ E768             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E768             >
 755+ E768             >//              ______________________________________________________________________
 755+ E768             >//              Dictionary part
 755+ E768             >
 755+ E768             >                org     Dict_Ptr
 755+ 6E99             >
 755+ 6E99 66 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 6E9B             >
 755+ 6E9B             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 6E9B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 6E9E             >
 755+ 6E9E             >
 755+ 6E9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 6E9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 6E9E             >
 755+ 6E9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 6E9E 5F 6D                        dw      LATEST                  // latest
 757+ 6EA0 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 6EA4 8D 69                        dw      TOGGLE                  // toggle
 759+ 6EA6 4C 68                        dw      EXIT                    // ;
 760+ 6EA8
 761+ 6EA8              //  ______________________________________________________________________
 762+ 6EA8              //
 763+ 6EA8              // immediate    --
 764+ 6EA8              // make immediate the latest definition
 765+ 6EA8                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 6EA8             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 6EA8             >
 765+ 6EA8             >Dict_Ptr        defl    $
 765+ 6EA8             >
 765+ 6EA8             >//              ______________________________________________________________________
 765+ 6EA8             >//              Heap part
 765+ 6EA8             >
 765+ 6EA8             >
 765+ 6EA8             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E768             >
 765+ E768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E768             >Latest_Definition defl  Heap_Ptr
 765+ E768             >
 765+ E768             >                // dummy db directives used to calculate length of namec
 765+ E768 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E76C 44 49 41 54 >
 765+ E770 45          >
 765+ E771             >len_NFA         defl    $ - temp_NFA
 765+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E768             >
 765+ E768 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E769 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E76D 44 49 41 54 >
 765+ E771 45          >
 765+ E772             >                org     $-1                 // alter last byte of Name just above to set
 765+ E771 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E772             >
 765+ E772 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E774             >Prev_Ptr        defl    Heap_Ptr
 765+ E774             >
 765+ E774             >mirror_Ptr      defl    $
 765+ E774             >
 765+ E774 AA 6E       >                dw      Dict_Ptr + 2        // xt
 765+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E776             >
 765+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E776             >
 765+ E776             >//              ______________________________________________________________________
 765+ E776             >//              Dictionary part
 765+ E776             >
 765+ E776             >                org     Dict_Ptr
 765+ 6EA8             >
 765+ 6EA8 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 6EAA             >
 765+ 6EAA             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 6EAA CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 6EAD             >
 765+ 6EAD             >
 765+ 6EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 6EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 6EAD             >
 765+ 6EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 6EAD 5F 6D                        dw      LATEST                  // latest
 767+ 6EAF A3 63 40 00                  dw      LIT, $40                // 64
 768+ 6EB3 8D 69                        dw      TOGGLE                  // toggle
 769+ 6EB5 4C 68                        dw      EXIT                    // ;
 770+ 6EB7
 771+ 6EB7              //  ______________________________________________________________________
 772+ 6EB7              //
 773+ 6EB7              // hex          --
 774+ 6EB7              // change numeration base
 775+ 6EB7                              Colon_Def HEX, "HEX", is_normal
 775+ 6EB7             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 6EB7             >
 775+ 6EB7             >Dict_Ptr        defl    $
 775+ 6EB7             >
 775+ 6EB7             >//              ______________________________________________________________________
 775+ 6EB7             >//              Heap part
 775+ 6EB7             >
 775+ 6EB7             >
 775+ 6EB7             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E776             >
 775+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E776             >Latest_Definition defl  Heap_Ptr
 775+ E776             >
 775+ E776             >                // dummy db directives used to calculate length of namec
 775+ E776 48 45 58    >                db      "HEX"
 775+ E779             >len_NFA         defl    $ - temp_NFA
 775+ E779             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E776             >
 775+ E776 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E777 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E77A             >                org     $-1                 // alter last byte of Name just above to set
 775+ E779 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E77A             >
 775+ E77A 68 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E77C             >Prev_Ptr        defl    Heap_Ptr
 775+ E77C             >
 775+ E77C             >mirror_Ptr      defl    $
 775+ E77C             >
 775+ E77C B9 6E       >                dw      Dict_Ptr + 2        // xt
 775+ E77E             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E77E             >
 775+ E77E             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E77E             >
 775+ E77E             >//              ______________________________________________________________________
 775+ E77E             >//              Dictionary part
 775+ E77E             >
 775+ E77E             >                org     Dict_Ptr
 775+ 6EB7             >
 775+ 6EB7 7C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 6EB9             >
 775+ 6EB9             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 6EB9 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 6EBC             >
 775+ 6EBC             >
 775+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 6EBC             >
 775+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 6EBC A3 63 10 00                  dw      LIT, 16                 // 16
 777+ 6EC0 5F 6B A0 69                  dw      BASE, STORE             // base !
 778+ 6EC4 4C 68                        dw      EXIT                    // ;
 779+ 6EC6
 780+ 6EC6              //  ______________________________________________________________________
 781+ 6EC6              //
 782+ 6EC6              // decimal      --
 783+ 6EC6              // change numeration base
 784+ 6EC6                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 6EC6             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 6EC6             >
 784+ 6EC6             >Dict_Ptr        defl    $
 784+ 6EC6             >
 784+ 6EC6             >//              ______________________________________________________________________
 784+ 6EC6             >//              Heap part
 784+ 6EC6             >
 784+ 6EC6             >
 784+ 6EC6             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E77E             >
 784+ E77E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E77E             >Latest_Definition defl  Heap_Ptr
 784+ E77E             >
 784+ E77E             >                // dummy db directives used to calculate length of namec
 784+ E77E 44 45 43 49 >                db      "DECIMAL"
 784+ E782 4D 41 4C    >
 784+ E785             >len_NFA         defl    $ - temp_NFA
 784+ E785             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E77E             >
 784+ E77E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E77F 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E783 4D 41 4C    >
 784+ E786             >                org     $-1                 // alter last byte of Name just above to set
 784+ E785 CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E786             >
 784+ E786 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E788             >Prev_Ptr        defl    Heap_Ptr
 784+ E788             >
 784+ E788             >mirror_Ptr      defl    $
 784+ E788             >
 784+ E788 C8 6E       >                dw      Dict_Ptr + 2        // xt
 784+ E78A             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E78A             >
 784+ E78A             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E78A             >
 784+ E78A             >//              ______________________________________________________________________
 784+ E78A             >//              Dictionary part
 784+ E78A             >
 784+ E78A             >                org     Dict_Ptr
 784+ 6EC6             >
 784+ 6EC6 88 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 6EC8             >
 784+ 6EC8             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 6EC8 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 6ECB             >
 784+ 6ECB             >
 784+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 6ECB             >
 784+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 6ECB A3 63 0A 00                  dw      LIT, 10                 // 10
 786+ 6ECF 5F 6B A0 69                  dw      BASE, STORE             // base !
 787+ 6ED3 4C 68                        dw      EXIT                    // ;
 788+ 6ED5
 789+ 6ED5              //  ______________________________________________________________________
 790+ 6ED5              //
 791+ 6ED5              // (;code)       --
 792+ 6ED5              // patch to CFA to call/jump to the "following code"
 793+ 6ED5                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 6ED5             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 6ED5             >
 793+ 6ED5             >Dict_Ptr        defl    $
 793+ 6ED5             >
 793+ 6ED5             >//              ______________________________________________________________________
 793+ 6ED5             >//              Heap part
 793+ 6ED5             >
 793+ 6ED5             >
 793+ 6ED5             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E78A             >
 793+ E78A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E78A             >Latest_Definition defl  Heap_Ptr
 793+ E78A             >
 793+ E78A             >                // dummy db directives used to calculate length of namec
 793+ E78A 28 3B 43 4F >                db      "(;CODE)"
 793+ E78E 44 45 29    >
 793+ E791             >len_NFA         defl    $ - temp_NFA
 793+ E791             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E78A             >
 793+ E78A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E78B 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E78F 44 45 29    >
 793+ E792             >                org     $-1                 // alter last byte of Name just above to set
 793+ E791 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E792             >
 793+ E792 7E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E794             >Prev_Ptr        defl    Heap_Ptr
 793+ E794             >
 793+ E794             >mirror_Ptr      defl    $
 793+ E794             >
 793+ E794 D7 6E       >                dw      Dict_Ptr + 2        // xt
 793+ E796             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E796             >
 793+ E796             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E796             >
 793+ E796             >//              ______________________________________________________________________
 793+ E796             >//              Dictionary part
 793+ E796             >
 793+ E796             >                org     Dict_Ptr
 793+ 6ED5             >
 793+ 6ED5 94 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 6ED7             >
 793+ 6ED7             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 6ED7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 6EDA             >
 793+ 6EDA             >
 793+ 6EDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 6EDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 6EDA             >
 793+ 6EDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 6EDA 61 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 6EDC 5F 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 6EDE BD 6D 98 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 6EE2
 798+ 6EE2 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 6EE6 01 69 B4 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 6EEA B8 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 6EEC
 802+ 6EEC A0 69                        dw      STORE                   // !
 803+ 6EEE 4C 68                        dw      EXIT                    // ;
 804+ 6EF0
 805+ 6EF0              //  ______________________________________________________________________
 806+ 6EF0              //
 807+ 6EF0              // ;code        --
 808+ 6EF0                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 6EF0             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 6EF0             >
 808+ 6EF0             >Dict_Ptr        defl    $
 808+ 6EF0             >
 808+ 6EF0             >//              ______________________________________________________________________
 808+ 6EF0             >//              Heap part
 808+ 6EF0             >
 808+ 6EF0             >
 808+ 6EF0             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E796             >
 808+ E796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E796             >Latest_Definition defl  Heap_Ptr
 808+ E796             >
 808+ E796             >                // dummy db directives used to calculate length of namec
 808+ E796 3B 43 4F 44 >                db      ";CODE"
 808+ E79A 45          >
 808+ E79B             >len_NFA         defl    $ - temp_NFA
 808+ E79B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E796             >
 808+ E796 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E797 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E79B 45          >
 808+ E79C             >                org     $-1                 // alter last byte of Name just above to set
 808+ E79B C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E79C             >
 808+ E79C 8A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E79E             >Prev_Ptr        defl    Heap_Ptr
 808+ E79E             >
 808+ E79E             >mirror_Ptr      defl    $
 808+ E79E             >
 808+ E79E F2 6E       >                dw      Dict_Ptr + 2        // xt
 808+ E7A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E7A0             >
 808+ E7A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E7A0             >
 808+ E7A0             >//              ______________________________________________________________________
 808+ E7A0             >//              Dictionary part
 808+ E7A0             >
 808+ E7A0             >                org     Dict_Ptr
 808+ 6EF0             >
 808+ 6EF0 9E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 6EF2             >
 808+ 6EF2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 6EF2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 6EF5             >
 808+ 6EF5             >
 808+ 6EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 6EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 6EF5             >
 808+ 6EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 6EF5 37 6E                        dw      QCSP                    // ?csp
 810+ 6EF7 5F 6E                        dw      COMPILE                 // compile
 811+ 6EF9 D7 6E                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 6EFB 7F 6E                        dw      SQUARED_OPEN            // [
 813+ 6EFD 55 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 6EFF 4C 68                        dw      EXIT                    // ; immediate
 815+ 6F01
 816+ 6F01              //  ______________________________________________________________________
 817+ 6F01              //
 818+ 6F01              // <builds      --
 819+ 6F01                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 6F01             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 6F01             >
 819+ 6F01             >Dict_Ptr        defl    $
 819+ 6F01             >
 819+ 6F01             >//              ______________________________________________________________________
 819+ 6F01             >//              Heap part
 819+ 6F01             >
 819+ 6F01             >
 819+ 6F01             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E7A0             >
 819+ E7A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E7A0             >Latest_Definition defl  Heap_Ptr
 819+ E7A0             >
 819+ E7A0             >                // dummy db directives used to calculate length of namec
 819+ E7A0 3C 42 55 49 >                db      "<BUILDS"
 819+ E7A4 4C 44 53    >
 819+ E7A7             >len_NFA         defl    $ - temp_NFA
 819+ E7A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E7A0             >
 819+ E7A0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E7A1 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E7A5 4C 44 53    >
 819+ E7A8             >                org     $-1                 // alter last byte of Name just above to set
 819+ E7A7 D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E7A8             >
 819+ E7A8 96 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7AA             >Prev_Ptr        defl    Heap_Ptr
 819+ E7AA             >
 819+ E7AA             >mirror_Ptr      defl    $
 819+ E7AA             >
 819+ E7AA 03 6F       >                dw      Dict_Ptr + 2        // xt
 819+ E7AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7AC             >
 819+ E7AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7AC             >
 819+ E7AC             >//              ______________________________________________________________________
 819+ E7AC             >//              Dictionary part
 819+ E7AC             >
 819+ E7AC             >                org     Dict_Ptr
 819+ 6F01             >
 819+ 6F01 AA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 6F03             >
 819+ 6F03             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 6F03 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 6F06             >
 819+ 6F06             >
 819+ 6F06             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 6F06             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 6F06             >
 819+ 6F06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 6F06 8E 6A                        dw      ZERO                    // 0
 821+ 6F08 59 6A                        dw      CONSTANT                // constant
 822+ 6F0A 4C 68                        dw      EXIT                    // ;
 823+ 6F0C
 824+ 6F0C              //  ______________________________________________________________________
 825+ 6F0C              //
 826+ 6F0C              // recurse      --
 827+ 6F0C              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 6F0C              //              dw      QCOMP                   // ?comp
 829+ 6F0C              //              dw      LATEST                  // latest
 830+ 6F0C              //              dw      PFA, CFA                // pfa cfa
 831+ 6F0C              //              dw      COMMA                   // ,
 832+ 6F0C              //              dw      EXIT                    // ; immediate
 833+ 6F0C
 834+ 6F0C              //  ______________________________________________________________________
 835+ 6F0C              //
 836+ 6F0C              // does>     --
 837+ 6F0C                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 6F0C             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 6F0C             >
 837+ 6F0C             >Dict_Ptr        defl    $
 837+ 6F0C             >
 837+ 6F0C             >//              ______________________________________________________________________
 837+ 6F0C             >//              Heap part
 837+ 6F0C             >
 837+ 6F0C             >
 837+ 6F0C             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7AC             >
 837+ E7AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7AC             >Latest_Definition defl  Heap_Ptr
 837+ E7AC             >
 837+ E7AC             >                // dummy db directives used to calculate length of namec
 837+ E7AC 44 4F 45 53 >                db      "DOES>"
 837+ E7B0 3E          >
 837+ E7B1             >len_NFA         defl    $ - temp_NFA
 837+ E7B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7AC             >
 837+ E7AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7AD 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7B1 3E          >
 837+ E7B2             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7B1 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7B2             >
 837+ E7B2 A0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7B4             >Prev_Ptr        defl    Heap_Ptr
 837+ E7B4             >
 837+ E7B4             >mirror_Ptr      defl    $
 837+ E7B4             >
 837+ E7B4 0E 6F       >                dw      Dict_Ptr + 2        // xt
 837+ E7B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7B6             >
 837+ E7B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7B6             >
 837+ E7B6             >//              ______________________________________________________________________
 837+ E7B6             >//              Dictionary part
 837+ E7B6             >
 837+ E7B6             >                org     Dict_Ptr
 837+ 6F0C             >
 837+ 6F0C B4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 6F0E             >
 837+ 6F0E             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 6F0E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 6F11             >
 837+ 6F11             >
 837+ 6F11             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 6F11             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 6F11             >
 837+ 6F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 6F11 61 68                        dw      R_TO                    // r>
 839+ 6F13 5F 6D                        dw      LATEST                  // latest
 840+ 6F15 BD 6D                        dw      PFA                     // pfa
 841+ 6F17 A0 69                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 6F19              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 6F19 D7 6E                        dw      C_SEMICOLON_CODE        // ;code
 844+ 6F1B              Does_Ptr:
 845+ 6F1B                              // via call coded in CFA
 846+ 6F1B EB                           ex      de, hl //**
 847+ 6F1C                              // *** ldhlrp
 848+ 6F1C 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 6F1D 70                           ld      (hl), b
 850+ 6F1E 2B                           dec     hl
 851+ 6F1F 71                           ld      (hl), c
 852+ 6F20                              // *** ldrphl
 853+ 6F20 EB                           ex      de, hl //**
 854+ 6F21 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 6F22
 856+ 6F22 4E                           ld      c, (hl)
 857+ 6F23 23                           inc     hl
 858+ 6F24 46                           ld      b, (hl)
 859+ 6F25 23                           inc     hl
 860+ 6F26
 861+ 6F26                              psh1
 861+ 6F26 E5          >                push    hl
 861+ 6F27 DD E9       >                jp      (ix)
 862+ 6F29                              // SMUDGE !
 863+ 6F29
 864+ 6F29              //  ______________________________________________________________________
 865+ 6F29              //
 866+ 6F29              // count        a -- a2 n
 867+ 6F29              // expects a counted string at address a, returns string address and counter
 868+ 6F29                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 6F29             >
 868+ 6F29             >Dict_Ptr        defl    $
 868+ 6F29             >
 868+ 6F29             >//              ______________________________________________________________________
 868+ 6F29             >//              Heap part
 868+ 6F29             >
 868+ 6F29             >
 868+ 6F29             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7B6             >
 868+ E7B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7B6             >Latest_Definition defl  Heap_Ptr
 868+ E7B6             >
 868+ E7B6             >                // dummy db directives used to calculate length of namec
 868+ E7B6 43 4F 55 4E >                db      "COUNT"
 868+ E7BA 54          >
 868+ E7BB             >len_NFA         defl    $ - temp_NFA
 868+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7B6             >
 868+ E7B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7B7 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7BB 54          >
 868+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7BB D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7BC             >
 868+ E7BC AC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 868+ E7BE             >
 868+ E7BE             >mirror_Ptr      defl    $
 868+ E7BE             >
 868+ E7BE 2B 6F       >                dw      Dict_Ptr + 2        // xt
 868+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7C0             >
 868+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7C0             >
 868+ E7C0             >//              ______________________________________________________________________
 868+ E7C0             >//              Dictionary part
 868+ E7C0             >
 868+ E7C0             >                org     Dict_Ptr
 868+ 6F29             >
 868+ 6F29 BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 6F2B             >
 868+ 6F2B             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 6F2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 6F2B ~           >
 868+ 6F2B ~           >
 868+ 6F2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 6F2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 6F2B             >
 868+ 6F2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 6F2B D9                           exx
 870+ 6F2C E1                           pop     hl
 871+ 6F2D 5E                           ld      e, (hl)
 872+ 6F2E 16 00                        ld      d, 0
 873+ 6F30 23                           inc     hl
 874+ 6F31              Count_Here:
 875+ 6F31 E5                           push    hl
 876+ 6F32 D5                           push    de
 877+ 6F33 D9                           exx
 878+ 6F34                              next
 878+ 6F34 DD E9       >                jp      (ix)
 879+ 6F36              //                pop     hl
 880+ 6F36              //                ld      a, (hl)
 881+ 6F36              //                inc     hl
 882+ 6F36              //                push    hl
 883+ 6F36              //                ld      h, 0
 884+ 6F36              //                ld      l, a
 885+ 6F36              //                push    hl
 886+ 6F36              //                next
 887+ 6F36
 888+ 6F36              //  ______________________________________________________________________
 889+ 6F36              //
 890+ 6F36              // bounds       a n -- a+n n
 891+ 6F36              // given an address and a length ( a n ) calculate the bound addresses
 892+ 6F36              // suitable for DO-LOOP
 893+ 6F36                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 6F36             >
 893+ 6F36             >Dict_Ptr        defl    $
 893+ 6F36             >
 893+ 6F36             >//              ______________________________________________________________________
 893+ 6F36             >//              Heap part
 893+ 6F36             >
 893+ 6F36             >
 893+ 6F36             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7C0             >
 893+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7C0             >Latest_Definition defl  Heap_Ptr
 893+ E7C0             >
 893+ E7C0             >                // dummy db directives used to calculate length of namec
 893+ E7C0 42 4F 55 4E >                db      "BOUNDS"
 893+ E7C4 44 53       >
 893+ E7C6             >len_NFA         defl    $ - temp_NFA
 893+ E7C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7C0             >
 893+ E7C0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7C1 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7C5 44 53       >
 893+ E7C7             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7C6 D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7C7             >
 893+ E7C7 B6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7C9             >Prev_Ptr        defl    Heap_Ptr
 893+ E7C9             >
 893+ E7C9             >mirror_Ptr      defl    $
 893+ E7C9             >
 893+ E7C9 38 6F       >                dw      Dict_Ptr + 2        // xt
 893+ E7CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7CB             >
 893+ E7CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7CB             >
 893+ E7CB             >//              ______________________________________________________________________
 893+ E7CB             >//              Dictionary part
 893+ E7CB             >
 893+ E7CB             >                org     Dict_Ptr
 893+ 6F36             >
 893+ 6F36 C9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 6F38             >
 893+ 6F38             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 6F38 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 6F38 ~           >
 893+ 6F38 ~           >
 893+ 6F38             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 6F38             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 6F38             >
 893+ 6F38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 6F38 D9                           exx
 895+ 6F39 E1                           pop     hl
 896+ 6F3A D1                           pop     de
 897+ 6F3B 19                           add     hl, de
 898+ 6F3C 18 F3                        jr      Count_Here
 899+ 6F3E                              // push    hl
 900+ 6F3E                              // push    de
 901+ 6F3E                              // exx
 902+ 6F3E                              // next
 903+ 6F3E
 904+ 6F3E              //  ______________________________________________________________________
 905+ 6F3E              //
 906+ 6F3E              // leave        --
 907+ 6F3E              // Compile (leave) to leave current LOOP and jump just after it
 908+ 6F3E                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 6F3E             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 6F3E             >
 908+ 6F3E             >Dict_Ptr        defl    $
 908+ 6F3E             >
 908+ 6F3E             >//              ______________________________________________________________________
 908+ 6F3E             >//              Heap part
 908+ 6F3E             >
 908+ 6F3E             >
 908+ 6F3E             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7CB             >
 908+ E7CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7CB             >Latest_Definition defl  Heap_Ptr
 908+ E7CB             >
 908+ E7CB             >                // dummy db directives used to calculate length of namec
 908+ E7CB 4C 45 41 56 >                db      "LEAVE"
 908+ E7CF 45          >
 908+ E7D0             >len_NFA         defl    $ - temp_NFA
 908+ E7D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7CB             >
 908+ E7CB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7CC 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7D0 45          >
 908+ E7D1             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7D0 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7D1             >
 908+ E7D1 C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7D3             >Prev_Ptr        defl    Heap_Ptr
 908+ E7D3             >
 908+ E7D3             >mirror_Ptr      defl    $
 908+ E7D3             >
 908+ E7D3 40 6F       >                dw      Dict_Ptr + 2        // xt
 908+ E7D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7D5             >
 908+ E7D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7D5             >
 908+ E7D5             >//              ______________________________________________________________________
 908+ E7D5             >//              Dictionary part
 908+ E7D5             >
 908+ E7D5             >                org     Dict_Ptr
 908+ 6F3E             >
 908+ 6F3E D3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 6F40             >
 908+ 6F40             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 6F40 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 6F43             >
 908+ 6F43             >
 908+ 6F43             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 6F43             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 6F43             >
 908+ 6F43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 6F43 5F 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 6F47 B3 6B 56 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 6F4B 8E 6A C9 6B
 911+ 6F4F 8E 6A 8E 6A                  dw      ZERO, ZERO
 912+ 6F53 33 68 25 69                  dw      SPFETCH, DUP
 913+ 6F57 CE 68 CE 68                  dw      CELL_PLUS, CELL_PLUS
 914+ 6F5B 15 69                        dw      TUCK
 915+ 6F5D 71 6B 96 69                  dw      CSP, FETCH
 916+ 6F61 1E 69 F2 6B                  dw      SWAP, SUBTRACT
 917+ 6F65 8D 67                        dw      CMOVE
 918+ 6F67 71 6B 96 69                  dw      CSP, FETCH, CELL_MINUS
 918+ 6F6B D3 68
 919+ 6F6D 61 68 01 69                  dw      R_TO, OVER, STORE
 919+ 6F71 A0 69
 920+ 6F73 D3 68 8E 6A                  dw      CELL_MINUS, ZERO
 921+ 6F77 1E 69 A0 69                  dw      SWAP, STORE
 922+ 6F7B 4C 68                        dw      EXIT                    // ;
 923+ 6F7D
 924+ 6F7D              //  ______________________________________________________________________
 925+ 6F7D              //
 926+ 6F7D              // type         a n --
 927+ 6F7D              // Sends to current output channel n characters starting at address a.
 928+ 6F7D                              Colon_Def TYPE, "TYPE", is_normal
 928+ 6F7D             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 6F7D             >
 928+ 6F7D             >Dict_Ptr        defl    $
 928+ 6F7D             >
 928+ 6F7D             >//              ______________________________________________________________________
 928+ 6F7D             >//              Heap part
 928+ 6F7D             >
 928+ 6F7D             >
 928+ 6F7D             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7D5             >
 928+ E7D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7D5             >Latest_Definition defl  Heap_Ptr
 928+ E7D5             >
 928+ E7D5             >                // dummy db directives used to calculate length of namec
 928+ E7D5 54 59 50 45 >                db      "TYPE"
 928+ E7D9             >len_NFA         defl    $ - temp_NFA
 928+ E7D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7D5             >
 928+ E7D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7D6 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7DA             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7D9 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7DA             >
 928+ E7DA CB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7DC             >Prev_Ptr        defl    Heap_Ptr
 928+ E7DC             >
 928+ E7DC             >mirror_Ptr      defl    $
 928+ E7DC             >
 928+ E7DC 7F 6F       >                dw      Dict_Ptr + 2        // xt
 928+ E7DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7DE             >
 928+ E7DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7DE             >
 928+ E7DE             >//              ______________________________________________________________________
 928+ E7DE             >//              Dictionary part
 928+ E7DE             >
 928+ E7DE             >                org     Dict_Ptr
 928+ 6F7D             >
 928+ 6F7D DC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 6F7F             >
 928+ 6F7F             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 6F7F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 6F82             >
 928+ 6F82             >
 928+ 6F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 6F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 6F82             >
 928+ 6F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 6F82 38 6F                        dw      BOUNDS                  // bounds
 930+ 6F84 0C 64                        dw      C_Q_DO                  // ?do
 931+ 6F86 0C 00                        dw      Type_Skip - $
 932+ 6F88              Type_Loop:
 933+ 6F88 3A 64 AB 69                  dw          I, CFETCH           //      i c@
 934+ 6F8C 6D 6C                        dw          EMIT                //      emit
 935+ 6F8E E0 63                        dw      C_LOOP                  // loop
 936+ 6F90 F8 FF                        dw      Type_Loop - $
 937+ 6F92              Type_Skip:
 938+ 6F92 4C 68                        dw      EXIT                    // ;
 939+ 6F94
 940+ 6F94              //  ______________________________________________________________________
 941+ 6F94              //
 942+ 6F94              // -trailing    a n1 -- a n2
 943+ 6F94              // Assumes that an n1 bytes-long string is stored at address a
 944+ 6F94              // and the string contains a space delimited word,
 945+ 6F94              // Finds n2 as the position of the first character after the word.
 946+ 6F94                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 6F94             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 6F94             >
 946+ 6F94             >Dict_Ptr        defl    $
 946+ 6F94             >
 946+ 6F94             >//              ______________________________________________________________________
 946+ 6F94             >//              Heap part
 946+ 6F94             >
 946+ 6F94             >
 946+ 6F94             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7DE             >
 946+ E7DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7DE             >Latest_Definition defl  Heap_Ptr
 946+ E7DE             >
 946+ E7DE             >                // dummy db directives used to calculate length of namec
 946+ E7DE 2D 54 52 41 >                db      "-TRAILING"
 946+ E7E2 49 4C 49 4E >
 946+ E7E6 47          >
 946+ E7E7             >len_NFA         defl    $ - temp_NFA
 946+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7DE             >
 946+ E7DE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7DF 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7E3 49 4C 49 4E >
 946+ E7E7 47          >
 946+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7E7 C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7E8             >
 946+ E7E8 D5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 946+ E7EA             >
 946+ E7EA             >mirror_Ptr      defl    $
 946+ E7EA             >
 946+ E7EA 96 6F       >                dw      Dict_Ptr + 2        // xt
 946+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7EC             >
 946+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7EC             >
 946+ E7EC             >//              ______________________________________________________________________
 946+ E7EC             >//              Dictionary part
 946+ E7EC             >
 946+ E7EC             >                org     Dict_Ptr
 946+ 6F94             >
 946+ 6F94 EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 6F96             >
 946+ 6F96             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 6F96 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 6F99             >
 946+ 6F99             >
 946+ 6F99             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 6F99             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 6F99             >
 946+ 6F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 6F99 25 69 8E 6A                  dw      DUP, ZERO               // dup 0
 948+ 6F9D                                                              // do
 949+ 6F9D 0C 64                        dw      C_Q_DO
 950+ 6F9F 20 00                        dw      LTrailing_Leave - $
 951+ 6FA1              LTrailing_Loop:
 952+ 6FA1 74 69 9F 68                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 6FA5 BF 68                        dw          ONE_SUBTRACT        //      1-
 954+ 6FA7 AB 69                        dw          CFETCH              //      c@
 955+ 6FA9 B1 6A F2 6B                  dw          BL, SUBTRACT        //      bl -
 956+ 6FAD                                                              //      if
 957+ 6FAD F5 63                        dw          ZBRANCH
 958+ 6FAF 0A 00                        dw          LTrailing_Else - $
 959+ 6FB1 00 64                        dw              C_LEAVE         //          leave
 960+ 6FB3 0C 00                        dw              LTrailing_Leave - $
 961+ 6FB5 E8 63                        dw          BRANCH              //      else
 962+ 6FB7 04 00                        dw          LTrailing_Endif - $
 963+ 6FB9              LTrailing_Else:
 964+ 6FB9 BF 68                        dw              ONE_SUBTRACT    //          1-
 965+ 6FBB              LTrailing_Endif:                                //      endif
 966+ 6FBB                                                              // loop
 967+ 6FBB E0 63                        dw      C_LOOP
 968+ 6FBD E4 FF                        dw      LTrailing_Loop - $
 969+ 6FBF              LTrailing_Leave:
 970+ 6FBF 4C 68                        dw      EXIT                    // ;
 971+ 6FC1
 972+ 6FC1              //  ______________________________________________________________________
 973+ 6FC1              //
 974+ 6FC1              // accept       a n1 -- n2
 975+ 6FC1              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 6FC1              // CR stops input. A 'nul' is added as trailer.
 977+ 6FC1              // n2 is the string length. n2 is kept in span user variable also.
 978+ 6FC1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 6FC1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 6FC1             >
 978+ 6FC1             >Dict_Ptr        defl    $
 978+ 6FC1             >
 978+ 6FC1             >//              ______________________________________________________________________
 978+ 6FC1             >//              Heap part
 978+ 6FC1             >
 978+ 6FC1             >
 978+ 6FC1             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7EC             >
 978+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7EC             >Latest_Definition defl  Heap_Ptr
 978+ E7EC             >
 978+ E7EC             >                // dummy db directives used to calculate length of namec
 978+ E7EC 41 43 43 45 >                db      "ACCEPT"
 978+ E7F0 50 54       >
 978+ E7F2             >len_NFA         defl    $ - temp_NFA
 978+ E7F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7EC             >
 978+ E7EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7ED 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7F1 50 54       >
 978+ E7F3             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7F2 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7F3             >
 978+ E7F3 DE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7F5             >Prev_Ptr        defl    Heap_Ptr
 978+ E7F5             >
 978+ E7F5             >mirror_Ptr      defl    $
 978+ E7F5             >
 978+ E7F5 C3 6F       >                dw      Dict_Ptr + 2        // xt
 978+ E7F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7F7             >
 978+ E7F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7F7             >
 978+ E7F7             >//              ______________________________________________________________________
 978+ E7F7             >//              Dictionary part
 978+ E7F7             >
 978+ E7F7             >                org     Dict_Ptr
 978+ 6FC1             >
 978+ 6FC1 F5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 6FC3             >
 978+ 6FC3             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6FC3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 6FC6             >
 978+ 6FC6             >
 978+ 6FC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6FC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6FC6             >
 978+ 6FC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6FC6 01 69 9F 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 6FCA 01 69
 980+ 6FCC 8E 6A 37 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 6FD0                                                              // do
 982+ 6FD0 0C 64                        dw      C_Q_DO
 983+ 6FD2 8C 00                        dw      Accept_Leave - $
 984+ 6FD4              Accept_Loop:
 985+ 6FD4 38 66                        dw          CUR
 986+ 6FD6 0A 69 80 66                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 6FDA 25 69                        dw          DUP                 //      dup             ( a  c  c )
 988+ 6FDC A3 63 0E 00                  dw          LIT, $0E            //      0E
 989+ 6FE0 D4 6A                        dw          PLUS_ORIGIN         //      +origin
 990+ 6FE2 96 69                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 6FE4 FE 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 6FE6                                                              //      if
 993+ 6FE6 F5 63                        dw          ZBRANCH
 994+ 6FE8 2C 00                        dw          Accept_Else_0 - $
 995+ 6FEA 0A 69                        dw              DROP            //          drop        ( a  )
 996+ 6FEC 25 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 6FF0 FE 6B
 997+ 6FF2 95 6A 0C 68                  dw              ONE, AND_OP     //          1 and
 998+ 6FF6 25 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 6FF8 61 68                        dw              R_TO            //          r> 2 - + r>
1000+ 6FFA DB 68 9F 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 6FFE 56 68                        dw              TO_R            //
1002+ 7000                                                              //          if
1003+ 7000 F5 63                        dw              ZBRANCH
1004+ 7002 0A 00                        dw              Accept_Else_1 - $
1005+ 7004 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 7008                                                              //          else
1007+ 7008 E8 63                        dw              BRANCH
1008+ 700A 06 00                        dw              Accept_Endif_1 - $
1009+ 700C              Accept_Else_1:
1010+ 700C A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 7010              Accept_Endif_1:                                 //          endif
1012+ 7010 E8 63                        dw          BRANCH
1013+ 7012 2E 00                        dw          Accept_Endif_0 - $
1014+ 7014              Accept_Else_0:                                  //      else
1015+ 7014 25 69                        dw              DUP             //          dup         ( a  c  c )
1016+ 7016 A3 63 0D 00                  dw              LIT, 13         //          13
1017+ 701A FE 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 701C                                                              //          if
1019+ 701C F5 63                        dw              ZBRANCH
1020+ 701E 0C 00                        dw              Accept_Else_2 - $
1021+ 7020 0A 69 B1 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 7024 8E 6A                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 7026                                                              //          else
1024+ 7026 E8 63                        dw              BRANCH
1025+ 7028 04 00                        dw              Accept_Endif_2 - $
1026+ 702A              Accept_Else_2:
1027+ 702A 25 69                        dw                  DUP         //              dup     ( a  c  c )
1028+ 702C                                                              //          endif
1029+ 702C              Accept_Endif_2:
1030+ 702C 3A 64 B4 69                  dw              I, CSTORE       //          i           ( a  c )
1031+ 7030 25 69 B1 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 7034 17 6C
1032+ 7036                                                              //          if
1033+ 7036 F5 63                        dw              ZBRANCH
1034+ 7038 08 00                        dw              Accept_Endif_3 - $
1035+ 703A 61 68                        dw                  R_TO        //              r>
1036+ 703C BF 68                        dw                  ONE_SUBTRACT//              1-
1037+ 703E 56 68                        dw                  TO_R        //              >r
1038+ 7040                                                              //          endif
1039+ 7040              Accept_Endif_3:
1040+ 7040              Accept_Endif_0:                                 //      endif
1041+ 7040 6D 6C                        dw          EMIT                //      emit
1042+ 7042
1043+ 7042 8E 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 7046 B8 68
1044+ 7048 A0 69                        dw          STORE               //          ( zero pad )
1045+ 704A 3A 64                        dw          I                   //      i
1046+ 704C 3A 64 AB 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 7050 71 68
1047+ 7052 F5 63                        dw          ZBRANCH             //
1048+ 7054 06 00                        dw              Accept_Endif_4 - $
1049+ 7056 00 64                        dw                  C_LEAVE     //              leave
1050+ 7058 06 00                        dw                  Accept_Leave - $
1051+ 705A              Accept_Endif_4:                                 //      endif
1052+ 705A                                                              // loop
1053+ 705A E0 63                        dw      C_LOOP
1054+ 705C 78 FF                        dw      Accept_Loop - $
1055+ 705E              Accept_Leave:
1056+ 705E 1E 69 F2 6B                  dw      SWAP, SUBTRACT          // swap -
1057+ 7062 B8 68                        dw      ONE_PLUS                // 1+
1058+ 7064 25 69 A1 6B                  dw      DUP, SPAN, STORE        // dup span !
1058+ 7068 A0 69
1059+ 706A 4C 68                        dw      EXIT                    // ;
1060+ 706C
1061+ 706C              //  ______________________________________________________________________
1062+ 706C              //
1063+ 706C              // expect      a n --
1064+ 706C              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 706C              // CR stops input. A 'nul' is added as trailer.
1066+ 706C              // n2 is the string length. n2 is kept in span user variable also.
1067+ 706C              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 706C              //              dw      ACCEPT, DROP            // accept drop
1069+ 706C              //              dw      EXIT                    // ;
1070+ 706C
1071+ 706C              //  ______________________________________________________________________
1072+ 706C              //
1073+ 706C              // query        --
1074+ 706C              // Accept at most 80 character from console. CR stops.
1075+ 706C              // Text is stored in TIB. Variable IN is zeroed.
1076+ 706C                              Colon_Def QUERY, "QUERY", is_normal
1076+ 706C             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 706C             >
1076+ 706C             >Dict_Ptr        defl    $
1076+ 706C             >
1076+ 706C             >//              ______________________________________________________________________
1076+ 706C             >//              Heap part
1076+ 706C             >
1076+ 706C             >
1076+ 706C             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7F7             >
1076+ E7F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7F7             >Latest_Definition defl  Heap_Ptr
1076+ E7F7             >
1076+ E7F7             >                // dummy db directives used to calculate length of namec
1076+ E7F7 51 55 45 52 >                db      "QUERY"
1076+ E7FB 59          >
1076+ E7FC             >len_NFA         defl    $ - temp_NFA
1076+ E7FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7F7             >
1076+ E7F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7F8 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7FC 59          >
1076+ E7FD             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7FC D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7FD             >
1076+ E7FD EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7FF             >Prev_Ptr        defl    Heap_Ptr
1076+ E7FF             >
1076+ E7FF             >mirror_Ptr      defl    $
1076+ E7FF             >
1076+ E7FF 6E 70       >                dw      Dict_Ptr + 2        // xt
1076+ E801             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E801             >
1076+ E801             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E801             >
1076+ E801             >//              ______________________________________________________________________
1076+ E801             >//              Dictionary part
1076+ E801             >
1076+ E801             >                org     Dict_Ptr
1076+ 706C             >
1076+ 706C FF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 706E             >
1076+ 706E             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 706E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 7071             >
1076+ 7071             >
1076+ 7071             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 7071             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 7071             >
1076+ 7071             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 7071 F3 6A 96 69                  dw      TIB, FETCH              // tib @
1078+ 7075 A3 63 50 00                  dw      LIT, 80                 // 80
1079+ 7079 C3 6F 0A 69                  dw      ACCEPT, DROP            // accept drop
1080+ 707D 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 7081 A0 69
1081+ 7083 4C 68                        dw      EXIT                    // ;
1082+ 7085
1083+ 7085              //  ______________________________________________________________________
1084+ 7085              //
1085+ 7085              // fill        a n c --
1086+ 7085              // If n > 0, fills n locations starting from address a with the value c.
1087+ 7085                              New_Def FILL, "FILL", is_code, is_normal
1087+ 7085             >
1087+ 7085             >Dict_Ptr        defl    $
1087+ 7085             >
1087+ 7085             >//              ______________________________________________________________________
1087+ 7085             >//              Heap part
1087+ 7085             >
1087+ 7085             >
1087+ 7085             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E801             >
1087+ E801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E801             >Latest_Definition defl  Heap_Ptr
1087+ E801             >
1087+ E801             >                // dummy db directives used to calculate length of namec
1087+ E801 46 49 4C 4C >                db      "FILL"
1087+ E805             >len_NFA         defl    $ - temp_NFA
1087+ E805             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E801             >
1087+ E801 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E802 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E806             >                org     $-1                 // alter last byte of Name just above to set
1087+ E805 CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E806             >
1087+ E806 F7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E808             >Prev_Ptr        defl    Heap_Ptr
1087+ E808             >
1087+ E808             >mirror_Ptr      defl    $
1087+ E808             >
1087+ E808 87 70       >                dw      Dict_Ptr + 2        // xt
1087+ E80A             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E80A             >
1087+ E80A             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E80A             >
1087+ E80A             >//              ______________________________________________________________________
1087+ E80A             >//              Dictionary part
1087+ E80A             >
1087+ E80A             >                org     Dict_Ptr
1087+ 7085             >
1087+ 7085 08 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 7087             >
1087+ 7087             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 7087 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 7087 ~           >
1087+ 7087 ~           >
1087+ 7087             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 7087             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 7087             >
1087+ 7087             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 7087 D9                           exx
1089+ 7088 D1                           pop     de                  // de has character
1090+ 7089 C1                           pop     bc                  // bc has counter
1091+ 708A E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 708B              Fill_Loop:
1093+ 708B 78                               ld      a, b
1094+ 708C B1                               or      c
1095+ 708D 28 05                        jr      z, Fill_While_End
1096+ 708F 73                               ld      (hl), e
1097+ 7090 0B                               dec     bc
1098+ 7091 23                               inc     hl
1099+ 7092 18 F7                        jr      Fill_Loop
1100+ 7094              Fill_While_End:
1101+ 7094 D9                           exx
1102+ 7095                              next
1102+ 7095 DD E9       >                jp      (ix)
1103+ 7097
1104+ 7097              //  ______________________________________________________________________
1105+ 7097              //
1106+ 7097              // erase        a n --
1107+ 7097              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 7097                              Colon_Def ERASE, "ERASE", is_normal
1108+ 7097             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 7097             >
1108+ 7097             >Dict_Ptr        defl    $
1108+ 7097             >
1108+ 7097             >//              ______________________________________________________________________
1108+ 7097             >//              Heap part
1108+ 7097             >
1108+ 7097             >
1108+ 7097             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E80A             >
1108+ E80A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E80A             >Latest_Definition defl  Heap_Ptr
1108+ E80A             >
1108+ E80A             >                // dummy db directives used to calculate length of namec
1108+ E80A 45 52 41 53 >                db      "ERASE"
1108+ E80E 45          >
1108+ E80F             >len_NFA         defl    $ - temp_NFA
1108+ E80F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E80A             >
1108+ E80A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E80B 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E80F 45          >
1108+ E810             >                org     $-1                 // alter last byte of Name just above to set
1108+ E80F C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E810             >
1108+ E810 01 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E812             >Prev_Ptr        defl    Heap_Ptr
1108+ E812             >
1108+ E812             >mirror_Ptr      defl    $
1108+ E812             >
1108+ E812 99 70       >                dw      Dict_Ptr + 2        // xt
1108+ E814             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E814             >
1108+ E814             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E814             >
1108+ E814             >//              ______________________________________________________________________
1108+ E814             >//              Dictionary part
1108+ E814             >
1108+ E814             >                org     Dict_Ptr
1108+ 7097             >
1108+ 7097 12 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 7099             >
1108+ 7099             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 7099 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 709C             >
1108+ 709C             >
1108+ 709C             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 709C             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 709C             >
1108+ 709C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 709C 8E 6A 87 70                  dw      ZERO, FILL              // 0 fill
1110+ 70A0 4C 68                        dw      EXIT                    // ;
1111+ 70A2
1112+ 70A2              //  ______________________________________________________________________
1113+ 70A2              //
1114+ 70A2              // blank        a n --
1115+ 70A2              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 70A2                              Colon_Def BLANK, "BLANK", is_normal
1116+ 70A2             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 70A2             >
1116+ 70A2             >Dict_Ptr        defl    $
1116+ 70A2             >
1116+ 70A2             >//              ______________________________________________________________________
1116+ 70A2             >//              Heap part
1116+ 70A2             >
1116+ 70A2             >
1116+ 70A2             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E814             >
1116+ E814             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E814             >Latest_Definition defl  Heap_Ptr
1116+ E814             >
1116+ E814             >                // dummy db directives used to calculate length of namec
1116+ E814 42 4C 41 4E >                db      "BLANK"
1116+ E818 4B          >
1116+ E819             >len_NFA         defl    $ - temp_NFA
1116+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E814             >
1116+ E814 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E815 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E819 4B          >
1116+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1116+ E819 CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E81A             >
1116+ E81A 0A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E81C             >Prev_Ptr        defl    Heap_Ptr
1116+ E81C             >
1116+ E81C             >mirror_Ptr      defl    $
1116+ E81C             >
1116+ E81C A4 70       >                dw      Dict_Ptr + 2        // xt
1116+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E81E             >
1116+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E81E             >
1116+ E81E             >//              ______________________________________________________________________
1116+ E81E             >//              Dictionary part
1116+ E81E             >
1116+ E81E             >                org     Dict_Ptr
1116+ 70A2             >
1116+ 70A2 1C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 70A4             >
1116+ 70A4             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 70A4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 70A7             >
1116+ 70A7             >
1116+ 70A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 70A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 70A7             >
1116+ 70A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 70A7 B1 6A 87 70                  dw      BL, FILL                // bl fill
1118+ 70AB 4C 68                        dw      EXIT                    // ;
1119+ 70AD
1120+ 70AD              //  ______________________________________________________________________
1121+ 70AD              //
1122+ 70AD              // hold         c --
1123+ 70AD              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 70AD                              Colon_Def HOLD, "HOLD", is_normal
1124+ 70AD             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 70AD             >
1124+ 70AD             >Dict_Ptr        defl    $
1124+ 70AD             >
1124+ 70AD             >//              ______________________________________________________________________
1124+ 70AD             >//              Heap part
1124+ 70AD             >
1124+ 70AD             >
1124+ 70AD             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E81E             >
1124+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E81E             >Latest_Definition defl  Heap_Ptr
1124+ E81E             >
1124+ E81E             >                // dummy db directives used to calculate length of namec
1124+ E81E 48 4F 4C 44 >                db      "HOLD"
1124+ E822             >len_NFA         defl    $ - temp_NFA
1124+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E81E             >
1124+ E81E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E81F 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E823             >                org     $-1                 // alter last byte of Name just above to set
1124+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E823             >
1124+ E823 14 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E825             >Prev_Ptr        defl    Heap_Ptr
1124+ E825             >
1124+ E825             >mirror_Ptr      defl    $
1124+ E825             >
1124+ E825 AF 70       >                dw      Dict_Ptr + 2        // xt
1124+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E827             >
1124+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E827             >
1124+ E827             >//              ______________________________________________________________________
1124+ E827             >//              Dictionary part
1124+ E827             >
1124+ E827             >                org     Dict_Ptr
1124+ 70AD             >
1124+ 70AD 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 70AF             >
1124+ 70AF             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 70AF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 70B2             >
1124+ 70B2             >
1124+ 70B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 70B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 70B2             >
1124+ 70B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 70B2 AA 6A                        dw      NEG_ONE                 // -1
1126+ 70B4 7D 6B 7E 69                  dw      HLD, PLUSSTORE          // hld +!
1127+ 70B8 7D 6B 96 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 70BC B4 69
1128+ 70BE 4C 68                        dw      EXIT                    // ;
1129+ 70C0
1130+ 70C0              //  ______________________________________________________________________
1131+ 70C0              //
1132+ 70C0              // pad         -- a
1133+ 70C0              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 70C0                              Colon_Def PAD, "PAD", is_normal
1134+ 70C0             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 70C0             >
1134+ 70C0             >Dict_Ptr        defl    $
1134+ 70C0             >
1134+ 70C0             >//              ______________________________________________________________________
1134+ 70C0             >//              Heap part
1134+ 70C0             >
1134+ 70C0             >
1134+ 70C0             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E827             >
1134+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E827             >Latest_Definition defl  Heap_Ptr
1134+ E827             >
1134+ E827             >                // dummy db directives used to calculate length of namec
1134+ E827 50 41 44    >                db      "PAD"
1134+ E82A             >len_NFA         defl    $ - temp_NFA
1134+ E82A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E827             >
1134+ E827 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E828 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E82B             >                org     $-1                 // alter last byte of Name just above to set
1134+ E82A C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E82B             >
1134+ E82B 1E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E82D             >Prev_Ptr        defl    Heap_Ptr
1134+ E82D             >
1134+ E82D             >mirror_Ptr      defl    $
1134+ E82D             >
1134+ E82D C2 70       >                dw      Dict_Ptr + 2        // xt
1134+ E82F             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E82F             >
1134+ E82F             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E82F             >
1134+ E82F             >//              ______________________________________________________________________
1134+ E82F             >//              Dictionary part
1134+ E82F             >
1134+ E82F             >                org     Dict_Ptr
1134+ 70C0             >
1134+ 70C0 2D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 70C2             >
1134+ 70C2             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 70C2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 70C5             >
1134+ 70C5             >
1134+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 70C5             >
1134+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 70C5 B3 6B                        dw      HERE                    // here
1136+ 70C7 A3 63 44 00                  dw      LIT, 68                 // 68
1137+ 70CB 9F 68                        dw      PLUS                    // +
1138+ 70CD 4C 68                        dw      EXIT                    // ;
1139+ 70CF
1140+ 70CF              //  ______________________________________________________________________
1141+ 70CF              //
1142+ 70CF              // word         c -- a
1143+ 70CF              // reads characters from input streams until it encouners a c delimiter.
1144+ 70CF              // Stores that packet so it starts from HERE
1145+ 70CF              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 70CF              // Other occurrences of c are ignored.
1147+ 70CF              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 70CF              // Otherwise text is taken from the disk-block given by BLK.
1149+ 70CF              // "in" variable is incremented of the number of character read.
1150+ 70CF              // The number of characters read is given by ENCLOSE.
1151+ 70CF                              Colon_Def WORD, "WORD", is_normal
1151+ 70CF             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 70CF             >
1151+ 70CF             >Dict_Ptr        defl    $
1151+ 70CF             >
1151+ 70CF             >//              ______________________________________________________________________
1151+ 70CF             >//              Heap part
1151+ 70CF             >
1151+ 70CF             >
1151+ 70CF             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E82F             >
1151+ E82F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E82F             >Latest_Definition defl  Heap_Ptr
1151+ E82F             >
1151+ E82F             >                // dummy db directives used to calculate length of namec
1151+ E82F 57 4F 52 44 >                db      "WORD"
1151+ E833             >len_NFA         defl    $ - temp_NFA
1151+ E833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E82F             >
1151+ E82F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E830 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E834             >                org     $-1                 // alter last byte of Name just above to set
1151+ E833 C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E834             >
1151+ E834 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E836             >Prev_Ptr        defl    Heap_Ptr
1151+ E836             >
1151+ E836             >mirror_Ptr      defl    $
1151+ E836             >
1151+ E836 D1 70       >                dw      Dict_Ptr + 2        // xt
1151+ E838             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E838             >
1151+ E838             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E838             >
1151+ E838             >//              ______________________________________________________________________
1151+ E838             >//              Dictionary part
1151+ E838             >
1151+ E838             >                org     Dict_Ptr
1151+ 70CF             >
1151+ 70CF 36 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 70D1             >
1151+ 70D1             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 70D1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 70D4             >
1151+ 70D4             >
1151+ 70D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 70D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 70D4             >
1151+ 70D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 70D4 2F 6B 96 69                  dw      BLK, FETCH              // blk @
1153+ 70D8                                                              // if
1154+ 70D8 F5 63                        dw      ZBRANCH
1155+ 70DA 0C 00                        dw      Word_Else - $
1156+ 70DC 2F 6B 96 69                  dw          BLK, FETCH          //      blk @
1157+ 70E0 73 79                        dw          BLOCK               //      block ( forward )
1158+ 70E2                                                              // else
1159+ 70E2 E8 63                        dw      BRANCH
1160+ 70E4 06 00                        dw      Word_Endif - $
1161+ 70E6              Word_Else:
1162+ 70E6 F3 6A 96 69                  dw         TIB, FETCH           //      tib @
1163+ 70EA              Word_Endif:                                     // endif
1164+ 70EA 35 6B 96 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 70EE 9F 68
1165+ 70F0 1E 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 70F4 B3 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 70F8 22 00 A4 70
1167+ 70FC 35 6B 7E 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 7100 01 69 F2 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 7104 56 68
1169+ 7106 6C 68 B3 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 710A B4 69
1170+ 710C 9F 68                        dw      PLUS                    // +
1171+ 710E B3 6B B8 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 7112 61 68
1172+ 7114 8D 67                        dw      CMOVE                   // cmove
1173+ 7116 B3 6B                        dw      HERE                    // here
1174+ 7118 4C 68                        dw      EXIT                    // ;
1175+ 711A
1176+ 711A              //  ______________________________________________________________________
1177+ 711A              //
1178+ 711A              // (.")         --
1179+ 711A              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 711A                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 711A             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 711A             >
1180+ 711A             >Dict_Ptr        defl    $
1180+ 711A             >
1180+ 711A             >//              ______________________________________________________________________
1180+ 711A             >//              Heap part
1180+ 711A             >
1180+ 711A             >
1180+ 711A             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E838             >
1180+ E838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E838             >Latest_Definition defl  Heap_Ptr
1180+ E838             >
1180+ E838             >                // dummy db directives used to calculate length of namec
1180+ E838 28 2E 22 29 >                db      '(.")'
1180+ E83C             >len_NFA         defl    $ - temp_NFA
1180+ E83C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E838             >
1180+ E838 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E839 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E83D             >                org     $-1                 // alter last byte of Name just above to set
1180+ E83C A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E83D             >
1180+ E83D 2F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E83F             >Prev_Ptr        defl    Heap_Ptr
1180+ E83F             >
1180+ E83F             >mirror_Ptr      defl    $
1180+ E83F             >
1180+ E83F 1C 71       >                dw      Dict_Ptr + 2        // xt
1180+ E841             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E841             >
1180+ E841             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E841             >
1180+ E841             >//              ______________________________________________________________________
1180+ E841             >//              Dictionary part
1180+ E841             >
1180+ E841             >                org     Dict_Ptr
1180+ 711A             >
1180+ 711A 3F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 711C             >
1180+ 711C             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 711C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 711F             >
1180+ 711F             >
1180+ 711F             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 711F             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 711F             >
1180+ 711F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 711F 6C 68 2B 6F                  dw      R_OP, COUNT             // r count
1182+ 7123 25 69 B8 68                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 7127 61 68 9F 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 712B 56 68
1184+ 712D 7F 6F                        dw      TYPE                    // type
1185+ 712F 4C 68                        dw      EXIT                    // ;
1186+ 7131
1187+ 7131              //  ______________________________________________________________________
1188+ 7131              //
1189+ 7131              // char         -- c
1190+ 7131              // get first character from next input word
1191+ 7131                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 7131             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 7131             >
1191+ 7131             >Dict_Ptr        defl    $
1191+ 7131             >
1191+ 7131             >//              ______________________________________________________________________
1191+ 7131             >//              Heap part
1191+ 7131             >
1191+ 7131             >
1191+ 7131             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E841             >
1191+ E841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E841             >Latest_Definition defl  Heap_Ptr
1191+ E841             >
1191+ E841             >                // dummy db directives used to calculate length of namec
1191+ E841 43 48 41 52 >                db      "CHAR"
1191+ E845             >len_NFA         defl    $ - temp_NFA
1191+ E845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E841             >
1191+ E841 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E842 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E846             >                org     $-1                 // alter last byte of Name just above to set
1191+ E845 D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E846             >
1191+ E846 38 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E848             >Prev_Ptr        defl    Heap_Ptr
1191+ E848             >
1191+ E848             >mirror_Ptr      defl    $
1191+ E848             >
1191+ E848 33 71       >                dw      Dict_Ptr + 2        // xt
1191+ E84A             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E84A             >
1191+ E84A             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E84A             >
1191+ E84A             >//              ______________________________________________________________________
1191+ E84A             >//              Dictionary part
1191+ E84A             >
1191+ E84A             >                org     Dict_Ptr
1191+ 7131             >
1191+ 7131 48 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 7133             >
1191+ 7133             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 7133 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 7136             >
1191+ 7136             >
1191+ 7136             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 7136             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 7136             >
1191+ 7136             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 7136 B1 6A D1 70                  dw      BL, WORD                // bl word
1193+ 713A B8 68 AB 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 713E 4C 68                        dw      EXIT                    // ;
1195+ 7140
1196+ 7140              //  ______________________________________________________________________
1197+ 7140              //
1198+ 7140              // ,"           --
1199+ 7140              // compiles a string terminated by " as a counted string from next input stream
1200+ 7140                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 7140             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 7140             >
1200+ 7140             >Dict_Ptr        defl    $
1200+ 7140             >
1200+ 7140             >//              ______________________________________________________________________
1200+ 7140             >//              Heap part
1200+ 7140             >
1200+ 7140             >
1200+ 7140             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E84A             >
1200+ E84A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E84A             >Latest_Definition defl  Heap_Ptr
1200+ E84A             >
1200+ E84A             >                // dummy db directives used to calculate length of namec
1200+ E84A 2C 22       >                db      ',"'
1200+ E84C             >len_NFA         defl    $ - temp_NFA
1200+ E84C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E84A             >
1200+ E84A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E84B 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E84D             >                org     $-1                 // alter last byte of Name just above to set
1200+ E84C A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E84D             >
1200+ E84D 41 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E84F             >Prev_Ptr        defl    Heap_Ptr
1200+ E84F             >
1200+ E84F             >mirror_Ptr      defl    $
1200+ E84F             >
1200+ E84F 42 71       >                dw      Dict_Ptr + 2        // xt
1200+ E851             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E851             >
1200+ E851             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E851             >
1200+ E851             >//              ______________________________________________________________________
1200+ E851             >//              Dictionary part
1200+ E851             >
1200+ E851             >                org     Dict_Ptr
1200+ 7140             >
1200+ 7140 4F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 7142             >
1200+ 7142             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7142 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 7145             >
1200+ 7145             >
1200+ 7145             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 7145             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 7145             >
1200+ 7145             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 7145 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 7149 D1 70                        dw      WORD                    // word
1203+ 714B AB 69 B8 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 714F BE 6B                        dw      ALLOT                   // allot
1205+ 7151 8E 6A D8 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 7155 4C 68                        dw      EXIT
1207+ 7157
1208+ 7157              //  ______________________________________________________________________
1209+ 7157              //
1210+ 7157              // .c           c --
1211+ 7157              // intermediate general purpose string builder, used by ." and .(
1212+ 7157                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 7157             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 7157             >
1212+ 7157             >Dict_Ptr        defl    $
1212+ 7157             >
1212+ 7157             >//              ______________________________________________________________________
1212+ 7157             >//              Heap part
1212+ 7157             >
1212+ 7157             >
1212+ 7157             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E851             >
1212+ E851             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E851             >Latest_Definition defl  Heap_Ptr
1212+ E851             >
1212+ E851             >                // dummy db directives used to calculate length of namec
1212+ E851 2E 43       >                db      ".C"
1212+ E853             >len_NFA         defl    $ - temp_NFA
1212+ E853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E851             >
1212+ E851 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E852 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E854             >                org     $-1                 // alter last byte of Name just above to set
1212+ E853 C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E854             >
1212+ E854 4A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E856             >Prev_Ptr        defl    Heap_Ptr
1212+ E856             >
1212+ E856             >mirror_Ptr      defl    $
1212+ E856             >
1212+ E856 59 71       >                dw      Dict_Ptr + 2        // xt
1212+ E858             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E858             >
1212+ E858             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E858             >
1212+ E858             >//              ______________________________________________________________________
1212+ E858             >//              Dictionary part
1212+ E858             >
1212+ E858             >                org     Dict_Ptr
1212+ 7157             >
1212+ 7157 56 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 7159             >
1212+ 7159             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 7159 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 715C             >
1212+ 715C             >
1212+ 715C             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 715C             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 715C             >
1212+ 715C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 715C 59 6B 96 69                  dw      STATE, FETCH            // state @
1214+ 7160                                                              // if
1215+ 7160 F5 63                        dw      ZBRANCH
1216+ 7162 12 00                        dw      Dot_C_Else - $
1217+ 7164 5F 6E 1C 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 7168 D1 70 AB 69                  dw          WORD, CFETCH        //      word c@
1219+ 716C B8 68 BE 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 7170                                                              // else
1221+ 7170 E8 63                        dw      BRANCH
1222+ 7172 08 00                        dw      Dot_C_Endif - $
1223+ 7174              Dot_C_Else:
1224+ 7174 D1 70 2B 6F                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 7178 7F 6F
1225+ 717A              Dot_C_Endif:                                    // endif
1226+ 717A 4C 68                        dw      EXIT                    ;
1227+ 717C
1228+ 717C              //  ______________________________________________________________________
1229+ 717C              //
1230+ 717C              // ."           c --
1231+ 717C                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 717C             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 717C             >
1231+ 717C             >Dict_Ptr        defl    $
1231+ 717C             >
1231+ 717C             >//              ______________________________________________________________________
1231+ 717C             >//              Heap part
1231+ 717C             >
1231+ 717C             >
1231+ 717C             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E858             >
1231+ E858             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E858             >Latest_Definition defl  Heap_Ptr
1231+ E858             >
1231+ E858             >                // dummy db directives used to calculate length of namec
1231+ E858 2E 22       >                db      '."'
1231+ E85A             >len_NFA         defl    $ - temp_NFA
1231+ E85A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E858             >
1231+ E858 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E859 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E85B             >                org     $-1                 // alter last byte of Name just above to set
1231+ E85A A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E85B             >
1231+ E85B 51 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E85D             >Prev_Ptr        defl    Heap_Ptr
1231+ E85D             >
1231+ E85D             >mirror_Ptr      defl    $
1231+ E85D             >
1231+ E85D 7E 71       >                dw      Dict_Ptr + 2        // xt
1231+ E85F             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E85F             >
1231+ E85F             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E85F             >
1231+ E85F             >//              ______________________________________________________________________
1231+ E85F             >//              Dictionary part
1231+ E85F             >
1231+ E85F             >                org     Dict_Ptr
1231+ 717C             >
1231+ 717C 5D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 717E             >
1231+ 717E             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 717E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 7181             >
1231+ 7181             >
1231+ 7181             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 7181             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 7181             >
1231+ 7181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 7181 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 7185 59 71                        dw      DOT_C                   // [compile] .c
1234+ 7187 4C 68                        dw      EXIT                    // ; immediate
1235+ 7189
1236+ 7189              //  ______________________________________________________________________
1237+ 7189              //
1238+ 7189              // .(           c --
1239+ 7189                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 7189             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 7189             >
1239+ 7189             >Dict_Ptr        defl    $
1239+ 7189             >
1239+ 7189             >//              ______________________________________________________________________
1239+ 7189             >//              Heap part
1239+ 7189             >
1239+ 7189             >
1239+ 7189             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E85F             >
1239+ E85F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E85F             >Latest_Definition defl  Heap_Ptr
1239+ E85F             >
1239+ E85F             >                // dummy db directives used to calculate length of namec
1239+ E85F 2E 28       >                db      ".("
1239+ E861             >len_NFA         defl    $ - temp_NFA
1239+ E861             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E85F             >
1239+ E85F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E860 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E862             >                org     $-1                 // alter last byte of Name just above to set
1239+ E861 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E862             >
1239+ E862 58 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E864             >Prev_Ptr        defl    Heap_Ptr
1239+ E864             >
1239+ E864             >mirror_Ptr      defl    $
1239+ E864             >
1239+ E864 8B 71       >                dw      Dict_Ptr + 2        // xt
1239+ E866             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E866             >
1239+ E866             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E866             >
1239+ E866             >//              ______________________________________________________________________
1239+ E866             >//              Dictionary part
1239+ E866             >
1239+ E866             >                org     Dict_Ptr
1239+ 7189             >
1239+ 7189 64 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 718B             >
1239+ 718B             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 718B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 718E             >
1239+ 718E             >
1239+ 718E             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 718E             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 718E             >
1239+ 718E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 718E A3 63 29 00                  dw      LIT, ")"                // [char] )
1241+ 7192 59 71                        dw      DOT_C                   // [compile] .c
1242+ 7194 4C 68                        dw      EXIT                    // ; immediate
1243+ 7196
1244+ 7196              //  ______________________________________________________________________
1245+ 7196              //
1246+ 7196              // (sgn)        a -- a f
1247+ 7196              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 7196              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 7196              // called by NUMBER and (EXP)
1250+ 7196                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 7196             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 7196             >
1250+ 7196             >Dict_Ptr        defl    $
1250+ 7196             >
1250+ 7196             >//              ______________________________________________________________________
1250+ 7196             >//              Heap part
1250+ 7196             >
1250+ 7196             >
1250+ 7196             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E866             >
1250+ E866             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E866             >Latest_Definition defl  Heap_Ptr
1250+ E866             >
1250+ E866             >                // dummy db directives used to calculate length of namec
1250+ E866 28 53 47 4E >                db      "(SGN)"
1250+ E86A 29          >
1250+ E86B             >len_NFA         defl    $ - temp_NFA
1250+ E86B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E866             >
1250+ E866 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E867 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E86B 29          >
1250+ E86C             >                org     $-1                 // alter last byte of Name just above to set
1250+ E86B A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E86C             >
1250+ E86C 5F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E86E             >Prev_Ptr        defl    Heap_Ptr
1250+ E86E             >
1250+ E86E             >mirror_Ptr      defl    $
1250+ E86E             >
1250+ E86E 98 71       >                dw      Dict_Ptr + 2        // xt
1250+ E870             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E870             >
1250+ E870             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E870             >
1250+ E870             >//              ______________________________________________________________________
1250+ E870             >//              Dictionary part
1250+ E870             >
1250+ E870             >                org     Dict_Ptr
1250+ 7196             >
1250+ 7196 6E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 7198             >
1250+ 7198             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 7198 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 719B             >
1250+ 719B             >
1250+ 719B             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 719B             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 719B             >
1250+ 719B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 719B 25 69 B8 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 719F AB 69
1252+ 71A1 25 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 71A5 2D 00 FE 6B
1253+ 71A9                                                              // if
1254+ 71A9 F5 63                        dw      ZBRANCH
1255+ 71AB 12 00                        dw      CSgn_Else_0 - $
1256+ 71AD 0A 69                        dw          DROP                //      drop
1257+ 71AF B8 68                        dw          ONE_PLUS            //      1+
1258+ 71B1 95 6A 65 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 71B5 7E 69
1259+ 71B7 95 6A                        dw          ONE                 //      1
1260+ 71B9                                                              // else
1261+ 71B9 E8 63                        dw      BRANCH
1262+ 71BB 16 00                        dw      CSgn_Endif_0 - $
1263+ 71BD              CSgn_Else_0:
1264+ 71BD A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 71C1 FE 6B
1265+ 71C3                                                              //      if
1266+ 71C3 F5 63                        dw          ZBRANCH
1267+ 71C5 0A 00                        dw          CSgn_Endif_1 - $
1268+ 71C7 B8 68                        dw              ONE_PLUS        //          1+
1269+ 71C9 95 6A 65 6B                  dw              ONE, DPL        //          1 dpl
1270+ 71CD 7E 69                        dw              PLUSSTORE       //          +!
1271+ 71CF              CSgn_Endif_1                                    //      endif
1272+ 71CF 8E 6A                        dw          ZERO                //      0
1273+ 71D1              CSgn_Endif_0:                                   // endif
1274+ 71D1 4C 68                        dw      EXIT
1275+ 71D3
1276+ 71D3              //  ______________________________________________________________________
1277+ 71D3              //
1278+ 71D3              // (number)     d a -- d1 a1
1279+ 71D3              // using the current BASE parse characters stored in address a
1280+ 71D3              // accumulating a double precision integer d
1281+ 71D3              // the process stops at the first not-convertible character
1282+ 71D3              // A double-number is kept in CPU registers as HLDE.
1283+ 71D3              // On the stack a double number is treated as two single numbers
1284+ 71D3              // where HL is on the top of the stack and DE is the second from top,
1285+ 71D3              // so in the stack memory it appears as LHED.
1286+ 71D3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 71D3                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 71D3             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 71D3             >
1287+ 71D3             >Dict_Ptr        defl    $
1287+ 71D3             >
1287+ 71D3             >//              ______________________________________________________________________
1287+ 71D3             >//              Heap part
1287+ 71D3             >
1287+ 71D3             >
1287+ 71D3             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E870             >
1287+ E870             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E870             >Latest_Definition defl  Heap_Ptr
1287+ E870             >
1287+ E870             >                // dummy db directives used to calculate length of namec
1287+ E870 28 4E 55 4D >                db      "(NUMBER)"
1287+ E874 42 45 52 29 >
1287+ E878             >len_NFA         defl    $ - temp_NFA
1287+ E878             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E870             >
1287+ E870 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E871 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E875 42 45 52 29 >
1287+ E879             >                org     $-1                 // alter last byte of Name just above to set
1287+ E878 A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E879             >
1287+ E879 66 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E87B             >Prev_Ptr        defl    Heap_Ptr
1287+ E87B             >
1287+ E87B             >mirror_Ptr      defl    $
1287+ E87B             >
1287+ E87B D5 71       >                dw      Dict_Ptr + 2        // xt
1287+ E87D             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E87D             >
1287+ E87D             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E87D             >
1287+ E87D             >//              ______________________________________________________________________
1287+ E87D             >//              Dictionary part
1287+ E87D             >
1287+ E87D             >                org     Dict_Ptr
1287+ 71D3             >
1287+ 71D3 7B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 71D5             >
1287+ 71D5             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 71D5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 71D8             >
1287+ 71D8             >
1287+ 71D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 71D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 71D8             >
1287+ 71D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 71D8                                                              // begin
1289+ 71D8              CNumber_Begin:
1290+ 71D8 B8 68                        dw          ONE_PLUS            //      1+
1291+ 71DA 25 69 56 68                  dw          DUP, TO_R           //      dup >r
1292+ 71DE AB 69                        dw          CFETCH              //      @
1293+ 71E0 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1294+ 71E4 4D 64                        dw          DIGIT               //      digit
1295+ 71E6                                                              // while
1296+ 71E6 F5 63                        dw      ZBRANCH
1297+ 71E8 2C 00                        dw      CNumber_While_end - $
1298+ 71EA 1E 69                        dw          SWAP                //      swap
1299+ 71EC 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1300+ 71F0 B1 67                        dw          UM_MUL              //      um*
1301+ 71F2 0A 69 2C 69                  dw          DROP, ROT           //      drop rot
1302+ 71F6 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1303+ 71FA B1 67                        dw          UM_MUL              //      um*
1304+ 71FC A9 68                        dw          DPLUS               //      d+
1305+ 71FE 65 6B 96 69                  dw          DPL, FETCH          //      dpl @
1306+ 7202 B8 68                        dw          ONE_PLUS            //      1+
1307+ 7204                                                              //      if
1308+ 7204 F5 63                        dw          ZBRANCH
1309+ 7206 08 00                        dw          CNumber_Endif - $
1310+ 7208 95 6A 65 6B                  dw              ONE, DPL        //          1 dpl
1311+ 720C 7E 69                        dw              PLUSSTORE       //          +!
1312+ 720E              CNumber_Endif:                                  //      endif
1313+ 720E 61 68                        dw             R_TO             //      r>  ( balance rp )
1314+ 7210 E8 63                        dw      BRANCH
1315+ 7212 C6 FF                        dw      CNumber_Begin - $
1316+ 7214              CNumber_While_end:                              // repeat
1317+ 7214 61 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 7216 4C 68                        dw      EXIT                    // ;
1319+ 7218
1320+ 7218              //  ______________________________________________________________________
1321+ 7218              //
1322+ 7218              // (prefix)
1323+ 7218                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 7218             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 7218             >
1323+ 7218             >Dict_Ptr        defl    $
1323+ 7218             >
1323+ 7218             >//              ______________________________________________________________________
1323+ 7218             >//              Heap part
1323+ 7218             >
1323+ 7218             >
1323+ 7218             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E87D             >
1323+ E87D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E87D             >Latest_Definition defl  Heap_Ptr
1323+ E87D             >
1323+ E87D             >                // dummy db directives used to calculate length of namec
1323+ E87D 28 50 52 45 >                db      "(PREFIX)"
1323+ E881 46 49 58 29 >
1323+ E885             >len_NFA         defl    $ - temp_NFA
1323+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E87D             >
1323+ E87D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E87E 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E882 46 49 58 29 >
1323+ E886             >                org     $-1                 // alter last byte of Name just above to set
1323+ E885 A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E886             >
1323+ E886 70 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E888             >Prev_Ptr        defl    Heap_Ptr
1323+ E888             >
1323+ E888             >mirror_Ptr      defl    $
1323+ E888             >
1323+ E888 1A 72       >                dw      Dict_Ptr + 2        // xt
1323+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E88A             >
1323+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E88A             >
1323+ E88A             >//              ______________________________________________________________________
1323+ E88A             >//              Dictionary part
1323+ E88A             >
1323+ E88A             >                org     Dict_Ptr
1323+ 7218             >
1323+ 7218 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 721A             >
1323+ 721A             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 721A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 721D             >
1323+ 721D             >
1323+ 721D             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 721D             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 721D             >
1323+ 721D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 721D 25 69 B8 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 7221 AB 69
1325+ 7223 25 69 56 68                  dw      DUP, TO_R               // dup >r
1326+ 7227 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 722B FE 6B
1327+ 722D                                                              // if
1328+ 722D F5 63                        dw      ZBRANCH
1329+ 722F 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 7231 B8 68                        dw          ONE_PLUS            //      1+
1331+ 7233 A3 63 10 00                  dw          LIT, 16
1332+ 7237 5F 6B A0 69                  dw          BASE, STORE         //      16 base !
1333+ 723B              CPrefix_Endif_0:                                // endif
1334+ 723B 61 68                        dw      R_TO                    // r>
1335+ 723D A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 7241 FE 6B
1336+ 7243                                                              // if
1337+ 7243 F5 63                        dw      ZBRANCH
1338+ 7245 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 7247 B8 68                        dw          ONE_PLUS            //      1+
1340+ 7249 9C 6A                        dw          TWO
1341+ 724B 5F 6B A0 69                  dw          BASE, STORE         //      2 base !
1342+ 724F              CPrefix_Endif_1:                                // endif
1343+ 724F 4C 68                        dw      EXIT
1344+ 7251
1345+ 7251              //  ______________________________________________________________________
1346+ 7251
1347+ 7251                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 7251             >
1347+ 7251             >Dict_Ptr        defl    $
1347+ 7251             >
1347+ 7251             >//              ______________________________________________________________________
1347+ 7251             >//              Heap part
1347+ 7251             >
1347+ 7251             >
1347+ 7251             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E88A             >
1347+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E88A             >Latest_Definition defl  Heap_Ptr
1347+ E88A             >
1347+ E88A             >                // dummy db directives used to calculate length of namec
1347+ E88A 50 44 4F 4D >                db      "PDOM"
1347+ E88E             >len_NFA         defl    $ - temp_NFA
1347+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E88A             >
1347+ E88A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E88B 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1347+ E88E CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E88F             >
1347+ E88F 7D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E891             >Prev_Ptr        defl    Heap_Ptr
1347+ E891             >
1347+ E891             >mirror_Ptr      defl    $
1347+ E891             >
1347+ E891 53 72       >                dw      Dict_Ptr + 2        // xt
1347+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E893             >
1347+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E893             >
1347+ E893             >//              ______________________________________________________________________
1347+ E893             >//              Dictionary part
1347+ E893             >
1347+ E893             >                org     Dict_Ptr
1347+ 7251             >
1347+ 7251 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 7253             >
1347+ 7253             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 7253 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 7256             >
1347+ 7256             >
1347+ 7256             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 7256             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 7256             >
1347+ 7256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 7256 2C 2F 2D 3A                  db ',/-:'
1349+ 725A
1350+ 725A                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 725A             >
1350+ 725A             >Dict_Ptr        defl    $
1350+ 725A             >
1350+ 725A             >//              ______________________________________________________________________
1350+ 725A             >//              Heap part
1350+ 725A             >
1350+ 725A             >
1350+ 725A             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E893             >
1350+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E893             >Latest_Definition defl  Heap_Ptr
1350+ E893             >
1350+ E893             >                // dummy db directives used to calculate length of namec
1350+ E893 50 43 44 4D >                db      "PCDM"
1350+ E897             >len_NFA         defl    $ - temp_NFA
1350+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E893             >
1350+ E893 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E894 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E898             >                org     $-1                 // alter last byte of Name just above to set
1350+ E897 CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E898             >
1350+ E898 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E89A             >Prev_Ptr        defl    Heap_Ptr
1350+ E89A             >
1350+ E89A             >mirror_Ptr      defl    $
1350+ E89A             >
1350+ E89A 5C 72       >                dw      Dict_Ptr + 2        // xt
1350+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E89C             >
1350+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E89C             >
1350+ E89C             >//              ______________________________________________________________________
1350+ E89C             >//              Dictionary part
1350+ E89C             >
1350+ E89C             >                org     Dict_Ptr
1350+ 725A             >
1350+ 725A 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 725C             >
1350+ 725C             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 725C CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 725F             >
1350+ 725F             >
1350+ 725F             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 725F             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 725F             >
1350+ 725F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 725F 2E 2E 2E 2E                  db '....'
1352+ 7263
1353+ 7263              //  ______________________________________________________________________
1354+ 7263              //
1355+ 7263              // number       a -- d
1356+ 7263                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 7263             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 7263             >
1356+ 7263             >Dict_Ptr        defl    $
1356+ 7263             >
1356+ 7263             >//              ______________________________________________________________________
1356+ 7263             >//              Heap part
1356+ 7263             >
1356+ 7263             >
1356+ 7263             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E89C             >
1356+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E89C             >Latest_Definition defl  Heap_Ptr
1356+ E89C             >
1356+ E89C             >                // dummy db directives used to calculate length of namec
1356+ E89C 4E 55 4D 42 >                db      "NUMBER"
1356+ E8A0 45 52       >
1356+ E8A2             >len_NFA         defl    $ - temp_NFA
1356+ E8A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E89C             >
1356+ E89C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E89D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E8A1 45 52       >
1356+ E8A3             >                org     $-1                 // alter last byte of Name just above to set
1356+ E8A2 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E8A3             >
1356+ E8A3 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E8A5             >Prev_Ptr        defl    Heap_Ptr
1356+ E8A5             >
1356+ E8A5             >mirror_Ptr      defl    $
1356+ E8A5             >
1356+ E8A5 65 72       >                dw      Dict_Ptr + 2        // xt
1356+ E8A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E8A7             >
1356+ E8A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E8A7             >
1356+ E8A7             >//              ______________________________________________________________________
1356+ E8A7             >//              Dictionary part
1356+ E8A7             >
1356+ E8A7             >                org     Dict_Ptr
1356+ 7263             >
1356+ 7263 A5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 7265             >
1356+ 7265             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 7265 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 7268             >
1356+ 7268             >
1356+ 7268             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 7268             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 7268             >
1356+ 7268             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 7268 8E 6A 8E 6A                  dw      ZERO, ZERO              // 0 0
1358+ 726C 2C 69                        dw      ROT                     // rot
1359+ 726E 98 71 56 68                  dw      CSGN, TO_R              // (sgn) >r
1360+ 7272 5F 6B 96 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 7276 56 68
1361+ 7278 1A 72                        dw      CPREFIX                 // (prefix)   // ***
1362+ 727A AA 6A 65 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 727E A0 69
1363+ 7280 D5 71                        dw      CNUMBER                 // (number)
1364+ 7282              Number_Begin:                                   // begin
1365+ 7282 25 69 AB 69                  dw        DUP, CFETCH             // dup c@
1366+ 7286 56 68                        dw        TO_R                    // >r
1367+ 7288 5C 72 53 72                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 728C A3 63 04 00
1368+ 7290 61 68                        dw        R_TO                    // r>
1369+ 7292 5B 65                        dw        C_MAP                   // (map)
1370+ 7294 8E 6A 1E 69                  dw        ZERO, SWAP              // 0 swap
1371+ 7298 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 729C FE 6B
1372+ 729E
1373+ 729E F5 63                        dw        ZBRANCH                 // if
1374+ 72A0 0A 00                        dw        Number_Endif_1 - $
1375+ 72A2 8E 6A 65 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 72A6 A0 69
1376+ 72A8 B8 68                        dw          ONE_PLUS                //      1+
1377+ 72AA              Number_Endif_1:                                   // endif
1378+ 72AA
1379+ 72AA F5 63                        dw      ZBRANCH                // while
1380+ 72AC 08 00                        dw      Number_While_end - $
1381+ 72AE D5 71                        dw        CNUMBER                 // (number)
1382+ 72B0 E8 63                        dw      BRANCH
1383+ 72B2 D0 FF                        dw      Number_Begin - $
1384+ 72B4              Number_While_end:                               // repeat
1385+ 72B4
1386+ 72B4 AB 69 B1 6A                  dw      CFETCH, BL              // c@ bl
1387+ 72B8 F2 6B 8E 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 72BC EF 6D
1388+ 72BE 61 68 5F 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 72C2 A0 69
1389+ 72C4 61 68                        dw      R_TO                    // r>
1390+ 72C6                                                              // if
1391+ 72C6 F5 63                        dw      ZBRANCH
1392+ 72C8 04 00                        dw      Number_Endif_2 - $
1393+ 72CA EE 68                        dw          DMINUS              //      dminus
1394+ 72CC              Number_Endif_2:                                 // endif
1395+ 72CC 4C 68                        dw      EXIT                    // ;
1396+ 72CE
1397+ 72CE              //  ______________________________________________________________________
1398+ 72CE              //
1399+ 72CE              // twofind      a -- d
1400+ 72CE                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 72CE             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 72CE             >
1400+ 72CE             >Dict_Ptr        defl    $
1400+ 72CE             >
1400+ 72CE             >//              ______________________________________________________________________
1400+ 72CE             >//              Heap part
1400+ 72CE             >
1400+ 72CE             >
1400+ 72CE             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E8A7             >
1400+ E8A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E8A7             >Latest_Definition defl  Heap_Ptr
1400+ E8A7             >
1400+ E8A7             >                // dummy db directives used to calculate length of namec
1400+ E8A7 32 46 49 4E >                db      "2FIND"
1400+ E8AB 44          >
1400+ E8AC             >len_NFA         defl    $ - temp_NFA
1400+ E8AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E8A7             >
1400+ E8A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E8A8 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8AC 44          >
1400+ E8AD             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8AC C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8AD             >
1400+ E8AD 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8AF             >Prev_Ptr        defl    Heap_Ptr
1400+ E8AF             >
1400+ E8AF             >mirror_Ptr      defl    $
1400+ E8AF             >
1400+ E8AF D0 72       >                dw      Dict_Ptr + 2        // xt
1400+ E8B1             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8B1             >
1400+ E8B1             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8B1             >
1400+ E8B1             >//              ______________________________________________________________________
1400+ E8B1             >//              Dictionary part
1400+ E8B1             >
1400+ E8B1             >                org     Dict_Ptr
1400+ 72CE             >
1400+ 72CE AF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 72D0             >
1400+ 72D0             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 72D0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 72D3             >
1400+ 72D3             >
1400+ 72D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 72D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 72D3             >
1400+ 72D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 72D3 56 68 6C 68                  dw      TO_R, R_OP              // >r r@
1402+ 72D7 4D 6B 96 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 72DB 96 69
1403+ 72DD BB 64                        dw      C_FIND                  // (find)
1404+ 72DF 5D 6C                        dw      QDUP                    // ?dup
1405+ 72E1 71 68                        dw      ZEQUAL                  // 0=
1406+ 72E3                                                              // if
1407+ 72E3 F5 63                        dw      ZBRANCH
1408+ 72E5 24 00                        dw      LFind_Endif - $
1409+ 72E7 6C 68                        dw          R_OP                //      r@
1410+ 72E9                              // dw          LATEST               //      latest
1411+ 72E9 53 6B 96 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 72ED 96 69
1412+ 72EF BB 64                        dw          C_FIND              //      (find)
1413+ 72F1
1414+ 72F1 5D 6C                            dw      QDUP                    // ?dup
1415+ 72F3 71 68                            dw      ZEQUAL                  // 0=
1416+ 72F5                                                                  // if
1417+ 72F5 F5 63                            dw      ZBRANCH
1418+ 72F7 12 00                            dw      LFind_Endif2 - $
1419+ 72F9 6C 68                            dw          R_OP                //      r@
1420+ 72FB A3 63 4A 75                      dw          LIT, FORTH, TO_BODY
1420+ 72FF 6E 6D
1421+ 7301 CE 68 CE 68                      dw          CELL_PLUS, CELL_PLUS
1422+ 7305 96 69                            dw          FETCH
1423+ 7307 BB 64                            dw          C_FIND              //      (find)
1424+ 7309              LFind_Endif2:                                    // endif
1425+ 7309
1426+ 7309
1427+ 7309              LFind_Endif:                                    // endif
1428+ 7309 61 68 0A 69                  dw      R_TO, DROP              // r> drop
1429+ 730D 4C 68                        dw      EXIT                    // ;
1430+ 730F
1431+ 730F              //  ______________________________________________________________________
1432+ 730F              //
1433+ 730F              // -find        a -- d
1434+ 730F                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 730F             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 730F             >
1434+ 730F             >Dict_Ptr        defl    $
1434+ 730F             >
1434+ 730F             >//              ______________________________________________________________________
1434+ 730F             >//              Heap part
1434+ 730F             >
1434+ 730F             >
1434+ 730F             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8B1             >
1434+ E8B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8B1             >Latest_Definition defl  Heap_Ptr
1434+ E8B1             >
1434+ E8B1             >                // dummy db directives used to calculate length of namec
1434+ E8B1 2D 46 49 4E >                db      "-FIND"
1434+ E8B5 44          >
1434+ E8B6             >len_NFA         defl    $ - temp_NFA
1434+ E8B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8B1             >
1434+ E8B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8B2 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8B6 44          >
1434+ E8B7             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8B6 C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8B7             >
1434+ E8B7 A7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8B9             >Prev_Ptr        defl    Heap_Ptr
1434+ E8B9             >
1434+ E8B9             >mirror_Ptr      defl    $
1434+ E8B9             >
1434+ E8B9 11 73       >                dw      Dict_Ptr + 2        // xt
1434+ E8BB             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8BB             >
1434+ E8BB             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8BB             >
1434+ E8BB             >//              ______________________________________________________________________
1434+ E8BB             >//              Dictionary part
1434+ E8BB             >
1434+ E8BB             >                org     Dict_Ptr
1434+ 730F             >
1434+ 730F B9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 7311             >
1434+ 7311             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 7311 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 7314             >
1434+ 7314             >
1434+ 7314             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 7314             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 7314             >
1434+ 7314             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 7314 B1 6A D1 70                  dw      BL, WORD                // bl word
1436+ 7318 D0 72                        dw      TWOFIND                 // 2find
1437+ 731A 4C 68                        dw      EXIT                    // ;
1438+ 731C
1439+ 731C              //  ______________________________________________________________________
1440+ 731C              //
1441+ 731C              // (abort)      --
1442+ 731C                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 731C             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 731C             >
1442+ 731C             >Dict_Ptr        defl    $
1442+ 731C             >
1442+ 731C             >//              ______________________________________________________________________
1442+ 731C             >//              Heap part
1442+ 731C             >
1442+ 731C             >
1442+ 731C             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8BB             >
1442+ E8BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8BB             >Latest_Definition defl  Heap_Ptr
1442+ E8BB             >
1442+ E8BB             >                // dummy db directives used to calculate length of namec
1442+ E8BB 28 41 42 4F >                db      "(ABORT)"
1442+ E8BF 52 54 29    >
1442+ E8C2             >len_NFA         defl    $ - temp_NFA
1442+ E8C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8BB             >
1442+ E8BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8BC 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8C0 52 54 29    >
1442+ E8C3             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8C2 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8C3             >
1442+ E8C3 B1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8C5             >Prev_Ptr        defl    Heap_Ptr
1442+ E8C5             >
1442+ E8C5             >mirror_Ptr      defl    $
1442+ E8C5             >
1442+ E8C5 1E 73       >                dw      Dict_Ptr + 2        // xt
1442+ E8C7             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8C7             >
1442+ E8C7             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8C7             >
1442+ E8C7             >//              ______________________________________________________________________
1442+ E8C7             >//              Dictionary part
1442+ E8C7             >
1442+ E8C7             >                org     Dict_Ptr
1442+ 731C             >
1442+ 731C C5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 731E             >
1442+ 731E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 731E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 7321             >
1442+ 7321             >
1442+ 7321             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 7321             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 7321             >
1442+ 7321             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 7321 B1 75                        dw      ABORT                   // abort
1444+ 7323 4C 68                        dw      EXIT                    // ;
1445+ 7325
1446+ 7325              //  ______________________________________________________________________
1447+ 7325              //
1448+ 7325              // error        n --
1449+ 7325              // raise an error
1450+ 7325              // if WARNING is 0, prints "MSG#n".
1451+ 7325              // if WARNING is 1, prints line n of screen 4.
1452+ 7325              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 7325              // value can be negative or beyond block 4.
1454+ 7325                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 7325             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 7325             >
1454+ 7325             >Dict_Ptr        defl    $
1454+ 7325             >
1454+ 7325             >//              ______________________________________________________________________
1454+ 7325             >//              Heap part
1454+ 7325             >
1454+ 7325             >
1454+ 7325             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8C7             >
1454+ E8C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8C7             >Latest_Definition defl  Heap_Ptr
1454+ E8C7             >
1454+ E8C7             >                // dummy db directives used to calculate length of namec
1454+ E8C7 45 52 52 4F >                db      "ERROR"
1454+ E8CB 52          >
1454+ E8CC             >len_NFA         defl    $ - temp_NFA
1454+ E8CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8C7             >
1454+ E8C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8C8 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8CC 52          >
1454+ E8CD             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8CC D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8CD             >
1454+ E8CD BB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8CF             >Prev_Ptr        defl    Heap_Ptr
1454+ E8CF             >
1454+ E8CF             >mirror_Ptr      defl    $
1454+ E8CF             >
1454+ E8CF 27 73       >                dw      Dict_Ptr + 2        // xt
1454+ E8D1             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8D1             >
1454+ E8D1             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8D1             >
1454+ E8D1             >//              ______________________________________________________________________
1454+ E8D1             >//              Dictionary part
1454+ E8D1             >
1454+ E8D1             >                org     Dict_Ptr
1454+ 7325             >
1454+ 7325 CF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 7327             >
1454+ 7327             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 7327 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 732A             >
1454+ 732A             >
1454+ 732A             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 732A             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 732A             >
1454+ 732A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 732A FF 6A 96 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 732E 84 68
1456+ 7330                                                              // if
1457+ 7330 F5 63                        dw      ZBRANCH
1458+ 7332 04 00                        dw      Error_Endif_1 - $
1459+ 7334 1E 73                        dw          CABORT              //      (abort)
1460+ 7336              Error_Endif_1:                                  // endif
1461+ 7336 B3 6B 2B 6F                  dw      HERE, COUNT, TYPE       // here count type
1461+ 733A 7F 6F
1462+ 733C 1C 71                        dw      C_DOT_QUOTE             // .( ? )
1463+ 733E 02 3F 20                     db      2, "? "
1464+ 7341 8C 77                        dw      MESSAGE                 // message  ( forward )
1465+ 7343 E7 6A 96 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 7347 3C 68
1466+ 7349 2F 6B 96 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 734D 5D 6C
1467+ 734F                                                              // if
1468+ 734F F5 63                        dw      ZBRANCH
1469+ 7351 08 00                        dw      Error_Endif_2 - $
1470+ 7353 35 6B 96 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 7357 1E 69
1471+ 7359              Error_Endif_2:                                  // endif
1472+ 7359 75 75                        dw      QUIT                    // quit ( forward )
1473+ 735B 4C 68                        dw      EXIT                    // ;
1474+ 735D              //  ______________________________________________________________________
1475+ 735D              //
1476+ 735D              // id.          nfa --
1477+ 735D                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 735D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 735D             >
1477+ 735D             >Dict_Ptr        defl    $
1477+ 735D             >
1477+ 735D             >//              ______________________________________________________________________
1477+ 735D             >//              Heap part
1477+ 735D             >
1477+ 735D             >
1477+ 735D             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8D1             >
1477+ E8D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8D1             >Latest_Definition defl  Heap_Ptr
1477+ E8D1             >
1477+ E8D1             >                // dummy db directives used to calculate length of namec
1477+ E8D1 49 44 2E    >                db      "ID."
1477+ E8D4             >len_NFA         defl    $ - temp_NFA
1477+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8D1             >
1477+ E8D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8D2 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8D4 AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8D5             >
1477+ E8D5 C7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8D7             >Prev_Ptr        defl    Heap_Ptr
1477+ E8D7             >
1477+ E8D7             >mirror_Ptr      defl    $
1477+ E8D7             >
1477+ E8D7 5F 73       >                dw      Dict_Ptr + 2        // xt
1477+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8D9             >
1477+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8D9             >
1477+ E8D9             >//              ______________________________________________________________________
1477+ E8D9             >//              Dictionary part
1477+ E8D9             >
1477+ E8D9             >                org     Dict_Ptr
1477+ 735D             >
1477+ 735D D7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 735F             >
1477+ 735F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 735F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 7362             >
1477+ 7362             >
1477+ 7362             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 7362             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 7362             >
1477+ 7362             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 7362 13 6D                        dw      QTOHEAP
1479+ 7364 25 69 95 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 7368 8F 6C
1480+ 736A B8 68                        dw      ONE_PLUS                // 1+
1481+ 736C 01 69 F2 6B                  dw      OVER, SUBTRACT          // over -
1482+ 7370 25 69 56 68                  dw      DUP, TO_R               // >r
1483+ 7374 C2 70 1E 69                  dw      PAD, SWAP               // pad swap
1484+ 7378 8D 67                        dw      CMOVE                   // cmove
1485+ 737A C2 70 B8 68                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 737E 61 68 BF 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 7382 7F 6F 84 6C                  dw      TYPE, SPACE             // type
1488+ 7386 4C 68                        dw      EXIT                    // ;
1489+ 7388
1490+ 7388              //  ______________________________________________________________________
1491+ 7388              //
1492+ 7388              // code         -- cccc
1493+ 7388                              Colon_Def CODE,  "CODE", is_normal
1493+ 7388             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 7388             >
1493+ 7388             >Dict_Ptr        defl    $
1493+ 7388             >
1493+ 7388             >//              ______________________________________________________________________
1493+ 7388             >//              Heap part
1493+ 7388             >
1493+ 7388             >
1493+ 7388             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8D9             >
1493+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8D9             >Latest_Definition defl  Heap_Ptr
1493+ E8D9             >
1493+ E8D9             >                // dummy db directives used to calculate length of namec
1493+ E8D9 43 4F 44 45 >                db      "CODE"
1493+ E8DD             >len_NFA         defl    $ - temp_NFA
1493+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8D9             >
1493+ E8D9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8DA 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8DD C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8DE             >
1493+ E8DE D1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1493+ E8E0             >
1493+ E8E0             >mirror_Ptr      defl    $
1493+ E8E0             >
1493+ E8E0 8A 73       >                dw      Dict_Ptr + 2        // xt
1493+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8E2             >
1493+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8E2             >
1493+ E8E2             >//              ______________________________________________________________________
1493+ E8E2             >//              Dictionary part
1493+ E8E2             >
1493+ E8E2             >                org     Dict_Ptr
1493+ 7388             >
1493+ 7388 E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 738A             >
1493+ 738A             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 738A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 738D             >
1493+ 738D             >
1493+ 738D             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 738D             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 738D             >
1493+ 738D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 738D 11 73                        dw      LFIND                   // -find
1495+ 738F                                                              // if
1496+ 738F F5 63                        dw      ZBRANCH
1497+ 7391 10 00                        dw      Code_Endif - $
1498+ 7393 0A 69                        dw          DROP                //      drop
1499+ 7395 79 6D 5F 73                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 7399 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 739D 8C 77
1501+ 739F 84 6C                        dw          SPACE               //      space
1502+ 73A1              Code_Endif:                                     // endif
1503+ 73A1 B3 6B                        dw      HERE                    // here
1504+ 73A3                                                              // ( ---- here begins NFA ---- )
1505+ 73A3 25 69 AB 69                  dw      DUP, CFETCH             // dup c@
1506+ 73A7 F9 6A 96 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 73AB 37 6C
1507+ 73AD B8 68                        dw      ONE_PLUS                // 1+
1508+ 73AF 25 69 BE 6B                  dw      DUP, ALLOT              // dup allot
1509+ 73B3 CE 68 CE 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 73B7 56 68                        dw      TO_R                    // >r
1511+ 73B9 25 69                        dw      DUP                     // dup
1512+ 73BB A3 63                        dw      LIT
1513+ 73BD A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 73BF 8D 69                        dw      TOGGLE                  // toggle
1515+ 73C1 B3 6B BF 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 73C5 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 73C9 8D 69
1517+ 73CB                                                              // ( ---- here is LFA ---- )
1518+ 73CB 53 6B 96 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 73CF 96 69
1519+ 73D1 C9 6B                        dw      COMMA
1520+ 73D3 25 69 CE 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 73D7 C9 6B
1521+ 73D9 24 6D                        dw      HP_FETCH                // hp@
1522+ 73DB 53 6B 96 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 73DF A0 69
1523+ 73E1 24 6D F5 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 73E5 6C 68 8D 67                  dw      R_OP, CMOVE
1525+ 73E9 6C 68 E0 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 73ED BE 6B
1526+ 73EF 61 68 23 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 73F3 7E 69
1527+ 73F5 24 6D D3 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 73F9 C9 6B                        dw      COMMA
1529+ 73FB 8E 6A 36 6D                  dw      ZERO, SKIP_HP_PAGE
1530+ 73FF                                                              // ( ---- here is LFA ---- )
1531+ 73FF 4C 68                        dw      EXIT                    // ;
1532+ 7401
1533+ 7401              //  ______________________________________________________________________
1534+ 7401              //
1535+ 7401              // create       -- cccc     ( compile time )
1536+ 7401              //              -- a        ( run time )
1537+ 7401                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 7401             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 7401             >
1537+ 7401             >Dict_Ptr        defl    $
1537+ 7401             >
1537+ 7401             >//              ______________________________________________________________________
1537+ 7401             >//              Heap part
1537+ 7401             >
1537+ 7401             >
1537+ 7401             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8E2             >
1537+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8E2             >Latest_Definition defl  Heap_Ptr
1537+ E8E2             >
1537+ E8E2             >                // dummy db directives used to calculate length of namec
1537+ E8E2 43 52 45 41 >                db      "CREATE"
1537+ E8E6 54 45       >
1537+ E8E8             >len_NFA         defl    $ - temp_NFA
1537+ E8E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8E2             >
1537+ E8E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8E3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8E7 54 45       >
1537+ E8E9             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8E8 C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8E9             >
1537+ E8E9 D9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8EB             >Prev_Ptr        defl    Heap_Ptr
1537+ E8EB             >
1537+ E8EB             >mirror_Ptr      defl    $
1537+ E8EB             >
1537+ E8EB 03 74       >                dw      Dict_Ptr + 2        // xt
1537+ E8ED             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8ED             >
1537+ E8ED             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8ED             >
1537+ E8ED             >//              ______________________________________________________________________
1537+ E8ED             >//              Dictionary part
1537+ E8ED             >
1537+ E8ED             >                org     Dict_Ptr
1537+ 7401             >
1537+ 7401 EB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 7403             >
1537+ 7403             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 7403 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 7406             >
1537+ 7406             >
1537+ 7406             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 7406             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 7406             >
1537+ 7406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 7406 8A 73 9B 6E                  dw      CODE, SMUDGE            // code smudge
1539+ 740A A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 740E D8 6B
1540+ 7410 A3 63 75 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 7414 C9 6B
1541+ 7416 D7 6E                        dw      C_SEMICOLON_CODE
1542+ 7418                              // this routine is called from the call coded in CFA
1543+ 7418              Create_Ptr:
1544+ 7418
1545+ 7418
1546+ 7418
1547+ 7418                              next
1547+ 7418 DD E9       >                jp      (ix)
1548+ 741A
1549+ 741A              //  ______________________________________________________________________
1550+ 741A              //
1551+ 741A              // [compile]    -- cccc     ( compile time )
1552+ 741A                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 741A             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 741A             >
1552+ 741A             >Dict_Ptr        defl    $
1552+ 741A             >
1552+ 741A             >//              ______________________________________________________________________
1552+ 741A             >//              Heap part
1552+ 741A             >
1552+ 741A             >
1552+ 741A             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8ED             >
1552+ E8ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8ED             >Latest_Definition defl  Heap_Ptr
1552+ E8ED             >
1552+ E8ED             >                // dummy db directives used to calculate length of namec
1552+ E8ED 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8F1 50 49 4C 45 >
1552+ E8F5 5D          >
1552+ E8F6             >len_NFA         defl    $ - temp_NFA
1552+ E8F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8ED             >
1552+ E8ED C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8EE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8F2 50 49 4C 45 >
1552+ E8F6 5D          >
1552+ E8F7             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8F6 DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8F7             >
1552+ E8F7 E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8F9             >Prev_Ptr        defl    Heap_Ptr
1552+ E8F9             >
1552+ E8F9             >mirror_Ptr      defl    $
1552+ E8F9             >
1552+ E8F9 1C 74       >                dw      Dict_Ptr + 2        // xt
1552+ E8FB             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8FB             >
1552+ E8FB             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8FB             >
1552+ E8FB             >//              ______________________________________________________________________
1552+ E8FB             >//              Dictionary part
1552+ E8FB             >
1552+ E8FB             >                org     Dict_Ptr
1552+ 741A             >
1552+ 741A F9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 741C             >
1552+ 741C             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 741C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 741F             >
1552+ 741F             >
1552+ 741F             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 741F             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 741F             >
1552+ 741F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 741F 11 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 7421 71 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 7423 8E 6A EF 6D                  dw      ZERO, QERROR            // 0 ?error
1556+ 7427 0A 69                        dw      DROP                    // drop       (  cfa  )
1557+ 7429 C9 6B                        dw      COMMA                   // ,
1558+ 742B 4C 68                        dw      EXIT                    // ; immediate
1559+ 742D
1560+ 742D              //  ______________________________________________________________________
1561+ 742D              //
1562+ 742D              // literal      n --      ( compile time )
1563+ 742D                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 742D             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 742D             >
1563+ 742D             >Dict_Ptr        defl    $
1563+ 742D             >
1563+ 742D             >//              ______________________________________________________________________
1563+ 742D             >//              Heap part
1563+ 742D             >
1563+ 742D             >
1563+ 742D             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8FB             >
1563+ E8FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8FB             >Latest_Definition defl  Heap_Ptr
1563+ E8FB             >
1563+ E8FB             >                // dummy db directives used to calculate length of namec
1563+ E8FB 4C 49 54 45 >                db      "LITERAL"
1563+ E8FF 52 41 4C    >
1563+ E902             >len_NFA         defl    $ - temp_NFA
1563+ E902             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8FB             >
1563+ E8FB C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8FC 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E900 52 41 4C    >
1563+ E903             >                org     $-1                 // alter last byte of Name just above to set
1563+ E902 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E903             >
1563+ E903 ED 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E905             >Prev_Ptr        defl    Heap_Ptr
1563+ E905             >
1563+ E905             >mirror_Ptr      defl    $
1563+ E905             >
1563+ E905 2F 74       >                dw      Dict_Ptr + 2        // xt
1563+ E907             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E907             >
1563+ E907             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E907             >
1563+ E907             >//              ______________________________________________________________________
1563+ E907             >//              Dictionary part
1563+ E907             >
1563+ E907             >                org     Dict_Ptr
1563+ 742D             >
1563+ 742D 05 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 742F             >
1563+ 742F             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 742F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 7432             >
1563+ 7432             >
1563+ 7432             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 7432             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 7432             >
1563+ 7432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 7432 59 6B 96 69                  dw      STATE, FETCH            // state @
1565+ 7436                                                              // if
1566+ 7436 F5 63                        dw      ZBRANCH
1567+ 7438 08 00                        dw      Literal_Endif - $
1568+ 743A 5F 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1569+ 743E C9 6B                        dw          COMMA               //      ,
1570+ 7440              Literal_Endif:                                  // endif
1571+ 7440 4C 68                        dw      EXIT                    // ; immediate
1572+ 7442
1573+ 7442              //  ______________________________________________________________________
1574+ 7442              //
1575+ 7442              // dliteral     n --      ( compile time )
1576+ 7442                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 7442             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 7442             >
1576+ 7442             >Dict_Ptr        defl    $
1576+ 7442             >
1576+ 7442             >//              ______________________________________________________________________
1576+ 7442             >//              Heap part
1576+ 7442             >
1576+ 7442             >
1576+ 7442             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E907             >
1576+ E907             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E907             >Latest_Definition defl  Heap_Ptr
1576+ E907             >
1576+ E907             >                // dummy db directives used to calculate length of namec
1576+ E907 44 4C 49 54 >                db      "DLITERAL"
1576+ E90B 45 52 41 4C >
1576+ E90F             >len_NFA         defl    $ - temp_NFA
1576+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E907             >
1576+ E907 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E908 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E90C 45 52 41 4C >
1576+ E910             >                org     $-1                 // alter last byte of Name just above to set
1576+ E90F CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E910             >
1576+ E910 FB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E912             >Prev_Ptr        defl    Heap_Ptr
1576+ E912             >
1576+ E912             >mirror_Ptr      defl    $
1576+ E912             >
1576+ E912 44 74       >                dw      Dict_Ptr + 2        // xt
1576+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E914             >
1576+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E914             >
1576+ E914             >//              ______________________________________________________________________
1576+ E914             >//              Dictionary part
1576+ E914             >
1576+ E914             >                org     Dict_Ptr
1576+ 7442             >
1576+ 7442 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 7444             >
1576+ 7444             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 7444 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 7447             >
1576+ 7447             >
1576+ 7447             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 7447             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 7447             >
1576+ 7447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 7447 59 6B 96 69                  dw      STATE, FETCH            // state @
1578+ 744B                                                              // if
1579+ 744B F5 63                        dw      ZBRANCH
1580+ 744D 08 00                        dw      DLiteral_Endif - $
1581+ 744F 1E 69                        dw          SWAP                //      swap
1582+ 7451 2F 74 2F 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 7455              DLiteral_Endif:                                 // endif
1584+ 7455 4C 68                        dw      EXIT                    // ; immediate
1585+ 7457
1586+ 7457              //  ______________________________________________________________________
1587+ 7457              //
1588+ 7457              // [char]       n --      ( compile time )
1589+ 7457              // inside colon definition, gets first character from next input word
1590+ 7457              // and compiles it as literal.
1591+ 7457                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 7457             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 7457             >
1591+ 7457             >Dict_Ptr        defl    $
1591+ 7457             >
1591+ 7457             >//              ______________________________________________________________________
1591+ 7457             >//              Heap part
1591+ 7457             >
1591+ 7457             >
1591+ 7457             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E914             >
1591+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E914             >Latest_Definition defl  Heap_Ptr
1591+ E914             >
1591+ E914             >                // dummy db directives used to calculate length of namec
1591+ E914 5B 43 48 41 >                db      "[CHAR]"
1591+ E918 52 5D       >
1591+ E91A             >len_NFA         defl    $ - temp_NFA
1591+ E91A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E914             >
1591+ E914 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E915 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E919 52 5D       >
1591+ E91B             >                org     $-1                 // alter last byte of Name just above to set
1591+ E91A DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E91B             >
1591+ E91B 07 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E91D             >Prev_Ptr        defl    Heap_Ptr
1591+ E91D             >
1591+ E91D             >mirror_Ptr      defl    $
1591+ E91D             >
1591+ E91D 59 74       >                dw      Dict_Ptr + 2        // xt
1591+ E91F             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E91F             >
1591+ E91F             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E91F             >
1591+ E91F             >//              ______________________________________________________________________
1591+ E91F             >//              Dictionary part
1591+ E91F             >
1591+ E91F             >                org     Dict_Ptr
1591+ 7457             >
1591+ 7457 1D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 7459             >
1591+ 7459             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 7459 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 745C             >
1591+ 745C             >
1591+ 745C             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 745C             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 745C             >
1591+ 745C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 745C 33 71 2F 74                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 7460 4C 68                        dw      EXIT                    // ; immediate
1594+ 7462
1595+ 7462              //  ______________________________________________________________________
1596+ 7462              //
1597+ 7462              // 0x00         n --      ( compile time )
1598+ 7462                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 7462             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 7462             >
1598+ 7462             >Dict_Ptr        defl    $
1598+ 7462             >
1598+ 7462             >//              ______________________________________________________________________
1598+ 7462             >//              Heap part
1598+ 7462             >
1598+ 7462             >
1598+ 7462             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E91F             >
1598+ E91F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E91F             >Latest_Definition defl  Heap_Ptr
1598+ E91F             >
1598+ E91F             >                // dummy db directives used to calculate length of namec
1598+ E91F 00          >                db      $00
1598+ E920             >len_NFA         defl    $ - temp_NFA
1598+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E91F             >
1598+ E91F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E920 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E921             >                org     $-1                 // alter last byte of Name just above to set
1598+ E920 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E921             >
1598+ E921 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E923             >Prev_Ptr        defl    Heap_Ptr
1598+ E923             >
1598+ E923             >mirror_Ptr      defl    $
1598+ E923             >
1598+ E923 64 74       >                dw      Dict_Ptr + 2        // xt
1598+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E925             >
1598+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E925             >
1598+ E925             >//              ______________________________________________________________________
1598+ E925             >//              Dictionary part
1598+ E925             >
1598+ E925             >                org     Dict_Ptr
1598+ 7462             >
1598+ 7462 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 7464             >
1598+ 7464             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 7464 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 7467             >
1598+ 7467             >
1598+ 7467             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 7467             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 7467             >
1598+ 7467             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 7467 2F 6B 96 69                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 746B 95 6A
1600+ 746D 2C 6C                        dw      GREATER                 // > if
1601+ 746F                                                              // if
1602+ 746F F5 63                        dw      ZBRANCH
1603+ 7471 28 00                        dw      Nul_Else_1 - $
1604+ 7473 95 6A 2F 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 7477 7E 69
1605+ 7479 8E 6A 35 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 747D A0 69
1606+ 747F 2F 6B 96 69                  dw          BLK, FETCH          //      blk @
1607+ 7483 C6 6A                        dw          BSCR                //      b/scr
1608+ 7485 BF 68                        dw          ONE_SUBTRACT        //      1 -
1609+ 7487 0C 68                        dw          AND_OP              //      and  ( this is tricky )
1610+ 7489 71 68                        dw          ZEQUAL              //      0=
1611+ 748B                                                              //      if
1612+ 748B F5 63                        dw          ZBRANCH
1613+ 748D 08 00                        dw          Nul_Endif_2 - $
1614+ 748F 17 6E                        dw              QEXEC           //          ?exec
1615+ 7491 61 68 0A 69                  dw              R_TO, DROP      //          r> drop
1616+ 7495              Nul_Endif_2:                                    //      endif
1617+ 7495 E8 63                        dw      BRANCH
1618+ 7497 06 00                        dw      Nul_Endif_1 - $
1619+ 7499              Nul_Else_1:                                     // else
1620+ 7499 61 68 0A 69                  dw          R_TO, DROP          //      r> drop
1621+ 749D              Nul_Endif_1:                                    // endif
1622+ 749D 4C 68                        dw      EXIT                    // ;
1623+ 749F
1624+ 749F              //  ______________________________________________________________________
1625+ 749F              //
1626+ 749F              // ?stack       --
1627+ 749F              // Raise error #1 if stack is empty and you pop it
1628+ 749F              // Raise error #7 if stack is full.
1629+ 749F              // This means SP must always stay between HERE and FFFF
1630+ 749F              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 749F              // for Next 8K MMU paging this is $DOE8
1632+ 749F                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 749F             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 749F             >
1632+ 749F             >Dict_Ptr        defl    $
1632+ 749F             >
1632+ 749F             >//              ______________________________________________________________________
1632+ 749F             >//              Heap part
1632+ 749F             >
1632+ 749F             >
1632+ 749F             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E925             >
1632+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E925             >Latest_Definition defl  Heap_Ptr
1632+ E925             >
1632+ E925             >                // dummy db directives used to calculate length of namec
1632+ E925 3F 53 54 41 >                db      "?STACK"
1632+ E929 43 4B       >
1632+ E92B             >len_NFA         defl    $ - temp_NFA
1632+ E92B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E925             >
1632+ E925 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E926 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E92A 43 4B       >
1632+ E92C             >                org     $-1                 // alter last byte of Name just above to set
1632+ E92B CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E92C             >
1632+ E92C 1F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E92E             >Prev_Ptr        defl    Heap_Ptr
1632+ E92E             >
1632+ E92E             >mirror_Ptr      defl    $
1632+ E92E             >
1632+ E92E A1 74       >                dw      Dict_Ptr + 2        // xt
1632+ E930             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E930             >
1632+ E930             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E930             >
1632+ E930             >//              ______________________________________________________________________
1632+ E930             >//              Dictionary part
1632+ E930             >
1632+ E930             >                org     Dict_Ptr
1632+ 749F             >
1632+ 749F 2E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 74A1             >
1632+ 74A1             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 74A1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 74A4             >
1632+ 74A4             >
1632+ 74A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 74A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 74A4             >
1632+ 74A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 74A4 33 68                        dw      SPFETCH                 // sp@
1634+ 74A6 E7 6A 96 69                  dw      S0, FETCH               // s0 @
1635+ 74AA 1E 69 09 6C                  dw      SWAP, ULESS             // swap u<
1636+ 74AE 95 6A EF 6D                  dw      ONE, QERROR             // 1 ?error
1637+ 74B2 B3 6B                        dw      HERE                    // here
1638+ 74B4 E7 6A 96 69                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 74B8 17 6C
1639+ 74BA                                                              // if
1640+ 74BA F5 63                        dw      ZBRANCH
1641+ 74BC 14 00                        dw      QStack_Endif - $
1642+ 74BE 33 68                        dw          SPFETCH             //      sp@
1643+ 74C0 B3 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1643+ 74C4 80 00
1644+ 74C6 9F 68 09 6C                  dw          PLUS, ULESS         //      plus u<
1645+ 74CA A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 74CE EF 6D
1646+ 74D0              QStack_Endif:                                   // endif
1647+ 74D0 4C 68                        dw      EXIT                    // ;
1648+ 74D2
1649+ 74D2
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  74D2                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74D2              //  ______________________________________________________________________
   2+ 74D2              //
   3+ 74D2              //  L2.asm
   4+ 74D2              //
   5+ 74D2              //  Level-2 3dos
   6+ 74D2              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74D2              //  ______________________________________________________________________
   8+ 74D2
   9+ 74D2
  10+ 74D2              //  ______________________________________________________________________
  11+ 74D2              //
  12+ 74D2              // interpret    --
  13+ 74D2              // This is the text interpreter.
  14+ 74D2              // It executes or compiles, depending on STATE, the text coming from
  15+ 74D2              // current input stream.
  16+ 74D2              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74D2              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74D2              // leaving on top of stack a single or double precision number, depending
  19+ 74D2              // on the presence of a decimal point.
  20+ 74D2              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74D2              // by the offending word.
  22+ 74D2                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74D2             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74D2             >
  22+ 74D2             >Dict_Ptr        defl    $
  22+ 74D2             >
  22+ 74D2             >//              ______________________________________________________________________
  22+ 74D2             >//              Heap part
  22+ 74D2             >
  22+ 74D2             >
  22+ 74D2             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E930             >
  22+ E930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E930             >Latest_Definition defl  Heap_Ptr
  22+ E930             >
  22+ E930             >                // dummy db directives used to calculate length of namec
  22+ E930 49 4E 54 45 >                db      "INTERPRET"
  22+ E934 52 50 52 45 >
  22+ E938 54          >
  22+ E939             >len_NFA         defl    $ - temp_NFA
  22+ E939             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E930             >
  22+ E930 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E931 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E935 52 50 52 45 >
  22+ E939 54          >
  22+ E93A             >                org     $-1                 // alter last byte of Name just above to set
  22+ E939 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E93A             >
  22+ E93A 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E93C             >Prev_Ptr        defl    Heap_Ptr
  22+ E93C             >
  22+ E93C             >mirror_Ptr      defl    $
  22+ E93C             >
  22+ E93C D4 74       >                dw      Dict_Ptr + 2        // xt
  22+ E93E             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E93E             >
  22+ E93E             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E93E             >
  22+ E93E             >//              ______________________________________________________________________
  22+ E93E             >//              Dictionary part
  22+ E93E             >
  22+ E93E             >                org     Dict_Ptr
  22+ 74D2             >
  22+ 74D2 3C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74D4             >
  22+ 74D4             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74D4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74D7             >
  22+ 74D7             >
  22+ 74D7             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74D7             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74D7             >
  22+ 74D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74D7
  24+ 74D7              Interpret_Begin:                                        // begin
  25+ 74D7 11 73                        dw          LFIND                       //      -find
  26+ 74D9                                                                      //      if
  27+ 74D9 F5 63                        dw          ZBRANCH
  28+ 74DB 1A 00                        dw          Interpret_Else_1 - $
  29+ 74DD 59 6B 96 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74E1 17 6C
  30+ 74E3                                                                      //          if
  31+ 74E3 F5 63                        dw              ZBRANCH
  32+ 74E5 08 00                        dw              Interpret_Else_2 - $
  33+ 74E7 74 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74E9                                                                      //          else
  35+ 74E9 E8 63                        dw              BRANCH
  36+ 74EB 06 00                        dw              Interpret_Endif_2 - $
  37+ 74ED              Interpret_Else_2:
  38+ 74ED AE 63 55 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74F1              Interpret_Endif_2:                                      //          endif
  40+ 74F1                                                                      //      else
  41+ 74F1 E8 63                        dw          BRANCH
  42+ 74F3 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74F5              Interpret_Else_1:
  44+ 74F5 B3 6B 65 72                  dw              HERE, NUMBER            //          here number
  45+ 74F9 65 6B 96 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74FD B8 68
  46+ 74FF                                                                      //          if
  47+ 74FF F5 63                        dw              ZBRANCH
  48+ 7501 08 00                        dw              Interpret_Else_3 - $
  49+ 7503              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7503              //                                                      //              if
  51+ 7503              //              dw                  ZBRANCH
  52+ 7503              //              dw                  Interpret_Endif_4 - $
  53+ 7503              //              dw                      ONE, ZERO       //                  1 0
  54+ 7503              //              dw                      TWO_DROP        //                  2drop
  55+ 7503              //Interpret_Endif_4:                                      //              endif
  56+ 7503 44 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7505                                                                      //          else
  58+ 7505 E8 63                        dw              BRANCH
  59+ 7507 06 00                        dw              Interpret_Endif_3 - $
  60+ 7509              Interpret_Else_3:
  61+ 7509 0A 69                        dw                  DROP                //              drop
  62+ 750B 2F 74                        dw                  LITERAL             //              [compile]  literal
  63+ 750D              Interpret_Endif_3:                                      //          endif
  64+ 750D              Interpret_Endif_1:                                      //      endif
  65+ 750D A1 74                        dw          QSTACK                      //      ?stack
  66+ 750F B3 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7511                                                                      //      if
  68+ 7511 F5 63                        dw          ZBRANCH
  69+ 7513 04 00                        dw          Interpret_Endif_5 - $
  70+ 7515 75 75                        dw              QUIT                    //          quit
  71+ 7517              Interpret_Endif_5:                                      //      endif
  72+ 7517 E8 63                        dw      BRANCH
  73+ 7519 BE FF                        dw      Interpret_Begin - $
  74+ 751B 4C 68                        dw      EXIT                            // ;
  75+ 751D
  76+ 751D              //  ______________________________________________________________________
  77+ 751D              //
  78+ 751D              // vocabulary   -- cccc     ( compile time )
  79+ 751D              // Defining word used in the form   VOCABULARY cccc
  80+ 751D              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 751D              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 751D              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 751D              // so new definitions can be inserted in that vocabulary.
  84+ 751D                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 751D             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 751D             >
  84+ 751D             >Dict_Ptr        defl    $
  84+ 751D             >
  84+ 751D             >//              ______________________________________________________________________
  84+ 751D             >//              Heap part
  84+ 751D             >
  84+ 751D             >
  84+ 751D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E93E             >
  84+ E93E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E93E             >Latest_Definition defl  Heap_Ptr
  84+ E93E             >
  84+ E93E             >                // dummy db directives used to calculate length of namec
  84+ E93E 56 4F 43 41 >                db      "VOCABULARY"
  84+ E942 42 55 4C 41 >
  84+ E946 52 59       >
  84+ E948             >len_NFA         defl    $ - temp_NFA
  84+ E948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E93E             >
  84+ E93E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E93F 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E943 42 55 4C 41 >
  84+ E947 52 59       >
  84+ E949             >                org     $-1                 // alter last byte of Name just above to set
  84+ E948 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E949             >
  84+ E949 30 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E94B             >Prev_Ptr        defl    Heap_Ptr
  84+ E94B             >
  84+ E94B             >mirror_Ptr      defl    $
  84+ E94B             >
  84+ E94B 1F 75       >                dw      Dict_Ptr + 2        // xt
  84+ E94D             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E94D             >
  84+ E94D             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E94D             >
  84+ E94D             >//              ______________________________________________________________________
  84+ E94D             >//              Dictionary part
  84+ E94D             >
  84+ E94D             >                org     Dict_Ptr
  84+ 751D             >
  84+ 751D 4B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 751F             >
  84+ 751F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 751F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7522             >
  84+ 7522             >
  84+ 7522             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7522             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7522             >
  84+ 7522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7522
  86+ 7522 03 6F                        dw      CBUILDS
  87+ 7524
  88+ 7524                              // dummy word + link part
  89+ 7524 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7528 C9 6B
  90+ 752A 53 6B 96 69                  dw      CURRENT, FETCH          // current @
  91+ 752E 96 69                        dw      FETCH                   // @
  92+ 7530                          //  dw      CELL_MINUS              // cell-
  93+ 7530 C9 6B                        dw      COMMA                   // ,
  94+ 7532
  95+ 7532                              // voc-link part
  96+ 7532 B3 6B                        dw      HERE                    // here
  97+ 7534 11 6B 96 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7538 C9 6B                        dw      COMMA                   // ,
  99+ 753A 11 6B A0 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 753E                              // DOES part
 101+ 753E 0E 6F                        dw      DOES_TO                 // does>
 102+ 7540              Vocabulary_Does:
 103+ 7540 CE 68                        dw      CELL_PLUS               // cell+
 104+ 7542 4D 6B A0 69                  dw      CONTEXT, STORE          // context !
 105+ 7546 4C 68                        dw      EXIT                    // ;
 106+ 7548
 107+ 7548              //  ______________________________________________________________________
 108+ 7548              //
 109+ 7548              // forth        --
 110+ 7548              // Name of the first vocabulary.
 111+ 7548              // It makes FORTH the CONTEXT vocabulary.
 112+ 7548              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 7548              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 7548              // of a colon definition to be able to select the vocabulary.
 115+ 7548
 116+ 7548                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 7548             >
 116+ 7548             >Dict_Ptr        defl    $
 116+ 7548             >
 116+ 7548             >//              ______________________________________________________________________
 116+ 7548             >//              Heap part
 116+ 7548             >
 116+ 7548             >
 116+ 7548             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E94D             >
 116+ E94D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E94D             >Latest_Definition defl  Heap_Ptr
 116+ E94D             >
 116+ E94D             >                // dummy db directives used to calculate length of namec
 116+ E94D 46 4F 52 54 >                db      "FORTH"
 116+ E951 48          >
 116+ E952             >len_NFA         defl    $ - temp_NFA
 116+ E952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E94D             >
 116+ E94D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E94E 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E952 48          >
 116+ E953             >                org     $-1                 // alter last byte of Name just above to set
 116+ E952 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E953             >
 116+ E953 3E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E955             >Prev_Ptr        defl    Heap_Ptr
 116+ E955             >
 116+ E955             >mirror_Ptr      defl    $
 116+ E955             >
 116+ E955 4A 75       >                dw      Dict_Ptr + 2        // xt
 116+ E957             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E957             >
 116+ E957             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E957             >
 116+ E957             >//              ______________________________________________________________________
 116+ E957             >//              Dictionary part
 116+ E957             >
 116+ E957             >                org     Dict_Ptr
 116+ 7548             >
 116+ 7548 55 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 754A             >
 116+ 754A             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 754A CD 1B 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 754D             >
 116+ 754D             >
 116+ 754D             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 754D             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 754D             >
 116+ 754D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 754D 40 75                        dw      Vocabulary_Does
 118+ 754F
 119+ 754F 81 A0                        db      $81, $A0
 120+ 7551              Forth_Latest_Ptr:
 121+ 7551 4D 09                        dw      Latest_Definition
 122+ 7553              Voclink_Ptr:
 123+ 7553 00 00                        dw      0
 124+ 7555
 125+ 7555              // ____
 126+ 7555              // temp_VOC        defl    $                   // save this address
 127+ 7555              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 7555              //              db      $81, $A0
 129+ 7555              // Forth_Latest_Ptr_HEAP:
 130+ 7555              //                 dw      Latest_Definition
 131+ 7555              // Voclink_Ptr_HEAP:
 132+ 7555              //                 dw      0
 133+ 7555              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 7555              //                 org     temp_VOC
 135+ 7555              // ____
 136+ 7555
 137+ 7555              // Any new vocabulary is structured as follow:
 138+ 7555              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 7555              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 7555              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 7555              //       at creations it points to the null-word of its parent vocabulary
 142+ 7555              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 7555              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 7555              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 7555              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 7555              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 7555              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 7555
 149+ 7555              //  ______________________________________________________________________
 150+ 7555              //
 151+ 7555              // definitions  --
 152+ 7555              // Used in the form  cccc DEFINITIONS
 153+ 7555              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 7555              // vocabulary cccc.
 155+ 7555                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 7555             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 7555             >
 155+ 7555             >Dict_Ptr        defl    $
 155+ 7555             >
 155+ 7555             >//              ______________________________________________________________________
 155+ 7555             >//              Heap part
 155+ 7555             >
 155+ 7555             >
 155+ 7555             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E957             >
 155+ E957             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E957             >Latest_Definition defl  Heap_Ptr
 155+ E957             >
 155+ E957             >                // dummy db directives used to calculate length of namec
 155+ E957 44 45 46 49 >                db      "DEFINITIONS"
 155+ E95B 4E 49 54 49 >
 155+ E95F 4F 4E 53    >
 155+ E962             >len_NFA         defl    $ - temp_NFA
 155+ E962             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E957             >
 155+ E957 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E958 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E95C 4E 49 54 49 >
 155+ E960 4F 4E 53    >
 155+ E963             >                org     $-1                 // alter last byte of Name just above to set
 155+ E962 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E963             >
 155+ E963 4D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E965             >Prev_Ptr        defl    Heap_Ptr
 155+ E965             >
 155+ E965             >mirror_Ptr      defl    $
 155+ E965             >
 155+ E965 57 75       >                dw      Dict_Ptr + 2        // xt
 155+ E967             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E967             >
 155+ E967             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E967             >
 155+ E967             >//              ______________________________________________________________________
 155+ E967             >//              Dictionary part
 155+ E967             >
 155+ E967             >                org     Dict_Ptr
 155+ 7555             >
 155+ 7555 65 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 7557             >
 155+ 7557             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 7557 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 755A             >
 155+ 755A             >
 155+ 755A             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 755A             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 755A             >
 155+ 755A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 755A 4D 6B 96 69                  dw      CONTEXT, FETCH          // context @
 157+ 755E 53 6B A0 69                  dw      CURRENT, STORE          // current !
 158+ 7562 4C 68                        dw      EXIT                    // ;
 159+ 7564
 160+ 7564              //  ______________________________________________________________________
 161+ 7564              //
 162+ 7564              // (            -- cccc )
 163+ 7564              // the following text is interpreted as a comment until a closing )
 164+ 7564                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 7564             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 7564             >
 164+ 7564             >Dict_Ptr        defl    $
 164+ 7564             >
 164+ 7564             >//              ______________________________________________________________________
 164+ 7564             >//              Heap part
 164+ 7564             >
 164+ 7564             >
 164+ 7564             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E967             >
 164+ E967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E967             >Latest_Definition defl  Heap_Ptr
 164+ E967             >
 164+ E967             >                // dummy db directives used to calculate length of namec
 164+ E967 28          >                db      "("
 164+ E968             >len_NFA         defl    $ - temp_NFA
 164+ E968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E967             >
 164+ E967 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E968 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E969             >                org     $-1                 // alter last byte of Name just above to set
 164+ E968 A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E969             >
 164+ E969 57 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E96B             >Prev_Ptr        defl    Heap_Ptr
 164+ E96B             >
 164+ E96B             >mirror_Ptr      defl    $
 164+ E96B             >
 164+ E96B 66 75       >                dw      Dict_Ptr + 2        // xt
 164+ E96D             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E96D             >
 164+ E96D             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E96D             >
 164+ E96D             >//              ______________________________________________________________________
 164+ E96D             >//              Dictionary part
 164+ E96D             >
 164+ E96D             >                org     Dict_Ptr
 164+ 7564             >
 164+ 7564 6B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 7566             >
 164+ 7566             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7566 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 7569             >
 164+ 7569             >
 164+ 7569             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7569             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7569             >
 164+ 7569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7569 A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 756D D1 70 0A 69                  dw      WORD, DROP              // word drop
 167+ 7571 4C 68                        dw      EXIT                    // ;
 168+ 7573
 169+ 7573              //  ______________________________________________________________________
 170+ 7573              //
 171+ 7573              // quit         --
 172+ 7573              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 7573                              Colon_Def QUIT, "QUIT", is_normal
 173+ 7573             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 7573             >
 173+ 7573             >Dict_Ptr        defl    $
 173+ 7573             >
 173+ 7573             >//              ______________________________________________________________________
 173+ 7573             >//              Heap part
 173+ 7573             >
 173+ 7573             >
 173+ 7573             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E96D             >
 173+ E96D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E96D             >Latest_Definition defl  Heap_Ptr
 173+ E96D             >
 173+ E96D             >                // dummy db directives used to calculate length of namec
 173+ E96D 51 55 49 54 >                db      "QUIT"
 173+ E971             >len_NFA         defl    $ - temp_NFA
 173+ E971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E96D             >
 173+ E96D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E96E 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E972             >                org     $-1                 // alter last byte of Name just above to set
 173+ E971 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E972             >
 173+ E972 67 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E974             >Prev_Ptr        defl    Heap_Ptr
 173+ E974             >
 173+ E974             >mirror_Ptr      defl    $
 173+ E974             >
 173+ E974 75 75       >                dw      Dict_Ptr + 2        // xt
 173+ E976             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E976             >
 173+ E976             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E976             >
 173+ E976             >//              ______________________________________________________________________
 173+ E976             >//              Dictionary part
 173+ E976             >
 173+ E976             >                org     Dict_Ptr
 173+ 7573             >
 173+ 7573 74 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 7575             >
 173+ 7575             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7575 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7578             >
 173+ 7578             >
 173+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7578             >
 173+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7578
 175+ 7578 9B 6B 96 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 757C FF 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7580 8E 6A 9B 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 7584 A0 69
 178+ 7586 8E 6A 2F 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 758A A0 69
 179+ 758C 7F 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 758E                                                              // begin
 181+ 758E              Quit_Begin:
 182+ 758E ED 6A 96 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7592 47 68
 183+ 7594 B6 65                        dw      CR                      //      cr
 184+ 7596 6E 70                        dw      QUERY                   //      query
 185+ 7598              Next_Breakpoint_1:
 186+ 7598 D4 74                        dw      INTERPRET               //      interpret
 187+ 759A 59 6B 96 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 759E 71 68
 188+ 75A0                                                              //      if
 189+ 75A0 F5 63                        dw      ZBRANCH
 190+ 75A2 07 00                        dw      Quit_Endif - $
 191+ 75A4 1C 71                        dw          C_DOT_QUOTE
 192+ 75A6 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 75A9              Quit_Endif:                                     //      else
 194+ 75A9                                                              // again
 195+ 75A9 E8 63                        dw      BRANCH
 196+ 75AB E3 FF                        dw      Quit_Begin - $
 197+ 75AD 4C 68                        dw      EXIT                    // ;
 198+ 75AF
 199+ 75AF              //  ______________________________________________________________________
 200+ 75AF              //
 201+ 75AF              // abort        --
 202+ 75AF                              Colon_Def ABORT, "ABORT", is_normal
 202+ 75AF             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 75AF             >
 202+ 75AF             >Dict_Ptr        defl    $
 202+ 75AF             >
 202+ 75AF             >//              ______________________________________________________________________
 202+ 75AF             >//              Heap part
 202+ 75AF             >
 202+ 75AF             >
 202+ 75AF             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E976             >
 202+ E976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E976             >Latest_Definition defl  Heap_Ptr
 202+ E976             >
 202+ E976             >                // dummy db directives used to calculate length of namec
 202+ E976 41 42 4F 52 >                db      "ABORT"
 202+ E97A 54          >
 202+ E97B             >len_NFA         defl    $ - temp_NFA
 202+ E97B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E976             >
 202+ E976 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E977 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E97B 54          >
 202+ E97C             >                org     $-1                 // alter last byte of Name just above to set
 202+ E97B D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E97C             >
 202+ E97C 6D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E97E             >Prev_Ptr        defl    Heap_Ptr
 202+ E97E             >
 202+ E97E             >mirror_Ptr      defl    $
 202+ E97E             >
 202+ E97E B1 75       >                dw      Dict_Ptr + 2        // xt
 202+ E980             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E980             >
 202+ E980             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E980             >
 202+ E980             >//              ______________________________________________________________________
 202+ E980             >//              Dictionary part
 202+ E980             >
 202+ E980             >                org     Dict_Ptr
 202+ 75AF             >
 202+ 75AF 7E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 75B1             >
 202+ 75B1             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 75B1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 75B4             >
 202+ 75B4             >
 202+ 75B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 75B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 75B4             >
 202+ 75B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 75B4 E7 6A 96 69                  dw      S0, FETCH               // s0 @
 204+ 75B8 B1 6A                        dw      BL                      // bl
 205+ 75BA 01 69 A0 69                  dw      OVER, STORE             // over !
 206+ 75BE 3C 68                        dw      SPSTORE                 // sp!
 207+ 75C0 C8 6E                        dw      DECIMAL                 // decimal
 208+ 75C2 4A 75                        dw      FORTH                   // [compile] forth
 209+ 75C4 57 75                        dw      DEFINITIONS             // definitions
 210+ 75C6              Autoexec_Ptr:
 211+ 75C6 C6 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 212+ 75C8 75 75                        dw      QUIT                    // quit
 213+ 75CA 4C 68                        dw      EXIT                    // ;
 214+ 75CC
 215+ 75CC              //  ______________________________________________________________________
 216+ 75CC              //
 217+ 75CC              // warm         --
 218+ 75CC                              Colon_Def WARM, "WARM", is_normal
 218+ 75CC             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 218+ 75CC             >
 218+ 75CC             >Dict_Ptr        defl    $
 218+ 75CC             >
 218+ 75CC             >//              ______________________________________________________________________
 218+ 75CC             >//              Heap part
 218+ 75CC             >
 218+ 75CC             >
 218+ 75CC             >                org     (Heap_Ptr & $1FFF) + $E000
 218+ E980             >
 218+ E980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ E980             >Latest_Definition defl  Heap_Ptr
 218+ E980             >
 218+ E980             >                // dummy db directives used to calculate length of namec
 218+ E980 57 41 52 4D >                db      "WARM"
 218+ E984             >len_NFA         defl    $ - temp_NFA
 218+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ E980             >
 218+ E980 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ E981 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 218+ E985             >                org     $-1                 // alter last byte of Name just above to set
 218+ E984 CD          >                db      {b $} | END_BIT     // msb as name end
 218+ E985             >
 218+ E985 76 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 218+ E987             >Prev_Ptr        defl    Heap_Ptr
 218+ E987             >
 218+ E987             >mirror_Ptr      defl    $
 218+ E987             >
 218+ E987 CE 75       >                dw      Dict_Ptr + 2        // xt
 218+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 218+ E989             >
 218+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 218+ E989             >
 218+ E989             >//              ______________________________________________________________________
 218+ E989             >//              Dictionary part
 218+ E989             >
 218+ E989             >                org     Dict_Ptr
 218+ 75CC             >
 218+ 75CC 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 218+ 75CE             >
 218+ 75CE             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 75CE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 218+ 75D1             >
 218+ 75D1             >
 218+ 75D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 75D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 75D1             >
 218+ 75D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 75D1 84 78                        dw      BLK_INIT                // blk-init
 220+ 75D3 A2 7F                        dw      SPLASH                  // splash
 221+ 75D5 A3 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 221+ 75D9 6D 6C
 222+ 75DB B1 75                        dw      ABORT                   // abort
 223+ 75DD 4C 68                        dw      EXIT                    // exit
 224+ 75DF
 225+ 75DF              //  ______________________________________________________________________
 226+ 75DF              //
 227+ 75DF              // cold         --
 228+ 75DF                              Colon_Def COLD, "COLD", is_normal
 228+ 75DF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 228+ 75DF             >
 228+ 75DF             >Dict_Ptr        defl    $
 228+ 75DF             >
 228+ 75DF             >//              ______________________________________________________________________
 228+ 75DF             >//              Heap part
 228+ 75DF             >
 228+ 75DF             >
 228+ 75DF             >                org     (Heap_Ptr & $1FFF) + $E000
 228+ E989             >
 228+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ E989             >Latest_Definition defl  Heap_Ptr
 228+ E989             >
 228+ E989             >                // dummy db directives used to calculate length of namec
 228+ E989 43 4F 4C 44 >                db      "COLD"
 228+ E98D             >len_NFA         defl    $ - temp_NFA
 228+ E98D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ E989             >
 228+ E989 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ E98A 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 228+ E98E             >                org     $-1                 // alter last byte of Name just above to set
 228+ E98D C4          >                db      {b $} | END_BIT     // msb as name end
 228+ E98E             >
 228+ E98E 80 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 228+ E990             >Prev_Ptr        defl    Heap_Ptr
 228+ E990             >
 228+ E990             >mirror_Ptr      defl    $
 228+ E990             >
 228+ E990 E1 75       >                dw      Dict_Ptr + 2        // xt
 228+ E992             >Heap_Ptr        defl    $ - $E000           // save current HP
 228+ E992             >
 228+ E992             >Current_HP      defl  $ - $E000             // used to set HP once!
 228+ E992             >
 228+ E992             >//              ______________________________________________________________________
 228+ E992             >//              Dictionary part
 228+ E992             >
 228+ E992             >                org     Dict_Ptr
 228+ 75DF             >
 228+ 75DF 90 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 228+ 75E1             >
 228+ 75E1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 75E1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 228+ 75E4             >
 228+ 75E4             >
 228+ 75E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 75E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 75E4             >
 228+ 75E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 75E4 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 230+ 75E8 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 231+ 75EC 96 69                        dw      FETCH                   // @
 232+ 75EE A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 232+ 75F2 9F 68
 233+ 75F4 A3 63 16 00                  dw      LIT, 22                 // 22
 234+ 75F8 8D 67                        dw      CMOVE
 235+ 75FA A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 236+ 75FE 96 69                        dw      FETCH                   // @
 237+ 7600 A3 63 51 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 238+ 7604 A0 69                        dw      STORE                   // !
 239+ 7606 8E 6A 29 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 239+ 760A A0 69
 240+ 760C 17 6B 96 69                  dw      FIRST, FETCH, DUP       // first @ dup
 240+ 7610 25 69
 241+ 7612 83 6B A0 69                  dw      USED, STORE             // used !
 242+ 7616 89 6B A0 69                  dw      PREV, STORE             // prev !
 243+ 761A A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 243+ 761E 95 6B A0 69
 244+ 7622              //              dw      LIT, 8
 245+ 7622              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 246+ 7622
 247+ 7622 CE 75        Warm_Start:     dw      WARM
 248+ 7624 E1 75        Cold_Start:     dw      COLD
 249+ 7626 4C 68                        dw      EXIT
 250+ 7628
 251+ 7628              //  ______________________________________________________________________
 252+ 7628              WarmRoutine:
 253+ 7628              ColdRoutine:
 254+ 7628 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 255+ 762C
 256+ 762C D9                           exx
 257+ 762D E5                           push    hl                      // save Basic's return address
 258+ 762E D9                           exx
 259+ 762F ED 73 6E 63                  ld      (SP_Basic), sp
 260+ 7633
 261+ 7633                              // pre-set the four main 16-bit registers
 262+ 7633 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 263+ 7637 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 264+ 763A                              // ld      de, (R0_origin)         // Return Stack Pointer
 265+ 763A                              ldrphl
 265+ 763A 22 96 63    >                ld      (RP_Pointer),hl
 266+ 763D EB                           ex      de, hl
 267+ 763E 01 22 76                     ld      bc, Warm_Start          // Instruction Pointer
 268+ 7641
 269+ 7641 38 02                        jr      c, Warm_Skip
 270+ 7643 03                           inc     bc
 271+ 7644 03                           inc     bc
 272+ 7645              Warm_Skip:
 273+ 7645                              next
 273+ 7645 DD E9       >                jp      (ix)
 274+ 7647
 275+ 7647              //  ______________________________________________________________________
 276+ 7647              //
 277+ 7647              // basic        --
 278+ 7647                              New_Def BASIC, "BASIC", is_code, is_normal
 278+ 7647             >
 278+ 7647             >Dict_Ptr        defl    $
 278+ 7647             >
 278+ 7647             >//              ______________________________________________________________________
 278+ 7647             >//              Heap part
 278+ 7647             >
 278+ 7647             >
 278+ 7647             >                org     (Heap_Ptr & $1FFF) + $E000
 278+ E992             >
 278+ E992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 278+ E992             >Latest_Definition defl  Heap_Ptr
 278+ E992             >
 278+ E992             >                // dummy db directives used to calculate length of namec
 278+ E992 42 41 53 49 >                db      "BASIC"
 278+ E996 43          >
 278+ E997             >len_NFA         defl    $ - temp_NFA
 278+ E997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 278+ E992             >
 278+ E992 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 278+ E993 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 278+ E997 43          >
 278+ E998             >                org     $-1                 // alter last byte of Name just above to set
 278+ E997 C3          >                db      {b $} | END_BIT     // msb as name end
 278+ E998             >
 278+ E998 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 278+ E99A             >Prev_Ptr        defl    Heap_Ptr
 278+ E99A             >
 278+ E99A             >mirror_Ptr      defl    $
 278+ E99A             >
 278+ E99A 49 76       >                dw      Dict_Ptr + 2        // xt
 278+ E99C             >Heap_Ptr        defl    $ - $E000           // save current HP
 278+ E99C             >
 278+ E99C             >Current_HP      defl  $ - $E000             // used to set HP once!
 278+ E99C             >
 278+ E99C             >//              ______________________________________________________________________
 278+ E99C             >//              Dictionary part
 278+ E99C             >
 278+ E99C             >                org     Dict_Ptr
 278+ 7647             >
 278+ 7647 9A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 278+ 7649             >
 278+ 7649             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 278+ 7649 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 278+ 7649 ~           >
 278+ 7649 ~           >
 278+ 7649             >                endif           ; ok        // for other definitions it "points" the correct handler
 278+ 7649             >                // Use of "; ok" to suppress "warning[fwdref]"
 278+ 7649             >
 278+ 7649             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 279+ 7649 C1                           pop     bc                      // return  TOS  value to Basic
 280+ 764A 21 00 00                     ld      hl, 0
 281+ 764D 39                           add     hl, sp
 282+ 764E ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 283+ 7652              //              nop
 284+ 7652 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 285+ 7655 D9                           exx
 286+ 7656 E1                           pop     hl                      // restore h'l'
 287+ 7657 D9                           exx
 288+ 7658 C9                           ret                             // to where USR Basic was left
 289+ 7659
 290+ 7659              //  ______________________________________________________________________
 291+ 7659              //
 292+ 7659              // +-           n1 n2 -- n3
 293+ 7659              // leaves n1 with the sign of n2 as n3.
 294+ 7659                              Colon_Def PLUS_MINUS, "+-", is_normal
 294+ 7659             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 294+ 7659             >
 294+ 7659             >Dict_Ptr        defl    $
 294+ 7659             >
 294+ 7659             >//              ______________________________________________________________________
 294+ 7659             >//              Heap part
 294+ 7659             >
 294+ 7659             >
 294+ 7659             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ E99C             >
 294+ E99C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ E99C             >Latest_Definition defl  Heap_Ptr
 294+ E99C             >
 294+ E99C             >                // dummy db directives used to calculate length of namec
 294+ E99C 2B 2D       >                db      "+-"
 294+ E99E             >len_NFA         defl    $ - temp_NFA
 294+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ E99C             >
 294+ E99C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ E99D 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 294+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 294+ E99E AD          >                db      {b $} | END_BIT     // msb as name end
 294+ E99F             >
 294+ E99F 92 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 294+ E9A1             >
 294+ E9A1             >mirror_Ptr      defl    $
 294+ E9A1             >
 294+ E9A1 5B 76       >                dw      Dict_Ptr + 2        // xt
 294+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ E9A3             >
 294+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ E9A3             >
 294+ E9A3             >//              ______________________________________________________________________
 294+ E9A3             >//              Dictionary part
 294+ E9A3             >
 294+ E9A3             >                org     Dict_Ptr
 294+ 7659             >
 294+ 7659 A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 765B             >
 294+ 765B             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 765B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 765E             >
 294+ 765E             >
 294+ 765E             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 765E             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 765E             >
 294+ 765E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 765E 84 68                        dw      ZLESS                   // 0<
 296+ 7660                                                              // if
 297+ 7660 F5 63                        dw      ZBRANCH
 298+ 7662 04 00                        dw      Plus_Minus_Endif - $
 299+ 7664 E0 68                        dw          MINUS               //      minus
 300+ 7666              Plus_Minus_Endif:                               // endif
 301+ 7666 4C 68                        dw      EXIT                    // ;
 302+ 7668
 303+ 7668              //  ______________________________________________________________________
 304+ 7668              //
 305+ 7668              // d+-          d1 n -- d2
 306+ 7668              // leaves d1 with the sign of n as d2.
 307+ 7668                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 307+ 7668             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 307+ 7668             >
 307+ 7668             >Dict_Ptr        defl    $
 307+ 7668             >
 307+ 7668             >//              ______________________________________________________________________
 307+ 7668             >//              Heap part
 307+ 7668             >
 307+ 7668             >
 307+ 7668             >                org     (Heap_Ptr & $1FFF) + $E000
 307+ E9A3             >
 307+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ E9A3             >Latest_Definition defl  Heap_Ptr
 307+ E9A3             >
 307+ E9A3             >                // dummy db directives used to calculate length of namec
 307+ E9A3 44 2B 2D    >                db      "D+-"
 307+ E9A6             >len_NFA         defl    $ - temp_NFA
 307+ E9A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ E9A3             >
 307+ E9A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ E9A4 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 307+ E9A7             >                org     $-1                 // alter last byte of Name just above to set
 307+ E9A6 AD          >                db      {b $} | END_BIT     // msb as name end
 307+ E9A7             >
 307+ E9A7 9C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 307+ E9A9             >Prev_Ptr        defl    Heap_Ptr
 307+ E9A9             >
 307+ E9A9             >mirror_Ptr      defl    $
 307+ E9A9             >
 307+ E9A9 6A 76       >                dw      Dict_Ptr + 2        // xt
 307+ E9AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 307+ E9AB             >
 307+ E9AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 307+ E9AB             >
 307+ E9AB             >//              ______________________________________________________________________
 307+ E9AB             >//              Dictionary part
 307+ E9AB             >
 307+ E9AB             >                org     Dict_Ptr
 307+ 7668             >
 307+ 7668 A9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 307+ 766A             >
 307+ 766A             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 766A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 766D             >
 307+ 766D             >
 307+ 766D             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 766D             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 766D             >
 307+ 766D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 766D 84 68                        dw      ZLESS                   // 0<
 309+ 766F                                                              // if
 310+ 766F F5 63                        dw      ZBRANCH
 311+ 7671 04 00                        dw      DPlus_Minus_Endif - $
 312+ 7673 EE 68                        dw          DMINUS              //      dminus
 313+ 7675              DPlus_Minus_Endif:                              // endif
 314+ 7675 4C 68                        dw      EXIT                    // ;
 315+ 7677
 316+ 7677              //  ______________________________________________________________________
 317+ 7677              //
 318+ 7677              // abs          n1 -- n2
 319+ 7677                              Colon_Def ABS_OP, "ABS", is_normal
 319+ 7677             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 319+ 7677             >
 319+ 7677             >Dict_Ptr        defl    $
 319+ 7677             >
 319+ 7677             >//              ______________________________________________________________________
 319+ 7677             >//              Heap part
 319+ 7677             >
 319+ 7677             >
 319+ 7677             >                org     (Heap_Ptr & $1FFF) + $E000
 319+ E9AB             >
 319+ E9AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ E9AB             >Latest_Definition defl  Heap_Ptr
 319+ E9AB             >
 319+ E9AB             >                // dummy db directives used to calculate length of namec
 319+ E9AB 41 42 53    >                db      "ABS"
 319+ E9AE             >len_NFA         defl    $ - temp_NFA
 319+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ E9AB             >
 319+ E9AB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ E9AC 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 319+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 319+ E9AE D3          >                db      {b $} | END_BIT     // msb as name end
 319+ E9AF             >
 319+ E9AF A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 319+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 319+ E9B1             >
 319+ E9B1             >mirror_Ptr      defl    $
 319+ E9B1             >
 319+ E9B1 79 76       >                dw      Dict_Ptr + 2        // xt
 319+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 319+ E9B3             >
 319+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 319+ E9B3             >
 319+ E9B3             >//              ______________________________________________________________________
 319+ E9B3             >//              Dictionary part
 319+ E9B3             >
 319+ E9B3             >                org     Dict_Ptr
 319+ 7677             >
 319+ 7677 B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 319+ 7679             >
 319+ 7679             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7679 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 319+ 767C             >
 319+ 767C             >
 319+ 767C             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 767C             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 767C             >
 319+ 767C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 767C 25 69                        dw      DUP                     // dup
 321+ 767E 5B 76                        dw      PLUS_MINUS              // +-
 322+ 7680 4C 68                        dw      EXIT                    // ;
 323+ 7682
 324+ 7682              //  ______________________________________________________________________
 325+ 7682              //
 326+ 7682              // dabs         d1 -- d2
 327+ 7682                              Colon_Def DABS, "DABS", is_normal
 327+ 7682             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 327+ 7682             >
 327+ 7682             >Dict_Ptr        defl    $
 327+ 7682             >
 327+ 7682             >//              ______________________________________________________________________
 327+ 7682             >//              Heap part
 327+ 7682             >
 327+ 7682             >
 327+ 7682             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E9B3             >
 327+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E9B3             >Latest_Definition defl  Heap_Ptr
 327+ E9B3             >
 327+ E9B3             >                // dummy db directives used to calculate length of namec
 327+ E9B3 44 41 42 53 >                db      "DABS"
 327+ E9B7             >len_NFA         defl    $ - temp_NFA
 327+ E9B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E9B3             >
 327+ E9B3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E9B4 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 327+ E9B8             >                org     $-1                 // alter last byte of Name just above to set
 327+ E9B7 D3          >                db      {b $} | END_BIT     // msb as name end
 327+ E9B8             >
 327+ E9B8 AB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E9BA             >Prev_Ptr        defl    Heap_Ptr
 327+ E9BA             >
 327+ E9BA             >mirror_Ptr      defl    $
 327+ E9BA             >
 327+ E9BA 84 76       >                dw      Dict_Ptr + 2        // xt
 327+ E9BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E9BC             >
 327+ E9BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E9BC             >
 327+ E9BC             >//              ______________________________________________________________________
 327+ E9BC             >//              Dictionary part
 327+ E9BC             >
 327+ E9BC             >                org     Dict_Ptr
 327+ 7682             >
 327+ 7682 BA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 7684             >
 327+ 7684             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 7684 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 327+ 7687             >
 327+ 7687             >
 327+ 7687             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 7687             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 7687             >
 327+ 7687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 7687 25 69                        dw      DUP                     // dup
 329+ 7689 6A 76                        dw      DPLUS_MINUS             // d+-
 330+ 768B 4C 68                        dw      EXIT                    // ;
 331+ 768D
 332+ 768D              //  ______________________________________________________________________
 333+ 768D              //
 334+ 768D              // m*           n1 n2 -- d
 335+ 768D              // multiply two integer giving a double
 336+ 768D                              Colon_Def MMUL, "M*", is_normal
 336+ 768D             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 336+ 768D             >
 336+ 768D             >Dict_Ptr        defl    $
 336+ 768D             >
 336+ 768D             >//              ______________________________________________________________________
 336+ 768D             >//              Heap part
 336+ 768D             >
 336+ 768D             >
 336+ 768D             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ E9BC             >
 336+ E9BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ E9BC             >Latest_Definition defl  Heap_Ptr
 336+ E9BC             >
 336+ E9BC             >                // dummy db directives used to calculate length of namec
 336+ E9BC 4D 2A       >                db      "M*"
 336+ E9BE             >len_NFA         defl    $ - temp_NFA
 336+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ E9BC             >
 336+ E9BC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ E9BD 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 336+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 336+ E9BE AA          >                db      {b $} | END_BIT     // msb as name end
 336+ E9BF             >
 336+ E9BF B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 336+ E9C1             >
 336+ E9C1             >mirror_Ptr      defl    $
 336+ E9C1             >
 336+ E9C1 8F 76       >                dw      Dict_Ptr + 2        // xt
 336+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ E9C3             >
 336+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ E9C3             >
 336+ E9C3             >//              ______________________________________________________________________
 336+ E9C3             >//              Dictionary part
 336+ E9C3             >
 336+ E9C3             >                org     Dict_Ptr
 336+ 768D             >
 336+ 768D C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 768F             >
 336+ 768F             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 768F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 7692             >
 336+ 7692             >
 336+ 7692             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7692             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7692             >
 336+ 7692             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7692 74 69 27 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 337+ 7696 56 68
 338+ 7698 79 76 1E 69                  dw      ABS_OP, SWAP            // abs swap
 339+ 769C 79 76 B1 67                  dw      ABS_OP, UM_MUL          // abs um*
 340+ 76A0 61 68 6A 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 341+ 76A4 4C 68                        dw      EXIT                    // ;
 342+ 76A6
 343+ 76A6              //  ______________________________________________________________________
 344+ 76A6              //
 345+ 76A6              // sm/rem       d n -- q r
 346+ 76A6              // Symmetric division: divides a double into n giving quotient q and remainder r
 347+ 76A6              // the remainder has the sign of d.
 348+ 76A6                              Colon_Def SMDIVM, "SM/REM", is_normal
 348+ 76A6             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 348+ 76A6             >
 348+ 76A6             >Dict_Ptr        defl    $
 348+ 76A6             >
 348+ 76A6             >//              ______________________________________________________________________
 348+ 76A6             >//              Heap part
 348+ 76A6             >
 348+ 76A6             >
 348+ 76A6             >                org     (Heap_Ptr & $1FFF) + $E000
 348+ E9C3             >
 348+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ E9C3             >Latest_Definition defl  Heap_Ptr
 348+ E9C3             >
 348+ E9C3             >                // dummy db directives used to calculate length of namec
 348+ E9C3 53 4D 2F 52 >                db      "SM/REM"
 348+ E9C7 45 4D       >
 348+ E9C9             >len_NFA         defl    $ - temp_NFA
 348+ E9C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ E9C3             >
 348+ E9C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ E9C4 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 348+ E9C8 45 4D       >
 348+ E9CA             >                org     $-1                 // alter last byte of Name just above to set
 348+ E9C9 CD          >                db      {b $} | END_BIT     // msb as name end
 348+ E9CA             >
 348+ E9CA BC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 348+ E9CC             >Prev_Ptr        defl    Heap_Ptr
 348+ E9CC             >
 348+ E9CC             >mirror_Ptr      defl    $
 348+ E9CC             >
 348+ E9CC A8 76       >                dw      Dict_Ptr + 2        // xt
 348+ E9CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 348+ E9CE             >
 348+ E9CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 348+ E9CE             >
 348+ E9CE             >//              ______________________________________________________________________
 348+ E9CE             >//              Dictionary part
 348+ E9CE             >
 348+ E9CE             >                org     Dict_Ptr
 348+ 76A6             >
 348+ 76A6 CC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 348+ 76A8             >
 348+ 76A8             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 76A8 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 76AB             >
 348+ 76AB             >
 348+ 76AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 76AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 76AB             >
 348+ 76AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 76AB 01 69 56 68                  dw      OVER, TO_R, TO_R        // over >r >r
 349+ 76AF 56 68
 350+ 76B1 84 76 6C 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 350+ 76B5 79 76
 351+ 76B7 D9 67                        dw      UMDIVMOD                // um/mod
 352+ 76B9 61 68                        dw      R_TO                    // r>
 353+ 76BB 6C 68 27 68                  dw      R_OP, XOR_OP            // r xor
 354+ 76BF 5B 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 355+ 76C3 61 68                        dw      R_TO                    // r>
 356+ 76C5 5B 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 357+ 76C9 4C 68                        dw      EXIT                    // ;
 358+ 76CB
 359+ 76CB              //  ______________________________________________________________________
 360+ 76CB              //
 361+ 76CB              // fm/mod       d n -- q r
 362+ 76CB              // Floored division: divides a double into n giving quotient q and remainder r
 363+ 76CB              // the remainder has the sign of d.
 364+ 76CB                              Colon_Def FMDIVM, "FM/MOD", is_normal
 364+ 76CB             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 364+ 76CB             >
 364+ 76CB             >Dict_Ptr        defl    $
 364+ 76CB             >
 364+ 76CB             >//              ______________________________________________________________________
 364+ 76CB             >//              Heap part
 364+ 76CB             >
 364+ 76CB             >
 364+ 76CB             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ E9CE             >
 364+ E9CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ E9CE             >Latest_Definition defl  Heap_Ptr
 364+ E9CE             >
 364+ E9CE             >                // dummy db directives used to calculate length of namec
 364+ E9CE 46 4D 2F 4D >                db      "FM/MOD"
 364+ E9D2 4F 44       >
 364+ E9D4             >len_NFA         defl    $ - temp_NFA
 364+ E9D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ E9CE             >
 364+ E9CE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ E9CF 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 364+ E9D3 4F 44       >
 364+ E9D5             >                org     $-1                 // alter last byte of Name just above to set
 364+ E9D4 C4          >                db      {b $} | END_BIT     // msb as name end
 364+ E9D5             >
 364+ E9D5 C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ E9D7             >Prev_Ptr        defl    Heap_Ptr
 364+ E9D7             >
 364+ E9D7             >mirror_Ptr      defl    $
 364+ E9D7             >
 364+ E9D7 CD 76       >                dw      Dict_Ptr + 2        // xt
 364+ E9D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ E9D9             >
 364+ E9D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ E9D9             >
 364+ E9D9             >//              ______________________________________________________________________
 364+ E9D9             >//              Dictionary part
 364+ E9D9             >
 364+ E9D9             >                org     Dict_Ptr
 364+ 76CB             >
 364+ 76CB D7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 76CD             >
 364+ 76CD             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 76CD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 76D0             >
 364+ 76D0             >
 364+ 76D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 76D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 76D0             >
 364+ 76D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 76D0 25 69 56 68                  dw      DUP, TO_R               // dup >r
 366+ 76D4 A8 76                        dw      SMDIVM
 367+ 76D6 01 69 25 69                  dw      OVER, DUP
 368+ 76DA 71 68 71 68                  dw      ZEQUAL, ZEQUAL
 369+ 76DE 1E 69 84 68                  dw      SWAP, ZLESS
 370+ 76E2 6C 68 84 68                  dw      R_OP, ZLESS
 371+ 76E6 27 68 0C 68                  dw      XOR_OP, AND_OP
 372+ 76EA F5 63                        dw      ZBRANCH
 373+ 76EC 10 00                        dw      Fm_Mod_Else - $
 374+ 76EE BF 68                        dw          ONE_SUBTRACT
 375+ 76F0 1E 69 61 68                  dw          SWAP, R_TO
 376+ 76F4 9F 68 1E 69                  dw          PLUS, SWAP
 377+ 76F8 E8 63                        dw      BRANCH
 378+ 76FA 06 00                        dw      Fm_Mod_Endif - $
 379+ 76FC              Fm_Mod_Else:
 380+ 76FC 61 68 0A 69                  dw          R_TO, DROP
 381+ 7700              Fm_Mod_Endif:
 382+ 7700 4C 68                        dw      EXIT
 383+ 7702              //              dw      TWO_DUP                 // 2dup
 384+ 7702              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 385+ 7702              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 386+ 7702              //              dw      UMDIVMOD                // um/mod
 387+ 7702              //              dw      SWAP                    // swap
 388+ 7702              //              dw      II, ZLESS               // i'
 389+ 7702              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 390+ 7702              //              dw      R_TO                    // r>
 391+ 7702              //              dw      PLUS_MINUS, SWAP        // +- swap
 392+ 7702              //              dw      R_OP                    // r@
 393+ 7702              //              dw      ZLESS                   // i'
 394+ 7702              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 395+ 7702              //              dw      R_TO                    // r>
 396+ 7702              //              dw      PLUS_MINUS              // +- swap
 397+ 7702              //              dw      EXIT                    // ;
 398+ 7702
 399+ 7702              //  ______________________________________________________________________
 400+ 7702              //
 401+ 7702              // m/mod        d n -- q r
 402+ 7702              // multiply two integer giving a double
 403+ 7702                              Colon_Def MDIVM, "M/MOD", is_normal
 403+ 7702             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 403+ 7702             >
 403+ 7702             >Dict_Ptr        defl    $
 403+ 7702             >
 403+ 7702             >//              ______________________________________________________________________
 403+ 7702             >//              Heap part
 403+ 7702             >
 403+ 7702             >
 403+ 7702             >                org     (Heap_Ptr & $1FFF) + $E000
 403+ E9D9             >
 403+ E9D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ E9D9             >Latest_Definition defl  Heap_Ptr
 403+ E9D9             >
 403+ E9D9             >                // dummy db directives used to calculate length of namec
 403+ E9D9 4D 2F 4D 4F >                db      "M/MOD"
 403+ E9DD 44          >
 403+ E9DE             >len_NFA         defl    $ - temp_NFA
 403+ E9DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ E9D9             >
 403+ E9D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ E9DA 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 403+ E9DE 44          >
 403+ E9DF             >                org     $-1                 // alter last byte of Name just above to set
 403+ E9DE C4          >                db      {b $} | END_BIT     // msb as name end
 403+ E9DF             >
 403+ E9DF CE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 403+ E9E1             >Prev_Ptr        defl    Heap_Ptr
 403+ E9E1             >
 403+ E9E1             >mirror_Ptr      defl    $
 403+ E9E1             >
 403+ E9E1 04 77       >                dw      Dict_Ptr + 2        // xt
 403+ E9E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 403+ E9E3             >
 403+ E9E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 403+ E9E3             >
 403+ E9E3             >//              ______________________________________________________________________
 403+ E9E3             >//              Dictionary part
 403+ E9E3             >
 403+ E9E3             >                org     Dict_Ptr
 403+ 7702             >
 403+ 7702 E1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 403+ 7704             >
 403+ 7704             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 7704 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 7707             >
 403+ 7707             >
 403+ 7707             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 7707             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 7707             >
 403+ 7707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 7707 A8 76                        dw      SMDIVM
 405+ 7709 4C 68                        dw      EXIT                    // ;
 406+ 770B
 407+ 770B              //  ______________________________________________________________________
 408+ 770B              //
 409+ 770B              // m/           d n -- q
 410+ 770B              // multiply two integer giving a double
 411+ 770B                              Colon_Def MDIV, "M/", is_normal
 411+ 770B             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 411+ 770B             >
 411+ 770B             >Dict_Ptr        defl    $
 411+ 770B             >
 411+ 770B             >//              ______________________________________________________________________
 411+ 770B             >//              Heap part
 411+ 770B             >
 411+ 770B             >
 411+ 770B             >                org     (Heap_Ptr & $1FFF) + $E000
 411+ E9E3             >
 411+ E9E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ E9E3             >Latest_Definition defl  Heap_Ptr
 411+ E9E3             >
 411+ E9E3             >                // dummy db directives used to calculate length of namec
 411+ E9E3 4D 2F       >                db      "M/"
 411+ E9E5             >len_NFA         defl    $ - temp_NFA
 411+ E9E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ E9E3             >
 411+ E9E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ E9E4 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 411+ E9E6             >                org     $-1                 // alter last byte of Name just above to set
 411+ E9E5 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ E9E6             >
 411+ E9E6 D9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 411+ E9E8             >Prev_Ptr        defl    Heap_Ptr
 411+ E9E8             >
 411+ E9E8             >mirror_Ptr      defl    $
 411+ E9E8             >
 411+ E9E8 0D 77       >                dw      Dict_Ptr + 2        // xt
 411+ E9EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 411+ E9EA             >
 411+ E9EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 411+ E9EA             >
 411+ E9EA             >//              ______________________________________________________________________
 411+ E9EA             >//              Dictionary part
 411+ E9EA             >
 411+ E9EA             >                org     Dict_Ptr
 411+ 770B             >
 411+ 770B E8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 411+ 770D             >
 411+ 770D             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 770D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7710             >
 411+ 7710             >
 411+ 7710             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7710             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7710             >
 411+ 7710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7710 04 77 0F 69                  dw      MDIVM, NIP
 413+ 7714 4C 68                        dw      EXIT                    // ;
 414+ 7716
 415+ 7716              //  ______________________________________________________________________
 416+ 7716              //
 417+ 7716              // *            n1 n2 -- n3
 418+ 7716              // multiply two integer
 419+ 7716                              Colon_Def MUL, "*", is_normal
 419+ 7716             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 419+ 7716             >
 419+ 7716             >Dict_Ptr        defl    $
 419+ 7716             >
 419+ 7716             >//              ______________________________________________________________________
 419+ 7716             >//              Heap part
 419+ 7716             >
 419+ 7716             >
 419+ 7716             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ E9EA             >
 419+ E9EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ E9EA             >Latest_Definition defl  Heap_Ptr
 419+ E9EA             >
 419+ E9EA             >                // dummy db directives used to calculate length of namec
 419+ E9EA 2A          >                db      "*"
 419+ E9EB             >len_NFA         defl    $ - temp_NFA
 419+ E9EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ E9EA             >
 419+ E9EA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ E9EB 2A          >                db      "*"               // name string in 7-bit ascii, but
 419+ E9EC             >                org     $-1                 // alter last byte of Name just above to set
 419+ E9EB AA          >                db      {b $} | END_BIT     // msb as name end
 419+ E9EC             >
 419+ E9EC E3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ E9EE             >Prev_Ptr        defl    Heap_Ptr
 419+ E9EE             >
 419+ E9EE             >mirror_Ptr      defl    $
 419+ E9EE             >
 419+ E9EE 18 77       >                dw      Dict_Ptr + 2        // xt
 419+ E9F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ E9F0             >
 419+ E9F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ E9F0             >
 419+ E9F0             >//              ______________________________________________________________________
 419+ E9F0             >//              Dictionary part
 419+ E9F0             >
 419+ E9F0             >                org     Dict_Ptr
 419+ 7716             >
 419+ 7716 EE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7718             >
 419+ 7718             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7718 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 771B             >
 419+ 771B             >
 419+ 771B             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 771B             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 771B             >
 419+ 771B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 771B 8F 76 0A 69                  dw      MMUL, DROP              // m* drop
 421+ 771F 4C 68                        dw      EXIT                    // ;
 422+ 7721
 423+ 7721              //  ______________________________________________________________________
 424+ 7721              //
 425+ 7721              // /mod         n1 n2 -- n3 n4
 426+ 7721              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 427+ 7721              // The remainder has the sign of n1
 428+ 7721                              Colon_Def DIVMOD, "/MOD", is_normal
 428+ 7721             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 428+ 7721             >
 428+ 7721             >Dict_Ptr        defl    $
 428+ 7721             >
 428+ 7721             >//              ______________________________________________________________________
 428+ 7721             >//              Heap part
 428+ 7721             >
 428+ 7721             >
 428+ 7721             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E9F0             >
 428+ E9F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E9F0             >Latest_Definition defl  Heap_Ptr
 428+ E9F0             >
 428+ E9F0             >                // dummy db directives used to calculate length of namec
 428+ E9F0 2F 4D 4F 44 >                db      "/MOD"
 428+ E9F4             >len_NFA         defl    $ - temp_NFA
 428+ E9F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E9F0             >
 428+ E9F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E9F1 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 428+ E9F5             >                org     $-1                 // alter last byte of Name just above to set
 428+ E9F4 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ E9F5             >
 428+ E9F5 EA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E9F7             >Prev_Ptr        defl    Heap_Ptr
 428+ E9F7             >
 428+ E9F7             >mirror_Ptr      defl    $
 428+ E9F7             >
 428+ E9F7 23 77       >                dw      Dict_Ptr + 2        // xt
 428+ E9F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E9F9             >
 428+ E9F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E9F9             >
 428+ E9F9             >//              ______________________________________________________________________
 428+ E9F9             >//              Dictionary part
 428+ E9F9             >
 428+ E9F9             >                org     Dict_Ptr
 428+ 7721             >
 428+ 7721 F7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 7723             >
 428+ 7723             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7723 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7726             >
 428+ 7726             >
 428+ 7726             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7726             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7726             >
 428+ 7726             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7726 56 68 E7 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 429+ 772A 61 68
 430+ 772C 04 77                        dw      MDIVM                   // m/mod
 431+ 772E 4C 68                        dw      EXIT                    // ;
 432+ 7730
 433+ 7730              //  ______________________________________________________________________
 434+ 7730              //
 435+ 7730              // /            n1 n2 -- n3
 436+ 7730              // division
 437+ 7730                              Colon_Def DIV, "/", is_normal
 437+ 7730             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 437+ 7730             >
 437+ 7730             >Dict_Ptr        defl    $
 437+ 7730             >
 437+ 7730             >//              ______________________________________________________________________
 437+ 7730             >//              Heap part
 437+ 7730             >
 437+ 7730             >
 437+ 7730             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E9F9             >
 437+ E9F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E9F9             >Latest_Definition defl  Heap_Ptr
 437+ E9F9             >
 437+ E9F9             >                // dummy db directives used to calculate length of namec
 437+ E9F9 2F          >                db      "/"
 437+ E9FA             >len_NFA         defl    $ - temp_NFA
 437+ E9FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E9F9             >
 437+ E9F9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E9FA 2F          >                db      "/"               // name string in 7-bit ascii, but
 437+ E9FB             >                org     $-1                 // alter last byte of Name just above to set
 437+ E9FA AF          >                db      {b $} | END_BIT     // msb as name end
 437+ E9FB             >
 437+ E9FB F0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E9FD             >Prev_Ptr        defl    Heap_Ptr
 437+ E9FD             >
 437+ E9FD             >mirror_Ptr      defl    $
 437+ E9FD             >
 437+ E9FD 32 77       >                dw      Dict_Ptr + 2        // xt
 437+ E9FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E9FF             >
 437+ E9FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E9FF             >
 437+ E9FF             >//              ______________________________________________________________________
 437+ E9FF             >//              Dictionary part
 437+ E9FF             >
 437+ E9FF             >                org     Dict_Ptr
 437+ 7730             >
 437+ 7730 FD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 7732             >
 437+ 7732             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7732 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7735             >
 437+ 7735             >
 437+ 7735             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7735             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7735             >
 437+ 7735             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7735 23 77 0F 69                  dw      DIVMOD, NIP             // /mod nip
 439+ 7739 4C 68                        dw      EXIT                    // ;
 440+ 773B
 441+ 773B              //  ______________________________________________________________________
 442+ 773B              //
 443+ 773B              // mod          n1 n2 -- n3
 444+ 773B                              Colon_Def MOD, "MOD", is_normal
 444+ 773B             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 444+ 773B             >
 444+ 773B             >Dict_Ptr        defl    $
 444+ 773B             >
 444+ 773B             >//              ______________________________________________________________________
 444+ 773B             >//              Heap part
 444+ 773B             >
 444+ 773B             >
 444+ 773B             >                org     (Heap_Ptr & $1FFF) + $E000
 444+ E9FF             >
 444+ E9FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ E9FF             >Latest_Definition defl  Heap_Ptr
 444+ E9FF             >
 444+ E9FF             >                // dummy db directives used to calculate length of namec
 444+ E9FF 4D 4F 44    >                db      "MOD"
 444+ EA02             >len_NFA         defl    $ - temp_NFA
 444+ EA02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ E9FF             >
 444+ E9FF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ EA00 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 444+ EA03             >                org     $-1                 // alter last byte of Name just above to set
 444+ EA02 C4          >                db      {b $} | END_BIT     // msb as name end
 444+ EA03             >
 444+ EA03 F9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 444+ EA05             >Prev_Ptr        defl    Heap_Ptr
 444+ EA05             >
 444+ EA05             >mirror_Ptr      defl    $
 444+ EA05             >
 444+ EA05 3D 77       >                dw      Dict_Ptr + 2        // xt
 444+ EA07             >Heap_Ptr        defl    $ - $E000           // save current HP
 444+ EA07             >
 444+ EA07             >Current_HP      defl  $ - $E000             // used to set HP once!
 444+ EA07             >
 444+ EA07             >//              ______________________________________________________________________
 444+ EA07             >//              Dictionary part
 444+ EA07             >
 444+ EA07             >                org     Dict_Ptr
 444+ 773B             >
 444+ 773B 05 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 444+ 773D             >
 444+ 773D             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 773D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 7740             >
 444+ 7740             >
 444+ 7740             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 7740             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 7740             >
 444+ 7740             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 7740 23 77 0A 69                  dw      DIVMOD, DROP            // /mod drop
 446+ 7744 4C 68                        dw      EXIT                    // ;
 447+ 7746
 448+ 7746              //  ______________________________________________________________________
 449+ 7746              //
 450+ 7746              // */mod        n1 n2 n3 -- n4 n5
 451+ 7746              // leaves the quotient n5 and the remainder n4 of the operation
 452+ 7746              // (n1 * n2) / n3. The intermediate passage through a double number
 453+ 7746              // avoids loss of precision
 454+ 7746                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 454+ 7746             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 454+ 7746             >
 454+ 7746             >Dict_Ptr        defl    $
 454+ 7746             >
 454+ 7746             >//              ______________________________________________________________________
 454+ 7746             >//              Heap part
 454+ 7746             >
 454+ 7746             >
 454+ 7746             >                org     (Heap_Ptr & $1FFF) + $E000
 454+ EA07             >
 454+ EA07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ EA07             >Latest_Definition defl  Heap_Ptr
 454+ EA07             >
 454+ EA07             >                // dummy db directives used to calculate length of namec
 454+ EA07 2A 2F 4D 4F >                db      "*/MOD"
 454+ EA0B 44          >
 454+ EA0C             >len_NFA         defl    $ - temp_NFA
 454+ EA0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ EA07             >
 454+ EA07 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ EA08 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 454+ EA0C 44          >
 454+ EA0D             >                org     $-1                 // alter last byte of Name just above to set
 454+ EA0C C4          >                db      {b $} | END_BIT     // msb as name end
 454+ EA0D             >
 454+ EA0D FF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 454+ EA0F             >Prev_Ptr        defl    Heap_Ptr
 454+ EA0F             >
 454+ EA0F             >mirror_Ptr      defl    $
 454+ EA0F             >
 454+ EA0F 48 77       >                dw      Dict_Ptr + 2        // xt
 454+ EA11             >Heap_Ptr        defl    $ - $E000           // save current HP
 454+ EA11             >
 454+ EA11             >Current_HP      defl  $ - $E000             // used to set HP once!
 454+ EA11             >
 454+ EA11             >//              ______________________________________________________________________
 454+ EA11             >//              Dictionary part
 454+ EA11             >
 454+ EA11             >                org     Dict_Ptr
 454+ 7746             >
 454+ 7746 0F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 454+ 7748             >
 454+ 7748             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 7748 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 774B             >
 454+ 774B             >
 454+ 774B             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 774B             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 774B             >
 454+ 774B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 774B 56 68 8F 76                  dw      TO_R, MMUL              // >r  m*
 456+ 774F 61 68 04 77                  dw      R_TO, MDIVM             // r>  m/mod
 457+ 7753 4C 68                        dw      EXIT                    // ;
 458+ 7755
 459+ 7755              //  ______________________________________________________________________
 460+ 7755              //
 461+ 7755              // */          n1 n2 n3 -- n4
 462+ 7755              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 463+ 7755                              Colon_Def MUL_DIV, "*/", is_normal
 463+ 7755             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 463+ 7755             >
 463+ 7755             >Dict_Ptr        defl    $
 463+ 7755             >
 463+ 7755             >//              ______________________________________________________________________
 463+ 7755             >//              Heap part
 463+ 7755             >
 463+ 7755             >
 463+ 7755             >                org     (Heap_Ptr & $1FFF) + $E000
 463+ EA11             >
 463+ EA11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ EA11             >Latest_Definition defl  Heap_Ptr
 463+ EA11             >
 463+ EA11             >                // dummy db directives used to calculate length of namec
 463+ EA11 2A 2F       >                db      "*/"
 463+ EA13             >len_NFA         defl    $ - temp_NFA
 463+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ EA11             >
 463+ EA11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ EA12 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 463+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 463+ EA13 AF          >                db      {b $} | END_BIT     // msb as name end
 463+ EA14             >
 463+ EA14 07 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 463+ EA16             >Prev_Ptr        defl    Heap_Ptr
 463+ EA16             >
 463+ EA16             >mirror_Ptr      defl    $
 463+ EA16             >
 463+ EA16 57 77       >                dw      Dict_Ptr + 2        // xt
 463+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 463+ EA18             >
 463+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 463+ EA18             >
 463+ EA18             >//              ______________________________________________________________________
 463+ EA18             >//              Dictionary part
 463+ EA18             >
 463+ EA18             >                org     Dict_Ptr
 463+ 7755             >
 463+ 7755 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 463+ 7757             >
 463+ 7757             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 7757 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 775A             >
 463+ 775A             >
 463+ 775A             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 775A             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 775A             >
 463+ 775A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 775A 48 77                        dw     MUL_DIV_MOD              // */mod
 465+ 775C 0F 69                        dw     NIP                      // nip
 466+ 775E 4C 68                        dw     EXIT                     // ;
 467+ 7760
 468+ 7760
 469+ 7760              //  ______________________________________________________________________
 470+ 7760              //
 471+ 7760              // m/mod        ud1 u2 -- u3 ud4
 472+ 7760              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 473+ 7760              // All terms are unsigned.
 474+ 7760              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 475+ 7760              //              dw      TO_R                    // >r           ( ud1 )
 476+ 7760              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 477+ 7760              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 478+ 7760              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 479+ 7760              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 480+ 7760              //              dw      EXIT                    // ;
 481+ 7760
 482+ 7760              //  ______________________________________________________________________
 483+ 7760              //
 484+ 7760              // (line)       n1 n2 -- a b
 485+ 7760              // sends the line n1 of block n2 to the disk buffer.
 486+ 7760              // it returns the address a and ca counter b = C/L meaning a whole line.
 487+ 7760                              Colon_Def CLINE, "(LINE)", is_normal
 487+ 7760             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 487+ 7760             >
 487+ 7760             >Dict_Ptr        defl    $
 487+ 7760             >
 487+ 7760             >//              ______________________________________________________________________
 487+ 7760             >//              Heap part
 487+ 7760             >
 487+ 7760             >
 487+ 7760             >                org     (Heap_Ptr & $1FFF) + $E000
 487+ EA18             >
 487+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ EA18             >Latest_Definition defl  Heap_Ptr
 487+ EA18             >
 487+ EA18             >                // dummy db directives used to calculate length of namec
 487+ EA18 28 4C 49 4E >                db      "(LINE)"
 487+ EA1C 45 29       >
 487+ EA1E             >len_NFA         defl    $ - temp_NFA
 487+ EA1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ EA18             >
 487+ EA18 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ EA19 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 487+ EA1D 45 29       >
 487+ EA1F             >                org     $-1                 // alter last byte of Name just above to set
 487+ EA1E A9          >                db      {b $} | END_BIT     // msb as name end
 487+ EA1F             >
 487+ EA1F 11 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 487+ EA21             >Prev_Ptr        defl    Heap_Ptr
 487+ EA21             >
 487+ EA21             >mirror_Ptr      defl    $
 487+ EA21             >
 487+ EA21 62 77       >                dw      Dict_Ptr + 2        // xt
 487+ EA23             >Heap_Ptr        defl    $ - $E000           // save current HP
 487+ EA23             >
 487+ EA23             >Current_HP      defl  $ - $E000             // used to set HP once!
 487+ EA23             >
 487+ EA23             >//              ______________________________________________________________________
 487+ EA23             >//              Dictionary part
 487+ EA23             >
 487+ EA23             >                org     Dict_Ptr
 487+ 7760             >
 487+ 7760 21 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 487+ 7762             >
 487+ 7762             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 7762 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 487+ 7765             >
 487+ 7765             >
 487+ 7765             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 7765             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 7765             >
 487+ 7765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 7765 56 68                        dw      TO_R                    // >r
 489+ 7767 B8 6A                        dw      CL                      // c/l
 490+ 7769 BF 6A 48 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 491+ 776D 61 68                        dw      R_TO                    // r>
 492+ 776F C6 6A 18 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 492+ 7773 9F 68
 493+ 7775 73 79                        dw      BLOCK                   // block   ( forward )
 494+ 7777 9F 68                        dw      PLUS                    // +
 495+ 7779 B8 6A                        dw      CL                      // c/l
 496+ 777B 4C 68                        dw      EXIT                    // ;
 497+ 777D
 498+ 777D              //  ______________________________________________________________________
 499+ 777D              //
 500+ 777D              // .line        n1 n2 --
 501+ 777D              // Sends to output line  n1  of screen n2.
 502+ 777D                              Colon_Def DOT_LINE, ".LINE", is_normal
 502+ 777D             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 502+ 777D             >
 502+ 777D             >Dict_Ptr        defl    $
 502+ 777D             >
 502+ 777D             >//              ______________________________________________________________________
 502+ 777D             >//              Heap part
 502+ 777D             >
 502+ 777D             >
 502+ 777D             >                org     (Heap_Ptr & $1FFF) + $E000
 502+ EA23             >
 502+ EA23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ EA23             >Latest_Definition defl  Heap_Ptr
 502+ EA23             >
 502+ EA23             >                // dummy db directives used to calculate length of namec
 502+ EA23 2E 4C 49 4E >                db      ".LINE"
 502+ EA27 45          >
 502+ EA28             >len_NFA         defl    $ - temp_NFA
 502+ EA28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ EA23             >
 502+ EA23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ EA24 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 502+ EA28 45          >
 502+ EA29             >                org     $-1                 // alter last byte of Name just above to set
 502+ EA28 C5          >                db      {b $} | END_BIT     // msb as name end
 502+ EA29             >
 502+ EA29 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 502+ EA2B             >Prev_Ptr        defl    Heap_Ptr
 502+ EA2B             >
 502+ EA2B             >mirror_Ptr      defl    $
 502+ EA2B             >
 502+ EA2B 7F 77       >                dw      Dict_Ptr + 2        // xt
 502+ EA2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 502+ EA2D             >
 502+ EA2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 502+ EA2D             >
 502+ EA2D             >//              ______________________________________________________________________
 502+ EA2D             >//              Dictionary part
 502+ EA2D             >
 502+ EA2D             >                org     Dict_Ptr
 502+ 777D             >
 502+ 777D 2B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 502+ 777F             >
 502+ 777F             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 777F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 7782             >
 502+ 7782             >
 502+ 7782             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 7782             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 7782             >
 502+ 7782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 7782 62 77 96 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 503+ 7786 7F 6F
 504+ 7788 4C 68                        dw      EXIT                    // ;
 505+ 778A
 506+ 778A              //  ______________________________________________________________________
 507+ 778A              //
 508+ 778A              // message       n1 n2 --
 509+ 778A              // prints error message to current channel.
 510+ 778A              // if WARNING is 0, prints "MSG#n".
 511+ 778A              // if WARNING is 1, prints line n of screen 4.
 512+ 778A              // if WARNING is -1, see ERROR
 513+ 778A              // value can be negative or beyond block 4.
 514+ 778A                              Colon_Def MESSAGE, "MESSAGE", is_normal
 514+ 778A             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 514+ 778A             >
 514+ 778A             >Dict_Ptr        defl    $
 514+ 778A             >
 514+ 778A             >//              ______________________________________________________________________
 514+ 778A             >//              Heap part
 514+ 778A             >
 514+ 778A             >
 514+ 778A             >                org     (Heap_Ptr & $1FFF) + $E000
 514+ EA2D             >
 514+ EA2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ EA2D             >Latest_Definition defl  Heap_Ptr
 514+ EA2D             >
 514+ EA2D             >                // dummy db directives used to calculate length of namec
 514+ EA2D 4D 45 53 53 >                db      "MESSAGE"
 514+ EA31 41 47 45    >
 514+ EA34             >len_NFA         defl    $ - temp_NFA
 514+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ EA2D             >
 514+ EA2D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ EA2E 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 514+ EA32 41 47 45    >
 514+ EA35             >                org     $-1                 // alter last byte of Name just above to set
 514+ EA34 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ EA35             >
 514+ EA35 23 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 514+ EA37             >Prev_Ptr        defl    Heap_Ptr
 514+ EA37             >
 514+ EA37             >mirror_Ptr      defl    $
 514+ EA37             >
 514+ EA37 8C 77       >                dw      Dict_Ptr + 2        // xt
 514+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
 514+ EA39             >
 514+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
 514+ EA39             >
 514+ EA39             >//              ______________________________________________________________________
 514+ EA39             >//              Dictionary part
 514+ EA39             >
 514+ EA39             >                org     Dict_Ptr
 514+ 778A             >
 514+ 778A 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 514+ 778C             >
 514+ 778C             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 778C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 778F             >
 514+ 778F             >
 514+ 778F             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 778F             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 778F             >
 514+ 778F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 778F FF 6A 96 69                  dw      WARNING, FETCH          // warning @
 516+ 7793                                                              // if
 517+ 7793 F5 63                        dw      ZBRANCH
 518+ 7795 12 00                        dw      Message_Else - $
 519+ 7797 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 519+ 779B 9F 68
 520+ 779D 9C 6A                        dw          TWO                 //      2
 521+ 779F 7F 77                        dw          DOT_LINE            //      .line
 522+ 77A1 84 6C                        dw          SPACE               //      space
 523+ 77A3                                                              // else
 524+ 77A3
 525+ 77A3 E8 63                        dw      BRANCH
 526+ 77A5 0B 00                        dw      Message_ENdif - $
 527+ 77A7              Message_Else:
 528+ 77A7 1C 71                        dw          C_DOT_QUOTE         //      .( msg#)
 529+ 77A9 04 6D 73 67                  db          4, "msg#"
 529+ 77AD 23
 530+ 77AE B1 7E                        dw          DOT                 //      .  ( forward )
 531+ 77B0              Message_ENdif:                                  // endif
 532+ 77B0 4C 68                        dw      EXIT                    // ;
 533+ 77B2
 534+ 77B2
 535+ 77B2              //  ______________________________________________________________________
 536+ 77B2              //
 537+ 77B2              // device
 538+ 77B2                              Variable_Def DEVICE,   "DEVICE",   2
 538+ 77B2             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 538+ 77B2             >
 538+ 77B2             >Dict_Ptr        defl    $
 538+ 77B2             >
 538+ 77B2             >//              ______________________________________________________________________
 538+ 77B2             >//              Heap part
 538+ 77B2             >
 538+ 77B2             >
 538+ 77B2             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ EA39             >
 538+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ EA39             >Latest_Definition defl  Heap_Ptr
 538+ EA39             >
 538+ EA39             >                // dummy db directives used to calculate length of namec
 538+ EA39 44 45 56 49 >                db      "DEVICE"
 538+ EA3D 43 45       >
 538+ EA3F             >len_NFA         defl    $ - temp_NFA
 538+ EA3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ EA39             >
 538+ EA39 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ EA3A 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 538+ EA3E 43 45       >
 538+ EA40             >                org     $-1                 // alter last byte of Name just above to set
 538+ EA3F C5          >                db      {b $} | END_BIT     // msb as name end
 538+ EA40             >
 538+ EA40 2D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ EA42             >Prev_Ptr        defl    Heap_Ptr
 538+ EA42             >
 538+ EA42             >mirror_Ptr      defl    $
 538+ EA42             >
 538+ EA42 B4 77       >                dw      Dict_Ptr + 2        // xt
 538+ EA44             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ EA44             >
 538+ EA44             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ EA44             >
 538+ EA44             >//              ______________________________________________________________________
 538+ EA44             >//              Dictionary part
 538+ EA44             >
 538+ EA44             >                org     Dict_Ptr
 538+ 77B2             >
 538+ 77B2 42 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 77B4             >
 538+ 77B4             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 77B4 CD 75 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 538+ 77B7             >
 538+ 77B7             >
 538+ 77B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 77B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 77B7             >
 538+ 77B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 77B7 02 00       >                dw      2
 539+ 77B9
 540+ 77B9              //  ______________________________________________________________________
 541+ 77B9
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  77B9                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77B9              //  ______________________________________________________________________
   2+ 77B9              //
   3+ 77B9              //  next-opt.asm
   4+ 77B9              //
   5+ 77B9              //  ZX Spectrum Next - peculiar definitions
   6+ 77B9              //  ______________________________________________________________________
   7+ 77B9
   8+ 77B9              //  ______________________________________________________________________
   9+ 77B9              //
  10+ 77B9              // reg@         n -- b
  11+ 77B9              // read Next REGister n giving byte b
  12+ 77B9              //
  13+ 77B9              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77B9              //              dw      LIT, $243B
  15+ 77B9              //              dw      PSTORE
  16+ 77B9              //              dw      LIT, $253B
  17+ 77B9              //              dw      PFETCH
  18+ 77B9              //              dw      EXIT
  19+ 77B9                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77B9             >
  19+ 77B9             >Dict_Ptr        defl    $
  19+ 77B9             >
  19+ 77B9             >//              ______________________________________________________________________
  19+ 77B9             >//              Heap part
  19+ 77B9             >
  19+ 77B9             >
  19+ 77B9             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA44             >
  19+ EA44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA44             >Latest_Definition defl  Heap_Ptr
  19+ EA44             >
  19+ EA44             >                // dummy db directives used to calculate length of namec
  19+ EA44 52 45 47 40 >                db      "REG@"
  19+ EA48             >len_NFA         defl    $ - temp_NFA
  19+ EA48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA44             >
  19+ EA44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA45 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA49             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA48 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA49             >
  19+ EA49 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA4B             >Prev_Ptr        defl    Heap_Ptr
  19+ EA4B             >
  19+ EA4B             >mirror_Ptr      defl    $
  19+ EA4B             >
  19+ EA4B BB 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA4D             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA4D             >
  19+ EA4D             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA4D             >
  19+ EA4D             >//              ______________________________________________________________________
  19+ EA4D             >//              Dictionary part
  19+ EA4D             >
  19+ EA4D             >                org     Dict_Ptr
  19+ 77B9             >
  19+ 77B9 4B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77BB             >
  19+ 77BB             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77BB ~           >
  19+ 77BB ~           >
  19+ 77BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77BB             >
  19+ 77BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77BB D9                           exx
  21+ 77BC 01 3B 24                     ld      bc, $243B
  22+ 77BF E1                           pop     hl
  23+ 77C0 ED 69                        out     (c), l
  24+ 77C2 04                           inc     b
  25+ 77C3 ED 68                        in      l, (c)
  26+ 77C5 E5                           push    hl
  27+ 77C6 D9                           exx
  28+ 77C7                              next
  28+ 77C7 DD E9       >                jp      (ix)
  29+ 77C9
  30+ 77C9
  31+ 77C9              //  ______________________________________________________________________
  32+ 77C9              //
  33+ 77C9              // reg!         b n --
  34+ 77C9              // write value b to Next REGister n
  35+ 77C9              //
  36+ 77C9              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77C9              //              dw      LIT, $243B
  38+ 77C9              //              dw      PSTORE
  39+ 77C9              //              dw      LIT, $253B
  40+ 77C9              //              dw      PSTORE
  41+ 77C9              //              dw      EXIT
  42+ 77C9                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77C9             >
  42+ 77C9             >Dict_Ptr        defl    $
  42+ 77C9             >
  42+ 77C9             >//              ______________________________________________________________________
  42+ 77C9             >//              Heap part
  42+ 77C9             >
  42+ 77C9             >
  42+ 77C9             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA4D             >
  42+ EA4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA4D             >Latest_Definition defl  Heap_Ptr
  42+ EA4D             >
  42+ EA4D             >                // dummy db directives used to calculate length of namec
  42+ EA4D 52 45 47 21 >                db      "REG!"
  42+ EA51             >len_NFA         defl    $ - temp_NFA
  42+ EA51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA4D             >
  42+ EA4D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA4E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA52             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA51 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA52             >
  42+ EA52 44 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA54             >Prev_Ptr        defl    Heap_Ptr
  42+ EA54             >
  42+ EA54             >mirror_Ptr      defl    $
  42+ EA54             >
  42+ EA54 CB 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA56             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA56             >
  42+ EA56             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA56             >
  42+ EA56             >//              ______________________________________________________________________
  42+ EA56             >//              Dictionary part
  42+ EA56             >
  42+ EA56             >                org     Dict_Ptr
  42+ 77C9             >
  42+ 77C9 54 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77CB             >
  42+ 77CB             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77CB ~           >
  42+ 77CB ~           >
  42+ 77CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77CB             >
  42+ 77CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77CB D9                           exx
  44+ 77CC 01 3B 24                     ld      bc, $243B
  45+ 77CF E1                           pop     hl
  46+ 77D0 ED 69                        out     (c), l
  47+ 77D2 04                           inc     b
  48+ 77D3 E1                           pop     hl
  49+ 77D4 ED 69                        out     (c), l
  50+ 77D6 D9                           exx
  51+ 77D7                              next
  51+ 77D7 DD E9       >                jp      (ix)
  52+ 77D9
  53+ 77D9
  54+ 77D9              //  ______________________________________________________________________
  55+ 77D9              //
  56+ 77D9              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77D9              // NextZXOS call wrapper.
  58+ 77D9              //  n1 = hl register parameter value
  59+ 77D9              //  n2 = de register parameter value
  60+ 77D9              //  n3 = bc register parameter value
  61+ 77D9              //  n4 =  a register parameter value
  62+ 77D9              //   a = routine address in ROM 3
  63+ 77D9              // ----
  64+ 77D9              //  n5 = hl returned value
  65+ 77D9              //  n6 = de returned value
  66+ 77D9              //  n7 = bc returned value
  67+ 77D9              //  n8 =  a returned value
  68+ 77D9              //   f
  69+ 77D9                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77D9             >
  69+ 77D9             >Dict_Ptr        defl    $
  69+ 77D9             >
  69+ 77D9             >//              ______________________________________________________________________
  69+ 77D9             >//              Heap part
  69+ 77D9             >
  69+ 77D9             >
  69+ 77D9             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA56             >
  69+ EA56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA56             >Latest_Definition defl  Heap_Ptr
  69+ EA56             >
  69+ EA56             >                // dummy db directives used to calculate length of namec
  69+ EA56 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA5A 44 4F 53    >
  69+ EA5D             >len_NFA         defl    $ - temp_NFA
  69+ EA5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA56             >
  69+ EA56 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA57 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA5B 44 4F 53    >
  69+ EA5E             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA5D D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA5E             >
  69+ EA5E 4D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA60             >Prev_Ptr        defl    Heap_Ptr
  69+ EA60             >
  69+ EA60             >mirror_Ptr      defl    $
  69+ EA60             >
  69+ EA60 DB 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA62             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA62             >
  69+ EA62             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA62             >
  69+ EA62             >//              ______________________________________________________________________
  69+ EA62             >//              Dictionary part
  69+ EA62             >
  69+ EA62             >                org     Dict_Ptr
  69+ 77D9             >
  69+ 77D9 60 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77DB             >
  69+ 77DB             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77DB ~           >
  69+ 77DB ~           >
  69+ 77DB             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77DB             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77DB             >
  69+ 77DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77DB D9                            exx
  71+ 77DC E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77DD D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77DE 7B                            ld      a, e
  74+ 77DF C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77E0 D1                            pop     de                  // de' argument              //  n1
  76+ 77E1 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77E2 D9                           exx
  78+ 77E3 E1                           pop     hl                  // entry address a
  79+ 77E4 DD E5                        push    ix
  80+ 77E6 D5                           push    de
  81+ 77E7 C5                           push    bc
  82+ 77E8 EB                           ex      de, hl              // de is entry address
  83+ 77E9              //              ld      (SP_Saved), sp
  84+ 77E9              //              ld      sp, Cold_origin - 5
  85+ 77E9 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 77EB
  87+ 77EB CF                           rst     08
  88+ 77EC 94                           db      $94
  89+ 77ED
  90+ 77ED              //              ld      sp, (SP_Saved)
  91+ 77ED              //              push    ix
  92+ 77ED              //              pop     hl
  93+ 77ED              //              ld      (IX_Echo), hl
  94+ 77ED DD 22 98 63                  ld      (IX_Echo), ix
  95+ 77F1
  96+ 77F1 D9                           exx
  97+ 77F2 C1                           pop     bc
  98+ 77F3 D1                           pop     de
  99+ 77F4 DD E1                        pop     ix
 100+ 77F6 D9                            exx
 101+ 77F7 E5                            push    hl
 102+ 77F8 D5                            push    de
 103+ 77F9 C5                            push    bc
 104+ 77FA 26 00                         ld      h, 0
 105+ 77FC 6F                            ld      l, a
 106+ 77FD E5                            push    hl
 107+ 77FE D9                           exx
 108+ 77FF ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 7801 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 7802 E5                           push    hl
 111+ 7803                              next
 111+ 7803 DD E9       >                jp      (ix)
 112+ 7805
 113+ 7805              //  ______________________________________________________________________
 114+ 7805              //
 115+ 7805              // blk-fh
 116+ 7805                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 7805             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 7805             >
 116+ 7805             >Dict_Ptr        defl    $
 116+ 7805             >
 116+ 7805             >//              ______________________________________________________________________
 116+ 7805             >//              Heap part
 116+ 7805             >
 116+ 7805             >
 116+ 7805             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA62             >
 116+ EA62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA62             >Latest_Definition defl  Heap_Ptr
 116+ EA62             >
 116+ EA62             >                // dummy db directives used to calculate length of namec
 116+ EA62 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA66 46 48       >
 116+ EA68             >len_NFA         defl    $ - temp_NFA
 116+ EA68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA62             >
 116+ EA62 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA63 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA67 46 48       >
 116+ EA69             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA68 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA69             >
 116+ EA69 56 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA6B             >Prev_Ptr        defl    Heap_Ptr
 116+ EA6B             >
 116+ EA6B             >mirror_Ptr      defl    $
 116+ EA6B             >
 116+ EA6B 07 78       >                dw      Dict_Ptr + 2        // xt
 116+ EA6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA6D             >
 116+ EA6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA6D             >
 116+ EA6D             >//              ______________________________________________________________________
 116+ EA6D             >//              Dictionary part
 116+ EA6D             >
 116+ EA6D             >                org     Dict_Ptr
 116+ 7805             >
 116+ 7805 6B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 7807             >
 116+ 7807             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 7807 CD 75 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 780A             >
 116+ 780A             >
 116+ 780A             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 780A             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 780A             >
 116+ 780A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 780A 01 00       >                dw      1
 117+ 780C
 118+ 780C                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 780C             >
 118+ 780C             >Dict_Ptr        defl    $
 118+ 780C             >
 118+ 780C             >//              ______________________________________________________________________
 118+ 780C             >//              Heap part
 118+ 780C             >
 118+ 780C             >
 118+ 780C             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA6D             >
 118+ EA6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA6D             >Latest_Definition defl  Heap_Ptr
 118+ EA6D             >
 118+ EA6D             >                // dummy db directives used to calculate length of namec
 118+ EA6D 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA71 46 4E 41 4D >
 118+ EA75 45          >
 118+ EA76             >len_NFA         defl    $ - temp_NFA
 118+ EA76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA6D             >
 118+ EA6D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA6E 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA72 46 4E 41 4D >
 118+ EA76 45          >
 118+ EA77             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA76 C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA77             >
 118+ EA77 62 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA79             >Prev_Ptr        defl    Heap_Ptr
 118+ EA79             >
 118+ EA79             >mirror_Ptr      defl    $
 118+ EA79             >
 118+ EA79 0E 78       >                dw      Dict_Ptr + 2        // xt
 118+ EA7B             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA7B             >
 118+ EA7B             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA7B             >
 118+ EA7B             >//              ______________________________________________________________________
 118+ EA7B             >//              Dictionary part
 118+ EA7B             >
 118+ EA7B             >                org     Dict_Ptr
 118+ 780C             >
 118+ 780C 79 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 780E             >
 118+ 780E             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 780E CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 7811             >
 118+ 7811             >
 118+ 7811             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 7811             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 7811             >
 118+ 7811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 7811 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 7815 6F 63 6B 73
 119+ 7819 2D 36 34 2E
 119+ 781D 62 69 6E 00
 120+ 7821 00 00 00...                  ds      24
 121+ 7839
 122+ 7839              //  ______________________________________________________________________
 123+ 7839              //
 124+ 7839              // blk-seek     n --
 125+ 7839              // seek block n  within blocks!.bin  file
 126+ 7839                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 7839             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 7839             >
 126+ 7839             >Dict_Ptr        defl    $
 126+ 7839             >
 126+ 7839             >//              ______________________________________________________________________
 126+ 7839             >//              Heap part
 126+ 7839             >
 126+ 7839             >
 126+ 7839             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA7B             >
 126+ EA7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA7B             >Latest_Definition defl  Heap_Ptr
 126+ EA7B             >
 126+ EA7B             >                // dummy db directives used to calculate length of namec
 126+ EA7B 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA7F 53 45 45 4B >
 126+ EA83             >len_NFA         defl    $ - temp_NFA
 126+ EA83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA7B             >
 126+ EA7B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA7C 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA80 53 45 45 4B >
 126+ EA84             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA83 CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA84             >
 126+ EA84 6D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA86             >Prev_Ptr        defl    Heap_Ptr
 126+ EA86             >
 126+ EA86             >mirror_Ptr      defl    $
 126+ EA86             >
 126+ EA86 3B 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA88             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA88             >
 126+ EA88             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA88             >
 126+ EA88             >//              ______________________________________________________________________
 126+ EA88             >//              Dictionary part
 126+ EA88             >
 126+ EA88             >                org     Dict_Ptr
 126+ 7839             >
 126+ 7839 86 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 783B             >
 126+ 783B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 783B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 783E             >
 126+ 783E             >
 126+ 783E             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 783E             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 783E             >
 126+ 783E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 783E BF 6A 8F 76                  dw  BBUF, MMUL
 128+ 7842 07 78 96 69                  dw  BLK_FH, FETCH
 129+ 7846 E3 66                        dw  F_SEEK
 130+ 7848 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 784C EF 6D
 131+ 784E 4C 68                        dw  EXIT
 132+ 7850
 133+ 7850              //  ______________________________________________________________________
 134+ 7850              //
 135+ 7850              // blk-read     n --
 136+ 7850              // seek block n  within blocks!.bin  file
 137+ 7850                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 7850             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 7850             >
 137+ 7850             >Dict_Ptr        defl    $
 137+ 7850             >
 137+ 7850             >//              ______________________________________________________________________
 137+ 7850             >//              Heap part
 137+ 7850             >
 137+ 7850             >
 137+ 7850             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA88             >
 137+ EA88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA88             >Latest_Definition defl  Heap_Ptr
 137+ EA88             >
 137+ EA88             >                // dummy db directives used to calculate length of namec
 137+ EA88 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA8C 52 45 41 44 >
 137+ EA90             >len_NFA         defl    $ - temp_NFA
 137+ EA90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA88             >
 137+ EA88 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA89 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA8D 52 45 41 44 >
 137+ EA91             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA90 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA91             >
 137+ EA91 7B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA93             >Prev_Ptr        defl    Heap_Ptr
 137+ EA93             >
 137+ EA93             >mirror_Ptr      defl    $
 137+ EA93             >
 137+ EA93 52 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA95             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA95             >
 137+ EA95             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA95             >
 137+ EA95             >//              ______________________________________________________________________
 137+ EA95             >//              Dictionary part
 137+ EA95             >
 137+ EA95             >                org     Dict_Ptr
 137+ 7850             >
 137+ 7850 93 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 7852             >
 137+ 7852             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 7852 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 7855             >
 137+ 7855             >
 137+ 7855             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 7855             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 7855             >
 137+ 7855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 7855 3B 78                        dw  BLK_SEEK
 139+ 7857 BF 6A                        dw  BBUF
 140+ 7859 07 78 96 69                  dw  BLK_FH, FETCH
 141+ 785D 2F 67                        dw  F_READ
 142+ 785F A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7863 EF 6D
 143+ 7865 0A 69                        dw  DROP
 144+ 7867 4C 68                        dw  EXIT
 145+ 7869
 146+ 7869              //  ______________________________________________________________________
 147+ 7869              //
 148+ 7869              // blk-write     n --
 149+ 7869              // seek block n  within blocks!.bin  file
 150+ 7869                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7869             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7869             >
 150+ 7869             >Dict_Ptr        defl    $
 150+ 7869             >
 150+ 7869             >//              ______________________________________________________________________
 150+ 7869             >//              Heap part
 150+ 7869             >
 150+ 7869             >
 150+ 7869             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA95             >
 150+ EA95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA95             >Latest_Definition defl  Heap_Ptr
 150+ EA95             >
 150+ EA95             >                // dummy db directives used to calculate length of namec
 150+ EA95 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA99 57 52 49 54 >
 150+ EA9D 45          >
 150+ EA9E             >len_NFA         defl    $ - temp_NFA
 150+ EA9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA95             >
 150+ EA95 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA96 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA9A 57 52 49 54 >
 150+ EA9E 45          >
 150+ EA9F             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA9E C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA9F             >
 150+ EA9F 88 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EAA1             >Prev_Ptr        defl    Heap_Ptr
 150+ EAA1             >
 150+ EAA1             >mirror_Ptr      defl    $
 150+ EAA1             >
 150+ EAA1 6B 78       >                dw      Dict_Ptr + 2        // xt
 150+ EAA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EAA3             >
 150+ EAA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EAA3             >
 150+ EAA3             >//              ______________________________________________________________________
 150+ EAA3             >//              Dictionary part
 150+ EAA3             >
 150+ EAA3             >                org     Dict_Ptr
 150+ 7869             >
 150+ 7869 A1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 786B             >
 150+ 786B             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 786B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 786E             >
 150+ 786E             >
 150+ 786E             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 786E             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 786E             >
 150+ 786E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 786E 3B 78                        dw  BLK_SEEK
 152+ 7870 BF 6A                        dw  BBUF
 153+ 7872 07 78 96 69                  dw  BLK_FH, FETCH
 154+ 7876 4A 67                        dw  F_WRITE
 155+ 7878 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 787C EF 6D
 156+ 787E 0A 69                        dw  DROP
 157+ 7880 4C 68                        dw  EXIT
 158+ 7882
 159+ 7882              //  ______________________________________________________________________
 160+ 7882              //
 161+ 7882              // blk-init     n --
 162+ 7882              // seek block n  within blocks!.bin  file
 163+ 7882                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 7882             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 7882             >
 163+ 7882             >Dict_Ptr        defl    $
 163+ 7882             >
 163+ 7882             >//              ______________________________________________________________________
 163+ 7882             >//              Heap part
 163+ 7882             >
 163+ 7882             >
 163+ 7882             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EAA3             >
 163+ EAA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EAA3             >Latest_Definition defl  Heap_Ptr
 163+ EAA3             >
 163+ EAA3             >                // dummy db directives used to calculate length of namec
 163+ EAA3 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EAA7 49 4E 49 54 >
 163+ EAAB             >len_NFA         defl    $ - temp_NFA
 163+ EAAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EAA3             >
 163+ EAA3 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EAA4 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EAA8 49 4E 49 54 >
 163+ EAAC             >                org     $-1                 // alter last byte of Name just above to set
 163+ EAAB D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EAAC             >
 163+ EAAC 95 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EAAE             >Prev_Ptr        defl    Heap_Ptr
 163+ EAAE             >
 163+ EAAE             >mirror_Ptr      defl    $
 163+ EAAE             >
 163+ EAAE 84 78       >                dw      Dict_Ptr + 2        // xt
 163+ EAB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EAB0             >
 163+ EAB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EAB0             >
 163+ EAB0             >//              ______________________________________________________________________
 163+ EAB0             >//              Dictionary part
 163+ EAB0             >
 163+ EAB0             >                org     Dict_Ptr
 163+ 7882             >
 163+ 7882 AE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 7884             >
 163+ 7884             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 7884 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 7887             >
 163+ 7887             >
 163+ 7887             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 7887             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 7887             >
 163+ 7887             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7887 07 78 96 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 788B FF 66 0A 69
 165+ 788F 0E 78 B8 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 7893 B3 6B A3 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 7897 5A 67
 167+ 7899 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 789D EF 6D
 168+ 789F 07 78 A0 69                  dw  BLK_FH, STORE
 169+ 78A3 4C 68                        dw  EXIT
 170+ 78A5
 171+ 78A5              //  ______________________________________________________________________
 172+ 78A5              //
 173+ 78A5              // #sec
 174+ 78A5              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 78A5              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 78A5
 177+ 78A5                              Constant_Def NSEC , "#SEC", 32767
 177+ 78A5             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 78A5             >
 177+ 78A5             >Dict_Ptr        defl    $
 177+ 78A5             >
 177+ 78A5             >//              ______________________________________________________________________
 177+ 78A5             >//              Heap part
 177+ 78A5             >
 177+ 78A5             >
 177+ 78A5             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EAB0             >
 177+ EAB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EAB0             >Latest_Definition defl  Heap_Ptr
 177+ EAB0             >
 177+ EAB0             >                // dummy db directives used to calculate length of namec
 177+ EAB0 23 53 45 43 >                db      "#SEC"
 177+ EAB4             >len_NFA         defl    $ - temp_NFA
 177+ EAB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EAB0             >
 177+ EAB0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EAB1 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EAB5             >                org     $-1                 // alter last byte of Name just above to set
 177+ EAB4 C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EAB5             >
 177+ EAB5 A3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EAB7             >Prev_Ptr        defl    Heap_Ptr
 177+ EAB7             >
 177+ EAB7             >mirror_Ptr      defl    $
 177+ EAB7             >
 177+ EAB7 A7 78       >                dw      Dict_Ptr + 2        // xt
 177+ EAB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EAB9             >
 177+ EAB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EAB9             >
 177+ EAB9             >//              ______________________________________________________________________
 177+ EAB9             >//              Dictionary part
 177+ EAB9             >
 177+ EAB9             >                org     Dict_Ptr
 177+ 78A5             >
 177+ 78A5 B7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 78A7             >
 177+ 78A7             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 78A7 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 78AA             >
 177+ 78AA             >
 177+ 78AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 78AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 78AA             >
 177+ 78AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 78AA FF 7F       >                dw      32767
 178+ 78AC
 179+ 78AC              //  ______________________________________________________________________
 180+ 78AC
 181+ 78AC
 182+ 78AC
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  78AC                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78AC              //  ______________________________________________________________________
   2+ 78AC              //
   3+ 78AC              //  L3.asm
   4+ 78AC              //
   5+ 78AC              //  Continuation of L2.asm
   6+ 78AC              //  I/O Block definitions
   7+ 78AC              //  ______________________________________________________________________
   8+ 78AC
   9+ 78AC
  10+ 78AC              //  ______________________________________________________________________
  11+ 78AC              //
  12+ 78AC              // r/w          a n f --
  13+ 78AC              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78AC                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78AC             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78AC             >
  14+ 78AC             >Dict_Ptr        defl    $
  14+ 78AC             >
  14+ 78AC             >//              ______________________________________________________________________
  14+ 78AC             >//              Heap part
  14+ 78AC             >
  14+ 78AC             >
  14+ 78AC             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAB9             >
  14+ EAB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAB9             >Latest_Definition defl  Heap_Ptr
  14+ EAB9             >
  14+ EAB9             >                // dummy db directives used to calculate length of namec
  14+ EAB9 52 2F 57    >                db      "R/W"
  14+ EABC             >len_NFA         defl    $ - temp_NFA
  14+ EABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAB9             >
  14+ EAB9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EABA 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EABD             >                org     $-1                 // alter last byte of Name just above to set
  14+ EABC D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EABD             >
  14+ EABD B0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EABF             >Prev_Ptr        defl    Heap_Ptr
  14+ EABF             >
  14+ EABF             >mirror_Ptr      defl    $
  14+ EABF             >
  14+ EABF AE 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAC1             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAC1             >
  14+ EAC1             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAC1             >
  14+ EAC1             >//              ______________________________________________________________________
  14+ EAC1             >//              Dictionary part
  14+ EAC1             >
  14+ EAC1             >                org     Dict_Ptr
  14+ 78AC             >
  14+ 78AC BF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78AE             >
  14+ 78AE             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78AE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78B1             >
  14+ 78B1             >
  14+ 78B1             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78B1             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78B1             >
  14+ 78B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78B1 56 68                        dw      TO_R                    // >r
  16+ 78B3 BF 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78B5 25 69 84 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78B9 01 69 A7 78                  dw      OVER, NSEC              // over #sec
  19+ 78BD BF 68 2C 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78C1 1B 68                        dw      OR_OP                   // or
  21+ 78C3 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78C7 EF 6D
  22+ 78C9 61 68                        dw      R_TO                    // r>
  23+ 78CB                                                              // if
  24+ 78CB F5 63                        dw      ZBRANCH
  25+ 78CD 08 00                        dw      Read_Write_Else - $
  26+ 78CF 52 78                        dw          BLK_READ            //      blk-read
  27+ 78D1 E8 63                        dw      BRANCH
  28+ 78D3 04 00                        dw      Read_Write_Endif - $
  29+ 78D5              Read_Write_Else:                                // else
  30+ 78D5 6B 78                        dw          BLK_WRITE           //      blk-write
  31+ 78D7              Read_Write_Endif:                               // endif
  32+ 78D7 4C 68                        dw      EXIT                    // ;
  33+ 78D9
  34+ 78D9
  35+ 78D9              //  ______________________________________________________________________
  36+ 78D9              //
  37+ 78D9              // +buf        a1 -- a2 f
  38+ 78D9              // advences to next buffer, cyclically rotating along them
  39+ 78D9                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78D9             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78D9             >
  39+ 78D9             >Dict_Ptr        defl    $
  39+ 78D9             >
  39+ 78D9             >//              ______________________________________________________________________
  39+ 78D9             >//              Heap part
  39+ 78D9             >
  39+ 78D9             >
  39+ 78D9             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAC1             >
  39+ EAC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAC1             >Latest_Definition defl  Heap_Ptr
  39+ EAC1             >
  39+ EAC1             >                // dummy db directives used to calculate length of namec
  39+ EAC1 2B 42 55 46 >                db      "+BUF"
  39+ EAC5             >len_NFA         defl    $ - temp_NFA
  39+ EAC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAC1             >
  39+ EAC1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAC2 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAC6             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAC5 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAC6             >
  39+ EAC6 B9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAC8             >Prev_Ptr        defl    Heap_Ptr
  39+ EAC8             >
  39+ EAC8             >mirror_Ptr      defl    $
  39+ EAC8             >
  39+ EAC8 DB 78       >                dw      Dict_Ptr + 2        // xt
  39+ EACA             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EACA             >
  39+ EACA             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EACA             >
  39+ EACA             >//              ______________________________________________________________________
  39+ EACA             >//              Dictionary part
  39+ EACA             >
  39+ EACA             >                org     Dict_Ptr
  39+ 78D9             >
  39+ 78D9 C8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78DB             >
  39+ 78DB             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78DB CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78DE             >
  39+ 78DE             >
  39+ 78DE             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78DE             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78DE             >
  39+ 78DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78DE A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78E2 9F 68
  41+ 78E4 25 69 1D 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78E8 96 69
  42+ 78EA FE 6B                        dw      EQUALS                  // =
  43+ 78EC                                                              // if
  44+ 78EC F5 63                        dw      ZBRANCH
  45+ 78EE 08 00                        dw      PBuf_Endif - $
  46+ 78F0 0A 69                        dw          DROP                //      drop
  47+ 78F2 17 6B 96 69                  dw          FIRST, FETCH        //      first @
  48+ 78F6              PBuf_Endif:                                     // endif
  49+ 78F6 25 69 89 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78FA 96 69
  50+ 78FC F2 6B                        dw      SUBTRACT                // -
  51+ 78FE 4C 68                        dw      EXIT                    // ;
  52+ 7900
  53+ 7900              //  ______________________________________________________________________
  54+ 7900              //
  55+ 7900              // update       --
  56+ 7900              // mark the last used block to be written to disk
  57+ 7900                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7900             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7900             >
  57+ 7900             >Dict_Ptr        defl    $
  57+ 7900             >
  57+ 7900             >//              ______________________________________________________________________
  57+ 7900             >//              Heap part
  57+ 7900             >
  57+ 7900             >
  57+ 7900             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EACA             >
  57+ EACA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EACA             >Latest_Definition defl  Heap_Ptr
  57+ EACA             >
  57+ EACA             >                // dummy db directives used to calculate length of namec
  57+ EACA 55 50 44 41 >                db      "UPDATE"
  57+ EACE 54 45       >
  57+ EAD0             >len_NFA         defl    $ - temp_NFA
  57+ EAD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EACA             >
  57+ EACA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EACB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EACF 54 45       >
  57+ EAD1             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAD0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAD1             >
  57+ EAD1 C1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAD3             >Prev_Ptr        defl    Heap_Ptr
  57+ EAD3             >
  57+ EAD3             >mirror_Ptr      defl    $
  57+ EAD3             >
  57+ EAD3 02 79       >                dw      Dict_Ptr + 2        // xt
  57+ EAD5             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAD5             >
  57+ EAD5             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAD5             >
  57+ EAD5             >//              ______________________________________________________________________
  57+ EAD5             >//              Dictionary part
  57+ EAD5             >
  57+ EAD5             >                org     Dict_Ptr
  57+ 7900             >
  57+ 7900 D3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 7902             >
  57+ 7902             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7902 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7905             >
  57+ 7905             >
  57+ 7905             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7905             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7905             >
  57+ 7905             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7905 89 6B 96 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7909 96 69
  59+ 790B A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 790F 1B 68
  60+ 7911 89 6B 96 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7915 A0 69
  61+ 7917 4C 68                        dw      EXIT                    // ;
  62+ 7919
  63+ 7919
  64+ 7919              //  ______________________________________________________________________
  65+ 7919              //
  66+ 7919              // empty-buffers --
  67+ 7919                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7919             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7919             >
  67+ 7919             >Dict_Ptr        defl    $
  67+ 7919             >
  67+ 7919             >//              ______________________________________________________________________
  67+ 7919             >//              Heap part
  67+ 7919             >
  67+ 7919             >
  67+ 7919             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAD5             >
  67+ EAD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAD5             >Latest_Definition defl  Heap_Ptr
  67+ EAD5             >
  67+ EAD5             >                // dummy db directives used to calculate length of namec
  67+ EAD5 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAD9 59 2D 42 55 >
  67+ EADD 46 46 45 52 >
  67+ EAE1 53          >
  67+ EAE2             >len_NFA         defl    $ - temp_NFA
  67+ EAE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAD5             >
  67+ EAD5 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAD6 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EADA 59 2D 42 55 >
  67+ EADE 46 46 45 52 >
  67+ EAE2 53          >
  67+ EAE3             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAE2 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAE3             >
  67+ EAE3 CA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAE5             >Prev_Ptr        defl    Heap_Ptr
  67+ EAE5             >
  67+ EAE5             >mirror_Ptr      defl    $
  67+ EAE5             >
  67+ EAE5 1B 79       >                dw      Dict_Ptr + 2        // xt
  67+ EAE7             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAE7             >
  67+ EAE7             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAE7             >
  67+ EAE7             >//              ______________________________________________________________________
  67+ EAE7             >//              Dictionary part
  67+ EAE7             >
  67+ EAE7             >                org     Dict_Ptr
  67+ 7919             >
  67+ 7919 E5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 791B             >
  67+ 791B             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 791B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 791E             >
  67+ 791E             >
  67+ 791E             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 791E             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 791E             >
  67+ 791E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 791E 17 6B 96 69                  dw      FIRST, FETCH            // first @
  69+ 7922 1D 6B 96 69                  dw      LIMIT, FETCH            // limit @
  70+ 7926 01 69 F2 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 792A 99 70
  71+ 792C 4C 68                        dw      EXIT                    // ;
  72+ 792E
  73+ 792E              //  ______________________________________________________________________
  74+ 792E              //
  75+ 792E              // buffer       n -- a
  76+ 792E              // read block n and gives the address to a buffer
  77+ 792E              // any block previously inside the buffer, if modified, is rewritten to
  78+ 792E              // disk before reading the block n.
  79+ 792E
  80+ 792E                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 792E             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 792E             >
  80+ 792E             >Dict_Ptr        defl    $
  80+ 792E             >
  80+ 792E             >//              ______________________________________________________________________
  80+ 792E             >//              Heap part
  80+ 792E             >
  80+ 792E             >
  80+ 792E             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAE7             >
  80+ EAE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAE7             >Latest_Definition defl  Heap_Ptr
  80+ EAE7             >
  80+ EAE7             >                // dummy db directives used to calculate length of namec
  80+ EAE7 42 55 46 46 >                db      "BUFFER"
  80+ EAEB 45 52       >
  80+ EAED             >len_NFA         defl    $ - temp_NFA
  80+ EAED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAE7             >
  80+ EAE7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAE8 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAEC 45 52       >
  80+ EAEE             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAED D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAEE             >
  80+ EAEE D5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAF0             >Prev_Ptr        defl    Heap_Ptr
  80+ EAF0             >
  80+ EAF0             >mirror_Ptr      defl    $
  80+ EAF0             >
  80+ EAF0 30 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAF2             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAF2             >
  80+ EAF2             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAF2             >
  80+ EAF2             >//              ______________________________________________________________________
  80+ EAF2             >//              Dictionary part
  80+ EAF2             >
  80+ EAF2             >                org     Dict_Ptr
  80+ 792E             >
  80+ 792E F0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7930             >
  80+ 7930             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7930 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7933             >
  80+ 7933             >
  80+ 7933             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7933             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7933             >
  80+ 7933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7933 83 6B 96 69                  dw      USED, FETCH             // used @
  82+ 7937 25 69 56 68                  dw      DUP, TO_R               // dup >r
  83+ 793B                                                              // begin
  84+ 793B              Buffer_Begin:
  85+ 793B DB 78                        dw          PBUF                //      +buf
  86+ 793D                                                              // until
  87+ 793D F5 63                        dw      ZBRANCH
  88+ 793F FC FF                        dw      Buffer_Begin - $
  89+ 7941 83 6B A0 69                  dw      USED, STORE             // used !
  90+ 7945 6C 68 96 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7949 84 68
  91+ 794B                                                              // if
  92+ 794B F5 63                        dw      ZBRANCH
  93+ 794D 14 00                        dw      Buffer_Endif - $
  94+ 794F 6C 68 CE 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7953 6C 68 96 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7957 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 795B 0C 68                        dw          AND_OP              //      and
  98+ 795D 8E 6A AE 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7961              Buffer_Endif:                                   // endif
 100+ 7961 6C 68 A0 69                  dw      R_OP, STORE             // r !
 101+ 7965 6C 68 89 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7969 A0 69
 102+ 796B 61 68 CE 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 796F 4C 68                        dw      EXIT                    // ;
 104+ 7971
 105+ 7971              //  ______________________________________________________________________
 106+ 7971              //
 107+ 7971              // block        n -- a
 108+ 7971              // Leaves the buffer address that contains the block n.
 109+ 7971              // If the block is not already present, it will be loaded from disk
 110+ 7971              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7971              // disk before reading the block n.
 112+ 7971              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7971
 114+ 7971                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7971             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7971             >
 114+ 7971             >Dict_Ptr        defl    $
 114+ 7971             >
 114+ 7971             >//              ______________________________________________________________________
 114+ 7971             >//              Heap part
 114+ 7971             >
 114+ 7971             >
 114+ 7971             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAF2             >
 114+ EAF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAF2             >Latest_Definition defl  Heap_Ptr
 114+ EAF2             >
 114+ EAF2             >                // dummy db directives used to calculate length of namec
 114+ EAF2 42 4C 4F 43 >                db      "BLOCK"
 114+ EAF6 4B          >
 114+ EAF7             >len_NFA         defl    $ - temp_NFA
 114+ EAF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAF2             >
 114+ EAF2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAF3 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAF7 4B          >
 114+ EAF8             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAF7 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAF8             >
 114+ EAF8 E7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAFA             >Prev_Ptr        defl    Heap_Ptr
 114+ EAFA             >
 114+ EAFA             >mirror_Ptr      defl    $
 114+ EAFA             >
 114+ EAFA 73 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAFC             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAFC             >
 114+ EAFC             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAFC             >
 114+ EAFC             >//              ______________________________________________________________________
 114+ EAFC             >//              Dictionary part
 114+ EAFC             >
 114+ EAFC             >                org     Dict_Ptr
 114+ 7971             >
 114+ 7971 FA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7973             >
 114+ 7973             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7973 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7976             >
 114+ 7976             >
 114+ 7976             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7976             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7976             >
 114+ 7976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7976                          //  dw      OFFSET, FETCH           // offset @
 116+ 7976                          //  dw      PLUS
 117+ 7976 56 68                        dw      TO_R                    // + >r
 118+ 7978 89 6B 96 69                  dw      PREV, FETCH             // prev @
 119+ 797C 25 69 96 69                  dw      DUP, FETCH              // dup @
 120+ 7980 6C 68 F2 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 7984 25 69 9F 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 7988                                                              // if
 123+ 7988 F5 63                        dw        ZBRANCH
 124+ 798A 32 00                        dw        Block_Endif_1 - $
 125+ 798C              Block_Begin:                                    //      begin
 126+ 798C DB 78 71 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 7990                                                              //          if
 128+ 7990 F5 63                        dw          ZBRANCH
 129+ 7992 12 00                        dw          Block_Endif_2 - $
 130+ 7994 0A 69                        dw              DROP            //              drop
 131+ 7996 6C 68 30 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 799A 25 69                        dw              DUP             //              dup
 133+ 799C 6C 68 95 6A                  dw              R_OP, ONE       //              r 1
 134+ 79A0 AE 78                        dw              READ_WRITE      //              r/w
 135+ 79A2 DB 68                        dw              TWO_MINUS       //              2-
 136+ 79A4              Block_Endif_2:                                  //          endif
 137+ 79A4 25 69 96 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79A8 6C 68
 138+ 79AA F2 6B 25 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79AE 9F 68 71 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79B2                                                              //      until
 141+ 79B2 F5 63                        dw        ZBRANCH
 142+ 79B4 D8 FF                        dw        Block_Begin - $
 143+ 79B6 25 69 89 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79BA A0 69
 144+ 79BC              Block_Endif_1:                                  // endif
 145+ 79BC 61 68 0A 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79C0 CE 68
 146+ 79C2 4C 68                        dw      EXIT                    // ;
 147+ 79C4
 148+ 79C4              //  ______________________________________________________________________
 149+ 79C4              //
 150+ 79C4              // #buff        -- n
 151+ 79C4              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79C4                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79C4             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79C4             >
 152+ 79C4             >Dict_Ptr        defl    $
 152+ 79C4             >
 152+ 79C4             >//              ______________________________________________________________________
 152+ 79C4             >//              Heap part
 152+ 79C4             >
 152+ 79C4             >
 152+ 79C4             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAFC             >
 152+ EAFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAFC             >Latest_Definition defl  Heap_Ptr
 152+ EAFC             >
 152+ EAFC             >                // dummy db directives used to calculate length of namec
 152+ EAFC 23 42 55 46 >                db      "#BUFF"
 152+ EB00 46          >
 152+ EB01             >len_NFA         defl    $ - temp_NFA
 152+ EB01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAFC             >
 152+ EAFC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAFD 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EB01 46          >
 152+ EB02             >                org     $-1                 // alter last byte of Name just above to set
 152+ EB01 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EB02             >
 152+ EB02 F2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EB04             >Prev_Ptr        defl    Heap_Ptr
 152+ EB04             >
 152+ EB04             >mirror_Ptr      defl    $
 152+ EB04             >
 152+ EB04 C6 79       >                dw      Dict_Ptr + 2        // xt
 152+ EB06             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EB06             >
 152+ EB06             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EB06             >
 152+ EB06             >//              ______________________________________________________________________
 152+ EB06             >//              Dictionary part
 152+ EB06             >
 152+ EB06             >                org     Dict_Ptr
 152+ 79C4             >
 152+ 79C4 04 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79C6             >
 152+ 79C6             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79C6 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79C9             >
 152+ 79C9             >
 152+ 79C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79C9             >
 152+ 79C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79C9 07 00       >                dw      7
 153+ 79CB
 154+ 79CB              //  ______________________________________________________________________
 155+ 79CB              //
 156+ 79CB              // flush        --
 157+ 79CB                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79CB             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79CB             >
 157+ 79CB             >Dict_Ptr        defl    $
 157+ 79CB             >
 157+ 79CB             >//              ______________________________________________________________________
 157+ 79CB             >//              Heap part
 157+ 79CB             >
 157+ 79CB             >
 157+ 79CB             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EB06             >
 157+ EB06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EB06             >Latest_Definition defl  Heap_Ptr
 157+ EB06             >
 157+ EB06             >                // dummy db directives used to calculate length of namec
 157+ EB06 46 4C 55 53 >                db      "FLUSH"
 157+ EB0A 48          >
 157+ EB0B             >len_NFA         defl    $ - temp_NFA
 157+ EB0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EB06             >
 157+ EB06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EB07 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB0B 48          >
 157+ EB0C             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB0B C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB0C             >
 157+ EB0C FC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB0E             >Prev_Ptr        defl    Heap_Ptr
 157+ EB0E             >
 157+ EB0E             >mirror_Ptr      defl    $
 157+ EB0E             >
 157+ EB0E CD 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB10             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB10             >
 157+ EB10             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB10             >
 157+ EB10             >//              ______________________________________________________________________
 157+ EB10             >//              Dictionary part
 157+ EB10             >
 157+ EB10             >                org     Dict_Ptr
 157+ 79CB             >
 157+ 79CB 0E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79CD             >
 157+ 79CD             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79CD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79D0             >
 157+ 79D0             >
 157+ 79D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79D0             >
 157+ 79D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79D0 C6 79 B8 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79D4 8E 6A
 159+ 79D6              Flush_Do:                                       // do
 160+ 79D6 34 64                        dw      C_DO
 161+ 79D8 8E 6A 30 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79DC 0A 69
 162+ 79DE                                                              // loop
 163+ 79DE E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79E2 07 78 96 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79E6 0B 67 0A 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79EA 4C 68                        dw      EXIT                    // exit
 167+ 79EC
 168+ 79EC              //  ______________________________________________________________________
 169+ 79EC              //
 170+ 79EC              // f_getline    a m fh -- n
 171+ 79EC              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79EC              // Address a is left for subsequent processing
 173+ 79EC              // and n as the actual number of byte read, that is the length of line
 174+ 79EC                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79EC             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79EC             >
 174+ 79EC             >Dict_Ptr        defl    $
 174+ 79EC             >
 174+ 79EC             >//              ______________________________________________________________________
 174+ 79EC             >//              Heap part
 174+ 79EC             >
 174+ 79EC             >
 174+ 79EC             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB10             >
 174+ EB10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB10             >Latest_Definition defl  Heap_Ptr
 174+ EB10             >
 174+ EB10             >                // dummy db directives used to calculate length of namec
 174+ EB10 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB14 54 4C 49 4E >
 174+ EB18 45          >
 174+ EB19             >len_NFA         defl    $ - temp_NFA
 174+ EB19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB10             >
 174+ EB10 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB11 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB15 54 4C 49 4E >
 174+ EB19 45          >
 174+ EB1A             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB19 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB1A             >
 174+ EB1A 06 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB1C             >Prev_Ptr        defl    Heap_Ptr
 174+ EB1C             >
 174+ EB1C             >mirror_Ptr      defl    $
 174+ EB1C             >
 174+ EB1C EE 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB1E             >
 174+ EB1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB1E             >
 174+ EB1E             >//              ______________________________________________________________________
 174+ EB1E             >//              Dictionary part
 174+ EB1E             >
 174+ EB1E             >                org     Dict_Ptr
 174+ 79EC             >
 174+ 79EC 1C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79EE             >
 174+ 79EE             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79EE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79F1             >
 174+ 79F1             >
 174+ 79F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79F1             >
 174+ 79F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79F1 56 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79F3 15 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 79F5 6C 68 17 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79F9 A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 79FD EF 6D
 179+ 79FF
 180+ 79FF 67 69 01 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A03 B8 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A07
 183+ 7A07 6C 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A0B A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 7A0F EF 6D
 185+ 7A11                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A11 F5 63                        dw      ZBRANCH
 187+ 7A13 3C 00                        dw      FGetline_Else - $
 188+ 7A15 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A19 29 65
 189+ 7A1B 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A1F 1E 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A21 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A25 29 65
 192+ 7A27 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A2B 2C 69 37 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A2F 25 69 A1 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A33 A0 69
 195+ 7A35 25 69 56 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A39 67 69 61 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A3D 8E 6A A9 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A41 61 68 E3 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A45 A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 7A49 EF 6D
 200+ 7A4B                                                              // else
 201+ 7A4B E8 63                        dw      BRANCH
 202+ 7A4D 0C 00                        dw      FGetline_Endif - $
 203+ 7A4F              FGetline_Else:
 204+ 7A4F 61 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A51 67 69 61 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A55 0A 69 8E 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A59              FGetline_Endif:                                 // endif
 208+ 7A59 56 68 25 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A5D 25 69
 209+ 7A5F B8 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A63 6C 68 8D 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A67 74 69 9F 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A6B 8E 6A 1E 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A6F D3 68 A0 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A73 6C 68 9F 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A77 BF 68
 215+ 7A79 1E 69 6C 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A7D F2 6B
 216+ 7A7F A4 70                        dw      BLANK                   // blank
 217+ 7A81 61 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A83 4C 68                        dw      EXIT                    // ;
 219+ 7A85
 220+ 7A85              //  ______________________________________________________________________
 221+ 7A85              //
 222+ 7A85              // f_include    fh --
 223+ 7A85              // Given a filehandle includes the source from file
 224+ 7A85                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A85             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A85             >
 224+ 7A85             >Dict_Ptr        defl    $
 224+ 7A85             >
 224+ 7A85             >//              ______________________________________________________________________
 224+ 7A85             >//              Heap part
 224+ 7A85             >
 224+ 7A85             >
 224+ 7A85             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB1E             >
 224+ EB1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB1E             >Latest_Definition defl  Heap_Ptr
 224+ EB1E             >
 224+ EB1E             >                // dummy db directives used to calculate length of namec
 224+ EB1E 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB22 43 4C 55 44 >
 224+ EB26 45          >
 224+ EB27             >len_NFA         defl    $ - temp_NFA
 224+ EB27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB1E             >
 224+ EB1E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB1F 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB23 43 4C 55 44 >
 224+ EB27 45          >
 224+ EB28             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB27 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB28             >
 224+ EB28 10 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB2A             >Prev_Ptr        defl    Heap_Ptr
 224+ EB2A             >
 224+ EB2A             >mirror_Ptr      defl    $
 224+ EB2A             >
 224+ EB2A 87 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB2C             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB2C             >
 224+ EB2C             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB2C             >
 224+ EB2C             >//              ______________________________________________________________________
 224+ EB2C             >//              Dictionary part
 224+ EB2C             >
 224+ EB2C             >                org     Dict_Ptr
 224+ 7A85             >
 224+ 7A85 2A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A87             >
 224+ 7A87             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A87 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A8A             >
 224+ 7A8A             >
 224+ 7A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A8A             >
 224+ 7A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A8A 2F 6B 96 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A8E 56 68
 226+ 7A90 35 6B 96 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A94 56 68
 227+ 7A96 9B 6B 96 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A9A 56 68
 228+ 7A9C 6C 68                        dw      R_OP                    // r
 229+ 7A9E                                                              // if
 230+ 7A9E F5 63                        dw      ZBRANCH
 231+ 7AA0 20 00                        dw      FInclude_Else_1 - $
 232+ 7AA2 6C 68 17 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 7AA6 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 7AAA EF 6D
 234+ 7AAC 35 6B 96 69                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 7AB0 DB 68                        dw          TWO_MINUS
 236+ 7AB2 A1 6B 96 69                  dw          SPAN, FETCH         //      span @ -
 237+ 7AB6 F2 6B                        dw          SUBTRACT
 238+ 7AB8 E7 6B A9 68                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 7ABC                                                              // else
 240+ 7ABC E8 63                        dw      BRANCH
 241+ 7ABE 06 00                        dw      FInclude_Endif_1 - $
 242+ 7AC0              FInclude_Else_1:
 243+ 7AC0 8E 6A 8E 6A                  dw          ZERO, ZERO          //      0 0
 244+ 7AC4                                                              // endif
 245+ 7AC4              FInclude_Endif_1:
 246+ 7AC4 56 68 56 68                  dw      TO_R, TO_R              // >r >r
 247+ 7AC8 9B 6B A0 69                  dw      SOURCE_ID, STORE        // source-id !
 248+ 7ACC              FInclude_Begin:                                 // begin
 249+ 7ACC 95 6A 73 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 7AD0 BF 6A
 250+ 7AD2 74 69 A4 70                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 7AD6 1E 69 B8 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 7ADA 1E 69 D3 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 7ADE 9B 6B 96 69                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 7AE2 EE 79                        dw          F_GETLINE           //      f_getline
 255+ 7AE4                                                              // while
 256+ 7AE4 F5 63                        dw      ZBRANCH
 257+ 7AE6 14 00                        dw      FInclude_Repeat - $
 258+ 7AE8 95 6A 2F 6B                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 7AEC A0 69
 259+ 7AEE 8E 6A 35 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 7AF2 A0 69
 260+ 7AF4 D4 74                        dw          INTERPRET           //      interpret
 261+ 7AF6 E8 63                        dw      BRANCH
 262+ 7AF8 D4 FF                        dw      FInclude_Begin - $
 263+ 7AFA              FInclude_Repeat:                                // repeat
 264+ 7AFA 9B 6B 96 69                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 7AFE 8E 6A 9B 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 7B02 A0 69
 266+ 7B04 FF 66                        dw      F_CLOSE                 // f_close
 267+ 7B06 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 7B0A EF 6D
 268+ 7B0C 61 68 61 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 7B10 61 68
 269+ 7B12 25 69 9B 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 7B16 A0 69
 270+ 7B18                                                              // if
 271+ 7B18 F5 63                        dw      ZBRANCH
 272+ 7B1A 12 00                        dw      FInclude_Else_2 - $
 273+ 7B1C 9B 6B 96 69                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 7B20 E3 66                        dw          F_SEEK              //      f_seek
 275+ 7B22 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 7B26 EF 6D
 276+ 7B28                                                              // else
 277+ 7B28 E8 63                        dw      BRANCH
 278+ 7B2A 04 00                        dw      FInclude_Endif_2 - $
 279+ 7B2C              FInclude_Else_2:
 280+ 7B2C 61 69                        dw          TWO_DROP            //      2drop
 281+ 7B2E              FInclude_Endif_2:                               // endif
 282+ 7B2E 61 68 35 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 7B32 A0 69
 283+ 7B34 61 68 2F 6B                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 7B38 A0 69
 284+ 7B3A 4C 68                        dw      EXIT                    // ;
 285+ 7B3C
 286+ 7B3C              //  ______________________________________________________________________
 287+ 7B3C              //
 288+ 7B3C              // open<         -- fh
 289+ 7B3C              // Open the following filename and return it file-handle
 290+ 7B3C              // Used in the form OPEN CCCC
 291+ 7B3C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 7B3C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 7B3C             >
 291+ 7B3C             >Dict_Ptr        defl    $
 291+ 7B3C             >
 291+ 7B3C             >//              ______________________________________________________________________
 291+ 7B3C             >//              Heap part
 291+ 7B3C             >
 291+ 7B3C             >
 291+ 7B3C             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB2C             >
 291+ EB2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB2C             >Latest_Definition defl  Heap_Ptr
 291+ EB2C             >
 291+ EB2C             >                // dummy db directives used to calculate length of namec
 291+ EB2C 4F 50 45 4E >                db      "OPEN<"
 291+ EB30 3C          >
 291+ EB31             >len_NFA         defl    $ - temp_NFA
 291+ EB31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB2C             >
 291+ EB2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB2D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB31 3C          >
 291+ EB32             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB31 BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB32             >
 291+ EB32 1E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB34             >Prev_Ptr        defl    Heap_Ptr
 291+ EB34             >
 291+ EB34             >mirror_Ptr      defl    $
 291+ EB34             >
 291+ EB34 3E 7B       >                dw      Dict_Ptr + 2        // xt
 291+ EB36             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB36             >
 291+ EB36             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB36             >
 291+ EB36             >//              ______________________________________________________________________
 291+ EB36             >//              Dictionary part
 291+ EB36             >
 291+ EB36             >                org     Dict_Ptr
 291+ 7B3C             >
 291+ 7B3C 34 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 7B3E             >
 291+ 7B3E             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7B3E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7B41             >
 291+ 7B41             >
 291+ 7B41             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7B41             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7B41             >
 291+ 7B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7B41 B1 6A                        dw      BL
 293+ 7B43 D1 70 2B 6F                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 7B47 01 69
 294+ 7B49 9F 68 8E 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 7B4D 1E 69 A0 69
 295+ 7B51 C2 70 95 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 7B55 5A 67
 296+ 7B57 A3 63 2B 00                  dw      LIT, 43                 // 43
 297+ 7B5B EF 6D                        dw      QERROR                  // ?error
 298+ 7B5D 4C 68                        dw      EXIT                    // ;
 299+ 7B5F
 300+ 7B5F              //  ______________________________________________________________________
 301+ 7B5F              //
 302+ 7B5F              // include      -- cccc
 303+ 7B5F              // Include the following filename
 304+ 7B5F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 304+ 7B5F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 304+ 7B5F             >
 304+ 7B5F             >Dict_Ptr        defl    $
 304+ 7B5F             >
 304+ 7B5F             >//              ______________________________________________________________________
 304+ 7B5F             >//              Heap part
 304+ 7B5F             >
 304+ 7B5F             >
 304+ 7B5F             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB36             >
 304+ EB36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB36             >Latest_Definition defl  Heap_Ptr
 304+ EB36             >
 304+ EB36             >                // dummy db directives used to calculate length of namec
 304+ EB36 49 4E 43 4C >                db      "INCLUDE"
 304+ EB3A 55 44 45    >
 304+ EB3D             >len_NFA         defl    $ - temp_NFA
 304+ EB3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB36             >
 304+ EB36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB37 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 304+ EB3B 55 44 45    >
 304+ EB3E             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB3D C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB3E             >
 304+ EB3E 2C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB40             >Prev_Ptr        defl    Heap_Ptr
 304+ EB40             >
 304+ EB40             >mirror_Ptr      defl    $
 304+ EB40             >
 304+ EB40 61 7B       >                dw      Dict_Ptr + 2        // xt
 304+ EB42             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB42             >
 304+ EB42             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB42             >
 304+ EB42             >//              ______________________________________________________________________
 304+ EB42             >//              Dictionary part
 304+ EB42             >
 304+ EB42             >                org     Dict_Ptr
 304+ 7B5F             >
 304+ 7B5F 40 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7B61             >
 304+ 7B61             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7B61 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7B64             >
 304+ 7B64             >
 304+ 7B64             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7B64             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7B64             >
 304+ 7B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7B64 3E 7B                        dw      OPEN_FH                 // open
 306+ 7B66 25 69 87 7A                  dw      DUP, F_INCLUDE          // dup f_include
 307+ 7B6A FF 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 308+ 7B6E 4C 68                        dw      EXIT                    // ;
 309+ 7B70
 310+ 7B70              //  ______________________________________________________________________
 311+ 7B70              //
 312+ 7B70              // needs
 313+ 7B70              // check for cccc exists in vocabulary
 314+ 7B70              // if it doesn't then  INCLUDE  inc/cccc.F
 315+ 7B70
 316+ 7B70              // temp filename cccc.f as counted string zero-padded
 317+ 7B70                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 317+ 7B70             >
 317+ 7B70             >Dict_Ptr        defl    $
 317+ 7B70             >
 317+ 7B70             >//              ______________________________________________________________________
 317+ 7B70             >//              Heap part
 317+ 7B70             >
 317+ 7B70             >
 317+ 7B70             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ EB42             >
 317+ EB42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ EB42             >Latest_Definition defl  Heap_Ptr
 317+ EB42             >
 317+ EB42             >                // dummy db directives used to calculate length of namec
 317+ EB42 4E 45 45 44 >                db      "NEEDS-W"
 317+ EB46 53 2D 57    >
 317+ EB49             >len_NFA         defl    $ - temp_NFA
 317+ EB49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ EB42             >
 317+ EB42 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ EB43 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 317+ EB47 53 2D 57    >
 317+ EB4A             >                org     $-1                 // alter last byte of Name just above to set
 317+ EB49 D7          >                db      {b $} | END_BIT     // msb as name end
 317+ EB4A             >
 317+ EB4A 36 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 317+ EB4C             >Prev_Ptr        defl    Heap_Ptr
 317+ EB4C             >
 317+ EB4C             >mirror_Ptr      defl    $
 317+ EB4C             >
 317+ EB4C 72 7B       >                dw      Dict_Ptr + 2        // xt
 317+ EB4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ EB4E             >
 317+ EB4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ EB4E             >
 317+ EB4E             >//              ______________________________________________________________________
 317+ EB4E             >//              Dictionary part
 317+ EB4E             >
 317+ EB4E             >                org     Dict_Ptr
 317+ 7B70             >
 317+ 7B70 4C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 317+ 7B72             >
 317+ 7B72             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 7B72 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 317+ 7B75             >
 317+ 7B75             >
 317+ 7B75             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 7B75             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 7B75             >
 317+ 7B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 7B75 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 319+ 7B98              // temp complete path+filename
 320+ 7B98                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 320+ 7B98             >
 320+ 7B98             >Dict_Ptr        defl    $
 320+ 7B98             >
 320+ 7B98             >//              ______________________________________________________________________
 320+ 7B98             >//              Heap part
 320+ 7B98             >
 320+ 7B98             >
 320+ 7B98             >                org     (Heap_Ptr & $1FFF) + $E000
 320+ EB4E             >
 320+ EB4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 320+ EB4E             >Latest_Definition defl  Heap_Ptr
 320+ EB4E             >
 320+ EB4E             >                // dummy db directives used to calculate length of namec
 320+ EB4E 4E 45 45 44 >                db      "NEEDS-FN"
 320+ EB52 53 2D 46 4E >
 320+ EB56             >len_NFA         defl    $ - temp_NFA
 320+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 320+ EB4E             >
 320+ EB4E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 320+ EB4F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 320+ EB53 53 2D 46 4E >
 320+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 320+ EB56 CE          >                db      {b $} | END_BIT     // msb as name end
 320+ EB57             >
 320+ EB57 42 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 320+ EB59             >Prev_Ptr        defl    Heap_Ptr
 320+ EB59             >
 320+ EB59             >mirror_Ptr      defl    $
 320+ EB59             >
 320+ EB59 9A 7B       >                dw      Dict_Ptr + 2        // xt
 320+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 320+ EB5B             >
 320+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 320+ EB5B             >
 320+ EB5B             >//              ______________________________________________________________________
 320+ EB5B             >//              Dictionary part
 320+ EB5B             >
 320+ EB5B             >                org     Dict_Ptr
 320+ 7B98             >
 320+ 7B98 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 320+ 7B9A             >
 320+ 7B9A             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 320+ 7B9A CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 320+ 7B9D             >
 320+ 7B9D             >
 320+ 7B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 320+ 7B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 320+ 7B9D             >
 320+ 7B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 321+ 7B9D 00 00 00...                  ds      40
 322+ 7BC5              // constant path
 323+ 7BC5                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 323+ 7BC5             >
 323+ 7BC5             >Dict_Ptr        defl    $
 323+ 7BC5             >
 323+ 7BC5             >//              ______________________________________________________________________
 323+ 7BC5             >//              Heap part
 323+ 7BC5             >
 323+ 7BC5             >
 323+ 7BC5             >                org     (Heap_Ptr & $1FFF) + $E000
 323+ EB5B             >
 323+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ EB5B             >Latest_Definition defl  Heap_Ptr
 323+ EB5B             >
 323+ EB5B             >                // dummy db directives used to calculate length of namec
 323+ EB5B 4E 45 45 44 >                db      "NEEDS-INC"
 323+ EB5F 53 2D 49 4E >
 323+ EB63 43          >
 323+ EB64             >len_NFA         defl    $ - temp_NFA
 323+ EB64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ EB5B             >
 323+ EB5B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ EB5C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 323+ EB60 53 2D 49 4E >
 323+ EB64 43          >
 323+ EB65             >                org     $-1                 // alter last byte of Name just above to set
 323+ EB64 C3          >                db      {b $} | END_BIT     // msb as name end
 323+ EB65             >
 323+ EB65 4E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 323+ EB67             >Prev_Ptr        defl    Heap_Ptr
 323+ EB67             >
 323+ EB67             >mirror_Ptr      defl    $
 323+ EB67             >
 323+ EB67 C7 7B       >                dw      Dict_Ptr + 2        // xt
 323+ EB69             >Heap_Ptr        defl    $ - $E000           // save current HP
 323+ EB69             >
 323+ EB69             >Current_HP      defl  $ - $E000             // used to set HP once!
 323+ EB69             >
 323+ EB69             >//              ______________________________________________________________________
 323+ EB69             >//              Dictionary part
 323+ EB69             >
 323+ EB69             >                org     Dict_Ptr
 323+ 7BC5             >
 323+ 7BC5 67 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 323+ 7BC7             >
 323+ 7BC7             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 7BC7 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 323+ 7BCA             >
 323+ 7BCA             >
 323+ 7BCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 7BCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 7BCA             >
 323+ 7BCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 7BCA 04 69 6E 63                  db      4, "inc/", 0
 324+ 7BCE 2F 00
 325+ 7BD0                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 325+ 7BD0             >
 325+ 7BD0             >Dict_Ptr        defl    $
 325+ 7BD0             >
 325+ 7BD0             >//              ______________________________________________________________________
 325+ 7BD0             >//              Heap part
 325+ 7BD0             >
 325+ 7BD0             >
 325+ 7BD0             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ EB69             >
 325+ EB69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ EB69             >Latest_Definition defl  Heap_Ptr
 325+ EB69             >
 325+ EB69             >                // dummy db directives used to calculate length of namec
 325+ EB69 4E 45 45 44 >                db      "NEEDS-LIB"
 325+ EB6D 53 2D 4C 49 >
 325+ EB71 42          >
 325+ EB72             >len_NFA         defl    $ - temp_NFA
 325+ EB72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ EB69             >
 325+ EB69 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ EB6A 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 325+ EB6E 53 2D 4C 49 >
 325+ EB72 42          >
 325+ EB73             >                org     $-1                 // alter last byte of Name just above to set
 325+ EB72 C2          >                db      {b $} | END_BIT     // msb as name end
 325+ EB73             >
 325+ EB73 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ EB75             >Prev_Ptr        defl    Heap_Ptr
 325+ EB75             >
 325+ EB75             >mirror_Ptr      defl    $
 325+ EB75             >
 325+ EB75 D2 7B       >                dw      Dict_Ptr + 2        // xt
 325+ EB77             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ EB77             >
 325+ EB77             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ EB77             >
 325+ EB77             >//              ______________________________________________________________________
 325+ EB77             >//              Dictionary part
 325+ EB77             >
 325+ EB77             >                org     Dict_Ptr
 325+ 7BD0             >
 325+ 7BD0 75 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 7BD2             >
 325+ 7BD2             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 7BD2 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 325+ 7BD5             >
 325+ 7BD5             >
 325+ 7BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 7BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 7BD5             >
 325+ 7BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 7BD5 04 6C 69 62                  db      4, "lib/", 0
 326+ 7BD9 2F 00
 327+ 7BDB
 328+ 7BDB              // Concatenate path at a and filename and include it
 329+ 7BDB              // No error is issued if filename doesn't exist.
 330+ 7BDB                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 330+ 7BDB             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 330+ 7BDB             >
 330+ 7BDB             >Dict_Ptr        defl    $
 330+ 7BDB             >
 330+ 7BDB             >//              ______________________________________________________________________
 330+ 7BDB             >//              Heap part
 330+ 7BDB             >
 330+ 7BDB             >
 330+ 7BDB             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB77             >
 330+ EB77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB77             >Latest_Definition defl  Heap_Ptr
 330+ EB77             >
 330+ EB77             >                // dummy db directives used to calculate length of namec
 330+ EB77 4E 45 45 44 >                db      "NEEDS/"
 330+ EB7B 53 2F       >
 330+ EB7D             >len_NFA         defl    $ - temp_NFA
 330+ EB7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB77             >
 330+ EB77 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB78 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 330+ EB7C 53 2F       >
 330+ EB7E             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB7D AF          >                db      {b $} | END_BIT     // msb as name end
 330+ EB7E             >
 330+ EB7E 69 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB80             >Prev_Ptr        defl    Heap_Ptr
 330+ EB80             >
 330+ EB80             >mirror_Ptr      defl    $
 330+ EB80             >
 330+ EB80 DD 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB82             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB82             >
 330+ EB82             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB82             >
 330+ EB82             >//              ______________________________________________________________________
 330+ EB82             >//              Dictionary part
 330+ EB82             >
 330+ EB82             >                org     Dict_Ptr
 330+ 7BDB             >
 330+ 7BDB 80 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7BDD             >
 330+ 7BDD             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7BDD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 330+ 7BE0             >
 330+ 7BE0             >
 330+ 7BE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7BE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7BE0             >
 330+ 7BE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7BE0 2B 6F 15 69                  dw      COUNT, TUCK             // n a n
 332+ 7BE4 9A 7B 1E 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 332+ 7BE8 8D 67
 333+ 7BEA 9A 7B 9F 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 334+ 7BEE 72 7B B8 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 334+ 7BF2 1E 69
 335+ 7BF4 A3 63 23 00                  dw      LIT, 35
 336+ 7BF8 8D 67                        dw      CMOVE
 337+ 7BFA 9A 7B                        dw      NEEDS_FN
 338+ 7BFC C2 70 95 6A                  dw      PAD, ONE, F_OPEN
 338+ 7C00 5A 67
 339+ 7C02 71 68                        dw      ZEQUAL
 340+ 7C04 F5 63                        dw      ZBRANCH
 341+ 7C06 08 00                        dw      Needs_1 - $
 342+ 7C08 87 7A                        dw          F_INCLUDE
 343+ 7C0A E8 63                        dw      BRANCH
 344+ 7C0C 04 00                        dw      Needs_2 - $
 345+ 7C0E              Needs_1:
 346+ 7C0E              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 347+ 7C0E              //              dw          LIT, 43, MESSAGE
 348+ 7C0E 0A 69                        dw          DROP
 349+ 7C10              Needs_2:
 350+ 7C10 4C 68                        dw      EXIT                    // ;
 351+ 7C12
 352+ 7C12
 353+ 7C12                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 353+ 7C12             >
 353+ 7C12             >Dict_Ptr        defl    $
 353+ 7C12             >
 353+ 7C12             >//              ______________________________________________________________________
 353+ 7C12             >//              Heap part
 353+ 7C12             >
 353+ 7C12             >
 353+ 7C12             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ EB82             >
 353+ EB82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ EB82             >Latest_Definition defl  Heap_Ptr
 353+ EB82             >
 353+ EB82             >                // dummy db directives used to calculate length of namec
 353+ EB82 4E 44 4F 4D >                db      "NDOM"
 353+ EB86             >len_NFA         defl    $ - temp_NFA
 353+ EB86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ EB82             >
 353+ EB82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ EB83 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 353+ EB87             >                org     $-1                 // alter last byte of Name just above to set
 353+ EB86 CD          >                db      {b $} | END_BIT     // msb as name end
 353+ EB87             >
 353+ EB87 77 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ EB89             >Prev_Ptr        defl    Heap_Ptr
 353+ EB89             >
 353+ EB89             >mirror_Ptr      defl    $
 353+ EB89             >
 353+ EB89 14 7C       >                dw      Dict_Ptr + 2        // xt
 353+ EB8B             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ EB8B             >
 353+ EB8B             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ EB8B             >
 353+ EB8B             >//              ______________________________________________________________________
 353+ EB8B             >//              Dictionary part
 353+ EB8B             >
 353+ EB8B             >                org     Dict_Ptr
 353+ 7C12             >
 353+ 7C12 89 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 7C14             >
 353+ 7C14             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 7C14 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 353+ 7C17             >
 353+ 7C17             >
 353+ 7C17             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 7C17             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 7C17             >
 353+ 7C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 7C17              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 355+ 7C17 3A 3F 2F 2A                  db ':?/*|\<>"'
 355+ 7C1B 7C 5C 3C 3E
 355+ 7C1F 22
 356+ 7C20 00                           db 0
 357+ 7C21
 358+ 7C21                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 358+ 7C21             >
 358+ 7C21             >Dict_Ptr        defl    $
 358+ 7C21             >
 358+ 7C21             >//              ______________________________________________________________________
 358+ 7C21             >//              Heap part
 358+ 7C21             >
 358+ 7C21             >
 358+ 7C21             >                org     (Heap_Ptr & $1FFF) + $E000
 358+ EB8B             >
 358+ EB8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ EB8B             >Latest_Definition defl  Heap_Ptr
 358+ EB8B             >
 358+ EB8B             >                // dummy db directives used to calculate length of namec
 358+ EB8B 4E 43 44 4D >                db      "NCDM"
 358+ EB8F             >len_NFA         defl    $ - temp_NFA
 358+ EB8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ EB8B             >
 358+ EB8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ EB8C 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 358+ EB90             >                org     $-1                 // alter last byte of Name just above to set
 358+ EB8F CD          >                db      {b $} | END_BIT     // msb as name end
 358+ EB90             >
 358+ EB90 82 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 358+ EB92             >Prev_Ptr        defl    Heap_Ptr
 358+ EB92             >
 358+ EB92             >mirror_Ptr      defl    $
 358+ EB92             >
 358+ EB92 23 7C       >                dw      Dict_Ptr + 2        // xt
 358+ EB94             >Heap_Ptr        defl    $ - $E000           // save current HP
 358+ EB94             >
 358+ EB94             >Current_HP      defl  $ - $E000             // used to set HP once!
 358+ EB94             >
 358+ EB94             >//              ______________________________________________________________________
 358+ EB94             >//              Dictionary part
 358+ EB94             >
 358+ EB94             >                org     Dict_Ptr
 358+ 7C21             >
 358+ 7C21 92 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 358+ 7C23             >
 358+ 7C23             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 7C23 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 358+ 7C26             >
 358+ 7C26             >
 358+ 7C26             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 7C26             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 7C26             >
 358+ 7C26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 7C26              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 360+ 7C26 5F 5E 25 26                  db '_^%&$_{}~'
 360+ 7C2A 24 5F 7B 7D
 360+ 7C2E 7E
 361+ 7C2F 00                           db 0
 362+ 7C30
 363+ 7C30              // Replace illegal character in filename using the map here above
 364+ 7C30              // at the moment we need only  "
 365+ 7C30                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 365+ 7C30             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 365+ 7C30             >
 365+ 7C30             >Dict_Ptr        defl    $
 365+ 7C30             >
 365+ 7C30             >//              ______________________________________________________________________
 365+ 7C30             >//              Heap part
 365+ 7C30             >
 365+ 7C30             >
 365+ 7C30             >                org     (Heap_Ptr & $1FFF) + $E000
 365+ EB94             >
 365+ EB94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ EB94             >Latest_Definition defl  Heap_Ptr
 365+ EB94             >
 365+ EB94             >                // dummy db directives used to calculate length of namec
 365+ EB94 4D 41 50 2D >                db      "MAP-FN"
 365+ EB98 46 4E       >
 365+ EB9A             >len_NFA         defl    $ - temp_NFA
 365+ EB9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ EB94             >
 365+ EB94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ EB95 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 365+ EB99 46 4E       >
 365+ EB9B             >                org     $-1                 // alter last byte of Name just above to set
 365+ EB9A CE          >                db      {b $} | END_BIT     // msb as name end
 365+ EB9B             >
 365+ EB9B 8B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 365+ EB9D             >Prev_Ptr        defl    Heap_Ptr
 365+ EB9D             >
 365+ EB9D             >mirror_Ptr      defl    $
 365+ EB9D             >
 365+ EB9D 32 7C       >                dw      Dict_Ptr + 2        // xt
 365+ EB9F             >Heap_Ptr        defl    $ - $E000           // save current HP
 365+ EB9F             >
 365+ EB9F             >Current_HP      defl  $ - $E000             // used to set HP once!
 365+ EB9F             >
 365+ EB9F             >//              ______________________________________________________________________
 365+ EB9F             >//              Dictionary part
 365+ EB9F             >
 365+ EB9F             >                org     Dict_Ptr
 365+ 7C30             >
 365+ 7C30 9D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 365+ 7C32             >
 365+ 7C32             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 7C32 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 7C35             >
 365+ 7C35             >
 365+ 7C35             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 7C35             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 7C35             >
 365+ 7C35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 7C35 2B 6F 38 6F                  dw      COUNT, BOUNDS
 367+ 7C39 34 64                        dw      C_DO
 368+ 7C3B              Needs_3:
 369+ 7C3B 23 7C 14 7C                  dw          NCDM, NDOM, LIT, 10
 369+ 7C3F A3 63 0A 00
 370+ 7C43 3A 64 AB 69                  dw          I, CFETCH
 371+ 7C47 5B 65                        dw          C_MAP
 372+ 7C49 3A 64 B4 69                  dw          I, CSTORE
 373+ 7C4D              Needs_4:
 374+ 7C4D E0 63                        dw      C_LOOP
 375+ 7C4F EC FF                        dw      Needs_3 - $
 376+ 7C51 4C 68                        dw      EXIT
 377+ 7C53
 378+ 7C53
 379+ 7C53              // include  "path/cccc.f" if cccc is not defined
 380+ 7C53              // filename cccc.f is temporary stored at NEEDS-W
 381+ 7C53                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 381+ 7C53             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 381+ 7C53             >
 381+ 7C53             >Dict_Ptr        defl    $
 381+ 7C53             >
 381+ 7C53             >//              ______________________________________________________________________
 381+ 7C53             >//              Heap part
 381+ 7C53             >
 381+ 7C53             >
 381+ 7C53             >                org     (Heap_Ptr & $1FFF) + $E000
 381+ EB9F             >
 381+ EB9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 381+ EB9F             >Latest_Definition defl  Heap_Ptr
 381+ EB9F             >
 381+ EB9F             >                // dummy db directives used to calculate length of namec
 381+ EB9F 4E 45 45 44 >                db      "NEEDS-F"
 381+ EBA3 53 2D 46    >
 381+ EBA6             >len_NFA         defl    $ - temp_NFA
 381+ EBA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 381+ EB9F             >
 381+ EB9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 381+ EBA0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 381+ EBA4 53 2D 46    >
 381+ EBA7             >                org     $-1                 // alter last byte of Name just above to set
 381+ EBA6 C6          >                db      {b $} | END_BIT     // msb as name end
 381+ EBA7             >
 381+ EBA7 94 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 381+ EBA9             >Prev_Ptr        defl    Heap_Ptr
 381+ EBA9             >
 381+ EBA9             >mirror_Ptr      defl    $
 381+ EBA9             >
 381+ EBA9 55 7C       >                dw      Dict_Ptr + 2        // xt
 381+ EBAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 381+ EBAB             >
 381+ EBAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 381+ EBAB             >
 381+ EBAB             >//              ______________________________________________________________________
 381+ EBAB             >//              Dictionary part
 381+ EBAB             >
 381+ EBAB             >                org     Dict_Ptr
 381+ 7C53             >
 381+ 7C53 A9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 381+ 7C55             >
 381+ 7C55             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 381+ 7C55 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 381+ 7C58             >
 381+ 7C58             >
 381+ 7C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 381+ 7C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 381+ 7C58             >
 381+ 7C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 382+ 7C58 11 73                        dw      LFIND
 383+ 7C5A F5 63                        dw      ZBRANCH
 384+ 7C5C 0A 00                        dw      Needs_5 - $
 385+ 7C5E
 386+ 7C5E 0A 69 61 69                  dw          DROP, TWO_DROP
 387+ 7C62 E8 63                        dw      BRANCH
 388+ 7C64 2C 00                        dw      Needs_6 - $
 389+ 7C66              Needs_5:
 390+ 7C66 72 7B                        dw          NEEDS_W
 391+ 7C68 A3 63 23 00                  dw          LIT, 35
 392+ 7C6C 99 70                        dw          ERASE                   // a
 393+ 7C6E B3 6B AB 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 393+ 7C72 B8 68
 394+ 7C74 B3 6B 01 69                  dw          HERE, OVER              // a n here n
 395+ 7C78 72 7B 1E 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 395+ 7C7C 8D 67
 396+ 7C7E 72 7B 32 7C                  dw          NEEDS_W, NEEDS_CHECK
 397+ 7C82 72 7B 9F 68                  dw          NEEDS_W, PLUS           // a a1+1
 398+ 7C86 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 399+ 7C8A 1E 69 A0 69                  dw          SWAP, STORE             // a
 400+ 7C8E DD 7B                        dw          NEEDS_SLASH
 401+ 7C90              Needs_6:
 402+ 7C90 4C 68                        dw      EXIT
 403+ 7C92
 404+ 7C92
 405+ 7C92              // check for cccc exists in vocabulary
 406+ 7C92              // if it doesn't then  INCLUDE  inc/cccc.F
 407+ 7C92              // search in inc subdirectory
 408+ 7C92                              Colon_Def NEEDS, "NEEDS", is_normal
 408+ 7C92             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 408+ 7C92             >
 408+ 7C92             >Dict_Ptr        defl    $
 408+ 7C92             >
 408+ 7C92             >//              ______________________________________________________________________
 408+ 7C92             >//              Heap part
 408+ 7C92             >
 408+ 7C92             >
 408+ 7C92             >                org     (Heap_Ptr & $1FFF) + $E000
 408+ EBAB             >
 408+ EBAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ EBAB             >Latest_Definition defl  Heap_Ptr
 408+ EBAB             >
 408+ EBAB             >                // dummy db directives used to calculate length of namec
 408+ EBAB 4E 45 45 44 >                db      "NEEDS"
 408+ EBAF 53          >
 408+ EBB0             >len_NFA         defl    $ - temp_NFA
 408+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ EBAB             >
 408+ EBAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ EBAC 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 408+ EBB0 53          >
 408+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 408+ EBB0 D3          >                db      {b $} | END_BIT     // msb as name end
 408+ EBB1             >
 408+ EBB1 9F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 408+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 408+ EBB3             >
 408+ EBB3             >mirror_Ptr      defl    $
 408+ EBB3             >
 408+ EBB3 94 7C       >                dw      Dict_Ptr + 2        // xt
 408+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 408+ EBB5             >
 408+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 408+ EBB5             >
 408+ EBB5             >//              ______________________________________________________________________
 408+ EBB5             >//              Dictionary part
 408+ EBB5             >
 408+ EBB5             >                org     Dict_Ptr
 408+ 7C92             >
 408+ 7C92 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 408+ 7C94             >
 408+ 7C94             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 7C94 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 7C97             >
 408+ 7C97             >
 408+ 7C97             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 7C97             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 7C97             >
 408+ 7C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 7C97 35 6B 96 69                  dw      TO_IN, FETCH
 410+ 7C9B 25 69                        dw      DUP
 411+ 7C9D C7 7B 55 7C                  dw      NEEDS_INC, NEEDS_PATH
 412+ 7CA1 35 6B A0 69                  dw      TO_IN, STORE
 413+ 7CA5 D2 7B 55 7C                  dw      NEEDS_LIB, NEEDS_PATH
 414+ 7CA9 35 6B A0 69                  dw      TO_IN, STORE
 415+ 7CAD 11 73                        dw      LFIND
 416+ 7CAF F5 63                        dw      ZBRANCH
 417+ 7CB1 08 00                        dw      Needs_10 - $
 418+ 7CB3 61 69                        dw          TWO_DROP
 419+ 7CB5 E8 63                        dw      BRANCH
 420+ 7CB7 10 00                        dw      Needs_11 - $
 421+ 7CB9              Needs_10:
 422+ 7CB9 72 7B 2B 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 422+ 7CBD 7F 6F 84 6C
 423+ 7CC1 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 423+ 7CC5 8C 77
 424+ 7CC7              Needs_11:
 425+ 7CC7 4C 68                        dw      EXIT
 426+ 7CC9
 427+ 7CC9
 428+ 7CC9              //  ______________________________________________________________________
 429+ 7CC9              //
 430+ 7CC9              // load         n --
 431+ 7CC9                              Colon_Def LOAD, "LOAD", is_normal
 431+ 7CC9             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 431+ 7CC9             >
 431+ 7CC9             >Dict_Ptr        defl    $
 431+ 7CC9             >
 431+ 7CC9             >//              ______________________________________________________________________
 431+ 7CC9             >//              Heap part
 431+ 7CC9             >
 431+ 7CC9             >
 431+ 7CC9             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ EBB5             >
 431+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ EBB5             >Latest_Definition defl  Heap_Ptr
 431+ EBB5             >
 431+ EBB5             >                // dummy db directives used to calculate length of namec
 431+ EBB5 4C 4F 41 44 >                db      "LOAD"
 431+ EBB9             >len_NFA         defl    $ - temp_NFA
 431+ EBB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ EBB5             >
 431+ EBB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ EBB6 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 431+ EBBA             >                org     $-1                 // alter last byte of Name just above to set
 431+ EBB9 C4          >                db      {b $} | END_BIT     // msb as name end
 431+ EBBA             >
 431+ EBBA AB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 431+ EBBC             >Prev_Ptr        defl    Heap_Ptr
 431+ EBBC             >
 431+ EBBC             >mirror_Ptr      defl    $
 431+ EBBC             >
 431+ EBBC CB 7C       >                dw      Dict_Ptr + 2        // xt
 431+ EBBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ EBBE             >
 431+ EBBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ EBBE             >
 431+ EBBE             >//              ______________________________________________________________________
 431+ EBBE             >//              Dictionary part
 431+ EBBE             >
 431+ EBBE             >                org     Dict_Ptr
 431+ 7CC9             >
 431+ 7CC9 BC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 431+ 7CCB             >
 431+ 7CCB             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 7CCB CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 7CCE             >
 431+ 7CCE             >
 431+ 7CCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 7CCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 7CCE             >
 431+ 7CCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 7CCE 2F 6B 96 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 432+ 7CD2 56 68
 433+ 7CD4 35 6B 96 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 433+ 7CD8 56 68
 434+ 7CDA
 435+ 7CDA 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 435+ 7CDE A0 69
 436+ 7CE0 C6 6A 18 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 436+ 7CE4 2F 6B A0 69
 437+ 7CE8 D4 74                        dw      INTERPRET               // interpret
 438+ 7CEA
 439+ 7CEA 61 68 35 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 439+ 7CEE A0 69
 440+ 7CF0 61 68 2F 6B                  dw      R_TO, BLK, STORE        // r> blk !
 440+ 7CF4 A0 69
 441+ 7CF6 4C 68                        dw      EXIT                    // ;
 442+ 7CF8
 443+ 7CF8              //  ______________________________________________________________________
 444+ 7CF8              //
 445+ 7CF8              // -->          --
 446+ 7CF8                              Colon_Def LOAD_NEXT, "-->", is_immediate
 446+ 7CF8             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 446+ 7CF8             >
 446+ 7CF8             >Dict_Ptr        defl    $
 446+ 7CF8             >
 446+ 7CF8             >//              ______________________________________________________________________
 446+ 7CF8             >//              Heap part
 446+ 7CF8             >
 446+ 7CF8             >
 446+ 7CF8             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ EBBE             >
 446+ EBBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ EBBE             >Latest_Definition defl  Heap_Ptr
 446+ EBBE             >
 446+ EBBE             >                // dummy db directives used to calculate length of namec
 446+ EBBE 2D 2D 3E    >                db      "-->"
 446+ EBC1             >len_NFA         defl    $ - temp_NFA
 446+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ EBBE             >
 446+ EBBE C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ EBBF 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 446+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 446+ EBC1 BE          >                db      {b $} | END_BIT     // msb as name end
 446+ EBC2             >
 446+ EBC2 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 446+ EBC4             >
 446+ EBC4             >mirror_Ptr      defl    $
 446+ EBC4             >
 446+ EBC4 FA 7C       >                dw      Dict_Ptr + 2        // xt
 446+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ EBC6             >
 446+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ EBC6             >
 446+ EBC6             >//              ______________________________________________________________________
 446+ EBC6             >//              Dictionary part
 446+ EBC6             >
 446+ EBC6             >                org     Dict_Ptr
 446+ 7CF8             >
 446+ 7CF8 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 7CFA             >
 446+ 7CFA             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 7CFA CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 7CFD             >
 446+ 7CFD             >
 446+ 7CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 7CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 7CFD             >
 446+ 7CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 7CFD 4C 6E                        dw      QLOADING                // ?loading
 448+ 7CFF 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 448+ 7D03 A0 69
 449+ 7D05 C6 6A                        dw      BSCR                    // b/scr
 450+ 7D07 2F 6B 96 69                  dw      BLK, FETCH              // blk @
 451+ 7D0B 01 69                        dw      OVER                    // over
 452+ 7D0D 3D 77                        dw      MOD                     // mod
 453+ 7D0F F2 6B                        dw      SUBTRACT                // -
 454+ 7D11 2F 6B 7E 69                  dw      BLK, PLUSSTORE          // +!
 455+ 7D15 4C 68                        dw      EXIT                    // ;
 456+ 7D17
 457+ 7D17              //  ______________________________________________________________________
 458+ 7D17              //
 459+ 7D17              // '            -- xt
 460+ 7D17                              Colon_Def TICK, "'", is_normal
 460+ 7D17             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 460+ 7D17             >
 460+ 7D17             >Dict_Ptr        defl    $
 460+ 7D17             >
 460+ 7D17             >//              ______________________________________________________________________
 460+ 7D17             >//              Heap part
 460+ 7D17             >
 460+ 7D17             >
 460+ 7D17             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EBC6             >
 460+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EBC6             >Latest_Definition defl  Heap_Ptr
 460+ EBC6             >
 460+ EBC6             >                // dummy db directives used to calculate length of namec
 460+ EBC6 27          >                db      "'"
 460+ EBC7             >len_NFA         defl    $ - temp_NFA
 460+ EBC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EBC6             >
 460+ EBC6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EBC7 27          >                db      "'"               // name string in 7-bit ascii, but
 460+ EBC8             >                org     $-1                 // alter last byte of Name just above to set
 460+ EBC7 A7          >                db      {b $} | END_BIT     // msb as name end
 460+ EBC8             >
 460+ EBC8 BE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EBCA             >Prev_Ptr        defl    Heap_Ptr
 460+ EBCA             >
 460+ EBCA             >mirror_Ptr      defl    $
 460+ EBCA             >
 460+ EBCA 19 7D       >                dw      Dict_Ptr + 2        // xt
 460+ EBCC             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EBCC             >
 460+ EBCC             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EBCC             >
 460+ EBCC             >//              ______________________________________________________________________
 460+ EBCC             >//              Dictionary part
 460+ EBCC             >
 460+ EBCC             >                org     Dict_Ptr
 460+ 7D17             >
 460+ 7D17 CA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 7D19             >
 460+ 7D19             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7D19 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7D1C             >
 460+ 7D1C             >
 460+ 7D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7D1C             >
 460+ 7D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7D1C 11 73                        dw      LFIND                   // -find
 462+ 7D1E 71 68                        dw      ZEQUAL                  // 0=
 463+ 7D20 8E 6A EF 6D                  dw      ZERO, QERROR            // 0 ?error
 464+ 7D24 0A 69                        dw      DROP                    // drop
 465+ 7D26 4C 68                        dw      EXIT                    // ;
 466+ 7D28
 467+ 7D28              //  ______________________________________________________________________
 468+ 7D28              //
 469+ 7D28              // forget       -- cccc
 470+ 7D28                              Colon_Def FORGET, "FORGET", is_normal
 470+ 7D28             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 470+ 7D28             >
 470+ 7D28             >Dict_Ptr        defl    $
 470+ 7D28             >
 470+ 7D28             >//              ______________________________________________________________________
 470+ 7D28             >//              Heap part
 470+ 7D28             >
 470+ 7D28             >
 470+ 7D28             >                org     (Heap_Ptr & $1FFF) + $E000
 470+ EBCC             >
 470+ EBCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 470+ EBCC             >Latest_Definition defl  Heap_Ptr
 470+ EBCC             >
 470+ EBCC             >                // dummy db directives used to calculate length of namec
 470+ EBCC 46 4F 52 47 >                db      "FORGET"
 470+ EBD0 45 54       >
 470+ EBD2             >len_NFA         defl    $ - temp_NFA
 470+ EBD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 470+ EBCC             >
 470+ EBCC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 470+ EBCD 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 470+ EBD1 45 54       >
 470+ EBD3             >                org     $-1                 // alter last byte of Name just above to set
 470+ EBD2 D4          >                db      {b $} | END_BIT     // msb as name end
 470+ EBD3             >
 470+ EBD3 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 470+ EBD5             >Prev_Ptr        defl    Heap_Ptr
 470+ EBD5             >
 470+ EBD5             >mirror_Ptr      defl    $
 470+ EBD5             >
 470+ EBD5 2A 7D       >                dw      Dict_Ptr + 2        // xt
 470+ EBD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 470+ EBD7             >
 470+ EBD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 470+ EBD7             >
 470+ EBD7             >//              ______________________________________________________________________
 470+ EBD7             >//              Dictionary part
 470+ EBD7             >
 470+ EBD7             >                org     Dict_Ptr
 470+ 7D28             >
 470+ 7D28 D5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 470+ 7D2A             >
 470+ 7D2A             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 470+ 7D2A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 470+ 7D2D             >
 470+ 7D2D             >
 470+ 7D2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 470+ 7D2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 470+ 7D2D             >
 470+ 7D2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 471+ 7D2D 53 6B 96 69                  dw      CURRENT, FETCH          // current @
 472+ 7D31 4D 6B 96 69                  dw      CONTEXT, FETCH          // context @
 473+ 7D35 F2 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 473+ 7D39 17 00 EF 6D
 474+ 7D3D 19 7D 6E 6D                  dw      TICK, TO_BODY           // ' >body
 475+ 7D41 25 69 05 6B                  dw      DUP, FENCE, FETCH       // dup fence @
 475+ 7D45 96 69
 476+ 7D47 09 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 476+ 7D4B 15 00 EF 6D
 477+ 7D4F 25 69 A3 6D                  dw      DUP, NFA                // dup nfa
 478+ 7D53
 479+ 7D53                          //  dw      DUP
 480+ 7D53                          //  dw      LIT, $E000, LESS
 481+ 7D53                          //  dw      MMU7_FETCH, ONE, EQUALS
 482+ 7D53                          //  dw      OR_OP, NOT_OP
 483+ 7D53                          //  dw      ZBRANCH
 484+ 7D53                          //  dw      Forget_then - $
 485+ 7D53
 486+ 7D53 AC 6C CF 6C                  dw      MMU7_FETCH, FROM_FAR
 487+ 7D57 23 6B A0 69                  dw      HP, STORE
 488+ 7D5B 25 69 98 6D                  dw      DUP, CFA, CELL_MINUS
 488+ 7D5F D3 68
 489+ 7D61              // Forget_then:
 490+ 7D61 0B 6B A0 69                  dw      DP, STORE               // dp !
 491+ 7D65 AE 6D 96 69                  dw      LFA, FETCH              // lfa @
 492+ 7D69 4D 6B 96 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 492+ 7D6D A0 69
 493+ 7D6F 4C 68                        dw      EXIT                    // ;
 494+ 7D71
 495+ 7D71              //  ______________________________________________________________________
 496+ 7D71              //
 497+ 7D71              // marker       -- cccc
 498+ 7D71                              Colon_Def MARKER, "MARKER", is_immediate
 498+ 7D71             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 498+ 7D71             >
 498+ 7D71             >Dict_Ptr        defl    $
 498+ 7D71             >
 498+ 7D71             >//              ______________________________________________________________________
 498+ 7D71             >//              Heap part
 498+ 7D71             >
 498+ 7D71             >
 498+ 7D71             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ EBD7             >
 498+ EBD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ EBD7             >Latest_Definition defl  Heap_Ptr
 498+ EBD7             >
 498+ EBD7             >                // dummy db directives used to calculate length of namec
 498+ EBD7 4D 41 52 4B >                db      "MARKER"
 498+ EBDB 45 52       >
 498+ EBDD             >len_NFA         defl    $ - temp_NFA
 498+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ EBD7             >
 498+ EBD7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ EBD8 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 498+ EBDC 45 52       >
 498+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 498+ EBDD D2          >                db      {b $} | END_BIT     // msb as name end
 498+ EBDE             >
 498+ EBDE CC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 498+ EBE0             >
 498+ EBE0             >mirror_Ptr      defl    $
 498+ EBE0             >
 498+ EBE0 73 7D       >                dw      Dict_Ptr + 2        // xt
 498+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ EBE2             >
 498+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ EBE2             >
 498+ EBE2             >//              ______________________________________________________________________
 498+ EBE2             >//              Dictionary part
 498+ EBE2             >
 498+ EBE2             >                org     Dict_Ptr
 498+ 7D71             >
 498+ 7D71 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 7D73             >
 498+ 7D73             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 7D73 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 7D76             >
 498+ 7D76             >
 498+ 7D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 7D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 7D76             >
 498+ 7D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 7D76 03 6F                        dw      CBUILDS
 500+ 7D78 11 6B 96 69                  dw      VOC_LINK, FETCH, COMMA
 500+ 7D7C C9 6B
 501+ 7D7E 53 6B 96 69                  dw      CURRENT, FETCH, COMMA
 501+ 7D82 C9 6B
 502+ 7D84 4D 6B 96 69                  dw      CONTEXT, FETCH, COMMA
 502+ 7D88 C9 6B
 503+ 7D8A 53 6B 96 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 503+ 7D8E 96 69 C9 6B
 504+ 7D92 5F 6D BD 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 504+ 7D96 AE 6D 96 69
 504+ 7D9A C9 6B
 505+ 7D9C 0E 6F                        dw      DOES_TO
 506+ 7D9E 25 69 96 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 506+ 7DA2 11 6B A0 69
 506+ 7DA6 CE 68
 507+ 7DA8 25 69 96 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 507+ 7DAC 53 6B A0 69
 507+ 7DB0 CE 68
 508+ 7DB2 25 69 96 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 508+ 7DB6 4D 6B A0 69
 508+ 7DBA CE 68
 509+ 7DBC 25 69 96 69                  dw      DUP, FETCH
 510+ 7DC0                          //  dw      DUP, QHEAPP
 511+ 7DC0                          //  dw      ZBRANCH
 512+ 7DC0                          //  dw      Marker_then - $
 513+ 7DC0 25 69 23 6B                  dw          DUP, HP, STORE
 513+ 7DC4 A0 69
 514+ 7DC6 BD 6D 98 6D                  dw          PFA, CFA, CELL_MINUS
 514+ 7DCA D3 68
 515+ 7DCC              // Marker_then:
 516+ 7DCC 0B 6B A0 69                  dw      DP, STORE, CELL_PLUS
 516+ 7DD0 CE 68
 517+ 7DD2 96 69 53 6B                  dw      FETCH, CURRENT, FETCH, STORE
 517+ 7DD6 96 69 A0 69
 518+ 7DDA 4C 68                        dw      EXIT
 519+ 7DDC
 520+ 7DDC              //  ______________________________________________________________________
 521+ 7DDC              //
 522+ 7DDC              // spaces       n --
 523+ 7DDC                              Colon_Def SPACES, "SPACES", is_normal
 523+ 7DDC             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 523+ 7DDC             >
 523+ 7DDC             >Dict_Ptr        defl    $
 523+ 7DDC             >
 523+ 7DDC             >//              ______________________________________________________________________
 523+ 7DDC             >//              Heap part
 523+ 7DDC             >
 523+ 7DDC             >
 523+ 7DDC             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ EBE2             >
 523+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ EBE2             >Latest_Definition defl  Heap_Ptr
 523+ EBE2             >
 523+ EBE2             >                // dummy db directives used to calculate length of namec
 523+ EBE2 53 50 41 43 >                db      "SPACES"
 523+ EBE6 45 53       >
 523+ EBE8             >len_NFA         defl    $ - temp_NFA
 523+ EBE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ EBE2             >
 523+ EBE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ EBE3 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 523+ EBE7 45 53       >
 523+ EBE9             >                org     $-1                 // alter last byte of Name just above to set
 523+ EBE8 D3          >                db      {b $} | END_BIT     // msb as name end
 523+ EBE9             >
 523+ EBE9 D7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ EBEB             >Prev_Ptr        defl    Heap_Ptr
 523+ EBEB             >
 523+ EBEB             >mirror_Ptr      defl    $
 523+ EBEB             >
 523+ EBEB DE 7D       >                dw      Dict_Ptr + 2        // xt
 523+ EBED             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ EBED             >
 523+ EBED             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ EBED             >
 523+ EBED             >//              ______________________________________________________________________
 523+ EBED             >//              Dictionary part
 523+ EBED             >
 523+ EBED             >                org     Dict_Ptr
 523+ 7DDC             >
 523+ 7DDC EB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 7DDE             >
 523+ 7DDE             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 7DDE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 7DE1             >
 523+ 7DE1             >
 523+ 7DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 7DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 7DE1             >
 523+ 7DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 7DE1 8E 6A 4A 6C                  dw      ZERO, MAX
 525+ 7DE5 8E 6A 0C 64                  dw      ZERO, C_Q_DO
 526+ 7DE9 08 00                        dw      Spaces_Leave - $
 527+ 7DEB              Spaces_Loop:
 528+ 7DEB 84 6C                        dw          SPACE
 529+ 7DED E0 63                        dw      C_LOOP
 530+ 7DEF FC FF                        dw      Spaces_Loop - $
 531+ 7DF1              Spaces_Leave:
 532+ 7DF1 4C 68                        dw      EXIT                    // ;
 533+ 7DF3
 534+ 7DF3              //  ______________________________________________________________________
 535+ 7DF3              //
 536+ 7DF3              // <#           --
 537+ 7DF3                              Colon_Def BEGIN_DASH, "<#", is_normal
 537+ 7DF3             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 537+ 7DF3             >
 537+ 7DF3             >Dict_Ptr        defl    $
 537+ 7DF3             >
 537+ 7DF3             >//              ______________________________________________________________________
 537+ 7DF3             >//              Heap part
 537+ 7DF3             >
 537+ 7DF3             >
 537+ 7DF3             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBED             >
 537+ EBED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBED             >Latest_Definition defl  Heap_Ptr
 537+ EBED             >
 537+ EBED             >                // dummy db directives used to calculate length of namec
 537+ EBED 3C 23       >                db      "<#"
 537+ EBEF             >len_NFA         defl    $ - temp_NFA
 537+ EBEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBED             >
 537+ EBED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBEE 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 537+ EBF0             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBEF A3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBF0             >
 537+ EBF0 E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBF2             >Prev_Ptr        defl    Heap_Ptr
 537+ EBF2             >
 537+ EBF2             >mirror_Ptr      defl    $
 537+ EBF2             >
 537+ EBF2 F5 7D       >                dw      Dict_Ptr + 2        // xt
 537+ EBF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBF4             >
 537+ EBF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBF4             >
 537+ EBF4             >//              ______________________________________________________________________
 537+ EBF4             >//              Dictionary part
 537+ EBF4             >
 537+ EBF4             >                org     Dict_Ptr
 537+ 7DF3             >
 537+ 7DF3 F2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 7DF5             >
 537+ 7DF5             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 7DF5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 7DF8             >
 537+ 7DF8             >
 537+ 7DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 7DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 7DF8             >
 537+ 7DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 7DF8 C2 70 7D 6B                  dw      PAD, HLD, STORE
 538+ 7DFC A0 69
 539+ 7DFE 4C 68                        dw      EXIT
 540+ 7E00
 541+ 7E00              //  ______________________________________________________________________
 542+ 7E00              //
 543+ 7E00              // #>           --
 544+ 7E00                              Colon_Def DASH_END, "#>", is_normal
 544+ 7E00             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 544+ 7E00             >
 544+ 7E00             >Dict_Ptr        defl    $
 544+ 7E00             >
 544+ 7E00             >//              ______________________________________________________________________
 544+ 7E00             >//              Heap part
 544+ 7E00             >
 544+ 7E00             >
 544+ 7E00             >                org     (Heap_Ptr & $1FFF) + $E000
 544+ EBF4             >
 544+ EBF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ EBF4             >Latest_Definition defl  Heap_Ptr
 544+ EBF4             >
 544+ EBF4             >                // dummy db directives used to calculate length of namec
 544+ EBF4 23 3E       >                db      "#>"
 544+ EBF6             >len_NFA         defl    $ - temp_NFA
 544+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ EBF4             >
 544+ EBF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ EBF5 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 544+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 544+ EBF6 BE          >                db      {b $} | END_BIT     // msb as name end
 544+ EBF7             >
 544+ EBF7 ED 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 544+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 544+ EBF9             >
 544+ EBF9             >mirror_Ptr      defl    $
 544+ EBF9             >
 544+ EBF9 02 7E       >                dw      Dict_Ptr + 2        // xt
 544+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 544+ EBFB             >
 544+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 544+ EBFB             >
 544+ EBFB             >//              ______________________________________________________________________
 544+ EBFB             >//              Dictionary part
 544+ EBFB             >
 544+ EBFB             >                org     Dict_Ptr
 544+ 7E00             >
 544+ 7E00 F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 544+ 7E02             >
 544+ 7E02             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 7E02 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 544+ 7E05             >
 544+ 7E05             >
 544+ 7E05             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 7E05             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 7E05             >
 544+ 7E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 7E05 61 69                        dw      TWO_DROP
 546+ 7E07 7D 6B 96 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 546+ 7E0B C2 70 01 69
 546+ 7E0F F2 6B
 547+ 7E11 4C 68                        dw      EXIT
 548+ 7E13
 549+ 7E13              //  ______________________________________________________________________
 550+ 7E13              //
 551+ 7E13              // sign         n d -- d
 552+ 7E13                              Colon_Def SIGN, "SIGN", is_normal
 552+ 7E13             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 552+ 7E13             >
 552+ 7E13             >Dict_Ptr        defl    $
 552+ 7E13             >
 552+ 7E13             >//              ______________________________________________________________________
 552+ 7E13             >//              Heap part
 552+ 7E13             >
 552+ 7E13             >
 552+ 7E13             >                org     (Heap_Ptr & $1FFF) + $E000
 552+ EBFB             >
 552+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 552+ EBFB             >Latest_Definition defl  Heap_Ptr
 552+ EBFB             >
 552+ EBFB             >                // dummy db directives used to calculate length of namec
 552+ EBFB 53 49 47 4E >                db      "SIGN"
 552+ EBFF             >len_NFA         defl    $ - temp_NFA
 552+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 552+ EBFB             >
 552+ EBFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 552+ EBFC 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 552+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 552+ EBFF CE          >                db      {b $} | END_BIT     // msb as name end
 552+ EC00             >
 552+ EC00 F4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 552+ EC02             >Prev_Ptr        defl    Heap_Ptr
 552+ EC02             >
 552+ EC02             >mirror_Ptr      defl    $
 552+ EC02             >
 552+ EC02 15 7E       >                dw      Dict_Ptr + 2        // xt
 552+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 552+ EC04             >
 552+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 552+ EC04             >
 552+ EC04             >//              ______________________________________________________________________
 552+ EC04             >//              Dictionary part
 552+ EC04             >
 552+ EC04             >                org     Dict_Ptr
 552+ 7E13             >
 552+ 7E13 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 552+ 7E15             >
 552+ 7E15             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 552+ 7E15 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 552+ 7E18             >
 552+ 7E18             >
 552+ 7E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 552+ 7E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 552+ 7E18             >
 552+ 7E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 7E18 84 68                        dw      ZLESS
 554+ 7E1A F5 63                        dw      ZBRANCH
 555+ 7E1C 08 00                        dw      Sign_Endif - $
 556+ 7E1E A3 63 2D 00                  dw          LIT, 45, HOLD
 556+ 7E22 AF 70
 557+ 7E24              Sign_Endif:
 558+ 7E24 4C 68                        dw      EXIT
 559+ 7E26
 560+ 7E26              //  ______________________________________________________________________
 561+ 7E26              //
 562+ 7E26              // #           d1 -- d2
 563+ 7E26                              Colon_Def DASH, "#", is_normal
 563+ 7E26             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 563+ 7E26             >
 563+ 7E26             >Dict_Ptr        defl    $
 563+ 7E26             >
 563+ 7E26             >//              ______________________________________________________________________
 563+ 7E26             >//              Heap part
 563+ 7E26             >
 563+ 7E26             >
 563+ 7E26             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EC04             >
 563+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EC04             >Latest_Definition defl  Heap_Ptr
 563+ EC04             >
 563+ EC04             >                // dummy db directives used to calculate length of namec
 563+ EC04 23          >                db      "#"
 563+ EC05             >len_NFA         defl    $ - temp_NFA
 563+ EC05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EC04             >
 563+ EC04 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EC05 23          >                db      "#"               // name string in 7-bit ascii, but
 563+ EC06             >                org     $-1                 // alter last byte of Name just above to set
 563+ EC05 A3          >                db      {b $} | END_BIT     // msb as name end
 563+ EC06             >
 563+ EC06 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EC08             >Prev_Ptr        defl    Heap_Ptr
 563+ EC08             >
 563+ EC08             >mirror_Ptr      defl    $
 563+ EC08             >
 563+ EC08 28 7E       >                dw      Dict_Ptr + 2        // xt
 563+ EC0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EC0A             >
 563+ EC0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EC0A             >
 563+ EC0A             >//              ______________________________________________________________________
 563+ EC0A             >//              Dictionary part
 563+ EC0A             >
 563+ EC0A             >                org     Dict_Ptr
 563+ 7E26             >
 563+ 7E26 08 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 7E28             >
 563+ 7E28             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7E28 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7E2B             >
 563+ 7E2B             >
 563+ 7E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7E2B             >
 563+ 7E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7E2B 5F 6B 96 69                  dw      BASE, FETCH
 565+ 7E2F
 566+ 7E2F 56 68                        dw      TO_R                    // >r           ( ud1 )
 567+ 7E31 8E 6A 6C 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 567+ 7E35 D9 67
 568+ 7E37 61 68 1E 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 568+ 7E3B 56 68
 569+ 7E3D D9 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 570+ 7E3F 61 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 571+ 7E41
 572+ 7E41 2C 69                        dw      ROT
 573+ 7E43 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 573+ 7E47 01 69 17 6C
 574+ 7E4B F5 63                        dw      ZBRANCH
 575+ 7E4D 08 00                        dw      Dash_Endif - $
 576+ 7E4F A3 63 07 00                  dw          LIT, 7, PLUS
 576+ 7E53 9F 68
 577+ 7E55              Dash_Endif:
 578+ 7E55
 579+ 7E55 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 579+ 7E59 9F 68 AF 70
 580+ 7E5D 4C 68                        dw      EXIT
 581+ 7E5F
 582+ 7E5F              //  ______________________________________________________________________
 583+ 7E5F              //
 584+ 7E5F              // #s           d1 -- d2
 585+ 7E5F                              Colon_Def DASHES, "#S", is_normal
 585+ 7E5F             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 585+ 7E5F             >
 585+ 7E5F             >Dict_Ptr        defl    $
 585+ 7E5F             >
 585+ 7E5F             >//              ______________________________________________________________________
 585+ 7E5F             >//              Heap part
 585+ 7E5F             >
 585+ 7E5F             >
 585+ 7E5F             >                org     (Heap_Ptr & $1FFF) + $E000
 585+ EC0A             >
 585+ EC0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ EC0A             >Latest_Definition defl  Heap_Ptr
 585+ EC0A             >
 585+ EC0A             >                // dummy db directives used to calculate length of namec
 585+ EC0A 23 53       >                db      "#S"
 585+ EC0C             >len_NFA         defl    $ - temp_NFA
 585+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ EC0A             >
 585+ EC0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ EC0B 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 585+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 585+ EC0C D3          >                db      {b $} | END_BIT     // msb as name end
 585+ EC0D             >
 585+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 585+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 585+ EC0F             >
 585+ EC0F             >mirror_Ptr      defl    $
 585+ EC0F             >
 585+ EC0F 61 7E       >                dw      Dict_Ptr + 2        // xt
 585+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 585+ EC11             >
 585+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 585+ EC11             >
 585+ EC11             >//              ______________________________________________________________________
 585+ EC11             >//              Dictionary part
 585+ EC11             >
 585+ EC11             >                org     Dict_Ptr
 585+ 7E5F             >
 585+ 7E5F 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 585+ 7E61             >
 585+ 7E61             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7E61 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7E64             >
 585+ 7E64             >
 585+ 7E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7E64             >
 585+ 7E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7E64              Dashes_Begin:
 587+ 7E64 28 7E 74 69                  dw      DASH, TWO_DUP
 588+ 7E68 1B 68 71 68                  dw          OR_OP, ZEQUAL
 589+ 7E6C F5 63                        dw      ZBRANCH
 590+ 7E6E F6 FF                        dw      Dashes_Begin - $
 591+ 7E70 4C 68                        dw      EXIT
 592+ 7E72
 593+ 7E72              //  ______________________________________________________________________
 594+ 7E72              //
 595+ 7E72              // d.r          d n --
 596+ 7E72                              Colon_Def D_DOT_R, "D.R", is_normal
 596+ 7E72             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 596+ 7E72             >
 596+ 7E72             >Dict_Ptr        defl    $
 596+ 7E72             >
 596+ 7E72             >//              ______________________________________________________________________
 596+ 7E72             >//              Heap part
 596+ 7E72             >
 596+ 7E72             >
 596+ 7E72             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EC11             >
 596+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EC11             >Latest_Definition defl  Heap_Ptr
 596+ EC11             >
 596+ EC11             >                // dummy db directives used to calculate length of namec
 596+ EC11 44 2E 52    >                db      "D.R"
 596+ EC14             >len_NFA         defl    $ - temp_NFA
 596+ EC14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EC11             >
 596+ EC11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EC12 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 596+ EC15             >                org     $-1                 // alter last byte of Name just above to set
 596+ EC14 D2          >                db      {b $} | END_BIT     // msb as name end
 596+ EC15             >
 596+ EC15 0A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EC17             >Prev_Ptr        defl    Heap_Ptr
 596+ EC17             >
 596+ EC17             >mirror_Ptr      defl    $
 596+ EC17             >
 596+ EC17 74 7E       >                dw      Dict_Ptr + 2        // xt
 596+ EC19             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EC19             >
 596+ EC19             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EC19             >
 596+ EC19             >//              ______________________________________________________________________
 596+ EC19             >//              Dictionary part
 596+ EC19             >
 596+ EC19             >                org     Dict_Ptr
 596+ 7E72             >
 596+ 7E72 17 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 7E74             >
 596+ 7E74             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7E74 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7E77             >
 596+ 7E77             >
 596+ 7E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7E77             >
 596+ 7E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7E77 56 68                        dw      TO_R
 598+ 7E79 15 69 84 76                  dw      TUCK, DABS
 599+ 7E7D F5 7D 61 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 599+ 7E81 2C 69 15 7E
 599+ 7E85 02 7E
 600+ 7E87 61 68                        dw      R_TO
 601+ 7E89 01 69 F2 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 601+ 7E8D DE 7D 7F 6F
 602+ 7E91 4C 68                        dw      EXIT
 603+ 7E93
 604+ 7E93              //  ______________________________________________________________________
 605+ 7E93              //
 606+ 7E93              // .r           n1 n2 --
 607+ 7E93                              Colon_Def DOT_R, ".R", is_normal
 607+ 7E93             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 607+ 7E93             >
 607+ 7E93             >Dict_Ptr        defl    $
 607+ 7E93             >
 607+ 7E93             >//              ______________________________________________________________________
 607+ 7E93             >//              Heap part
 607+ 7E93             >
 607+ 7E93             >
 607+ 7E93             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EC19             >
 607+ EC19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EC19             >Latest_Definition defl  Heap_Ptr
 607+ EC19             >
 607+ EC19             >                // dummy db directives used to calculate length of namec
 607+ EC19 2E 52       >                db      ".R"
 607+ EC1B             >len_NFA         defl    $ - temp_NFA
 607+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EC19             >
 607+ EC19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EC1A 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 607+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 607+ EC1B D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EC1C             >
 607+ EC1C 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 607+ EC1E             >
 607+ EC1E             >mirror_Ptr      defl    $
 607+ EC1E             >
 607+ EC1E 95 7E       >                dw      Dict_Ptr + 2        // xt
 607+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EC20             >
 607+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EC20             >
 607+ EC20             >//              ______________________________________________________________________
 607+ EC20             >//              Dictionary part
 607+ EC20             >
 607+ EC20             >                org     Dict_Ptr
 607+ 7E93             >
 607+ 7E93 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 7E95             >
 607+ 7E95             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7E95 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7E98             >
 607+ 7E98             >
 607+ 7E98             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7E98             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7E98             >
 607+ 7E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7E98 56 68                        dw      TO_R
 609+ 7E9A E7 6B 61 68                  dw      S_TO_D, R_TO
 610+ 7E9E 74 7E                        dw      D_DOT_R
 611+ 7EA0 4C 68                        dw      EXIT
 612+ 7EA2
 613+ 7EA2              //  ______________________________________________________________________
 614+ 7EA2              //
 615+ 7EA2              // d.           d --
 616+ 7EA2                              Colon_Def D_DOT, "D.", is_normal
 616+ 7EA2             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 616+ 7EA2             >
 616+ 7EA2             >Dict_Ptr        defl    $
 616+ 7EA2             >
 616+ 7EA2             >//              ______________________________________________________________________
 616+ 7EA2             >//              Heap part
 616+ 7EA2             >
 616+ 7EA2             >
 616+ 7EA2             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ EC20             >
 616+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ EC20             >Latest_Definition defl  Heap_Ptr
 616+ EC20             >
 616+ EC20             >                // dummy db directives used to calculate length of namec
 616+ EC20 44 2E       >                db      "D."
 616+ EC22             >len_NFA         defl    $ - temp_NFA
 616+ EC22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ EC20             >
 616+ EC20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ EC21 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 616+ EC23             >                org     $-1                 // alter last byte of Name just above to set
 616+ EC22 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ EC23             >
 616+ EC23 19 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ EC25             >Prev_Ptr        defl    Heap_Ptr
 616+ EC25             >
 616+ EC25             >mirror_Ptr      defl    $
 616+ EC25             >
 616+ EC25 A4 7E       >                dw      Dict_Ptr + 2        // xt
 616+ EC27             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ EC27             >
 616+ EC27             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ EC27             >
 616+ EC27             >//              ______________________________________________________________________
 616+ EC27             >//              Dictionary part
 616+ EC27             >
 616+ EC27             >                org     Dict_Ptr
 616+ 7EA2             >
 616+ 7EA2 25 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 7EA4             >
 616+ 7EA4             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 7EA4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 7EA7             >
 616+ 7EA7             >
 616+ 7EA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 7EA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 7EA7             >
 616+ 7EA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 7EA7 8E 6A 74 7E                  dw      ZERO, D_DOT_R, SPACE
 617+ 7EAB 84 6C
 618+ 7EAD 4C 68                        dw      EXIT
 619+ 7EAF
 620+ 7EAF              //  ______________________________________________________________________
 621+ 7EAF              //
 622+ 7EAF              // .            n --
 623+ 7EAF                              Colon_Def DOT, ".", is_normal
 623+ 7EAF             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 623+ 7EAF             >
 623+ 7EAF             >Dict_Ptr        defl    $
 623+ 7EAF             >
 623+ 7EAF             >//              ______________________________________________________________________
 623+ 7EAF             >//              Heap part
 623+ 7EAF             >
 623+ 7EAF             >
 623+ 7EAF             >                org     (Heap_Ptr & $1FFF) + $E000
 623+ EC27             >
 623+ EC27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ EC27             >Latest_Definition defl  Heap_Ptr
 623+ EC27             >
 623+ EC27             >                // dummy db directives used to calculate length of namec
 623+ EC27 2E          >                db      "."
 623+ EC28             >len_NFA         defl    $ - temp_NFA
 623+ EC28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ EC27             >
 623+ EC27 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ EC28 2E          >                db      "."               // name string in 7-bit ascii, but
 623+ EC29             >                org     $-1                 // alter last byte of Name just above to set
 623+ EC28 AE          >                db      {b $} | END_BIT     // msb as name end
 623+ EC29             >
 623+ EC29 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 623+ EC2B             >Prev_Ptr        defl    Heap_Ptr
 623+ EC2B             >
 623+ EC2B             >mirror_Ptr      defl    $
 623+ EC2B             >
 623+ EC2B B1 7E       >                dw      Dict_Ptr + 2        // xt
 623+ EC2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 623+ EC2D             >
 623+ EC2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 623+ EC2D             >
 623+ EC2D             >//              ______________________________________________________________________
 623+ EC2D             >//              Dictionary part
 623+ EC2D             >
 623+ EC2D             >                org     Dict_Ptr
 623+ 7EAF             >
 623+ 7EAF 2B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 623+ 7EB1             >
 623+ 7EB1             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 7EB1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 7EB4             >
 623+ 7EB4             >
 623+ 7EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 7EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 7EB4             >
 623+ 7EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 7EB4 E7 6B A4 7E                  dw      S_TO_D, D_DOT
 625+ 7EB8 4C 68                        dw      EXIT
 626+ 7EBA
 627+ 7EBA              //  ______________________________________________________________________
 628+ 7EBA              //
 629+ 7EBA              // ?            n --
 630+ 7EBA                              Colon_Def QUESTION, "?", is_normal
 630+ 7EBA             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 630+ 7EBA             >
 630+ 7EBA             >Dict_Ptr        defl    $
 630+ 7EBA             >
 630+ 7EBA             >//              ______________________________________________________________________
 630+ 7EBA             >//              Heap part
 630+ 7EBA             >
 630+ 7EBA             >
 630+ 7EBA             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EC2D             >
 630+ EC2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EC2D             >Latest_Definition defl  Heap_Ptr
 630+ EC2D             >
 630+ EC2D             >                // dummy db directives used to calculate length of namec
 630+ EC2D 3F          >                db      "?"
 630+ EC2E             >len_NFA         defl    $ - temp_NFA
 630+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EC2D             >
 630+ EC2D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EC2E 3F          >                db      "?"               // name string in 7-bit ascii, but
 630+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 630+ EC2E BF          >                db      {b $} | END_BIT     // msb as name end
 630+ EC2F             >
 630+ EC2F 27 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EC31             >Prev_Ptr        defl    Heap_Ptr
 630+ EC31             >
 630+ EC31             >mirror_Ptr      defl    $
 630+ EC31             >
 630+ EC31 BC 7E       >                dw      Dict_Ptr + 2        // xt
 630+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EC33             >
 630+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EC33             >
 630+ EC33             >//              ______________________________________________________________________
 630+ EC33             >//              Dictionary part
 630+ EC33             >
 630+ EC33             >                org     Dict_Ptr
 630+ 7EBA             >
 630+ 7EBA 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 7EBC             >
 630+ 7EBC             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 7EBC CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 7EBF             >
 630+ 7EBF             >
 630+ 7EBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 7EBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 7EBF             >
 630+ 7EBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 7EBF 96 69 B1 7E                  dw      FETCH, DOT
 632+ 7EC3 4C 68                        dw      EXIT
 633+ 7EC5
 634+ 7EC5              //  ______________________________________________________________________
 635+ 7EC5              //
 636+ 7EC5              // u.           u --
 637+ 7EC5                              Colon_Def U_DOT, "U.", is_normal
 637+ 7EC5             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 637+ 7EC5             >
 637+ 7EC5             >Dict_Ptr        defl    $
 637+ 7EC5             >
 637+ 7EC5             >//              ______________________________________________________________________
 637+ 7EC5             >//              Heap part
 637+ 7EC5             >
 637+ 7EC5             >
 637+ 7EC5             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EC33             >
 637+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EC33             >Latest_Definition defl  Heap_Ptr
 637+ EC33             >
 637+ EC33             >                // dummy db directives used to calculate length of namec
 637+ EC33 55 2E       >                db      "U."
 637+ EC35             >len_NFA         defl    $ - temp_NFA
 637+ EC35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EC33             >
 637+ EC33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EC34 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 637+ EC36             >                org     $-1                 // alter last byte of Name just above to set
 637+ EC35 AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EC36             >
 637+ EC36 2D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EC38             >Prev_Ptr        defl    Heap_Ptr
 637+ EC38             >
 637+ EC38             >mirror_Ptr      defl    $
 637+ EC38             >
 637+ EC38 C7 7E       >                dw      Dict_Ptr + 2        // xt
 637+ EC3A             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EC3A             >
 637+ EC3A             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EC3A             >
 637+ EC3A             >//              ______________________________________________________________________
 637+ EC3A             >//              Dictionary part
 637+ EC3A             >
 637+ EC3A             >                org     Dict_Ptr
 637+ 7EC5             >
 637+ 7EC5 38 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 7EC7             >
 637+ 7EC7             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 7EC7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 7ECA             >
 637+ 7ECA             >
 637+ 7ECA             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 7ECA             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 7ECA             >
 637+ 7ECA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 7ECA 8E 6A A4 7E                  dw      ZERO, D_DOT
 639+ 7ECE 4C 68                        dw      EXIT
 640+ 7ED0
 641+ 7ED0              //  ______________________________________________________________________
 642+ 7ED0              //
 643+ 7ED0              // words        --
 644+ 7ED0                              Colon_Def WORDS, "WORDS", is_normal
 644+ 7ED0             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 644+ 7ED0             >
 644+ 7ED0             >Dict_Ptr        defl    $
 644+ 7ED0             >
 644+ 7ED0             >//              ______________________________________________________________________
 644+ 7ED0             >//              Heap part
 644+ 7ED0             >
 644+ 7ED0             >
 644+ 7ED0             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EC3A             >
 644+ EC3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EC3A             >Latest_Definition defl  Heap_Ptr
 644+ EC3A             >
 644+ EC3A             >                // dummy db directives used to calculate length of namec
 644+ EC3A 57 4F 52 44 >                db      "WORDS"
 644+ EC3E 53          >
 644+ EC3F             >len_NFA         defl    $ - temp_NFA
 644+ EC3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EC3A             >
 644+ EC3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EC3B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 644+ EC3F 53          >
 644+ EC40             >                org     $-1                 // alter last byte of Name just above to set
 644+ EC3F D3          >                db      {b $} | END_BIT     // msb as name end
 644+ EC40             >
 644+ EC40 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EC42             >Prev_Ptr        defl    Heap_Ptr
 644+ EC42             >
 644+ EC42             >mirror_Ptr      defl    $
 644+ EC42             >
 644+ EC42 D2 7E       >                dw      Dict_Ptr + 2        // xt
 644+ EC44             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EC44             >
 644+ EC44             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EC44             >
 644+ EC44             >//              ______________________________________________________________________
 644+ EC44             >//              Dictionary part
 644+ EC44             >
 644+ EC44             >                org     Dict_Ptr
 644+ 7ED0             >
 644+ 7ED0 42 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 7ED2             >
 644+ 7ED2             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 7ED2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 7ED5             >
 644+ 7ED5             >
 644+ 7ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 7ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 7ED5             >
 644+ 7ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 7ED5 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 645+ 7ED9 3B 6B A0 69
 646+ 7EDD 4D 6B 96 69                  dw      CONTEXT, FETCH, FETCH
 646+ 7EE1 96 69
 647+ 7EE3              Words_Begin:
 648+ 7EE3 F5 6C                        dw          FAR // Q TO HEAP
 649+ 7EE5 25 69 AB 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 649+ 7EE9 A3 63 1F 00
 649+ 7EED 0C 68
 650+ 7EEF 3B 6B 96 69                  dw          OUT, FETCH, PLUS
 650+ 7EF3 9F 68
 651+ 7EF5 B8 6A 17 6C                  dw          CL, LESS, ZEQUAL
 651+ 7EF9 71 68
 652+ 7EFB F5 63                        dw          ZBRANCH
 653+ 7EFD 0A 00                        dw          Words_Endif - $
 654+ 7EFF B6 65 8E 6A                  dw              CR, ZERO, OUT, STORE
 654+ 7F03 3B 6B A0 69
 655+ 7F07              Words_Endif:
 656+ 7F07 25 69 5F 73                  dw          DUP, ID_DOT
 657+ 7F0B 95 6A 8F 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 657+ 7F0F B8 68 96 69
 658+ 7F13 25 69 71 68                  dw          DUP, ZEQUAL
 659+ 7F17 B3 66 1B 68                  dw          QTERMINAL, OR_OP
 660+ 7F1B F5 63                        dw      ZBRANCH
 661+ 7F1D C6 FF                        dw      Words_Begin - $
 662+ 7F1F 0A 69                        dw      DROP
 663+ 7F21 4C 68                        dw      EXIT
 664+ 7F23
 665+ 7F23              //  ______________________________________________________________________
 666+ 7F23              //
 667+ 7F23              // list         n --
 668+ 7F23                              Colon_Def LIST, "LIST", is_normal
 668+ 7F23             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 668+ 7F23             >
 668+ 7F23             >Dict_Ptr        defl    $
 668+ 7F23             >
 668+ 7F23             >//              ______________________________________________________________________
 668+ 7F23             >//              Heap part
 668+ 7F23             >
 668+ 7F23             >
 668+ 7F23             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ EC44             >
 668+ EC44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ EC44             >Latest_Definition defl  Heap_Ptr
 668+ EC44             >
 668+ EC44             >                // dummy db directives used to calculate length of namec
 668+ EC44 4C 49 53 54 >                db      "LIST"
 668+ EC48             >len_NFA         defl    $ - temp_NFA
 668+ EC48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ EC44             >
 668+ EC44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ EC45 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 668+ EC49             >                org     $-1                 // alter last byte of Name just above to set
 668+ EC48 D4          >                db      {b $} | END_BIT     // msb as name end
 668+ EC49             >
 668+ EC49 3A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ EC4B             >Prev_Ptr        defl    Heap_Ptr
 668+ EC4B             >
 668+ EC4B             >mirror_Ptr      defl    $
 668+ EC4B             >
 668+ EC4B 25 7F       >                dw      Dict_Ptr + 2        // xt
 668+ EC4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ EC4D             >
 668+ EC4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ EC4D             >
 668+ EC4D             >//              ______________________________________________________________________
 668+ EC4D             >//              Dictionary part
 668+ EC4D             >
 668+ EC4D             >                org     Dict_Ptr
 668+ 7F23             >
 668+ 7F23 4B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 7F25             >
 668+ 7F25             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 7F25 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 7F28             >
 668+ 7F28             >
 668+ 7F28             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 7F28             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 7F28             >
 668+ 7F28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 7F28 C8 6E B6 65                  dw      DECIMAL, CR
 670+ 7F2C 25 69 41 6B                  dw      DUP, SCR, STORE
 670+ 7F30 A0 69
 671+ 7F32 1C 71                        dw      C_DOT_QUOTE
 672+ 7F34 05 53 63 72                  db      5, "Scr# "
 672+ 7F38 23 20
 673+ 7F3A B1 7E                        dw      DOT
 674+ 7F3C CD 6A 8E 6A                  dw      LSCR, ZERO, C_DO
 674+ 7F40 34 64
 675+ 7F42              List_Loop:
 676+ 7F42 B6 65                        dw          CR
 677+ 7F44 3A 64 A3 6A                  dw          I, THREE
 678+ 7F48 95 7E 84 6C                  dw          DOT_R, SPACE
 679+ 7F4C 3A 64 41 6B                  dw          I, SCR, FETCH, DOT_LINE
 679+ 7F50 96 69 7F 77
 680+ 7F54 B3 66                        dw          QTERMINAL
 681+ 7F56 F5 63                        dw          ZBRANCH
 682+ 7F58 06 00                        dw          List_Endif - $
 683+ 7F5A 00 64                        dw              C_LEAVE
 684+ 7F5C 06 00                        dw              List_Leave - $
 685+ 7F5E              List_Endif:
 686+ 7F5E E0 63                        dw      C_LOOP
 687+ 7F60 E2 FF                        dw      List_Loop - $
 688+ 7F62              List_Leave:
 689+ 7F62 B6 65                        dw      CR
 690+ 7F64 4C 68                        dw      EXIT
 691+ 7F66
 692+ 7F66              //  ______________________________________________________________________
 693+ 7F66              //
 694+ 7F66              // index        n1 n2 --
 695+ 7F66                              Colon_Def INDEX, "INDEX", is_normal
 695+ 7F66             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 695+ 7F66             >
 695+ 7F66             >Dict_Ptr        defl    $
 695+ 7F66             >
 695+ 7F66             >//              ______________________________________________________________________
 695+ 7F66             >//              Heap part
 695+ 7F66             >
 695+ 7F66             >
 695+ 7F66             >                org     (Heap_Ptr & $1FFF) + $E000
 695+ EC4D             >
 695+ EC4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ EC4D             >Latest_Definition defl  Heap_Ptr
 695+ EC4D             >
 695+ EC4D             >                // dummy db directives used to calculate length of namec
 695+ EC4D 49 4E 44 45 >                db      "INDEX"
 695+ EC51 58          >
 695+ EC52             >len_NFA         defl    $ - temp_NFA
 695+ EC52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ EC4D             >
 695+ EC4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ EC4E 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 695+ EC52 58          >
 695+ EC53             >                org     $-1                 // alter last byte of Name just above to set
 695+ EC52 D8          >                db      {b $} | END_BIT     // msb as name end
 695+ EC53             >
 695+ EC53 44 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 695+ EC55             >Prev_Ptr        defl    Heap_Ptr
 695+ EC55             >
 695+ EC55             >mirror_Ptr      defl    $
 695+ EC55             >
 695+ EC55 68 7F       >                dw      Dict_Ptr + 2        // xt
 695+ EC57             >Heap_Ptr        defl    $ - $E000           // save current HP
 695+ EC57             >
 695+ EC57             >Current_HP      defl  $ - $E000             // used to set HP once!
 695+ EC57             >
 695+ EC57             >//              ______________________________________________________________________
 695+ EC57             >//              Dictionary part
 695+ EC57             >
 695+ EC57             >                org     Dict_Ptr
 695+ 7F66             >
 695+ 7F66 55 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 695+ 7F68             >
 695+ 7F68             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7F68 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 695+ 7F6B             >
 695+ 7F6B             >
 695+ 7F6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7F6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7F6B             >
 695+ 7F6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7F6B B8 68 1E 69                  dw      ONE_PLUS, SWAP, C_DO
 696+ 7F6F 34 64
 697+ 7F71              Index_Loop:
 698+ 7F71 B6 65 3A 64                  dw          CR, I, THREE
 698+ 7F75 A3 6A
 699+ 7F77 95 7E 84 6C                  dw          DOT_R, SPACE
 700+ 7F7B 8E 6A 3A 64                  dw          ZERO, I, DOT_LINE
 700+ 7F7F 7F 77
 701+ 7F81 B3 66                        dw          QTERMINAL
 702+ 7F83 F5 63                        dw          ZBRANCH
 703+ 7F85 06 00                        dw          Index_Endif - $
 704+ 7F87 00 64                        dw              C_LEAVE
 705+ 7F89 06 00                        dw              Index_Leave - $
 706+ 7F8B              Index_Endif:
 707+ 7F8B E0 63                        dw      C_LOOP
 708+ 7F8D E4 FF                        dw      Index_Loop - $
 709+ 7F8F              Index_Leave:
 710+ 7F8F B6 65                        dw      CR
 711+ 7F91 4C 68                        dw      EXIT
 712+ 7F93
 713+ 7F93              //  ______________________________________________________________________
 714+ 7F93              //
 715+ 7F93              // cls          --
 716+ 7F93                              Colon_Def CLS, "CLS", is_normal
 716+ 7F93             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 716+ 7F93             >
 716+ 7F93             >Dict_Ptr        defl    $
 716+ 7F93             >
 716+ 7F93             >//              ______________________________________________________________________
 716+ 7F93             >//              Heap part
 716+ 7F93             >
 716+ 7F93             >
 716+ 7F93             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ EC57             >
 716+ EC57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ EC57             >Latest_Definition defl  Heap_Ptr
 716+ EC57             >
 716+ EC57             >                // dummy db directives used to calculate length of namec
 716+ EC57 43 4C 53    >                db      "CLS"
 716+ EC5A             >len_NFA         defl    $ - temp_NFA
 716+ EC5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ EC57             >
 716+ EC57 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ EC58 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 716+ EC5B             >                org     $-1                 // alter last byte of Name just above to set
 716+ EC5A D3          >                db      {b $} | END_BIT     // msb as name end
 716+ EC5B             >
 716+ EC5B 4D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ EC5D             >Prev_Ptr        defl    Heap_Ptr
 716+ EC5D             >
 716+ EC5D             >mirror_Ptr      defl    $
 716+ EC5D             >
 716+ EC5D 95 7F       >                dw      Dict_Ptr + 2        // xt
 716+ EC5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ EC5F             >
 716+ EC5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ EC5F             >
 716+ EC5F             >//              ______________________________________________________________________
 716+ EC5F             >//              Dictionary part
 716+ EC5F             >
 716+ EC5F             >                org     Dict_Ptr
 716+ 7F93             >
 716+ 7F93 5D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 7F95             >
 716+ 7F95             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 7F95 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 7F98             >
 716+ 7F98             >
 716+ 7F98             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 7F98             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 7F98             >
 716+ 7F98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 7F98 A3 63 0E 00                  dw      LIT, $0E, EMITC
 717+ 7F9C A2 65
 718+ 7F9E 4C 68                        dw      EXIT
 719+ 7FA0
 720+ 7FA0              //  ______________________________________________________________________
 721+ 7FA0              //
 722+ 7FA0              // splash       --
 723+ 7FA0              //              Colon_Def SPLASH, "SPLASH", is_normal
 724+ 7FA0              //              dw      CLS
 725+ 7FA0              //              dw      C_DOT_QUOTE
 726+ 7FA0              //              db      87
 727+ 7FA0              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 728+ 7FA0              //              db      "Heap Vocabulary - build 20230910", 13  // 33
 729+ 7FA0              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 730+ 7FA0              //              dw      EXIT
 731+ 7FA0
 732+ 7FA0              //  ______________________________________________________________________
 733+ 7FA0              //
 734+ 7FA0              // splash       --
 735+ 7FA0                              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 7FA0             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 735+ 7FA0             >
 735+ 7FA0             >Dict_Ptr        defl    $
 735+ 7FA0             >
 735+ 7FA0             >//              ______________________________________________________________________
 735+ 7FA0             >//              Heap part
 735+ 7FA0             >
 735+ 7FA0             >
 735+ 7FA0             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ EC5F             >
 735+ EC5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ EC5F             >Latest_Definition defl  Heap_Ptr
 735+ EC5F             >
 735+ EC5F             >                // dummy db directives used to calculate length of namec
 735+ EC5F 53 50 4C 41 >                db      "SPLASH"
 735+ EC63 53 48       >
 735+ EC65             >len_NFA         defl    $ - temp_NFA
 735+ EC65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ EC5F             >
 735+ EC5F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ EC60 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 735+ EC64 53 48       >
 735+ EC66             >                org     $-1                 // alter last byte of Name just above to set
 735+ EC65 C8          >                db      {b $} | END_BIT     // msb as name end
 735+ EC66             >
 735+ EC66 57 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ EC68             >Prev_Ptr        defl    Heap_Ptr
 735+ EC68             >
 735+ EC68             >mirror_Ptr      defl    $
 735+ EC68             >
 735+ EC68 A2 7F       >                dw      Dict_Ptr + 2        // xt
 735+ EC6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ EC6A             >
 735+ EC6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ EC6A             >
 735+ EC6A             >//              ______________________________________________________________________
 735+ EC6A             >//              Dictionary part
 735+ EC6A             >
 735+ EC6A             >                org     Dict_Ptr
 735+ 7FA0             >
 735+ 7FA0 68 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 7FA2             >
 735+ 7FA2             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 7FA2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 7FA5             >
 735+ 7FA5             >
 735+ 7FA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 7FA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 7FA5             >
 735+ 7FA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 7FA5 95 7F                        dw      CLS
 737+ 7FA7 A3 63 02 00                  dw      LIT, Splash_Ptr
 738+ 7FAB F5 6C                        dw      FAR
 739+ 7FAD 2B 6F 7F 6F                  dw      COUNT, TYPE
 740+ 7FB1 4C 68                        dw      EXIT
 741+ 7FB3
 742+ 7FB3              //  ______________________________________________________________________
 743+ 7FB3              //
 744+ 7FB3              // video        --
 745+ 7FB3                              Colon_Def VIDEO, "VIDEO", is_normal
 745+ 7FB3             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 745+ 7FB3             >
 745+ 7FB3             >Dict_Ptr        defl    $
 745+ 7FB3             >
 745+ 7FB3             >//              ______________________________________________________________________
 745+ 7FB3             >//              Heap part
 745+ 7FB3             >
 745+ 7FB3             >
 745+ 7FB3             >                org     (Heap_Ptr & $1FFF) + $E000
 745+ EC6A             >
 745+ EC6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ EC6A             >Latest_Definition defl  Heap_Ptr
 745+ EC6A             >
 745+ EC6A             >                // dummy db directives used to calculate length of namec
 745+ EC6A 56 49 44 45 >                db      "VIDEO"
 745+ EC6E 4F          >
 745+ EC6F             >len_NFA         defl    $ - temp_NFA
 745+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ EC6A             >
 745+ EC6A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ EC6B 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 745+ EC6F 4F          >
 745+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 745+ EC6F CF          >                db      {b $} | END_BIT     // msb as name end
 745+ EC70             >
 745+ EC70 5F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 745+ EC72             >Prev_Ptr        defl    Heap_Ptr
 745+ EC72             >
 745+ EC72             >mirror_Ptr      defl    $
 745+ EC72             >
 745+ EC72 B5 7F       >                dw      Dict_Ptr + 2        // xt
 745+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 745+ EC74             >
 745+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 745+ EC74             >
 745+ EC74             >//              ______________________________________________________________________
 745+ EC74             >//              Dictionary part
 745+ EC74             >
 745+ EC74             >                org     Dict_Ptr
 745+ 7FB3             >
 745+ 7FB3 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 745+ 7FB5             >
 745+ 7FB5             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7FB5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 7FB8             >
 745+ 7FB8             >
 745+ 7FB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7FB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7FB8             >
 745+ 7FB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7FB8 9C 6A 25 69                  dw      TWO, DUP, DEVICE, STORE
 746+ 7FBC B4 77 A0 69
 747+ 7FC0 C7 66                        dw      SELECT
 748+ 7FC2 4C 68                        dw      EXIT
 749+ 7FC4
 750+ 7FC4              //  ______________________________________________________________________
 751+ 7FC4              //
 752+ 7FC4              // autoexec     --
 753+ 7FC4              // this word is called the first time the Forth system boot to
 754+ 7FC4              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 755+ 7FC4                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 755+ 7FC4             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 755+ 7FC4             >
 755+ 7FC4             >Dict_Ptr        defl    $
 755+ 7FC4             >
 755+ 7FC4             >//              ______________________________________________________________________
 755+ 7FC4             >//              Heap part
 755+ 7FC4             >
 755+ 7FC4             >
 755+ 7FC4             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ EC74             >
 755+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ EC74             >Latest_Definition defl  Heap_Ptr
 755+ EC74             >
 755+ EC74             >                // dummy db directives used to calculate length of namec
 755+ EC74 41 55 54 4F >                db      "AUTOEXEC"
 755+ EC78 45 58 45 43 >
 755+ EC7C             >len_NFA         defl    $ - temp_NFA
 755+ EC7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ EC74             >
 755+ EC74 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ EC75 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 755+ EC79 45 58 45 43 >
 755+ EC7D             >                org     $-1                 // alter last byte of Name just above to set
 755+ EC7C C3          >                db      {b $} | END_BIT     // msb as name end
 755+ EC7D             >
 755+ EC7D 6A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ EC7F             >Prev_Ptr        defl    Heap_Ptr
 755+ EC7F             >
 755+ EC7F             >mirror_Ptr      defl    $
 755+ EC7F             >
 755+ EC7F C6 7F       >                dw      Dict_Ptr + 2        // xt
 755+ EC81             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ EC81             >
 755+ EC81             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ EC81             >
 755+ EC81             >//              ______________________________________________________________________
 755+ EC81             >//              Dictionary part
 755+ EC81             >
 755+ EC81             >                org     Dict_Ptr
 755+ 7FC4             >
 755+ 7FC4 7F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 7FC6             >
 755+ 7FC6             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 7FC6 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 7FC9             >
 755+ 7FC9             >
 755+ 7FC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 7FC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 7FC9             >
 755+ 7FC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 7FC9 A3 63 0B 00                  dw      LIT, 11
 757+ 7FCD A3 63 55 6A                  dw      LIT, NOOP
 758+ 7FD1 A3 63 C6 75                  dw      LIT, Autoexec_Ptr
 759+ 7FD5 A0 69                        dw      STORE
 760+ 7FD7 CB 7C                        dw      LOAD
 761+ 7FD9 75 75                        dw      QUIT
 762+ 7FDB 4C 68                        dw      EXIT
 763+ 7FDD
 764+ 7FDD
 765+ 7FDD              //  ______________________________________________________________________
 766+ 7FDD              //
 767+ 7FDD              // bye     --
 768+ 7FDD              //
 769+ 7FDD                              Colon_Def BYE, "BYE", is_normal
 769+ 7FDD             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 769+ 7FDD             >
 769+ 7FDD             >Dict_Ptr        defl    $
 769+ 7FDD             >
 769+ 7FDD             >//              ______________________________________________________________________
 769+ 7FDD             >//              Heap part
 769+ 7FDD             >
 769+ 7FDD             >
 769+ 7FDD             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC81             >
 769+ EC81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC81             >Latest_Definition defl  Heap_Ptr
 769+ EC81             >
 769+ EC81             >                // dummy db directives used to calculate length of namec
 769+ EC81 42 59 45    >                db      "BYE"
 769+ EC84             >len_NFA         defl    $ - temp_NFA
 769+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC81             >
 769+ EC81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC82 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 769+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC84 C5          >                db      {b $} | END_BIT     // msb as name end
 769+ EC85             >
 769+ EC85 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC87             >Prev_Ptr        defl    Heap_Ptr
 769+ EC87             >
 769+ EC87             >mirror_Ptr      defl    $
 769+ EC87             >
 769+ EC87 DF 7F       >                dw      Dict_Ptr + 2        // xt
 769+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC89             >
 769+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC89             >
 769+ EC89             >//              ______________________________________________________________________
 769+ EC89             >//              Dictionary part
 769+ EC89             >
 769+ EC89             >                org     Dict_Ptr
 769+ 7FDD             >
 769+ 7FDD 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 7FDF             >
 769+ 7FDF             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 7FDF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 7FE2             >
 769+ 7FE2             >
 769+ 7FE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 7FE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 7FE2             >
 769+ 7FE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 7FE2 CD 79                        dw      FLUSH
 771+ 7FE4 1B 79                        dw      EMPTY_BUFFERS
 772+ 7FE6 07 78 96 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 772+ 7FEA FF 66 0A 69
 773+ 7FEE 8E 6A D4 6A                  dw      ZERO, PLUS_ORIGIN
 774+ 7FF2 49 76                        dw      BASIC
 775+ 7FF4
 776+ 7FF4              //  ______________________________________________________________________
 777+ 7FF4              //
 778+ 7FF4              // invv     --
 779+ 7FF4              //
 780+ 7FF4              //              Colon_Def INVV, "INVV", is_normal
 781+ 7FF4              //              dw      LIT, 20, EMITC, ONE, EMITC
 782+ 7FF4              //              dw      EXIT
 783+ 7FF4
 784+ 7FF4              //  ______________________________________________________________________
 785+ 7FF4              //
 786+ 7FF4              // truv     --
 787+ 7FF4              //
 788+ 7FF4              //              Colon_Def TRUV, "TRUV", is_normal
 789+ 7FF4              //              dw      LIT, 20, EMITC, ZERO, EMITC
 790+ 7FF4              //              dw      EXIT
 791+ 7FF4
 792+ 7FF4              //  ______________________________________________________________________
 793+ 7FF4              //
 794+ 7FF4              // mark     --
 795+ 7FF4              //
 796+ 7FF4              //              Colon_Def MARK, "MARK", is_normal
 797+ 7FF4              //              dw      INVV, TYPE, TRUV
 798+ 7FF4              //              dw      EXIT
 799+ 7FF4
 800+ 7FF4              //  ______________________________________________________________________
 801+ 7FF4              //
 802+ 7FF4              // back     --
 803+ 7FF4              //
 804+ 7FF4                              Colon_Def BACK, "BACK", is_normal
 804+ 7FF4             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 804+ 7FF4             >
 804+ 7FF4             >Dict_Ptr        defl    $
 804+ 7FF4             >
 804+ 7FF4             >//              ______________________________________________________________________
 804+ 7FF4             >//              Heap part
 804+ 7FF4             >
 804+ 7FF4             >
 804+ 7FF4             >                org     (Heap_Ptr & $1FFF) + $E000
 804+ EC89             >
 804+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ EC89             >Latest_Definition defl  Heap_Ptr
 804+ EC89             >
 804+ EC89             >                // dummy db directives used to calculate length of namec
 804+ EC89 42 41 43 4B >                db      "BACK"
 804+ EC8D             >len_NFA         defl    $ - temp_NFA
 804+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ EC89             >
 804+ EC89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ EC8A 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 804+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 804+ EC8D CB          >                db      {b $} | END_BIT     // msb as name end
 804+ EC8E             >
 804+ EC8E 81 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 804+ EC90             >Prev_Ptr        defl    Heap_Ptr
 804+ EC90             >
 804+ EC90             >mirror_Ptr      defl    $
 804+ EC90             >
 804+ EC90 F6 7F       >                dw      Dict_Ptr + 2        // xt
 804+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 804+ EC92             >
 804+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 804+ EC92             >
 804+ EC92             >//              ______________________________________________________________________
 804+ EC92             >//              Dictionary part
 804+ EC92             >
 804+ EC92             >                org     Dict_Ptr
 804+ 7FF4             >
 804+ 7FF4 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 804+ 7FF6             >
 804+ 7FF6             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 7FF6 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 7FF9             >
 804+ 7FF9             >
 804+ 7FF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 7FF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 7FF9             >
 804+ 7FF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 7FF9 B3 6B F2 6B                  dw      HERE, SUBTRACT, COMMA
 805+ 7FFD C9 6B
 806+ 7FFF 4C 68                        dw      EXIT
 807+ 8001
 808+ 8001              //  ______________________________________________________________________
 809+ 8001              //
 810+ 8001              // if          ( -- a 2 ) \ compile-time
 811+ 8001              // IF ... THEN
 812+ 8001              // IF ... ELSE ... ENDIF
 813+ 8001                              Colon_Def IF, "IF", is_immediate
 813+ 8001             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 813+ 8001             >
 813+ 8001             >Dict_Ptr        defl    $
 813+ 8001             >
 813+ 8001             >//              ______________________________________________________________________
 813+ 8001             >//              Heap part
 813+ 8001             >
 813+ 8001             >
 813+ 8001             >                org     (Heap_Ptr & $1FFF) + $E000
 813+ EC92             >
 813+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ EC92             >Latest_Definition defl  Heap_Ptr
 813+ EC92             >
 813+ EC92             >                // dummy db directives used to calculate length of namec
 813+ EC92 49 46       >                db      "IF"
 813+ EC94             >len_NFA         defl    $ - temp_NFA
 813+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ EC92             >
 813+ EC92 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ EC93 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 813+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 813+ EC94 C6          >                db      {b $} | END_BIT     // msb as name end
 813+ EC95             >
 813+ EC95 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 813+ EC97             >Prev_Ptr        defl    Heap_Ptr
 813+ EC97             >
 813+ EC97             >mirror_Ptr      defl    $
 813+ EC97             >
 813+ EC97 03 80       >                dw      Dict_Ptr + 2        // xt
 813+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 813+ EC99             >
 813+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 813+ EC99             >
 813+ EC99             >//              ______________________________________________________________________
 813+ EC99             >//              Dictionary part
 813+ EC99             >
 813+ EC99             >                org     Dict_Ptr
 813+ 8001             >
 813+ 8001 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 813+ 8003             >
 813+ 8003             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 8003 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 8006             >
 813+ 8006             >
 813+ 8006             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 8006             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 8006             >
 813+ 8006             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 8006 5F 6E F5 63                  dw      COMPILE, ZBRANCH
 815+ 800A B3 6B 8E 6A                  dw      HERE, ZERO, COMMA
 815+ 800E C9 6B
 816+ 8010 9C 6A                        dw      TWO
 817+ 8012 4C 68                        dw      EXIT
 818+ 8014
 819+ 8014              //  ______________________________________________________________________
 820+ 8014              //
 821+ 8014              // then        ( a 2 -- ) \ compile-time
 822+ 8014              //
 823+ 8014                              Colon_Def THEN, "THEN", is_immediate
 823+ 8014             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 823+ 8014             >
 823+ 8014             >Dict_Ptr        defl    $
 823+ 8014             >
 823+ 8014             >//              ______________________________________________________________________
 823+ 8014             >//              Heap part
 823+ 8014             >
 823+ 8014             >
 823+ 8014             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EC99             >
 823+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EC99             >Latest_Definition defl  Heap_Ptr
 823+ EC99             >
 823+ EC99             >                // dummy db directives used to calculate length of namec
 823+ EC99 54 48 45 4E >                db      "THEN"
 823+ EC9D             >len_NFA         defl    $ - temp_NFA
 823+ EC9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EC99             >
 823+ EC99 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EC9A 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 823+ EC9E             >                org     $-1                 // alter last byte of Name just above to set
 823+ EC9D CE          >                db      {b $} | END_BIT     // msb as name end
 823+ EC9E             >
 823+ EC9E 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ ECA0             >Prev_Ptr        defl    Heap_Ptr
 823+ ECA0             >
 823+ ECA0             >mirror_Ptr      defl    $
 823+ ECA0             >
 823+ ECA0 16 80       >                dw      Dict_Ptr + 2        // xt
 823+ ECA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ ECA2             >
 823+ ECA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ ECA2             >
 823+ ECA2             >//              ______________________________________________________________________
 823+ ECA2             >//              Dictionary part
 823+ ECA2             >
 823+ ECA2             >                org     Dict_Ptr
 823+ 8014             >
 823+ 8014 A0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 8016             >
 823+ 8016             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 8016 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 8019             >
 823+ 8019             >
 823+ 8019             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 8019             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 8019             >
 823+ 8019             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 8019 04 6E                        dw      QCOMP
 825+ 801B 9C 6A 28 6E                  dw      TWO, QPAIRS
 826+ 801F B3 6B 01 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 826+ 8023 F2 6B 1E 69
 826+ 8027 A0 69
 827+ 8029 4C 68                        dw      EXIT
 828+ 802B
 829+ 802B              //  ______________________________________________________________________
 830+ 802B              //
 831+ 802B              // endif       ( a 2 -- ) \ compile-time
 832+ 802B              //
 833+ 802B                              Colon_Def ENDIF, "ENDIF", is_immediate
 833+ 802B             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 833+ 802B             >
 833+ 802B             >Dict_Ptr        defl    $
 833+ 802B             >
 833+ 802B             >//              ______________________________________________________________________
 833+ 802B             >//              Heap part
 833+ 802B             >
 833+ 802B             >
 833+ 802B             >                org     (Heap_Ptr & $1FFF) + $E000
 833+ ECA2             >
 833+ ECA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ ECA2             >Latest_Definition defl  Heap_Ptr
 833+ ECA2             >
 833+ ECA2             >                // dummy db directives used to calculate length of namec
 833+ ECA2 45 4E 44 49 >                db      "ENDIF"
 833+ ECA6 46          >
 833+ ECA7             >len_NFA         defl    $ - temp_NFA
 833+ ECA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ ECA2             >
 833+ ECA2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ ECA3 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 833+ ECA7 46          >
 833+ ECA8             >                org     $-1                 // alter last byte of Name just above to set
 833+ ECA7 C6          >                db      {b $} | END_BIT     // msb as name end
 833+ ECA8             >
 833+ ECA8 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 833+ ECAA             >Prev_Ptr        defl    Heap_Ptr
 833+ ECAA             >
 833+ ECAA             >mirror_Ptr      defl    $
 833+ ECAA             >
 833+ ECAA 2D 80       >                dw      Dict_Ptr + 2        // xt
 833+ ECAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 833+ ECAC             >
 833+ ECAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 833+ ECAC             >
 833+ ECAC             >//              ______________________________________________________________________
 833+ ECAC             >//              Dictionary part
 833+ ECAC             >
 833+ ECAC             >                org     Dict_Ptr
 833+ 802B             >
 833+ 802B AA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 833+ 802D             >
 833+ 802D             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 802D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 833+ 8030             >
 833+ 8030             >
 833+ 8030             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 8030             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 8030             >
 833+ 8030             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 8030 16 80                        dw      THEN
 835+ 8032 4C 68                        dw      EXIT
 836+ 8034
 837+ 8034              //  ______________________________________________________________________
 838+ 8034              //
 839+ 8034              // else        ( a1 2 -- a2 2 ) \ compile-time
 840+ 8034              //
 841+ 8034                              Colon_Def ELSE, "ELSE", is_immediate
 841+ 8034             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 841+ 8034             >
 841+ 8034             >Dict_Ptr        defl    $
 841+ 8034             >
 841+ 8034             >//              ______________________________________________________________________
 841+ 8034             >//              Heap part
 841+ 8034             >
 841+ 8034             >
 841+ 8034             >                org     (Heap_Ptr & $1FFF) + $E000
 841+ ECAC             >
 841+ ECAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 841+ ECAC             >Latest_Definition defl  Heap_Ptr
 841+ ECAC             >
 841+ ECAC             >                // dummy db directives used to calculate length of namec
 841+ ECAC 45 4C 53 45 >                db      "ELSE"
 841+ ECB0             >len_NFA         defl    $ - temp_NFA
 841+ ECB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 841+ ECAC             >
 841+ ECAC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 841+ ECAD 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 841+ ECB1             >                org     $-1                 // alter last byte of Name just above to set
 841+ ECB0 C5          >                db      {b $} | END_BIT     // msb as name end
 841+ ECB1             >
 841+ ECB1 A2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 841+ ECB3             >Prev_Ptr        defl    Heap_Ptr
 841+ ECB3             >
 841+ ECB3             >mirror_Ptr      defl    $
 841+ ECB3             >
 841+ ECB3 36 80       >                dw      Dict_Ptr + 2        // xt
 841+ ECB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 841+ ECB5             >
 841+ ECB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 841+ ECB5             >
 841+ ECB5             >//              ______________________________________________________________________
 841+ ECB5             >//              Dictionary part
 841+ ECB5             >
 841+ ECB5             >                org     Dict_Ptr
 841+ 8034             >
 841+ 8034 B3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 841+ 8036             >
 841+ 8036             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 841+ 8036 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 841+ 8039             >
 841+ 8039             >
 841+ 8039             >                endif           ; ok        // for other definitions it "points" the correct handler
 841+ 8039             >                // Use of "; ok" to suppress "warning[fwdref]"
 841+ 8039             >
 841+ 8039             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 842+ 8039 04 6E                        dw      QCOMP
 843+ 803B 9C 6A 28 6E                  dw      TWO, QPAIRS
 844+ 803F 5F 6E E8 63                  dw      COMPILE, BRANCH
 845+ 8043 B3 6B 8E 6A                  dw      HERE, ZERO, COMMA
 845+ 8047 C9 6B
 846+ 8049 1E 69 9C 6A                  dw      SWAP, TWO, THEN
 846+ 804D 16 80
 847+ 804F 9C 6A                        dw      TWO
 848+ 8051 4C 68                        dw      EXIT
 849+ 8053
 850+ 8053              //  ______________________________________________________________________
 851+ 8053              //
 852+ 8053              // begin        ( -- a 1 ) \ compile-time
 853+ 8053              // BEGIN ... AGAIN
 854+ 8053              // BEGIN ... f UNTIL
 855+ 8053              // BEGIN ... f WHILE ... REPEAT
 856+ 8053                              Colon_Def BEGIN, "BEGIN", is_immediate
 856+ 8053             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 856+ 8053             >
 856+ 8053             >Dict_Ptr        defl    $
 856+ 8053             >
 856+ 8053             >//              ______________________________________________________________________
 856+ 8053             >//              Heap part
 856+ 8053             >
 856+ 8053             >
 856+ 8053             >                org     (Heap_Ptr & $1FFF) + $E000
 856+ ECB5             >
 856+ ECB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ ECB5             >Latest_Definition defl  Heap_Ptr
 856+ ECB5             >
 856+ ECB5             >                // dummy db directives used to calculate length of namec
 856+ ECB5 42 45 47 49 >                db      "BEGIN"
 856+ ECB9 4E          >
 856+ ECBA             >len_NFA         defl    $ - temp_NFA
 856+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ ECB5             >
 856+ ECB5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ ECB6 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 856+ ECBA 4E          >
 856+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 856+ ECBA CE          >                db      {b $} | END_BIT     // msb as name end
 856+ ECBB             >
 856+ ECBB AC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 856+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 856+ ECBD             >
 856+ ECBD             >mirror_Ptr      defl    $
 856+ ECBD             >
 856+ ECBD 55 80       >                dw      Dict_Ptr + 2        // xt
 856+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 856+ ECBF             >
 856+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 856+ ECBF             >
 856+ ECBF             >//              ______________________________________________________________________
 856+ ECBF             >//              Dictionary part
 856+ ECBF             >
 856+ ECBF             >                org     Dict_Ptr
 856+ 8053             >
 856+ 8053 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 856+ 8055             >
 856+ 8055             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 8055 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 856+ 8058             >
 856+ 8058             >
 856+ 8058             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 8058             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 8058             >
 856+ 8058             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 857+ 8058 04 6E                        dw      QCOMP
 858+ 805A B3 6B                        dw      HERE
 859+ 805C 9C 6A                        dw      TWO
 860+ 805E 4C 68                        dw      EXIT
 861+ 8060
 862+ 8060              //  ______________________________________________________________________
 863+ 8060              //
 864+ 8060              // again        ( a 1 -- ) \ compile-time
 865+ 8060                              Colon_Def AGAIN, "AGAIN", is_immediate
 865+ 8060             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 865+ 8060             >
 865+ 8060             >Dict_Ptr        defl    $
 865+ 8060             >
 865+ 8060             >//              ______________________________________________________________________
 865+ 8060             >//              Heap part
 865+ 8060             >
 865+ 8060             >
 865+ 8060             >                org     (Heap_Ptr & $1FFF) + $E000
 865+ ECBF             >
 865+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 865+ ECBF             >Latest_Definition defl  Heap_Ptr
 865+ ECBF             >
 865+ ECBF             >                // dummy db directives used to calculate length of namec
 865+ ECBF 41 47 41 49 >                db      "AGAIN"
 865+ ECC3 4E          >
 865+ ECC4             >len_NFA         defl    $ - temp_NFA
 865+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 865+ ECBF             >
 865+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 865+ ECC0 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 865+ ECC4 4E          >
 865+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 865+ ECC4 CE          >                db      {b $} | END_BIT     // msb as name end
 865+ ECC5             >
 865+ ECC5 B5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 865+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 865+ ECC7             >
 865+ ECC7             >mirror_Ptr      defl    $
 865+ ECC7             >
 865+ ECC7 62 80       >                dw      Dict_Ptr + 2        // xt
 865+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 865+ ECC9             >
 865+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 865+ ECC9             >
 865+ ECC9             >//              ______________________________________________________________________
 865+ ECC9             >//              Dictionary part
 865+ ECC9             >
 865+ ECC9             >                org     Dict_Ptr
 865+ 8060             >
 865+ 8060 C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 865+ 8062             >
 865+ 8062             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 865+ 8062 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 865+ 8065             >
 865+ 8065             >
 865+ 8065             >                endif           ; ok        // for other definitions it "points" the correct handler
 865+ 8065             >                // Use of "; ok" to suppress "warning[fwdref]"
 865+ 8065             >
 865+ 8065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 866+ 8065 04 6E                        dw      QCOMP
 867+ 8067 9C 6A 28 6E                  dw      TWO, QPAIRS
 868+ 806B 5F 6E E8 63                  dw      COMPILE, BRANCH
 869+ 806F F6 7F                        dw      BACK
 870+ 8071 4C 68                        dw      EXIT
 871+ 8073
 872+ 8073              //  ______________________________________________________________________
 873+ 8073              //
 874+ 8073              // until        ( a 1 -- ) \ compile-time
 875+ 8073                              Colon_Def UNTIL, "UNTIL", is_immediate
 875+ 8073             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 875+ 8073             >
 875+ 8073             >Dict_Ptr        defl    $
 875+ 8073             >
 875+ 8073             >//              ______________________________________________________________________
 875+ 8073             >//              Heap part
 875+ 8073             >
 875+ 8073             >
 875+ 8073             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ ECC9             >
 875+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ ECC9             >Latest_Definition defl  Heap_Ptr
 875+ ECC9             >
 875+ ECC9             >                // dummy db directives used to calculate length of namec
 875+ ECC9 55 4E 54 49 >                db      "UNTIL"
 875+ ECCD 4C          >
 875+ ECCE             >len_NFA         defl    $ - temp_NFA
 875+ ECCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ ECC9             >
 875+ ECC9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ ECCA 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 875+ ECCE 4C          >
 875+ ECCF             >                org     $-1                 // alter last byte of Name just above to set
 875+ ECCE CC          >                db      {b $} | END_BIT     // msb as name end
 875+ ECCF             >
 875+ ECCF BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ ECD1             >Prev_Ptr        defl    Heap_Ptr
 875+ ECD1             >
 875+ ECD1             >mirror_Ptr      defl    $
 875+ ECD1             >
 875+ ECD1 75 80       >                dw      Dict_Ptr + 2        // xt
 875+ ECD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ ECD3             >
 875+ ECD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ ECD3             >
 875+ ECD3             >//              ______________________________________________________________________
 875+ ECD3             >//              Dictionary part
 875+ ECD3             >
 875+ ECD3             >                org     Dict_Ptr
 875+ 8073             >
 875+ 8073 D1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 8075             >
 875+ 8075             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 8075 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 8078             >
 875+ 8078             >
 875+ 8078             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 8078             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 8078             >
 875+ 8078             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 8078 04 6E                        dw      QCOMP
 877+ 807A 9C 6A 28 6E                  dw      TWO, QPAIRS
 878+ 807E 5F 6E F5 63                  dw      COMPILE, ZBRANCH
 879+ 8082 F6 7F                        dw      BACK
 880+ 8084 4C 68                        dw      EXIT
 881+ 8086
 882+ 8086              //  ______________________________________________________________________
 883+ 8086              //
 884+ 8086              // end          ( a 1 -- ) \ compile-time
 885+ 8086                              Colon_Def END, "END", is_immediate
 885+ 8086             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 885+ 8086             >
 885+ 8086             >Dict_Ptr        defl    $
 885+ 8086             >
 885+ 8086             >//              ______________________________________________________________________
 885+ 8086             >//              Heap part
 885+ 8086             >
 885+ 8086             >
 885+ 8086             >                org     (Heap_Ptr & $1FFF) + $E000
 885+ ECD3             >
 885+ ECD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ ECD3             >Latest_Definition defl  Heap_Ptr
 885+ ECD3             >
 885+ ECD3             >                // dummy db directives used to calculate length of namec
 885+ ECD3 45 4E 44    >                db      "END"
 885+ ECD6             >len_NFA         defl    $ - temp_NFA
 885+ ECD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ ECD3             >
 885+ ECD3 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ ECD4 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 885+ ECD7             >                org     $-1                 // alter last byte of Name just above to set
 885+ ECD6 C4          >                db      {b $} | END_BIT     // msb as name end
 885+ ECD7             >
 885+ ECD7 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 885+ ECD9             >Prev_Ptr        defl    Heap_Ptr
 885+ ECD9             >
 885+ ECD9             >mirror_Ptr      defl    $
 885+ ECD9             >
 885+ ECD9 88 80       >                dw      Dict_Ptr + 2        // xt
 885+ ECDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 885+ ECDB             >
 885+ ECDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 885+ ECDB             >
 885+ ECDB             >//              ______________________________________________________________________
 885+ ECDB             >//              Dictionary part
 885+ ECDB             >
 885+ ECDB             >                org     Dict_Ptr
 885+ 8086             >
 885+ 8086 D9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 885+ 8088             >
 885+ 8088             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 8088 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 808B             >
 885+ 808B             >
 885+ 808B             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 808B             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 808B             >
 885+ 808B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 808B 75 80                        dw      UNTIL
 887+ 808D 4C 68                        dw      EXIT
 888+ 808F
 889+ 808F              //  ______________________________________________________________________
 890+ 808F              //
 891+ 808F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 892+ 808F                              Colon_Def WHILE, "WHILE", is_immediate
 892+ 808F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 892+ 808F             >
 892+ 808F             >Dict_Ptr        defl    $
 892+ 808F             >
 892+ 808F             >//              ______________________________________________________________________
 892+ 808F             >//              Heap part
 892+ 808F             >
 892+ 808F             >
 892+ 808F             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ ECDB             >
 892+ ECDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ ECDB             >Latest_Definition defl  Heap_Ptr
 892+ ECDB             >
 892+ ECDB             >                // dummy db directives used to calculate length of namec
 892+ ECDB 57 48 49 4C >                db      "WHILE"
 892+ ECDF 45          >
 892+ ECE0             >len_NFA         defl    $ - temp_NFA
 892+ ECE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ ECDB             >
 892+ ECDB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ ECDC 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 892+ ECE0 45          >
 892+ ECE1             >                org     $-1                 // alter last byte of Name just above to set
 892+ ECE0 C5          >                db      {b $} | END_BIT     // msb as name end
 892+ ECE1             >
 892+ ECE1 D3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ ECE3             >Prev_Ptr        defl    Heap_Ptr
 892+ ECE3             >
 892+ ECE3             >mirror_Ptr      defl    $
 892+ ECE3             >
 892+ ECE3 91 80       >                dw      Dict_Ptr + 2        // xt
 892+ ECE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ ECE5             >
 892+ ECE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ ECE5             >
 892+ ECE5             >//              ______________________________________________________________________
 892+ ECE5             >//              Dictionary part
 892+ ECE5             >
 892+ ECE5             >                org     Dict_Ptr
 892+ 808F             >
 892+ 808F E3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 8091             >
 892+ 8091             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 8091 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 892+ 8094             >
 892+ 8094             >
 892+ 8094             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 8094             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 8094             >
 892+ 8094             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 8094 03 80                        dw      IF
 894+ 8096              //              dw      TWO_PLUS // ( that is 4 )
 895+ 8096 67 69                        dw      TWO_SWAP
 896+ 8098 4C 68                        dw      EXIT
 897+ 809A
 898+ 809A              //  ______________________________________________________________________
 899+ 809A              //
 900+ 809A              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 901+ 809A                              Colon_Def REPEAT, "REPEAT", is_immediate
 901+ 809A             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 901+ 809A             >
 901+ 809A             >Dict_Ptr        defl    $
 901+ 809A             >
 901+ 809A             >//              ______________________________________________________________________
 901+ 809A             >//              Heap part
 901+ 809A             >
 901+ 809A             >
 901+ 809A             >                org     (Heap_Ptr & $1FFF) + $E000
 901+ ECE5             >
 901+ ECE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 901+ ECE5             >Latest_Definition defl  Heap_Ptr
 901+ ECE5             >
 901+ ECE5             >                // dummy db directives used to calculate length of namec
 901+ ECE5 52 45 50 45 >                db      "REPEAT"
 901+ ECE9 41 54       >
 901+ ECEB             >len_NFA         defl    $ - temp_NFA
 901+ ECEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 901+ ECE5             >
 901+ ECE5 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 901+ ECE6 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 901+ ECEA 41 54       >
 901+ ECEC             >                org     $-1                 // alter last byte of Name just above to set
 901+ ECEB D4          >                db      {b $} | END_BIT     // msb as name end
 901+ ECEC             >
 901+ ECEC DB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 901+ ECEE             >Prev_Ptr        defl    Heap_Ptr
 901+ ECEE             >
 901+ ECEE             >mirror_Ptr      defl    $
 901+ ECEE             >
 901+ ECEE 9C 80       >                dw      Dict_Ptr + 2        // xt
 901+ ECF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 901+ ECF0             >
 901+ ECF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 901+ ECF0             >
 901+ ECF0             >//              ______________________________________________________________________
 901+ ECF0             >//              Dictionary part
 901+ ECF0             >
 901+ ECF0             >                org     Dict_Ptr
 901+ 809A             >
 901+ 809A EE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 901+ 809C             >
 901+ 809C             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 901+ 809C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 901+ 809F             >
 901+ 809F             >
 901+ 809F             >                endif           ; ok        // for other definitions it "points" the correct handler
 901+ 809F             >                // Use of "; ok" to suppress "warning[fwdref]"
 901+ 809F             >
 901+ 809F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 902+ 809F 62 80                        dw      AGAIN
 903+ 80A1              //              dw      TWO_MINUS
 904+ 80A1 16 80                        dw      THEN
 905+ 80A3 4C 68                        dw      EXIT
 906+ 80A5
 907+ 80A5              //  ______________________________________________________________________
 908+ 80A5              //
 909+ 80A5              // ?do-
 910+ 80A5              // special version of "BACK" used by ?DO and LOOP
 911+ 80A5                              Colon_Def C_DO_BACK, "?DO-", is_normal
 911+ 80A5             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 911+ 80A5             >
 911+ 80A5             >Dict_Ptr        defl    $
 911+ 80A5             >
 911+ 80A5             >//              ______________________________________________________________________
 911+ 80A5             >//              Heap part
 911+ 80A5             >
 911+ 80A5             >
 911+ 80A5             >                org     (Heap_Ptr & $1FFF) + $E000
 911+ ECF0             >
 911+ ECF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ ECF0             >Latest_Definition defl  Heap_Ptr
 911+ ECF0             >
 911+ ECF0             >                // dummy db directives used to calculate length of namec
 911+ ECF0 3F 44 4F 2D >                db      "?DO-"
 911+ ECF4             >len_NFA         defl    $ - temp_NFA
 911+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ ECF0             >
 911+ ECF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ ECF1 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 911+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
 911+ ECF4 AD          >                db      {b $} | END_BIT     // msb as name end
 911+ ECF5             >
 911+ ECF5 E5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 911+ ECF7             >Prev_Ptr        defl    Heap_Ptr
 911+ ECF7             >
 911+ ECF7             >mirror_Ptr      defl    $
 911+ ECF7             >
 911+ ECF7 A7 80       >                dw      Dict_Ptr + 2        // xt
 911+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 911+ ECF9             >
 911+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 911+ ECF9             >
 911+ ECF9             >//              ______________________________________________________________________
 911+ ECF9             >//              Dictionary part
 911+ ECF9             >
 911+ ECF9             >                org     Dict_Ptr
 911+ 80A5             >
 911+ 80A5 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 911+ 80A7             >
 911+ 80A7             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 80A7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 80AA             >
 911+ 80AA             >
 911+ 80AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 80AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 80AA             >
 911+ 80AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 80AA F6 7F                        dw      BACK
 913+ 80AC              CDoBack_Begin:
 914+ 80AC 33 68 71 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 914+ 80B0 96 69 F2 6B
 915+ 80B4 F5 63                        dw      ZBRANCH
 916+ 80B6 0A 00                        dw      CDoBack_While - $
 917+ 80B8 C6 68 16 80                  dw          TWO_PLUS, THEN
 918+ 80BC E8 63                        dw      BRANCH
 919+ 80BE EE FF                        dw      CDoBack_Begin - $
 920+ 80C0              CDoBack_While:
 921+ 80C0 37 6E 71 6B                  dw      QCSP, CSP, STORE
 921+ 80C4 A0 69
 922+ 80C6 4C 68                        dw      EXIT
 923+ 80C8
 924+ 80C8              //  ______________________________________________________________________
 925+ 80C8              //
 926+ 80C8              // do
 927+ 80C8              // DO  ... LOOP
 928+ 80C8              // DO  ... n +LOOP
 929+ 80C8              // ?DO ... LOOP
 930+ 80C8              // ?DO ... n +LOOP
 931+ 80C8                              Colon_Def DO, "DO", is_immediate
 931+ 80C8             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 931+ 80C8             >
 931+ 80C8             >Dict_Ptr        defl    $
 931+ 80C8             >
 931+ 80C8             >//              ______________________________________________________________________
 931+ 80C8             >//              Heap part
 931+ 80C8             >
 931+ 80C8             >
 931+ 80C8             >                org     (Heap_Ptr & $1FFF) + $E000
 931+ ECF9             >
 931+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ ECF9             >Latest_Definition defl  Heap_Ptr
 931+ ECF9             >
 931+ ECF9             >                // dummy db directives used to calculate length of namec
 931+ ECF9 44 4F       >                db      "DO"
 931+ ECFB             >len_NFA         defl    $ - temp_NFA
 931+ ECFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ ECF9             >
 931+ ECF9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ ECFA 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 931+ ECFC             >                org     $-1                 // alter last byte of Name just above to set
 931+ ECFB CF          >                db      {b $} | END_BIT     // msb as name end
 931+ ECFC             >
 931+ ECFC F0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 931+ ECFE             >Prev_Ptr        defl    Heap_Ptr
 931+ ECFE             >
 931+ ECFE             >mirror_Ptr      defl    $
 931+ ECFE             >
 931+ ECFE CA 80       >                dw      Dict_Ptr + 2        // xt
 931+ ED00             >Heap_Ptr        defl    $ - $E000           // save current HP
 931+ ED00             >
 931+ ED00             >Current_HP      defl  $ - $E000             // used to set HP once!
 931+ ED00             >
 931+ ED00             >//              ______________________________________________________________________
 931+ ED00             >//              Dictionary part
 931+ ED00             >
 931+ ED00             >                org     Dict_Ptr
 931+ 80C8             >
 931+ 80C8 FE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 931+ 80CA             >
 931+ 80CA             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 80CA CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 80CD             >
 931+ 80CD             >
 931+ 80CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 80CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 80CD             >
 931+ 80CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 80CD 5F 6E 34 64                  dw      COMPILE, C_DO
 933+ 80D1 71 6B 96 69                  dw      CSP, FETCH, STORE_CSP
 933+ 80D5 E2 6D
 934+ 80D7 B3 6B A3 6A                  dw      HERE, THREE
 935+ 80DB 4C 68                        dw      EXIT
 936+ 80DD
 937+ 80DD              //  ______________________________________________________________________
 938+ 80DD              //
 939+ 80DD              // loop
 940+ 80DD                              Colon_Def LOOP, "LOOP", is_immediate
 940+ 80DD             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 940+ 80DD             >
 940+ 80DD             >Dict_Ptr        defl    $
 940+ 80DD             >
 940+ 80DD             >//              ______________________________________________________________________
 940+ 80DD             >//              Heap part
 940+ 80DD             >
 940+ 80DD             >
 940+ 80DD             >                org     (Heap_Ptr & $1FFF) + $E000
 940+ ED00             >
 940+ ED00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ ED00             >Latest_Definition defl  Heap_Ptr
 940+ ED00             >
 940+ ED00             >                // dummy db directives used to calculate length of namec
 940+ ED00 4C 4F 4F 50 >                db      "LOOP"
 940+ ED04             >len_NFA         defl    $ - temp_NFA
 940+ ED04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ ED00             >
 940+ ED00 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ ED01 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 940+ ED05             >                org     $-1                 // alter last byte of Name just above to set
 940+ ED04 D0          >                db      {b $} | END_BIT     // msb as name end
 940+ ED05             >
 940+ ED05 F9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 940+ ED07             >Prev_Ptr        defl    Heap_Ptr
 940+ ED07             >
 940+ ED07             >mirror_Ptr      defl    $
 940+ ED07             >
 940+ ED07 DF 80       >                dw      Dict_Ptr + 2        // xt
 940+ ED09             >Heap_Ptr        defl    $ - $E000           // save current HP
 940+ ED09             >
 940+ ED09             >Current_HP      defl  $ - $E000             // used to set HP once!
 940+ ED09             >
 940+ ED09             >//              ______________________________________________________________________
 940+ ED09             >//              Dictionary part
 940+ ED09             >
 940+ ED09             >                org     Dict_Ptr
 940+ 80DD             >
 940+ 80DD 07 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 940+ 80DF             >
 940+ 80DF             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 80DF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 80E2             >
 940+ 80E2             >
 940+ 80E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 80E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 80E2             >
 940+ 80E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 80E2 A3 6A 28 6E                  dw      THREE, QPAIRS
 942+ 80E6 5F 6E E0 63                  dw      COMPILE, C_LOOP
 943+ 80EA A7 80                        dw      C_DO_BACK
 944+ 80EC 4C 68                        dw      EXIT
 945+ 80EE
 946+ 80EE              //  ______________________________________________________________________
 947+ 80EE              //
 948+ 80EE              // +loop
 949+ 80EE                              Colon_Def PLOOP, "+LOOP", is_immediate
 949+ 80EE             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 949+ 80EE             >
 949+ 80EE             >Dict_Ptr        defl    $
 949+ 80EE             >
 949+ 80EE             >//              ______________________________________________________________________
 949+ 80EE             >//              Heap part
 949+ 80EE             >
 949+ 80EE             >
 949+ 80EE             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ ED09             >
 949+ ED09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ ED09             >Latest_Definition defl  Heap_Ptr
 949+ ED09             >
 949+ ED09             >                // dummy db directives used to calculate length of namec
 949+ ED09 2B 4C 4F 4F >                db      "+LOOP"
 949+ ED0D 50          >
 949+ ED0E             >len_NFA         defl    $ - temp_NFA
 949+ ED0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ ED09             >
 949+ ED09 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ ED0A 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 949+ ED0E 50          >
 949+ ED0F             >                org     $-1                 // alter last byte of Name just above to set
 949+ ED0E D0          >                db      {b $} | END_BIT     // msb as name end
 949+ ED0F             >
 949+ ED0F 00 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ ED11             >Prev_Ptr        defl    Heap_Ptr
 949+ ED11             >
 949+ ED11             >mirror_Ptr      defl    $
 949+ ED11             >
 949+ ED11 F0 80       >                dw      Dict_Ptr + 2        // xt
 949+ ED13             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ ED13             >
 949+ ED13             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ ED13             >
 949+ ED13             >//              ______________________________________________________________________
 949+ ED13             >//              Dictionary part
 949+ ED13             >
 949+ ED13             >                org     Dict_Ptr
 949+ 80EE             >
 949+ 80EE 11 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 80F0             >
 949+ 80F0             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 80F0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 80F3             >
 949+ 80F3             >
 949+ 80F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 80F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 80F3             >
 949+ 80F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 80F3 A3 6A 28 6E                  dw      THREE, QPAIRS
 951+ 80F7 5F 6E B1 63                  dw      COMPILE, C_PLOOP
 952+ 80FB A7 80                        dw      C_DO_BACK
 953+ 80FD 4C 68                        dw      EXIT
 954+ 80FF
 955+ 80FF              //  ______________________________________________________________________
 956+ 80FF              //
 957+ 80FF              // ?do
 958+ 80FF                              Colon_Def QDO, "?DO", is_immediate
 958+ 80FF             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 958+ 80FF             >
 958+ 80FF             >Dict_Ptr        defl    $
 958+ 80FF             >
 958+ 80FF             >//              ______________________________________________________________________
 958+ 80FF             >//              Heap part
 958+ 80FF             >
 958+ 80FF             >
 958+ 80FF             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ED13             >
 958+ ED13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ED13             >Latest_Definition defl  Heap_Ptr
 958+ ED13             >
 958+ ED13             >                // dummy db directives used to calculate length of namec
 958+ ED13 3F 44 4F    >                db      "?DO"
 958+ ED16             >len_NFA         defl    $ - temp_NFA
 958+ ED16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ED13             >
 958+ ED13 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ED14 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 958+ ED17             >                org     $-1                 // alter last byte of Name just above to set
 958+ ED16 CF          >                db      {b $} | END_BIT     // msb as name end
 958+ ED17             >
 958+ ED17 09 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ED19             >Prev_Ptr        defl    Heap_Ptr
 958+ ED19             >
 958+ ED19             >mirror_Ptr      defl    $
 958+ ED19             >
 958+ ED19 01 81       >                dw      Dict_Ptr + 2        // xt
 958+ ED1B             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ED1B             >
 958+ ED1B             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ED1B             >
 958+ ED1B             >//              ______________________________________________________________________
 958+ ED1B             >//              Dictionary part
 958+ ED1B             >
 958+ ED1B             >                org     Dict_Ptr
 958+ 80FF             >
 958+ 80FF 19 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 8101             >
 958+ 8101             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 8101 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 8104             >
 958+ 8104             >
 958+ 8104             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 8104             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 8104             >
 958+ 8104             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 8104 5F 6E 0C 64                  dw      COMPILE, C_Q_DO
 960+ 8108 71 6B 96 69                  dw      CSP, FETCH, STORE_CSP
 960+ 810C E2 6D
 961+ 810E B3 6B 8E 6A                  dw      HERE, ZERO, COMMA, ZERO
 961+ 8112 C9 6B 8E 6A
 962+ 8116 B3 6B A3 6A                  dw      HERE, THREE
 963+ 811A 4C 68                        dw      EXIT
 964+ 811C
 965+ 811C              //  ______________________________________________________________________
 966+ 811C              //
 967+ 811C              // \
 968+ 811C                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 968+ 811C             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 968+ 811C             >
 968+ 811C             >Dict_Ptr        defl    $
 968+ 811C             >
 968+ 811C             >//              ______________________________________________________________________
 968+ 811C             >//              Heap part
 968+ 811C             >
 968+ 811C             >
 968+ 811C             >                org     (Heap_Ptr & $1FFF) + $E000
 968+ ED1B             >
 968+ ED1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ ED1B             >Latest_Definition defl  Heap_Ptr
 968+ ED1B             >
 968+ ED1B             >                // dummy db directives used to calculate length of namec
 968+ ED1B 5C          >                db      "\\"
 968+ ED1C             >len_NFA         defl    $ - temp_NFA
 968+ ED1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ ED1B             >
 968+ ED1B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ ED1C 5C          >                db      "\\"               // name string in 7-bit ascii, but
 968+ ED1D             >                org     $-1                 // alter last byte of Name just above to set
 968+ ED1C DC          >                db      {b $} | END_BIT     // msb as name end
 968+ ED1D             >
 968+ ED1D 13 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 968+ ED1F             >Prev_Ptr        defl    Heap_Ptr
 968+ ED1F             >
 968+ ED1F             >mirror_Ptr      defl    $
 968+ ED1F             >
 968+ ED1F 1E 81       >                dw      Dict_Ptr + 2        // xt
 968+ ED21             >Heap_Ptr        defl    $ - $E000           // save current HP
 968+ ED21             >
 968+ ED21             >Current_HP      defl  $ - $E000             // used to set HP once!
 968+ ED21             >
 968+ ED21             >//              ______________________________________________________________________
 968+ ED21             >//              Dictionary part
 968+ ED21             >
 968+ ED21             >                org     Dict_Ptr
 968+ 811C             >
 968+ 811C 1F 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 968+ 811E             >
 968+ 811E             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 811E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 8121             >
 968+ 8121             >
 968+ 8121             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 8121             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 8121             >
 968+ 8121             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 8121 2F 6B 96 69                  dw      BLK, FETCH
 970+ 8125 F5 63                        dw      ZBRANCH
 971+ 8127 30 00                        dw      Backslash_Else_1 - $
 972+ 8129 2F 6B 96 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 972+ 812D 95 6A 2C 6C
 973+ 8131 F5 63                        dw          ZBRANCH
 974+ 8133 18 00                        dw          Backslash_Else_2 - $
 975+ 8135 35 6B 96 69                  dw              TO_IN, FETCH, CL, MOD, CL
 975+ 8139 B8 6A 3D 77
 975+ 813D B8 6A
 976+ 813F 1E 69 F2 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 976+ 8143 35 6B 7E 69
 977+ 8147 E8 63                        dw          BRANCH
 978+ 8149 0A 00                        dw          Backslash_Endif_2 - $
 979+ 814B              Backslash_Else_2:
 980+ 814B BF 6A D3 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 980+ 814F 35 6B A0 69
 981+ 8153              Backslash_Endif_2:
 982+ 8153 E8 63                        dw      BRANCH
 983+ 8155 10 00                        dw      Backslash_Endif_1 - $
 984+ 8157              Backslash_Else_1:
 985+ 8157 8E 6A F3 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 985+ 815B 96 69 35 6B
 985+ 815F 96 69 9F 68
 985+ 8163 A0 69
 986+ 8165              Backslash_Endif_1:
 987+ 8165 4C 68                        dw      EXIT
 988+ 8167
 989+ 8167              Fence_Word:
 990+ 8167              //  ______________________________________________________________________
 991+ 8167              //
 992+ 8167
 993+ 8167 00           Here_Dictionary db      0
 994+ 8168
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  8168
 126  8168              // now we save the compiled file so we can either run it or debug it
 127  8168                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  8168                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  8168                              SAVENEX CFG  0
 130  8168                              SAVENEX BANK 2, 0
 131  8168                              SAVENEX AUTO
 132  8168                              SAVENEX CLOSE
 133  8168
 134  8168              //              PAGE 7 ;set 7 page to current slot
 135  8168              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  8168              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  8168
 138  8168                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  8168                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  8168
 141  8168                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  8168                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  8168
 144  8168                              // To load on ZX Spectrum Next you have to type
 145  8168                              //      LOAD "ram7.bin" BANK 16
 146  8168                              //      LOAD "forth17d.bin" CODE
 147  8168
 148  8168                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
