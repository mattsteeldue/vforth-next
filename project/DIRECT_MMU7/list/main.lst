# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.62 NextZXOS version
   7  0000              //  build 20230619
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            ORIGIN          equ     $6366 - $80                 // for binary comparison
  68  0000 ~            //ORIGIN          equ     39606 - $80               // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000              ORIGIN          equ     $6366                   // binary and Tape
  74  0000              // ORIGIN          equ     $9A93                // binary and Tape
  75  0000                              endif
  76  0000              //  ______________________________________________________________________
  77  0000
  78  0000                              if (  1 == DEBUGGING )
  79  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  80  0000                              endif
  81  0000              //  ______________________________________________________________________
  82  0000
  83  0000                              DEVICE  ZXSPECTRUMNEXT
  84  0000
  85  0000                              ORG     ORIGIN
  86  6366
  87  6366                              if ( -1 == DEBUGGING )
  88  6366 ~                            ds 128                            // for binary comparison
  89  6366                              endif
  90  6366
  91  6366              //  ______________________________________________________________________
  92  6366              //
  93  6366              //  Naming convention for Label vs Forth correspondance
  94  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  95  6366              //    - Leading "0" is converted into "Z_"
  96  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  97  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  98  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  99  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 100  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 101  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 102  6366              //    - Equal sign "=" is converted in EQUAL
 103  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 104  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 105  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 106  6366              //    - Exclamation mark "!" is converted in STORE
 107  6366              //    - At-Sign "@" is converted in FETCH
 108  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 109  6366
 110  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366              //  ______________________________________________________________________
 103+ 6366              //
 104+ 6366              //  Create a new "low-level" definition
 105+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 106+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 107+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 108+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 109+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 110+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 111+ 6366              //  This macro acts much like the standard Forth definition CREATE
 112+ 6366
 113+ 6366              New_Def         macro   label, namec, runcode, bits
 114+ 6366 ~
 115+ 6366 ~            Dict_Ptr        defl    $
 116+ 6366 ~
 117+ 6366 ~            //              ______________________________________________________________________
 118+ 6366 ~            //              Heap part
 119+ 6366 ~
 120+ 6366 ~
 121+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 122+ 6366 ~
 123+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6366 ~            Latest_Definition defl  Heap_Ptr
 125+ 6366 ~
 126+ 6366 ~                            // dummy db directives used to calculate length of namec
 127+ 6366 ~                            db      namec
 128+ 6366 ~            len_NFA         defl    $ - temp_NFA
 129+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 130+ 6366 ~
 131+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 133+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 134+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 135+ 6366 ~
 136+ 6366 ~                            dw      Prev_Ptr            // Link to previous definition Name
 137+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 138+ 6366 ~
 139+ 6366 ~            mirror_Ptr      defl    $
 140+ 6366 ~
 141+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 142+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 143+ 6366 ~
 144+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 145+ 6366 ~
 146+ 6366 ~            //              ______________________________________________________________________
 147+ 6366 ~            //              Dictionary part
 148+ 6366 ~
 149+ 6366 ~                            org     Dict_Ptr
 150+ 6366 ~
 151+ 6366 ~                            dw      mirror_Ptr - $E000
 152+ 6366 ~
 153+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 155+ 6366 ~
 156+ 6366 ~
 157+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6366 ~
 160+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6366                              endm
 162+ 6366
 163+ 6366              //  ______________________________________________________________________
 164+ 6366              //
 165+ 6366              // Create a "constant"
 166+ 6366              // The constant value is compiled in first PFA cell
 167+ 6366              Constant_Def    macro   label, namec, constant_value
 168+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 169+ 6366 ~                            dw      constant_value
 170+ 6366                              endm
 171+ 6366
 172+ 6366              //  ______________________________________________________________________
 173+ 6366              //
 174+ 6366              // Create a "variable"
 175+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 176+ 6366              // this allow creation of "variables" which content is  of any length
 177+ 6366              Variable_Def    macro   label, namec, initial_value
 178+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 179+ 6366 ~                            dw      initial_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "user"
 185+ 6366              // It uses a single byte as offset to calculate the address of the variable
 186+ 6366              User_Def        macro   label, namec, offset_value
 187+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 188+ 6366 ~                            db      offset_value
 189+ 6366                              endm
 190+ 6366
 191+ 6366              //  ______________________________________________________________________
 192+ 6366              //
 193+ 6366              // Create a "colon-definition"
 194+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 195+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 196+ 6366              Colon_Def       macro   label, namec, bits
 197+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 198+ 6366                              endm
 199+ 6366
 200+ 6366              //  ______________________________________________________________________
 201+ 6366              //
 202+ 6366
 203+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 204+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 205+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 206+ 6366              USER_system:    equ     $D188               // User variables zone.
 207+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 208+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 209+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 111  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 B7 75                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 B7 75                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 7E 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 52 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 52 81        DP_origin       dw      Fence_Word
  38+ 6386 E8 74        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 84 0C        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A
  63+ 639A              //  ______________________________________________________________________
  64+ 639A
  65+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  66+ 639A              // instead of their equivalent long sequences.
  67+ 639A
  68+ 639A              //  ______________________________________________________________________
  69+ 639A
  70+ 639A              // address for "next" - inner interpreter
  71+ 639A              // This address must always be pointed by IX
  72+ 639A              // "next" macro simply does a  jp(ix)  instruction
  73+ 639A
  74+ 639A              // Psh2_Ptr:       push    de
  75+ 639A              // Psh1_Ptr:       push    hl
  76+ 639A
  77+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  78+ 639A
  79+ 639A                              if ( 1 == DEBUGGING )
  80+ 639A ~                            ld      hl, Next_Breakpoint_1
  81+ 639A ~                            and     a
  82+ 639A ~                            sbc     hl, bc
  83+ 639A ~                            jr      nz, Next_Continue
  84+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  85+ 639A                              endif
  86+ 639A
  87+ 639A              Next_Continue:
  88+ 639A 0A                           ld      a, (bc)
  89+ 639B 03                           inc     bc
  90+ 639C 6F                           ld      l, a
  91+ 639D 0A                           ld      a, (bc)
  92+ 639E 03                           inc     bc
  93+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  94+ 63A0
  95+ 63A0              // Execute xt i.e. CFA held in HL
  96+ 63A0              Exec_Ptr:
  97+ 63A0
  98+ 63A0
  99+ 63A0
 100+ 63A0
 101+ 63A0 E9                           jp      (hl)                // and jump to it
 102+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 103+ 63A1
 104+ 63A1              //  ______________________________________________________________________
 105+ 63A1              //
 106+ 63A1              // lit          -- x
 107+ 63A1              // puts on top of stack the value of the following word.
 108+ 63A1              // it is compiled in colon definition before a literal number
 109+ 63A1
 110+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 110+ 63A1             >
 110+ 63A1             >Dict_Ptr        defl    $
 110+ 63A1             >
 110+ 63A1             >//              ______________________________________________________________________
 110+ 63A1             >//              Heap part
 110+ 63A1             >
 110+ 63A1             >
 110+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 110+ E002             >
 110+ E002             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ E002             >Latest_Definition defl  Heap_Ptr
 110+ E002             >
 110+ E002             >                // dummy db directives used to calculate length of namec
 110+ E002 4C 49 54    >                db      "LIT"
 110+ E005             >len_NFA         defl    $ - temp_NFA
 110+ E005             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ E002             >
 110+ E002 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ E003 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 110+ E006             >                org     $-1                 // alter last byte of Name just above to set
 110+ E005 D4          >                db      {b $} | END_BIT     // msb as name end
 110+ E006             >
 110+ E006 00 00       >                dw      Prev_Ptr            // Link to previous definition Name
 110+ E008             >Prev_Ptr        defl    Heap_Ptr
 110+ E008             >
 110+ E008             >mirror_Ptr      defl    $
 110+ E008             >
 110+ E008 A3 63       >                dw      Dict_Ptr + 2        // xt
 110+ E00A             >Heap_Ptr        defl    $ - $E000           // save current HP
 110+ E00A             >
 110+ E00A             >Current_HP      defl  $ - $E000             // used to set HP once!
 110+ E00A             >
 110+ E00A             >//              ______________________________________________________________________
 110+ E00A             >//              Dictionary part
 110+ E00A             >
 110+ E00A             >                org     Dict_Ptr
 110+ 63A1             >
 110+ 63A1 08 00       >                dw      mirror_Ptr - $E000
 110+ 63A3             >
 110+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 110+ 63A3 ~           >
 110+ 63A3 ~           >
 110+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 63A3             >
 110+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 63A3
 112+ 63A3 0A                           ld      a, (bc)
 113+ 63A4 03                           inc     bc
 114+ 63A5 6F                           ld      l, a
 115+ 63A6 0A                           ld      a, (bc)
 116+ 63A7 03                           inc     bc
 117+ 63A8 67                           ld      h, a
 118+ 63A9 E5                           push    hl
 119+ 63AA                              next
 119+ 63AA DD E9       >                jp      (ix)
 120+ 63AC
 121+ 63AC              //  ______________________________________________________________________
 122+ 63AC              //
 123+ 63AC              // execute      i*x xt -- j*x
 124+ 63AC              // execution token. usually xt is given by CFA
 125+ 63AC
 126+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 126+ 63AC             >
 126+ 63AC             >Dict_Ptr        defl    $
 126+ 63AC             >
 126+ 63AC             >//              ______________________________________________________________________
 126+ 63AC             >//              Heap part
 126+ 63AC             >
 126+ 63AC             >
 126+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E00A             >
 126+ E00A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E00A             >Latest_Definition defl  Heap_Ptr
 126+ E00A             >
 126+ E00A             >                // dummy db directives used to calculate length of namec
 126+ E00A 45 58 45 43 >                db      "EXECUTE"
 126+ E00E 55 54 45    >
 126+ E011             >len_NFA         defl    $ - temp_NFA
 126+ E011             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E00A             >
 126+ E00A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E00B 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 126+ E00F 55 54 45    >
 126+ E012             >                org     $-1                 // alter last byte of Name just above to set
 126+ E011 C5          >                db      {b $} | END_BIT     // msb as name end
 126+ E012             >
 126+ E012 02 00       >                dw      Prev_Ptr            // Link to previous definition Name
 126+ E014             >Prev_Ptr        defl    Heap_Ptr
 126+ E014             >
 126+ E014             >mirror_Ptr      defl    $
 126+ E014             >
 126+ E014 AE 63       >                dw      Dict_Ptr + 2        // xt
 126+ E016             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E016             >
 126+ E016             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E016             >
 126+ E016             >//              ______________________________________________________________________
 126+ E016             >//              Dictionary part
 126+ E016             >
 126+ E016             >                org     Dict_Ptr
 126+ 63AC             >
 126+ 63AC 14 00       >                dw      mirror_Ptr - $E000
 126+ 63AE             >
 126+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 126+ 63AE ~           >
 126+ 63AE ~           >
 126+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 63AE             >
 126+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 63AE C9                           ret
 128+ 63AF
 129+ 63AF              //  ______________________________________________________________________
 130+ 63AF              //
 131+ 63AF              // brk
 132+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 133+ 63AF              //              next
 134+ 63AF
 135+ 63AF
 136+ 63AF
 137+ 63AF              //  ______________________________________________________________________
 138+ 63AF              //
 139+ 63AF              // (+loop)      n --
 140+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 141+ 63AF              // keep track of index and limit, they are accessed via I and I'
 142+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 143+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 144+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 145+ 63AF              // parameters and continue execution immediately following the loop.
 146+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 146+ 63AF             >
 146+ 63AF             >Dict_Ptr        defl    $
 146+ 63AF             >
 146+ 63AF             >//              ______________________________________________________________________
 146+ 63AF             >//              Heap part
 146+ 63AF             >
 146+ 63AF             >
 146+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 146+ E016             >
 146+ E016             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ E016             >Latest_Definition defl  Heap_Ptr
 146+ E016             >
 146+ E016             >                // dummy db directives used to calculate length of namec
 146+ E016 28 2B 4C 4F >                db      "(+LOOP)"
 146+ E01A 4F 50 29    >
 146+ E01D             >len_NFA         defl    $ - temp_NFA
 146+ E01D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ E016             >
 146+ E016 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ E017 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 146+ E01B 4F 50 29    >
 146+ E01E             >                org     $-1                 // alter last byte of Name just above to set
 146+ E01D A9          >                db      {b $} | END_BIT     // msb as name end
 146+ E01E             >
 146+ E01E 0A 00       >                dw      Prev_Ptr            // Link to previous definition Name
 146+ E020             >Prev_Ptr        defl    Heap_Ptr
 146+ E020             >
 146+ E020             >mirror_Ptr      defl    $
 146+ E020             >
 146+ E020 B1 63       >                dw      Dict_Ptr + 2        // xt
 146+ E022             >Heap_Ptr        defl    $ - $E000           // save current HP
 146+ E022             >
 146+ E022             >Current_HP      defl  $ - $E000             // used to set HP once!
 146+ E022             >
 146+ E022             >//              ______________________________________________________________________
 146+ E022             >//              Dictionary part
 146+ E022             >
 146+ E022             >                org     Dict_Ptr
 146+ 63AF             >
 146+ 63AF 20 00       >                dw      mirror_Ptr - $E000
 146+ 63B1             >
 146+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 146+ 63B1 ~           >
 146+ 63B1 ~           >
 146+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 63B1             >
 146+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 63B1
 148+ 63B1              Loop_Ptr:
 149+ 63B1 E1                           pop     hl                  // get increment
 150+ 63B2 EB                           ex      de, hl
 151+ 63B3                              // *** ldhlrp
 152+ 63B3 C5                           push    bc                  // Save IP
 153+ 63B4 42                           ld      b, d                // bc is increment
 154+ 63B5 4B                           ld      c, e
 155+ 63B6 E5                           push    hl
 156+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 157+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 158+ 63B9 81                           add     c
 159+ 63BA 77                           ld      (hl), a
 160+ 63BB 23                           inc     hl
 161+ 63BC 56                           ld      d, (hl)
 162+ 63BD 7A                           ld      a, d
 163+ 63BE 88                           adc     b
 164+ 63BF 77                           ld      (hl),a
 165+ 63C0 23                           inc     hl
 166+ 63C1
 167+ 63C1 7B                           ld      a, e
 168+ 63C2 96                           sub     (hl)
 169+ 63C3 5F                           ld      e, a
 170+ 63C4 23                           inc     hl
 171+ 63C5 7A                           ld      a, d
 172+ 63C6 9E                           sbc     (hl)
 173+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 174+ 63C8
 175+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 176+ 63C9 09                           add     hl, bc
 177+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 178+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 179+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 180+ 63CF              Loop_NegativeIncrement:
 181+ 63CF 38 04                        jr      c, Loop_Endif
 182+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 183+ 63D2 C1                               pop     bc                  // Retrieve IP
 184+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 185+ 63D5              Loop_Endif:
 186+ 63D5 C1                           pop     bc                  // discard original RP
 187+ 63D6 EB                           ex      de, hl
 188+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 189+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 190+ 63D8 EB                           ex      de, hl
 191+ 63D9 C1                           pop     bc                  // Retrieve IP
 192+ 63DA 03                           inc     bc                  // skip branch-style offset
 193+ 63DB 03                           inc     bc
 194+ 63DC                              next
 194+ 63DC DD E9       >                jp      (ix)
 195+ 63DE
 196+ 63DE              //  ______________________________________________________________________
 197+ 63DE              //
 198+ 63DE              // (loop)       n --
 199+ 63DE              // same as (LOOP) but index is incremented by 1
 200+ 63DE              // compiled by LOOP.
 201+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 201+ 63DE             >
 201+ 63DE             >Dict_Ptr        defl    $
 201+ 63DE             >
 201+ 63DE             >//              ______________________________________________________________________
 201+ 63DE             >//              Heap part
 201+ 63DE             >
 201+ 63DE             >
 201+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 201+ E022             >
 201+ E022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 201+ E022             >Latest_Definition defl  Heap_Ptr
 201+ E022             >
 201+ E022             >                // dummy db directives used to calculate length of namec
 201+ E022 28 4C 4F 4F >                db      "(LOOP)"
 201+ E026 50 29       >
 201+ E028             >len_NFA         defl    $ - temp_NFA
 201+ E028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 201+ E022             >
 201+ E022 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 201+ E023 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 201+ E027 50 29       >
 201+ E029             >                org     $-1                 // alter last byte of Name just above to set
 201+ E028 A9          >                db      {b $} | END_BIT     // msb as name end
 201+ E029             >
 201+ E029 16 00       >                dw      Prev_Ptr            // Link to previous definition Name
 201+ E02B             >Prev_Ptr        defl    Heap_Ptr
 201+ E02B             >
 201+ E02B             >mirror_Ptr      defl    $
 201+ E02B             >
 201+ E02B E0 63       >                dw      Dict_Ptr + 2        // xt
 201+ E02D             >Heap_Ptr        defl    $ - $E000           // save current HP
 201+ E02D             >
 201+ E02D             >Current_HP      defl  $ - $E000             // used to set HP once!
 201+ E02D             >
 201+ E02D             >//              ______________________________________________________________________
 201+ E02D             >//              Dictionary part
 201+ E02D             >
 201+ E02D             >                org     Dict_Ptr
 201+ 63DE             >
 201+ 63DE 2B 00       >                dw      mirror_Ptr - $E000
 201+ 63E0             >
 201+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 201+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 201+ 63E0 ~           >
 201+ 63E0 ~           >
 201+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 201+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 201+ 63E0             >
 201+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 202+ 63E0 ED 8A 00 01                  push    1
 203+ 63E4 18 CB                        jr      Loop_Ptr
 204+ 63E6
 205+ 63E6              //  ______________________________________________________________________
 206+ 63E6              //
 207+ 63E6              // branch       --
 208+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 209+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 210+ 63E6
 211+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 211+ 63E6             >
 211+ 63E6             >Dict_Ptr        defl    $
 211+ 63E6             >
 211+ 63E6             >//              ______________________________________________________________________
 211+ 63E6             >//              Heap part
 211+ 63E6             >
 211+ 63E6             >
 211+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 211+ E02D             >
 211+ E02D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ E02D             >Latest_Definition defl  Heap_Ptr
 211+ E02D             >
 211+ E02D             >                // dummy db directives used to calculate length of namec
 211+ E02D 42 52 41 4E >                db      "BRANCH"
 211+ E031 43 48       >
 211+ E033             >len_NFA         defl    $ - temp_NFA
 211+ E033             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ E02D             >
 211+ E02D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ E02E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 211+ E032 43 48       >
 211+ E034             >                org     $-1                 // alter last byte of Name just above to set
 211+ E033 C8          >                db      {b $} | END_BIT     // msb as name end
 211+ E034             >
 211+ E034 22 00       >                dw      Prev_Ptr            // Link to previous definition Name
 211+ E036             >Prev_Ptr        defl    Heap_Ptr
 211+ E036             >
 211+ E036             >mirror_Ptr      defl    $
 211+ E036             >
 211+ E036 E8 63       >                dw      Dict_Ptr + 2        // xt
 211+ E038             >Heap_Ptr        defl    $ - $E000           // save current HP
 211+ E038             >
 211+ E038             >Current_HP      defl  $ - $E000             // used to set HP once!
 211+ E038             >
 211+ E038             >//              ______________________________________________________________________
 211+ E038             >//              Dictionary part
 211+ E038             >
 211+ E038             >                org     Dict_Ptr
 211+ 63E6             >
 211+ 63E6 36 00       >                dw      mirror_Ptr - $E000
 211+ 63E8             >
 211+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 211+ 63E8 ~           >
 211+ 63E8 ~           >
 211+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 63E8             >
 211+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 63E8              Branch_Ptr:
 213+ 63E8 0A                           ld      a, (bc)
 214+ 63E9 6F                           ld      l, a
 215+ 63EA 03                           inc     bc
 216+ 63EB 0A                           ld      a, (bc)
 217+ 63EC 67                           ld      h, a
 218+ 63ED 0B                           dec     bc
 219+ 63EE 09                           add     hl, bc
 220+ 63EF 4D                           ld      c, l
 221+ 63F0 44                           ld      b, h
 222+ 63F1                              next
 222+ 63F1 DD E9       >                jp      (ix)
 223+ 63F3
 224+ 63F3
 225+ 63F3              //  ______________________________________________________________________
 226+ 63F3              //
 227+ 63F3              // 0branch      f --
 228+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 229+ 63F3              // compiled by IF, UNTIL and some other immediate words
 230+ 63F3
 231+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 231+ 63F3             >
 231+ 63F3             >Dict_Ptr        defl    $
 231+ 63F3             >
 231+ 63F3             >//              ______________________________________________________________________
 231+ 63F3             >//              Heap part
 231+ 63F3             >
 231+ 63F3             >
 231+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 231+ E038             >
 231+ E038             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 231+ E038             >Latest_Definition defl  Heap_Ptr
 231+ E038             >
 231+ E038             >                // dummy db directives used to calculate length of namec
 231+ E038 30 42 52 41 >                db      "0BRANCH"
 231+ E03C 4E 43 48    >
 231+ E03F             >len_NFA         defl    $ - temp_NFA
 231+ E03F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 231+ E038             >
 231+ E038 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 231+ E039 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 231+ E03D 4E 43 48    >
 231+ E040             >                org     $-1                 // alter last byte of Name just above to set
 231+ E03F C8          >                db      {b $} | END_BIT     // msb as name end
 231+ E040             >
 231+ E040 2D 00       >                dw      Prev_Ptr            // Link to previous definition Name
 231+ E042             >Prev_Ptr        defl    Heap_Ptr
 231+ E042             >
 231+ E042             >mirror_Ptr      defl    $
 231+ E042             >
 231+ E042 F5 63       >                dw      Dict_Ptr + 2        // xt
 231+ E044             >Heap_Ptr        defl    $ - $E000           // save current HP
 231+ E044             >
 231+ E044             >Current_HP      defl  $ - $E000             // used to set HP once!
 231+ E044             >
 231+ E044             >//              ______________________________________________________________________
 231+ E044             >//              Dictionary part
 231+ E044             >
 231+ E044             >                org     Dict_Ptr
 231+ 63F3             >
 231+ 63F3 42 00       >                dw      mirror_Ptr - $E000
 231+ 63F5             >
 231+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 231+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 231+ 63F5 ~           >
 231+ 63F5 ~           >
 231+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 231+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 231+ 63F5             >
 231+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 232+ 63F5              ZBranch_Ptr:
 233+ 63F5 E1                           pop     hl
 234+ 63F6 7D                           ld      a, l
 235+ 63F7 B4                           or      h
 236+ 63F8 28 EE                        jr      z, Branch_Ptr
 237+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 238+ 63FB 03                           inc     bc
 239+ 63FC                              next
 239+ 63FC DD E9       >                jp      (ix)
 240+ 63FE
 241+ 63FE              //  ______________________________________________________________________
 242+ 63FE              //
 243+ 63FE              // (leave)        --
 244+ 63FE              // compiled by LEAVE
 245+ 63FE              // this forces to exit from loop and jump past
 246+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 246+ 63FE             >
 246+ 63FE             >Dict_Ptr        defl    $
 246+ 63FE             >
 246+ 63FE             >//              ______________________________________________________________________
 246+ 63FE             >//              Heap part
 246+ 63FE             >
 246+ 63FE             >
 246+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 246+ E044             >
 246+ E044             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 246+ E044             >Latest_Definition defl  Heap_Ptr
 246+ E044             >
 246+ E044             >                // dummy db directives used to calculate length of namec
 246+ E044 28 4C 45 41 >                db      "(LEAVE)"
 246+ E048 56 45 29    >
 246+ E04B             >len_NFA         defl    $ - temp_NFA
 246+ E04B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 246+ E044             >
 246+ E044 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 246+ E045 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 246+ E049 56 45 29    >
 246+ E04C             >                org     $-1                 // alter last byte of Name just above to set
 246+ E04B A9          >                db      {b $} | END_BIT     // msb as name end
 246+ E04C             >
 246+ E04C 38 00       >                dw      Prev_Ptr            // Link to previous definition Name
 246+ E04E             >Prev_Ptr        defl    Heap_Ptr
 246+ E04E             >
 246+ E04E             >mirror_Ptr      defl    $
 246+ E04E             >
 246+ E04E 00 64       >                dw      Dict_Ptr + 2        // xt
 246+ E050             >Heap_Ptr        defl    $ - $E000           // save current HP
 246+ E050             >
 246+ E050             >Current_HP      defl  $ - $E000             // used to set HP once!
 246+ E050             >
 246+ E050             >//              ______________________________________________________________________
 246+ E050             >//              Dictionary part
 246+ E050             >
 246+ E050             >                org     Dict_Ptr
 246+ 63FE             >
 246+ 63FE 4E 00       >                dw      mirror_Ptr - $E000
 246+ 6400             >
 246+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 246+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 246+ 6400 ~           >
 246+ 6400 ~           >
 246+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 246+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 246+ 6400             >
 246+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 247+ 6400 EB                           ex      de, hl
 248+ 6401                              // *** ldhlrp
 249+ 6401 3E 04                        ld      a, 4
 250+ 6403 ED 31                        add     hl, a
 251+ 6405                              // *** ldrphl
 252+ 6405 EB                           ex      de, hl
 253+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 254+ 6408                              next
 254+ 6408 DD E9       >                jp      (ix)
 255+ 640A
 256+ 640A              //  ______________________________________________________________________
 257+ 640A              //
 258+ 640A              // (?do)        lim ind --
 259+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 260+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 261+ 640A              // used to skip the loop if lim == ind
 262+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 262+ 640A             >
 262+ 640A             >Dict_Ptr        defl    $
 262+ 640A             >
 262+ 640A             >//              ______________________________________________________________________
 262+ 640A             >//              Heap part
 262+ 640A             >
 262+ 640A             >
 262+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 262+ E050             >
 262+ E050             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 262+ E050             >Latest_Definition defl  Heap_Ptr
 262+ E050             >
 262+ E050             >                // dummy db directives used to calculate length of namec
 262+ E050 28 3F 44 4F >                db      "(?DO)"
 262+ E054 29          >
 262+ E055             >len_NFA         defl    $ - temp_NFA
 262+ E055             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 262+ E050             >
 262+ E050 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 262+ E051 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 262+ E055 29          >
 262+ E056             >                org     $-1                 // alter last byte of Name just above to set
 262+ E055 A9          >                db      {b $} | END_BIT     // msb as name end
 262+ E056             >
 262+ E056 44 00       >                dw      Prev_Ptr            // Link to previous definition Name
 262+ E058             >Prev_Ptr        defl    Heap_Ptr
 262+ E058             >
 262+ E058             >mirror_Ptr      defl    $
 262+ E058             >
 262+ E058 0C 64       >                dw      Dict_Ptr + 2        // xt
 262+ E05A             >Heap_Ptr        defl    $ - $E000           // save current HP
 262+ E05A             >
 262+ E05A             >Current_HP      defl  $ - $E000             // used to set HP once!
 262+ E05A             >
 262+ E05A             >//              ______________________________________________________________________
 262+ E05A             >//              Dictionary part
 262+ E05A             >
 262+ E05A             >                org     Dict_Ptr
 262+ 640A             >
 262+ 640A 58 00       >                dw      mirror_Ptr - $E000
 262+ 640C             >
 262+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 262+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 262+ 640C ~           >
 262+ 640C ~           >
 262+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 262+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 262+ 640C             >
 262+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 263+ 640C D9                           exx
 264+ 640D D1                            pop     de                  // de has the index
 265+ 640E E1                            pop     hl                  // hl has the limit
 266+ 640F 44                            ld      b, h
 267+ 6410 4D                            ld      c, l
 268+ 6411 E5                            push    hl                  // put them back to stack for later
 269+ 6412 D5                            push    de
 270+ 6413 A7                            and     a                   // reset carry flag
 271+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 272+ 6416 D9                           exx
 273+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 274+ 6419 E1                               pop     hl
 275+ 641A E1                               pop     hl
 276+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 277+ 641D              Do_Ptr:
 278+ 641D                              // *** ldhlrp                 // prepare RP
 279+ 641D                              // *** ex      de, hl
 280+ 641D 1B                           dec     de
 281+ 641E 1B                           dec     de
 282+ 641F 1B                           dec     de
 283+ 6420 1B                           dec     de
 284+ 6421 D5                           push    de                  // pass it to h'l'
 285+ 6422                              // *** ex      de, hl
 286+ 6422                              // *** ldrphl
 287+ 6422 D9                           exx
 288+ 6423 E1                            pop     hl
 289+ 6424
 290+ 6424                               // store index as top RP
 291+ 6424 D1                            pop     de
 292+ 6425 73                            ld      (hl), e
 293+ 6426 23                            inc     hl
 294+ 6427 72                            ld      (hl), d
 295+ 6428 23                            inc     hl
 296+ 6429                               // stores lim as second from top RP
 297+ 6429 D1                            pop     de
 298+ 642A 73                            ld      (hl), e
 299+ 642B 23                            inc     hl
 300+ 642C 72                            ld      (hl), d
 301+ 642D D9                           exx
 302+ 642E                              // skip branch-style offseet
 303+ 642E 03                           inc     bc
 304+ 642F 03                           inc     bc
 305+ 6430                              next
 305+ 6430 DD E9       >                jp      (ix)
 306+ 6432
 307+ 6432              //  ______________________________________________________________________
 308+ 6432              //
 309+ 6432              // (do)        lim ind --
 310+ 6432              // compiled by DO to make a loop checking for lim == ind first
 311+ 6432              // this is a simpler version of (?DO)
 312+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 312+ 6432             >
 312+ 6432             >Dict_Ptr        defl    $
 312+ 6432             >
 312+ 6432             >//              ______________________________________________________________________
 312+ 6432             >//              Heap part
 312+ 6432             >
 312+ 6432             >
 312+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 312+ E05A             >
 312+ E05A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ E05A             >Latest_Definition defl  Heap_Ptr
 312+ E05A             >
 312+ E05A             >                // dummy db directives used to calculate length of namec
 312+ E05A 28 44 4F 29 >                db      "(DO)"
 312+ E05E             >len_NFA         defl    $ - temp_NFA
 312+ E05E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ E05A             >
 312+ E05A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ E05B 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 312+ E05F             >                org     $-1                 // alter last byte of Name just above to set
 312+ E05E A9          >                db      {b $} | END_BIT     // msb as name end
 312+ E05F             >
 312+ E05F 50 00       >                dw      Prev_Ptr            // Link to previous definition Name
 312+ E061             >Prev_Ptr        defl    Heap_Ptr
 312+ E061             >
 312+ E061             >mirror_Ptr      defl    $
 312+ E061             >
 312+ E061 34 64       >                dw      Dict_Ptr + 2        // xt
 312+ E063             >Heap_Ptr        defl    $ - $E000           // save current HP
 312+ E063             >
 312+ E063             >Current_HP      defl  $ - $E000             // used to set HP once!
 312+ E063             >
 312+ E063             >//              ______________________________________________________________________
 312+ E063             >//              Dictionary part
 312+ E063             >
 312+ E063             >                org     Dict_Ptr
 312+ 6432             >
 312+ 6432 61 00       >                dw      mirror_Ptr - $E000
 312+ 6434             >
 312+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 312+ 6434 ~           >
 312+ 6434 ~           >
 312+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6434             >
 312+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6434 0B                           dec     bc                  // prepare IP beforehand
 314+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 315+ 6436 18 E5                        jr      Do_Ptr
 316+ 6438
 317+ 6438              //  ______________________________________________________________________
 318+ 6438              //
 319+ 6438              // i            -- n
 320+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 321+ 6438              // the current value of the index-loop
 322+ 6438                              New_Def I, "I", is_code, is_normal
 322+ 6438             >
 322+ 6438             >Dict_Ptr        defl    $
 322+ 6438             >
 322+ 6438             >//              ______________________________________________________________________
 322+ 6438             >//              Heap part
 322+ 6438             >
 322+ 6438             >
 322+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 322+ E063             >
 322+ E063             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ E063             >Latest_Definition defl  Heap_Ptr
 322+ E063             >
 322+ E063             >                // dummy db directives used to calculate length of namec
 322+ E063 49          >                db      "I"
 322+ E064             >len_NFA         defl    $ - temp_NFA
 322+ E064             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ E063             >
 322+ E063 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ E064 49          >                db      "I"               // name string in 7-bit ascii, but
 322+ E065             >                org     $-1                 // alter last byte of Name just above to set
 322+ E064 C9          >                db      {b $} | END_BIT     // msb as name end
 322+ E065             >
 322+ E065 5A 00       >                dw      Prev_Ptr            // Link to previous definition Name
 322+ E067             >Prev_Ptr        defl    Heap_Ptr
 322+ E067             >
 322+ E067             >mirror_Ptr      defl    $
 322+ E067             >
 322+ E067 3A 64       >                dw      Dict_Ptr + 2        // xt
 322+ E069             >Heap_Ptr        defl    $ - $E000           // save current HP
 322+ E069             >
 322+ E069             >Current_HP      defl  $ - $E000             // used to set HP once!
 322+ E069             >
 322+ E069             >//              ______________________________________________________________________
 322+ E069             >//              Dictionary part
 322+ E069             >
 322+ E069             >                org     Dict_Ptr
 322+ 6438             >
 322+ 6438 67 00       >                dw      mirror_Ptr - $E000
 322+ 643A             >
 322+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 322+ 643A ~           >
 322+ 643A ~           >
 322+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 643A             >
 322+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 643A              I_Ptr:
 324+ 643A 62                           ld      h, d
 325+ 643B 6B                           ld      l, e
 326+ 643C                              // *** ldhlrp
 327+ 643C              I_Ptr_prime:
 328+ 643C 7E                           ld      a, (hl)
 329+ 643D 23                           inc     hl
 330+ 643E 66                           ld      h, (hl)
 331+ 643F 6F                           ld      l, a
 332+ 6440 E5                           push    hl
 333+ 6441                              next
 333+ 6441 DD E9       >                jp      (ix)
 334+ 6443
 335+ 6443
 336+ 6443              //  ______________________________________________________________________
 337+ 6443              //
 338+ 6443              // i'            -- n
 339+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 340+ 6443              // the limit of the index-loop
 341+ 6443
 342+ 6443                              New_Def II, "I'", is_code, is_normal
 342+ 6443             >
 342+ 6443             >Dict_Ptr        defl    $
 342+ 6443             >
 342+ 6443             >//              ______________________________________________________________________
 342+ 6443             >//              Heap part
 342+ 6443             >
 342+ 6443             >
 342+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 342+ E069             >
 342+ E069             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 342+ E069             >Latest_Definition defl  Heap_Ptr
 342+ E069             >
 342+ E069             >                // dummy db directives used to calculate length of namec
 342+ E069 49 27       >                db      "I'"
 342+ E06B             >len_NFA         defl    $ - temp_NFA
 342+ E06B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 342+ E069             >
 342+ E069 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 342+ E06A 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 342+ E06C             >                org     $-1                 // alter last byte of Name just above to set
 342+ E06B A7          >                db      {b $} | END_BIT     // msb as name end
 342+ E06C             >
 342+ E06C 63 00       >                dw      Prev_Ptr            // Link to previous definition Name
 342+ E06E             >Prev_Ptr        defl    Heap_Ptr
 342+ E06E             >
 342+ E06E             >mirror_Ptr      defl    $
 342+ E06E             >
 342+ E06E 45 64       >                dw      Dict_Ptr + 2        // xt
 342+ E070             >Heap_Ptr        defl    $ - $E000           // save current HP
 342+ E070             >
 342+ E070             >Current_HP      defl  $ - $E000             // used to set HP once!
 342+ E070             >
 342+ E070             >//              ______________________________________________________________________
 342+ E070             >//              Dictionary part
 342+ E070             >
 342+ E070             >                org     Dict_Ptr
 342+ 6443             >
 342+ 6443 6E 00       >                dw      mirror_Ptr - $E000
 342+ 6445             >
 342+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 342+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 342+ 6445 ~           >
 342+ 6445 ~           >
 342+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 342+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 342+ 6445             >
 342+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 343+ 6445 62                           ld      h, d
 344+ 6446 6B                           ld      l, e
 345+ 6447                              // *** ldhlrp
 346+ 6447 23                           inc     hl
 347+ 6448 23                           inc     hl
 348+ 6449 18 F1                        jr      I_Ptr_prime
 349+ 644B
 350+ 644B
 351+ 644B              //  ______________________________________________________________________
 352+ 644B              //
 353+ 644B              // digit        c n -- u tf  |  ff
 354+ 644B              // convert a character c using base n
 355+ 644B              // returns a unsigned number and a true flag
 356+ 644B              // or just a false flag if the conversion fails
 357+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 357+ 644B             >
 357+ 644B             >Dict_Ptr        defl    $
 357+ 644B             >
 357+ 644B             >//              ______________________________________________________________________
 357+ 644B             >//              Heap part
 357+ 644B             >
 357+ 644B             >
 357+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E070             >
 357+ E070             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E070             >Latest_Definition defl  Heap_Ptr
 357+ E070             >
 357+ E070             >                // dummy db directives used to calculate length of namec
 357+ E070 44 49 47 49 >                db      "DIGIT"
 357+ E074 54          >
 357+ E075             >len_NFA         defl    $ - temp_NFA
 357+ E075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E070             >
 357+ E070 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E071 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 357+ E075 54          >
 357+ E076             >                org     $-1                 // alter last byte of Name just above to set
 357+ E075 D4          >                db      {b $} | END_BIT     // msb as name end
 357+ E076             >
 357+ E076 69 00       >                dw      Prev_Ptr            // Link to previous definition Name
 357+ E078             >Prev_Ptr        defl    Heap_Ptr
 357+ E078             >
 357+ E078             >mirror_Ptr      defl    $
 357+ E078             >
 357+ E078 4D 64       >                dw      Dict_Ptr + 2        // xt
 357+ E07A             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E07A             >
 357+ E07A             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E07A             >
 357+ E07A             >//              ______________________________________________________________________
 357+ E07A             >//              Dictionary part
 357+ E07A             >
 357+ E07A             >                org     Dict_Ptr
 357+ 644B             >
 357+ 644B 78 00       >                dw      mirror_Ptr - $E000
 357+ 644D             >
 357+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 644D ~           >
 357+ 644D ~           >
 357+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 644D             >
 357+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 644D D9                           exx
 359+ 644E E1                           pop     hl                  // l has the base
 360+ 644F D1                           pop     de                  // e has the digit
 361+ 6450 7B                           ld      a, e
 362+ 6451 FE 60                        cp      $60                 // check if lowercase
 363+ 6453 38 02                        jr      c, Digit_Uppercase
 364+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 365+ 6457              Digit_Uppercase:
 366+ 6457 D6 30                        sub     $30
 367+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 368+ 645B FE 0A                            cp      $0A
 369+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 370+ 645F D6 07                                sub     7                   // try hex and subtract 7
 371+ 6461 FE 0A                                cp      $0A
 372+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 373+ 6465
 374+ 6465              Digit_Decimal:
 375+ 6465                              // compare digit
 376+ 6465 BD                           cp      l                   // compare with base
 377+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 378+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 379+ 6469 21 01 00                         ld      hl, 1
 380+ 646C D5                               push    de
 381+ 646D E5                               push    hl
 382+ 646E D9                               exx
 383+ 646F                                  next
 383+ 646F DD E9       >                jp      (ix)
 384+ 6471              Digit_Fail:
 385+ 6471 21 00 00                     ld      hl, 0
 386+ 6474 E5                           push    hl
 387+ 6475 D9                           exx
 388+ 6476                              next
 388+ 6476 DD E9       >                jp      (ix)
 389+ 6478
 390+ 6478              //  ______________________________________________________________________
 391+ 6478              //
 392+ 6478              //  parametric uppercase routine
 393+ 6478              //  depending on the following op-code the routine can be by-passed
 394+ 6478              //  changing the behaviour of some callers.
 395+ 6478              //  If it is "ret" then the system is Case-Sensitive
 396+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 397+ 6478              //  Only A register is touched.
 398+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 399+ 6479              Case_Upper:
 400+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 401+ 647B D8                           ret     c                   // no change if A < "a"
 402+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 403+ 647E D0                           ret     nc                  // no change if A > "z"
 404+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 405+ 6481 C9                           ret
 406+ 6482
 407+ 6482              //  ______________________________________________________________________
 408+ 6482              //
 409+ 6482              //  caseon      --
 410+ 6482              // set system case-sensitivity on
 411+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 412+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 412+ 6482             >
 412+ 6482             >Dict_Ptr        defl    $
 412+ 6482             >
 412+ 6482             >//              ______________________________________________________________________
 412+ 6482             >//              Heap part
 412+ 6482             >
 412+ 6482             >
 412+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 412+ E07A             >
 412+ E07A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ E07A             >Latest_Definition defl  Heap_Ptr
 412+ E07A             >
 412+ E07A             >                // dummy db directives used to calculate length of namec
 412+ E07A 43 41 53 45 >                db      "CASEON"
 412+ E07E 4F 4E       >
 412+ E080             >len_NFA         defl    $ - temp_NFA
 412+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ E07A             >
 412+ E07A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ E07B 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 412+ E07F 4F 4E       >
 412+ E081             >                org     $-1                 // alter last byte of Name just above to set
 412+ E080 CE          >                db      {b $} | END_BIT     // msb as name end
 412+ E081             >
 412+ E081 70 00       >                dw      Prev_Ptr            // Link to previous definition Name
 412+ E083             >Prev_Ptr        defl    Heap_Ptr
 412+ E083             >
 412+ E083             >mirror_Ptr      defl    $
 412+ E083             >
 412+ E083 84 64       >                dw      Dict_Ptr + 2        // xt
 412+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 412+ E085             >
 412+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 412+ E085             >
 412+ E085             >//              ______________________________________________________________________
 412+ E085             >//              Dictionary part
 412+ E085             >
 412+ E085             >                org     Dict_Ptr
 412+ 6482             >
 412+ 6482 83 00       >                dw      mirror_Ptr - $E000
 412+ 6484             >
 412+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 412+ 6484 ~           >
 412+ 6484 ~           >
 412+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 6484             >
 412+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 6484 3E C9                        ld      a, $C9              // "ret"
 414+ 6486 32 78 64                     ld      (Case_Sensitive), a
 415+ 6489                              next
 415+ 6489 DD E9       >                jp      (ix)
 416+ 648B
 417+ 648B              //  ______________________________________________________________________
 418+ 648B              //
 419+ 648B              //  caseoff     --
 420+ 648B              // set system case-sensitivity on
 421+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 422+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 422+ 648B             >
 422+ 648B             >Dict_Ptr        defl    $
 422+ 648B             >
 422+ 648B             >//              ______________________________________________________________________
 422+ 648B             >//              Heap part
 422+ 648B             >
 422+ 648B             >
 422+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ E085             >
 422+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ E085             >Latest_Definition defl  Heap_Ptr
 422+ E085             >
 422+ E085             >                // dummy db directives used to calculate length of namec
 422+ E085 43 41 53 45 >                db      "CASEOFF"
 422+ E089 4F 46 46    >
 422+ E08C             >len_NFA         defl    $ - temp_NFA
 422+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ E085             >
 422+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ E086 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 422+ E08A 4F 46 46    >
 422+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 422+ E08C C6          >                db      {b $} | END_BIT     // msb as name end
 422+ E08D             >
 422+ E08D 7A 00       >                dw      Prev_Ptr            // Link to previous definition Name
 422+ E08F             >Prev_Ptr        defl    Heap_Ptr
 422+ E08F             >
 422+ E08F             >mirror_Ptr      defl    $
 422+ E08F             >
 422+ E08F 8D 64       >                dw      Dict_Ptr + 2        // xt
 422+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ E091             >
 422+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ E091             >
 422+ E091             >//              ______________________________________________________________________
 422+ E091             >//              Dictionary part
 422+ E091             >
 422+ E091             >                org     Dict_Ptr
 422+ 648B             >
 422+ 648B 8F 00       >                dw      mirror_Ptr - $E000
 422+ 648D             >
 422+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 422+ 648D ~           >
 422+ 648D ~           >
 422+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 648D             >
 422+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 648D 3E 00                        ld      a, $00              // "nop"
 424+ 648F 32 78 64                     ld      (Case_Sensitive), a
 425+ 6492                              next
 425+ 6492 DD E9       >                jp      (ix)
 426+ 6494
 427+ 6494              //  ______________________________________________________________________
 428+ 6494              //
 429+ 6494              //  upper       c1 -- c1 | c2
 430+ 6494              // character on top of stack is forced to Uppercase.
 431+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 431+ 6494             >
 431+ 6494             >Dict_Ptr        defl    $
 431+ 6494             >
 431+ 6494             >//              ______________________________________________________________________
 431+ 6494             >//              Heap part
 431+ 6494             >
 431+ 6494             >
 431+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ E091             >
 431+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ E091             >Latest_Definition defl  Heap_Ptr
 431+ E091             >
 431+ E091             >                // dummy db directives used to calculate length of namec
 431+ E091 55 50 50 45 >                db      "UPPER"
 431+ E095 52          >
 431+ E096             >len_NFA         defl    $ - temp_NFA
 431+ E096             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ E091             >
 431+ E091 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ E092 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 431+ E096 52          >
 431+ E097             >                org     $-1                 // alter last byte of Name just above to set
 431+ E096 D2          >                db      {b $} | END_BIT     // msb as name end
 431+ E097             >
 431+ E097 85 00       >                dw      Prev_Ptr            // Link to previous definition Name
 431+ E099             >Prev_Ptr        defl    Heap_Ptr
 431+ E099             >
 431+ E099             >mirror_Ptr      defl    $
 431+ E099             >
 431+ E099 96 64       >                dw      Dict_Ptr + 2        // xt
 431+ E09B             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ E09B             >
 431+ E09B             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ E09B             >
 431+ E09B             >//              ______________________________________________________________________
 431+ E09B             >//              Dictionary part
 431+ E09B             >
 431+ E09B             >                org     Dict_Ptr
 431+ 6494             >
 431+ 6494 99 00       >                dw      mirror_Ptr - $E000
 431+ 6496             >
 431+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 431+ 6496 ~           >
 431+ 6496 ~           >
 431+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 6496             >
 431+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 6496 E1                           pop     hl
 433+ 6497 7D                           ld      a, l
 434+ 6498 CD 79 64                     call    Case_Upper
 435+ 649B 6F                           ld      l, a
 436+ 649C
 437+ 649C                              psh1
 437+ 649C E5          >                push    hl
 437+ 649D DD E9       >                jp      (ix)
 438+ 649F
 439+ 649F              //  ______________________________________________________________________
 440+ 649F
 441+ 649F              MMU7_read:
 442+ 649F 01 3B 24                     ld      bc, $243B
 443+ 64A2 3E 57                        ld      a, 87
 444+ 64A4 ED 79                        out     (c), a
 445+ 64A6 04                           inc     b
 446+ 64A7 ED 78                        in      a, (c)
 447+ 64A9 C9                           ret
 448+ 64AA
 449+ 64AA              //  ______________________________________________________________________
 450+ 64AA
 451+ 64AA              TO_FAR_rout:
 452+ 64AA 7C                           ld      a, h
 453+ 64AB 08                           ex      af, af
 454+ 64AC 7C                           ld      a, h
 455+ 64AD F6 E0                        or      $E0
 456+ 64AF 67                           ld      h, a
 457+ 64B0 08                           ex      af, af
 458+ 64B1 07                           rlca
 459+ 64B2 07                           rlca
 460+ 64B3 07                           rlca
 461+ 64B4 E6 07                        and     $07
 462+ 64B6 C6 20                        add     $20
 463+ 64B8 C9                           ret
 464+ 64B9
 465+ 64B9
 466+ 64B9              //  ______________________________________________________________________
 467+ 64B9              //
 468+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 469+ 64B9              // vocabulary search,
 470+ 64B9              // - voc is starting word's NFA
 471+ 64B9              // - addr is the string to be searched for
 472+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 473+ 64B9              // (which contains length and some flags) and a true flag.
 474+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 475+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 475+ 64B9             >
 475+ 64B9             >Dict_Ptr        defl    $
 475+ 64B9             >
 475+ 64B9             >//              ______________________________________________________________________
 475+ 64B9             >//              Heap part
 475+ 64B9             >
 475+ 64B9             >
 475+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 475+ E09B             >
 475+ E09B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ E09B             >Latest_Definition defl  Heap_Ptr
 475+ E09B             >
 475+ E09B             >                // dummy db directives used to calculate length of namec
 475+ E09B 28 46 49 4E >                db      "(FIND)"
 475+ E09F 44 29       >
 475+ E0A1             >len_NFA         defl    $ - temp_NFA
 475+ E0A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ E09B             >
 475+ E09B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ E09C 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 475+ E0A0 44 29       >
 475+ E0A2             >                org     $-1                 // alter last byte of Name just above to set
 475+ E0A1 A9          >                db      {b $} | END_BIT     // msb as name end
 475+ E0A2             >
 475+ E0A2 91 00       >                dw      Prev_Ptr            // Link to previous definition Name
 475+ E0A4             >Prev_Ptr        defl    Heap_Ptr
 475+ E0A4             >
 475+ E0A4             >mirror_Ptr      defl    $
 475+ E0A4             >
 475+ E0A4 BB 64       >                dw      Dict_Ptr + 2        // xt
 475+ E0A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 475+ E0A6             >
 475+ E0A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 475+ E0A6             >
 475+ E0A6             >//              ______________________________________________________________________
 475+ E0A6             >//              Dictionary part
 475+ E0A6             >
 475+ E0A6             >                org     Dict_Ptr
 475+ 64B9             >
 475+ 64B9 A4 00       >                dw      mirror_Ptr - $E000
 475+ 64BB             >
 475+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 475+ 64BB ~           >
 475+ 64BB ~           >
 475+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 64BB             >
 475+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 64BB D9                           exx
 477+ 64BC CD 9F 64                     call    MMU7_read
 478+ 64BF D9                           exx
 479+ 64C0 6F                           ld      l, a
 480+ 64C1 D9                           exx
 481+ 64C2
 482+ 64C2 D1                           pop     de                      // de has dictionary pointer
 483+ 64C3              Find_VocabularyLoop:
 484+ 64C3 7A                               ld      a, d
 485+ 64C4 D6 60                            sub     $60
 486+ 64C6 30 08                            jr      nc, Find_far_endif
 487+ 64C8 EB                                   ex      de, hl
 488+ 64C9 CD AA 64                             call    TO_FAR_rout
 489+ 64CC EB                                   ex      de, hl
 490+ 64CD ED 92 57                             nextreg 87, a
 491+ 64D0              Find_far_endif:
 492+ 64D0 E1                               pop     hl                  // string pointer to search for
 493+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 494+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 495+ 64D3 08                               ex      af,af'              // for later use (!)
 496+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 497+ 64D5 AE                               xor     (hl)                // check if same length
 498+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 499+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 500+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 501+ 64DA
 502+ 64DA              Find_ThisWord:      // begin loop
 503+ 64DA 23                                   inc     hl
 504+ 64DB 13                                   inc     de
 505+ 64DC 1A                                   ld      a, (de)
 506+ 64DD                                      // case insensitive option - begin
 507+ 64DD                                      // push    bc
 508+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 509+ 64DF 47                                   ld      b, a
 510+ 64E0 1A                                   ld      a, (de)
 511+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 512+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 513+ 64E6 4F                                   ld      c, a
 514+ 64E7 7E                                   ld      a, (hl)
 515+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 516+ 64EB A9                                   xor     c
 517+ 64EC A8                                   xor     b
 518+ 64ED                                      // pop     bc
 519+ 64ED                                      // case insensitive option - end
 520+ 64ED 87                                   add     a                   // ignore msb during compare
 521+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 522+ 64F0
 523+ 64F0                                  // loop back until last byte msb is found set
 524+ 64F0                                  // that bit marks the ending char of this word
 525+ 64F0 30 E8                            jr      nc, Find_ThisWord
 526+ 64F2
 527+ 64F2                                  // match found !
 528+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 529+ 64F5 19                               add     hl, de
 530+ 64F6
 531+ 64F6                              //  ld      a, h
 532+ 64F6                              //  and     $E0
 533+ 64F6                              //  xor     h
 534+ 64F6                              //  jr      nz, Non_MMU7
 535+ 64F6                                  //  call    MMU7_read
 536+ 64F6                                  //  dec     a
 537+ 64F6                                  //  jr      z, Non_MMU7
 538+ 64F6 5E                                       ld      e, (hl)
 539+ 64F7 23                                       inc     hl
 540+ 64F8 56                                       ld      d, (hl)
 541+ 64F9 EB                                       ex      de, hl
 542+ 64FA              //Non_MMU7:
 543+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 544+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 545+ 64FC 5F                               ld      e, a
 546+ 64FD 16 00                            ld      d, 0
 547+ 64FF 21 FF FF                         ld      hl, -1
 548+ 6502 D5                               push    de
 549+ 6503 E5                               push    hl
 550+ 6504 D9                               exx
 551+ 6505 7D                               ld      a, l
 552+ 6506 ED 92 57                         nextreg 87, a
 553+ 6509                                  next
 553+ 6509 DD E9       >                jp      (ix)
 554+ 650B
 555+ 650B              Find_DidntMatch: // didn't match (*)
 556+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 557+ 650D
 558+ 650D              Find_DifferentLenght:
 559+ 650D                                  // consume chars until the end of the word
 560+ 650D                                  // that is last byte msb is found set
 561+ 650D 13                                   inc     de
 562+ 650E 1A                                   ld      a, (de)
 563+ 650F 87                                   add     a, a
 564+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 565+ 6512
 566+ 6512              Find_WordEnd:   // word-end  found (**)
 567+ 6512                                  // take LFA and use it
 568+ 6512 13                               inc     de
 569+ 6513 EB                               ex      de, hl
 570+ 6514 5E                               ld      e, (hl)
 571+ 6515 23                               inc     hl
 572+ 6516 56                               ld      d, (hl)
 573+ 6517 7A                               ld      a, d
 574+ 6518 B3                               or      e
 575+ 6519
 576+ 6519                              // loop until end of vocabulary
 577+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 578+ 651B
 579+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 580+ 651C 21 00 00                     ld      hl, 0
 581+ 651F E5                           push    hl
 582+ 6520 D9                           exx
 583+ 6521 7D                           ld      a, l
 584+ 6522 ED 92 57                     nextreg 87, a
 585+ 6525                              next
 585+ 6525 DD E9       >                jp      (ix)
 586+ 6527
 587+ 6527              //  ______________________________________________________________________
 588+ 6527              //
 589+ 6527              // enclose      a c -- a  n1 n2 n3
 590+ 6527              // starting from a, using delimiter c, determines the offsets:
 591+ 6527              //   n1   the first character non-delimiter
 592+ 6527              //   n2   the first delimiter after the text
 593+ 6527              //   n3   the first character non enclosed.
 594+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 595+ 6527              // an uncoditional delimiter.
 596+ 6527              // Examples:
 597+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 598+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 599+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 600+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 600+ 6527             >
 600+ 6527             >Dict_Ptr        defl    $
 600+ 6527             >
 600+ 6527             >//              ______________________________________________________________________
 600+ 6527             >//              Heap part
 600+ 6527             >
 600+ 6527             >
 600+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 600+ E0A6             >
 600+ E0A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ E0A6             >Latest_Definition defl  Heap_Ptr
 600+ E0A6             >
 600+ E0A6             >                // dummy db directives used to calculate length of namec
 600+ E0A6 45 4E 43 4C >                db      "ENCLOSE"
 600+ E0AA 4F 53 45    >
 600+ E0AD             >len_NFA         defl    $ - temp_NFA
 600+ E0AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ E0A6             >
 600+ E0A6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ E0A7 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 600+ E0AB 4F 53 45    >
 600+ E0AE             >                org     $-1                 // alter last byte of Name just above to set
 600+ E0AD C5          >                db      {b $} | END_BIT     // msb as name end
 600+ E0AE             >
 600+ E0AE 9B 00       >                dw      Prev_Ptr            // Link to previous definition Name
 600+ E0B0             >Prev_Ptr        defl    Heap_Ptr
 600+ E0B0             >
 600+ E0B0             >mirror_Ptr      defl    $
 600+ E0B0             >
 600+ E0B0 29 65       >                dw      Dict_Ptr + 2        // xt
 600+ E0B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 600+ E0B2             >
 600+ E0B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 600+ E0B2             >
 600+ E0B2             >//              ______________________________________________________________________
 600+ E0B2             >//              Dictionary part
 600+ E0B2             >
 600+ E0B2             >                org     Dict_Ptr
 600+ 6527             >
 600+ 6527 B0 00       >                dw      mirror_Ptr - $E000
 600+ 6529             >
 600+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 600+ 6529 ~           >
 600+ 6529 ~           >
 600+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 6529             >
 600+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 6529 D9                           exx
 602+ 652A D1                           pop     de                  //  e has the character
 603+ 652B E1                           pop     hl                  // hl has the string address
 604+ 652C E5                           push    hl
 605+ 652D 7B                           ld      a, e
 606+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 607+ 6531 2B                           dec     hl
 608+ 6532              Enclose_NonDelimiter:
 609+ 6532                              // find first non delimiter
 610+ 6532 23                               inc     hl
 611+ 6533 13                               inc     de
 612+ 6534 BE                               cp      (hl)
 613+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 614+ 6537 D5                           push    de
 615+ 6538
 616+ 6538                              // push    bc                  // save Instruction Pointer
 617+ 6538
 618+ 6538 4F                           ld      c, a                // save char
 619+ 6539 7E                           ld      a, (hl)
 620+ 653A A7                           and     a                   // stop if 0x00
 621+ 653B 20 07                        jr      nz, Enclose_NextChar
 622+ 653D                              /// case iii. no more character in string
 623+ 653D                                  // pop     bc                  // restore Instruction Pointer
 624+ 653D 13                               inc     de
 625+ 653E D5                               push    de
 626+ 653F 1B                               dec     de
 627+ 6540 D5                               push    de
 628+ 6541 D9                               exx
 629+ 6542                                  next
 629+ 6542 DD E9       >                jp      (ix)
 630+ 6544              Enclose_NextChar:
 631+ 6544 79                               ld      a, c
 632+ 6545 23                               inc     hl
 633+ 6546 13                               inc     de
 634+ 6547 BE                               cp      (hl)
 635+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 636+ 654A                                      // case i. first non enclosed
 637+ 654A                                      // pop     bc                  // restore Instruction Pointer
 638+ 654A D5                                   push    de
 639+ 654B 13                                   inc     de
 640+ 654C D5                                   push    de
 641+ 654D D9                                   exx
 642+ 654E                                      next
 642+ 654E DD E9       >                jp      (ix)
 643+ 6550              Enclose_NonSeparator:
 644+ 6550 7E                               ld      a, (hl)
 645+ 6551 A7                               and     a
 646+ 6552 20 F0                        jr      nz, Enclose_NextChar
 647+ 6554
 648+ 6554                              // case ii. separator & terminator
 649+ 6554                              // pop     bc                  // restore Instruction Pointer
 650+ 6554 D5                           push    de
 651+ 6555 D5                           push    de
 652+ 6556 D9                           exx
 653+ 6557                              next
 653+ 6557 DD E9       >                jp      (ix)
 654+ 6559
 655+ 6559              //  ______________________________________________________________________
 656+ 6559              //
 657+ 6559              // (map)        a2 a1 n c1 -- c2
 658+ 6559              // translate character c1 using mapping string a2 and a2
 659+ 6559              // if c1 is not present within string a1 then
 660+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 661+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 661+ 6559             >
 661+ 6559             >Dict_Ptr        defl    $
 661+ 6559             >
 661+ 6559             >//              ______________________________________________________________________
 661+ 6559             >//              Heap part
 661+ 6559             >
 661+ 6559             >
 661+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E0B2             >
 661+ E0B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E0B2             >Latest_Definition defl  Heap_Ptr
 661+ E0B2             >
 661+ E0B2             >                // dummy db directives used to calculate length of namec
 661+ E0B2 28 4D 41 50 >                db      "(MAP)"
 661+ E0B6 29          >
 661+ E0B7             >len_NFA         defl    $ - temp_NFA
 661+ E0B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E0B2             >
 661+ E0B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E0B3 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 661+ E0B7 29          >
 661+ E0B8             >                org     $-1                 // alter last byte of Name just above to set
 661+ E0B7 A9          >                db      {b $} | END_BIT     // msb as name end
 661+ E0B8             >
 661+ E0B8 A6 00       >                dw      Prev_Ptr            // Link to previous definition Name
 661+ E0BA             >Prev_Ptr        defl    Heap_Ptr
 661+ E0BA             >
 661+ E0BA             >mirror_Ptr      defl    $
 661+ E0BA             >
 661+ E0BA 5B 65       >                dw      Dict_Ptr + 2        // xt
 661+ E0BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E0BC             >
 661+ E0BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E0BC             >
 661+ E0BC             >//              ______________________________________________________________________
 661+ E0BC             >//              Dictionary part
 661+ E0BC             >
 661+ E0BC             >                org     Dict_Ptr
 661+ 6559             >
 661+ 6559 BA 00       >                dw      mirror_Ptr - $E000
 661+ 655B             >
 661+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 661+ 655B ~           >
 661+ 655B ~           >
 661+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 655B             >
 661+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 655B D9                           exx
 663+ 655C E1                           pop     hl
 664+ 655D 7D                           ld      a, l
 665+ 655E C1                           pop     bc
 666+ 655F E1                           pop     hl
 667+ 6560 50                           ld      d, b
 668+ 6561 59                           ld      e, c
 669+ 6562 ED B1                        cpir
 670+ 6564 E1                           pop     hl
 671+ 6565 20 05                        jr      nz, C_Map_Then
 671+ 6567
 672+ 6567 19                               add     hl, de
 673+ 6568 2B                               dec     hl
 674+ 6569 ED 42                            sbc     hl, bc
 675+ 656B 7E                               ld      a, (hl)
 676+ 656C              C_Map_Then:
 677+ 656C 6F                           ld      l, a
 678+ 656D 26 00                        ld      h, 0
 679+ 656F E5                           push    hl
 680+ 6570 D9                           exx
 681+ 6571                              next
 681+ 6571 DD E9       >                jp      (ix)
 682+ 6573
 683+ 6573              //  ______________________________________________________________________
 684+ 6573              //
 685+ 6573              // (compare)    a1 a2 n -- b
 686+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 687+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 688+ 6573              //  0 : if strings are equal
 689+ 6573              // +1 : if string at a1 greater than string at a2
 690+ 6573              // -1 : if string at a1 less than string at a2
 691+ 6573              // strings can be 256 bytes in length at most.
 692+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 692+ 6573             >
 692+ 6573             >Dict_Ptr        defl    $
 692+ 6573             >
 692+ 6573             >//              ______________________________________________________________________
 692+ 6573             >//              Heap part
 692+ 6573             >
 692+ 6573             >
 692+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 692+ E0BC             >
 692+ E0BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ E0BC             >Latest_Definition defl  Heap_Ptr
 692+ E0BC             >
 692+ E0BC             >                // dummy db directives used to calculate length of namec
 692+ E0BC 28 43 4F 4D >                db      "(COMPARE)"
 692+ E0C0 50 41 52 45 >
 692+ E0C4 29          >
 692+ E0C5             >len_NFA         defl    $ - temp_NFA
 692+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ E0BC             >
 692+ E0BC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ E0BD 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 692+ E0C1 50 41 52 45 >
 692+ E0C5 29          >
 692+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 692+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 692+ E0C6             >
 692+ E0C6 B2 00       >                dw      Prev_Ptr            // Link to previous definition Name
 692+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 692+ E0C8             >
 692+ E0C8             >mirror_Ptr      defl    $
 692+ E0C8             >
 692+ E0C8 75 65       >                dw      Dict_Ptr + 2        // xt
 692+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 692+ E0CA             >
 692+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 692+ E0CA             >
 692+ E0CA             >//              ______________________________________________________________________
 692+ E0CA             >//              Dictionary part
 692+ E0CA             >
 692+ E0CA             >                org     Dict_Ptr
 692+ 6573             >
 692+ 6573 C8 00       >                dw      mirror_Ptr - $E000
 692+ 6575             >
 692+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 692+ 6575 ~           >
 692+ 6575 ~           >
 692+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 6575             >
 692+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 6575 D9                           exx
 694+ 6576 E1                           pop     hl                  // Number of bytes
 695+ 6577 7D                           ld      a, l
 696+ 6578 E1                           pop     hl                  // hl points string a2
 697+ 6579 D1                           pop     de                  // hl points string a1
 698+ 657A              //              push    bc                  // Instruction pointer on stack
 699+ 657A 47                           ld      b, a
 700+ 657B              C_Compare_Loop:
 701+ 657B 7E                               ld      a, (hl)
 702+ 657C CD 78 64                         call    Case_Sensitive
 703+ 657F 4F                               ld      c, a
 704+ 6580 1A                               ld      a, (de)
 705+ 6581 CD 78 64                         call    Case_Sensitive
 706+ 6584 B9                               cp      c
 707+ 6585 13                               inc     de
 708+ 6586 23                               inc     hl
 709+ 6587 28 0E                            jr      z, C_Compare_Equal
 710+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 711+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 712+ 658E 18 03                                jr      C_Compare_Then      // Else
 713+ 6590              C_Compare_NotLessThan:
 714+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 715+ 6593              C_Compare_Then:                                 // Endif
 716+ 6593              //                      pop     bc              // restore Instruction Pointer
 717+ 6593 E5                                   push    hl
 718+ 6594 D9                                   exx
 719+ 6595
 720+ 6595                                      next
 720+ 6595 DD E9       >                jp      (ix)
 721+ 6597
 722+ 6597              C_Compare_Equal:
 723+ 6597 10 E2                        djnz    C_Compare_Loop
 724+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 725+ 659C              //              pop     bc                  // restore Instruction Pointer
 726+ 659C E5                           push    hl
 727+ 659D D9                           exx
 728+ 659E
 729+ 659E                              next
 729+ 659E DD E9       >                jp      (ix)
 730+ 65A0
 731+ 65A0              //  ______________________________________________________________________
 732+ 65A0              //
 733+ 65A0              // emitc        c --
 734+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 735+ 65A0              // the the current channel (see SELECT to change stream-channel)
 736+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 736+ 65A0             >
 736+ 65A0             >Dict_Ptr        defl    $
 736+ 65A0             >
 736+ 65A0             >//              ______________________________________________________________________
 736+ 65A0             >//              Heap part
 736+ 65A0             >
 736+ 65A0             >
 736+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 736+ E0CA             >
 736+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 736+ E0CA             >Latest_Definition defl  Heap_Ptr
 736+ E0CA             >
 736+ E0CA             >                // dummy db directives used to calculate length of namec
 736+ E0CA 45 4D 49 54 >                db      "EMITC"
 736+ E0CE 43          >
 736+ E0CF             >len_NFA         defl    $ - temp_NFA
 736+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 736+ E0CA             >
 736+ E0CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 736+ E0CB 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 736+ E0CF 43          >
 736+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 736+ E0CF C3          >                db      {b $} | END_BIT     // msb as name end
 736+ E0D0             >
 736+ E0D0 BC 00       >                dw      Prev_Ptr            // Link to previous definition Name
 736+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 736+ E0D2             >
 736+ E0D2             >mirror_Ptr      defl    $
 736+ E0D2             >
 736+ E0D2 A2 65       >                dw      Dict_Ptr + 2        // xt
 736+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 736+ E0D4             >
 736+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 736+ E0D4             >
 736+ E0D4             >//              ______________________________________________________________________
 736+ E0D4             >//              Dictionary part
 736+ E0D4             >
 736+ E0D4             >                org     Dict_Ptr
 736+ 65A0             >
 736+ 65A0 D2 00       >                dw      mirror_Ptr - $E000
 736+ 65A2             >
 736+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 736+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 736+ 65A2 ~           >
 736+ 65A2 ~           >
 736+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 736+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 736+ 65A2             >
 736+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 737+ 65A2 E1                           pop     hl
 738+ 65A3 7D                           ld      a, l
 739+ 65A4              Emitc_Ptr:
 740+ 65A4 C5                           push    bc
 741+ 65A5 D5                           push    de
 742+ 65A6 DD E5                        push    ix
 743+ 65A8 D7                           rst     $10
 744+ 65A9 DD E1                        pop     ix
 745+ 65AB D1                           pop     de
 746+ 65AC C1                           pop     bc
 747+ 65AD 3E FF                        ld      a, 255            // max possible
 748+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 749+ 65B2                              next
 749+ 65B2 DD E9       >                jp      (ix)
 750+ 65B4
 751+ 65B4              //  ______________________________________________________________________
 752+ 65B4              //
 753+ 65B4              // cr           --
 754+ 65B4              // send a CR via EMITC
 755+ 65B4                              New_Def CR, "CR", is_code, is_normal
 755+ 65B4             >
 755+ 65B4             >Dict_Ptr        defl    $
 755+ 65B4             >
 755+ 65B4             >//              ______________________________________________________________________
 755+ 65B4             >//              Heap part
 755+ 65B4             >
 755+ 65B4             >
 755+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E0D4             >
 755+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E0D4             >Latest_Definition defl  Heap_Ptr
 755+ E0D4             >
 755+ E0D4             >                // dummy db directives used to calculate length of namec
 755+ E0D4 43 52       >                db      "CR"
 755+ E0D6             >len_NFA         defl    $ - temp_NFA
 755+ E0D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E0D4             >
 755+ E0D4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E0D5 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 755+ E0D7             >                org     $-1                 // alter last byte of Name just above to set
 755+ E0D6 D2          >                db      {b $} | END_BIT     // msb as name end
 755+ E0D7             >
 755+ E0D7 CA 00       >                dw      Prev_Ptr            // Link to previous definition Name
 755+ E0D9             >Prev_Ptr        defl    Heap_Ptr
 755+ E0D9             >
 755+ E0D9             >mirror_Ptr      defl    $
 755+ E0D9             >
 755+ E0D9 B6 65       >                dw      Dict_Ptr + 2        // xt
 755+ E0DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E0DB             >
 755+ E0DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E0DB             >
 755+ E0DB             >//              ______________________________________________________________________
 755+ E0DB             >//              Dictionary part
 755+ E0DB             >
 755+ E0DB             >                org     Dict_Ptr
 755+ 65B4             >
 755+ 65B4 D9 00       >                dw      mirror_Ptr - $E000
 755+ 65B6             >
 755+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 755+ 65B6 ~           >
 755+ 65B6 ~           >
 755+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 65B6             >
 755+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 65B6
 757+ 65B6 3E 0D                        ld      a, CR_CHAR
 758+ 65B8 18 EA                        jr      Emitc_Ptr
 759+ 65BA
 760+ 65BA              Emitc_Vec:
 761+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 762+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 763+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 764+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 765+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 766+ 65C4 19 66                        dw      C_Emit_NL         // lf (unix newline)
 767+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 768+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 769+ 65CA
 770+ 65CA              Emit_Selector_Start:
 771+ 65CA 06                           db      $06                 // comma
 772+ 65CB 07                           db      $07                 // bel
 773+ 65CC 08                           db      $08                 // bs
 774+ 65CD 09                           db      $09                 // tab
 775+ 65CE 0D                           db      $0D                 // cr
 776+ 65CF 0A                           db      $0A                 // lf (unix newline)
 777+ 65D0 20                           db      $20
 778+ 65D1              Emit_Selector_End:
 779+ 65D1 20                           db      $20
 780+ 65D2
 781+ 65D2              //  ______________________________________________________________________
 782+ 65D2              //
 783+ 65D2              // (?emit)      c1 -- c2 | c1
 784+ 65D2              // decode a character to be sent via EMIT
 785+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 786+ 65D2              // the routine should resolve anything and convert the character anyway.
 787+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 787+ 65D2             >
 787+ 65D2             >Dict_Ptr        defl    $
 787+ 65D2             >
 787+ 65D2             >//              ______________________________________________________________________
 787+ 65D2             >//              Heap part
 787+ 65D2             >
 787+ 65D2             >
 787+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 787+ E0DB             >
 787+ E0DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ E0DB             >Latest_Definition defl  Heap_Ptr
 787+ E0DB             >
 787+ E0DB             >                // dummy db directives used to calculate length of namec
 787+ E0DB 28 3F 45 4D >                db      "(?EMIT)"
 787+ E0DF 49 54 29    >
 787+ E0E2             >len_NFA         defl    $ - temp_NFA
 787+ E0E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ E0DB             >
 787+ E0DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ E0DC 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 787+ E0E0 49 54 29    >
 787+ E0E3             >                org     $-1                 // alter last byte of Name just above to set
 787+ E0E2 A9          >                db      {b $} | END_BIT     // msb as name end
 787+ E0E3             >
 787+ E0E3 D4 00       >                dw      Prev_Ptr            // Link to previous definition Name
 787+ E0E5             >Prev_Ptr        defl    Heap_Ptr
 787+ E0E5             >
 787+ E0E5             >mirror_Ptr      defl    $
 787+ E0E5             >
 787+ E0E5 D4 65       >                dw      Dict_Ptr + 2        // xt
 787+ E0E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 787+ E0E7             >
 787+ E0E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 787+ E0E7             >
 787+ E0E7             >//              ______________________________________________________________________
 787+ E0E7             >//              Dictionary part
 787+ E0E7             >
 787+ E0E7             >                org     Dict_Ptr
 787+ 65D2             >
 787+ 65D2 E5 00       >                dw      mirror_Ptr - $E000
 787+ 65D4             >
 787+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 787+ 65D4 ~           >
 787+ 65D4 ~           >
 787+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 65D4             >
 787+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 65D4 D9                           exx
 789+ 65D5 D1                           pop     de
 790+ 65D6 7B                           ld      a, e                //  de has c1
 791+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 792+ 65D9                              // push    bc                  // save Instruction Pointer
 793+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 794+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 795+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 796+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 797+ 65E3                                  // Found then decode it
 798+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 799+ 65E6 09                               add     hl, bc
 800+ 65E7 09                               add     hl, bc
 801+ 65E8 5E                               ld      e, (hl)
 802+ 65E9 23                               inc     hl
 803+ 65EA 56                               ld      d, (hl)
 804+ 65EB EB                               ex      de, hl
 805+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 806+ 65EC E9                               jp      (hl)                // one of the following labels
 807+ 65ED              C_Emit_Not_Found:
 808+ 65ED                              // pop     bc                  // restore Instruction Pointer
 809+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 810+ 65EF 30 02                        jr      nc, C_Emit_Printable
 811+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 812+ 65F3              C_Emit_Printable:
 813+ 65F3 6F                           ld      l, a
 814+ 65F4 26 00                        ld      h, 0
 815+ 65F6 E5                           push    hl
 816+ 65F7 D9                           exx
 817+ 65F8                              next
 817+ 65F8 DD E9       >                jp      (ix)
 818+ 65FA
 819+ 65FA              C_Emit_Bel:
 820+ 65FA D9                            exx
 821+ 65FB C5                           push    bc                  // save Instruction Pointer
 822+ 65FC D5                           push    de
 823+ 65FD 11 00 01                     ld      de, $0100
 824+ 6600 21 00 02                     ld      hl, $0200
 825+ 6603 DD E5                        push    ix                  // save Next Pointer
 826+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 827+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 828+ 660A D1                           pop     de
 829+ 660B C1                           pop     bc                  // restore Instruction Pointer
 830+ 660C 21 00 00                     ld      hl, NUL_CHAR
 831+ 660F E5                           push    hl
 832+ 6610                              next
 832+ 6610 DD E9       >                jp      (ix)
 833+ 6612
 834+ 6612 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 835+ 6615 E5                           push    hl
 836+ 6616 D9                           exx
 837+ 6617                              next
 837+ 6617 DD E9       >                jp      (ix)
 838+ 6619
 839+ 6619 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 840+ 661C E5                           push    hl
 841+ 661D D9                           exx
 842+ 661E                              next
 842+ 661E DD E9       >                jp      (ix)
 843+ 6620
 844+ 6620              //  ______________________________________________________________________
 845+ 6620
 846+ 6620              Key_Table:
 847+ 6620 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 848+ 6621 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 849+ 6622 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 850+ 6623 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 851+ 6624 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 852+ 6625 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 853+ 6626 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 854+ 6627 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 855+ 6628 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 856+ 6629 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 857+ 662A C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 858+ 662B              Key_MapTo:
 859+ 662B 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 860+ 662C 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 861+ 662D 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 862+ 662E 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 863+ 662F 5D                           db      $5D                 //  6: SYMBOL+U : ]
 864+ 6630 5B                           db      $5B                 //  5: SYMBOL+Y : [
 865+ 6631 7D                           db      $7D                 //  4: SYMBOL+G : }
 866+ 6632 7B                           db      $7B                 //  3: SYMBOL+F : {
 867+ 6633 5C                           db      $5C                 //  2: SYMBOl+D : //
 868+ 6634 7C                           db      $7C                 //  1: SYMBOL+S : |
 869+ 6635 7E                           db      $7E                 //  0: SYMBOL+A : ~
 870+ 6636
 871+ 6636              //  ______________________________________________________________________
 872+ 6636              //
 873+ 6636              // curs         -- c
 874+ 6636              // wait for a keypress
 875+ 6636              // This definition need Standard ROM Interrupt to be served
 876+ 6636
 877+ 6636                              New_Def CUR, "CURS", is_code, is_normal
 877+ 6636             >
 877+ 6636             >Dict_Ptr        defl    $
 877+ 6636             >
 877+ 6636             >//              ______________________________________________________________________
 877+ 6636             >//              Heap part
 877+ 6636             >
 877+ 6636             >
 877+ 6636             >                org     (Heap_Ptr & $1FFF) + $E000
 877+ E0E7             >
 877+ E0E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ E0E7             >Latest_Definition defl  Heap_Ptr
 877+ E0E7             >
 877+ E0E7             >                // dummy db directives used to calculate length of namec
 877+ E0E7 43 55 52 53 >                db      "CURS"
 877+ E0EB             >len_NFA         defl    $ - temp_NFA
 877+ E0EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ E0E7             >
 877+ E0E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ E0E8 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 877+ E0EC             >                org     $-1                 // alter last byte of Name just above to set
 877+ E0EB D3          >                db      {b $} | END_BIT     // msb as name end
 877+ E0EC             >
 877+ E0EC DB 00       >                dw      Prev_Ptr            // Link to previous definition Name
 877+ E0EE             >Prev_Ptr        defl    Heap_Ptr
 877+ E0EE             >
 877+ E0EE             >mirror_Ptr      defl    $
 877+ E0EE             >
 877+ E0EE 38 66       >                dw      Dict_Ptr + 2        // xt
 877+ E0F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 877+ E0F0             >
 877+ E0F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 877+ E0F0             >
 877+ E0F0             >//              ______________________________________________________________________
 877+ E0F0             >//              Dictionary part
 877+ E0F0             >
 877+ E0F0             >                org     Dict_Ptr
 877+ 6636             >
 877+ 6636 EE 00       >                dw      mirror_Ptr - $E000
 877+ 6638             >
 877+ 6638             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 6638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 877+ 6638 ~           >
 877+ 6638 ~           >
 877+ 6638             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 6638             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 6638             >
 877+ 6638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 6638
 879+ 6638 C5                           push    bc                  // save Instruction Pointer
 880+ 6639 D5                           push    de                  // save Return Stack Pointer
 881+ 663A DD E5                        push    ix
 882+ 663C ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 883+ 6640 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 884+ 6643 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 885+ 6647
 886+ 6647              Cur_Wait:
 887+ 6647 76                               halt
 888+ 6648 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 889+ 664A CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 890+ 664D
 891+ 664D                                  // software-flash: flips face every 320 ms
 892+ 664D 3E 20                            ld      a, $20              // Timing based
 893+ 664F FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 894+ 6652
 895+ 6652 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 896+ 6655 20 0C                            jr      nz, Cur_Cursor
 897+ 6657 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 898+ 665A FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 899+ 665E 28 03                                jr      z, Cur_Cursor
 900+ 6660 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 901+ 6663              Cur_Cursor:
 902+ 6663 D7                               rst     $10
 903+ 6664 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 904+ 6666 D7                               rst     $10
 905+ 6667
 906+ 6667 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 907+ 666B 28 DA                        jr      z, Cur_Wait
 908+ 666D
 909+ 666D 76                           halt    // this is to sync flashing cursor.
 910+ 666E
 911+ 666E 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 912+ 6670 D7                           rst     $10
 913+ 6671 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 914+ 6673 D7                           rst     $10
 915+ 6674
 916+ 6674 ED 7B 92 63                  ld      sp, (SP_Saved)
 917+ 6678
 918+ 6678 DD E1                        pop     ix
 919+ 667A D1                           pop     de                  // Restore Return Stack Pointer
 920+ 667B C1                           pop     bc                  // Restore Instruction Pointer
 921+ 667C                              next
 921+ 667C DD E9       >                jp      (ix)
 922+ 667E
 923+ 667E
 924+ 667E              //  ______________________________________________________________________
 925+ 667E              //
 926+ 667E              // key          -- c
 927+ 667E              // This definition need Standard ROM Interrupt to be served
 928+ 667E
 929+ 667E                              New_Def KEY, "KEY", is_code, is_normal
 929+ 667E             >
 929+ 667E             >Dict_Ptr        defl    $
 929+ 667E             >
 929+ 667E             >//              ______________________________________________________________________
 929+ 667E             >//              Heap part
 929+ 667E             >
 929+ 667E             >
 929+ 667E             >                org     (Heap_Ptr & $1FFF) + $E000
 929+ E0F0             >
 929+ E0F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ E0F0             >Latest_Definition defl  Heap_Ptr
 929+ E0F0             >
 929+ E0F0             >                // dummy db directives used to calculate length of namec
 929+ E0F0 4B 45 59    >                db      "KEY"
 929+ E0F3             >len_NFA         defl    $ - temp_NFA
 929+ E0F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ E0F0             >
 929+ E0F0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ E0F1 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 929+ E0F4             >                org     $-1                 // alter last byte of Name just above to set
 929+ E0F3 D9          >                db      {b $} | END_BIT     // msb as name end
 929+ E0F4             >
 929+ E0F4 E7 00       >                dw      Prev_Ptr            // Link to previous definition Name
 929+ E0F6             >Prev_Ptr        defl    Heap_Ptr
 929+ E0F6             >
 929+ E0F6             >mirror_Ptr      defl    $
 929+ E0F6             >
 929+ E0F6 80 66       >                dw      Dict_Ptr + 2        // xt
 929+ E0F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 929+ E0F8             >
 929+ E0F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 929+ E0F8             >
 929+ E0F8             >//              ______________________________________________________________________
 929+ E0F8             >//              Dictionary part
 929+ E0F8             >
 929+ E0F8             >                org     Dict_Ptr
 929+ 667E             >
 929+ 667E F6 00       >                dw      mirror_Ptr - $E000
 929+ 6680             >
 929+ 6680             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 6680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 929+ 6680 ~           >
 929+ 6680 ~           >
 929+ 6680             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 6680             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 6680             >
 929+ 6680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 6680
 931+ 6680 C5                           push    bc                  // Save Instruction Pointer
 932+ 6681
 933+ 6681              Key_Wait:
 934+ 6681 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 935+ 6685 28 FA                        jr      z, Key_Wait
 936+ 6687
 937+ 6687 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 938+ 668A
 939+ 668A                              // decode character from above table
 940+ 668A 21 20 66                     ld      hl, Key_Table
 941+ 668D 01 0B 00                     ld      bc, $000B
 942+ 6690 ED B1                        cpir
 943+ 6692 20 05                        jr      nz, Key_DontMap
 944+ 6694 21 2B 66                         ld      hl, Key_MapTo
 945+ 6697 09                               add     hl, bc
 946+ 6698 7E                               ld      a, (hl)
 947+ 6699 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 948+ 669B 20 09                        jr      nz, Key_NoCapsLock
 949+ 669D 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 950+ 66A0 7E                               ld      a, (hl)
 951+ 66A1 EE 08                            xor     $08
 952+ 66A3 77                               ld      (hl), a
 953+ 66A4 3E 00                            ld      a, NUL_CHAR
 954+ 66A6 6F           Key_NoCapsLock: ld      l, a
 955+ 66A7 26 00                        ld      h, 0                // Prepare TOS
 956+ 66A9
 957+ 66A9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 958+ 66AD
 959+ 66AD C1                           pop     bc                  // Restore Instruction Pointer
 960+ 66AE
 961+ 66AE                              psh1
 961+ 66AE E5          >                push    hl
 961+ 66AF DD E9       >                jp      (ix)
 962+ 66B1
 963+ 66B1
 964+ 66B1              //  ______________________________________________________________________
 965+ 66B1              //
 966+ 66B1              // click        --
 967+ 66B1              // This definition need Standard ROM Interrupt to be served
 968+ 66B1              //
 969+ 66B1              //              New_Def CLICK, "CLICK", is_code, is_normal
 970+ 66B1              //
 971+ 66B1              //                push    bc
 972+ 66B1              //              ld      a, ($5C48)          // BORDCR system variable
 973+ 66B1              //              rra
 974+ 66B1              //              rra
 975+ 66B1              //              rra
 976+ 66B1              //              or      $18                 // quick'n'dirty click
 977+ 66B1              //              out     ($fe), a
 978+ 66B1              //              ld      b, 0
 979+ 66B1              //              djnz    $                   // wait loop
 980+ 66B1              //              xor     $18
 981+ 66B1              //              out     ($fe), a
 982+ 66B1              //                pop     bc
 983+ 66B1
 984+ 66B1              //              next
 985+ 66B1
 986+ 66B1              //  ______________________________________________________________________
 987+ 66B1              //
 988+ 66B1              // key?         -- f
 989+ 66B1              // key available
 990+ 66B1              //
 991+ 66B1              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 992+ 66B1              //
 993+ 66B1              //              ld      hl, 0000
 994+ 66B1              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 995+ 66B1              //              jr      z, Key_Q
 996+ 66B1              //                  dec     hl
 997+ 66B1              // Key_Q:
 998+ 66B1              //                psh1
 999+ 66B1              //              next
1000+ 66B1
1001+ 66B1              //  ______________________________________________________________________
1002+ 66B1              //
1003+ 66B1              // ?terminal    -- FALSE | TRUE
1004+ 66B1              // test for BREAK keypress
1005+ 66B1                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1005+ 66B1             >
1005+ 66B1             >Dict_Ptr        defl    $
1005+ 66B1             >
1005+ 66B1             >//              ______________________________________________________________________
1005+ 66B1             >//              Heap part
1005+ 66B1             >
1005+ 66B1             >
1005+ 66B1             >                org     (Heap_Ptr & $1FFF) + $E000
1005+ E0F8             >
1005+ E0F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ E0F8             >Latest_Definition defl  Heap_Ptr
1005+ E0F8             >
1005+ E0F8             >                // dummy db directives used to calculate length of namec
1005+ E0F8 3F 54 45 52 >                db      "?TERMINAL"
1005+ E0FC 4D 49 4E 41 >
1005+ E100 4C          >
1005+ E101             >len_NFA         defl    $ - temp_NFA
1005+ E101             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ E0F8             >
1005+ E0F8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ E0F9 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1005+ E0FD 4D 49 4E 41 >
1005+ E101 4C          >
1005+ E102             >                org     $-1                 // alter last byte of Name just above to set
1005+ E101 CC          >                db      {b $} | END_BIT     // msb as name end
1005+ E102             >
1005+ E102 F0 00       >                dw      Prev_Ptr            // Link to previous definition Name
1005+ E104             >Prev_Ptr        defl    Heap_Ptr
1005+ E104             >
1005+ E104             >mirror_Ptr      defl    $
1005+ E104             >
1005+ E104 B3 66       >                dw      Dict_Ptr + 2        // xt
1005+ E106             >Heap_Ptr        defl    $ - $E000           // save current HP
1005+ E106             >
1005+ E106             >Current_HP      defl  $ - $E000             // used to set HP once!
1005+ E106             >
1005+ E106             >//              ______________________________________________________________________
1005+ E106             >//              Dictionary part
1005+ E106             >
1005+ E106             >                org     Dict_Ptr
1005+ 66B1             >
1005+ 66B1 04 01       >                dw      mirror_Ptr - $E000
1005+ 66B3             >
1005+ 66B3             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 66B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1005+ 66B3 ~           >
1005+ 66B3 ~           >
1005+ 66B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 66B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 66B3             >
1005+ 66B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 66B3 D9                           exx
1007+ 66B4 01 FE 7F                     ld      bc, $7ffe
1008+ 66B7 ED 50                        in      d, (c)
1009+ 66B9 41                           ld      b, c
1010+ 66BA ED 78                        in      a, (c)
1011+ 66BC B2                           or       d
1012+ 66BD 1F                           rra
1013+ 66BE 3F                           ccf
1014+ 66BF ED 62                        sbc     hl, hl
1015+ 66C1 E5                           push    hl
1016+ 66C2 D9                           exx
1017+ 66C3                              next
1017+ 66C3 DD E9       >                jp      (ix)
1018+ 66C5
1019+ 66C5
1020+ 66C5              //  ______________________________________________________________________
1021+ 66C5              //
1022+ 66C5              // inkey        -- c | 0
1023+ 66C5              // call ROM inkey$ routine, returns c or "zero".
1024+ 66C5              //
1025+ 66C5              //              New_Def INKEY, "INKEY", is_code, is_normal
1026+ 66C5              //              push    bc
1027+ 66C5              //              push    de
1028+ 66C5              //              ld      (SP_Saved), sp
1029+ 66C5              //              ld      sp, Cold_origin - 5
1030+ 66C5              //              push    ix
1031+ 66C5              //              call    $15E6                   // instead of 15E9
1032+ 66C5              //              pop     ix
1033+ 66C5              //              ld      sp, (SP_Saved)
1034+ 66C5              //              ld      l, a
1035+ 66C5              //              ld      h, 0
1036+ 66C5              //              pop     de
1037+ 66C5              //              pop     bc
1038+ 66C5              //              psh1
1039+ 66C5
1040+ 66C5              //  ______________________________________________________________________
1041+ 66C5              //
1042+ 66C5              // select      n --
1043+ 66C5              // selects the given channel number
1044+ 66C5
1045+ 66C5                              New_Def SELECT, "SELECT", is_code, is_normal
1045+ 66C5             >
1045+ 66C5             >Dict_Ptr        defl    $
1045+ 66C5             >
1045+ 66C5             >//              ______________________________________________________________________
1045+ 66C5             >//              Heap part
1045+ 66C5             >
1045+ 66C5             >
1045+ 66C5             >                org     (Heap_Ptr & $1FFF) + $E000
1045+ E106             >
1045+ E106             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1045+ E106             >Latest_Definition defl  Heap_Ptr
1045+ E106             >
1045+ E106             >                // dummy db directives used to calculate length of namec
1045+ E106 53 45 4C 45 >                db      "SELECT"
1045+ E10A 43 54       >
1045+ E10C             >len_NFA         defl    $ - temp_NFA
1045+ E10C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1045+ E106             >
1045+ E106 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1045+ E107 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1045+ E10B 43 54       >
1045+ E10D             >                org     $-1                 // alter last byte of Name just above to set
1045+ E10C D4          >                db      {b $} | END_BIT     // msb as name end
1045+ E10D             >
1045+ E10D F8 00       >                dw      Prev_Ptr            // Link to previous definition Name
1045+ E10F             >Prev_Ptr        defl    Heap_Ptr
1045+ E10F             >
1045+ E10F             >mirror_Ptr      defl    $
1045+ E10F             >
1045+ E10F C7 66       >                dw      Dict_Ptr + 2        // xt
1045+ E111             >Heap_Ptr        defl    $ - $E000           // save current HP
1045+ E111             >
1045+ E111             >Current_HP      defl  $ - $E000             // used to set HP once!
1045+ E111             >
1045+ E111             >//              ______________________________________________________________________
1045+ E111             >//              Dictionary part
1045+ E111             >
1045+ E111             >                org     Dict_Ptr
1045+ 66C5             >
1045+ 66C5 0F 01       >                dw      mirror_Ptr - $E000
1045+ 66C7             >
1045+ 66C7             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1045+ 66C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1045+ 66C7 ~           >
1045+ 66C7 ~           >
1045+ 66C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1045+ 66C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1045+ 66C7             >
1045+ 66C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1046+ 66C7 E1                           pop     hl
1047+ 66C8 C5                           push    bc
1048+ 66C9 D5                           push    de
1049+ 66CA 7D                           ld      a, l
1050+ 66CB ED 73 92 63                  ld      (SP_Saved), sp
1051+ 66CF 31 61 63                     ld      sp, Cold_origin - 5
1052+ 66D2 DD E5                        push    ix
1053+ 66D4 CD 01 16                     call    $1601
1054+ 66D7 DD E1                        pop     ix
1055+ 66D9 ED 7B 92 63                  ld      sp, (SP_Saved)
1056+ 66DD D1                           pop     de
1057+ 66DE C1                           pop     bc
1058+ 66DF                              next
1058+ 66DF DD E9       >                jp      (ix)
1059+ 66E1
1060+ 66E1              //  ______________________________________________________________________
1061+ 66E1              //
1062+ 66E1              // ZX Spectrum Next - Low Level disk primitives.
1063+ 66E1              // this include is "here" for backward compatibility
1064+ 66E1
1065+ 66E1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66E1              //  ______________________________________________________________________
   2++66E1              //
   3++66E1              //  next-opt.asm
   4++66E1              //
   5++66E1              //  ZX Spectrum Next - peculiar definitions
   6++66E1              //  ______________________________________________________________________
   7++66E1
   8++66E1              //  ______________________________________________________________________
   9++66E1              //
  10++66E1              // f_seek       d u -- f
  11++66E1              // Seek to position d in file-handle u.
  12++66E1              // Return a false-flag 0 on success, True flag on error
  13++66E1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66E1             >
  13++66E1             >Dict_Ptr        defl    $
  13++66E1             >
  13++66E1             >//              ______________________________________________________________________
  13++66E1             >//              Heap part
  13++66E1             >
  13++66E1             >
  13++66E1             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E111             >
  13++E111             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E111             >Latest_Definition defl  Heap_Ptr
  13++E111             >
  13++E111             >                // dummy db directives used to calculate length of namec
  13++E111 46 5F 53 45 >                db      "F_SEEK"
  13++E115 45 4B       >
  13++E117             >len_NFA         defl    $ - temp_NFA
  13++E117             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E111             >
  13++E111 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E112 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E116 45 4B       >
  13++E118             >                org     $-1                 // alter last byte of Name just above to set
  13++E117 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E118             >
  13++E118 06 01       >                dw      Prev_Ptr            // Link to previous definition Name
  13++E11A             >Prev_Ptr        defl    Heap_Ptr
  13++E11A             >
  13++E11A             >mirror_Ptr      defl    $
  13++E11A             >
  13++E11A E3 66       >                dw      Dict_Ptr + 2        // xt
  13++E11C             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E11C             >
  13++E11C             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E11C             >
  13++E11C             >//              ______________________________________________________________________
  13++E11C             >//              Dictionary part
  13++E11C             >
  13++E11C             >                org     Dict_Ptr
  13++66E1             >
  13++66E1 1A 01       >                dw      mirror_Ptr - $E000
  13++66E3             >
  13++66E3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66E3 ~           >
  13++66E3 ~           >
  13++66E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66E3             >
  13++66E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66E3 D9                            exx
  15++66E4 E1                            pop     hl                  // file-handle
  16++66E5 7D                            ld      a, l
  17++66E6 C1                            pop     bc                  // bc has high-word of d
  18++66E7 D1                            pop     de
  19++66E8 D9                           exx
  20++66E9 DD E5                        push    ix
  21++66EB D5                           push    de
  22++66EC C5                           push    bc                  // save Instruction Pointer
  23++66ED D9                            exx
  24++66EE DD 21 00 00                   ld      ix, 0
  25++66F2 CF                            rst     $08
  26++66F3 9F                            db      $9F
  27++66F4              F_Seek_Exit:
  28++66F4 C1                           pop     bc                  // restore Instruction Pointer
  29++66F5 D1                           pop     de
  30++66F6 DD E1                        pop     ix
  31++66F8 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++66FA
  33++66FA                              psh1
  33++66FA E5          >                push    hl
  33++66FB DD E9       >                jp      (ix)
  34++66FD
  35++66FD              //  ______________________________________________________________________
  36++66FD              //
  37++66FD              // f_close      u -- f
  38++66FD              // Close file-handle u.
  39++66FD              // Return 0 on success, True flag on error
  40++66FD
  41++66FD                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++66FD             >
  41++66FD             >Dict_Ptr        defl    $
  41++66FD             >
  41++66FD             >//              ______________________________________________________________________
  41++66FD             >//              Heap part
  41++66FD             >
  41++66FD             >
  41++66FD             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E11C             >
  41++E11C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E11C             >Latest_Definition defl  Heap_Ptr
  41++E11C             >
  41++E11C             >                // dummy db directives used to calculate length of namec
  41++E11C 46 5F 43 4C >                db      "F_CLOSE"
  41++E120 4F 53 45    >
  41++E123             >len_NFA         defl    $ - temp_NFA
  41++E123             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E11C             >
  41++E11C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E11D 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E121 4F 53 45    >
  41++E124             >                org     $-1                 // alter last byte of Name just above to set
  41++E123 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E124             >
  41++E124 11 01       >                dw      Prev_Ptr            // Link to previous definition Name
  41++E126             >Prev_Ptr        defl    Heap_Ptr
  41++E126             >
  41++E126             >mirror_Ptr      defl    $
  41++E126             >
  41++E126 FF 66       >                dw      Dict_Ptr + 2        // xt
  41++E128             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E128             >
  41++E128             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E128             >
  41++E128             >//              ______________________________________________________________________
  41++E128             >//              Dictionary part
  41++E128             >
  41++E128             >                org     Dict_Ptr
  41++66FD             >
  41++66FD 26 01       >                dw      mirror_Ptr - $E000
  41++66FF             >
  41++66FF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++66FF ~           >
  41++66FF ~           >
  41++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++66FF             >
  41++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++66FF
  43++66FF E1                           pop     hl
  44++6700 7D                           ld      a, l                // file-handle
  45++6701 DD E5                        push    ix
  46++6703 D5                           push    de
  47++6704 C5                           push    bc                  // Save Instruction pointer
  48++6705 CF                           rst     $08
  49++6706 9B                           db      $9B
  50++6707 18 EB                        jr      F_Seek_Exit
  51++6709              //              pop     de
  52++6709              //              pop     bc
  53++6709              //              pop     ix
  54++6709              //              sbc     hl, hl
  55++6709              //              psh1
  56++6709
  57++6709              //  ______________________________________________________________________
  58++6709              //
  59++6709              // f_sync      u -- f
  60++6709              // Close file-handle u.
  61++6709              // Return 0 on success, True flag on error
  62++6709
  63++6709                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6709             >
  63++6709             >Dict_Ptr        defl    $
  63++6709             >
  63++6709             >//              ______________________________________________________________________
  63++6709             >//              Heap part
  63++6709             >
  63++6709             >
  63++6709             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E128             >
  63++E128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E128             >Latest_Definition defl  Heap_Ptr
  63++E128             >
  63++E128             >                // dummy db directives used to calculate length of namec
  63++E128 46 5F 53 59 >                db      "F_SYNC"
  63++E12C 4E 43       >
  63++E12E             >len_NFA         defl    $ - temp_NFA
  63++E12E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E128             >
  63++E128 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E129 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E12D 4E 43       >
  63++E12F             >                org     $-1                 // alter last byte of Name just above to set
  63++E12E C3          >                db      {b $} | END_BIT     // msb as name end
  63++E12F             >
  63++E12F 1C 01       >                dw      Prev_Ptr            // Link to previous definition Name
  63++E131             >Prev_Ptr        defl    Heap_Ptr
  63++E131             >
  63++E131             >mirror_Ptr      defl    $
  63++E131             >
  63++E131 0B 67       >                dw      Dict_Ptr + 2        // xt
  63++E133             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E133             >
  63++E133             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E133             >
  63++E133             >//              ______________________________________________________________________
  63++E133             >//              Dictionary part
  63++E133             >
  63++E133             >                org     Dict_Ptr
  63++6709             >
  63++6709 31 01       >                dw      mirror_Ptr - $E000
  63++670B             >
  63++670B             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++670B ~           >
  63++670B ~           >
  63++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++670B             >
  63++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++670B E1                           pop     hl
  65++670C 7D                           ld      a, l                // file-handle
  66++670D DD E5                        push    ix
  67++670F D5                           push    de
  68++6710 C5                           push    bc
  69++6711 CF                           rst     $08
  70++6712 9C                           db      $9C
  71++6713 18 DF                        jr      F_Seek_Exit
  72++6715              //              pop     de
  73++6715              //              pop     bc
  74++6715              //              pop     ix
  75++6715              //              sbc     hl, hl
  76++6715              //              psh1
  77++6715
  78++6715              //  ______________________________________________________________________
  79++6715              //
  80++6715              // f_fgetpos    u -- d f
  81++6715              // Seek to position d in file-handle u.
  82++6715              // Return a false-flag 0 on success, True flag on error
  83++6715                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6715             >
  83++6715             >Dict_Ptr        defl    $
  83++6715             >
  83++6715             >//              ______________________________________________________________________
  83++6715             >//              Heap part
  83++6715             >
  83++6715             >
  83++6715             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E133             >
  83++E133             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E133             >Latest_Definition defl  Heap_Ptr
  83++E133             >
  83++E133             >                // dummy db directives used to calculate length of namec
  83++E133 46 5F 46 47 >                db      "F_FGETPOS"
  83++E137 45 54 50 4F >
  83++E13B 53          >
  83++E13C             >len_NFA         defl    $ - temp_NFA
  83++E13C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E133             >
  83++E133 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E134 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E138 45 54 50 4F >
  83++E13C 53          >
  83++E13D             >                org     $-1                 // alter last byte of Name just above to set
  83++E13C D3          >                db      {b $} | END_BIT     // msb as name end
  83++E13D             >
  83++E13D 28 01       >                dw      Prev_Ptr            // Link to previous definition Name
  83++E13F             >Prev_Ptr        defl    Heap_Ptr
  83++E13F             >
  83++E13F             >mirror_Ptr      defl    $
  83++E13F             >
  83++E13F 17 67       >                dw      Dict_Ptr + 2        // xt
  83++E141             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E141             >
  83++E141             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E141             >
  83++E141             >//              ______________________________________________________________________
  83++E141             >//              Dictionary part
  83++E141             >
  83++E141             >                org     Dict_Ptr
  83++6715             >
  83++6715 3F 01       >                dw      mirror_Ptr - $E000
  83++6717             >
  83++6717             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++6717 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++6717 ~           >
  83++6717 ~           >
  83++6717             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++6717             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++6717             >
  83++6717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++6717 E1                            pop     hl
  85++6718 7D                            ld      a, l                // file-handle
  86++6719 DD E5                         push    ix
  87++671B D5                            push    de
  88++671C C5                            push    bc
  89++671D CF                            rst     $08
  90++671E A0                            db      $A0
  91++671F D9                           exx
  92++6720 C1                           pop     bc                  // IP
  93++6721 D1                           pop     de                  // Return Stack Pointer
  94++6722 DD E1                        pop     ix
  95++6724 D9                            exx
  96++6725 D5                            push    de
  97++6726 C5                            push    bc
  98++6727 ED 62                         sbc     hl, hl
  99++6729 E5                            push    hl
 100++672A D9                           exx
 101++672B                              next
 101++672B DD E9       >                jp      (ix)
 102++672D
 103++672D              //  ______________________________________________________________________
 104++672D              //
 105++672D              // f_read       a b u -- n f
 106++672D              // Read b bytes from file-handle u to address a
 107++672D              // Return the actual number n of bytes read
 108++672D              // Return 0 on success, True flag on error
 109++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 109++672D             >
 109++672D             >Dict_Ptr        defl    $
 109++672D             >
 109++672D             >//              ______________________________________________________________________
 109++672D             >//              Heap part
 109++672D             >
 109++672D             >
 109++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E141             >
 109++E141             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E141             >Latest_Definition defl  Heap_Ptr
 109++E141             >
 109++E141             >                // dummy db directives used to calculate length of namec
 109++E141 46 5F 52 45 >                db      "F_READ"
 109++E145 41 44       >
 109++E147             >len_NFA         defl    $ - temp_NFA
 109++E147             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E141             >
 109++E141 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E142 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E146 41 44       >
 109++E148             >                org     $-1                 // alter last byte of Name just above to set
 109++E147 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E148             >
 109++E148 33 01       >                dw      Prev_Ptr            // Link to previous definition Name
 109++E14A             >Prev_Ptr        defl    Heap_Ptr
 109++E14A             >
 109++E14A             >mirror_Ptr      defl    $
 109++E14A             >
 109++E14A 2F 67       >                dw      Dict_Ptr + 2        // xt
 109++E14C             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E14C             >
 109++E14C             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E14C             >
 109++E14C             >//              ______________________________________________________________________
 109++E14C             >//              Dictionary part
 109++E14C             >
 109++E14C             >                org     Dict_Ptr
 109++672D             >
 109++672D 4A 01       >                dw      mirror_Ptr - $E000
 109++672F             >
 109++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++672F ~           >
 109++672F ~           >
 109++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++672F             >
 109++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++672F D9                            exx
 111++6730 E1                            pop     hl
 112++6731 7D                            ld      a, l                // file-handle
 113++6732 C1                            pop     bc                  // bc has bytes to read
 114++6733 DD E3                         ex      (sp), ix            // ix has address
 115++6735 D9                           exx
 116++6736 D5                           push    de                  // Save Return Stack pointer
 117++6737 C5                           push    bc                  // Save Instruction pointer
 118++6738 D9                            exx
 119++6739 CF                            rst     $08
 120++673A 9D                            db      $9D
 121++673B              F_Read_Exit:
 122++673B D9                           exx
 123++673C C1                           pop     bc                  // Restore Instruction pointer
 124++673D D1                           pop     de                  // Restore Return Stack pointer
 125++673E DD E1                        pop     ix                  // Restore ix
 126++6740 D9                            exx
 127++6741 D5                            push    de                  // bytes involved in i/o operation
 128++6742 ED 62                         sbc     hl, hl
 129++6744 E5                            push    hl
 130++6745 D9                           exx
 131++6746                              next
 131++6746 DD E9       >                jp      (ix)
 132++6748
 133++6748              //  ______________________________________________________________________
 134++6748              //
 135++6748              // f_write      a b u -- n f
 136++6748              // Write bytes currently stored at address a to file-handle u.
 137++6748              // Return the actual n bytes written and 0 on success, True flag on error.
 138++6748                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++6748             >
 138++6748             >Dict_Ptr        defl    $
 138++6748             >
 138++6748             >//              ______________________________________________________________________
 138++6748             >//              Heap part
 138++6748             >
 138++6748             >
 138++6748             >                org     (Heap_Ptr & $1FFF) + $E000
 138++E14C             >
 138++E14C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++E14C             >Latest_Definition defl  Heap_Ptr
 138++E14C             >
 138++E14C             >                // dummy db directives used to calculate length of namec
 138++E14C 46 5F 57 52 >                db      "F_WRITE"
 138++E150 49 54 45    >
 138++E153             >len_NFA         defl    $ - temp_NFA
 138++E153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++E14C             >
 138++E14C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++E14D 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++E151 49 54 45    >
 138++E154             >                org     $-1                 // alter last byte of Name just above to set
 138++E153 C5          >                db      {b $} | END_BIT     // msb as name end
 138++E154             >
 138++E154 41 01       >                dw      Prev_Ptr            // Link to previous definition Name
 138++E156             >Prev_Ptr        defl    Heap_Ptr
 138++E156             >
 138++E156             >mirror_Ptr      defl    $
 138++E156             >
 138++E156 4A 67       >                dw      Dict_Ptr + 2        // xt
 138++E158             >Heap_Ptr        defl    $ - $E000           // save current HP
 138++E158             >
 138++E158             >Current_HP      defl  $ - $E000             // used to set HP once!
 138++E158             >
 138++E158             >//              ______________________________________________________________________
 138++E158             >//              Dictionary part
 138++E158             >
 138++E158             >                org     Dict_Ptr
 138++6748             >
 138++6748 56 01       >                dw      mirror_Ptr - $E000
 138++674A             >
 138++674A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++674A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++674A ~           >
 138++674A ~           >
 138++674A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++674A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++674A             >
 138++674A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++674A D9                            exx
 140++674B E1                            pop     hl
 141++674C 7D                            ld      a, l                // file-handle
 142++674D C1                            pop     bc                  // bc has bytes to read
 143++674E DD E3                         ex      (sp), ix            // ix has address
 144++6750 D9                           exx
 145++6751 D5                           push    de                  // Save Return Stack pointer
 146++6752 C5                           push    bc                  // Save Instruction pointer
 147++6753 D9                            exx
 148++6754 CF                            rst     $08
 149++6755 9E                            db      $9E
 150++6756 18 E3                         jr F_Read_Exit
 151++6758              //                exx
 152++6758              //                pop     de                  // Restore Return Stack pointer
 153++6758              //                pop     bc                  // Restore Instruction pointer
 154++6758              //                pop     ix                  // Restore ix
 155++6758              //                 exx
 156++6758              //                 push    de                  // bytes involved in i/o operation
 157++6758              //                 sbc     hl, hl
 158++6758              //                 push    hl
 159++6758              //                exx
 160++6758              //                next
 161++6758
 162++6758              //  ______________________________________________________________________
 163++6758              //
 164++6758              // f_open       a1 a2 b -- u f
 165++6758              // open a file
 166++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++6758              // a2 is address to an 8-byte header data used in some cases.
 168++6758              // b is access mode-byte, that is a combination of:
 169++6758              // any/all of:
 170++6758              //   esx_mode_read          $01 request read access
 171++6758              //   esx_mode_write         $02 request write access
 172++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 173++6758              // plus one of:
 174++6758              //   esx_mode_open_exist    $00 only open existing file
 175++6758              //   esx_mode_open_creat    $08 open existing or create file
 176++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++6758              // Return file-handle u and 0 on success, True flag on error
 179++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++6758             >
 179++6758             >Dict_Ptr        defl    $
 179++6758             >
 179++6758             >//              ______________________________________________________________________
 179++6758             >//              Heap part
 179++6758             >
 179++6758             >
 179++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 179++E158             >
 179++E158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++E158             >Latest_Definition defl  Heap_Ptr
 179++E158             >
 179++E158             >                // dummy db directives used to calculate length of namec
 179++E158 46 5F 4F 50 >                db      "F_OPEN"
 179++E15C 45 4E       >
 179++E15E             >len_NFA         defl    $ - temp_NFA
 179++E15E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++E158             >
 179++E158 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++E159 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++E15D 45 4E       >
 179++E15F             >                org     $-1                 // alter last byte of Name just above to set
 179++E15E CE          >                db      {b $} | END_BIT     // msb as name end
 179++E15F             >
 179++E15F 4C 01       >                dw      Prev_Ptr            // Link to previous definition Name
 179++E161             >Prev_Ptr        defl    Heap_Ptr
 179++E161             >
 179++E161             >mirror_Ptr      defl    $
 179++E161             >
 179++E161 5A 67       >                dw      Dict_Ptr + 2        // xt
 179++E163             >Heap_Ptr        defl    $ - $E000           // save current HP
 179++E163             >
 179++E163             >Current_HP      defl  $ - $E000             // used to set HP once!
 179++E163             >
 179++E163             >//              ______________________________________________________________________
 179++E163             >//              Dictionary part
 179++E163             >
 179++E163             >                org     Dict_Ptr
 179++6758             >
 179++6758 61 01       >                dw      mirror_Ptr - $E000
 179++675A             >
 179++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++675A ~           >
 179++675A ~           >
 179++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++675A             >
 179++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++675A D9                            exx
 181++675B C1                            pop     bc                  // file-mode
 182++675C 41                            ld      b, c                // file-mode
 183++675D D1                            pop     de                  // 8-bytes buffer if any
 184++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6760 D9                           exx
 186++6761 D5                           push    de                  // Save Return Stack pointer
 187++6762 C5                           push    bc                  // Save Instruction pointer
 188++6763 D9                            exx
 189++6764 3E 2A                         ld      a, "*"
 190++6766 CF                            rst     $08
 191++6767 9A                            db      $9A
 192++6768              F_Open_Exit:
 193++6768 5F                            ld      e, a                // return the handle-number
 194++6769 16 00                         ld      d, 0
 195++676B 18 CE                        jr F_Read_Exit
 196++676D
 197++676D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++676D              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++676D              //   \ DROP
 200++676D              //   \ F_CLOSE
 201++676D
 202++676D
 203++676D              //  ______________________________________________________________________
 204++676D              //
 205++676D              // f_opendir    a1 -- u f
 206++676D              // open a file
 207++676D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++676D             >
 207++676D             >Dict_Ptr        defl    $
 207++676D             >
 207++676D             >//              ______________________________________________________________________
 207++676D             >//              Heap part
 207++676D             >
 207++676D             >
 207++676D             >                org     (Heap_Ptr & $1FFF) + $E000
 207++E163             >
 207++E163             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++E163             >Latest_Definition defl  Heap_Ptr
 207++E163             >
 207++E163             >                // dummy db directives used to calculate length of namec
 207++E163 46 5F 4F 50 >                db      "F_OPENDIR"
 207++E167 45 4E 44 49 >
 207++E16B 52          >
 207++E16C             >len_NFA         defl    $ - temp_NFA
 207++E16C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++E163             >
 207++E163 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++E164 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++E168 45 4E 44 49 >
 207++E16C 52          >
 207++E16D             >                org     $-1                 // alter last byte of Name just above to set
 207++E16C D2          >                db      {b $} | END_BIT     // msb as name end
 207++E16D             >
 207++E16D 58 01       >                dw      Prev_Ptr            // Link to previous definition Name
 207++E16F             >Prev_Ptr        defl    Heap_Ptr
 207++E16F             >
 207++E16F             >mirror_Ptr      defl    $
 207++E16F             >
 207++E16F 6F 67       >                dw      Dict_Ptr + 2        // xt
 207++E171             >Heap_Ptr        defl    $ - $E000           // save current HP
 207++E171             >
 207++E171             >Current_HP      defl  $ - $E000             // used to set HP once!
 207++E171             >
 207++E171             >//              ______________________________________________________________________
 207++E171             >//              Dictionary part
 207++E171             >
 207++E171             >                org     Dict_Ptr
 207++676D             >
 207++676D 6F 01       >                dw      mirror_Ptr - $E000
 207++676F             >
 207++676F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++676F ~           >
 207++676F ~           >
 207++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++676F             >
 207++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++676F DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6771 D5                           push    de                  // Save Return Stack pointer
 210++6772 C5                           push    bc                  // Save Instruction pointer
 211++6773 06 10                        ld      b, $10              // file-mode
 212++6775 3E 43                        ld      a, "C"
 213++6777 CF                           rst     $08
 214++6778 A3                           db      $A3
 215++6779 18 ED                        jr      F_Open_Exit
 216++677B
 217++677B
 218++677B              //  ______________________________________________________________________
 219++677B              //
 220++677B              // f_readdir    a1 a2 b -- u f
 221++677B              // open a file
 222++677B                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++677B             >
 222++677B             >Dict_Ptr        defl    $
 222++677B             >
 222++677B             >//              ______________________________________________________________________
 222++677B             >//              Heap part
 222++677B             >
 222++677B             >
 222++677B             >                org     (Heap_Ptr & $1FFF) + $E000
 222++E171             >
 222++E171             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++E171             >Latest_Definition defl  Heap_Ptr
 222++E171             >
 222++E171             >                // dummy db directives used to calculate length of namec
 222++E171 46 5F 52 45 >                db      "F_READDIR"
 222++E175 41 44 44 49 >
 222++E179 52          >
 222++E17A             >len_NFA         defl    $ - temp_NFA
 222++E17A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++E171             >
 222++E171 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++E172 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++E176 41 44 44 49 >
 222++E17A 52          >
 222++E17B             >                org     $-1                 // alter last byte of Name just above to set
 222++E17A D2          >                db      {b $} | END_BIT     // msb as name end
 222++E17B             >
 222++E17B 63 01       >                dw      Prev_Ptr            // Link to previous definition Name
 222++E17D             >Prev_Ptr        defl    Heap_Ptr
 222++E17D             >
 222++E17D             >mirror_Ptr      defl    $
 222++E17D             >
 222++E17D 7D 67       >                dw      Dict_Ptr + 2        // xt
 222++E17F             >Heap_Ptr        defl    $ - $E000           // save current HP
 222++E17F             >
 222++E17F             >Current_HP      defl  $ - $E000             // used to set HP once!
 222++E17F             >
 222++E17F             >//              ______________________________________________________________________
 222++E17F             >//              Dictionary part
 222++E17F             >
 222++E17F             >                org     Dict_Ptr
 222++677B             >
 222++677B 7D 01       >                dw      mirror_Ptr - $E000
 222++677D             >
 222++677D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++677D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++677D ~           >
 222++677D ~           >
 222++677D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++677D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++677D             >
 222++677D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++677D D9                            exx
 224++677E E1                            pop     hl
 225++677F 7D                            ld      a, l
 226++6780 D1                            pop     de
 227++6781 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6783 D9                           exx
 229++6784 D5                           push    de                  // Save Return Stack pointer
 230++6785 C5                           push    bc                  // Save Instruction pointer
 231++6786 D9                            exx
 232++6787 CF                            rst     $08
 233++6788 A4                            db      $A4
 234++6789 18 DD                         jr      F_Open_Exit
 235++678B
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1066+ 678B
1067+ 678B
1068+ 678B              //  ______________________________________________________________________
1069+ 678B              //
1070+ 678B              // cmove    a1 a2 u --
1071+ 678B              // If u > 0, moves memory content starting at address a1 for n bytes long
1072+ 678B              // storing then starting at address addr2.
1073+ 678B              // The content of a1 is moved first. See CMOVE> also.
1074+ 678B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1074+ 678B             >
1074+ 678B             >Dict_Ptr        defl    $
1074+ 678B             >
1074+ 678B             >//              ______________________________________________________________________
1074+ 678B             >//              Heap part
1074+ 678B             >
1074+ 678B             >
1074+ 678B             >                org     (Heap_Ptr & $1FFF) + $E000
1074+ E17F             >
1074+ E17F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ E17F             >Latest_Definition defl  Heap_Ptr
1074+ E17F             >
1074+ E17F             >                // dummy db directives used to calculate length of namec
1074+ E17F 43 4D 4F 56 >                db      "CMOVE"
1074+ E183 45          >
1074+ E184             >len_NFA         defl    $ - temp_NFA
1074+ E184             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ E17F             >
1074+ E17F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ E180 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1074+ E184 45          >
1074+ E185             >                org     $-1                 // alter last byte of Name just above to set
1074+ E184 C5          >                db      {b $} | END_BIT     // msb as name end
1074+ E185             >
1074+ E185 71 01       >                dw      Prev_Ptr            // Link to previous definition Name
1074+ E187             >Prev_Ptr        defl    Heap_Ptr
1074+ E187             >
1074+ E187             >mirror_Ptr      defl    $
1074+ E187             >
1074+ E187 8D 67       >                dw      Dict_Ptr + 2        // xt
1074+ E189             >Heap_Ptr        defl    $ - $E000           // save current HP
1074+ E189             >
1074+ E189             >Current_HP      defl  $ - $E000             // used to set HP once!
1074+ E189             >
1074+ E189             >//              ______________________________________________________________________
1074+ E189             >//              Dictionary part
1074+ E189             >
1074+ E189             >                org     Dict_Ptr
1074+ 678B             >
1074+ 678B 87 01       >                dw      mirror_Ptr - $E000
1074+ 678D             >
1074+ 678D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1074+ 678D ~           >
1074+ 678D ~           >
1074+ 678D             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 678D             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 678D             >
1074+ 678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 678D D9                           exx
1076+ 678E
1077+ 678E C1                           pop     bc                  // bc has counter
1078+ 678F D1                           pop     de                  // de now has dest
1079+ 6790 E1                           pop     hl                 // hl has source, save Instruction Pointer
1080+ 6791 78                           ld      a, b
1081+ 6792 B1                           or      c
1082+ 6793 28 02                        jr      z, Cmove_NoMove
1083+ 6795 ED B0                            ldir
1084+ 6797              Cmove_NoMove:
1085+ 6797 D9                           exx
1086+ 6798
1087+ 6798                              next
1087+ 6798 DD E9       >                jp      (ix)
1088+ 679A
1089+ 679A              //  ______________________________________________________________________
1090+ 679A              //
1091+ 679A              // cmove>    a1 a2 u --
1092+ 679A              // If u > 0, moves memory content starting at address a1 for n bytes long
1093+ 679A              // storing then starting at address addr2.
1094+ 679A              // The content of a1 is moved last. See cmove.
1095+ 679A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1095+ 679A             >
1095+ 679A             >Dict_Ptr        defl    $
1095+ 679A             >
1095+ 679A             >//              ______________________________________________________________________
1095+ 679A             >//              Heap part
1095+ 679A             >
1095+ 679A             >
1095+ 679A             >                org     (Heap_Ptr & $1FFF) + $E000
1095+ E189             >
1095+ E189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1095+ E189             >Latest_Definition defl  Heap_Ptr
1095+ E189             >
1095+ E189             >                // dummy db directives used to calculate length of namec
1095+ E189 43 4D 4F 56 >                db      "CMOVE>"
1095+ E18D 45 3E       >
1095+ E18F             >len_NFA         defl    $ - temp_NFA
1095+ E18F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1095+ E189             >
1095+ E189 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1095+ E18A 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1095+ E18E 45 3E       >
1095+ E190             >                org     $-1                 // alter last byte of Name just above to set
1095+ E18F BE          >                db      {b $} | END_BIT     // msb as name end
1095+ E190             >
1095+ E190 7F 01       >                dw      Prev_Ptr            // Link to previous definition Name
1095+ E192             >Prev_Ptr        defl    Heap_Ptr
1095+ E192             >
1095+ E192             >mirror_Ptr      defl    $
1095+ E192             >
1095+ E192 9C 67       >                dw      Dict_Ptr + 2        // xt
1095+ E194             >Heap_Ptr        defl    $ - $E000           // save current HP
1095+ E194             >
1095+ E194             >Current_HP      defl  $ - $E000             // used to set HP once!
1095+ E194             >
1095+ E194             >//              ______________________________________________________________________
1095+ E194             >//              Dictionary part
1095+ E194             >
1095+ E194             >                org     Dict_Ptr
1095+ 679A             >
1095+ 679A 92 01       >                dw      mirror_Ptr - $E000
1095+ 679C             >
1095+ 679C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1095+ 679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1095+ 679C ~           >
1095+ 679C ~           >
1095+ 679C             >                endif           ; ok        // for other definitions it "points" the correct handler
1095+ 679C             >                // Use of "; ok" to suppress "warning[fwdref]"
1095+ 679C             >
1095+ 679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1096+ 679C D9                           exx
1097+ 679D
1098+ 679D C1                           pop     bc                  // bc has counter
1099+ 679E D1                           pop     de                  // de has dest
1100+ 679F E1                           pop     hl                  // hl has source, save Instruction Pointer
1101+ 67A0 78                           ld      a, b
1102+ 67A1 B1                           or      c
1103+ 67A2 28 08                        jr      z, CmoveV_NoMove
1104+ 67A4 EB                               ex      de, hl              // compute address to
1105+ 67A5 09                               add     hl, bc              // operate backward
1106+ 67A6 2B                               dec     hl
1107+ 67A7 EB                               ex      de, hl
1108+ 67A8 09                               add     hl, bc
1109+ 67A9 2B                               dec     hl
1110+ 67AA ED B8                            lddr                        // backward
1111+ 67AC              CmoveV_NoMove:
1112+ 67AC D9                           exx
1113+ 67AD
1114+ 67AD                              next
1114+ 67AD DD E9       >                jp      (ix)
1115+ 67AF
1116+ 67AF              //  ______________________________________________________________________
1117+ 67AF              //
1118+ 67AF              // um*      u1 u2 -- ud
1119+ 67AF              // Unsigned multiplication
1120+ 67AF              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1121+ 67AF              // On the stack a double number is treated as two single numbers
1122+ 67AF              // where DE is on the top of the stack and HL is the second from top,
1123+ 67AF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1124+ 67AF              // this definition could use "MUL" Z80N new op-code.
1125+ 67AF                              New_Def UM_MUL, "UM*", is_code, is_normal
1125+ 67AF             >
1125+ 67AF             >Dict_Ptr        defl    $
1125+ 67AF             >
1125+ 67AF             >//              ______________________________________________________________________
1125+ 67AF             >//              Heap part
1125+ 67AF             >
1125+ 67AF             >
1125+ 67AF             >                org     (Heap_Ptr & $1FFF) + $E000
1125+ E194             >
1125+ E194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ E194             >Latest_Definition defl  Heap_Ptr
1125+ E194             >
1125+ E194             >                // dummy db directives used to calculate length of namec
1125+ E194 55 4D 2A    >                db      "UM*"
1125+ E197             >len_NFA         defl    $ - temp_NFA
1125+ E197             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ E194             >
1125+ E194 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ E195 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1125+ E198             >                org     $-1                 // alter last byte of Name just above to set
1125+ E197 AA          >                db      {b $} | END_BIT     // msb as name end
1125+ E198             >
1125+ E198 89 01       >                dw      Prev_Ptr            // Link to previous definition Name
1125+ E19A             >Prev_Ptr        defl    Heap_Ptr
1125+ E19A             >
1125+ E19A             >mirror_Ptr      defl    $
1125+ E19A             >
1125+ E19A B1 67       >                dw      Dict_Ptr + 2        // xt
1125+ E19C             >Heap_Ptr        defl    $ - $E000           // save current HP
1125+ E19C             >
1125+ E19C             >Current_HP      defl  $ - $E000             // used to set HP once!
1125+ E19C             >
1125+ E19C             >//              ______________________________________________________________________
1125+ E19C             >//              Dictionary part
1125+ E19C             >
1125+ E19C             >                org     Dict_Ptr
1125+ 67AF             >
1125+ 67AF 9A 01       >                dw      mirror_Ptr - $E000
1125+ 67B1             >
1125+ 67B1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1125+ 67B1 ~           >
1125+ 67B1 ~           >
1125+ 67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 67B1             >
1125+ 67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 67B1 D9                           exx
1127+ 67B2 D1                           pop     de                    // de has u2 operand
1128+ 67B3 E1                           pop     hl                    // hl has u1 operand
1129+ 67B4 45                           ld      b, l
1130+ 67B5 4B                           ld      c, e
1131+ 67B6 5D                           ld      e, l
1132+ 67B7 6A                           ld      l, d
1133+ 67B8 E5                           push    hl
1134+ 67B9 69                           ld      l, c
1135+ 67BA ED 30                        mul
1136+ 67BC EB                           ex      de, hl
1137+ 67BD ED 30                        mul
1138+ 67BF AF                           xor     a
1139+ 67C0 19                           add     hl, de
1140+ 67C1 8F                           adc     a
1141+ 67C2 59                           ld      e, c
1142+ 67C3 50                           ld      d, b
1143+ 67C4 ED 30                        mul
1144+ 67C6 47                           ld      b, a
1145+ 67C7 4C                           ld      c, h
1146+ 67C8 7A                           ld      a, d
1147+ 67C9 85                           add     l
1148+ 67CA 67                           ld      h, a
1149+ 67CB 6B                           ld      l, e
1150+ 67CC D1                           pop     de
1151+ 67CD ED 30                        mul
1152+ 67CF EB                           ex      de, hl
1153+ 67D0 ED 4A                        adc     hl, bc
1154+ 67D2 D5                           push    de
1155+ 67D3 E5                           push    hl
1156+ 67D4 D9                           exx
1157+ 67D5                              next
1157+ 67D5 DD E9       >                jp      (ix)
1158+ 67D7
1159+ 67D7              //  ______________________________________________________________________
1160+ 67D7              //
1161+ 67D7              // um/mod      ud u1 -- q r
1162+ 67D7              // divides ud into u1 giving quotient q and remainder r
1163+ 67D7              // algorithm takes 16 bit at a time starting from msb
1164+ 67D7              // DE grows from lsb upward with quotient result
1165+ 67D7              // HL keeps the remainder at each stage of division
1166+ 67D7              // each loop 'lowers' the next binary digit to form the current dividend
1167+ 67D7                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1167+ 67D7             >
1167+ 67D7             >Dict_Ptr        defl    $
1167+ 67D7             >
1167+ 67D7             >//              ______________________________________________________________________
1167+ 67D7             >//              Heap part
1167+ 67D7             >
1167+ 67D7             >
1167+ 67D7             >                org     (Heap_Ptr & $1FFF) + $E000
1167+ E19C             >
1167+ E19C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1167+ E19C             >Latest_Definition defl  Heap_Ptr
1167+ E19C             >
1167+ E19C             >                // dummy db directives used to calculate length of namec
1167+ E19C 55 4D 2F 4D >                db      "UM/MOD"
1167+ E1A0 4F 44       >
1167+ E1A2             >len_NFA         defl    $ - temp_NFA
1167+ E1A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1167+ E19C             >
1167+ E19C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1167+ E19D 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1167+ E1A1 4F 44       >
1167+ E1A3             >                org     $-1                 // alter last byte of Name just above to set
1167+ E1A2 C4          >                db      {b $} | END_BIT     // msb as name end
1167+ E1A3             >
1167+ E1A3 94 01       >                dw      Prev_Ptr            // Link to previous definition Name
1167+ E1A5             >Prev_Ptr        defl    Heap_Ptr
1167+ E1A5             >
1167+ E1A5             >mirror_Ptr      defl    $
1167+ E1A5             >
1167+ E1A5 D9 67       >                dw      Dict_Ptr + 2        // xt
1167+ E1A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1167+ E1A7             >
1167+ E1A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1167+ E1A7             >
1167+ E1A7             >//              ______________________________________________________________________
1167+ E1A7             >//              Dictionary part
1167+ E1A7             >
1167+ E1A7             >                org     Dict_Ptr
1167+ 67D7             >
1167+ 67D7 A5 01       >                dw      mirror_Ptr - $E000
1167+ 67D9             >
1167+ 67D9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1167+ 67D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1167+ 67D9 ~           >
1167+ 67D9 ~           >
1167+ 67D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1167+ 67D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1167+ 67D9             >
1167+ 67D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1168+ 67D9 D9                           exx
1169+ 67DA C1                           pop     bc                      // divisor
1170+ 67DB
1171+ 67DB E1                           pop     hl                      // < high part
1172+ 67DC D1                           pop     de                      // < low part and
1173+ 67DD
1174+ 67DD 7D                           ld      a, l                    // check without changing arguments
1175+ 67DE 91                           sub     c                       // if divisor is greater than high part
1176+ 67DF 7C                           ld      a, h                    // so quotient will be in range
1177+ 67E0 98                           sbc     a, b
1178+ 67E1 30 20                        jr      nc, Um_DivMod_OutOfRange
1179+ 67E3 3E 10                            ld      a, 16
1180+ 67E5              Um_DivMod_Loop:
1181+ 67E5 CB 23                                sla     e
1182+ 67E7 CB 12                                rl      d
1183+ 67E9 ED 6A                                adc     hl, hl
1184+ 67EB 30 05                                jr      nc, Um_DivMod_Carry
1185+ 67ED A7                                       and     a
1186+ 67EE ED 42                                    sbc     hl, bc
1187+ 67F0 18 07                                jr      Um_DivMod_Endif    // else
1188+ 67F2              Um_DivMod_Carry:
1189+ 67F2 A7                                       and     a
1190+ 67F3 ED 42                                    sbc     hl, bc
1191+ 67F5 30 02                                    jr      nc, Um_DivMod_Endif
1192+ 67F7 09                                           add     hl, bc
1193+ 67F8 1B                                           dec     de
1194+ 67F9              Um_DivMod_Endif:                                   // endif
1195+ 67F9 13                                   inc     de
1196+ 67FA 3D                                   dec     a
1197+ 67FB 20 E8                            jr      nz, Um_DivMod_Loop
1198+ 67FD EB                               ex      de, hl
1199+ 67FE              Um_DivMod_Bailout:
1200+ 67FE D5                               push    de                  // de := remanider
1201+ 67FF E5                               push    hl                  // hl := quotient
1202+ 6800 D9                               exx
1203+ 6801                                  next
1203+ 6801 DD E9       >                jp      (ix)
1204+ 6803
1205+ 6803              Um_DivMod_OutOfRange:
1206+ 6803 21 FF FF                     ld      hl, -1
1207+ 6806 54                           ld      d, h
1208+ 6807 5D                           ld      e, l
1209+ 6808 18 F4                        jr      Um_DivMod_Bailout
1210+ 680A
1211+ 680A              //  ______________________________________________________________________
1212+ 680A              //
1213+ 680A              // and          n1 n2 -- n3
1214+ 680A              // bit logical AND. Returns n3 as n1 & n2
1215+ 680A                              New_Def AND_OP, "AND", is_code, is_normal
1215+ 680A             >
1215+ 680A             >Dict_Ptr        defl    $
1215+ 680A             >
1215+ 680A             >//              ______________________________________________________________________
1215+ 680A             >//              Heap part
1215+ 680A             >
1215+ 680A             >
1215+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1215+ E1A7             >
1215+ E1A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ E1A7             >Latest_Definition defl  Heap_Ptr
1215+ E1A7             >
1215+ E1A7             >                // dummy db directives used to calculate length of namec
1215+ E1A7 41 4E 44    >                db      "AND"
1215+ E1AA             >len_NFA         defl    $ - temp_NFA
1215+ E1AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ E1A7             >
1215+ E1A7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ E1A8 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1215+ E1AB             >                org     $-1                 // alter last byte of Name just above to set
1215+ E1AA C4          >                db      {b $} | END_BIT     // msb as name end
1215+ E1AB             >
1215+ E1AB 9C 01       >                dw      Prev_Ptr            // Link to previous definition Name
1215+ E1AD             >Prev_Ptr        defl    Heap_Ptr
1215+ E1AD             >
1215+ E1AD             >mirror_Ptr      defl    $
1215+ E1AD             >
1215+ E1AD 0C 68       >                dw      Dict_Ptr + 2        // xt
1215+ E1AF             >Heap_Ptr        defl    $ - $E000           // save current HP
1215+ E1AF             >
1215+ E1AF             >Current_HP      defl  $ - $E000             // used to set HP once!
1215+ E1AF             >
1215+ E1AF             >//              ______________________________________________________________________
1215+ E1AF             >//              Dictionary part
1215+ E1AF             >
1215+ E1AF             >                org     Dict_Ptr
1215+ 680A             >
1215+ 680A AD 01       >                dw      mirror_Ptr - $E000
1215+ 680C             >
1215+ 680C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1215+ 680C ~           >
1215+ 680C ~           >
1215+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 680C             >
1215+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 680C D9                           exx
1217+ 680D D1                           pop     de
1218+ 680E E1                           pop     hl
1219+ 680F 7B                           ld      a, e
1220+ 6810 A5                           and     l
1221+ 6811 6F                           ld      l, a
1222+ 6812 7A                           ld      a, d
1223+ 6813 A4                           and     h
1224+ 6814 67                           ld      h, a
1225+ 6815 E5                           push    hl
1226+ 6816 D9                           exx
1227+ 6817                              next
1227+ 6817 DD E9       >                jp      (ix)
1228+ 6819
1229+ 6819              //  ______________________________________________________________________
1230+ 6819              //
1231+ 6819              // or           n1 n2 -- n3
1232+ 6819              // bit logical OR. Returns n3 as n1 | n2
1233+ 6819                              New_Def OR_OP, "OR", is_code, is_normal
1233+ 6819             >
1233+ 6819             >Dict_Ptr        defl    $
1233+ 6819             >
1233+ 6819             >//              ______________________________________________________________________
1233+ 6819             >//              Heap part
1233+ 6819             >
1233+ 6819             >
1233+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1233+ E1AF             >
1233+ E1AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1233+ E1AF             >Latest_Definition defl  Heap_Ptr
1233+ E1AF             >
1233+ E1AF             >                // dummy db directives used to calculate length of namec
1233+ E1AF 4F 52       >                db      "OR"
1233+ E1B1             >len_NFA         defl    $ - temp_NFA
1233+ E1B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1233+ E1AF             >
1233+ E1AF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1233+ E1B0 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1233+ E1B2             >                org     $-1                 // alter last byte of Name just above to set
1233+ E1B1 D2          >                db      {b $} | END_BIT     // msb as name end
1233+ E1B2             >
1233+ E1B2 A7 01       >                dw      Prev_Ptr            // Link to previous definition Name
1233+ E1B4             >Prev_Ptr        defl    Heap_Ptr
1233+ E1B4             >
1233+ E1B4             >mirror_Ptr      defl    $
1233+ E1B4             >
1233+ E1B4 1B 68       >                dw      Dict_Ptr + 2        // xt
1233+ E1B6             >Heap_Ptr        defl    $ - $E000           // save current HP
1233+ E1B6             >
1233+ E1B6             >Current_HP      defl  $ - $E000             // used to set HP once!
1233+ E1B6             >
1233+ E1B6             >//              ______________________________________________________________________
1233+ E1B6             >//              Dictionary part
1233+ E1B6             >
1233+ E1B6             >                org     Dict_Ptr
1233+ 6819             >
1233+ 6819 B4 01       >                dw      mirror_Ptr - $E000
1233+ 681B             >
1233+ 681B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1233+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1233+ 681B ~           >
1233+ 681B ~           >
1233+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1233+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1233+ 681B             >
1233+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1234+ 681B D9                           exx
1235+ 681C D1                           pop     de
1236+ 681D E1                           pop     hl
1237+ 681E 7B                           ld      a, e
1238+ 681F B5                           or      l
1239+ 6820 6F                           ld      l, a
1240+ 6821 7A                           ld      a, d
1241+ 6822 B4                           or      h
1242+ 6823 67                           ld      h, a
1243+ 6824 E5                           push    hl
1244+ 6825 D9                           exx
1245+ 6826                              next
1245+ 6826 DD E9       >                jp      (ix)
1246+ 6828
1247+ 6828              //  ______________________________________________________________________
1248+ 6828              //
1249+ 6828              // xor          n1 n2 -- n3
1250+ 6828              // bit logical OR. Returns n3 as n1 ^ n2
1251+ 6828                              New_Def XOR_OP, "XOR", is_code, is_normal
1251+ 6828             >
1251+ 6828             >Dict_Ptr        defl    $
1251+ 6828             >
1251+ 6828             >//              ______________________________________________________________________
1251+ 6828             >//              Heap part
1251+ 6828             >
1251+ 6828             >
1251+ 6828             >                org     (Heap_Ptr & $1FFF) + $E000
1251+ E1B6             >
1251+ E1B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ E1B6             >Latest_Definition defl  Heap_Ptr
1251+ E1B6             >
1251+ E1B6             >                // dummy db directives used to calculate length of namec
1251+ E1B6 58 4F 52    >                db      "XOR"
1251+ E1B9             >len_NFA         defl    $ - temp_NFA
1251+ E1B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ E1B6             >
1251+ E1B6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ E1B7 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1251+ E1BA             >                org     $-1                 // alter last byte of Name just above to set
1251+ E1B9 D2          >                db      {b $} | END_BIT     // msb as name end
1251+ E1BA             >
1251+ E1BA AF 01       >                dw      Prev_Ptr            // Link to previous definition Name
1251+ E1BC             >Prev_Ptr        defl    Heap_Ptr
1251+ E1BC             >
1251+ E1BC             >mirror_Ptr      defl    $
1251+ E1BC             >
1251+ E1BC 2A 68       >                dw      Dict_Ptr + 2        // xt
1251+ E1BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1251+ E1BE             >
1251+ E1BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1251+ E1BE             >
1251+ E1BE             >//              ______________________________________________________________________
1251+ E1BE             >//              Dictionary part
1251+ E1BE             >
1251+ E1BE             >                org     Dict_Ptr
1251+ 6828             >
1251+ 6828 BC 01       >                dw      mirror_Ptr - $E000
1251+ 682A             >
1251+ 682A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 682A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 682A ~           >
1251+ 682A ~           >
1251+ 682A             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 682A             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 682A             >
1251+ 682A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 682A D9                           exx
1253+ 682B D1                           pop     de
1254+ 682C E1                           pop     hl
1255+ 682D 7B                           ld      a, e
1256+ 682E AD                           xor     l
1257+ 682F 6F                           ld      l, a
1258+ 6830 7A                           ld      a, d
1259+ 6831 AC                           xor     h
1260+ 6832 67                           ld      h, a
1261+ 6833 E5                           push    hl
1262+ 6834 D9                           exx
1263+ 6835                              next
1263+ 6835 DD E9       >                jp      (ix)
1264+ 6837
1265+ 6837              //  ______________________________________________________________________
1266+ 6837              //
1267+ 6837              // sp@      -- a
1268+ 6837              // returns on top of stack the value of SP before execution
1269+ 6837                              New_Def SPFETCH, "SP@", is_code, is_normal
1269+ 6837             >
1269+ 6837             >Dict_Ptr        defl    $
1269+ 6837             >
1269+ 6837             >//              ______________________________________________________________________
1269+ 6837             >//              Heap part
1269+ 6837             >
1269+ 6837             >
1269+ 6837             >                org     (Heap_Ptr & $1FFF) + $E000
1269+ E1BE             >
1269+ E1BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ E1BE             >Latest_Definition defl  Heap_Ptr
1269+ E1BE             >
1269+ E1BE             >                // dummy db directives used to calculate length of namec
1269+ E1BE 53 50 40    >                db      "SP@"
1269+ E1C1             >len_NFA         defl    $ - temp_NFA
1269+ E1C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ E1BE             >
1269+ E1BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ E1BF 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1269+ E1C2             >                org     $-1                 // alter last byte of Name just above to set
1269+ E1C1 C0          >                db      {b $} | END_BIT     // msb as name end
1269+ E1C2             >
1269+ E1C2 B6 01       >                dw      Prev_Ptr            // Link to previous definition Name
1269+ E1C4             >Prev_Ptr        defl    Heap_Ptr
1269+ E1C4             >
1269+ E1C4             >mirror_Ptr      defl    $
1269+ E1C4             >
1269+ E1C4 39 68       >                dw      Dict_Ptr + 2        // xt
1269+ E1C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1269+ E1C6             >
1269+ E1C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1269+ E1C6             >
1269+ E1C6             >//              ______________________________________________________________________
1269+ E1C6             >//              Dictionary part
1269+ E1C6             >
1269+ E1C6             >                org     Dict_Ptr
1269+ 6837             >
1269+ 6837 C4 01       >                dw      mirror_Ptr - $E000
1269+ 6839             >
1269+ 6839             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 6839 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1269+ 6839 ~           >
1269+ 6839 ~           >
1269+ 6839             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 6839             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 6839             >
1269+ 6839             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 6839
1271+ 6839 21 00 00                     ld      hl, 0
1272+ 683C 39                           add     hl, sp
1273+ 683D
1274+ 683D                              psh1
1274+ 683D E5          >                push    hl
1274+ 683E DD E9       >                jp      (ix)
1275+ 6840
1276+ 6840              //  ______________________________________________________________________
1277+ 6840              //
1278+ 6840              // sp!      a --
1279+ 6840              // restore SP to the initial value passed
1280+ 6840              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1281+ 6840                              New_Def SPSTORE, "SP!", is_code, is_normal
1281+ 6840             >
1281+ 6840             >Dict_Ptr        defl    $
1281+ 6840             >
1281+ 6840             >//              ______________________________________________________________________
1281+ 6840             >//              Heap part
1281+ 6840             >
1281+ 6840             >
1281+ 6840             >                org     (Heap_Ptr & $1FFF) + $E000
1281+ E1C6             >
1281+ E1C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ E1C6             >Latest_Definition defl  Heap_Ptr
1281+ E1C6             >
1281+ E1C6             >                // dummy db directives used to calculate length of namec
1281+ E1C6 53 50 21    >                db      "SP!"
1281+ E1C9             >len_NFA         defl    $ - temp_NFA
1281+ E1C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ E1C6             >
1281+ E1C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ E1C7 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1281+ E1CA             >                org     $-1                 // alter last byte of Name just above to set
1281+ E1C9 A1          >                db      {b $} | END_BIT     // msb as name end
1281+ E1CA             >
1281+ E1CA BE 01       >                dw      Prev_Ptr            // Link to previous definition Name
1281+ E1CC             >Prev_Ptr        defl    Heap_Ptr
1281+ E1CC             >
1281+ E1CC             >mirror_Ptr      defl    $
1281+ E1CC             >
1281+ E1CC 42 68       >                dw      Dict_Ptr + 2        // xt
1281+ E1CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1281+ E1CE             >
1281+ E1CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1281+ E1CE             >
1281+ E1CE             >//              ______________________________________________________________________
1281+ E1CE             >//              Dictionary part
1281+ E1CE             >
1281+ E1CE             >                org     Dict_Ptr
1281+ 6840             >
1281+ 6840 CC 01       >                dw      mirror_Ptr - $E000
1281+ 6842             >
1281+ 6842             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 6842 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1281+ 6842 ~           >
1281+ 6842 ~           >
1281+ 6842             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 6842             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 6842             >
1281+ 6842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 6842 E1                           pop     hl
1283+ 6843 F9                           ld      sp, hl
1284+ 6844
1285+ 6844                              next
1285+ 6844 DD E9       >                jp      (ix)
1286+ 6846
1287+ 6846              //  ______________________________________________________________________
1288+ 6846              //
1289+ 6846              // rp@      -- a
1290+ 6846              // returns on top of stack the value of Return-Pointer
1291+ 6846                              New_Def RPFETCH, "RP@", is_code, is_normal
1291+ 6846             >
1291+ 6846             >Dict_Ptr        defl    $
1291+ 6846             >
1291+ 6846             >//              ______________________________________________________________________
1291+ 6846             >//              Heap part
1291+ 6846             >
1291+ 6846             >
1291+ 6846             >                org     (Heap_Ptr & $1FFF) + $E000
1291+ E1CE             >
1291+ E1CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1291+ E1CE             >Latest_Definition defl  Heap_Ptr
1291+ E1CE             >
1291+ E1CE             >                // dummy db directives used to calculate length of namec
1291+ E1CE 52 50 40    >                db      "RP@"
1291+ E1D1             >len_NFA         defl    $ - temp_NFA
1291+ E1D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1291+ E1CE             >
1291+ E1CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1291+ E1CF 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1291+ E1D2             >                org     $-1                 // alter last byte of Name just above to set
1291+ E1D1 C0          >                db      {b $} | END_BIT     // msb as name end
1291+ E1D2             >
1291+ E1D2 C6 01       >                dw      Prev_Ptr            // Link to previous definition Name
1291+ E1D4             >Prev_Ptr        defl    Heap_Ptr
1291+ E1D4             >
1291+ E1D4             >mirror_Ptr      defl    $
1291+ E1D4             >
1291+ E1D4 48 68       >                dw      Dict_Ptr + 2        // xt
1291+ E1D6             >Heap_Ptr        defl    $ - $E000           // save current HP
1291+ E1D6             >
1291+ E1D6             >Current_HP      defl  $ - $E000             // used to set HP once!
1291+ E1D6             >
1291+ E1D6             >//              ______________________________________________________________________
1291+ E1D6             >//              Dictionary part
1291+ E1D6             >
1291+ E1D6             >                org     Dict_Ptr
1291+ 6846             >
1291+ 6846 D4 01       >                dw      mirror_Ptr - $E000
1291+ 6848             >
1291+ 6848             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1291+ 6848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1291+ 6848 ~           >
1291+ 6848 ~           >
1291+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
1291+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
1291+ 6848             >
1291+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1292+ 6848
1293+ 6848                              // *** ldhlrp
1294+ 6848                              // *** ex      de, hl
1295+ 6848 D5                           push de
1296+ 6849
1297+ 6849                              next
1297+ 6849 DD E9       >                jp      (ix)
1298+ 684B
1299+ 684B              //  ______________________________________________________________________
1300+ 684B              //
1301+ 684B              // rp!      a --
1302+ 684B              // restore RP to the initial value passed
1303+ 684B              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1304+ 684B                              New_Def RPSTORE, "RP!", is_code, is_normal
1304+ 684B             >
1304+ 684B             >Dict_Ptr        defl    $
1304+ 684B             >
1304+ 684B             >//              ______________________________________________________________________
1304+ 684B             >//              Heap part
1304+ 684B             >
1304+ 684B             >
1304+ 684B             >                org     (Heap_Ptr & $1FFF) + $E000
1304+ E1D6             >
1304+ E1D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ E1D6             >Latest_Definition defl  Heap_Ptr
1304+ E1D6             >
1304+ E1D6             >                // dummy db directives used to calculate length of namec
1304+ E1D6 52 50 21    >                db      "RP!"
1304+ E1D9             >len_NFA         defl    $ - temp_NFA
1304+ E1D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ E1D6             >
1304+ E1D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ E1D7 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1304+ E1DA             >                org     $-1                 // alter last byte of Name just above to set
1304+ E1D9 A1          >                db      {b $} | END_BIT     // msb as name end
1304+ E1DA             >
1304+ E1DA CE 01       >                dw      Prev_Ptr            // Link to previous definition Name
1304+ E1DC             >Prev_Ptr        defl    Heap_Ptr
1304+ E1DC             >
1304+ E1DC             >mirror_Ptr      defl    $
1304+ E1DC             >
1304+ E1DC 4D 68       >                dw      Dict_Ptr + 2        // xt
1304+ E1DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1304+ E1DE             >
1304+ E1DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1304+ E1DE             >
1304+ E1DE             >//              ______________________________________________________________________
1304+ E1DE             >//              Dictionary part
1304+ E1DE             >
1304+ E1DE             >                org     Dict_Ptr
1304+ 684B             >
1304+ 684B DC 01       >                dw      mirror_Ptr - $E000
1304+ 684D             >
1304+ 684D             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 684D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 684D ~           >
1304+ 684D ~           >
1304+ 684D             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 684D             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 684D             >
1304+ 684D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 684D D1                           pop     de
1306+ 684E                              // *** ex      de, hl
1307+ 684E                              // *** ldrphl
1308+ 684E
1309+ 684E                              next
1309+ 684E DD E9       >                jp      (ix)
1310+ 6850
1311+ 6850              //  ______________________________________________________________________
1312+ 6850              //
1313+ 6850              // exit       --
1314+ 6850              // exits back to the caller word
1315+ 6850                              New_Def EXIT, "EXIT", is_code, is_normal
1315+ 6850             >
1315+ 6850             >Dict_Ptr        defl    $
1315+ 6850             >
1315+ 6850             >//              ______________________________________________________________________
1315+ 6850             >//              Heap part
1315+ 6850             >
1315+ 6850             >
1315+ 6850             >                org     (Heap_Ptr & $1FFF) + $E000
1315+ E1DE             >
1315+ E1DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1315+ E1DE             >Latest_Definition defl  Heap_Ptr
1315+ E1DE             >
1315+ E1DE             >                // dummy db directives used to calculate length of namec
1315+ E1DE 45 58 49 54 >                db      "EXIT"
1315+ E1E2             >len_NFA         defl    $ - temp_NFA
1315+ E1E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1315+ E1DE             >
1315+ E1DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1315+ E1DF 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1315+ E1E3             >                org     $-1                 // alter last byte of Name just above to set
1315+ E1E2 D4          >                db      {b $} | END_BIT     // msb as name end
1315+ E1E3             >
1315+ E1E3 D6 01       >                dw      Prev_Ptr            // Link to previous definition Name
1315+ E1E5             >Prev_Ptr        defl    Heap_Ptr
1315+ E1E5             >
1315+ E1E5             >mirror_Ptr      defl    $
1315+ E1E5             >
1315+ E1E5 52 68       >                dw      Dict_Ptr + 2        // xt
1315+ E1E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1315+ E1E7             >
1315+ E1E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1315+ E1E7             >
1315+ E1E7             >//              ______________________________________________________________________
1315+ E1E7             >//              Dictionary part
1315+ E1E7             >
1315+ E1E7             >                org     Dict_Ptr
1315+ 6850             >
1315+ 6850 E5 01       >                dw      mirror_Ptr - $E000
1315+ 6852             >
1315+ 6852             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1315+ 6852 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1315+ 6852 ~           >
1315+ 6852 ~           >
1315+ 6852             >                endif           ; ok        // for other definitions it "points" the correct handler
1315+ 6852             >                // Use of "; ok" to suppress "warning[fwdref]"
1315+ 6852             >
1315+ 6852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1316+ 6852 EB                           ex      de, hl
1317+ 6853                              // *** ldhlrp                      // Get Return Stack Pointer
1318+ 6853 4E                           ld      c, (hl)             // pop Instruction Pointer
1319+ 6854 23                           inc     hl                  // from Return Stack
1320+ 6855 46                           ld      b, (hl)
1321+ 6856 23                           inc     hl
1322+ 6857                              // *** ldrphl                      // Set Return Stack Pointer
1323+ 6857 EB                           ex      de, hl
1324+ 6858                              next
1324+ 6858 DD E9       >                jp      (ix)
1325+ 685A
1326+ 685A              //  ______________________________________________________________________
1327+ 685A              //
1328+ 685A              // lastl      --
1329+ 685A              // exits back to the caller word
1330+ 685A              //              New_Def EXIT, "LASTL", is_code, is_normal
1331+ 685A              //              push    de
1332+ 685A              //              ex      de, hl //**
1333+ 685A              //              // *** ldhlrp                      // Get Return Stack Pointer
1334+ 685A              //              ld      e, (hl)             // pop Instruction Pointer
1335+ 685A              //              inc     hl                  // from Return Stack
1336+ 685A              //              ld      d, (hl)
1337+ 685A              //              inc     hl
1338+ 685A              //              ld      (hl), e
1339+ 685A              //              inc     hl
1340+ 685A              //              ld      (hl), d
1341+ 685A              //              add     hl, -3
1342+ 685A              //              pop     de
1343+ 685A              //              next
1344+ 685A
1345+ 685A              //  ______________________________________________________________________
1346+ 685A              //
1347+ 685A              // >r      n --
1348+ 685A              // pop from calculator-stack and push into return-stack
1349+ 685A                              New_Def TO_R, ">R", is_code, is_normal
1349+ 685A             >
1349+ 685A             >Dict_Ptr        defl    $
1349+ 685A             >
1349+ 685A             >//              ______________________________________________________________________
1349+ 685A             >//              Heap part
1349+ 685A             >
1349+ 685A             >
1349+ 685A             >                org     (Heap_Ptr & $1FFF) + $E000
1349+ E1E7             >
1349+ E1E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1349+ E1E7             >Latest_Definition defl  Heap_Ptr
1349+ E1E7             >
1349+ E1E7             >                // dummy db directives used to calculate length of namec
1349+ E1E7 3E 52       >                db      ">R"
1349+ E1E9             >len_NFA         defl    $ - temp_NFA
1349+ E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1349+ E1E7             >
1349+ E1E7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1349+ E1E8 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1349+ E1EA             >                org     $-1                 // alter last byte of Name just above to set
1349+ E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
1349+ E1EA             >
1349+ E1EA DE 01       >                dw      Prev_Ptr            // Link to previous definition Name
1349+ E1EC             >Prev_Ptr        defl    Heap_Ptr
1349+ E1EC             >
1349+ E1EC             >mirror_Ptr      defl    $
1349+ E1EC             >
1349+ E1EC 5C 68       >                dw      Dict_Ptr + 2        // xt
1349+ E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1349+ E1EE             >
1349+ E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1349+ E1EE             >
1349+ E1EE             >//              ______________________________________________________________________
1349+ E1EE             >//              Dictionary part
1349+ E1EE             >
1349+ E1EE             >                org     Dict_Ptr
1349+ 685A             >
1349+ 685A EC 01       >                dw      mirror_Ptr - $E000
1349+ 685C             >
1349+ 685C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1349+ 685C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1349+ 685C ~           >
1349+ 685C ~           >
1349+ 685C             >                endif           ; ok        // for other definitions it "points" the correct handler
1349+ 685C             >                // Use of "; ok" to suppress "warning[fwdref]"
1349+ 685C             >
1349+ 685C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1350+ 685C E1                           pop     hl
1351+ 685D EB                           ex      de, hl //**
1352+ 685E                              // *** ldhlrp
1353+ 685E 2B                           dec     hl
1354+ 685F 72                           ld      (hl), d             // store current TOS
1355+ 6860 2B                           dec     hl                  // to Return Stack
1356+ 6861 73                           ld      (hl), e
1357+ 6862                              // *** ldrphl
1358+ 6862 EB                           ex      de, hl //**
1359+ 6863                              next
1359+ 6863 DD E9       >                jp      (ix)
1360+ 6865
1361+ 6865              //  ______________________________________________________________________
1362+ 6865              //
1363+ 6865              // r>      -- n
1364+ 6865              // pop from return-stack and push into calculator-stack
1365+ 6865                              New_Def R_TO, "R>", is_code, is_normal
1365+ 6865             >
1365+ 6865             >Dict_Ptr        defl    $
1365+ 6865             >
1365+ 6865             >//              ______________________________________________________________________
1365+ 6865             >//              Heap part
1365+ 6865             >
1365+ 6865             >
1365+ 6865             >                org     (Heap_Ptr & $1FFF) + $E000
1365+ E1EE             >
1365+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1365+ E1EE             >Latest_Definition defl  Heap_Ptr
1365+ E1EE             >
1365+ E1EE             >                // dummy db directives used to calculate length of namec
1365+ E1EE 52 3E       >                db      "R>"
1365+ E1F0             >len_NFA         defl    $ - temp_NFA
1365+ E1F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1365+ E1EE             >
1365+ E1EE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1365+ E1EF 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1365+ E1F1             >                org     $-1                 // alter last byte of Name just above to set
1365+ E1F0 BE          >                db      {b $} | END_BIT     // msb as name end
1365+ E1F1             >
1365+ E1F1 E7 01       >                dw      Prev_Ptr            // Link to previous definition Name
1365+ E1F3             >Prev_Ptr        defl    Heap_Ptr
1365+ E1F3             >
1365+ E1F3             >mirror_Ptr      defl    $
1365+ E1F3             >
1365+ E1F3 67 68       >                dw      Dict_Ptr + 2        // xt
1365+ E1F5             >Heap_Ptr        defl    $ - $E000           // save current HP
1365+ E1F5             >
1365+ E1F5             >Current_HP      defl  $ - $E000             // used to set HP once!
1365+ E1F5             >
1365+ E1F5             >//              ______________________________________________________________________
1365+ E1F5             >//              Dictionary part
1365+ E1F5             >
1365+ E1F5             >                org     Dict_Ptr
1365+ 6865             >
1365+ 6865 F3 01       >                dw      mirror_Ptr - $E000
1365+ 6867             >
1365+ 6867             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1365+ 6867 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1365+ 6867 ~           >
1365+ 6867 ~           >
1365+ 6867             >                endif           ; ok        // for other definitions it "points" the correct handler
1365+ 6867             >                // Use of "; ok" to suppress "warning[fwdref]"
1365+ 6867             >
1365+ 6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1366+ 6867
1367+ 6867 EB                           ex      de, hl //**
1368+ 6868                              // *** ldhlrp
1369+ 6868 5E                           ld      e, (hl)             // retrieve from Return Stack
1370+ 6869 23                           inc     hl
1371+ 686A 56                           ld      d, (hl)
1372+ 686B 23                           inc     hl
1373+ 686C                              // *** ldrphl
1374+ 686C EB                           ex      de, hl //**
1375+ 686D E5                           push    hl
1376+ 686E                              next
1376+ 686E DD E9       >                jp      (ix)
1377+ 6870
1378+ 6870              //  ______________________________________________________________________
1379+ 6870              //
1380+ 6870              // r@           -- n
1381+ 6870              // return on top of stack the value of top of return-stack
1382+ 6870              // Since this is the same as I, we alter R's CFA to jump there
1383+ 6870                              New_Def R_OP, "R@", is_code, is_normal
1383+ 6870             >
1383+ 6870             >Dict_Ptr        defl    $
1383+ 6870             >
1383+ 6870             >//              ______________________________________________________________________
1383+ 6870             >//              Heap part
1383+ 6870             >
1383+ 6870             >
1383+ 6870             >                org     (Heap_Ptr & $1FFF) + $E000
1383+ E1F5             >
1383+ E1F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1383+ E1F5             >Latest_Definition defl  Heap_Ptr
1383+ E1F5             >
1383+ E1F5             >                // dummy db directives used to calculate length of namec
1383+ E1F5 52 40       >                db      "R@"
1383+ E1F7             >len_NFA         defl    $ - temp_NFA
1383+ E1F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1383+ E1F5             >
1383+ E1F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1383+ E1F6 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1383+ E1F8             >                org     $-1                 // alter last byte of Name just above to set
1383+ E1F7 C0          >                db      {b $} | END_BIT     // msb as name end
1383+ E1F8             >
1383+ E1F8 EE 01       >                dw      Prev_Ptr            // Link to previous definition Name
1383+ E1FA             >Prev_Ptr        defl    Heap_Ptr
1383+ E1FA             >
1383+ E1FA             >mirror_Ptr      defl    $
1383+ E1FA             >
1383+ E1FA 72 68       >                dw      Dict_Ptr + 2        // xt
1383+ E1FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1383+ E1FC             >
1383+ E1FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1383+ E1FC             >
1383+ E1FC             >//              ______________________________________________________________________
1383+ E1FC             >//              Dictionary part
1383+ E1FC             >
1383+ E1FC             >                org     Dict_Ptr
1383+ 6870             >
1383+ 6870 FA 01       >                dw      mirror_Ptr - $E000
1383+ 6872             >
1383+ 6872             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1383+ 6872 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1383+ 6872 ~           >
1383+ 6872 ~           >
1383+ 6872             >                endif           ; ok        // for other definitions it "points" the correct handler
1383+ 6872             >                // Use of "; ok" to suppress "warning[fwdref]"
1383+ 6872             >
1383+ 6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1384+ 6872 C3 3A 64                     jp      I_Ptr
1385+ 6875
1386+ 6875              //  ______________________________________________________________________
1387+ 6875              //
1388+ 6875              // r            -- n
1389+ 6875              // return on top of stack the value of top of return-stack
1390+ 6875              // Since this is the same as I, we alter R's CFA to jump there
1391+ 6875              //              New_Def R_OLD, "R", is_code, is_normal
1392+ 6875              //              jp      I_Ptr
1393+ 6875
1394+ 6875              //  ______________________________________________________________________
1395+ 6875              //
1396+ 6875              // 0=           n -- f
1397+ 6875              // true (non zero) if n is zero, false (0) elsewere
1398+ 6875                              New_Def ZEQUAL, "0=", is_code, is_normal
1398+ 6875             >
1398+ 6875             >Dict_Ptr        defl    $
1398+ 6875             >
1398+ 6875             >//              ______________________________________________________________________
1398+ 6875             >//              Heap part
1398+ 6875             >
1398+ 6875             >
1398+ 6875             >                org     (Heap_Ptr & $1FFF) + $E000
1398+ E1FC             >
1398+ E1FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1398+ E1FC             >Latest_Definition defl  Heap_Ptr
1398+ E1FC             >
1398+ E1FC             >                // dummy db directives used to calculate length of namec
1398+ E1FC 30 3D       >                db      "0="
1398+ E1FE             >len_NFA         defl    $ - temp_NFA
1398+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1398+ E1FC             >
1398+ E1FC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1398+ E1FD 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1398+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1398+ E1FE BD          >                db      {b $} | END_BIT     // msb as name end
1398+ E1FF             >
1398+ E1FF F5 01       >                dw      Prev_Ptr            // Link to previous definition Name
1398+ E201             >Prev_Ptr        defl    Heap_Ptr
1398+ E201             >
1398+ E201             >mirror_Ptr      defl    $
1398+ E201             >
1398+ E201 77 68       >                dw      Dict_Ptr + 2        // xt
1398+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1398+ E203             >
1398+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1398+ E203             >
1398+ E203             >//              ______________________________________________________________________
1398+ E203             >//              Dictionary part
1398+ E203             >
1398+ E203             >                org     Dict_Ptr
1398+ 6875             >
1398+ 6875 01 02       >                dw      mirror_Ptr - $E000
1398+ 6877             >
1398+ 6877             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1398+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1398+ 6877 ~           >
1398+ 6877 ~           >
1398+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1398+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1398+ 6877             >
1398+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1399+ 6877              Zero_Equal:
1400+ 6877 E1                           pop     hl
1401+ 6878 7D                           ld      a, l
1402+ 6879 B4                           or      h
1403+ 687A 21 00 00                     ld      hl, FALSE_FLAG
1404+ 687D 20 01                        jr      nz, ZEqual_Skip
1405+ 687F 2B                               dec     hl
1406+ 6880              ZEqual_Skip:
1407+ 6880                              psh1
1407+ 6880 E5          >                push    hl
1407+ 6881 DD E9       >                jp      (ix)
1408+ 6883
1409+ 6883              //  ______________________________________________________________________
1410+ 6883              //
1411+ 6883              // not         a1 -- a2
1412+ 6883              // increment by 2 top of stack
1413+ 6883                              New_Def NOT_OP, "NOT", is_code, is_normal
1413+ 6883             >
1413+ 6883             >Dict_Ptr        defl    $
1413+ 6883             >
1413+ 6883             >//              ______________________________________________________________________
1413+ 6883             >//              Heap part
1413+ 6883             >
1413+ 6883             >
1413+ 6883             >                org     (Heap_Ptr & $1FFF) + $E000
1413+ E203             >
1413+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1413+ E203             >Latest_Definition defl  Heap_Ptr
1413+ E203             >
1413+ E203             >                // dummy db directives used to calculate length of namec
1413+ E203 4E 4F 54    >                db      "NOT"
1413+ E206             >len_NFA         defl    $ - temp_NFA
1413+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1413+ E203             >
1413+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1413+ E204 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1413+ E207             >                org     $-1                 // alter last byte of Name just above to set
1413+ E206 D4          >                db      {b $} | END_BIT     // msb as name end
1413+ E207             >
1413+ E207 FC 01       >                dw      Prev_Ptr            // Link to previous definition Name
1413+ E209             >Prev_Ptr        defl    Heap_Ptr
1413+ E209             >
1413+ E209             >mirror_Ptr      defl    $
1413+ E209             >
1413+ E209 85 68       >                dw      Dict_Ptr + 2        // xt
1413+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1413+ E20B             >
1413+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1413+ E20B             >
1413+ E20B             >//              ______________________________________________________________________
1413+ E20B             >//              Dictionary part
1413+ E20B             >
1413+ E20B             >                org     Dict_Ptr
1413+ 6883             >
1413+ 6883 09 02       >                dw      mirror_Ptr - $E000
1413+ 6885             >
1413+ 6885             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1413+ 6885 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1413+ 6885 ~           >
1413+ 6885 ~           >
1413+ 6885             >                endif           ; ok        // for other definitions it "points" the correct handler
1413+ 6885             >                // Use of "; ok" to suppress "warning[fwdref]"
1413+ 6885             >
1413+ 6885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1414+ 6885 C3 77 68                     jp      Zero_Equal
1415+ 6888
1416+ 6888              //  ______________________________________________________________________
1417+ 6888              //
1418+ 6888              // 0<           n -- f
1419+ 6888              // true (non zero) if n is less than zero, false (0) elsewere
1420+ 6888                              New_Def ZLESS, "0<", is_code, is_normal
1420+ 6888             >
1420+ 6888             >Dict_Ptr        defl    $
1420+ 6888             >
1420+ 6888             >//              ______________________________________________________________________
1420+ 6888             >//              Heap part
1420+ 6888             >
1420+ 6888             >
1420+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1420+ E20B             >
1420+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1420+ E20B             >Latest_Definition defl  Heap_Ptr
1420+ E20B             >
1420+ E20B             >                // dummy db directives used to calculate length of namec
1420+ E20B 30 3C       >                db      "0<"
1420+ E20D             >len_NFA         defl    $ - temp_NFA
1420+ E20D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1420+ E20B             >
1420+ E20B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1420+ E20C 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1420+ E20E             >                org     $-1                 // alter last byte of Name just above to set
1420+ E20D BC          >                db      {b $} | END_BIT     // msb as name end
1420+ E20E             >
1420+ E20E 03 02       >                dw      Prev_Ptr            // Link to previous definition Name
1420+ E210             >Prev_Ptr        defl    Heap_Ptr
1420+ E210             >
1420+ E210             >mirror_Ptr      defl    $
1420+ E210             >
1420+ E210 8A 68       >                dw      Dict_Ptr + 2        // xt
1420+ E212             >Heap_Ptr        defl    $ - $E000           // save current HP
1420+ E212             >
1420+ E212             >Current_HP      defl  $ - $E000             // used to set HP once!
1420+ E212             >
1420+ E212             >//              ______________________________________________________________________
1420+ E212             >//              Dictionary part
1420+ E212             >
1420+ E212             >                org     Dict_Ptr
1420+ 6888             >
1420+ 6888 10 02       >                dw      mirror_Ptr - $E000
1420+ 688A             >
1420+ 688A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1420+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1420+ 688A ~           >
1420+ 688A ~           >
1420+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1420+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1420+ 688A             >
1420+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1421+ 688A E1                           pop     hl
1422+ 688B 29                           add     hl, hl
1423+ 688C ED 62                        sbc     hl, hl
1424+ 688E                              psh1
1424+ 688E E5          >                push    hl
1424+ 688F DD E9       >                jp      (ix)
1425+ 6891
1426+ 6891              //  ______________________________________________________________________
1427+ 6891              //
1428+ 6891              // 0>           n -- f
1429+ 6891              // true (non zero) if n is less than zero, false (0) elsewere
1430+ 6891                              New_Def ZGREATER, "0>", is_code, is_normal
1430+ 6891             >
1430+ 6891             >Dict_Ptr        defl    $
1430+ 6891             >
1430+ 6891             >//              ______________________________________________________________________
1430+ 6891             >//              Heap part
1430+ 6891             >
1430+ 6891             >
1430+ 6891             >                org     (Heap_Ptr & $1FFF) + $E000
1430+ E212             >
1430+ E212             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ E212             >Latest_Definition defl  Heap_Ptr
1430+ E212             >
1430+ E212             >                // dummy db directives used to calculate length of namec
1430+ E212 30 3E       >                db      "0>"
1430+ E214             >len_NFA         defl    $ - temp_NFA
1430+ E214             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ E212             >
1430+ E212 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ E213 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1430+ E215             >                org     $-1                 // alter last byte of Name just above to set
1430+ E214 BE          >                db      {b $} | END_BIT     // msb as name end
1430+ E215             >
1430+ E215 0B 02       >                dw      Prev_Ptr            // Link to previous definition Name
1430+ E217             >Prev_Ptr        defl    Heap_Ptr
1430+ E217             >
1430+ E217             >mirror_Ptr      defl    $
1430+ E217             >
1430+ E217 93 68       >                dw      Dict_Ptr + 2        // xt
1430+ E219             >Heap_Ptr        defl    $ - $E000           // save current HP
1430+ E219             >
1430+ E219             >Current_HP      defl  $ - $E000             // used to set HP once!
1430+ E219             >
1430+ E219             >//              ______________________________________________________________________
1430+ E219             >//              Dictionary part
1430+ E219             >
1430+ E219             >                org     Dict_Ptr
1430+ 6891             >
1430+ 6891 17 02       >                dw      mirror_Ptr - $E000
1430+ 6893             >
1430+ 6893             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6893 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1430+ 6893 ~           >
1430+ 6893 ~           >
1430+ 6893             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6893             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6893             >
1430+ 6893             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6893 E1                           pop     hl
1432+ 6894 7D                           ld      a, l
1433+ 6895 B4                           or      h
1434+ 6896 29                           add     hl, hl
1435+ 6897 21 00 00                     ld      hl, FALSE_FLAG
1436+ 689A 38 04                        jr      c, ZGreater_Skip
1437+ 689C A7                               and     a
1438+ 689D 28 01                            jr      z, ZGreater_Skip
1439+ 689F 2B                                   dec     hl
1440+ 68A0              ZGreater_Skip:
1441+ 68A0                              psh1
1441+ 68A0 E5          >                push    hl
1441+ 68A1 DD E9       >                jp      (ix)
1442+ 68A3
1443+ 68A3              //  ______________________________________________________________________
1444+ 68A3              //
1445+ 68A3              // +            n1 n2 -- n3
1446+ 68A3              // returns the unsigned sum of two top values
1447+ 68A3                              New_Def PLUS, "+", is_code, is_normal
1447+ 68A3             >
1447+ 68A3             >Dict_Ptr        defl    $
1447+ 68A3             >
1447+ 68A3             >//              ______________________________________________________________________
1447+ 68A3             >//              Heap part
1447+ 68A3             >
1447+ 68A3             >
1447+ 68A3             >                org     (Heap_Ptr & $1FFF) + $E000
1447+ E219             >
1447+ E219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ E219             >Latest_Definition defl  Heap_Ptr
1447+ E219             >
1447+ E219             >                // dummy db directives used to calculate length of namec
1447+ E219 2B          >                db      "+"
1447+ E21A             >len_NFA         defl    $ - temp_NFA
1447+ E21A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ E219             >
1447+ E219 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ E21A 2B          >                db      "+"               // name string in 7-bit ascii, but
1447+ E21B             >                org     $-1                 // alter last byte of Name just above to set
1447+ E21A AB          >                db      {b $} | END_BIT     // msb as name end
1447+ E21B             >
1447+ E21B 12 02       >                dw      Prev_Ptr            // Link to previous definition Name
1447+ E21D             >Prev_Ptr        defl    Heap_Ptr
1447+ E21D             >
1447+ E21D             >mirror_Ptr      defl    $
1447+ E21D             >
1447+ E21D A5 68       >                dw      Dict_Ptr + 2        // xt
1447+ E21F             >Heap_Ptr        defl    $ - $E000           // save current HP
1447+ E21F             >
1447+ E21F             >Current_HP      defl  $ - $E000             // used to set HP once!
1447+ E21F             >
1447+ E21F             >//              ______________________________________________________________________
1447+ E21F             >//              Dictionary part
1447+ E21F             >
1447+ E21F             >                org     Dict_Ptr
1447+ 68A3             >
1447+ 68A3 1D 02       >                dw      mirror_Ptr - $E000
1447+ 68A5             >
1447+ 68A5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1447+ 68A5 ~           >
1447+ 68A5 ~           >
1447+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 68A5             >
1447+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 68A5 D9                           exx
1449+ 68A6 E1                           pop     hl
1450+ 68A7 D1                           pop     de
1451+ 68A8 19                           add     hl, de
1452+ 68A9 E5                           push    hl
1453+ 68AA D9                           exx
1454+ 68AB                              next
1454+ 68AB DD E9       >                jp      (ix)
1455+ 68AD
1456+ 68AD
1457+ 68AD              //  ______________________________________________________________________
1458+ 68AD              //
1459+ 68AD              // d+           d1 d2 -- d3
1460+ 68AD              // returns the unsigned sum of two top double-numbers
1461+ 68AD              //      d2  d1
1462+ 68AD              //      h l h l
1463+ 68AD              // SP   LHEDLHED
1464+ 68AD              // SP  +01234567
1465+ 68AD                              New_Def DPLUS, "D+", is_code, is_normal
1465+ 68AD             >
1465+ 68AD             >Dict_Ptr        defl    $
1465+ 68AD             >
1465+ 68AD             >//              ______________________________________________________________________
1465+ 68AD             >//              Heap part
1465+ 68AD             >
1465+ 68AD             >
1465+ 68AD             >                org     (Heap_Ptr & $1FFF) + $E000
1465+ E21F             >
1465+ E21F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1465+ E21F             >Latest_Definition defl  Heap_Ptr
1465+ E21F             >
1465+ E21F             >                // dummy db directives used to calculate length of namec
1465+ E21F 44 2B       >                db      "D+"
1465+ E221             >len_NFA         defl    $ - temp_NFA
1465+ E221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1465+ E21F             >
1465+ E21F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1465+ E220 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1465+ E222             >                org     $-1                 // alter last byte of Name just above to set
1465+ E221 AB          >                db      {b $} | END_BIT     // msb as name end
1465+ E222             >
1465+ E222 19 02       >                dw      Prev_Ptr            // Link to previous definition Name
1465+ E224             >Prev_Ptr        defl    Heap_Ptr
1465+ E224             >
1465+ E224             >mirror_Ptr      defl    $
1465+ E224             >
1465+ E224 AF 68       >                dw      Dict_Ptr + 2        // xt
1465+ E226             >Heap_Ptr        defl    $ - $E000           // save current HP
1465+ E226             >
1465+ E226             >Current_HP      defl  $ - $E000             // used to set HP once!
1465+ E226             >
1465+ E226             >//              ______________________________________________________________________
1465+ E226             >//              Dictionary part
1465+ E226             >
1465+ E226             >                org     Dict_Ptr
1465+ 68AD             >
1465+ 68AD 24 02       >                dw      mirror_Ptr - $E000
1465+ 68AF             >
1465+ 68AF             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1465+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1465+ 68AF ~           >
1465+ 68AF ~           >
1465+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1465+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1465+ 68AF             >
1465+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1466+ 68AF
1467+ 68AF D9                           exx
1468+ 68B0 C1                           pop     bc                  // bc := d2.H
1469+ 68B1 D1                           pop     de                  // hl := d2.L
1470+ 68B2 E1                           pop     hl                  // d1.H
1471+ 68B3 E3                           ex      (sp), hl            // d1.L
1472+ 68B4 19                           add     hl, de              // hl := d2.L + d1.L
1473+ 68B5 E3                           ex      (sp), hl            // d1.H
1474+ 68B6 ED 4A                        adc     hl, bc              // d1.H + d2.H
1475+ 68B8 E5                           push    hl
1476+ 68B9 D9                           exx
1477+ 68BA                              next
1477+ 68BA DD E9       >                jp      (ix)
1478+ 68BC
1479+ 68BC              //  ______________________________________________________________________
1480+ 68BC              //
1481+ 68BC              // 1+           n1 -- n2
1482+ 68BC              // increment by 1 top of stack
1483+ 68BC                              New_Def ONE_PLUS, "1+", is_code, is_normal
1483+ 68BC             >
1483+ 68BC             >Dict_Ptr        defl    $
1483+ 68BC             >
1483+ 68BC             >//              ______________________________________________________________________
1483+ 68BC             >//              Heap part
1483+ 68BC             >
1483+ 68BC             >
1483+ 68BC             >                org     (Heap_Ptr & $1FFF) + $E000
1483+ E226             >
1483+ E226             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ E226             >Latest_Definition defl  Heap_Ptr
1483+ E226             >
1483+ E226             >                // dummy db directives used to calculate length of namec
1483+ E226 31 2B       >                db      "1+"
1483+ E228             >len_NFA         defl    $ - temp_NFA
1483+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ E226             >
1483+ E226 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ E227 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1483+ E229             >                org     $-1                 // alter last byte of Name just above to set
1483+ E228 AB          >                db      {b $} | END_BIT     // msb as name end
1483+ E229             >
1483+ E229 1F 02       >                dw      Prev_Ptr            // Link to previous definition Name
1483+ E22B             >Prev_Ptr        defl    Heap_Ptr
1483+ E22B             >
1483+ E22B             >mirror_Ptr      defl    $
1483+ E22B             >
1483+ E22B BE 68       >                dw      Dict_Ptr + 2        // xt
1483+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1483+ E22D             >
1483+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1483+ E22D             >
1483+ E22D             >//              ______________________________________________________________________
1483+ E22D             >//              Dictionary part
1483+ E22D             >
1483+ E22D             >                org     Dict_Ptr
1483+ 68BC             >
1483+ 68BC 2B 02       >                dw      mirror_Ptr - $E000
1483+ 68BE             >
1483+ 68BE             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 68BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1483+ 68BE ~           >
1483+ 68BE ~           >
1483+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 68BE             >
1483+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 68BE E1                           pop     hl
1485+ 68BF 23                           inc     hl
1486+ 68C0
1487+ 68C0                              psh1
1487+ 68C0 E5          >                push    hl
1487+ 68C1 DD E9       >                jp      (ix)
1488+ 68C3
1489+ 68C3              //  ______________________________________________________________________
1490+ 68C3              //
1491+ 68C3              // 1-           n1 -- n2
1492+ 68C3              // decrement by 1 top of stack
1493+ 68C3                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1493+ 68C3             >
1493+ 68C3             >Dict_Ptr        defl    $
1493+ 68C3             >
1493+ 68C3             >//              ______________________________________________________________________
1493+ 68C3             >//              Heap part
1493+ 68C3             >
1493+ 68C3             >
1493+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E22D             >
1493+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E22D             >Latest_Definition defl  Heap_Ptr
1493+ E22D             >
1493+ E22D             >                // dummy db directives used to calculate length of namec
1493+ E22D 31 2D       >                db      "1-"
1493+ E22F             >len_NFA         defl    $ - temp_NFA
1493+ E22F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E22D             >
1493+ E22D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E22E 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1493+ E230             >                org     $-1                 // alter last byte of Name just above to set
1493+ E22F AD          >                db      {b $} | END_BIT     // msb as name end
1493+ E230             >
1493+ E230 26 02       >                dw      Prev_Ptr            // Link to previous definition Name
1493+ E232             >Prev_Ptr        defl    Heap_Ptr
1493+ E232             >
1493+ E232             >mirror_Ptr      defl    $
1493+ E232             >
1493+ E232 C5 68       >                dw      Dict_Ptr + 2        // xt
1493+ E234             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E234             >
1493+ E234             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E234             >
1493+ E234             >//              ______________________________________________________________________
1493+ E234             >//              Dictionary part
1493+ E234             >
1493+ E234             >                org     Dict_Ptr
1493+ 68C3             >
1493+ 68C3 32 02       >                dw      mirror_Ptr - $E000
1493+ 68C5             >
1493+ 68C5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1493+ 68C5 ~           >
1493+ 68C5 ~           >
1493+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 68C5             >
1493+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 68C5 E1                           pop     hl
1495+ 68C6 2B                           dec     hl
1496+ 68C7
1497+ 68C7                              psh1
1497+ 68C7 E5          >                push    hl
1497+ 68C8 DD E9       >                jp      (ix)
1498+ 68CA
1499+ 68CA              //  ______________________________________________________________________
1500+ 68CA              //
1501+ 68CA              // 2+           n1 -- n2
1502+ 68CA              // increment by 2 top of stack
1503+ 68CA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1503+ 68CA             >
1503+ 68CA             >Dict_Ptr        defl    $
1503+ 68CA             >
1503+ 68CA             >//              ______________________________________________________________________
1503+ 68CA             >//              Heap part
1503+ 68CA             >
1503+ 68CA             >
1503+ 68CA             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E234             >
1503+ E234             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E234             >Latest_Definition defl  Heap_Ptr
1503+ E234             >
1503+ E234             >                // dummy db directives used to calculate length of namec
1503+ E234 32 2B       >                db      "2+"
1503+ E236             >len_NFA         defl    $ - temp_NFA
1503+ E236             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E234             >
1503+ E234 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E235 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1503+ E237             >                org     $-1                 // alter last byte of Name just above to set
1503+ E236 AB          >                db      {b $} | END_BIT     // msb as name end
1503+ E237             >
1503+ E237 2D 02       >                dw      Prev_Ptr            // Link to previous definition Name
1503+ E239             >Prev_Ptr        defl    Heap_Ptr
1503+ E239             >
1503+ E239             >mirror_Ptr      defl    $
1503+ E239             >
1503+ E239 CC 68       >                dw      Dict_Ptr + 2        // xt
1503+ E23B             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E23B             >
1503+ E23B             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E23B             >
1503+ E23B             >//              ______________________________________________________________________
1503+ E23B             >//              Dictionary part
1503+ E23B             >
1503+ E23B             >                org     Dict_Ptr
1503+ 68CA             >
1503+ 68CA 39 02       >                dw      mirror_Ptr - $E000
1503+ 68CC             >
1503+ 68CC             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 68CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1503+ 68CC ~           >
1503+ 68CC ~           >
1503+ 68CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 68CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 68CC             >
1503+ 68CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 68CC              Two_Plus:
1505+ 68CC E1                           pop     hl
1506+ 68CD 23                           inc     hl
1507+ 68CE 23                           inc     hl
1508+ 68CF
1509+ 68CF                              psh1
1509+ 68CF E5          >                push    hl
1509+ 68D0 DD E9       >                jp      (ix)
1510+ 68D2
1511+ 68D2              //  ______________________________________________________________________
1512+ 68D2              //
1513+ 68D2              // cell+        a1 -- a2
1514+ 68D2              // increment by 2 top of stack
1515+ 68D2                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1515+ 68D2             >
1515+ 68D2             >Dict_Ptr        defl    $
1515+ 68D2             >
1515+ 68D2             >//              ______________________________________________________________________
1515+ 68D2             >//              Heap part
1515+ 68D2             >
1515+ 68D2             >
1515+ 68D2             >                org     (Heap_Ptr & $1FFF) + $E000
1515+ E23B             >
1515+ E23B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1515+ E23B             >Latest_Definition defl  Heap_Ptr
1515+ E23B             >
1515+ E23B             >                // dummy db directives used to calculate length of namec
1515+ E23B 43 45 4C 4C >                db      "CELL+"
1515+ E23F 2B          >
1515+ E240             >len_NFA         defl    $ - temp_NFA
1515+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1515+ E23B             >
1515+ E23B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1515+ E23C 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1515+ E240 2B          >
1515+ E241             >                org     $-1                 // alter last byte of Name just above to set
1515+ E240 AB          >                db      {b $} | END_BIT     // msb as name end
1515+ E241             >
1515+ E241 34 02       >                dw      Prev_Ptr            // Link to previous definition Name
1515+ E243             >Prev_Ptr        defl    Heap_Ptr
1515+ E243             >
1515+ E243             >mirror_Ptr      defl    $
1515+ E243             >
1515+ E243 D4 68       >                dw      Dict_Ptr + 2        // xt
1515+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1515+ E245             >
1515+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1515+ E245             >
1515+ E245             >//              ______________________________________________________________________
1515+ E245             >//              Dictionary part
1515+ E245             >
1515+ E245             >                org     Dict_Ptr
1515+ 68D2             >
1515+ 68D2 43 02       >                dw      mirror_Ptr - $E000
1515+ 68D4             >
1515+ 68D4             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1515+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1515+ 68D4 ~           >
1515+ 68D4 ~           >
1515+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1515+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1515+ 68D4             >
1515+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1516+ 68D4 C3 CC 68                     jp      Two_Plus
1517+ 68D7
1518+ 68D7              //  ______________________________________________________________________
1519+ 68D7              //
1520+ 68D7              // align        a1 -- a2
1521+ 68D7              // align memory : not used
1522+ 68D7              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1523+ 68D7              //            next
1524+ 68D7
1525+ 68D7              //  ______________________________________________________________________
1526+ 68D7              //
1527+ 68D7              // cell-        a1 -- a2
1528+ 68D7              // decrement by 2 top of stack
1529+ 68D7                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1529+ 68D7             >
1529+ 68D7             >Dict_Ptr        defl    $
1529+ 68D7             >
1529+ 68D7             >//              ______________________________________________________________________
1529+ 68D7             >//              Heap part
1529+ 68D7             >
1529+ 68D7             >
1529+ 68D7             >                org     (Heap_Ptr & $1FFF) + $E000
1529+ E245             >
1529+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1529+ E245             >Latest_Definition defl  Heap_Ptr
1529+ E245             >
1529+ E245             >                // dummy db directives used to calculate length of namec
1529+ E245 43 45 4C 4C >                db      "CELL-"
1529+ E249 2D          >
1529+ E24A             >len_NFA         defl    $ - temp_NFA
1529+ E24A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1529+ E245             >
1529+ E245 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1529+ E246 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1529+ E24A 2D          >
1529+ E24B             >                org     $-1                 // alter last byte of Name just above to set
1529+ E24A AD          >                db      {b $} | END_BIT     // msb as name end
1529+ E24B             >
1529+ E24B 3B 02       >                dw      Prev_Ptr            // Link to previous definition Name
1529+ E24D             >Prev_Ptr        defl    Heap_Ptr
1529+ E24D             >
1529+ E24D             >mirror_Ptr      defl    $
1529+ E24D             >
1529+ E24D D9 68       >                dw      Dict_Ptr + 2        // xt
1529+ E24F             >Heap_Ptr        defl    $ - $E000           // save current HP
1529+ E24F             >
1529+ E24F             >Current_HP      defl  $ - $E000             // used to set HP once!
1529+ E24F             >
1529+ E24F             >//              ______________________________________________________________________
1529+ E24F             >//              Dictionary part
1529+ E24F             >
1529+ E24F             >                org     Dict_Ptr
1529+ 68D7             >
1529+ 68D7 4D 02       >                dw      mirror_Ptr - $E000
1529+ 68D9             >
1529+ 68D9             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1529+ 68D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1529+ 68D9 ~           >
1529+ 68D9 ~           >
1529+ 68D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1529+ 68D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1529+ 68D9             >
1529+ 68D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1530+ 68D9              CellMinus:
1531+ 68D9 E1                           pop     hl
1532+ 68DA 2B                           dec     hl
1533+ 68DB 2B                           dec     hl
1534+ 68DC
1535+ 68DC                              psh1
1535+ 68DC E5          >                push    hl
1535+ 68DD DD E9       >                jp      (ix)
1536+ 68DF
1537+ 68DF              //  ______________________________________________________________________
1538+ 68DF              //
1539+ 68DF              // 2-           a1 -- a2
1540+ 68DF              // decrement by 2 top of stack
1541+ 68DF                              New_Def TWO_MINUS, "2-", is_code, is_normal
1541+ 68DF             >
1541+ 68DF             >Dict_Ptr        defl    $
1541+ 68DF             >
1541+ 68DF             >//              ______________________________________________________________________
1541+ 68DF             >//              Heap part
1541+ 68DF             >
1541+ 68DF             >
1541+ 68DF             >                org     (Heap_Ptr & $1FFF) + $E000
1541+ E24F             >
1541+ E24F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1541+ E24F             >Latest_Definition defl  Heap_Ptr
1541+ E24F             >
1541+ E24F             >                // dummy db directives used to calculate length of namec
1541+ E24F 32 2D       >                db      "2-"
1541+ E251             >len_NFA         defl    $ - temp_NFA
1541+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1541+ E24F             >
1541+ E24F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1541+ E250 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1541+ E252             >                org     $-1                 // alter last byte of Name just above to set
1541+ E251 AD          >                db      {b $} | END_BIT     // msb as name end
1541+ E252             >
1541+ E252 45 02       >                dw      Prev_Ptr            // Link to previous definition Name
1541+ E254             >Prev_Ptr        defl    Heap_Ptr
1541+ E254             >
1541+ E254             >mirror_Ptr      defl    $
1541+ E254             >
1541+ E254 E1 68       >                dw      Dict_Ptr + 2        // xt
1541+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1541+ E256             >
1541+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1541+ E256             >
1541+ E256             >//              ______________________________________________________________________
1541+ E256             >//              Dictionary part
1541+ E256             >
1541+ E256             >                org     Dict_Ptr
1541+ 68DF             >
1541+ 68DF 54 02       >                dw      mirror_Ptr - $E000
1541+ 68E1             >
1541+ 68E1             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1541+ 68E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1541+ 68E1 ~           >
1541+ 68E1 ~           >
1541+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1541+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1541+ 68E1             >
1541+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1542+ 68E1 C3 D9 68                     jp      CellMinus
1543+ 68E4
1544+ 68E4              //  ______________________________________________________________________
1545+ 68E4              //
1546+ 68E4              // negate       n1 -- n2
1547+ 68E4              // change the sign of number
1548+ 68E4                              New_Def MINUS, "NEGATE", is_code, is_normal
1548+ 68E4             >
1548+ 68E4             >Dict_Ptr        defl    $
1548+ 68E4             >
1548+ 68E4             >//              ______________________________________________________________________
1548+ 68E4             >//              Heap part
1548+ 68E4             >
1548+ 68E4             >
1548+ 68E4             >                org     (Heap_Ptr & $1FFF) + $E000
1548+ E256             >
1548+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1548+ E256             >Latest_Definition defl  Heap_Ptr
1548+ E256             >
1548+ E256             >                // dummy db directives used to calculate length of namec
1548+ E256 4E 45 47 41 >                db      "NEGATE"
1548+ E25A 54 45       >
1548+ E25C             >len_NFA         defl    $ - temp_NFA
1548+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1548+ E256             >
1548+ E256 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1548+ E257 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1548+ E25B 54 45       >
1548+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1548+ E25C C5          >                db      {b $} | END_BIT     // msb as name end
1548+ E25D             >
1548+ E25D 4F 02       >                dw      Prev_Ptr            // Link to previous definition Name
1548+ E25F             >Prev_Ptr        defl    Heap_Ptr
1548+ E25F             >
1548+ E25F             >mirror_Ptr      defl    $
1548+ E25F             >
1548+ E25F E6 68       >                dw      Dict_Ptr + 2        // xt
1548+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1548+ E261             >
1548+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1548+ E261             >
1548+ E261             >//              ______________________________________________________________________
1548+ E261             >//              Dictionary part
1548+ E261             >
1548+ E261             >                org     Dict_Ptr
1548+ 68E4             >
1548+ 68E4 5F 02       >                dw      mirror_Ptr - $E000
1548+ 68E6             >
1548+ 68E6             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1548+ 68E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1548+ 68E6 ~           >
1548+ 68E6 ~           >
1548+ 68E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1548+ 68E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1548+ 68E6             >
1548+ 68E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1549+ 68E6 D9                           exx
1550+ 68E7 21 00 00                     ld      hl, 0               // subtract from 0
1551+ 68EA D1                           pop     de
1552+ 68EB B7                           or      a
1553+ 68EC ED 52                        sbc     hl, de
1554+ 68EE E5                           push    hl
1555+ 68EF D9                           exx
1556+ 68F0                              next
1556+ 68F0 DD E9       >                jp      (ix)
1557+ 68F2
1558+ 68F2              //  ______________________________________________________________________
1559+ 68F2              //
1560+ 68F2              // dnegate      d1 -- d2
1561+ 68F2              // change the sign of a double number
1562+ 68F2                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1562+ 68F2             >
1562+ 68F2             >Dict_Ptr        defl    $
1562+ 68F2             >
1562+ 68F2             >//              ______________________________________________________________________
1562+ 68F2             >//              Heap part
1562+ 68F2             >
1562+ 68F2             >
1562+ 68F2             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E261             >
1562+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E261             >Latest_Definition defl  Heap_Ptr
1562+ E261             >
1562+ E261             >                // dummy db directives used to calculate length of namec
1562+ E261 44 4E 45 47 >                db      "DNEGATE"
1562+ E265 41 54 45    >
1562+ E268             >len_NFA         defl    $ - temp_NFA
1562+ E268             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E261             >
1562+ E261 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E262 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1562+ E266 41 54 45    >
1562+ E269             >                org     $-1                 // alter last byte of Name just above to set
1562+ E268 C5          >                db      {b $} | END_BIT     // msb as name end
1562+ E269             >
1562+ E269 56 02       >                dw      Prev_Ptr            // Link to previous definition Name
1562+ E26B             >Prev_Ptr        defl    Heap_Ptr
1562+ E26B             >
1562+ E26B             >mirror_Ptr      defl    $
1562+ E26B             >
1562+ E26B F4 68       >                dw      Dict_Ptr + 2        // xt
1562+ E26D             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E26D             >
1562+ E26D             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E26D             >
1562+ E26D             >//              ______________________________________________________________________
1562+ E26D             >//              Dictionary part
1562+ E26D             >
1562+ E26D             >                org     Dict_Ptr
1562+ 68F2             >
1562+ 68F2 6B 02       >                dw      mirror_Ptr - $E000
1562+ 68F4             >
1562+ 68F4             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 68F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1562+ 68F4 ~           >
1562+ 68F4 ~           >
1562+ 68F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 68F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 68F4             >
1562+ 68F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 68F4 D9                           exx
1564+ 68F5 C1                           pop     bc                  // d1.H
1565+ 68F6 D1                           pop     de                  // d1.L
1566+ 68F7 AF                           xor     a
1567+ 68F8 67                           ld      h, a
1568+ 68F9 6F                           ld      l, a
1569+ 68FA ED 52                        sbc     hl, de              // subtact from zero
1570+ 68FC E5                           push    hl                  // > d2-L
1571+ 68FD 67                           ld      h, a
1572+ 68FE 6F                           ld      l, a
1573+ 68FF ED 42                        sbc     hl, bc              // subtract from zero with carry
1574+ 6901                                                          // > d2-H
1575+ 6901 E5                           push    hl
1576+ 6902 D9                           exx
1577+ 6903                              next
1577+ 6903 DD E9       >                jp      (ix)
1578+ 6905
1579+ 6905              //  ______________________________________________________________________
1580+ 6905              //
1581+ 6905              // over         n1 n2 -- n1 n2 n1
1582+ 6905              // copy the second value of stack and put it on top.
1583+ 6905                              New_Def OVER, "OVER", is_code, is_normal
1583+ 6905             >
1583+ 6905             >Dict_Ptr        defl    $
1583+ 6905             >
1583+ 6905             >//              ______________________________________________________________________
1583+ 6905             >//              Heap part
1583+ 6905             >
1583+ 6905             >
1583+ 6905             >                org     (Heap_Ptr & $1FFF) + $E000
1583+ E26D             >
1583+ E26D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1583+ E26D             >Latest_Definition defl  Heap_Ptr
1583+ E26D             >
1583+ E26D             >                // dummy db directives used to calculate length of namec
1583+ E26D 4F 56 45 52 >                db      "OVER"
1583+ E271             >len_NFA         defl    $ - temp_NFA
1583+ E271             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1583+ E26D             >
1583+ E26D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1583+ E26E 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1583+ E272             >                org     $-1                 // alter last byte of Name just above to set
1583+ E271 D2          >                db      {b $} | END_BIT     // msb as name end
1583+ E272             >
1583+ E272 61 02       >                dw      Prev_Ptr            // Link to previous definition Name
1583+ E274             >Prev_Ptr        defl    Heap_Ptr
1583+ E274             >
1583+ E274             >mirror_Ptr      defl    $
1583+ E274             >
1583+ E274 07 69       >                dw      Dict_Ptr + 2        // xt
1583+ E276             >Heap_Ptr        defl    $ - $E000           // save current HP
1583+ E276             >
1583+ E276             >Current_HP      defl  $ - $E000             // used to set HP once!
1583+ E276             >
1583+ E276             >//              ______________________________________________________________________
1583+ E276             >//              Dictionary part
1583+ E276             >
1583+ E276             >                org     Dict_Ptr
1583+ 6905             >
1583+ 6905 74 02       >                dw      mirror_Ptr - $E000
1583+ 6907             >
1583+ 6907             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1583+ 6907 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1583+ 6907 ~           >
1583+ 6907 ~           >
1583+ 6907             >                endif           ; ok        // for other definitions it "points" the correct handler
1583+ 6907             >                // Use of "; ok" to suppress "warning[fwdref]"
1583+ 6907             >
1583+ 6907             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1584+ 6907                              // exx     // we can use af instead OPTIMIZATION possible
1585+ 6907 F1                           pop     af                  //   n2
1586+ 6908 E1                           pop     hl                  // < n1
1587+ 6909 E5                           push    hl                  // > n1
1588+ 690A F5                           push    af                  // > n2
1589+ 690B E5                           push    hl                  // > n1
1590+ 690C                              // exx
1591+ 690C                              next
1591+ 690C DD E9       >                jp      (ix)
1592+ 690E
1593+ 690E              //  ______________________________________________________________________
1594+ 690E              //
1595+ 690E              // drop         n1 --
1596+ 690E              // drops the top of stack
1597+ 690E                              New_Def DROP, "DROP", is_code, is_normal
1597+ 690E             >
1597+ 690E             >Dict_Ptr        defl    $
1597+ 690E             >
1597+ 690E             >//              ______________________________________________________________________
1597+ 690E             >//              Heap part
1597+ 690E             >
1597+ 690E             >
1597+ 690E             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E276             >
1597+ E276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E276             >Latest_Definition defl  Heap_Ptr
1597+ E276             >
1597+ E276             >                // dummy db directives used to calculate length of namec
1597+ E276 44 52 4F 50 >                db      "DROP"
1597+ E27A             >len_NFA         defl    $ - temp_NFA
1597+ E27A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E276             >
1597+ E276 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E277 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1597+ E27B             >                org     $-1                 // alter last byte of Name just above to set
1597+ E27A D0          >                db      {b $} | END_BIT     // msb as name end
1597+ E27B             >
1597+ E27B 6D 02       >                dw      Prev_Ptr            // Link to previous definition Name
1597+ E27D             >Prev_Ptr        defl    Heap_Ptr
1597+ E27D             >
1597+ E27D             >mirror_Ptr      defl    $
1597+ E27D             >
1597+ E27D 10 69       >                dw      Dict_Ptr + 2        // xt
1597+ E27F             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E27F             >
1597+ E27F             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E27F             >
1597+ E27F             >//              ______________________________________________________________________
1597+ E27F             >//              Dictionary part
1597+ E27F             >
1597+ E27F             >                org     Dict_Ptr
1597+ 690E             >
1597+ 690E 7D 02       >                dw      mirror_Ptr - $E000
1597+ 6910             >
1597+ 6910             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 6910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1597+ 6910 ~           >
1597+ 6910 ~           >
1597+ 6910             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 6910             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 6910             >
1597+ 6910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 6910 E1                           pop     hl                  // < n1 and discard previous TOS
1599+ 6911                              next
1599+ 6911 DD E9       >                jp      (ix)
1600+ 6913
1601+ 6913              //  ______________________________________________________________________
1602+ 6913              //
1603+ 6913              // nip          n1 n2 -- n2
1604+ 6913              // drops the second elemento on the stack
1605+ 6913                              New_Def NIP, "NIP", is_code, is_normal
1605+ 6913             >
1605+ 6913             >Dict_Ptr        defl    $
1605+ 6913             >
1605+ 6913             >//              ______________________________________________________________________
1605+ 6913             >//              Heap part
1605+ 6913             >
1605+ 6913             >
1605+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1605+ E27F             >
1605+ E27F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ E27F             >Latest_Definition defl  Heap_Ptr
1605+ E27F             >
1605+ E27F             >                // dummy db directives used to calculate length of namec
1605+ E27F 4E 49 50    >                db      "NIP"
1605+ E282             >len_NFA         defl    $ - temp_NFA
1605+ E282             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ E27F             >
1605+ E27F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ E280 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1605+ E283             >                org     $-1                 // alter last byte of Name just above to set
1605+ E282 D0          >                db      {b $} | END_BIT     // msb as name end
1605+ E283             >
1605+ E283 76 02       >                dw      Prev_Ptr            // Link to previous definition Name
1605+ E285             >Prev_Ptr        defl    Heap_Ptr
1605+ E285             >
1605+ E285             >mirror_Ptr      defl    $
1605+ E285             >
1605+ E285 15 69       >                dw      Dict_Ptr + 2        // xt
1605+ E287             >Heap_Ptr        defl    $ - $E000           // save current HP
1605+ E287             >
1605+ E287             >Current_HP      defl  $ - $E000             // used to set HP once!
1605+ E287             >
1605+ E287             >//              ______________________________________________________________________
1605+ E287             >//              Dictionary part
1605+ E287             >
1605+ E287             >                org     Dict_Ptr
1605+ 6913             >
1605+ 6913 85 02       >                dw      mirror_Ptr - $E000
1605+ 6915             >
1605+ 6915             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1605+ 6915 ~           >
1605+ 6915 ~           >
1605+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 6915             >
1605+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 6915
1607+ 6915 E1                           pop     hl                  // < n1 discarded
1608+ 6916 E3                           ex      (sp), hl
1609+ 6917                              next
1609+ 6917 DD E9       >                jp      (ix)
1610+ 6919
1611+ 6919              //  ______________________________________________________________________
1612+ 6919              //
1613+ 6919              // tuck         n1 n2 -- n2 n1 n2
1614+ 6919              // copy the top element after the second.
1615+ 6919                              New_Def TUCK, "TUCK", is_code, is_normal
1615+ 6919             >
1615+ 6919             >Dict_Ptr        defl    $
1615+ 6919             >
1615+ 6919             >//              ______________________________________________________________________
1615+ 6919             >//              Heap part
1615+ 6919             >
1615+ 6919             >
1615+ 6919             >                org     (Heap_Ptr & $1FFF) + $E000
1615+ E287             >
1615+ E287             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1615+ E287             >Latest_Definition defl  Heap_Ptr
1615+ E287             >
1615+ E287             >                // dummy db directives used to calculate length of namec
1615+ E287 54 55 43 4B >                db      "TUCK"
1615+ E28B             >len_NFA         defl    $ - temp_NFA
1615+ E28B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1615+ E287             >
1615+ E287 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1615+ E288 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1615+ E28C             >                org     $-1                 // alter last byte of Name just above to set
1615+ E28B CB          >                db      {b $} | END_BIT     // msb as name end
1615+ E28C             >
1615+ E28C 7F 02       >                dw      Prev_Ptr            // Link to previous definition Name
1615+ E28E             >Prev_Ptr        defl    Heap_Ptr
1615+ E28E             >
1615+ E28E             >mirror_Ptr      defl    $
1615+ E28E             >
1615+ E28E 1B 69       >                dw      Dict_Ptr + 2        // xt
1615+ E290             >Heap_Ptr        defl    $ - $E000           // save current HP
1615+ E290             >
1615+ E290             >Current_HP      defl  $ - $E000             // used to set HP once!
1615+ E290             >
1615+ E290             >//              ______________________________________________________________________
1615+ E290             >//              Dictionary part
1615+ E290             >
1615+ E290             >                org     Dict_Ptr
1615+ 6919             >
1615+ 6919 8E 02       >                dw      mirror_Ptr - $E000
1615+ 691B             >
1615+ 691B             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1615+ 691B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1615+ 691B ~           >
1615+ 691B ~           >
1615+ 691B             >                endif           ; ok        // for other definitions it "points" the correct handler
1615+ 691B             >                // Use of "; ok" to suppress "warning[fwdref]"
1615+ 691B             >
1615+ 691B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1616+ 691B E1                           pop     hl
1617+ 691C F1                           pop     af                  // < n1
1618+ 691D E5                           push    hl                  // > n2  and TOS
1619+ 691E F5                           push    af                  // > n1
1620+ 691F E5                           push    hl
1621+ 6920                              next
1621+ 6920 DD E9       >                jp      (ix)
1622+ 6922
1623+ 6922              //  ______________________________________________________________________
1624+ 6922              //
1625+ 6922              // swap         n1 n2 -- n2 n1
1626+ 6922              // swaps the two values on top of stack
1627+ 6922                              New_Def SWAP, "SWAP", is_code, is_normal
1627+ 6922             >
1627+ 6922             >Dict_Ptr        defl    $
1627+ 6922             >
1627+ 6922             >//              ______________________________________________________________________
1627+ 6922             >//              Heap part
1627+ 6922             >
1627+ 6922             >
1627+ 6922             >                org     (Heap_Ptr & $1FFF) + $E000
1627+ E290             >
1627+ E290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1627+ E290             >Latest_Definition defl  Heap_Ptr
1627+ E290             >
1627+ E290             >                // dummy db directives used to calculate length of namec
1627+ E290 53 57 41 50 >                db      "SWAP"
1627+ E294             >len_NFA         defl    $ - temp_NFA
1627+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1627+ E290             >
1627+ E290 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1627+ E291 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1627+ E295             >                org     $-1                 // alter last byte of Name just above to set
1627+ E294 D0          >                db      {b $} | END_BIT     // msb as name end
1627+ E295             >
1627+ E295 87 02       >                dw      Prev_Ptr            // Link to previous definition Name
1627+ E297             >Prev_Ptr        defl    Heap_Ptr
1627+ E297             >
1627+ E297             >mirror_Ptr      defl    $
1627+ E297             >
1627+ E297 24 69       >                dw      Dict_Ptr + 2        // xt
1627+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1627+ E299             >
1627+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1627+ E299             >
1627+ E299             >//              ______________________________________________________________________
1627+ E299             >//              Dictionary part
1627+ E299             >
1627+ E299             >                org     Dict_Ptr
1627+ 6922             >
1627+ 6922 97 02       >                dw      mirror_Ptr - $E000
1627+ 6924             >
1627+ 6924             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1627+ 6924 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1627+ 6924 ~           >
1627+ 6924 ~           >
1627+ 6924             >                endif           ; ok        // for other definitions it "points" the correct handler
1627+ 6924             >                // Use of "; ok" to suppress "warning[fwdref]"
1627+ 6924             >
1627+ 6924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1628+ 6924 E1                           pop     hl                  // < n1
1629+ 6925 E3                           ex      (sp),hl             // > n2
1630+ 6926 E5                           push    hl                  // copy n1 to TOS
1631+ 6927                              next
1631+ 6927 DD E9       >                jp      (ix)
1632+ 6929
1633+ 6929              //  ______________________________________________________________________
1634+ 6929              //
1635+ 6929              // dup         n -- n n
1636+ 6929              // duplicates the top value of stack
1637+ 6929                              New_Def DUP, "DUP", is_code, is_normal
1637+ 6929             >
1637+ 6929             >Dict_Ptr        defl    $
1637+ 6929             >
1637+ 6929             >//              ______________________________________________________________________
1637+ 6929             >//              Heap part
1637+ 6929             >
1637+ 6929             >
1637+ 6929             >                org     (Heap_Ptr & $1FFF) + $E000
1637+ E299             >
1637+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ E299             >Latest_Definition defl  Heap_Ptr
1637+ E299             >
1637+ E299             >                // dummy db directives used to calculate length of namec
1637+ E299 44 55 50    >                db      "DUP"
1637+ E29C             >len_NFA         defl    $ - temp_NFA
1637+ E29C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ E299             >
1637+ E299 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ E29A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1637+ E29D             >                org     $-1                 // alter last byte of Name just above to set
1637+ E29C D0          >                db      {b $} | END_BIT     // msb as name end
1637+ E29D             >
1637+ E29D 90 02       >                dw      Prev_Ptr            // Link to previous definition Name
1637+ E29F             >Prev_Ptr        defl    Heap_Ptr
1637+ E29F             >
1637+ E29F             >mirror_Ptr      defl    $
1637+ E29F             >
1637+ E29F 2B 69       >                dw      Dict_Ptr + 2        // xt
1637+ E2A1             >Heap_Ptr        defl    $ - $E000           // save current HP
1637+ E2A1             >
1637+ E2A1             >Current_HP      defl  $ - $E000             // used to set HP once!
1637+ E2A1             >
1637+ E2A1             >//              ______________________________________________________________________
1637+ E2A1             >//              Dictionary part
1637+ E2A1             >
1637+ E2A1             >                org     Dict_Ptr
1637+ 6929             >
1637+ 6929 9F 02       >                dw      mirror_Ptr - $E000
1637+ 692B             >
1637+ 692B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 692B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1637+ 692B ~           >
1637+ 692B ~           >
1637+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 692B             >
1637+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 692B E1                           pop     hl
1639+ 692C E5                           push    hl                  // > n duplicate TOS
1640+ 692D E5                           push    hl
1641+ 692E                              next
1641+ 692E DD E9       >                jp      (ix)
1642+ 6930
1643+ 6930              //  ______________________________________________________________________
1644+ 6930              //
1645+ 6930              // rot         n1 n2 n3 -- n2 n3 n1
1646+ 6930              // Rotates the 3 top values of stack by picking the 3rd in access-order
1647+ 6930              // and putting it on top. The other two are shifted down one place.
1648+ 6930                              New_Def ROT, "ROT", is_code, is_normal
1648+ 6930             >
1648+ 6930             >Dict_Ptr        defl    $
1648+ 6930             >
1648+ 6930             >//              ______________________________________________________________________
1648+ 6930             >//              Heap part
1648+ 6930             >
1648+ 6930             >
1648+ 6930             >                org     (Heap_Ptr & $1FFF) + $E000
1648+ E2A1             >
1648+ E2A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1648+ E2A1             >Latest_Definition defl  Heap_Ptr
1648+ E2A1             >
1648+ E2A1             >                // dummy db directives used to calculate length of namec
1648+ E2A1 52 4F 54    >                db      "ROT"
1648+ E2A4             >len_NFA         defl    $ - temp_NFA
1648+ E2A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1648+ E2A1             >
1648+ E2A1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1648+ E2A2 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1648+ E2A5             >                org     $-1                 // alter last byte of Name just above to set
1648+ E2A4 D4          >                db      {b $} | END_BIT     // msb as name end
1648+ E2A5             >
1648+ E2A5 99 02       >                dw      Prev_Ptr            // Link to previous definition Name
1648+ E2A7             >Prev_Ptr        defl    Heap_Ptr
1648+ E2A7             >
1648+ E2A7             >mirror_Ptr      defl    $
1648+ E2A7             >
1648+ E2A7 32 69       >                dw      Dict_Ptr + 2        // xt
1648+ E2A9             >Heap_Ptr        defl    $ - $E000           // save current HP
1648+ E2A9             >
1648+ E2A9             >Current_HP      defl  $ - $E000             // used to set HP once!
1648+ E2A9             >
1648+ E2A9             >//              ______________________________________________________________________
1648+ E2A9             >//              Dictionary part
1648+ E2A9             >
1648+ E2A9             >                org     Dict_Ptr
1648+ 6930             >
1648+ 6930 A7 02       >                dw      mirror_Ptr - $E000
1648+ 6932             >
1648+ 6932             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1648+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1648+ 6932 ~           >
1648+ 6932 ~           >
1648+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1648+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1648+ 6932             >
1648+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1649+ 6932 D9                           exx
1650+ 6933 D1                           pop     de                  // < n3
1651+ 6934 E1                           pop     hl                  // < n2
1652+ 6935 E3                           ex      (sp),hl             // > n2 < n1
1653+ 6936 D5                           push    de                  // > n3
1654+ 6937 E5                           push    hl                  // copy n1 to TOS
1655+ 6938 D9                           exx
1656+ 6939                              next
1656+ 6939 DD E9       >                jp      (ix)
1657+ 693B
1658+ 693B              //  ______________________________________________________________________
1659+ 693B              //
1660+ 693B              // -rot         n1 n2 n3 -- n3 n1 n2
1661+ 693B              // Rotates the 3 top values of stack by picking the 1st in access-order
1662+ 693B              // and putting back to 3rd place. The other two are shifted down one place.
1663+ 693B                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1663+ 693B             >
1663+ 693B             >Dict_Ptr        defl    $
1663+ 693B             >
1663+ 693B             >//              ______________________________________________________________________
1663+ 693B             >//              Heap part
1663+ 693B             >
1663+ 693B             >
1663+ 693B             >                org     (Heap_Ptr & $1FFF) + $E000
1663+ E2A9             >
1663+ E2A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1663+ E2A9             >Latest_Definition defl  Heap_Ptr
1663+ E2A9             >
1663+ E2A9             >                // dummy db directives used to calculate length of namec
1663+ E2A9 2D 52 4F 54 >                db      "-ROT"
1663+ E2AD             >len_NFA         defl    $ - temp_NFA
1663+ E2AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1663+ E2A9             >
1663+ E2A9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1663+ E2AA 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1663+ E2AE             >                org     $-1                 // alter last byte of Name just above to set
1663+ E2AD D4          >                db      {b $} | END_BIT     // msb as name end
1663+ E2AE             >
1663+ E2AE A1 02       >                dw      Prev_Ptr            // Link to previous definition Name
1663+ E2B0             >Prev_Ptr        defl    Heap_Ptr
1663+ E2B0             >
1663+ E2B0             >mirror_Ptr      defl    $
1663+ E2B0             >
1663+ E2B0 3D 69       >                dw      Dict_Ptr + 2        // xt
1663+ E2B2             >Heap_Ptr        defl    $ - $E000           // save current HP
1663+ E2B2             >
1663+ E2B2             >Current_HP      defl  $ - $E000             // used to set HP once!
1663+ E2B2             >
1663+ E2B2             >//              ______________________________________________________________________
1663+ E2B2             >//              Dictionary part
1663+ E2B2             >
1663+ E2B2             >                org     Dict_Ptr
1663+ 693B             >
1663+ 693B B0 02       >                dw      mirror_Ptr - $E000
1663+ 693D             >
1663+ 693D             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1663+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1663+ 693D ~           >
1663+ 693D ~           >
1663+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1663+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1663+ 693D             >
1663+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1664+ 693D D9                           exx
1665+ 693E E1                           pop     hl                  // < n3
1666+ 693F D1                           pop     de                  // < n2
1667+ 6940 E3                           ex      (sp),hl             // > n3 < n1
1668+ 6941 E5                           push    hl                  // > n1
1669+ 6942 D5                           push    de                  // copy n3 to TOS
1670+ 6943 D9                           exx
1671+ 6944                              next
1671+ 6944 DD E9       >                jp      (ix)
1672+ 6946
1673+ 6946              //  ______________________________________________________________________
1674+ 6946              //
1675+ 6946              // pick        n1 -- nx
1676+ 6946              // picks the nth element from TOS
1677+ 6946                              New_Def PICK, "PICK", is_code, is_normal
1677+ 6946             >
1677+ 6946             >Dict_Ptr        defl    $
1677+ 6946             >
1677+ 6946             >//              ______________________________________________________________________
1677+ 6946             >//              Heap part
1677+ 6946             >
1677+ 6946             >
1677+ 6946             >                org     (Heap_Ptr & $1FFF) + $E000
1677+ E2B2             >
1677+ E2B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1677+ E2B2             >Latest_Definition defl  Heap_Ptr
1677+ E2B2             >
1677+ E2B2             >                // dummy db directives used to calculate length of namec
1677+ E2B2 50 49 43 4B >                db      "PICK"
1677+ E2B6             >len_NFA         defl    $ - temp_NFA
1677+ E2B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1677+ E2B2             >
1677+ E2B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1677+ E2B3 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1677+ E2B7             >                org     $-1                 // alter last byte of Name just above to set
1677+ E2B6 CB          >                db      {b $} | END_BIT     // msb as name end
1677+ E2B7             >
1677+ E2B7 A9 02       >                dw      Prev_Ptr            // Link to previous definition Name
1677+ E2B9             >Prev_Ptr        defl    Heap_Ptr
1677+ E2B9             >
1677+ E2B9             >mirror_Ptr      defl    $
1677+ E2B9             >
1677+ E2B9 48 69       >                dw      Dict_Ptr + 2        // xt
1677+ E2BB             >Heap_Ptr        defl    $ - $E000           // save current HP
1677+ E2BB             >
1677+ E2BB             >Current_HP      defl  $ - $E000             // used to set HP once!
1677+ E2BB             >
1677+ E2BB             >//              ______________________________________________________________________
1677+ E2BB             >//              Dictionary part
1677+ E2BB             >
1677+ E2BB             >                org     Dict_Ptr
1677+ 6946             >
1677+ 6946 B9 02       >                dw      mirror_Ptr - $E000
1677+ 6948             >
1677+ 6948             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1677+ 6948 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1677+ 6948 ~           >
1677+ 6948 ~           >
1677+ 6948             >                endif           ; ok        // for other definitions it "points" the correct handler
1677+ 6948             >                // Use of "; ok" to suppress "warning[fwdref]"
1677+ 6948             >
1677+ 6948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1678+ 6948 E1                           pop     hl                  // take TOS as index
1679+ 6949 29                           add     hl, hl              // as cells
1680+ 694A 39                           add     hl, sp              // from Stack Pointer
1681+ 694B 7E                           ld      a, (hl)             // replace TOS
1682+ 694C 23                           inc     hl
1683+ 694D 66                           ld      h, (hl)
1684+ 694E 6F                           ld      l, a
1685+ 694F E5                           push    hl
1686+ 6950                              next
1686+ 6950 DD E9       >                jp      (ix)
1687+ 6952
1688+ 6952
1689+ 6952              //  ______________________________________________________________________
1690+ 6952              //
1691+ 6952              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1692+ 6952              // picks the nth element from TOS
1693+ 6952              //              New_Def ROLL, "ROLL", is_code, is_normal
1694+ 6952              //              exx                     // we need all registers free
1695+ 6952              //              pop     hl              // number of cells to roll
1696+ 6952              //              ld      a, h
1697+ 6952              //              or       l
1698+ 6952              //              jr      z, Roll_Zero
1699+ 6952              //                  add     hl, hl              // number of bytes to move
1700+ 6952              //                  ld      b, h
1701+ 6952              //                  ld      c, l
1702+ 6952              //                  add     hl, sp          // address of n1
1703+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1704+ 6952              //                  inc     hl
1705+ 6952              //                  ex      af, af'
1706+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1707+ 6952              //                  ld      d, h
1708+ 6952              //                  ld      e, l
1709+ 6952              //                  dec     hl
1710+ 6952              //                  dec     hl
1711+ 6952              //                  lddr
1712+ 6952              //                  ex      de, hl
1713+ 6952              //                  ld      (hl), a
1714+ 6952              //                  dec     hl
1715+ 6952              //                  ex      af, af'
1716+ 6952              //                  ld      (hl), a
1717+ 6952              //Roll_Zero:
1718+ 6952              //              exx
1719+ 6952              //              next
1720+ 6952
1721+ 6952
1722+ 6952              //  ______________________________________________________________________
1723+ 6952              //
1724+ 6952              // 2over        d1 d2 -- d1 d2 d1
1725+ 6952              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1726+ 6952              // copy the second double of stack and put on top.
1727+ 6952              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1728+ 6952              //              exx
1729+ 6952              //              ld      hl, 7
1730+ 6952              //              add     hl, sp
1731+ 6952              //              ld      d, (hl)
1732+ 6952              //              dec     hl
1733+ 6952              //              ld      e, (hl)             // d1-L
1734+ 6952              //              push    de
1735+ 6952              //              dec     hl
1736+ 6952              //              ld      d, (hl)
1737+ 6952              //              dec     hl
1738+ 6952              //              ld      e, (hl)             // d1-H
1739+ 6952              //              push    de
1740+ 6952              //              exx
1741+ 6952              //              next
1742+ 6952
1743+ 6952              //  ______________________________________________________________________
1744+ 6952              //
1745+ 6952              // 2drop        d --
1746+ 6952              //              n1 n2 --
1747+ 6952              // drops the top double from stack
1748+ 6952                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1748+ 6952             >
1748+ 6952             >Dict_Ptr        defl    $
1748+ 6952             >
1748+ 6952             >//              ______________________________________________________________________
1748+ 6952             >//              Heap part
1748+ 6952             >
1748+ 6952             >
1748+ 6952             >                org     (Heap_Ptr & $1FFF) + $E000
1748+ E2BB             >
1748+ E2BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1748+ E2BB             >Latest_Definition defl  Heap_Ptr
1748+ E2BB             >
1748+ E2BB             >                // dummy db directives used to calculate length of namec
1748+ E2BB 32 44 52 4F >                db      "2DROP"
1748+ E2BF 50          >
1748+ E2C0             >len_NFA         defl    $ - temp_NFA
1748+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1748+ E2BB             >
1748+ E2BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1748+ E2BC 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1748+ E2C0 50          >
1748+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1748+ E2C0 D0          >                db      {b $} | END_BIT     // msb as name end
1748+ E2C1             >
1748+ E2C1 B2 02       >                dw      Prev_Ptr            // Link to previous definition Name
1748+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1748+ E2C3             >
1748+ E2C3             >mirror_Ptr      defl    $
1748+ E2C3             >
1748+ E2C3 54 69       >                dw      Dict_Ptr + 2        // xt
1748+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1748+ E2C5             >
1748+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1748+ E2C5             >
1748+ E2C5             >//              ______________________________________________________________________
1748+ E2C5             >//              Dictionary part
1748+ E2C5             >
1748+ E2C5             >                org     Dict_Ptr
1748+ 6952             >
1748+ 6952 C3 02       >                dw      mirror_Ptr - $E000
1748+ 6954             >
1748+ 6954             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1748+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1748+ 6954 ~           >
1748+ 6954 ~           >
1748+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1748+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1748+ 6954             >
1748+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1749+ 6954 E1                           pop     hl
1750+ 6955 E1                           pop     hl
1751+ 6956                              next
1751+ 6956 DD E9       >                jp      (ix)
1752+ 6958
1753+ 6958              //  ______________________________________________________________________
1754+ 6958              //
1755+ 6958              // 2nip         d1 d2 -- d2
1756+ 6958              //              n1 n2 n3 n4 -- n3 n4
1757+ 6958              // drops the second double on the stack
1758+ 6958              //              New_Def TWO_NIP, 4, "2nip"
1759+ 6958              //              ...
1760+ 6958
1761+ 6958              //  ______________________________________________________________________
1762+ 6958              //
1763+ 6958              // 2tuck         d1 d2 -- d2 d1 d2
1764+ 6958              // copy the top element after the second.
1765+ 6958              //              New_Def TWO_TUCK, 5, "2tuck"
1766+ 6958              //              ...
1767+ 6958
1768+ 6958              //  ______________________________________________________________________
1769+ 6958              //
1770+ 6958              // 2swap         d1 d2 -- d2 d1
1771+ 6958              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1772+ 6958              // swaps the two doubles on top of stack
1773+ 6958                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1773+ 6958             >
1773+ 6958             >Dict_Ptr        defl    $
1773+ 6958             >
1773+ 6958             >//              ______________________________________________________________________
1773+ 6958             >//              Heap part
1773+ 6958             >
1773+ 6958             >
1773+ 6958             >                org     (Heap_Ptr & $1FFF) + $E000
1773+ E2C5             >
1773+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1773+ E2C5             >Latest_Definition defl  Heap_Ptr
1773+ E2C5             >
1773+ E2C5             >                // dummy db directives used to calculate length of namec
1773+ E2C5 32 53 57 41 >                db      "2SWAP"
1773+ E2C9 50          >
1773+ E2CA             >len_NFA         defl    $ - temp_NFA
1773+ E2CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1773+ E2C5             >
1773+ E2C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1773+ E2C6 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1773+ E2CA 50          >
1773+ E2CB             >                org     $-1                 // alter last byte of Name just above to set
1773+ E2CA D0          >                db      {b $} | END_BIT     // msb as name end
1773+ E2CB             >
1773+ E2CB BB 02       >                dw      Prev_Ptr            // Link to previous definition Name
1773+ E2CD             >Prev_Ptr        defl    Heap_Ptr
1773+ E2CD             >
1773+ E2CD             >mirror_Ptr      defl    $
1773+ E2CD             >
1773+ E2CD 5A 69       >                dw      Dict_Ptr + 2        // xt
1773+ E2CF             >Heap_Ptr        defl    $ - $E000           // save current HP
1773+ E2CF             >
1773+ E2CF             >Current_HP      defl  $ - $E000             // used to set HP once!
1773+ E2CF             >
1773+ E2CF             >//              ______________________________________________________________________
1773+ E2CF             >//              Dictionary part
1773+ E2CF             >
1773+ E2CF             >                org     Dict_Ptr
1773+ 6958             >
1773+ 6958 CD 02       >                dw      mirror_Ptr - $E000
1773+ 695A             >
1773+ 695A             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1773+ 695A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1773+ 695A ~           >
1773+ 695A ~           >
1773+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1773+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1773+ 695A             >
1773+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1774+ 695A D9                           exx
1775+ 695B F1                           pop     af                  //   d2-H
1776+ 695C E1                           pop     hl                  // < d2-L
1777+ 695D D1                           pop     de                  // < d1-H
1778+ 695E E3                           ex      (sp), hl            // < d1-L > d2-L
1779+ 695F F5                           push    af                  // > d2-H
1780+ 6960 E5                           push    hl                  // > d1-L
1781+ 6961 D5                           push    de
1782+ 6962 D9                           exx
1783+ 6963                              next
1783+ 6963 DD E9       >                jp      (ix)
1784+ 6965
1785+ 6965              //  ______________________________________________________________________
1786+ 6965              //
1787+ 6965              // 2dup         d -- d d
1788+ 6965              //              n1 n2 -- n1 n2 n1 n2
1789+ 6965              // duplicates the top double of stack
1790+ 6965                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1790+ 6965             >
1790+ 6965             >Dict_Ptr        defl    $
1790+ 6965             >
1790+ 6965             >//              ______________________________________________________________________
1790+ 6965             >//              Heap part
1790+ 6965             >
1790+ 6965             >
1790+ 6965             >                org     (Heap_Ptr & $1FFF) + $E000
1790+ E2CF             >
1790+ E2CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ E2CF             >Latest_Definition defl  Heap_Ptr
1790+ E2CF             >
1790+ E2CF             >                // dummy db directives used to calculate length of namec
1790+ E2CF 32 44 55 50 >                db      "2DUP"
1790+ E2D3             >len_NFA         defl    $ - temp_NFA
1790+ E2D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ E2CF             >
1790+ E2CF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ E2D0 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1790+ E2D4             >                org     $-1                 // alter last byte of Name just above to set
1790+ E2D3 D0          >                db      {b $} | END_BIT     // msb as name end
1790+ E2D4             >
1790+ E2D4 C5 02       >                dw      Prev_Ptr            // Link to previous definition Name
1790+ E2D6             >Prev_Ptr        defl    Heap_Ptr
1790+ E2D6             >
1790+ E2D6             >mirror_Ptr      defl    $
1790+ E2D6             >
1790+ E2D6 67 69       >                dw      Dict_Ptr + 2        // xt
1790+ E2D8             >Heap_Ptr        defl    $ - $E000           // save current HP
1790+ E2D8             >
1790+ E2D8             >Current_HP      defl  $ - $E000             // used to set HP once!
1790+ E2D8             >
1790+ E2D8             >//              ______________________________________________________________________
1790+ E2D8             >//              Dictionary part
1790+ E2D8             >
1790+ E2D8             >                org     Dict_Ptr
1790+ 6965             >
1790+ 6965 D6 02       >                dw      mirror_Ptr - $E000
1790+ 6967             >
1790+ 6967             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 6967 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1790+ 6967 ~           >
1790+ 6967 ~           >
1790+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 6967             >
1790+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 6967 E1                           pop     hl                  // < d-H
1792+ 6968 F1                           pop     af                  // < d-L
1793+ 6969 F5                           push    af                  // < d-L
1794+ 696A E5                           push    hl                  // > d-H
1795+ 696B F5                           push    af                  // > d-L
1796+ 696C E5                           push    hl                  // > d-H
1797+ 696D                              next
1797+ 696D DD E9       >                jp      (ix)
1798+ 696F
1799+ 696F              //  ______________________________________________________________________
1800+ 696F              //
1801+ 696F              // 2rot         d1 d2 d3 -- d2 d3 d1
1802+ 696F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1803+ 696F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1804+ 696F              // and putting it on top. The other two are shifted down one place.
1805+ 696F              //              New_Def TWO?ROT, 4, "2rot"
1806+ 696F              //              ...
1807+ 696F              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1808+ 696F              //
1809+ 696F              //      d3  |d2  |d1  |
1810+ 696F              //      h l |h l |h l |
1811+ 696F              // SP   LHED|LHED|LHED|
1812+ 696F              // SP  +0123|4567|89ab|
1813+ 696F              //              ld      hl, $000B
1814+ 696F              //              add     hl, sp
1815+ 696F              //              ld      d, (hl)
1816+ 696F              //              dec     hl
1817+ 696F              //              ld      e, (hl)
1818+ 696F              //              dec     hl
1819+ 696F              //              push    de
1820+ 696F              //              ld      d, (hl)
1821+ 696F              //              dec     hl
1822+ 696F              //              ld      e, (hl)
1823+ 696F              //              dec     hl
1824+ 696F              //              push    de
1825+ 696F
1826+ 696F              //      d1  |d3  |d2  |d1  |
1827+ 696F              //      h l |h l |h l |h l |
1828+ 696F              // SP   LHED|LHED|LHED|LHED|
1829+ 696F              // SP       +0123|4567|89ab|
1830+ 696F
1831+ 696F              //              ld      d, h
1832+ 696F              //              ld      e, l
1833+ 696F              //              inc     de
1834+ 696F              //              inc     de
1835+ 696F              //              inc     de
1836+ 696F              //              inc     de
1837+ 696F              //              push    bc
1838+ 696F              //              ld      bc, $000C
1839+ 696F              //              lddr
1840+ 696F              //              pop     bc
1841+ 696F              //              pop     de
1842+ 696F              //              pop     de
1843+ 696F              //
1844+ 696F              //              next
1845+ 696F
1846+ 696F
1847+ 696F              //  ______________________________________________________________________
1848+ 696F              //
1849+ 696F              // +!           n a --
1850+ 696F              // Sums to the content of address a the number n.
1851+ 696F              // It is the same of  a @ n + a !
1852+ 696F                              New_Def PLUSSTORE, "+!", is_code, is_normal
1852+ 696F             >
1852+ 696F             >Dict_Ptr        defl    $
1852+ 696F             >
1852+ 696F             >//              ______________________________________________________________________
1852+ 696F             >//              Heap part
1852+ 696F             >
1852+ 696F             >
1852+ 696F             >                org     (Heap_Ptr & $1FFF) + $E000
1852+ E2D8             >
1852+ E2D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1852+ E2D8             >Latest_Definition defl  Heap_Ptr
1852+ E2D8             >
1852+ E2D8             >                // dummy db directives used to calculate length of namec
1852+ E2D8 2B 21       >                db      "+!"
1852+ E2DA             >len_NFA         defl    $ - temp_NFA
1852+ E2DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1852+ E2D8             >
1852+ E2D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1852+ E2D9 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1852+ E2DB             >                org     $-1                 // alter last byte of Name just above to set
1852+ E2DA A1          >                db      {b $} | END_BIT     // msb as name end
1852+ E2DB             >
1852+ E2DB CF 02       >                dw      Prev_Ptr            // Link to previous definition Name
1852+ E2DD             >Prev_Ptr        defl    Heap_Ptr
1852+ E2DD             >
1852+ E2DD             >mirror_Ptr      defl    $
1852+ E2DD             >
1852+ E2DD 71 69       >                dw      Dict_Ptr + 2        // xt
1852+ E2DF             >Heap_Ptr        defl    $ - $E000           // save current HP
1852+ E2DF             >
1852+ E2DF             >Current_HP      defl  $ - $E000             // used to set HP once!
1852+ E2DF             >
1852+ E2DF             >//              ______________________________________________________________________
1852+ E2DF             >//              Dictionary part
1852+ E2DF             >
1852+ E2DF             >                org     Dict_Ptr
1852+ 696F             >
1852+ 696F DD 02       >                dw      mirror_Ptr - $E000
1852+ 6971             >
1852+ 6971             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1852+ 6971 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1852+ 6971 ~           >
1852+ 6971 ~           >
1852+ 6971             >                endif           ; ok        // for other definitions it "points" the correct handler
1852+ 6971             >                // Use of "; ok" to suppress "warning[fwdref]"
1852+ 6971             >
1852+ 6971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1853+ 6971 D9                           exx
1854+ 6972 E1                           pop     hl                  // hl is the address
1855+ 6973 D1                           pop     de                  // de is the number
1856+ 6974 7E                           ld      a, (hl)
1857+ 6975 83                           add     e
1858+ 6976 77                           ld      (hl), a
1859+ 6977 23                           inc     hl
1860+ 6978 7E                           ld      a, (hl)
1861+ 6979 8A                           adc     d
1862+ 697A 77                           ld      (hl), a
1863+ 697B D9                           exx
1864+ 697C                              next
1864+ 697C DD E9       >                jp      (ix)
1865+ 697E
1866+ 697E              //  ______________________________________________________________________
1867+ 697E              //
1868+ 697E              // toggle       a n --
1869+ 697E              // Complements (xor) the byte at addrress  a  with the model n.
1870+ 697E                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1870+ 697E             >
1870+ 697E             >Dict_Ptr        defl    $
1870+ 697E             >
1870+ 697E             >//              ______________________________________________________________________
1870+ 697E             >//              Heap part
1870+ 697E             >
1870+ 697E             >
1870+ 697E             >                org     (Heap_Ptr & $1FFF) + $E000
1870+ E2DF             >
1870+ E2DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1870+ E2DF             >Latest_Definition defl  Heap_Ptr
1870+ E2DF             >
1870+ E2DF             >                // dummy db directives used to calculate length of namec
1870+ E2DF 54 4F 47 47 >                db      "TOGGLE"
1870+ E2E3 4C 45       >
1870+ E2E5             >len_NFA         defl    $ - temp_NFA
1870+ E2E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1870+ E2DF             >
1870+ E2DF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1870+ E2E0 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1870+ E2E4 4C 45       >
1870+ E2E6             >                org     $-1                 // alter last byte of Name just above to set
1870+ E2E5 C5          >                db      {b $} | END_BIT     // msb as name end
1870+ E2E6             >
1870+ E2E6 D8 02       >                dw      Prev_Ptr            // Link to previous definition Name
1870+ E2E8             >Prev_Ptr        defl    Heap_Ptr
1870+ E2E8             >
1870+ E2E8             >mirror_Ptr      defl    $
1870+ E2E8             >
1870+ E2E8 80 69       >                dw      Dict_Ptr + 2        // xt
1870+ E2EA             >Heap_Ptr        defl    $ - $E000           // save current HP
1870+ E2EA             >
1870+ E2EA             >Current_HP      defl  $ - $E000             // used to set HP once!
1870+ E2EA             >
1870+ E2EA             >//              ______________________________________________________________________
1870+ E2EA             >//              Dictionary part
1870+ E2EA             >
1870+ E2EA             >                org     Dict_Ptr
1870+ 697E             >
1870+ 697E E8 02       >                dw      mirror_Ptr - $E000
1870+ 6980             >
1870+ 6980             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1870+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1870+ 6980 ~           >
1870+ 6980 ~           >
1870+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1870+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1870+ 6980             >
1870+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1871+ 6980 E1                           pop     hl
1872+ 6981 7D                           ld      a, l
1873+ 6982 E1                           pop     hl
1874+ 6983 AE                           xor     (hl)
1875+ 6984 77                           ld      (hl), a
1876+ 6985
1877+ 6985                              next
1877+ 6985 DD E9       >                jp      (ix)
1878+ 6987
1879+ 6987              //  ______________________________________________________________________
1880+ 6987              //
1881+ 6987              // @            a -- n
1882+ 6987              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1883+ 6987                              New_Def FETCH, "@", is_code, is_normal
1883+ 6987             >
1883+ 6987             >Dict_Ptr        defl    $
1883+ 6987             >
1883+ 6987             >//              ______________________________________________________________________
1883+ 6987             >//              Heap part
1883+ 6987             >
1883+ 6987             >
1883+ 6987             >                org     (Heap_Ptr & $1FFF) + $E000
1883+ E2EA             >
1883+ E2EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1883+ E2EA             >Latest_Definition defl  Heap_Ptr
1883+ E2EA             >
1883+ E2EA             >                // dummy db directives used to calculate length of namec
1883+ E2EA 40          >                db      "@"
1883+ E2EB             >len_NFA         defl    $ - temp_NFA
1883+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1883+ E2EA             >
1883+ E2EA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1883+ E2EB 40          >                db      "@"               // name string in 7-bit ascii, but
1883+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1883+ E2EB C0          >                db      {b $} | END_BIT     // msb as name end
1883+ E2EC             >
1883+ E2EC DF 02       >                dw      Prev_Ptr            // Link to previous definition Name
1883+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1883+ E2EE             >
1883+ E2EE             >mirror_Ptr      defl    $
1883+ E2EE             >
1883+ E2EE 89 69       >                dw      Dict_Ptr + 2        // xt
1883+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1883+ E2F0             >
1883+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1883+ E2F0             >
1883+ E2F0             >//              ______________________________________________________________________
1883+ E2F0             >//              Dictionary part
1883+ E2F0             >
1883+ E2F0             >                org     Dict_Ptr
1883+ 6987             >
1883+ 6987 EE 02       >                dw      mirror_Ptr - $E000
1883+ 6989             >
1883+ 6989             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1883+ 6989 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1883+ 6989 ~           >
1883+ 6989 ~           >
1883+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1883+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1883+ 6989             >
1883+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1884+ 6989 E1                           pop     hl
1885+ 698A 7E                           ld      a, (hl)             // low-byte
1886+ 698B 23                           inc     hl
1887+ 698C 66                           ld      h, (hl)             // high-byte
1888+ 698D 6F                           ld      l, a
1889+ 698E E5                           push    hl
1890+ 698F                              next
1890+ 698F DD E9       >                jp      (ix)
1891+ 6991
1892+ 6991              //  ______________________________________________________________________
1893+ 6991              //
1894+ 6991              // !            n a --
1895+ 6991              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1896+ 6991                              New_Def STORE, "!", is_code, is_normal
1896+ 6991             >
1896+ 6991             >Dict_Ptr        defl    $
1896+ 6991             >
1896+ 6991             >//              ______________________________________________________________________
1896+ 6991             >//              Heap part
1896+ 6991             >
1896+ 6991             >
1896+ 6991             >                org     (Heap_Ptr & $1FFF) + $E000
1896+ E2F0             >
1896+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1896+ E2F0             >Latest_Definition defl  Heap_Ptr
1896+ E2F0             >
1896+ E2F0             >                // dummy db directives used to calculate length of namec
1896+ E2F0 21          >                db      "!"
1896+ E2F1             >len_NFA         defl    $ - temp_NFA
1896+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1896+ E2F0             >
1896+ E2F0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1896+ E2F1 21          >                db      "!"               // name string in 7-bit ascii, but
1896+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1896+ E2F1 A1          >                db      {b $} | END_BIT     // msb as name end
1896+ E2F2             >
1896+ E2F2 EA 02       >                dw      Prev_Ptr            // Link to previous definition Name
1896+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1896+ E2F4             >
1896+ E2F4             >mirror_Ptr      defl    $
1896+ E2F4             >
1896+ E2F4 93 69       >                dw      Dict_Ptr + 2        // xt
1896+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1896+ E2F6             >
1896+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1896+ E2F6             >
1896+ E2F6             >//              ______________________________________________________________________
1896+ E2F6             >//              Dictionary part
1896+ E2F6             >
1896+ E2F6             >                org     Dict_Ptr
1896+ 6991             >
1896+ 6991 F4 02       >                dw      mirror_Ptr - $E000
1896+ 6993             >
1896+ 6993             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1896+ 6993 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1896+ 6993 ~           >
1896+ 6993 ~           >
1896+ 6993             >                endif           ; ok        // for other definitions it "points" the correct handler
1896+ 6993             >                // Use of "; ok" to suppress "warning[fwdref]"
1896+ 6993             >
1896+ 6993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1897+ 6993 D9                           exx
1898+ 6994 E1                           pop     hl                  // address
1899+ 6995 D1                           pop     de                  // < n
1900+ 6996 73                           ld      (hl), e             // low-byte
1901+ 6997 23                           inc     hl
1902+ 6998 72                           ld      (hl), d             // high-byte
1903+ 6999 D9                           exx
1904+ 699A                              next
1904+ 699A DD E9       >                jp      (ix)
1905+ 699C
1906+ 699C              //  ______________________________________________________________________
1907+ 699C              //
1908+ 699C              // c@           a -- c
1909+ 699C              // fetch a character n from address a
1910+ 699C                              New_Def CFETCH, "C@", is_code, is_normal
1910+ 699C             >
1910+ 699C             >Dict_Ptr        defl    $
1910+ 699C             >
1910+ 699C             >//              ______________________________________________________________________
1910+ 699C             >//              Heap part
1910+ 699C             >
1910+ 699C             >
1910+ 699C             >                org     (Heap_Ptr & $1FFF) + $E000
1910+ E2F6             >
1910+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1910+ E2F6             >Latest_Definition defl  Heap_Ptr
1910+ E2F6             >
1910+ E2F6             >                // dummy db directives used to calculate length of namec
1910+ E2F6 43 40       >                db      "C@"
1910+ E2F8             >len_NFA         defl    $ - temp_NFA
1910+ E2F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1910+ E2F6             >
1910+ E2F6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1910+ E2F7 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1910+ E2F9             >                org     $-1                 // alter last byte of Name just above to set
1910+ E2F8 C0          >                db      {b $} | END_BIT     // msb as name end
1910+ E2F9             >
1910+ E2F9 F0 02       >                dw      Prev_Ptr            // Link to previous definition Name
1910+ E2FB             >Prev_Ptr        defl    Heap_Ptr
1910+ E2FB             >
1910+ E2FB             >mirror_Ptr      defl    $
1910+ E2FB             >
1910+ E2FB 9E 69       >                dw      Dict_Ptr + 2        // xt
1910+ E2FD             >Heap_Ptr        defl    $ - $E000           // save current HP
1910+ E2FD             >
1910+ E2FD             >Current_HP      defl  $ - $E000             // used to set HP once!
1910+ E2FD             >
1910+ E2FD             >//              ______________________________________________________________________
1910+ E2FD             >//              Dictionary part
1910+ E2FD             >
1910+ E2FD             >                org     Dict_Ptr
1910+ 699C             >
1910+ 699C FB 02       >                dw      mirror_Ptr - $E000
1910+ 699E             >
1910+ 699E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1910+ 699E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1910+ 699E ~           >
1910+ 699E ~           >
1910+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1910+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1910+ 699E             >
1910+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1911+ 699E E1                           pop     hl
1912+ 699F 6E                           ld      l, (hl)             // low-byte
1913+ 69A0 26 00                        ld      h, 0
1914+ 69A2
1915+ 69A2                              psh1
1915+ 69A2 E5          >                push    hl
1915+ 69A3 DD E9       >                jp      (ix)
1916+ 69A5
1917+ 69A5              //  ______________________________________________________________________
1918+ 69A5              //
1919+ 69A5              // c!           c a --
1920+ 69A5              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1921+ 69A5                              New_Def CSTORE, "C!", is_code, is_normal
1921+ 69A5             >
1921+ 69A5             >Dict_Ptr        defl    $
1921+ 69A5             >
1921+ 69A5             >//              ______________________________________________________________________
1921+ 69A5             >//              Heap part
1921+ 69A5             >
1921+ 69A5             >
1921+ 69A5             >                org     (Heap_Ptr & $1FFF) + $E000
1921+ E2FD             >
1921+ E2FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1921+ E2FD             >Latest_Definition defl  Heap_Ptr
1921+ E2FD             >
1921+ E2FD             >                // dummy db directives used to calculate length of namec
1921+ E2FD 43 21       >                db      "C!"
1921+ E2FF             >len_NFA         defl    $ - temp_NFA
1921+ E2FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1921+ E2FD             >
1921+ E2FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1921+ E2FE 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1921+ E300             >                org     $-1                 // alter last byte of Name just above to set
1921+ E2FF A1          >                db      {b $} | END_BIT     // msb as name end
1921+ E300             >
1921+ E300 F6 02       >                dw      Prev_Ptr            // Link to previous definition Name
1921+ E302             >Prev_Ptr        defl    Heap_Ptr
1921+ E302             >
1921+ E302             >mirror_Ptr      defl    $
1921+ E302             >
1921+ E302 A7 69       >                dw      Dict_Ptr + 2        // xt
1921+ E304             >Heap_Ptr        defl    $ - $E000           // save current HP
1921+ E304             >
1921+ E304             >Current_HP      defl  $ - $E000             // used to set HP once!
1921+ E304             >
1921+ E304             >//              ______________________________________________________________________
1921+ E304             >//              Dictionary part
1921+ E304             >
1921+ E304             >                org     Dict_Ptr
1921+ 69A5             >
1921+ 69A5 02 03       >                dw      mirror_Ptr - $E000
1921+ 69A7             >
1921+ 69A7             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1921+ 69A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1921+ 69A7 ~           >
1921+ 69A7 ~           >
1921+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1921+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1921+ 69A7             >
1921+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1922+ 69A7 D9                           exx
1923+ 69A8 E1                           pop     hl                  // < address
1924+ 69A9 D1                           pop     de
1925+ 69AA 73                           ld      (hl), e             // low-byte
1926+ 69AB D9                           exx
1927+ 69AC                              next
1927+ 69AC DD E9       >                jp      (ix)
1928+ 69AE
1929+ 69AE              //  ______________________________________________________________________
1930+ 69AE              //
1931+ 69AE              // 2@           a -- d
1932+ 69AE              // fetch a 32 bits number d from address a and leaves it on top of the
1933+ 69AE              // stack as two single numbers, high part as top of the stack.
1934+ 69AE              // A double number is normally kept in CPU registers as HLDE.
1935+ 69AE              // On stack a double number is treated as two single numbers
1936+ 69AE              // where BC is on the top of the stack and HL is the second from top,
1937+ 69AE              // so the sign of the number can be checked on top of stack
1938+ 69AE              // and in the stack memory it appears as LHED.
1939+ 69AE                              New_Def TWO_FETCH, "2@", is_code, is_normal
1939+ 69AE             >
1939+ 69AE             >Dict_Ptr        defl    $
1939+ 69AE             >
1939+ 69AE             >//              ______________________________________________________________________
1939+ 69AE             >//              Heap part
1939+ 69AE             >
1939+ 69AE             >
1939+ 69AE             >                org     (Heap_Ptr & $1FFF) + $E000
1939+ E304             >
1939+ E304             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1939+ E304             >Latest_Definition defl  Heap_Ptr
1939+ E304             >
1939+ E304             >                // dummy db directives used to calculate length of namec
1939+ E304 32 40       >                db      "2@"
1939+ E306             >len_NFA         defl    $ - temp_NFA
1939+ E306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1939+ E304             >
1939+ E304 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1939+ E305 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1939+ E307             >                org     $-1                 // alter last byte of Name just above to set
1939+ E306 C0          >                db      {b $} | END_BIT     // msb as name end
1939+ E307             >
1939+ E307 FD 02       >                dw      Prev_Ptr            // Link to previous definition Name
1939+ E309             >Prev_Ptr        defl    Heap_Ptr
1939+ E309             >
1939+ E309             >mirror_Ptr      defl    $
1939+ E309             >
1939+ E309 B0 69       >                dw      Dict_Ptr + 2        // xt
1939+ E30B             >Heap_Ptr        defl    $ - $E000           // save current HP
1939+ E30B             >
1939+ E30B             >Current_HP      defl  $ - $E000             // used to set HP once!
1939+ E30B             >
1939+ E30B             >//              ______________________________________________________________________
1939+ E30B             >//              Dictionary part
1939+ E30B             >
1939+ E30B             >                org     Dict_Ptr
1939+ 69AE             >
1939+ 69AE 09 03       >                dw      mirror_Ptr - $E000
1939+ 69B0             >
1939+ 69B0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1939+ 69B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1939+ 69B0 ~           >
1939+ 69B0 ~           >
1939+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1939+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1939+ 69B0             >
1939+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1940+ 69B0 D9                           exx
1941+ 69B1 E1                           pop     hl                  // address
1942+ 69B2 5E                           ld      e, (hl)             // low-byte
1943+ 69B3 23                           inc     hl
1944+ 69B4 56                           ld      d, (hl)             // high-byte
1945+ 69B5 23                           inc     hl
1946+ 69B6 7E                           ld      a, (hl)             // low-byte
1947+ 69B7 23                           inc     hl
1948+ 69B8 66                           ld      h, (hl)             // high-byte
1949+ 69B9 6F                           ld      l, a
1950+ 69BA E5                           push    hl
1951+ 69BB D5                           push    de
1952+ 69BC D9                           exx
1953+ 69BD                              next
1953+ 69BD DD E9       >                jp      (ix)
1954+ 69BF
1955+ 69BF              //  ______________________________________________________________________
1956+ 69BF              //
1957+ 69BF              // 2!           d a --
1958+ 69BF              // stores a 32 bits number d from address a and leaves it on top of the
1959+ 69BF              // stack as two single numbers, high part as top of the stack.
1960+ 69BF              // A double number is normally kept in CPU registers as HLDE.
1961+ 69BF              // On stack a double number is treated as two single numbers
1962+ 69BF              // where BC is on the top of the stack and HL is the second from top,
1963+ 69BF              // so the sign of the number can be checked on top of stack
1964+ 69BF              // and in the stack memory it appears as LHED.
1965+ 69BF                              New_Def TWO_STORE, "2!", is_code, is_normal
1965+ 69BF             >
1965+ 69BF             >Dict_Ptr        defl    $
1965+ 69BF             >
1965+ 69BF             >//              ______________________________________________________________________
1965+ 69BF             >//              Heap part
1965+ 69BF             >
1965+ 69BF             >
1965+ 69BF             >                org     (Heap_Ptr & $1FFF) + $E000
1965+ E30B             >
1965+ E30B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1965+ E30B             >Latest_Definition defl  Heap_Ptr
1965+ E30B             >
1965+ E30B             >                // dummy db directives used to calculate length of namec
1965+ E30B 32 21       >                db      "2!"
1965+ E30D             >len_NFA         defl    $ - temp_NFA
1965+ E30D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1965+ E30B             >
1965+ E30B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1965+ E30C 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1965+ E30E             >                org     $-1                 // alter last byte of Name just above to set
1965+ E30D A1          >                db      {b $} | END_BIT     // msb as name end
1965+ E30E             >
1965+ E30E 04 03       >                dw      Prev_Ptr            // Link to previous definition Name
1965+ E310             >Prev_Ptr        defl    Heap_Ptr
1965+ E310             >
1965+ E310             >mirror_Ptr      defl    $
1965+ E310             >
1965+ E310 C1 69       >                dw      Dict_Ptr + 2        // xt
1965+ E312             >Heap_Ptr        defl    $ - $E000           // save current HP
1965+ E312             >
1965+ E312             >Current_HP      defl  $ - $E000             // used to set HP once!
1965+ E312             >
1965+ E312             >//              ______________________________________________________________________
1965+ E312             >//              Dictionary part
1965+ E312             >
1965+ E312             >                org     Dict_Ptr
1965+ 69BF             >
1965+ 69BF 10 03       >                dw      mirror_Ptr - $E000
1965+ 69C1             >
1965+ 69C1             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1965+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1965+ 69C1 ~           >
1965+ 69C1 ~           >
1965+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1965+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1965+ 69C1             >
1965+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1966+ 69C1 D9                           exx
1967+ 69C2 E1                           pop     hl                  // address
1968+ 69C3 C1                           pop     bc                  // < high-part
1969+ 69C4 D1                           pop     de                  // < low-part > Instruction Pointer
1970+ 69C5 71                           ld      (hl), c
1971+ 69C6 23                           inc     hl
1972+ 69C7 70                           ld      (hl), b
1973+ 69C8 23                           inc     hl
1974+ 69C9 73                           ld      (hl), e
1975+ 69CA 23                           inc     hl
1976+ 69CB 72                           ld      (hl), d
1977+ 69CC D9                           exx
1978+ 69CD                              next
1978+ 69CD DD E9       >                jp      (ix)
1979+ 69CF
1980+ 69CF              //  ______________________________________________________________________
1981+ 69CF              //
1982+ 69CF              // p@           a -- c
1983+ 69CF              // Read one byte from port a and leave the result on top of stack
1984+ 69CF                              New_Def PFETCH, "P@", is_code, is_normal
1984+ 69CF             >
1984+ 69CF             >Dict_Ptr        defl    $
1984+ 69CF             >
1984+ 69CF             >//              ______________________________________________________________________
1984+ 69CF             >//              Heap part
1984+ 69CF             >
1984+ 69CF             >
1984+ 69CF             >                org     (Heap_Ptr & $1FFF) + $E000
1984+ E312             >
1984+ E312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1984+ E312             >Latest_Definition defl  Heap_Ptr
1984+ E312             >
1984+ E312             >                // dummy db directives used to calculate length of namec
1984+ E312 50 40       >                db      "P@"
1984+ E314             >len_NFA         defl    $ - temp_NFA
1984+ E314             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1984+ E312             >
1984+ E312 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1984+ E313 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1984+ E315             >                org     $-1                 // alter last byte of Name just above to set
1984+ E314 C0          >                db      {b $} | END_BIT     // msb as name end
1984+ E315             >
1984+ E315 0B 03       >                dw      Prev_Ptr            // Link to previous definition Name
1984+ E317             >Prev_Ptr        defl    Heap_Ptr
1984+ E317             >
1984+ E317             >mirror_Ptr      defl    $
1984+ E317             >
1984+ E317 D1 69       >                dw      Dict_Ptr + 2        // xt
1984+ E319             >Heap_Ptr        defl    $ - $E000           // save current HP
1984+ E319             >
1984+ E319             >Current_HP      defl  $ - $E000             // used to set HP once!
1984+ E319             >
1984+ E319             >//              ______________________________________________________________________
1984+ E319             >//              Dictionary part
1984+ E319             >
1984+ E319             >                org     Dict_Ptr
1984+ 69CF             >
1984+ 69CF 17 03       >                dw      mirror_Ptr - $E000
1984+ 69D1             >
1984+ 69D1             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1984+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1984+ 69D1 ~           >
1984+ 69D1 ~           >
1984+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1984+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1984+ 69D1             >
1984+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1985+ 69D1 D9                           exx
1986+ 69D2 C1                           pop     bc
1987+ 69D3 26 00                        ld      h, 0
1988+ 69D5 ED 68                        in      l, (c)
1989+ 69D7 E5                           push    hl
1990+ 69D8 D9                           exx
1991+ 69D9                              next
1991+ 69D9 DD E9       >                jp      (ix)
1992+ 69DB
1993+ 69DB              //  ______________________________________________________________________
1994+ 69DB              //
1995+ 69DB              // p!           c a --
1996+ 69DB              // Send one byte (top of stack) to port a
1997+ 69DB                              New_Def PSTORE, "P!", is_code, is_normal
1997+ 69DB             >
1997+ 69DB             >Dict_Ptr        defl    $
1997+ 69DB             >
1997+ 69DB             >//              ______________________________________________________________________
1997+ 69DB             >//              Heap part
1997+ 69DB             >
1997+ 69DB             >
1997+ 69DB             >                org     (Heap_Ptr & $1FFF) + $E000
1997+ E319             >
1997+ E319             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1997+ E319             >Latest_Definition defl  Heap_Ptr
1997+ E319             >
1997+ E319             >                // dummy db directives used to calculate length of namec
1997+ E319 50 21       >                db      "P!"
1997+ E31B             >len_NFA         defl    $ - temp_NFA
1997+ E31B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1997+ E319             >
1997+ E319 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1997+ E31A 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1997+ E31C             >                org     $-1                 // alter last byte of Name just above to set
1997+ E31B A1          >                db      {b $} | END_BIT     // msb as name end
1997+ E31C             >
1997+ E31C 12 03       >                dw      Prev_Ptr            // Link to previous definition Name
1997+ E31E             >Prev_Ptr        defl    Heap_Ptr
1997+ E31E             >
1997+ E31E             >mirror_Ptr      defl    $
1997+ E31E             >
1997+ E31E DD 69       >                dw      Dict_Ptr + 2        // xt
1997+ E320             >Heap_Ptr        defl    $ - $E000           // save current HP
1997+ E320             >
1997+ E320             >Current_HP      defl  $ - $E000             // used to set HP once!
1997+ E320             >
1997+ E320             >//              ______________________________________________________________________
1997+ E320             >//              Dictionary part
1997+ E320             >
1997+ E320             >                org     Dict_Ptr
1997+ 69DB             >
1997+ 69DB 1E 03       >                dw      mirror_Ptr - $E000
1997+ 69DD             >
1997+ 69DD             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1997+ 69DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1997+ 69DD ~           >
1997+ 69DD ~           >
1997+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1997+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1997+ 69DD             >
1997+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1998+ 69DD D9                           exx
1999+ 69DE C1                           pop     bc
2000+ 69DF E1                           pop     hl                  // < c
2001+ 69E0 ED 69                        out     (c), l              // low-byte
2002+ 69E2 D9                           exx
2003+ 69E3                              next
2003+ 69E3 DD E9       >                jp      (ix)
2004+ 69E5
2005+ 69E5
2006+ 69E5              //  ______________________________________________________________________
2007+ 69E5              //
2008+ 69E5              // 2*           n1 -- n2
2009+ 69E5              // doubles the number at top of stack
2010+ 69E5                              New_Def TWO_MUL, "2*", is_code, is_normal
2010+ 69E5             >
2010+ 69E5             >Dict_Ptr        defl    $
2010+ 69E5             >
2010+ 69E5             >//              ______________________________________________________________________
2010+ 69E5             >//              Heap part
2010+ 69E5             >
2010+ 69E5             >
2010+ 69E5             >                org     (Heap_Ptr & $1FFF) + $E000
2010+ E320             >
2010+ E320             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2010+ E320             >Latest_Definition defl  Heap_Ptr
2010+ E320             >
2010+ E320             >                // dummy db directives used to calculate length of namec
2010+ E320 32 2A       >                db      "2*"
2010+ E322             >len_NFA         defl    $ - temp_NFA
2010+ E322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2010+ E320             >
2010+ E320 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2010+ E321 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2010+ E323             >                org     $-1                 // alter last byte of Name just above to set
2010+ E322 AA          >                db      {b $} | END_BIT     // msb as name end
2010+ E323             >
2010+ E323 19 03       >                dw      Prev_Ptr            // Link to previous definition Name
2010+ E325             >Prev_Ptr        defl    Heap_Ptr
2010+ E325             >
2010+ E325             >mirror_Ptr      defl    $
2010+ E325             >
2010+ E325 E7 69       >                dw      Dict_Ptr + 2        // xt
2010+ E327             >Heap_Ptr        defl    $ - $E000           // save current HP
2010+ E327             >
2010+ E327             >Current_HP      defl  $ - $E000             // used to set HP once!
2010+ E327             >
2010+ E327             >//              ______________________________________________________________________
2010+ E327             >//              Dictionary part
2010+ E327             >
2010+ E327             >                org     Dict_Ptr
2010+ 69E5             >
2010+ 69E5 25 03       >                dw      mirror_Ptr - $E000
2010+ 69E7             >
2010+ 69E7             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2010+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2010+ 69E7 ~           >
2010+ 69E7 ~           >
2010+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
2010+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
2010+ 69E7             >
2010+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2011+ 69E7              Two_Mul_Ptr:
2012+ 69E7 E1                           pop     hl
2013+ 69E8 29                           add     hl, hl
2014+ 69E9
2015+ 69E9                              psh1
2015+ 69E9 E5          >                push    hl
2015+ 69EA DD E9       >                jp      (ix)
2016+ 69EC
2017+ 69EC              //  ______________________________________________________________________
2018+ 69EC              //
2019+ 69EC              // 2/           n1 -- n2
2020+ 69EC              // halves the top of stack, sign is unchanged
2021+ 69EC                              New_Def TWO_DIV, "2/", is_code, is_normal
2021+ 69EC             >
2021+ 69EC             >Dict_Ptr        defl    $
2021+ 69EC             >
2021+ 69EC             >//              ______________________________________________________________________
2021+ 69EC             >//              Heap part
2021+ 69EC             >
2021+ 69EC             >
2021+ 69EC             >                org     (Heap_Ptr & $1FFF) + $E000
2021+ E327             >
2021+ E327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2021+ E327             >Latest_Definition defl  Heap_Ptr
2021+ E327             >
2021+ E327             >                // dummy db directives used to calculate length of namec
2021+ E327 32 2F       >                db      "2/"
2021+ E329             >len_NFA         defl    $ - temp_NFA
2021+ E329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2021+ E327             >
2021+ E327 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2021+ E328 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2021+ E32A             >                org     $-1                 // alter last byte of Name just above to set
2021+ E329 AF          >                db      {b $} | END_BIT     // msb as name end
2021+ E32A             >
2021+ E32A 20 03       >                dw      Prev_Ptr            // Link to previous definition Name
2021+ E32C             >Prev_Ptr        defl    Heap_Ptr
2021+ E32C             >
2021+ E32C             >mirror_Ptr      defl    $
2021+ E32C             >
2021+ E32C EE 69       >                dw      Dict_Ptr + 2        // xt
2021+ E32E             >Heap_Ptr        defl    $ - $E000           // save current HP
2021+ E32E             >
2021+ E32E             >Current_HP      defl  $ - $E000             // used to set HP once!
2021+ E32E             >
2021+ E32E             >//              ______________________________________________________________________
2021+ E32E             >//              Dictionary part
2021+ E32E             >
2021+ E32E             >                org     Dict_Ptr
2021+ 69EC             >
2021+ 69EC 2C 03       >                dw      mirror_Ptr - $E000
2021+ 69EE             >
2021+ 69EE             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2021+ 69EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2021+ 69EE ~           >
2021+ 69EE ~           >
2021+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
2021+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
2021+ 69EE             >
2021+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2022+ 69EE E1                           pop     hl
2023+ 69EF CB 2C                        sra     h
2024+ 69F1 CB 1D                        rr      l
2025+ 69F3
2026+ 69F3                              psh1
2026+ 69F3 E5          >                push    hl
2026+ 69F4 DD E9       >                jp      (ix)
2027+ 69F6
2028+ 69F6              //  ______________________________________________________________________
2029+ 69F6              //
2030+ 69F6              // lshift       n1 u -- n2
2031+ 69F6              // bit left shift of u bits
2032+ 69F6                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2032+ 69F6             >
2032+ 69F6             >Dict_Ptr        defl    $
2032+ 69F6             >
2032+ 69F6             >//              ______________________________________________________________________
2032+ 69F6             >//              Heap part
2032+ 69F6             >
2032+ 69F6             >
2032+ 69F6             >                org     (Heap_Ptr & $1FFF) + $E000
2032+ E32E             >
2032+ E32E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2032+ E32E             >Latest_Definition defl  Heap_Ptr
2032+ E32E             >
2032+ E32E             >                // dummy db directives used to calculate length of namec
2032+ E32E 4C 53 48 49 >                db      "LSHIFT"
2032+ E332 46 54       >
2032+ E334             >len_NFA         defl    $ - temp_NFA
2032+ E334             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2032+ E32E             >
2032+ E32E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2032+ E32F 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2032+ E333 46 54       >
2032+ E335             >                org     $-1                 // alter last byte of Name just above to set
2032+ E334 D4          >                db      {b $} | END_BIT     // msb as name end
2032+ E335             >
2032+ E335 27 03       >                dw      Prev_Ptr            // Link to previous definition Name
2032+ E337             >Prev_Ptr        defl    Heap_Ptr
2032+ E337             >
2032+ E337             >mirror_Ptr      defl    $
2032+ E337             >
2032+ E337 F8 69       >                dw      Dict_Ptr + 2        // xt
2032+ E339             >Heap_Ptr        defl    $ - $E000           // save current HP
2032+ E339             >
2032+ E339             >Current_HP      defl  $ - $E000             // used to set HP once!
2032+ E339             >
2032+ E339             >//              ______________________________________________________________________
2032+ E339             >//              Dictionary part
2032+ E339             >
2032+ E339             >                org     Dict_Ptr
2032+ 69F6             >
2032+ 69F6 37 03       >                dw      mirror_Ptr - $E000
2032+ 69F8             >
2032+ 69F8             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2032+ 69F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2032+ 69F8 ~           >
2032+ 69F8 ~           >
2032+ 69F8             >                endif           ; ok        // for other definitions it "points" the correct handler
2032+ 69F8             >                // Use of "; ok" to suppress "warning[fwdref]"
2032+ 69F8             >
2032+ 69F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2033+ 69F8 D9                           exx
2034+ 69F9 C1                           pop     bc
2035+ 69FA 41                           ld      b, c
2036+ 69FB D1                           pop     de
2037+ 69FC ED 28                        bsla    de, b
2038+ 69FE D5                           push    de
2039+ 69FF D9                           exx
2040+ 6A00                              next
2040+ 6A00 DD E9       >                jp      (ix)
2041+ 6A02
2042+ 6A02              //  ______________________________________________________________________
2043+ 6A02              //
2044+ 6A02              // rshift       n1 u -- n2
2045+ 6A02              // bit right shift of u bits
2046+ 6A02                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2046+ 6A02             >
2046+ 6A02             >Dict_Ptr        defl    $
2046+ 6A02             >
2046+ 6A02             >//              ______________________________________________________________________
2046+ 6A02             >//              Heap part
2046+ 6A02             >
2046+ 6A02             >
2046+ 6A02             >                org     (Heap_Ptr & $1FFF) + $E000
2046+ E339             >
2046+ E339             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2046+ E339             >Latest_Definition defl  Heap_Ptr
2046+ E339             >
2046+ E339             >                // dummy db directives used to calculate length of namec
2046+ E339 52 53 48 49 >                db      "RSHIFT"
2046+ E33D 46 54       >
2046+ E33F             >len_NFA         defl    $ - temp_NFA
2046+ E33F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2046+ E339             >
2046+ E339 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2046+ E33A 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2046+ E33E 46 54       >
2046+ E340             >                org     $-1                 // alter last byte of Name just above to set
2046+ E33F D4          >                db      {b $} | END_BIT     // msb as name end
2046+ E340             >
2046+ E340 2E 03       >                dw      Prev_Ptr            // Link to previous definition Name
2046+ E342             >Prev_Ptr        defl    Heap_Ptr
2046+ E342             >
2046+ E342             >mirror_Ptr      defl    $
2046+ E342             >
2046+ E342 04 6A       >                dw      Dict_Ptr + 2        // xt
2046+ E344             >Heap_Ptr        defl    $ - $E000           // save current HP
2046+ E344             >
2046+ E344             >Current_HP      defl  $ - $E000             // used to set HP once!
2046+ E344             >
2046+ E344             >//              ______________________________________________________________________
2046+ E344             >//              Dictionary part
2046+ E344             >
2046+ E344             >                org     Dict_Ptr
2046+ 6A02             >
2046+ 6A02 42 03       >                dw      mirror_Ptr - $E000
2046+ 6A04             >
2046+ 6A04             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2046+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2046+ 6A04 ~           >
2046+ 6A04 ~           >
2046+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
2046+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
2046+ 6A04             >
2046+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2047+ 6A04 D9                           exx
2048+ 6A05 C1                           pop     bc
2049+ 6A06 41                           ld      b, c
2050+ 6A07 D1                           pop     de
2051+ 6A08 ED 2A                        bsrl    de, b
2052+ 6A0A D5                           push    de
2053+ 6A0B D9                           exx
2054+ 6A0C                              next
2054+ 6A0C DD E9       >                jp      (ix)
2055+ 6A0E
2056+ 6A0E              //  ______________________________________________________________________
2057+ 6A0E              //
2058+ 6A0E              // cells        n1 -- n2
2059+ 6A0E              // decrement by 2 top of stack
2060+ 6A0E                              New_Def CELLS, "CELLS", is_code, is_normal
2060+ 6A0E             >
2060+ 6A0E             >Dict_Ptr        defl    $
2060+ 6A0E             >
2060+ 6A0E             >//              ______________________________________________________________________
2060+ 6A0E             >//              Heap part
2060+ 6A0E             >
2060+ 6A0E             >
2060+ 6A0E             >                org     (Heap_Ptr & $1FFF) + $E000
2060+ E344             >
2060+ E344             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2060+ E344             >Latest_Definition defl  Heap_Ptr
2060+ E344             >
2060+ E344             >                // dummy db directives used to calculate length of namec
2060+ E344 43 45 4C 4C >                db      "CELLS"
2060+ E348 53          >
2060+ E349             >len_NFA         defl    $ - temp_NFA
2060+ E349             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2060+ E344             >
2060+ E344 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2060+ E345 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2060+ E349 53          >
2060+ E34A             >                org     $-1                 // alter last byte of Name just above to set
2060+ E349 D3          >                db      {b $} | END_BIT     // msb as name end
2060+ E34A             >
2060+ E34A 39 03       >                dw      Prev_Ptr            // Link to previous definition Name
2060+ E34C             >Prev_Ptr        defl    Heap_Ptr
2060+ E34C             >
2060+ E34C             >mirror_Ptr      defl    $
2060+ E34C             >
2060+ E34C 10 6A       >                dw      Dict_Ptr + 2        // xt
2060+ E34E             >Heap_Ptr        defl    $ - $E000           // save current HP
2060+ E34E             >
2060+ E34E             >Current_HP      defl  $ - $E000             // used to set HP once!
2060+ E34E             >
2060+ E34E             >//              ______________________________________________________________________
2060+ E34E             >//              Dictionary part
2060+ E34E             >
2060+ E34E             >                org     Dict_Ptr
2060+ 6A0E             >
2060+ 6A0E 4C 03       >                dw      mirror_Ptr - $E000
2060+ 6A10             >
2060+ 6A10             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2060+ 6A10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2060+ 6A10 ~           >
2060+ 6A10 ~           >
2060+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
2060+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
2060+ 6A10             >
2060+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2061+ 6A10 C3 E7 69                     jp      Two_Mul_Ptr
2062+ 6A13
2063+ 6A13
2064+ 6A13              //  ______________________________________________________________________
2065+ 6A13
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 112  6A13                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A13              //  ______________________________________________________________________
   2+ 6A13              //
   3+ 6A13              //  L1.asm
   4+ 6A13              //
   5+ 6A13              //  Level-1 definitions and derivate
   6+ 6A13              //  ______________________________________________________________________
   7+ 6A13
   8+ 6A13              //  ______________________________________________________________________
   9+ 6A13              //
  10+ 6A13              // :            -- cccc     ( compile time )
  11+ 6A13              //              i*x -- j*x  ( run time )
  12+ 6A13              // Colon Definition
  13+ 6A13                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A13             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A13             >
  13+ 6A13             >Dict_Ptr        defl    $
  13+ 6A13             >
  13+ 6A13             >//              ______________________________________________________________________
  13+ 6A13             >//              Heap part
  13+ 6A13             >
  13+ 6A13             >
  13+ 6A13             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E34E             >
  13+ E34E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E34E             >Latest_Definition defl  Heap_Ptr
  13+ E34E             >
  13+ E34E             >                // dummy db directives used to calculate length of namec
  13+ E34E 3A          >                db      ":"
  13+ E34F             >len_NFA         defl    $ - temp_NFA
  13+ E34F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E34E             >
  13+ E34E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E34F 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E350             >                org     $-1                 // alter last byte of Name just above to set
  13+ E34F BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E350             >
  13+ E350 44 03       >                dw      Prev_Ptr            // Link to previous definition Name
  13+ E352             >Prev_Ptr        defl    Heap_Ptr
  13+ E352             >
  13+ E352             >mirror_Ptr      defl    $
  13+ E352             >
  13+ E352 15 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E354             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E354             >
  13+ E354             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E354             >
  13+ E354             >//              ______________________________________________________________________
  13+ E354             >//              Dictionary part
  13+ E354             >
  13+ E354             >                org     Dict_Ptr
  13+ 6A13             >
  13+ 6A13 52 03       >                dw      mirror_Ptr - $E000
  13+ 6A15             >
  13+ 6A15             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A15 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A18             >
  13+ 6A18             >
  13+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A18             >
  13+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A18
  15+ 6A18 0A 6E                        dw      QEXEC                   // ?exec
  16+ 6A1A D5 6D                        dw      STORE_CSP               // !csp
  17+ 6A1C 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  18+ 6A20 40 6B 93 69                  dw      CONTEXT, STORE          // context !
  19+ 6A24 98 73                        dw      CREATE                  // create  ( forward )
  20+ 6A26 8E 6E                        dw      SMUDGE                  // dmudge
  21+ 6A28 7F 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A2A CA 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A2C                                                              // ... immediate
  24+ 6A2C              Enter_Ptr:
  25+ 6A2C                              // via call coded in CFA
  26+ 6A2C EB                           ex      de, hl //**
  27+ 6A2D                              // *** ldhlrp
  28+ 6A2D 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A2E 70                           ld      (hl), b
  30+ 6A2F 2B                           dec     hl
  31+ 6A30 71                           ld      (hl), c
  32+ 6A31                              // *** ldrphl
  33+ 6A31 EB                           ex      de, hl //**
  34+ 6A32
  35+ 6A32
  36+ 6A32 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A33                              next
  37+ 6A33 DD E9       >                jp      (ix)
  38+ 6A35
  39+ 6A35              //  ______________________________________________________________________
  40+ 6A35              //
  41+ 6A35              // ;            --
  42+ 6A35              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A35                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A35             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A35             >
  43+ 6A35             >Dict_Ptr        defl    $
  43+ 6A35             >
  43+ 6A35             >//              ______________________________________________________________________
  43+ 6A35             >//              Heap part
  43+ 6A35             >
  43+ 6A35             >
  43+ 6A35             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E354             >
  43+ E354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E354             >Latest_Definition defl  Heap_Ptr
  43+ E354             >
  43+ E354             >                // dummy db directives used to calculate length of namec
  43+ E354 3B          >                db      ";"
  43+ E355             >len_NFA         defl    $ - temp_NFA
  43+ E355             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E354             >
  43+ E354 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E355 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E356             >                org     $-1                 // alter last byte of Name just above to set
  43+ E355 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E356             >
  43+ E356 4E 03       >                dw      Prev_Ptr            // Link to previous definition Name
  43+ E358             >Prev_Ptr        defl    Heap_Ptr
  43+ E358             >
  43+ E358             >mirror_Ptr      defl    $
  43+ E358             >
  43+ E358 37 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E35A             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E35A             >
  43+ E35A             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E35A             >
  43+ E35A             >//              ______________________________________________________________________
  43+ E35A             >//              Dictionary part
  43+ E35A             >
  43+ E35A             >                org     Dict_Ptr
  43+ 6A35             >
  43+ 6A35 58 03       >                dw      mirror_Ptr - $E000
  43+ 6A37             >
  43+ 6A37             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A37 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A3A             >
  43+ 6A3A             >
  43+ 6A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A3A             >
  43+ 6A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A3A
  45+ 6A3A 2A 6E                        dw      QCSP                    // ?csp
  46+ 6A3C 52 6E 52 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A40 8E 6E                        dw      SMUDGE                  // smudge
  48+ 6A42 72 6E                        dw      SQUARED_OPEN            // [
  49+ 6A44 52 68                        dw      EXIT                    // ; immediate
  50+ 6A46
  51+ 6A46              //  ______________________________________________________________________
  52+ 6A46              //
  53+ 6A46              // noop         --
  54+ 6A46
  55+ 6A46                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A46             >
  55+ 6A46             >Dict_Ptr        defl    $
  55+ 6A46             >
  55+ 6A46             >//              ______________________________________________________________________
  55+ 6A46             >//              Heap part
  55+ 6A46             >
  55+ 6A46             >
  55+ 6A46             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E35A             >
  55+ E35A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E35A             >Latest_Definition defl  Heap_Ptr
  55+ E35A             >
  55+ E35A             >                // dummy db directives used to calculate length of namec
  55+ E35A 4E 4F 4F 50 >                db      "NOOP"
  55+ E35E             >len_NFA         defl    $ - temp_NFA
  55+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E35A             >
  55+ E35A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E35B 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E35F             >                org     $-1                 // alter last byte of Name just above to set
  55+ E35E D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E35F             >
  55+ E35F 54 03       >                dw      Prev_Ptr            // Link to previous definition Name
  55+ E361             >Prev_Ptr        defl    Heap_Ptr
  55+ E361             >
  55+ E361             >mirror_Ptr      defl    $
  55+ E361             >
  55+ E361 48 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E363             >
  55+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E363             >
  55+ E363             >//              ______________________________________________________________________
  55+ E363             >//              Dictionary part
  55+ E363             >
  55+ E363             >                org     Dict_Ptr
  55+ 6A46             >
  55+ 6A46 61 03       >                dw      mirror_Ptr - $E000
  55+ 6A48             >
  55+ 6A48             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A48 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A48 ~           >
  55+ 6A48 ~           >
  55+ 6A48             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A48             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A48             >
  55+ 6A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A48                              next
  56+ 6A48 DD E9       >                jp      (ix)
  57+ 6A4A
  58+ 6A4A              //  ______________________________________________________________________
  59+ 6A4A              //
  60+ 6A4A              // constant     n -- cccc     ( compile time )
  61+ 6A4A              //              -- n          ( run time )
  62+ 6A4A              // Constant definition.
  63+ 6A4A                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A4A             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A4A             >
  63+ 6A4A             >Dict_Ptr        defl    $
  63+ 6A4A             >
  63+ 6A4A             >//              ______________________________________________________________________
  63+ 6A4A             >//              Heap part
  63+ 6A4A             >
  63+ 6A4A             >
  63+ 6A4A             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E363             >
  63+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E363             >Latest_Definition defl  Heap_Ptr
  63+ E363             >
  63+ E363             >                // dummy db directives used to calculate length of namec
  63+ E363 43 4F 4E 53 >                db      "CONSTANT"
  63+ E367 54 41 4E 54 >
  63+ E36B             >len_NFA         defl    $ - temp_NFA
  63+ E36B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E363             >
  63+ E363 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E364 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E368 54 41 4E 54 >
  63+ E36C             >                org     $-1                 // alter last byte of Name just above to set
  63+ E36B D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E36C             >
  63+ E36C 5A 03       >                dw      Prev_Ptr            // Link to previous definition Name
  63+ E36E             >Prev_Ptr        defl    Heap_Ptr
  63+ E36E             >
  63+ E36E             >mirror_Ptr      defl    $
  63+ E36E             >
  63+ E36E 4C 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E370             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E370             >
  63+ E370             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E370             >
  63+ E370             >//              ______________________________________________________________________
  63+ E370             >//              Dictionary part
  63+ E370             >
  63+ E370             >                org     Dict_Ptr
  63+ 6A4A             >
  63+ 6A4A 6E 03       >                dw      mirror_Ptr - $E000
  63+ 6A4C             >
  63+ 6A4C             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A4C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A4F             >
  63+ 6A4F             >
  63+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A4F             >
  63+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A4F 98 73                        dw      CREATE                  // create
  65+ 6A51 BC 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A53 CA 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A55              Constant_Ptr:
  68+ 6A55
  69+ 6A55
  70+ 6A55 E1                           pop     hl
  71+ 6A56
  72+ 6A56 7E                           ld      a, (hl)
  73+ 6A57 23                           inc     hl
  74+ 6A58 66                           ld      h, (hl)
  75+ 6A59 6F                           ld      l, a
  76+ 6A5A E5                           push    hl
  77+ 6A5B                              next
  77+ 6A5B DD E9       >                jp      (ix)
  78+ 6A5D
  79+ 6A5D              //  ______________________________________________________________________
  80+ 6A5D              //
  81+ 6A5D              // variable     n -- cccc     ( compile time )
  82+ 6A5D              //              -- a          ( run time )
  83+ 6A5D              // Variable definition, n is the initial value.
  84+ 6A5D                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A5D             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A5D             >
  84+ 6A5D             >Dict_Ptr        defl    $
  84+ 6A5D             >
  84+ 6A5D             >//              ______________________________________________________________________
  84+ 6A5D             >//              Heap part
  84+ 6A5D             >
  84+ 6A5D             >
  84+ 6A5D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E370             >
  84+ E370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E370             >Latest_Definition defl  Heap_Ptr
  84+ E370             >
  84+ E370             >                // dummy db directives used to calculate length of namec
  84+ E370 56 41 52 49 >                db      "VARIABLE"
  84+ E374 41 42 4C 45 >
  84+ E378             >len_NFA         defl    $ - temp_NFA
  84+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E370             >
  84+ E370 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E371 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E375 41 42 4C 45 >
  84+ E379             >                org     $-1                 // alter last byte of Name just above to set
  84+ E378 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E379             >
  84+ E379 63 03       >                dw      Prev_Ptr            // Link to previous definition Name
  84+ E37B             >Prev_Ptr        defl    Heap_Ptr
  84+ E37B             >
  84+ E37B             >mirror_Ptr      defl    $
  84+ E37B             >
  84+ E37B 5F 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E37D             >
  84+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E37D             >
  84+ E37D             >//              ______________________________________________________________________
  84+ E37D             >//              Dictionary part
  84+ E37D             >
  84+ E37D             >                org     Dict_Ptr
  84+ 6A5D             >
  84+ 6A5D 7B 03       >                dw      mirror_Ptr - $E000
  84+ 6A5F             >
  84+ 6A5F             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A5F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A62             >
  84+ 6A62             >
  84+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A62             >
  84+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A62
  86+ 6A62 81 6A                        dw      ZERO
  87+ 6A64 4C 6A                        dw      CONSTANT                // constant
  88+ 6A66 CA 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A68              Variable_Ptr:
  90+ 6A68
  91+ 6A68
  92+ 6A68
  93+ 6A68
  94+ 6A68                              next
  94+ 6A68 DD E9       >                jp      (ix)
  95+ 6A6A
  96+ 6A6A              //  ______________________________________________________________________
  97+ 6A6A              //
  98+ 6A6A              // user         b -- cccc     ( compile time )
  99+ 6A6A              //              -- a          ( run time )
 100+ 6A6A              // User variable definition
 101+ 6A6A                              Colon_Def USER, "USER", is_normal
 101+ 6A6A             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A6A             >
 101+ 6A6A             >Dict_Ptr        defl    $
 101+ 6A6A             >
 101+ 6A6A             >//              ______________________________________________________________________
 101+ 6A6A             >//              Heap part
 101+ 6A6A             >
 101+ 6A6A             >
 101+ 6A6A             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E37D             >
 101+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E37D             >Latest_Definition defl  Heap_Ptr
 101+ E37D             >
 101+ E37D             >                // dummy db directives used to calculate length of namec
 101+ E37D 55 53 45 52 >                db      "USER"
 101+ E381             >len_NFA         defl    $ - temp_NFA
 101+ E381             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E37D             >
 101+ E37D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E37E 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E382             >                org     $-1                 // alter last byte of Name just above to set
 101+ E381 D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E382             >
 101+ E382 70 03       >                dw      Prev_Ptr            // Link to previous definition Name
 101+ E384             >Prev_Ptr        defl    Heap_Ptr
 101+ E384             >
 101+ E384             >mirror_Ptr      defl    $
 101+ E384             >
 101+ E384 6C 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E386             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E386             >
 101+ E386             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E386             >
 101+ E386             >//              ______________________________________________________________________
 101+ E386             >//              Dictionary part
 101+ E386             >
 101+ E386             >                org     Dict_Ptr
 101+ 6A6A             >
 101+ 6A6A 84 03       >                dw      mirror_Ptr - $E000
 101+ 6A6C             >
 101+ 6A6C             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A6C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A6F             >
 101+ 6A6F             >
 101+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A6F             >
 101+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A6F
 103+ 6A6F 98 73                        dw      CREATE                  // create
 104+ 6A71 CB 6B                        dw      CCOMMA                  // c,
 105+ 6A73 CA 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A75
 107+ 6A75
 108+ 6A75              User_Ptr:
 109+ 6A75                              // via call coded in CFA
 110+ 6A75 E1                           pop     hl
 111+ 6A76
 112+ 6A76 7E                           ld      a, (hl)
 113+ 6A77 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A7A ED 31                        add     hl, a
 115+ 6A7C E5                           push    hl
 116+ 6A7D                              next
 116+ 6A7D DD E9       >                jp      (ix)
 117+ 6A7F
 118+ 6A7F              //  ______________________________________________________________________
 119+ 6A7F              //
 120+ 6A7F                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A7F             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A7F             >
 120+ 6A7F             >Dict_Ptr        defl    $
 120+ 6A7F             >
 120+ 6A7F             >//              ______________________________________________________________________
 120+ 6A7F             >//              Heap part
 120+ 6A7F             >
 120+ 6A7F             >
 120+ 6A7F             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E386             >
 120+ E386             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E386             >Latest_Definition defl  Heap_Ptr
 120+ E386             >
 120+ E386             >                // dummy db directives used to calculate length of namec
 120+ E386 30          >                db      "0"
 120+ E387             >len_NFA         defl    $ - temp_NFA
 120+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E386             >
 120+ E386 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E387 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E388             >                org     $-1                 // alter last byte of Name just above to set
 120+ E387 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E388             >
 120+ E388 7D 03       >                dw      Prev_Ptr            // Link to previous definition Name
 120+ E38A             >Prev_Ptr        defl    Heap_Ptr
 120+ E38A             >
 120+ E38A             >mirror_Ptr      defl    $
 120+ E38A             >
 120+ E38A 81 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E38C             >
 120+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E38C             >
 120+ E38C             >//              ______________________________________________________________________
 120+ E38C             >//              Dictionary part
 120+ E38C             >
 120+ E38C             >                org     Dict_Ptr
 120+ 6A7F             >
 120+ 6A7F 8A 03       >                dw      mirror_Ptr - $E000
 120+ 6A81             >
 120+ 6A81             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A81 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A84             >
 120+ 6A84             >
 120+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A84             >
 120+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A84 00 00       >                dw      0
 121+ 6A86                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A86             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A86             >
 121+ 6A86             >Dict_Ptr        defl    $
 121+ 6A86             >
 121+ 6A86             >//              ______________________________________________________________________
 121+ 6A86             >//              Heap part
 121+ 6A86             >
 121+ 6A86             >
 121+ 6A86             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E38C             >
 121+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E38C             >Latest_Definition defl  Heap_Ptr
 121+ E38C             >
 121+ E38C             >                // dummy db directives used to calculate length of namec
 121+ E38C 31          >                db      "1"
 121+ E38D             >len_NFA         defl    $ - temp_NFA
 121+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E38C             >
 121+ E38C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E38D 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E38E             >                org     $-1                 // alter last byte of Name just above to set
 121+ E38D B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E38E             >
 121+ E38E 86 03       >                dw      Prev_Ptr            // Link to previous definition Name
 121+ E390             >Prev_Ptr        defl    Heap_Ptr
 121+ E390             >
 121+ E390             >mirror_Ptr      defl    $
 121+ E390             >
 121+ E390 88 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E392             >
 121+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E392             >
 121+ E392             >//              ______________________________________________________________________
 121+ E392             >//              Dictionary part
 121+ E392             >
 121+ E392             >                org     Dict_Ptr
 121+ 6A86             >
 121+ 6A86 90 03       >                dw      mirror_Ptr - $E000
 121+ 6A88             >
 121+ 6A88             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A88 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A8B             >
 121+ 6A8B             >
 121+ 6A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A8B             >
 121+ 6A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A8B 01 00       >                dw      1
 122+ 6A8D                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A8D             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A8D             >
 122+ 6A8D             >Dict_Ptr        defl    $
 122+ 6A8D             >
 122+ 6A8D             >//              ______________________________________________________________________
 122+ 6A8D             >//              Heap part
 122+ 6A8D             >
 122+ 6A8D             >
 122+ 6A8D             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E392             >
 122+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E392             >Latest_Definition defl  Heap_Ptr
 122+ E392             >
 122+ E392             >                // dummy db directives used to calculate length of namec
 122+ E392 32          >                db      "2"
 122+ E393             >len_NFA         defl    $ - temp_NFA
 122+ E393             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E392             >
 122+ E392 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E393 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E394             >                org     $-1                 // alter last byte of Name just above to set
 122+ E393 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E394             >
 122+ E394 8C 03       >                dw      Prev_Ptr            // Link to previous definition Name
 122+ E396             >Prev_Ptr        defl    Heap_Ptr
 122+ E396             >
 122+ E396             >mirror_Ptr      defl    $
 122+ E396             >
 122+ E396 8F 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E398             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E398             >
 122+ E398             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E398             >
 122+ E398             >//              ______________________________________________________________________
 122+ E398             >//              Dictionary part
 122+ E398             >
 122+ E398             >                org     Dict_Ptr
 122+ 6A8D             >
 122+ 6A8D 96 03       >                dw      mirror_Ptr - $E000
 122+ 6A8F             >
 122+ 6A8F             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A8F CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A92             >
 122+ 6A92             >
 122+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A92             >
 122+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A92 02 00       >                dw      2
 123+ 6A94                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A94             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A94             >
 123+ 6A94             >Dict_Ptr        defl    $
 123+ 6A94             >
 123+ 6A94             >//              ______________________________________________________________________
 123+ 6A94             >//              Heap part
 123+ 6A94             >
 123+ 6A94             >
 123+ 6A94             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E398             >
 123+ E398             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E398             >Latest_Definition defl  Heap_Ptr
 123+ E398             >
 123+ E398             >                // dummy db directives used to calculate length of namec
 123+ E398 33          >                db      "3"
 123+ E399             >len_NFA         defl    $ - temp_NFA
 123+ E399             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E398             >
 123+ E398 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E399 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E39A             >                org     $-1                 // alter last byte of Name just above to set
 123+ E399 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E39A             >
 123+ E39A 92 03       >                dw      Prev_Ptr            // Link to previous definition Name
 123+ E39C             >Prev_Ptr        defl    Heap_Ptr
 123+ E39C             >
 123+ E39C             >mirror_Ptr      defl    $
 123+ E39C             >
 123+ E39C 96 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E39E             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E39E             >
 123+ E39E             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E39E             >
 123+ E39E             >//              ______________________________________________________________________
 123+ E39E             >//              Dictionary part
 123+ E39E             >
 123+ E39E             >                org     Dict_Ptr
 123+ 6A94             >
 123+ 6A94 9C 03       >                dw      mirror_Ptr - $E000
 123+ 6A96             >
 123+ 6A96             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A96 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A99             >
 123+ 6A99             >
 123+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A99             >
 123+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A99 03 00       >                dw      3
 124+ 6A9B                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A9B             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A9B             >
 124+ 6A9B             >Dict_Ptr        defl    $
 124+ 6A9B             >
 124+ 6A9B             >//              ______________________________________________________________________
 124+ 6A9B             >//              Heap part
 124+ 6A9B             >
 124+ 6A9B             >
 124+ 6A9B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E39E             >
 124+ E39E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E39E             >Latest_Definition defl  Heap_Ptr
 124+ E39E             >
 124+ E39E             >                // dummy db directives used to calculate length of namec
 124+ E39E 2D 31       >                db      "-1"
 124+ E3A0             >len_NFA         defl    $ - temp_NFA
 124+ E3A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E39E             >
 124+ E39E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E39F 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E3A1             >                org     $-1                 // alter last byte of Name just above to set
 124+ E3A0 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E3A1             >
 124+ E3A1 98 03       >                dw      Prev_Ptr            // Link to previous definition Name
 124+ E3A3             >Prev_Ptr        defl    Heap_Ptr
 124+ E3A3             >
 124+ E3A3             >mirror_Ptr      defl    $
 124+ E3A3             >
 124+ E3A3 9D 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E3A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E3A5             >
 124+ E3A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E3A5             >
 124+ E3A5             >//              ______________________________________________________________________
 124+ E3A5             >//              Dictionary part
 124+ E3A5             >
 124+ E3A5             >                org     Dict_Ptr
 124+ 6A9B             >
 124+ 6A9B A3 03       >                dw      mirror_Ptr - $E000
 124+ 6A9D             >
 124+ 6A9D             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A9D CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AA0             >
 124+ 6AA0             >
 124+ 6AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AA0             >
 124+ 6AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AA0 FF FF       >                dw      -1
 125+ 6AA2                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AA2             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AA2             >
 125+ 6AA2             >Dict_Ptr        defl    $
 125+ 6AA2             >
 125+ 6AA2             >//              ______________________________________________________________________
 125+ 6AA2             >//              Heap part
 125+ 6AA2             >
 125+ 6AA2             >
 125+ 6AA2             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E3A5             >
 125+ E3A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E3A5             >Latest_Definition defl  Heap_Ptr
 125+ E3A5             >
 125+ E3A5             >                // dummy db directives used to calculate length of namec
 125+ E3A5 42 4C       >                db      "BL"
 125+ E3A7             >len_NFA         defl    $ - temp_NFA
 125+ E3A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E3A5             >
 125+ E3A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E3A6 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E3A8             >                org     $-1                 // alter last byte of Name just above to set
 125+ E3A7 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E3A8             >
 125+ E3A8 9E 03       >                dw      Prev_Ptr            // Link to previous definition Name
 125+ E3AA             >Prev_Ptr        defl    Heap_Ptr
 125+ E3AA             >
 125+ E3AA             >mirror_Ptr      defl    $
 125+ E3AA             >
 125+ E3AA A4 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E3AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E3AC             >
 125+ E3AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E3AC             >
 125+ E3AC             >//              ______________________________________________________________________
 125+ E3AC             >//              Dictionary part
 125+ E3AC             >
 125+ E3AC             >                org     Dict_Ptr
 125+ 6AA2             >
 125+ 6AA2 AA 03       >                dw      mirror_Ptr - $E000
 125+ 6AA4             >
 125+ 6AA4             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AA4 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AA7             >
 125+ 6AA7             >
 125+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AA7             >
 125+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AA7 20 00       >                dw      $20
 126+ 6AA9                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AA9             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AA9             >
 126+ 6AA9             >Dict_Ptr        defl    $
 126+ 6AA9             >
 126+ 6AA9             >//              ______________________________________________________________________
 126+ 6AA9             >//              Heap part
 126+ 6AA9             >
 126+ 6AA9             >
 126+ 6AA9             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E3AC             >
 126+ E3AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E3AC             >Latest_Definition defl  Heap_Ptr
 126+ E3AC             >
 126+ E3AC             >                // dummy db directives used to calculate length of namec
 126+ E3AC 43 2F 4C    >                db      "C/L"
 126+ E3AF             >len_NFA         defl    $ - temp_NFA
 126+ E3AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E3AC             >
 126+ E3AC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E3AD 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E3B0             >                org     $-1                 // alter last byte of Name just above to set
 126+ E3AF CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E3B0             >
 126+ E3B0 A5 03       >                dw      Prev_Ptr            // Link to previous definition Name
 126+ E3B2             >Prev_Ptr        defl    Heap_Ptr
 126+ E3B2             >
 126+ E3B2             >mirror_Ptr      defl    $
 126+ E3B2             >
 126+ E3B2 AB 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E3B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E3B4             >
 126+ E3B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E3B4             >
 126+ E3B4             >//              ______________________________________________________________________
 126+ E3B4             >//              Dictionary part
 126+ E3B4             >
 126+ E3B4             >                org     Dict_Ptr
 126+ 6AA9             >
 126+ 6AA9 B2 03       >                dw      mirror_Ptr - $E000
 126+ 6AAB             >
 126+ 6AAB             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AAB CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AAE             >
 126+ 6AAE             >
 126+ 6AAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AAE             >
 126+ 6AAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AAE 40 00       >                dw      64
 127+ 6AB0                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AB0             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AB0             >
 127+ 6AB0             >Dict_Ptr        defl    $
 127+ 6AB0             >
 127+ 6AB0             >//              ______________________________________________________________________
 127+ 6AB0             >//              Heap part
 127+ 6AB0             >
 127+ 6AB0             >
 127+ 6AB0             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E3B4             >
 127+ E3B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E3B4             >Latest_Definition defl  Heap_Ptr
 127+ E3B4             >
 127+ E3B4             >                // dummy db directives used to calculate length of namec
 127+ E3B4 42 2F 42 55 >                db      "B/BUF"
 127+ E3B8 46          >
 127+ E3B9             >len_NFA         defl    $ - temp_NFA
 127+ E3B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E3B4             >
 127+ E3B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E3B5 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E3B9 46          >
 127+ E3BA             >                org     $-1                 // alter last byte of Name just above to set
 127+ E3B9 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E3BA             >
 127+ E3BA AC 03       >                dw      Prev_Ptr            // Link to previous definition Name
 127+ E3BC             >Prev_Ptr        defl    Heap_Ptr
 127+ E3BC             >
 127+ E3BC             >mirror_Ptr      defl    $
 127+ E3BC             >
 127+ E3BC B2 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E3BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E3BE             >
 127+ E3BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E3BE             >
 127+ E3BE             >//              ______________________________________________________________________
 127+ E3BE             >//              Dictionary part
 127+ E3BE             >
 127+ E3BE             >                org     Dict_Ptr
 127+ 6AB0             >
 127+ 6AB0 BC 03       >                dw      mirror_Ptr - $E000
 127+ 6AB2             >
 127+ 6AB2             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AB2 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AB5             >
 127+ 6AB5             >
 127+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AB5             >
 127+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AB5 00 02       >                dw      512
 128+ 6AB7                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AB7             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AB7             >
 128+ 6AB7             >Dict_Ptr        defl    $
 128+ 6AB7             >
 128+ 6AB7             >//              ______________________________________________________________________
 128+ 6AB7             >//              Heap part
 128+ 6AB7             >
 128+ 6AB7             >
 128+ 6AB7             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E3BE             >
 128+ E3BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E3BE             >Latest_Definition defl  Heap_Ptr
 128+ E3BE             >
 128+ E3BE             >                // dummy db directives used to calculate length of namec
 128+ E3BE 42 2F 53 43 >                db      "B/SCR"
 128+ E3C2 52          >
 128+ E3C3             >len_NFA         defl    $ - temp_NFA
 128+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E3BE             >
 128+ E3BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E3BF 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E3C3 52          >
 128+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
 128+ E3C3 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E3C4             >
 128+ E3C4 B4 03       >                dw      Prev_Ptr            // Link to previous definition Name
 128+ E3C6             >Prev_Ptr        defl    Heap_Ptr
 128+ E3C6             >
 128+ E3C6             >mirror_Ptr      defl    $
 128+ E3C6             >
 128+ E3C6 B9 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E3C8             >
 128+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E3C8             >
 128+ E3C8             >//              ______________________________________________________________________
 128+ E3C8             >//              Dictionary part
 128+ E3C8             >
 128+ E3C8             >                org     Dict_Ptr
 128+ 6AB7             >
 128+ 6AB7 C6 03       >                dw      mirror_Ptr - $E000
 128+ 6AB9             >
 128+ 6AB9             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AB9 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6ABC             >
 128+ 6ABC             >
 128+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6ABC             >
 128+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6ABC 02 00       >                dw      2
 129+ 6ABE                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ABE             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ABE             >
 129+ 6ABE             >Dict_Ptr        defl    $
 129+ 6ABE             >
 129+ 6ABE             >//              ______________________________________________________________________
 129+ 6ABE             >//              Heap part
 129+ 6ABE             >
 129+ 6ABE             >
 129+ 6ABE             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E3C8             >
 129+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E3C8             >Latest_Definition defl  Heap_Ptr
 129+ E3C8             >
 129+ E3C8             >                // dummy db directives used to calculate length of namec
 129+ E3C8 4C 2F 53 43 >                db      "L/SCR"
 129+ E3CC 52          >
 129+ E3CD             >len_NFA         defl    $ - temp_NFA
 129+ E3CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E3C8             >
 129+ E3C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E3C9 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E3CD 52          >
 129+ E3CE             >                org     $-1                 // alter last byte of Name just above to set
 129+ E3CD D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E3CE             >
 129+ E3CE BE 03       >                dw      Prev_Ptr            // Link to previous definition Name
 129+ E3D0             >Prev_Ptr        defl    Heap_Ptr
 129+ E3D0             >
 129+ E3D0             >mirror_Ptr      defl    $
 129+ E3D0             >
 129+ E3D0 C0 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E3D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E3D2             >
 129+ E3D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E3D2             >
 129+ E3D2             >//              ______________________________________________________________________
 129+ E3D2             >//              Dictionary part
 129+ E3D2             >
 129+ E3D2             >                org     Dict_Ptr
 129+ 6ABE             >
 129+ 6ABE D0 03       >                dw      mirror_Ptr - $E000
 129+ 6AC0             >
 129+ 6AC0             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AC0 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AC3             >
 129+ 6AC3             >
 129+ 6AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AC3             >
 129+ 6AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AC3 10 00       >                dw      16
 130+ 6AC5
 131+ 6AC5              //  ______________________________________________________________________
 132+ 6AC5              //
 133+ 6AC5              // +origin         --
 134+ 6AC5              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AC5              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AC5              //              dw      PLUS                    // +
 137+ 6AC5              //              dw      EXIT                    // ;
 138+ 6AC5                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AC5             >
 138+ 6AC5             >Dict_Ptr        defl    $
 138+ 6AC5             >
 138+ 6AC5             >//              ______________________________________________________________________
 138+ 6AC5             >//              Heap part
 138+ 6AC5             >
 138+ 6AC5             >
 138+ 6AC5             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E3D2             >
 138+ E3D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E3D2             >Latest_Definition defl  Heap_Ptr
 138+ E3D2             >
 138+ E3D2             >                // dummy db directives used to calculate length of namec
 138+ E3D2 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E3D6 47 49 4E    >
 138+ E3D9             >len_NFA         defl    $ - temp_NFA
 138+ E3D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E3D2             >
 138+ E3D2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E3D3 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E3D7 47 49 4E    >
 138+ E3DA             >                org     $-1                 // alter last byte of Name just above to set
 138+ E3D9 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E3DA             >
 138+ E3DA C8 03       >                dw      Prev_Ptr            // Link to previous definition Name
 138+ E3DC             >Prev_Ptr        defl    Heap_Ptr
 138+ E3DC             >
 138+ E3DC             >mirror_Ptr      defl    $
 138+ E3DC             >
 138+ E3DC C7 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E3DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E3DE             >
 138+ E3DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E3DE             >
 138+ E3DE             >//              ______________________________________________________________________
 138+ E3DE             >//              Dictionary part
 138+ E3DE             >
 138+ E3DE             >                org     Dict_Ptr
 138+ 6AC5             >
 138+ 6AC5 DC 03       >                dw      mirror_Ptr - $E000
 138+ 6AC7             >
 138+ 6AC7             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AC7 ~           >
 138+ 6AC7 ~           >
 138+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AC7             >
 138+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AC7 D9                           exx
 140+ 6AC8 E1                           pop     hl
 141+ 6AC9 11 66 63                     ld      de, Cold_origin
 142+ 6ACC 19                           add     hl, de
 143+ 6ACD E5                           push    hl
 144+ 6ACE D9                           exx
 145+ 6ACF                              next
 145+ 6ACF DD E9       >                jp      (ix)
 146+ 6AD1
 147+ 6AD1
 148+ 6AD1              //  ______________________________________________________________________
 149+ 6AD1              //
 150+ 6AD1                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AD1             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AD1             >
 150+ 6AD1             >Dict_Ptr        defl    $
 150+ 6AD1             >
 150+ 6AD1             >//              ______________________________________________________________________
 150+ 6AD1             >//              Heap part
 150+ 6AD1             >
 150+ 6AD1             >
 150+ 6AD1             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E3DE             >
 150+ E3DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E3DE             >Latest_Definition defl  Heap_Ptr
 150+ E3DE             >
 150+ E3DE             >                // dummy db directives used to calculate length of namec
 150+ E3DE 28 4E 45 58 >                db      "(NEXT)"
 150+ E3E2 54 29       >
 150+ E3E4             >len_NFA         defl    $ - temp_NFA
 150+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E3DE             >
 150+ E3DE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E3DF 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E3E3 54 29       >
 150+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
 150+ E3E4 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E3E5             >
 150+ E3E5 D2 03       >                dw      Prev_Ptr            // Link to previous definition Name
 150+ E3E7             >Prev_Ptr        defl    Heap_Ptr
 150+ E3E7             >
 150+ E3E7             >mirror_Ptr      defl    $
 150+ E3E7             >
 150+ E3E7 D3 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E3E9             >
 150+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E3E9             >
 150+ E3E9             >//              ______________________________________________________________________
 150+ E3E9             >//              Dictionary part
 150+ E3E9             >
 150+ E3E9             >                org     Dict_Ptr
 150+ 6AD1             >
 150+ 6AD1 E7 03       >                dw      mirror_Ptr - $E000
 150+ 6AD3             >
 150+ 6AD3             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AD3 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AD6             >
 150+ 6AD6             >
 150+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AD6             >
 150+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AD6 9A 63       >                dw      Next_Ptr
 151+ 6AD8
 152+ 6AD8              //  ______________________________________________________________________
 153+ 6AD8              //
 154+ 6AD8
 155+ 6AD8                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AD8             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AD8             >
 155+ 6AD8             >Dict_Ptr        defl    $
 155+ 6AD8             >
 155+ 6AD8             >//              ______________________________________________________________________
 155+ 6AD8             >//              Heap part
 155+ 6AD8             >
 155+ 6AD8             >
 155+ 6AD8             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E3E9             >
 155+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E3E9             >Latest_Definition defl  Heap_Ptr
 155+ E3E9             >
 155+ E3E9             >                // dummy db directives used to calculate length of namec
 155+ E3E9 53 30       >                db      "S0"
 155+ E3EB             >len_NFA         defl    $ - temp_NFA
 155+ E3EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E3E9             >
 155+ E3E9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E3EA 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E3EC             >                org     $-1                 // alter last byte of Name just above to set
 155+ E3EB B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E3EC             >
 155+ E3EC DE 03       >                dw      Prev_Ptr            // Link to previous definition Name
 155+ E3EE             >Prev_Ptr        defl    Heap_Ptr
 155+ E3EE             >
 155+ E3EE             >mirror_Ptr      defl    $
 155+ E3EE             >
 155+ E3EE DA 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E3F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E3F0             >
 155+ E3F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E3F0             >
 155+ E3F0             >//              ______________________________________________________________________
 155+ E3F0             >//              Dictionary part
 155+ E3F0             >
 155+ E3F0             >                org     Dict_Ptr
 155+ 6AD8             >
 155+ 6AD8 EE 03       >                dw      mirror_Ptr - $E000
 155+ 6ADA             >
 155+ 6ADA             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ADA CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6ADD             >
 155+ 6ADD             >
 155+ 6ADD             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6ADD             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6ADD             >
 155+ 6ADD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6ADD 06          >                db      06
 156+ 6ADE                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6ADE             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6ADE             >
 156+ 6ADE             >Dict_Ptr        defl    $
 156+ 6ADE             >
 156+ 6ADE             >//              ______________________________________________________________________
 156+ 6ADE             >//              Heap part
 156+ 6ADE             >
 156+ 6ADE             >
 156+ 6ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E3F0             >
 156+ E3F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E3F0             >Latest_Definition defl  Heap_Ptr
 156+ E3F0             >
 156+ E3F0             >                // dummy db directives used to calculate length of namec
 156+ E3F0 52 30       >                db      "R0"
 156+ E3F2             >len_NFA         defl    $ - temp_NFA
 156+ E3F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E3F0             >
 156+ E3F0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E3F1 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E3F3             >                org     $-1                 // alter last byte of Name just above to set
 156+ E3F2 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E3F3             >
 156+ E3F3 E9 03       >                dw      Prev_Ptr            // Link to previous definition Name
 156+ E3F5             >Prev_Ptr        defl    Heap_Ptr
 156+ E3F5             >
 156+ E3F5             >mirror_Ptr      defl    $
 156+ E3F5             >
 156+ E3F5 E0 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E3F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E3F7             >
 156+ E3F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E3F7             >
 156+ E3F7             >//              ______________________________________________________________________
 156+ E3F7             >//              Dictionary part
 156+ E3F7             >
 156+ E3F7             >                org     Dict_Ptr
 156+ 6ADE             >
 156+ 6ADE F5 03       >                dw      mirror_Ptr - $E000
 156+ 6AE0             >
 156+ 6AE0             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AE0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AE3             >
 156+ 6AE3             >
 156+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AE3             >
 156+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AE3 08          >                db      08
 157+ 6AE4                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AE4             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AE4             >
 157+ 6AE4             >Dict_Ptr        defl    $
 157+ 6AE4             >
 157+ 6AE4             >//              ______________________________________________________________________
 157+ 6AE4             >//              Heap part
 157+ 6AE4             >
 157+ 6AE4             >
 157+ 6AE4             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E3F7             >
 157+ E3F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E3F7             >Latest_Definition defl  Heap_Ptr
 157+ E3F7             >
 157+ E3F7             >                // dummy db directives used to calculate length of namec
 157+ E3F7 54 49 42    >                db      "TIB"
 157+ E3FA             >len_NFA         defl    $ - temp_NFA
 157+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E3F7             >
 157+ E3F7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E3F8 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 157+ E3FA C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E3FB             >
 157+ E3FB F0 03       >                dw      Prev_Ptr            // Link to previous definition Name
 157+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 157+ E3FD             >
 157+ E3FD             >mirror_Ptr      defl    $
 157+ E3FD             >
 157+ E3FD E6 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E3FF             >
 157+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E3FF             >
 157+ E3FF             >//              ______________________________________________________________________
 157+ E3FF             >//              Dictionary part
 157+ E3FF             >
 157+ E3FF             >                org     Dict_Ptr
 157+ 6AE4             >
 157+ 6AE4 FD 03       >                dw      mirror_Ptr - $E000
 157+ 6AE6             >
 157+ 6AE6             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AE6 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AE9             >
 157+ 6AE9             >
 157+ 6AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AE9             >
 157+ 6AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AE9 0A          >                db      10
 158+ 6AEA                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AEA             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AEA             >
 158+ 6AEA             >Dict_Ptr        defl    $
 158+ 6AEA             >
 158+ 6AEA             >//              ______________________________________________________________________
 158+ 6AEA             >//              Heap part
 158+ 6AEA             >
 158+ 6AEA             >
 158+ 6AEA             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E3FF             >
 158+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E3FF             >Latest_Definition defl  Heap_Ptr
 158+ E3FF             >
 158+ E3FF             >                // dummy db directives used to calculate length of namec
 158+ E3FF 57 49 44 54 >                db      "WIDTH"
 158+ E403 48          >
 158+ E404             >len_NFA         defl    $ - temp_NFA
 158+ E404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E3FF             >
 158+ E3FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E400 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E404 48          >
 158+ E405             >                org     $-1                 // alter last byte of Name just above to set
 158+ E404 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E405             >
 158+ E405 F7 03       >                dw      Prev_Ptr            // Link to previous definition Name
 158+ E407             >Prev_Ptr        defl    Heap_Ptr
 158+ E407             >
 158+ E407             >mirror_Ptr      defl    $
 158+ E407             >
 158+ E407 EC 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E409             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E409             >
 158+ E409             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E409             >
 158+ E409             >//              ______________________________________________________________________
 158+ E409             >//              Dictionary part
 158+ E409             >
 158+ E409             >                org     Dict_Ptr
 158+ 6AEA             >
 158+ 6AEA 07 04       >                dw      mirror_Ptr - $E000
 158+ 6AEC             >
 158+ 6AEC             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AEC CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AEF             >
 158+ 6AEF             >
 158+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AEF             >
 158+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AEF 0C          >                db      12
 159+ 6AF0                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AF0             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AF0             >
 159+ 6AF0             >Dict_Ptr        defl    $
 159+ 6AF0             >
 159+ 6AF0             >//              ______________________________________________________________________
 159+ 6AF0             >//              Heap part
 159+ 6AF0             >
 159+ 6AF0             >
 159+ 6AF0             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E409             >
 159+ E409             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E409             >Latest_Definition defl  Heap_Ptr
 159+ E409             >
 159+ E409             >                // dummy db directives used to calculate length of namec
 159+ E409 57 41 52 4E >                db      "WARNING"
 159+ E40D 49 4E 47    >
 159+ E410             >len_NFA         defl    $ - temp_NFA
 159+ E410             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E409             >
 159+ E409 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E40A 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E40E 49 4E 47    >
 159+ E411             >                org     $-1                 // alter last byte of Name just above to set
 159+ E410 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E411             >
 159+ E411 FF 03       >                dw      Prev_Ptr            // Link to previous definition Name
 159+ E413             >Prev_Ptr        defl    Heap_Ptr
 159+ E413             >
 159+ E413             >mirror_Ptr      defl    $
 159+ E413             >
 159+ E413 F2 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E415             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E415             >
 159+ E415             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E415             >
 159+ E415             >//              ______________________________________________________________________
 159+ E415             >//              Dictionary part
 159+ E415             >
 159+ E415             >                org     Dict_Ptr
 159+ 6AF0             >
 159+ 6AF0 13 04       >                dw      mirror_Ptr - $E000
 159+ 6AF2             >
 159+ 6AF2             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AF2 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AF5             >
 159+ 6AF5             >
 159+ 6AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AF5             >
 159+ 6AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AF5 0E          >                db      14
 160+ 6AF6                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AF6             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AF6             >
 160+ 6AF6             >Dict_Ptr        defl    $
 160+ 6AF6             >
 160+ 6AF6             >//              ______________________________________________________________________
 160+ 6AF6             >//              Heap part
 160+ 6AF6             >
 160+ 6AF6             >
 160+ 6AF6             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E415             >
 160+ E415             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E415             >Latest_Definition defl  Heap_Ptr
 160+ E415             >
 160+ E415             >                // dummy db directives used to calculate length of namec
 160+ E415 46 45 4E 43 >                db      "FENCE"
 160+ E419 45          >
 160+ E41A             >len_NFA         defl    $ - temp_NFA
 160+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E415             >
 160+ E415 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E416 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E41A 45          >
 160+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 160+ E41A C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E41B             >
 160+ E41B 09 04       >                dw      Prev_Ptr            // Link to previous definition Name
 160+ E41D             >Prev_Ptr        defl    Heap_Ptr
 160+ E41D             >
 160+ E41D             >mirror_Ptr      defl    $
 160+ E41D             >
 160+ E41D F8 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E41F             >
 160+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E41F             >
 160+ E41F             >//              ______________________________________________________________________
 160+ E41F             >//              Dictionary part
 160+ E41F             >
 160+ E41F             >                org     Dict_Ptr
 160+ 6AF6             >
 160+ 6AF6 1D 04       >                dw      mirror_Ptr - $E000
 160+ 6AF8             >
 160+ 6AF8             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AF8 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AFB             >
 160+ 6AFB             >
 160+ 6AFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AFB             >
 160+ 6AFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AFB 10          >                db      16
 161+ 6AFC                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AFC             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AFC             >
 161+ 6AFC             >Dict_Ptr        defl    $
 161+ 6AFC             >
 161+ 6AFC             >//              ______________________________________________________________________
 161+ 6AFC             >//              Heap part
 161+ 6AFC             >
 161+ 6AFC             >
 161+ 6AFC             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E41F             >
 161+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E41F             >Latest_Definition defl  Heap_Ptr
 161+ E41F             >
 161+ E41F             >                // dummy db directives used to calculate length of namec
 161+ E41F 44 50       >                db      "DP"
 161+ E421             >len_NFA         defl    $ - temp_NFA
 161+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E41F             >
 161+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E420 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E422             >                org     $-1                 // alter last byte of Name just above to set
 161+ E421 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E422             >
 161+ E422 15 04       >                dw      Prev_Ptr            // Link to previous definition Name
 161+ E424             >Prev_Ptr        defl    Heap_Ptr
 161+ E424             >
 161+ E424             >mirror_Ptr      defl    $
 161+ E424             >
 161+ E424 FE 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E426             >
 161+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E426             >
 161+ E426             >//              ______________________________________________________________________
 161+ E426             >//              Dictionary part
 161+ E426             >
 161+ E426             >                org     Dict_Ptr
 161+ 6AFC             >
 161+ 6AFC 24 04       >                dw      mirror_Ptr - $E000
 161+ 6AFE             >
 161+ 6AFE             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AFE CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B01             >
 161+ 6B01             >
 161+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B01             >
 161+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B01 12          >                db      18
 162+ 6B02                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B02             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B02             >
 162+ 6B02             >Dict_Ptr        defl    $
 162+ 6B02             >
 162+ 6B02             >//              ______________________________________________________________________
 162+ 6B02             >//              Heap part
 162+ 6B02             >
 162+ 6B02             >
 162+ 6B02             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E426             >
 162+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E426             >Latest_Definition defl  Heap_Ptr
 162+ E426             >
 162+ E426             >                // dummy db directives used to calculate length of namec
 162+ E426 56 4F 43 2D >                db      "VOC-LINK"
 162+ E42A 4C 49 4E 4B >
 162+ E42E             >len_NFA         defl    $ - temp_NFA
 162+ E42E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E426             >
 162+ E426 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E427 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E42B 4C 49 4E 4B >
 162+ E42F             >                org     $-1                 // alter last byte of Name just above to set
 162+ E42E CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E42F             >
 162+ E42F 1F 04       >                dw      Prev_Ptr            // Link to previous definition Name
 162+ E431             >Prev_Ptr        defl    Heap_Ptr
 162+ E431             >
 162+ E431             >mirror_Ptr      defl    $
 162+ E431             >
 162+ E431 04 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E433             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E433             >
 162+ E433             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E433             >
 162+ E433             >//              ______________________________________________________________________
 162+ E433             >//              Dictionary part
 162+ E433             >
 162+ E433             >                org     Dict_Ptr
 162+ 6B02             >
 162+ 6B02 31 04       >                dw      mirror_Ptr - $E000
 162+ 6B04             >
 162+ 6B04             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B04 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B07             >
 162+ 6B07             >
 162+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B07             >
 162+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B07 14          >                db      20
 163+ 6B08                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B08             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B08             >
 163+ 6B08             >Dict_Ptr        defl    $
 163+ 6B08             >
 163+ 6B08             >//              ______________________________________________________________________
 163+ 6B08             >//              Heap part
 163+ 6B08             >
 163+ 6B08             >
 163+ 6B08             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E433             >
 163+ E433             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E433             >Latest_Definition defl  Heap_Ptr
 163+ E433             >
 163+ E433             >                // dummy db directives used to calculate length of namec
 163+ E433 46 49 52 53 >                db      "FIRST"
 163+ E437 54          >
 163+ E438             >len_NFA         defl    $ - temp_NFA
 163+ E438             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E433             >
 163+ E433 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E434 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E438 54          >
 163+ E439             >                org     $-1                 // alter last byte of Name just above to set
 163+ E438 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E439             >
 163+ E439 26 04       >                dw      Prev_Ptr            // Link to previous definition Name
 163+ E43B             >Prev_Ptr        defl    Heap_Ptr
 163+ E43B             >
 163+ E43B             >mirror_Ptr      defl    $
 163+ E43B             >
 163+ E43B 0A 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E43D             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E43D             >
 163+ E43D             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E43D             >
 163+ E43D             >//              ______________________________________________________________________
 163+ E43D             >//              Dictionary part
 163+ E43D             >
 163+ E43D             >                org     Dict_Ptr
 163+ 6B08             >
 163+ 6B08 3B 04       >                dw      mirror_Ptr - $E000
 163+ 6B0A             >
 163+ 6B0A             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B0A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B0D             >
 163+ 6B0D             >
 163+ 6B0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B0D             >
 163+ 6B0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B0D 16          >                db      22
 164+ 6B0E                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B0E             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B0E             >
 164+ 6B0E             >Dict_Ptr        defl    $
 164+ 6B0E             >
 164+ 6B0E             >//              ______________________________________________________________________
 164+ 6B0E             >//              Heap part
 164+ 6B0E             >
 164+ 6B0E             >
 164+ 6B0E             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E43D             >
 164+ E43D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E43D             >Latest_Definition defl  Heap_Ptr
 164+ E43D             >
 164+ E43D             >                // dummy db directives used to calculate length of namec
 164+ E43D 4C 49 4D 49 >                db      "LIMIT"
 164+ E441 54          >
 164+ E442             >len_NFA         defl    $ - temp_NFA
 164+ E442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E43D             >
 164+ E43D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E43E 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E442 54          >
 164+ E443             >                org     $-1                 // alter last byte of Name just above to set
 164+ E442 D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E443             >
 164+ E443 33 04       >                dw      Prev_Ptr            // Link to previous definition Name
 164+ E445             >Prev_Ptr        defl    Heap_Ptr
 164+ E445             >
 164+ E445             >mirror_Ptr      defl    $
 164+ E445             >
 164+ E445 10 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E447             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E447             >
 164+ E447             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E447             >
 164+ E447             >//              ______________________________________________________________________
 164+ E447             >//              Dictionary part
 164+ E447             >
 164+ E447             >                org     Dict_Ptr
 164+ 6B0E             >
 164+ 6B0E 45 04       >                dw      mirror_Ptr - $E000
 164+ 6B10             >
 164+ 6B10             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B10 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B13             >
 164+ 6B13             >
 164+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B13             >
 164+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B13 18          >                db      24
 165+ 6B14                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B14             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B14             >
 165+ 6B14             >Dict_Ptr        defl    $
 165+ 6B14             >
 165+ 6B14             >//              ______________________________________________________________________
 165+ 6B14             >//              Heap part
 165+ 6B14             >
 165+ 6B14             >
 165+ 6B14             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E447             >
 165+ E447             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E447             >Latest_Definition defl  Heap_Ptr
 165+ E447             >
 165+ E447             >                // dummy db directives used to calculate length of namec
 165+ E447 48 50       >                db      "HP"
 165+ E449             >len_NFA         defl    $ - temp_NFA
 165+ E449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E447             >
 165+ E447 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E448 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E44A             >                org     $-1                 // alter last byte of Name just above to set
 165+ E449 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E44A             >
 165+ E44A 3D 04       >                dw      Prev_Ptr            // Link to previous definition Name
 165+ E44C             >Prev_Ptr        defl    Heap_Ptr
 165+ E44C             >
 165+ E44C             >mirror_Ptr      defl    $
 165+ E44C             >
 165+ E44C 16 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E44E             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E44E             >
 165+ E44E             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E44E             >
 165+ E44E             >//              ______________________________________________________________________
 165+ E44E             >//              Dictionary part
 165+ E44E             >
 165+ E44E             >                org     Dict_Ptr
 165+ 6B14             >
 165+ 6B14 4C 04       >                dw      mirror_Ptr - $E000
 165+ 6B16             >
 165+ 6B16             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B16 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B19             >
 165+ 6B19             >
 165+ 6B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B19             >
 165+ 6B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B19 1A          >                db      26
 166+ 6B1A                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B1A             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B1A             >
 166+ 6B1A             >Dict_Ptr        defl    $
 166+ 6B1A             >
 166+ 6B1A             >//              ______________________________________________________________________
 166+ 6B1A             >//              Heap part
 166+ 6B1A             >
 166+ 6B1A             >
 166+ 6B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E44E             >
 166+ E44E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E44E             >Latest_Definition defl  Heap_Ptr
 166+ E44E             >
 166+ E44E             >                // dummy db directives used to calculate length of namec
 166+ E44E 4E 4D 4F 44 >                db      "NMODE"
 166+ E452 45          >
 166+ E453             >len_NFA         defl    $ - temp_NFA
 166+ E453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E44E             >
 166+ E44E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E44F 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E453 45          >
 166+ E454             >                org     $-1                 // alter last byte of Name just above to set
 166+ E453 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E454             >
 166+ E454 47 04       >                dw      Prev_Ptr            // Link to previous definition Name
 166+ E456             >Prev_Ptr        defl    Heap_Ptr
 166+ E456             >
 166+ E456             >mirror_Ptr      defl    $
 166+ E456             >
 166+ E456 1C 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E458             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E458             >
 166+ E458             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E458             >
 166+ E458             >//              ______________________________________________________________________
 166+ E458             >//              Dictionary part
 166+ E458             >
 166+ E458             >                org     Dict_Ptr
 166+ 6B1A             >
 166+ 6B1A 56 04       >                dw      mirror_Ptr - $E000
 166+ 6B1C             >
 166+ 6B1C             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B1C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B1F             >
 166+ 6B1F             >
 166+ 6B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B1F             >
 166+ 6B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B1F 1C          >                db      28
 167+ 6B20                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B20             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B20             >
 167+ 6B20             >Dict_Ptr        defl    $
 167+ 6B20             >
 167+ 6B20             >//              ______________________________________________________________________
 167+ 6B20             >//              Heap part
 167+ 6B20             >
 167+ 6B20             >
 167+ 6B20             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E458             >
 167+ E458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E458             >Latest_Definition defl  Heap_Ptr
 167+ E458             >
 167+ E458             >                // dummy db directives used to calculate length of namec
 167+ E458 42 4C 4B    >                db      "BLK"
 167+ E45B             >len_NFA         defl    $ - temp_NFA
 167+ E45B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E458             >
 167+ E458 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E459 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E45C             >                org     $-1                 // alter last byte of Name just above to set
 167+ E45B CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E45C             >
 167+ E45C 4E 04       >                dw      Prev_Ptr            // Link to previous definition Name
 167+ E45E             >Prev_Ptr        defl    Heap_Ptr
 167+ E45E             >
 167+ E45E             >mirror_Ptr      defl    $
 167+ E45E             >
 167+ E45E 22 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E460             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E460             >
 167+ E460             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E460             >
 167+ E460             >//              ______________________________________________________________________
 167+ E460             >//              Dictionary part
 167+ E460             >
 167+ E460             >                org     Dict_Ptr
 167+ 6B20             >
 167+ 6B20 5E 04       >                dw      mirror_Ptr - $E000
 167+ 6B22             >
 167+ 6B22             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B22 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B25             >
 167+ 6B25             >
 167+ 6B25             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B25             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B25             >
 167+ 6B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B25 1E          >                db      30
 168+ 6B26                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B26             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B26             >
 168+ 6B26             >Dict_Ptr        defl    $
 168+ 6B26             >
 168+ 6B26             >//              ______________________________________________________________________
 168+ 6B26             >//              Heap part
 168+ 6B26             >
 168+ 6B26             >
 168+ 6B26             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E460             >
 168+ E460             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E460             >Latest_Definition defl  Heap_Ptr
 168+ E460             >
 168+ E460             >                // dummy db directives used to calculate length of namec
 168+ E460 3E 49 4E    >                db      ">IN"
 168+ E463             >len_NFA         defl    $ - temp_NFA
 168+ E463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E460             >
 168+ E460 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E461 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E464             >                org     $-1                 // alter last byte of Name just above to set
 168+ E463 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E464             >
 168+ E464 58 04       >                dw      Prev_Ptr            // Link to previous definition Name
 168+ E466             >Prev_Ptr        defl    Heap_Ptr
 168+ E466             >
 168+ E466             >mirror_Ptr      defl    $
 168+ E466             >
 168+ E466 28 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E468             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E468             >
 168+ E468             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E468             >
 168+ E468             >//              ______________________________________________________________________
 168+ E468             >//              Dictionary part
 168+ E468             >
 168+ E468             >                org     Dict_Ptr
 168+ 6B26             >
 168+ 6B26 66 04       >                dw      mirror_Ptr - $E000
 168+ 6B28             >
 168+ 6B28             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B28 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B2B             >
 168+ 6B2B             >
 168+ 6B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B2B             >
 168+ 6B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B2B 20          >                db      32
 169+ 6B2C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B2C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B2C             >
 169+ 6B2C             >Dict_Ptr        defl    $
 169+ 6B2C             >
 169+ 6B2C             >//              ______________________________________________________________________
 169+ 6B2C             >//              Heap part
 169+ 6B2C             >
 169+ 6B2C             >
 169+ 6B2C             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E468             >
 169+ E468             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E468             >Latest_Definition defl  Heap_Ptr
 169+ E468             >
 169+ E468             >                // dummy db directives used to calculate length of namec
 169+ E468 4F 55 54    >                db      "OUT"
 169+ E46B             >len_NFA         defl    $ - temp_NFA
 169+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E468             >
 169+ E468 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E469 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 169+ E46B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E46C             >
 169+ E46C 60 04       >                dw      Prev_Ptr            // Link to previous definition Name
 169+ E46E             >Prev_Ptr        defl    Heap_Ptr
 169+ E46E             >
 169+ E46E             >mirror_Ptr      defl    $
 169+ E46E             >
 169+ E46E 2E 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E470             >
 169+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E470             >
 169+ E470             >//              ______________________________________________________________________
 169+ E470             >//              Dictionary part
 169+ E470             >
 169+ E470             >                org     Dict_Ptr
 169+ 6B2C             >
 169+ 6B2C 6E 04       >                dw      mirror_Ptr - $E000
 169+ 6B2E             >
 169+ 6B2E             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B2E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B31             >
 169+ 6B31             >
 169+ 6B31             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B31             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B31             >
 169+ 6B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B31 22          >                db      34
 170+ 6B32                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B32             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B32             >
 170+ 6B32             >Dict_Ptr        defl    $
 170+ 6B32             >
 170+ 6B32             >//              ______________________________________________________________________
 170+ 6B32             >//              Heap part
 170+ 6B32             >
 170+ 6B32             >
 170+ 6B32             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E470             >
 170+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E470             >Latest_Definition defl  Heap_Ptr
 170+ E470             >
 170+ E470             >                // dummy db directives used to calculate length of namec
 170+ E470 53 43 52    >                db      "SCR"
 170+ E473             >len_NFA         defl    $ - temp_NFA
 170+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E470             >
 170+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E471 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E474             >                org     $-1                 // alter last byte of Name just above to set
 170+ E473 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E474             >
 170+ E474 68 04       >                dw      Prev_Ptr            // Link to previous definition Name
 170+ E476             >Prev_Ptr        defl    Heap_Ptr
 170+ E476             >
 170+ E476             >mirror_Ptr      defl    $
 170+ E476             >
 170+ E476 34 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E478             >
 170+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E478             >
 170+ E478             >//              ______________________________________________________________________
 170+ E478             >//              Dictionary part
 170+ E478             >
 170+ E478             >                org     Dict_Ptr
 170+ 6B32             >
 170+ 6B32 76 04       >                dw      mirror_Ptr - $E000
 170+ 6B34             >
 170+ 6B34             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B34 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B37             >
 170+ 6B37             >
 170+ 6B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B37             >
 170+ 6B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B37 24          >                db      36
 171+ 6B38                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B38             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B38             >
 171+ 6B38             >Dict_Ptr        defl    $
 171+ 6B38             >
 171+ 6B38             >//              ______________________________________________________________________
 171+ 6B38             >//              Heap part
 171+ 6B38             >
 171+ 6B38             >
 171+ 6B38             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E478             >
 171+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E478             >Latest_Definition defl  Heap_Ptr
 171+ E478             >
 171+ E478             >                // dummy db directives used to calculate length of namec
 171+ E478 4F 46 46 53 >                db      "OFFSET"
 171+ E47C 45 54       >
 171+ E47E             >len_NFA         defl    $ - temp_NFA
 171+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E478             >
 171+ E478 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E479 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E47D 45 54       >
 171+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 171+ E47E D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E47F             >
 171+ E47F 70 04       >                dw      Prev_Ptr            // Link to previous definition Name
 171+ E481             >Prev_Ptr        defl    Heap_Ptr
 171+ E481             >
 171+ E481             >mirror_Ptr      defl    $
 171+ E481             >
 171+ E481 3A 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E483             >
 171+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E483             >
 171+ E483             >//              ______________________________________________________________________
 171+ E483             >//              Dictionary part
 171+ E483             >
 171+ E483             >                org     Dict_Ptr
 171+ 6B38             >
 171+ 6B38 81 04       >                dw      mirror_Ptr - $E000
 171+ 6B3A             >
 171+ 6B3A             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B3A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B3D             >
 171+ 6B3D             >
 171+ 6B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B3D             >
 171+ 6B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B3D 26          >                db      38
 172+ 6B3E                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B3E             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B3E             >
 172+ 6B3E             >Dict_Ptr        defl    $
 172+ 6B3E             >
 172+ 6B3E             >//              ______________________________________________________________________
 172+ 6B3E             >//              Heap part
 172+ 6B3E             >
 172+ 6B3E             >
 172+ 6B3E             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E483             >
 172+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E483             >Latest_Definition defl  Heap_Ptr
 172+ E483             >
 172+ E483             >                // dummy db directives used to calculate length of namec
 172+ E483 43 4F 4E 54 >                db      "CONTEXT"
 172+ E487 45 58 54    >
 172+ E48A             >len_NFA         defl    $ - temp_NFA
 172+ E48A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E483             >
 172+ E483 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E484 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E488 45 58 54    >
 172+ E48B             >                org     $-1                 // alter last byte of Name just above to set
 172+ E48A D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E48B             >
 172+ E48B 78 04       >                dw      Prev_Ptr            // Link to previous definition Name
 172+ E48D             >Prev_Ptr        defl    Heap_Ptr
 172+ E48D             >
 172+ E48D             >mirror_Ptr      defl    $
 172+ E48D             >
 172+ E48D 40 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E48F             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E48F             >
 172+ E48F             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E48F             >
 172+ E48F             >//              ______________________________________________________________________
 172+ E48F             >//              Dictionary part
 172+ E48F             >
 172+ E48F             >                org     Dict_Ptr
 172+ 6B3E             >
 172+ 6B3E 8D 04       >                dw      mirror_Ptr - $E000
 172+ 6B40             >
 172+ 6B40             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B40 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B43             >
 172+ 6B43             >
 172+ 6B43             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B43             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B43             >
 172+ 6B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B43 28          >                db      40
 173+ 6B44                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B44             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B44             >
 173+ 6B44             >Dict_Ptr        defl    $
 173+ 6B44             >
 173+ 6B44             >//              ______________________________________________________________________
 173+ 6B44             >//              Heap part
 173+ 6B44             >
 173+ 6B44             >
 173+ 6B44             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E48F             >
 173+ E48F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E48F             >Latest_Definition defl  Heap_Ptr
 173+ E48F             >
 173+ E48F             >                // dummy db directives used to calculate length of namec
 173+ E48F 43 55 52 52 >                db      "CURRENT"
 173+ E493 45 4E 54    >
 173+ E496             >len_NFA         defl    $ - temp_NFA
 173+ E496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E48F             >
 173+ E48F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E490 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E494 45 4E 54    >
 173+ E497             >                org     $-1                 // alter last byte of Name just above to set
 173+ E496 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E497             >
 173+ E497 83 04       >                dw      Prev_Ptr            // Link to previous definition Name
 173+ E499             >Prev_Ptr        defl    Heap_Ptr
 173+ E499             >
 173+ E499             >mirror_Ptr      defl    $
 173+ E499             >
 173+ E499 46 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E49B             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E49B             >
 173+ E49B             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E49B             >
 173+ E49B             >//              ______________________________________________________________________
 173+ E49B             >//              Dictionary part
 173+ E49B             >
 173+ E49B             >                org     Dict_Ptr
 173+ 6B44             >
 173+ 6B44 99 04       >                dw      mirror_Ptr - $E000
 173+ 6B46             >
 173+ 6B46             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B46 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B49             >
 173+ 6B49             >
 173+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B49             >
 173+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B49 2A          >                db      42
 174+ 6B4A                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B4A             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B4A             >
 174+ 6B4A             >Dict_Ptr        defl    $
 174+ 6B4A             >
 174+ 6B4A             >//              ______________________________________________________________________
 174+ 6B4A             >//              Heap part
 174+ 6B4A             >
 174+ 6B4A             >
 174+ 6B4A             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E49B             >
 174+ E49B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E49B             >Latest_Definition defl  Heap_Ptr
 174+ E49B             >
 174+ E49B             >                // dummy db directives used to calculate length of namec
 174+ E49B 53 54 41 54 >                db      "STATE"
 174+ E49F 45          >
 174+ E4A0             >len_NFA         defl    $ - temp_NFA
 174+ E4A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E49B             >
 174+ E49B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E49C 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E4A0 45          >
 174+ E4A1             >                org     $-1                 // alter last byte of Name just above to set
 174+ E4A0 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E4A1             >
 174+ E4A1 8F 04       >                dw      Prev_Ptr            // Link to previous definition Name
 174+ E4A3             >Prev_Ptr        defl    Heap_Ptr
 174+ E4A3             >
 174+ E4A3             >mirror_Ptr      defl    $
 174+ E4A3             >
 174+ E4A3 4C 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E4A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E4A5             >
 174+ E4A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E4A5             >
 174+ E4A5             >//              ______________________________________________________________________
 174+ E4A5             >//              Dictionary part
 174+ E4A5             >
 174+ E4A5             >                org     Dict_Ptr
 174+ 6B4A             >
 174+ 6B4A A3 04       >                dw      mirror_Ptr - $E000
 174+ 6B4C             >
 174+ 6B4C             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B4C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B4F             >
 174+ 6B4F             >
 174+ 6B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B4F             >
 174+ 6B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B4F 2C          >                db      44
 175+ 6B50                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B50             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B50             >
 175+ 6B50             >Dict_Ptr        defl    $
 175+ 6B50             >
 175+ 6B50             >//              ______________________________________________________________________
 175+ 6B50             >//              Heap part
 175+ 6B50             >
 175+ 6B50             >
 175+ 6B50             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E4A5             >
 175+ E4A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E4A5             >Latest_Definition defl  Heap_Ptr
 175+ E4A5             >
 175+ E4A5             >                // dummy db directives used to calculate length of namec
 175+ E4A5 42 41 53 45 >                db      "BASE"
 175+ E4A9             >len_NFA         defl    $ - temp_NFA
 175+ E4A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E4A5             >
 175+ E4A5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E4A6 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E4AA             >                org     $-1                 // alter last byte of Name just above to set
 175+ E4A9 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E4AA             >
 175+ E4AA 9B 04       >                dw      Prev_Ptr            // Link to previous definition Name
 175+ E4AC             >Prev_Ptr        defl    Heap_Ptr
 175+ E4AC             >
 175+ E4AC             >mirror_Ptr      defl    $
 175+ E4AC             >
 175+ E4AC 52 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E4AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E4AE             >
 175+ E4AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E4AE             >
 175+ E4AE             >//              ______________________________________________________________________
 175+ E4AE             >//              Dictionary part
 175+ E4AE             >
 175+ E4AE             >                org     Dict_Ptr
 175+ 6B50             >
 175+ 6B50 AC 04       >                dw      mirror_Ptr - $E000
 175+ 6B52             >
 175+ 6B52             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B52 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B55             >
 175+ 6B55             >
 175+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B55             >
 175+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B55 2E          >                db      46
 176+ 6B56                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B56             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B56             >
 176+ 6B56             >Dict_Ptr        defl    $
 176+ 6B56             >
 176+ 6B56             >//              ______________________________________________________________________
 176+ 6B56             >//              Heap part
 176+ 6B56             >
 176+ 6B56             >
 176+ 6B56             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E4AE             >
 176+ E4AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E4AE             >Latest_Definition defl  Heap_Ptr
 176+ E4AE             >
 176+ E4AE             >                // dummy db directives used to calculate length of namec
 176+ E4AE 44 50 4C    >                db      "DPL"
 176+ E4B1             >len_NFA         defl    $ - temp_NFA
 176+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E4AE             >
 176+ E4AE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E4AF 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 176+ E4B1 CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E4B2             >
 176+ E4B2 A5 04       >                dw      Prev_Ptr            // Link to previous definition Name
 176+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 176+ E4B4             >
 176+ E4B4             >mirror_Ptr      defl    $
 176+ E4B4             >
 176+ E4B4 58 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E4B6             >
 176+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E4B6             >
 176+ E4B6             >//              ______________________________________________________________________
 176+ E4B6             >//              Dictionary part
 176+ E4B6             >
 176+ E4B6             >                org     Dict_Ptr
 176+ 6B56             >
 176+ 6B56 B4 04       >                dw      mirror_Ptr - $E000
 176+ 6B58             >
 176+ 6B58             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B58 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B5B             >
 176+ 6B5B             >
 176+ 6B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B5B             >
 176+ 6B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B5B 30          >                db      48
 177+ 6B5C                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B5C             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B5C             >
 177+ 6B5C             >Dict_Ptr        defl    $
 177+ 6B5C             >
 177+ 6B5C             >//              ______________________________________________________________________
 177+ 6B5C             >//              Heap part
 177+ 6B5C             >
 177+ 6B5C             >
 177+ 6B5C             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E4B6             >
 177+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E4B6             >Latest_Definition defl  Heap_Ptr
 177+ E4B6             >
 177+ E4B6             >                // dummy db directives used to calculate length of namec
 177+ E4B6 46 4C 44    >                db      "FLD"
 177+ E4B9             >len_NFA         defl    $ - temp_NFA
 177+ E4B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E4B6             >
 177+ E4B6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E4B7 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E4BA             >                org     $-1                 // alter last byte of Name just above to set
 177+ E4B9 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E4BA             >
 177+ E4BA AE 04       >                dw      Prev_Ptr            // Link to previous definition Name
 177+ E4BC             >Prev_Ptr        defl    Heap_Ptr
 177+ E4BC             >
 177+ E4BC             >mirror_Ptr      defl    $
 177+ E4BC             >
 177+ E4BC 5E 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E4BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E4BE             >
 177+ E4BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E4BE             >
 177+ E4BE             >//              ______________________________________________________________________
 177+ E4BE             >//              Dictionary part
 177+ E4BE             >
 177+ E4BE             >                org     Dict_Ptr
 177+ 6B5C             >
 177+ 6B5C BC 04       >                dw      mirror_Ptr - $E000
 177+ 6B5E             >
 177+ 6B5E             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B5E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B61             >
 177+ 6B61             >
 177+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B61             >
 177+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B61 32          >                db      50
 178+ 6B62                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B62             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B62             >
 178+ 6B62             >Dict_Ptr        defl    $
 178+ 6B62             >
 178+ 6B62             >//              ______________________________________________________________________
 178+ 6B62             >//              Heap part
 178+ 6B62             >
 178+ 6B62             >
 178+ 6B62             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E4BE             >
 178+ E4BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E4BE             >Latest_Definition defl  Heap_Ptr
 178+ E4BE             >
 178+ E4BE             >                // dummy db directives used to calculate length of namec
 178+ E4BE 43 53 50    >                db      "CSP"
 178+ E4C1             >len_NFA         defl    $ - temp_NFA
 178+ E4C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E4BE             >
 178+ E4BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E4BF 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E4C2             >                org     $-1                 // alter last byte of Name just above to set
 178+ E4C1 D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E4C2             >
 178+ E4C2 B6 04       >                dw      Prev_Ptr            // Link to previous definition Name
 178+ E4C4             >Prev_Ptr        defl    Heap_Ptr
 178+ E4C4             >
 178+ E4C4             >mirror_Ptr      defl    $
 178+ E4C4             >
 178+ E4C4 64 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E4C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E4C6             >
 178+ E4C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E4C6             >
 178+ E4C6             >//              ______________________________________________________________________
 178+ E4C6             >//              Dictionary part
 178+ E4C6             >
 178+ E4C6             >                org     Dict_Ptr
 178+ 6B62             >
 178+ 6B62 C4 04       >                dw      mirror_Ptr - $E000
 178+ 6B64             >
 178+ 6B64             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B64 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B67             >
 178+ 6B67             >
 178+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B67             >
 178+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B67 34          >                db      52
 179+ 6B68                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B68             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B68             >
 179+ 6B68             >Dict_Ptr        defl    $
 179+ 6B68             >
 179+ 6B68             >//              ______________________________________________________________________
 179+ 6B68             >//              Heap part
 179+ 6B68             >
 179+ 6B68             >
 179+ 6B68             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E4C6             >
 179+ E4C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E4C6             >Latest_Definition defl  Heap_Ptr
 179+ E4C6             >
 179+ E4C6             >                // dummy db directives used to calculate length of namec
 179+ E4C6 52 23       >                db      "R#"
 179+ E4C8             >len_NFA         defl    $ - temp_NFA
 179+ E4C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E4C6             >
 179+ E4C6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E4C7 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E4C9             >                org     $-1                 // alter last byte of Name just above to set
 179+ E4C8 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E4C9             >
 179+ E4C9 BE 04       >                dw      Prev_Ptr            // Link to previous definition Name
 179+ E4CB             >Prev_Ptr        defl    Heap_Ptr
 179+ E4CB             >
 179+ E4CB             >mirror_Ptr      defl    $
 179+ E4CB             >
 179+ E4CB 6A 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E4CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E4CD             >
 179+ E4CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E4CD             >
 179+ E4CD             >//              ______________________________________________________________________
 179+ E4CD             >//              Dictionary part
 179+ E4CD             >
 179+ E4CD             >                org     Dict_Ptr
 179+ 6B68             >
 179+ 6B68 CB 04       >                dw      mirror_Ptr - $E000
 179+ 6B6A             >
 179+ 6B6A             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B6A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B6D             >
 179+ 6B6D             >
 179+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B6D             >
 179+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B6D 36          >                db      54
 180+ 6B6E                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B6E             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B6E             >
 180+ 6B6E             >Dict_Ptr        defl    $
 180+ 6B6E             >
 180+ 6B6E             >//              ______________________________________________________________________
 180+ 6B6E             >//              Heap part
 180+ 6B6E             >
 180+ 6B6E             >
 180+ 6B6E             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E4CD             >
 180+ E4CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E4CD             >Latest_Definition defl  Heap_Ptr
 180+ E4CD             >
 180+ E4CD             >                // dummy db directives used to calculate length of namec
 180+ E4CD 48 4C 44    >                db      "HLD"
 180+ E4D0             >len_NFA         defl    $ - temp_NFA
 180+ E4D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E4CD             >
 180+ E4CD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E4CE 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E4D1             >                org     $-1                 // alter last byte of Name just above to set
 180+ E4D0 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E4D1             >
 180+ E4D1 C6 04       >                dw      Prev_Ptr            // Link to previous definition Name
 180+ E4D3             >Prev_Ptr        defl    Heap_Ptr
 180+ E4D3             >
 180+ E4D3             >mirror_Ptr      defl    $
 180+ E4D3             >
 180+ E4D3 70 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E4D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E4D5             >
 180+ E4D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E4D5             >
 180+ E4D5             >//              ______________________________________________________________________
 180+ E4D5             >//              Dictionary part
 180+ E4D5             >
 180+ E4D5             >                org     Dict_Ptr
 180+ 6B6E             >
 180+ 6B6E D3 04       >                dw      mirror_Ptr - $E000
 180+ 6B70             >
 180+ 6B70             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B70 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B73             >
 180+ 6B73             >
 180+ 6B73             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B73             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B73             >
 180+ 6B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B73 38          >                db      56
 181+ 6B74                              User_Def USE        , "USE"       , 58 // address of last used block
 181+ 6B74             >                New_Def  USE, "USE", User_Ptr, is_normal
 181+ 6B74             >
 181+ 6B74             >Dict_Ptr        defl    $
 181+ 6B74             >
 181+ 6B74             >//              ______________________________________________________________________
 181+ 6B74             >//              Heap part
 181+ 6B74             >
 181+ 6B74             >
 181+ 6B74             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E4D5             >
 181+ E4D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E4D5             >Latest_Definition defl  Heap_Ptr
 181+ E4D5             >
 181+ E4D5             >                // dummy db directives used to calculate length of namec
 181+ E4D5 55 53 45    >                db      "USE"
 181+ E4D8             >len_NFA         defl    $ - temp_NFA
 181+ E4D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E4D5             >
 181+ E4D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E4D6 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 181+ E4D9             >                org     $-1                 // alter last byte of Name just above to set
 181+ E4D8 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ E4D9             >
 181+ E4D9 CD 04       >                dw      Prev_Ptr            // Link to previous definition Name
 181+ E4DB             >Prev_Ptr        defl    Heap_Ptr
 181+ E4DB             >
 181+ E4DB             >mirror_Ptr      defl    $
 181+ E4DB             >
 181+ E4DB 76 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E4DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E4DD             >
 181+ E4DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E4DD             >
 181+ E4DD             >//              ______________________________________________________________________
 181+ E4DD             >//              Dictionary part
 181+ E4DD             >
 181+ E4DD             >                org     Dict_Ptr
 181+ 6B74             >
 181+ 6B74 DB 04       >                dw      mirror_Ptr - $E000
 181+ 6B76             >
 181+ 6B76             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B76 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B79             >
 181+ 6B79             >
 181+ 6B79             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B79             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B79             >
 181+ 6B79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B79 3A          >                db      58
 182+ 6B7A                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B7A             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B7A             >
 182+ 6B7A             >Dict_Ptr        defl    $
 182+ 6B7A             >
 182+ 6B7A             >//              ______________________________________________________________________
 182+ 6B7A             >//              Heap part
 182+ 6B7A             >
 182+ 6B7A             >
 182+ 6B7A             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E4DD             >
 182+ E4DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E4DD             >Latest_Definition defl  Heap_Ptr
 182+ E4DD             >
 182+ E4DD             >                // dummy db directives used to calculate length of namec
 182+ E4DD 50 52 45 56 >                db      "PREV"
 182+ E4E1             >len_NFA         defl    $ - temp_NFA
 182+ E4E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E4DD             >
 182+ E4DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E4DE 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E4E2             >                org     $-1                 // alter last byte of Name just above to set
 182+ E4E1 D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E4E2             >
 182+ E4E2 D5 04       >                dw      Prev_Ptr            // Link to previous definition Name
 182+ E4E4             >Prev_Ptr        defl    Heap_Ptr
 182+ E4E4             >
 182+ E4E4             >mirror_Ptr      defl    $
 182+ E4E4             >
 182+ E4E4 7C 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E4E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E4E6             >
 182+ E4E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E4E6             >
 182+ E4E6             >//              ______________________________________________________________________
 182+ E4E6             >//              Dictionary part
 182+ E4E6             >
 182+ E4E6             >                org     Dict_Ptr
 182+ 6B7A             >
 182+ 6B7A E4 04       >                dw      mirror_Ptr - $E000
 182+ 6B7C             >
 182+ 6B7C             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B7C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B7F             >
 182+ 6B7F             >
 182+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B7F             >
 182+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B7F 3C          >                db      60
 183+ 6B80                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B80             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B80             >
 183+ 6B80             >Dict_Ptr        defl    $
 183+ 6B80             >
 183+ 6B80             >//              ______________________________________________________________________
 183+ 6B80             >//              Heap part
 183+ 6B80             >
 183+ 6B80             >
 183+ 6B80             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E4E6             >
 183+ E4E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E4E6             >Latest_Definition defl  Heap_Ptr
 183+ E4E6             >
 183+ E4E6             >                // dummy db directives used to calculate length of namec
 183+ E4E6 4C 50       >                db      "LP"
 183+ E4E8             >len_NFA         defl    $ - temp_NFA
 183+ E4E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E4E6             >
 183+ E4E6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E4E7 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E4E9             >                org     $-1                 // alter last byte of Name just above to set
 183+ E4E8 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E4E9             >
 183+ E4E9 DD 04       >                dw      Prev_Ptr            // Link to previous definition Name
 183+ E4EB             >Prev_Ptr        defl    Heap_Ptr
 183+ E4EB             >
 183+ E4EB             >mirror_Ptr      defl    $
 183+ E4EB             >
 183+ E4EB 82 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E4ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E4ED             >
 183+ E4ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E4ED             >
 183+ E4ED             >//              ______________________________________________________________________
 183+ E4ED             >//              Dictionary part
 183+ E4ED             >
 183+ E4ED             >                org     Dict_Ptr
 183+ 6B80             >
 183+ 6B80 EB 04       >                dw      mirror_Ptr - $E000
 183+ 6B82             >
 183+ 6B82             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B82 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B85             >
 183+ 6B85             >
 183+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B85             >
 183+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B85 3E          >                db      62
 184+ 6B86                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B86             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B86             >
 184+ 6B86             >Dict_Ptr        defl    $
 184+ 6B86             >
 184+ 6B86             >//              ______________________________________________________________________
 184+ 6B86             >//              Heap part
 184+ 6B86             >
 184+ 6B86             >
 184+ 6B86             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E4ED             >
 184+ E4ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E4ED             >Latest_Definition defl  Heap_Ptr
 184+ E4ED             >
 184+ E4ED             >                // dummy db directives used to calculate length of namec
 184+ E4ED 50 4C 41 43 >                db      "PLACE"
 184+ E4F1 45          >
 184+ E4F2             >len_NFA         defl    $ - temp_NFA
 184+ E4F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E4ED             >
 184+ E4ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E4EE 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E4F2 45          >
 184+ E4F3             >                org     $-1                 // alter last byte of Name just above to set
 184+ E4F2 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E4F3             >
 184+ E4F3 E6 04       >                dw      Prev_Ptr            // Link to previous definition Name
 184+ E4F5             >Prev_Ptr        defl    Heap_Ptr
 184+ E4F5             >
 184+ E4F5             >mirror_Ptr      defl    $
 184+ E4F5             >
 184+ E4F5 88 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E4F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E4F7             >
 184+ E4F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E4F7             >
 184+ E4F7             >//              ______________________________________________________________________
 184+ E4F7             >//              Dictionary part
 184+ E4F7             >
 184+ E4F7             >                org     Dict_Ptr
 184+ 6B86             >
 184+ 6B86 F5 04       >                dw      mirror_Ptr - $E000
 184+ 6B88             >
 184+ 6B88             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B88 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B8B             >
 184+ 6B8B             >
 184+ 6B8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B8B             >
 184+ 6B8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B8B 40          >                db      64
 185+ 6B8C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B8C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B8C             >
 185+ 6B8C             >Dict_Ptr        defl    $
 185+ 6B8C             >
 185+ 6B8C             >//              ______________________________________________________________________
 185+ 6B8C             >//              Heap part
 185+ 6B8C             >
 185+ 6B8C             >
 185+ 6B8C             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E4F7             >
 185+ E4F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E4F7             >Latest_Definition defl  Heap_Ptr
 185+ E4F7             >
 185+ E4F7             >                // dummy db directives used to calculate length of namec
 185+ E4F7 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E4FB 43 45 2D 49 >
 185+ E4FF 44          >
 185+ E500             >len_NFA         defl    $ - temp_NFA
 185+ E500             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E4F7             >
 185+ E4F7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E4F8 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E4FC 43 45 2D 49 >
 185+ E500 44          >
 185+ E501             >                org     $-1                 // alter last byte of Name just above to set
 185+ E500 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E501             >
 185+ E501 ED 04       >                dw      Prev_Ptr            // Link to previous definition Name
 185+ E503             >Prev_Ptr        defl    Heap_Ptr
 185+ E503             >
 185+ E503             >mirror_Ptr      defl    $
 185+ E503             >
 185+ E503 8E 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E505             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E505             >
 185+ E505             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E505             >
 185+ E505             >//              ______________________________________________________________________
 185+ E505             >//              Dictionary part
 185+ E505             >
 185+ E505             >                org     Dict_Ptr
 185+ 6B8C             >
 185+ 6B8C 03 05       >                dw      mirror_Ptr - $E000
 185+ 6B8E             >
 185+ 6B8E             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B8E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B91             >
 185+ 6B91             >
 185+ 6B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B91             >
 185+ 6B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B91 42          >                db      66
 186+ 6B92                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B92             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B92             >
 186+ 6B92             >Dict_Ptr        defl    $
 186+ 6B92             >
 186+ 6B92             >//              ______________________________________________________________________
 186+ 6B92             >//              Heap part
 186+ 6B92             >
 186+ 6B92             >
 186+ 6B92             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E505             >
 186+ E505             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E505             >Latest_Definition defl  Heap_Ptr
 186+ E505             >
 186+ E505             >                // dummy db directives used to calculate length of namec
 186+ E505 53 50 41 4E >                db      "SPAN"
 186+ E509             >len_NFA         defl    $ - temp_NFA
 186+ E509             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E505             >
 186+ E505 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E506 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E50A             >                org     $-1                 // alter last byte of Name just above to set
 186+ E509 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E50A             >
 186+ E50A F7 04       >                dw      Prev_Ptr            // Link to previous definition Name
 186+ E50C             >Prev_Ptr        defl    Heap_Ptr
 186+ E50C             >
 186+ E50C             >mirror_Ptr      defl    $
 186+ E50C             >
 186+ E50C 94 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E50E             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E50E             >
 186+ E50E             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E50E             >
 186+ E50E             >//              ______________________________________________________________________
 186+ E50E             >//              Dictionary part
 186+ E50E             >
 186+ E50E             >                org     Dict_Ptr
 186+ 6B92             >
 186+ 6B92 0C 05       >                dw      mirror_Ptr - $E000
 186+ 6B94             >
 186+ 6B94             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B94 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B97             >
 186+ 6B97             >
 186+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B97             >
 186+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B97 44          >                db      68
 187+ 6B98                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B98             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B98             >
 187+ 6B98             >Dict_Ptr        defl    $
 187+ 6B98             >
 187+ 6B98             >//              ______________________________________________________________________
 187+ 6B98             >//              Heap part
 187+ 6B98             >
 187+ 6B98             >
 187+ 6B98             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E50E             >
 187+ E50E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E50E             >Latest_Definition defl  Heap_Ptr
 187+ E50E             >
 187+ E50E             >                // dummy db directives used to calculate length of namec
 187+ E50E 48 41 4E 44 >                db      "HANDLER"
 187+ E512 4C 45 52    >
 187+ E515             >len_NFA         defl    $ - temp_NFA
 187+ E515             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E50E             >
 187+ E50E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E50F 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E513 4C 45 52    >
 187+ E516             >                org     $-1                 // alter last byte of Name just above to set
 187+ E515 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E516             >
 187+ E516 05 05       >                dw      Prev_Ptr            // Link to previous definition Name
 187+ E518             >Prev_Ptr        defl    Heap_Ptr
 187+ E518             >
 187+ E518             >mirror_Ptr      defl    $
 187+ E518             >
 187+ E518 9A 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E51A             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E51A             >
 187+ E51A             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E51A             >
 187+ E51A             >//              ______________________________________________________________________
 187+ E51A             >//              Dictionary part
 187+ E51A             >
 187+ E51A             >                org     Dict_Ptr
 187+ 6B98             >
 187+ 6B98 18 05       >                dw      mirror_Ptr - $E000
 187+ 6B9A             >
 187+ 6B9A             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B9A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B9D             >
 187+ 6B9D             >
 187+ 6B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B9D             >
 187+ 6B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B9D 46          >                db      70
 188+ 6B9E                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B9E             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B9E             >
 188+ 6B9E             >Dict_Ptr        defl    $
 188+ 6B9E             >
 188+ 6B9E             >//              ______________________________________________________________________
 188+ 6B9E             >//              Heap part
 188+ 6B9E             >
 188+ 6B9E             >
 188+ 6B9E             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E51A             >
 188+ E51A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E51A             >Latest_Definition defl  Heap_Ptr
 188+ E51A             >
 188+ E51A             >                // dummy db directives used to calculate length of namec
 188+ E51A 45 58 50    >                db      "EXP"
 188+ E51D             >len_NFA         defl    $ - temp_NFA
 188+ E51D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E51A             >
 188+ E51A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E51B 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E51E             >                org     $-1                 // alter last byte of Name just above to set
 188+ E51D D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E51E             >
 188+ E51E 0E 05       >                dw      Prev_Ptr            // Link to previous definition Name
 188+ E520             >Prev_Ptr        defl    Heap_Ptr
 188+ E520             >
 188+ E520             >mirror_Ptr      defl    $
 188+ E520             >
 188+ E520 A0 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E522             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E522             >
 188+ E522             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E522             >
 188+ E522             >//              ______________________________________________________________________
 188+ E522             >//              Dictionary part
 188+ E522             >
 188+ E522             >                org     Dict_Ptr
 188+ 6B9E             >
 188+ 6B9E 20 05       >                dw      mirror_Ptr - $E000
 188+ 6BA0             >
 188+ 6BA0             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BA0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BA3             >
 188+ 6BA3             >
 188+ 6BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BA3             >
 188+ 6BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BA3 48          >                db      72
 189+ 6BA4
 190+ 6BA4              //  ______________________________________________________________________
 191+ 6BA4              //
 192+ 6BA4              // here         -- a
 193+ 6BA4                              Colon_Def HERE, "HERE", is_normal
 193+ 6BA4             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BA4             >
 193+ 6BA4             >Dict_Ptr        defl    $
 193+ 6BA4             >
 193+ 6BA4             >//              ______________________________________________________________________
 193+ 6BA4             >//              Heap part
 193+ 6BA4             >
 193+ 6BA4             >
 193+ 6BA4             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E522             >
 193+ E522             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E522             >Latest_Definition defl  Heap_Ptr
 193+ E522             >
 193+ E522             >                // dummy db directives used to calculate length of namec
 193+ E522 48 45 52 45 >                db      "HERE"
 193+ E526             >len_NFA         defl    $ - temp_NFA
 193+ E526             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E522             >
 193+ E522 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E523 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E527             >                org     $-1                 // alter last byte of Name just above to set
 193+ E526 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E527             >
 193+ E527 1A 05       >                dw      Prev_Ptr            // Link to previous definition Name
 193+ E529             >Prev_Ptr        defl    Heap_Ptr
 193+ E529             >
 193+ E529             >mirror_Ptr      defl    $
 193+ E529             >
 193+ E529 A6 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E52B             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E52B             >
 193+ E52B             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E52B             >
 193+ E52B             >//              ______________________________________________________________________
 193+ E52B             >//              Dictionary part
 193+ E52B             >
 193+ E52B             >                org     Dict_Ptr
 193+ 6BA4             >
 193+ 6BA4 29 05       >                dw      mirror_Ptr - $E000
 193+ 6BA6             >
 193+ 6BA6             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BA6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BA9             >
 193+ 6BA9             >
 193+ 6BA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BA9             >
 193+ 6BA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BA9 FE 6A 89 69                  dw      DP, FETCH               // dp @
 195+ 6BAD 52 68                        dw      EXIT                    // ;
 196+ 6BAF
 197+ 6BAF              //  ______________________________________________________________________
 198+ 6BAF              //
 199+ 6BAF              // allot        n --
 200+ 6BAF                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BAF             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BAF             >
 200+ 6BAF             >Dict_Ptr        defl    $
 200+ 6BAF             >
 200+ 6BAF             >//              ______________________________________________________________________
 200+ 6BAF             >//              Heap part
 200+ 6BAF             >
 200+ 6BAF             >
 200+ 6BAF             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E52B             >
 200+ E52B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E52B             >Latest_Definition defl  Heap_Ptr
 200+ E52B             >
 200+ E52B             >                // dummy db directives used to calculate length of namec
 200+ E52B 41 4C 4C 4F >                db      "ALLOT"
 200+ E52F 54          >
 200+ E530             >len_NFA         defl    $ - temp_NFA
 200+ E530             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E52B             >
 200+ E52B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E52C 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E530 54          >
 200+ E531             >                org     $-1                 // alter last byte of Name just above to set
 200+ E530 D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E531             >
 200+ E531 22 05       >                dw      Prev_Ptr            // Link to previous definition Name
 200+ E533             >Prev_Ptr        defl    Heap_Ptr
 200+ E533             >
 200+ E533             >mirror_Ptr      defl    $
 200+ E533             >
 200+ E533 B1 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E535             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E535             >
 200+ E535             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E535             >
 200+ E535             >//              ______________________________________________________________________
 200+ E535             >//              Dictionary part
 200+ E535             >
 200+ E535             >                org     Dict_Ptr
 200+ 6BAF             >
 200+ 6BAF 33 05       >                dw      mirror_Ptr - $E000
 200+ 6BB1             >
 200+ 6BB1             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BB1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BB4             >
 200+ 6BB4             >
 200+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BB4             >
 200+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BB4 FE 6A 71 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BB8 52 68                        dw      EXIT                    // ;
 203+ 6BBA
 204+ 6BBA              //  ______________________________________________________________________
 205+ 6BBA              //
 206+ 6BBA              // comma        n --
 207+ 6BBA                              Colon_Def COMMA, ",", is_normal
 207+ 6BBA             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BBA             >
 207+ 6BBA             >Dict_Ptr        defl    $
 207+ 6BBA             >
 207+ 6BBA             >//              ______________________________________________________________________
 207+ 6BBA             >//              Heap part
 207+ 6BBA             >
 207+ 6BBA             >
 207+ 6BBA             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E535             >
 207+ E535             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E535             >Latest_Definition defl  Heap_Ptr
 207+ E535             >
 207+ E535             >                // dummy db directives used to calculate length of namec
 207+ E535 2C          >                db      ","
 207+ E536             >len_NFA         defl    $ - temp_NFA
 207+ E536             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E535             >
 207+ E535 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E536 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E537             >                org     $-1                 // alter last byte of Name just above to set
 207+ E536 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E537             >
 207+ E537 2B 05       >                dw      Prev_Ptr            // Link to previous definition Name
 207+ E539             >Prev_Ptr        defl    Heap_Ptr
 207+ E539             >
 207+ E539             >mirror_Ptr      defl    $
 207+ E539             >
 207+ E539 BC 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E53B             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E53B             >
 207+ E53B             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E53B             >
 207+ E53B             >//              ______________________________________________________________________
 207+ E53B             >//              Dictionary part
 207+ E53B             >
 207+ E53B             >                org     Dict_Ptr
 207+ 6BBA             >
 207+ 6BBA 39 05       >                dw      mirror_Ptr - $E000
 207+ 6BBC             >
 207+ 6BBC             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BBC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BBF             >
 207+ 6BBF             >
 207+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BBF             >
 207+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BBF A6 6B 93 69                  dw      HERE, STORE             // here !
 209+ 6BC3 8F 6A B1 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BC7 52 68                        dw      EXIT                    // ;
 211+ 6BC9
 212+ 6BC9              //  ______________________________________________________________________
 213+ 6BC9              //
 214+ 6BC9              // ccomma       c --
 215+ 6BC9                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BC9             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BC9             >
 215+ 6BC9             >Dict_Ptr        defl    $
 215+ 6BC9             >
 215+ 6BC9             >//              ______________________________________________________________________
 215+ 6BC9             >//              Heap part
 215+ 6BC9             >
 215+ 6BC9             >
 215+ 6BC9             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E53B             >
 215+ E53B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E53B             >Latest_Definition defl  Heap_Ptr
 215+ E53B             >
 215+ E53B             >                // dummy db directives used to calculate length of namec
 215+ E53B 43 2C       >                db      "C,"
 215+ E53D             >len_NFA         defl    $ - temp_NFA
 215+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E53B             >
 215+ E53B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E53C 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 215+ E53D AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E53E             >
 215+ E53E 35 05       >                dw      Prev_Ptr            // Link to previous definition Name
 215+ E540             >Prev_Ptr        defl    Heap_Ptr
 215+ E540             >
 215+ E540             >mirror_Ptr      defl    $
 215+ E540             >
 215+ E540 CB 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E542             >
 215+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E542             >
 215+ E542             >//              ______________________________________________________________________
 215+ E542             >//              Dictionary part
 215+ E542             >
 215+ E542             >                org     Dict_Ptr
 215+ 6BC9             >
 215+ 6BC9 40 05       >                dw      mirror_Ptr - $E000
 215+ 6BCB             >
 215+ 6BCB             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BCB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BCE             >
 215+ 6BCE             >
 215+ 6BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BCE             >
 215+ 6BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BCE A6 6B A7 69                  dw      HERE, CSTORE            // here c!
 217+ 6BD2 88 6A B1 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BD6 52 68                        dw      EXIT                    // ;
 219+ 6BD8
 220+ 6BD8              //  ______________________________________________________________________
 221+ 6BD8              //
 222+ 6BD8              // s>d          n -- d
 223+ 6BD8              // converts a single precision integer in a double precision
 224+ 6BD8                              New_Def S_TO_D, "S>D", is_code, is_normal
 224+ 6BD8             >
 224+ 6BD8             >Dict_Ptr        defl    $
 224+ 6BD8             >
 224+ 6BD8             >//              ______________________________________________________________________
 224+ 6BD8             >//              Heap part
 224+ 6BD8             >
 224+ 6BD8             >
 224+ 6BD8             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E542             >
 224+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E542             >Latest_Definition defl  Heap_Ptr
 224+ E542             >
 224+ E542             >                // dummy db directives used to calculate length of namec
 224+ E542 53 3E 44    >                db      "S>D"
 224+ E545             >len_NFA         defl    $ - temp_NFA
 224+ E545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E542             >
 224+ E542 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E543 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 224+ E546             >                org     $-1                 // alter last byte of Name just above to set
 224+ E545 C4          >                db      {b $} | END_BIT     // msb as name end
 224+ E546             >
 224+ E546 3B 05       >                dw      Prev_Ptr            // Link to previous definition Name
 224+ E548             >Prev_Ptr        defl    Heap_Ptr
 224+ E548             >
 224+ E548             >mirror_Ptr      defl    $
 224+ E548             >
 224+ E548 DA 6B       >                dw      Dict_Ptr + 2        // xt
 224+ E54A             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E54A             >
 224+ E54A             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E54A             >
 224+ E54A             >//              ______________________________________________________________________
 224+ E54A             >//              Dictionary part
 224+ E54A             >
 224+ E54A             >                org     Dict_Ptr
 224+ 6BD8             >
 224+ 6BD8 48 05       >                dw      mirror_Ptr - $E000
 224+ 6BDA             >
 224+ 6BDA             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 6BDA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 224+ 6BDA ~           >
 224+ 6BDA ~           >
 224+ 6BDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 6BDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 6BDA             >
 224+ 6BDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 6BDA E1                           pop     hl
 226+ 6BDB 7C                           ld      a, h
 227+ 6BDC E5                           push    hl
 228+ 6BDD 17                           rla
 229+ 6BDE ED 62                        sbc     hl, hl
 230+ 6BE0 E5                           push    hl
 231+ 6BE1                              next
 231+ 6BE1 DD E9       >                jp      (ix)
 232+ 6BE3
 233+ 6BE3              //  ______________________________________________________________________
 234+ 6BE3              //
 235+ 6BE3              // -            n1 n2 -- n3
 236+ 6BE3              // subtraction
 237+ 6BE3                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6BE3             >
 237+ 6BE3             >Dict_Ptr        defl    $
 237+ 6BE3             >
 237+ 6BE3             >//              ______________________________________________________________________
 237+ 6BE3             >//              Heap part
 237+ 6BE3             >
 237+ 6BE3             >
 237+ 6BE3             >                org     (Heap_Ptr & $1FFF) + $E000
 237+ E54A             >
 237+ E54A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ E54A             >Latest_Definition defl  Heap_Ptr
 237+ E54A             >
 237+ E54A             >                // dummy db directives used to calculate length of namec
 237+ E54A 2D          >                db      "-"
 237+ E54B             >len_NFA         defl    $ - temp_NFA
 237+ E54B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ E54A             >
 237+ E54A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ E54B 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ E54C             >                org     $-1                 // alter last byte of Name just above to set
 237+ E54B AD          >                db      {b $} | END_BIT     // msb as name end
 237+ E54C             >
 237+ E54C 42 05       >                dw      Prev_Ptr            // Link to previous definition Name
 237+ E54E             >Prev_Ptr        defl    Heap_Ptr
 237+ E54E             >
 237+ E54E             >mirror_Ptr      defl    $
 237+ E54E             >
 237+ E54E E5 6B       >                dw      Dict_Ptr + 2        // xt
 237+ E550             >Heap_Ptr        defl    $ - $E000           // save current HP
 237+ E550             >
 237+ E550             >Current_HP      defl  $ - $E000             // used to set HP once!
 237+ E550             >
 237+ E550             >//              ______________________________________________________________________
 237+ E550             >//              Dictionary part
 237+ E550             >
 237+ E550             >                org     Dict_Ptr
 237+ 6BE3             >
 237+ 6BE3 4E 05       >                dw      mirror_Ptr - $E000
 237+ 6BE5             >
 237+ 6BE5             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6BE5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6BE5 ~           >
 237+ 6BE5 ~           >
 237+ 6BE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6BE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6BE5             >
 237+ 6BE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6BE5 D9                           exx
 239+ 6BE6 D1                           pop     de
 240+ 6BE7 E1                           pop     hl
 241+ 6BE8 A7                           and     a
 242+ 6BE9 ED 52                        sbc     hl, de
 243+ 6BEB E5                           push    hl
 244+ 6BEC D9                           exx
 245+ 6BED                              next
 245+ 6BED DD E9       >                jp      (ix)
 246+ 6BEF
 247+ 6BEF
 248+ 6BEF              //  ______________________________________________________________________
 249+ 6BEF              //
 250+ 6BEF              // =            n1 n2 -- n3
 251+ 6BEF              // equals
 252+ 6BEF                              Colon_Def EQUALS, "=", is_normal
 252+ 6BEF             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 252+ 6BEF             >
 252+ 6BEF             >Dict_Ptr        defl    $
 252+ 6BEF             >
 252+ 6BEF             >//              ______________________________________________________________________
 252+ 6BEF             >//              Heap part
 252+ 6BEF             >
 252+ 6BEF             >
 252+ 6BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 252+ E550             >
 252+ E550             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ E550             >Latest_Definition defl  Heap_Ptr
 252+ E550             >
 252+ E550             >                // dummy db directives used to calculate length of namec
 252+ E550 3D          >                db      "="
 252+ E551             >len_NFA         defl    $ - temp_NFA
 252+ E551             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ E550             >
 252+ E550 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ E551 3D          >                db      "="               // name string in 7-bit ascii, but
 252+ E552             >                org     $-1                 // alter last byte of Name just above to set
 252+ E551 BD          >                db      {b $} | END_BIT     // msb as name end
 252+ E552             >
 252+ E552 4A 05       >                dw      Prev_Ptr            // Link to previous definition Name
 252+ E554             >Prev_Ptr        defl    Heap_Ptr
 252+ E554             >
 252+ E554             >mirror_Ptr      defl    $
 252+ E554             >
 252+ E554 F1 6B       >                dw      Dict_Ptr + 2        // xt
 252+ E556             >Heap_Ptr        defl    $ - $E000           // save current HP
 252+ E556             >
 252+ E556             >Current_HP      defl  $ - $E000             // used to set HP once!
 252+ E556             >
 252+ E556             >//              ______________________________________________________________________
 252+ E556             >//              Dictionary part
 252+ E556             >
 252+ E556             >                org     Dict_Ptr
 252+ 6BEF             >
 252+ 6BEF 54 05       >                dw      mirror_Ptr - $E000
 252+ 6BF1             >
 252+ 6BF1             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 6BF1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 252+ 6BF4             >
 252+ 6BF4             >
 252+ 6BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 6BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 6BF4             >
 252+ 6BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 6BF4 E5 6B 77 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 254+ 6BF8 52 68                        dw      EXIT                    // ;
 255+ 6BFA
 256+ 6BFA              //  ______________________________________________________________________
 257+ 6BFA              //
 258+ 6BFA              // u<           u1 u2 -- u3
 259+ 6BFA              // unsigned less-than
 260+ 6BFA                              New_Def ULESS, "U<", is_code, is_normal
 260+ 6BFA             >
 260+ 6BFA             >Dict_Ptr        defl    $
 260+ 6BFA             >
 260+ 6BFA             >//              ______________________________________________________________________
 260+ 6BFA             >//              Heap part
 260+ 6BFA             >
 260+ 6BFA             >
 260+ 6BFA             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E556             >
 260+ E556             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E556             >Latest_Definition defl  Heap_Ptr
 260+ E556             >
 260+ E556             >                // dummy db directives used to calculate length of namec
 260+ E556 55 3C       >                db      "U<"
 260+ E558             >len_NFA         defl    $ - temp_NFA
 260+ E558             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E556             >
 260+ E556 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E557 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 260+ E559             >                org     $-1                 // alter last byte of Name just above to set
 260+ E558 BC          >                db      {b $} | END_BIT     // msb as name end
 260+ E559             >
 260+ E559 50 05       >                dw      Prev_Ptr            // Link to previous definition Name
 260+ E55B             >Prev_Ptr        defl    Heap_Ptr
 260+ E55B             >
 260+ E55B             >mirror_Ptr      defl    $
 260+ E55B             >
 260+ E55B FC 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E55D             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E55D             >
 260+ E55D             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E55D             >
 260+ E55D             >//              ______________________________________________________________________
 260+ E55D             >//              Dictionary part
 260+ E55D             >
 260+ E55D             >                org     Dict_Ptr
 260+ 6BFA             >
 260+ 6BFA 5B 05       >                dw      mirror_Ptr - $E000
 260+ 6BFC             >
 260+ 6BFC             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BFC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6BFC ~           >
 260+ 6BFC ~           >
 260+ 6BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BFC             >
 260+ 6BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BFC D9                           exx
 262+ 6BFD D1                           pop     de
 263+ 6BFE E1                           pop     hl
 264+ 6BFF A7                           and     a
 265+ 6C00 ED 52                        sbc     hl, de
 266+ 6C02 ED 62                        sbc     hl, hl
 267+ 6C04 E5                           push    hl
 268+ 6C05 D9                           exx
 269+ 6C06                              next
 269+ 6C06 DD E9       >                jp      (ix)
 270+ 6C08
 271+ 6C08              //  ______________________________________________________________________
 272+ 6C08              //
 273+ 6C08              // <           n1 n2 -- n3
 274+ 6C08              // less-than
 275+ 6C08                              New_Def LESS, "<", is_code, is_normal
 275+ 6C08             >
 275+ 6C08             >Dict_Ptr        defl    $
 275+ 6C08             >
 275+ 6C08             >//              ______________________________________________________________________
 275+ 6C08             >//              Heap part
 275+ 6C08             >
 275+ 6C08             >
 275+ 6C08             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E55D             >
 275+ E55D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E55D             >Latest_Definition defl  Heap_Ptr
 275+ E55D             >
 275+ E55D             >                // dummy db directives used to calculate length of namec
 275+ E55D 3C          >                db      "<"
 275+ E55E             >len_NFA         defl    $ - temp_NFA
 275+ E55E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E55D             >
 275+ E55D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E55E 3C          >                db      "<"               // name string in 7-bit ascii, but
 275+ E55F             >                org     $-1                 // alter last byte of Name just above to set
 275+ E55E BC          >                db      {b $} | END_BIT     // msb as name end
 275+ E55F             >
 275+ E55F 56 05       >                dw      Prev_Ptr            // Link to previous definition Name
 275+ E561             >Prev_Ptr        defl    Heap_Ptr
 275+ E561             >
 275+ E561             >mirror_Ptr      defl    $
 275+ E561             >
 275+ E561 0A 6C       >                dw      Dict_Ptr + 2        // xt
 275+ E563             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E563             >
 275+ E563             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E563             >
 275+ E563             >//              ______________________________________________________________________
 275+ E563             >//              Dictionary part
 275+ E563             >
 275+ E563             >                org     Dict_Ptr
 275+ 6C08             >
 275+ 6C08 61 05       >                dw      mirror_Ptr - $E000
 275+ 6C0A             >
 275+ 6C0A             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6C0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6C0A ~           >
 275+ 6C0A ~           >
 275+ 6C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6C0A             >
 275+ 6C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6C0A D9                           exx
 277+ 6C0B D1                           pop     de
 278+ 6C0C E1                           pop     hl
 279+ 6C0D 7C                           ld      a, h
 280+ 6C0E EE 80                        xor     $80
 281+ 6C10 67                           ld      h, a
 282+ 6C11 7A                           ld      a, d
 283+ 6C12 EE 80                        xor     $80
 284+ 6C14 57                           ld      d, a
 285+ 6C15              //              and     a
 286+ 6C15 ED 52                        sbc     hl, de
 287+ 6C17 ED 62                        sbc     hl, hl
 288+ 6C19 E5                           push    hl
 289+ 6C1A D9                           exx
 290+ 6C1B                              next
 290+ 6C1B DD E9       >                jp      (ix)
 291+ 6C1D
 292+ 6C1D              //  ______________________________________________________________________
 293+ 6C1D              //
 294+ 6C1D              // >            n1 n2 -- n3
 295+ 6C1D              // greater than
 296+ 6C1D                              Colon_Def GREATER, ">", is_normal
 296+ 6C1D             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 296+ 6C1D             >
 296+ 6C1D             >Dict_Ptr        defl    $
 296+ 6C1D             >
 296+ 6C1D             >//              ______________________________________________________________________
 296+ 6C1D             >//              Heap part
 296+ 6C1D             >
 296+ 6C1D             >
 296+ 6C1D             >                org     (Heap_Ptr & $1FFF) + $E000
 296+ E563             >
 296+ E563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ E563             >Latest_Definition defl  Heap_Ptr
 296+ E563             >
 296+ E563             >                // dummy db directives used to calculate length of namec
 296+ E563 3E          >                db      ">"
 296+ E564             >len_NFA         defl    $ - temp_NFA
 296+ E564             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ E563             >
 296+ E563 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ E564 3E          >                db      ">"               // name string in 7-bit ascii, but
 296+ E565             >                org     $-1                 // alter last byte of Name just above to set
 296+ E564 BE          >                db      {b $} | END_BIT     // msb as name end
 296+ E565             >
 296+ E565 5D 05       >                dw      Prev_Ptr            // Link to previous definition Name
 296+ E567             >Prev_Ptr        defl    Heap_Ptr
 296+ E567             >
 296+ E567             >mirror_Ptr      defl    $
 296+ E567             >
 296+ E567 1F 6C       >                dw      Dict_Ptr + 2        // xt
 296+ E569             >Heap_Ptr        defl    $ - $E000           // save current HP
 296+ E569             >
 296+ E569             >Current_HP      defl  $ - $E000             // used to set HP once!
 296+ E569             >
 296+ E569             >//              ______________________________________________________________________
 296+ E569             >//              Dictionary part
 296+ E569             >
 296+ E569             >                org     Dict_Ptr
 296+ 6C1D             >
 296+ 6C1D 67 05       >                dw      mirror_Ptr - $E000
 296+ 6C1F             >
 296+ 6C1F             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 6C1F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 6C22             >
 296+ 6C22             >
 296+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 6C22             >
 296+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 6C22 24 69 0A 6C                  dw      SWAP, LESS              // swap <
 298+ 6C26 52 68                        dw      EXIT                    // ;
 299+ 6C28              //  ______________________________________________________________________
 300+ 6C28              //
 301+ 6C28              // min          n1 n2 -- n3
 302+ 6C28              // minimum between n1 and n2
 303+ 6C28                              Colon_Def MIN, "MIN" , is_normal
 303+ 6C28             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 303+ 6C28             >
 303+ 6C28             >Dict_Ptr        defl    $
 303+ 6C28             >
 303+ 6C28             >//              ______________________________________________________________________
 303+ 6C28             >//              Heap part
 303+ 6C28             >
 303+ 6C28             >
 303+ 6C28             >                org     (Heap_Ptr & $1FFF) + $E000
 303+ E569             >
 303+ E569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ E569             >Latest_Definition defl  Heap_Ptr
 303+ E569             >
 303+ E569             >                // dummy db directives used to calculate length of namec
 303+ E569 4D 49 4E    >                db      "MIN"
 303+ E56C             >len_NFA         defl    $ - temp_NFA
 303+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ E569             >
 303+ E569 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ E56A 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 303+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 303+ E56C CE          >                db      {b $} | END_BIT     // msb as name end
 303+ E56D             >
 303+ E56D 63 05       >                dw      Prev_Ptr            // Link to previous definition Name
 303+ E56F             >Prev_Ptr        defl    Heap_Ptr
 303+ E56F             >
 303+ E56F             >mirror_Ptr      defl    $
 303+ E56F             >
 303+ E56F 2A 6C       >                dw      Dict_Ptr + 2        // xt
 303+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 303+ E571             >
 303+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 303+ E571             >
 303+ E571             >//              ______________________________________________________________________
 303+ E571             >//              Dictionary part
 303+ E571             >
 303+ E571             >                org     Dict_Ptr
 303+ 6C28             >
 303+ 6C28 6F 05       >                dw      mirror_Ptr - $E000
 303+ 6C2A             >
 303+ 6C2A             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6C2A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 6C2D             >
 303+ 6C2D             >
 303+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6C2D             >
 303+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6C2D 67 69                        dw      TWO_DUP                 // 2dup
 305+ 6C2F 1F 6C                        dw      GREATER                 // >
 306+ 6C31 F5 63                        dw      ZBRANCH
 307+ 6C33 04 00                        dw      Min_Skip - $   // if
 308+ 6C35 24 69                        dw          SWAP                //      swap
 309+ 6C37              Min_Skip:                                       // endif
 310+ 6C37 10 69                        dw      DROP                    // drop
 311+ 6C39 52 68                        dw      EXIT                    // ;
 312+ 6C3B
 313+ 6C3B              //  ______________________________________________________________________
 314+ 6C3B              //
 315+ 6C3B              // max          n1 n2 -- n3
 316+ 6C3B              // maximum between n1 and n2
 317+ 6C3B                              Colon_Def MAX, "MAX", is_normal
 317+ 6C3B             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 317+ 6C3B             >
 317+ 6C3B             >Dict_Ptr        defl    $
 317+ 6C3B             >
 317+ 6C3B             >//              ______________________________________________________________________
 317+ 6C3B             >//              Heap part
 317+ 6C3B             >
 317+ 6C3B             >
 317+ 6C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ E571             >
 317+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ E571             >Latest_Definition defl  Heap_Ptr
 317+ E571             >
 317+ E571             >                // dummy db directives used to calculate length of namec
 317+ E571 4D 41 58    >                db      "MAX"
 317+ E574             >len_NFA         defl    $ - temp_NFA
 317+ E574             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ E571             >
 317+ E571 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ E572 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 317+ E575             >                org     $-1                 // alter last byte of Name just above to set
 317+ E574 D8          >                db      {b $} | END_BIT     // msb as name end
 317+ E575             >
 317+ E575 69 05       >                dw      Prev_Ptr            // Link to previous definition Name
 317+ E577             >Prev_Ptr        defl    Heap_Ptr
 317+ E577             >
 317+ E577             >mirror_Ptr      defl    $
 317+ E577             >
 317+ E577 3D 6C       >                dw      Dict_Ptr + 2        // xt
 317+ E579             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ E579             >
 317+ E579             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ E579             >
 317+ E579             >//              ______________________________________________________________________
 317+ E579             >//              Dictionary part
 317+ E579             >
 317+ E579             >                org     Dict_Ptr
 317+ 6C3B             >
 317+ 6C3B 77 05       >                dw      mirror_Ptr - $E000
 317+ 6C3D             >
 317+ 6C3D             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 6C3D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 317+ 6C40             >
 317+ 6C40             >
 317+ 6C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 6C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 6C40             >
 317+ 6C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 6C40 67 69                        dw      TWO_DUP                 // 2dup
 319+ 6C42 0A 6C                        dw      LESS                    // <
 320+ 6C44 F5 63                        dw      ZBRANCH
 321+ 6C46 04 00                        dw      Max_Skip - $   // if
 322+ 6C48 24 69                        dw          SWAP                //      swap
 323+ 6C4A              Max_Skip:                                       // endif
 324+ 6C4A 10 69                        dw      DROP                    // drop
 325+ 6C4C 52 68                        dw      EXIT                    // ;
 326+ 6C4E
 327+ 6C4E              //  ______________________________________________________________________
 328+ 6C4E              //
 329+ 6C4E              // ?dup         n -- 0 | n n
 330+ 6C4E              // duplicate if not zero
 331+ 6C4E                              New_Def QDUP, "?DUP", is_code, is_normal
 331+ 6C4E             >
 331+ 6C4E             >Dict_Ptr        defl    $
 331+ 6C4E             >
 331+ 6C4E             >//              ______________________________________________________________________
 331+ 6C4E             >//              Heap part
 331+ 6C4E             >
 331+ 6C4E             >
 331+ 6C4E             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ E579             >
 331+ E579             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ E579             >Latest_Definition defl  Heap_Ptr
 331+ E579             >
 331+ E579             >                // dummy db directives used to calculate length of namec
 331+ E579 3F 44 55 50 >                db      "?DUP"
 331+ E57D             >len_NFA         defl    $ - temp_NFA
 331+ E57D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ E579             >
 331+ E579 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ E57A 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 331+ E57E             >                org     $-1                 // alter last byte of Name just above to set
 331+ E57D D0          >                db      {b $} | END_BIT     // msb as name end
 331+ E57E             >
 331+ E57E 71 05       >                dw      Prev_Ptr            // Link to previous definition Name
 331+ E580             >Prev_Ptr        defl    Heap_Ptr
 331+ E580             >
 331+ E580             >mirror_Ptr      defl    $
 331+ E580             >
 331+ E580 50 6C       >                dw      Dict_Ptr + 2        // xt
 331+ E582             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ E582             >
 331+ E582             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ E582             >
 331+ E582             >//              ______________________________________________________________________
 331+ E582             >//              Dictionary part
 331+ E582             >
 331+ E582             >                org     Dict_Ptr
 331+ 6C4E             >
 331+ 6C4E 80 05       >                dw      mirror_Ptr - $E000
 331+ 6C50             >
 331+ 6C50             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 6C50 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 331+ 6C50 ~           >
 331+ 6C50 ~           >
 331+ 6C50             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 6C50             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 6C50             >
 331+ 6C50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 6C50              QDup_Ptr:
 333+ 6C50 E1                           pop     hl
 334+ 6C51 7C                           ld      a, h
 335+ 6C52 B5                           or      l
 336+ 6C53 28 01                        jr      z, QDup_Skip
 337+ 6C55 E5                               push    hl
 338+ 6C56              QDup_Skip:
 339+ 6C56                              psh1
 339+ 6C56 E5          >                push    hl
 339+ 6C57 DD E9       >                jp      (ix)
 340+ 6C59
 341+ 6C59              //  ______________________________________________________________________
 342+ 6C59              //
 343+ 6C59              // -dup         n -- 0 | n n
 344+ 6C59              // duplicate if not zero
 345+ 6C59                              New_Def LDUP, "-DUP", is_code, is_normal
 345+ 6C59             >
 345+ 6C59             >Dict_Ptr        defl    $
 345+ 6C59             >
 345+ 6C59             >//              ______________________________________________________________________
 345+ 6C59             >//              Heap part
 345+ 6C59             >
 345+ 6C59             >
 345+ 6C59             >                org     (Heap_Ptr & $1FFF) + $E000
 345+ E582             >
 345+ E582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ E582             >Latest_Definition defl  Heap_Ptr
 345+ E582             >
 345+ E582             >                // dummy db directives used to calculate length of namec
 345+ E582 2D 44 55 50 >                db      "-DUP"
 345+ E586             >len_NFA         defl    $ - temp_NFA
 345+ E586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ E582             >
 345+ E582 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ E583 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 345+ E587             >                org     $-1                 // alter last byte of Name just above to set
 345+ E586 D0          >                db      {b $} | END_BIT     // msb as name end
 345+ E587             >
 345+ E587 79 05       >                dw      Prev_Ptr            // Link to previous definition Name
 345+ E589             >Prev_Ptr        defl    Heap_Ptr
 345+ E589             >
 345+ E589             >mirror_Ptr      defl    $
 345+ E589             >
 345+ E589 5B 6C       >                dw      Dict_Ptr + 2        // xt
 345+ E58B             >Heap_Ptr        defl    $ - $E000           // save current HP
 345+ E58B             >
 345+ E58B             >Current_HP      defl  $ - $E000             // used to set HP once!
 345+ E58B             >
 345+ E58B             >//              ______________________________________________________________________
 345+ E58B             >//              Dictionary part
 345+ E58B             >
 345+ E58B             >                org     Dict_Ptr
 345+ 6C59             >
 345+ 6C59 89 05       >                dw      mirror_Ptr - $E000
 345+ 6C5B             >
 345+ 6C5B             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 6C5B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 345+ 6C5B ~           >
 345+ 6C5B ~           >
 345+ 6C5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 6C5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 6C5B             >
 345+ 6C5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 6C5B C3 50 6C                     jp      QDup_Ptr
 347+ 6C5E
 348+ 6C5E              //  ______________________________________________________________________
 349+ 6C5E              //
 350+ 6C5E              // emit         c --
 351+ 6C5E                              Colon_Def EMIT, "EMIT", is_normal
 351+ 6C5E             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 351+ 6C5E             >
 351+ 6C5E             >Dict_Ptr        defl    $
 351+ 6C5E             >
 351+ 6C5E             >//              ______________________________________________________________________
 351+ 6C5E             >//              Heap part
 351+ 6C5E             >
 351+ 6C5E             >
 351+ 6C5E             >                org     (Heap_Ptr & $1FFF) + $E000
 351+ E58B             >
 351+ E58B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ E58B             >Latest_Definition defl  Heap_Ptr
 351+ E58B             >
 351+ E58B             >                // dummy db directives used to calculate length of namec
 351+ E58B 45 4D 49 54 >                db      "EMIT"
 351+ E58F             >len_NFA         defl    $ - temp_NFA
 351+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ E58B             >
 351+ E58B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ E58C 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 351+ E590             >                org     $-1                 // alter last byte of Name just above to set
 351+ E58F D4          >                db      {b $} | END_BIT     // msb as name end
 351+ E590             >
 351+ E590 82 05       >                dw      Prev_Ptr            // Link to previous definition Name
 351+ E592             >Prev_Ptr        defl    Heap_Ptr
 351+ E592             >
 351+ E592             >mirror_Ptr      defl    $
 351+ E592             >
 351+ E592 60 6C       >                dw      Dict_Ptr + 2        // xt
 351+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 351+ E594             >
 351+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 351+ E594             >
 351+ E594             >//              ______________________________________________________________________
 351+ E594             >//              Dictionary part
 351+ E594             >
 351+ E594             >                org     Dict_Ptr
 351+ 6C5E             >
 351+ 6C5E 92 05       >                dw      mirror_Ptr - $E000
 351+ 6C60             >
 351+ 6C60             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 6C60 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 351+ 6C63             >
 351+ 6C63             >
 351+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 6C63             >
 351+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 6C63 D4 65                        dw      C_EMIT                      // (?emit)
 353+ 6C65 50 6C                        dw      QDUP                        // ?dup
 354+ 6C67                                                                  // if
 355+ 6C67 F5 63                        dw      ZBRANCH
 356+ 6C69 0A 00                        dw      Emit_Skip - $
 357+ 6C6B A2 65                        dw          EMITC                   //      emitc
 358+ 6C6D 88 6A                        dw          ONE                     //      1
 359+ 6C6F 2E 6B 71 69                  dw          OUT, PLUSSTORE        //      out +!
 360+ 6C73              Emit_Skip:                                          // endif
 361+ 6C73 52 68                        dw      EXIT                        // ;
 362+ 6C75
 363+ 6C75              //  ______________________________________________________________________
 364+ 6C75              //
 365+ 6C75              // space        --
 366+ 6C75                              Colon_Def SPACE, "SPACE", is_normal
 366+ 6C75             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 366+ 6C75             >
 366+ 6C75             >Dict_Ptr        defl    $
 366+ 6C75             >
 366+ 6C75             >//              ______________________________________________________________________
 366+ 6C75             >//              Heap part
 366+ 6C75             >
 366+ 6C75             >
 366+ 6C75             >                org     (Heap_Ptr & $1FFF) + $E000
 366+ E594             >
 366+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 366+ E594             >Latest_Definition defl  Heap_Ptr
 366+ E594             >
 366+ E594             >                // dummy db directives used to calculate length of namec
 366+ E594 53 50 41 43 >                db      "SPACE"
 366+ E598 45          >
 366+ E599             >len_NFA         defl    $ - temp_NFA
 366+ E599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 366+ E594             >
 366+ E594 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 366+ E595 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 366+ E599 45          >
 366+ E59A             >                org     $-1                 // alter last byte of Name just above to set
 366+ E599 C5          >                db      {b $} | END_BIT     // msb as name end
 366+ E59A             >
 366+ E59A 8B 05       >                dw      Prev_Ptr            // Link to previous definition Name
 366+ E59C             >Prev_Ptr        defl    Heap_Ptr
 366+ E59C             >
 366+ E59C             >mirror_Ptr      defl    $
 366+ E59C             >
 366+ E59C 77 6C       >                dw      Dict_Ptr + 2        // xt
 366+ E59E             >Heap_Ptr        defl    $ - $E000           // save current HP
 366+ E59E             >
 366+ E59E             >Current_HP      defl  $ - $E000             // used to set HP once!
 366+ E59E             >
 366+ E59E             >//              ______________________________________________________________________
 366+ E59E             >//              Dictionary part
 366+ E59E             >
 366+ E59E             >                org     Dict_Ptr
 366+ 6C75             >
 366+ 6C75 9C 05       >                dw      mirror_Ptr - $E000
 366+ 6C77             >
 366+ 6C77             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 366+ 6C77 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 366+ 6C7A             >
 366+ 6C7A             >
 366+ 6C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 366+ 6C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 366+ 6C7A             >
 366+ 6C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 367+ 6C7A A4 6A 60 6C                  dw      BL, EMIT                // bl emit
 368+ 6C7E 52 68                        dw      EXIT                    // ;
 369+ 6C80
 370+ 6C80              //  ______________________________________________________________________
 371+ 6C80              //
 372+ 6C80              // traverse     a n -- a
 373+ 6C80              // A dictionary entry is structured as follows
 374+ 6C80              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 375+ 6C80              //      +1   word name, last character is toggled with $80
 376+ 6C80              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 377+ 6C80              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 378+ 6C80              // PFA: +6+n "is_code", definitions have no PFA. // +5
 379+ 6C80              //
 380+ 6C80                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 380+ 6C80             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 380+ 6C80             >
 380+ 6C80             >Dict_Ptr        defl    $
 380+ 6C80             >
 380+ 6C80             >//              ______________________________________________________________________
 380+ 6C80             >//              Heap part
 380+ 6C80             >
 380+ 6C80             >
 380+ 6C80             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ E59E             >
 380+ E59E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ E59E             >Latest_Definition defl  Heap_Ptr
 380+ E59E             >
 380+ E59E             >                // dummy db directives used to calculate length of namec
 380+ E59E 54 52 41 56 >                db      "TRAVERSE"
 380+ E5A2 45 52 53 45 >
 380+ E5A6             >len_NFA         defl    $ - temp_NFA
 380+ E5A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ E59E             >
 380+ E59E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ E59F 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 380+ E5A3 45 52 53 45 >
 380+ E5A7             >                org     $-1                 // alter last byte of Name just above to set
 380+ E5A6 C5          >                db      {b $} | END_BIT     // msb as name end
 380+ E5A7             >
 380+ E5A7 94 05       >                dw      Prev_Ptr            // Link to previous definition Name
 380+ E5A9             >Prev_Ptr        defl    Heap_Ptr
 380+ E5A9             >
 380+ E5A9             >mirror_Ptr      defl    $
 380+ E5A9             >
 380+ E5A9 82 6C       >                dw      Dict_Ptr + 2        // xt
 380+ E5AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ E5AB             >
 380+ E5AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ E5AB             >
 380+ E5AB             >//              ______________________________________________________________________
 380+ E5AB             >//              Dictionary part
 380+ E5AB             >
 380+ E5AB             >                org     Dict_Ptr
 380+ 6C80             >
 380+ 6C80 A9 05       >                dw      mirror_Ptr - $E000
 380+ 6C82             >
 380+ 6C82             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 6C82 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 6C85             >
 380+ 6C85             >
 380+ 6C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 6C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 6C85             >
 380+ 6C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 6C85 24 69                        dw      SWAP                    // swap
 382+ 6C87              Traverse_Begin:                                 // begin
 383+ 6C87 07 69 A5 68                  dw          OVER, PLUS          //      over +
 384+ 6C8B A3 63 7F 00                  dw          LIT, 127            //      127
 385+ 6C8F 07 69 9E 69                  dw          OVER, CFETCH        //      over @
 386+ 6C93 0A 6C                        dw          LESS                //      <
 387+ 6C95                                                              // until
 388+ 6C95 F5 63                        dw      ZBRANCH
 389+ 6C97 F0 FF                        dw      Traverse_Begin - $
 390+ 6C99 15 69                        dw      NIP                     //  nip
 391+ 6C9B 52 68                        dw      EXIT                    //  ;
 392+ 6C9D
 393+ 6C9D              //  ______________________________________________________________________
 394+ 6C9D              //
 395+ 6C9D              // mmu7@        -- n
 396+ 6C9D              // query current page in MMU7 8K-RAM : 0 and 223
 397+ 6C9D
 398+ 6C9D                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 398+ 6C9D             >
 398+ 6C9D             >Dict_Ptr        defl    $
 398+ 6C9D             >
 398+ 6C9D             >//              ______________________________________________________________________
 398+ 6C9D             >//              Heap part
 398+ 6C9D             >
 398+ 6C9D             >
 398+ 6C9D             >                org     (Heap_Ptr & $1FFF) + $E000
 398+ E5AB             >
 398+ E5AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ E5AB             >Latest_Definition defl  Heap_Ptr
 398+ E5AB             >
 398+ E5AB             >                // dummy db directives used to calculate length of namec
 398+ E5AB 4D 4D 55 37 >                db      "MMU7@"
 398+ E5AF 40          >
 398+ E5B0             >len_NFA         defl    $ - temp_NFA
 398+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ E5AB             >
 398+ E5AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ E5AC 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 398+ E5B0 40          >
 398+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 398+ E5B0 C0          >                db      {b $} | END_BIT     // msb as name end
 398+ E5B1             >
 398+ E5B1 9E 05       >                dw      Prev_Ptr            // Link to previous definition Name
 398+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 398+ E5B3             >
 398+ E5B3             >mirror_Ptr      defl    $
 398+ E5B3             >
 398+ E5B3 9F 6C       >                dw      Dict_Ptr + 2        // xt
 398+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 398+ E5B5             >
 398+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 398+ E5B5             >
 398+ E5B5             >//              ______________________________________________________________________
 398+ E5B5             >//              Dictionary part
 398+ E5B5             >
 398+ E5B5             >                org     Dict_Ptr
 398+ 6C9D             >
 398+ 6C9D B3 05       >                dw      mirror_Ptr - $E000
 398+ 6C9F             >
 398+ 6C9F             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 6C9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 398+ 6C9F ~           >
 398+ 6C9F ~           >
 398+ 6C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 6C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 6C9F             >
 398+ 6C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 6C9F D9                           exx
 400+ 6CA0 CD 9F 64                     call    MMU7_read
 401+ 6CA3 D9                           exx
 402+ 6CA4 6F                           ld      l, a
 403+ 6CA5 26 00                        ld      h, 0
 404+ 6CA7 E5                           push    hl
 405+ 6CA8                              next
 405+ 6CA8 DD E9       >                jp      (ix)
 406+ 6CAA
 407+ 6CAA              //  ______________________________________________________________________
 408+ 6CAA              //
 409+ 6CAA              // mmu7!        n --
 410+ 6CAA              // set MMU7 8K-RAM page to n given between 0 and 223
 411+ 6CAA              // optimized version that uses NEXTREG n,A Z80n op-code.
 412+ 6CAA
 413+ 6CAA                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 413+ 6CAA             >
 413+ 6CAA             >Dict_Ptr        defl    $
 413+ 6CAA             >
 413+ 6CAA             >//              ______________________________________________________________________
 413+ 6CAA             >//              Heap part
 413+ 6CAA             >
 413+ 6CAA             >
 413+ 6CAA             >                org     (Heap_Ptr & $1FFF) + $E000
 413+ E5B5             >
 413+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ E5B5             >Latest_Definition defl  Heap_Ptr
 413+ E5B5             >
 413+ E5B5             >                // dummy db directives used to calculate length of namec
 413+ E5B5 4D 4D 55 37 >                db      "MMU7!"
 413+ E5B9 21          >
 413+ E5BA             >len_NFA         defl    $ - temp_NFA
 413+ E5BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ E5B5             >
 413+ E5B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ E5B6 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 413+ E5BA 21          >
 413+ E5BB             >                org     $-1                 // alter last byte of Name just above to set
 413+ E5BA A1          >                db      {b $} | END_BIT     // msb as name end
 413+ E5BB             >
 413+ E5BB AB 05       >                dw      Prev_Ptr            // Link to previous definition Name
 413+ E5BD             >Prev_Ptr        defl    Heap_Ptr
 413+ E5BD             >
 413+ E5BD             >mirror_Ptr      defl    $
 413+ E5BD             >
 413+ E5BD AC 6C       >                dw      Dict_Ptr + 2        // xt
 413+ E5BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 413+ E5BF             >
 413+ E5BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 413+ E5BF             >
 413+ E5BF             >//              ______________________________________________________________________
 413+ E5BF             >//              Dictionary part
 413+ E5BF             >
 413+ E5BF             >                org     Dict_Ptr
 413+ 6CAA             >
 413+ 6CAA BD 05       >                dw      mirror_Ptr - $E000
 413+ 6CAC             >
 413+ 6CAC             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 6CAC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 413+ 6CAC ~           >
 413+ 6CAC ~           >
 413+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 6CAC             >
 413+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 6CAC E1                           pop     hl
 415+ 6CAD 7D                           ld      a, l
 416+ 6CAE ED 92 57                     nextreg 87, a
 417+ 6CB1
 418+ 6CB1                              next
 418+ 6CB1 DD E9       >                jp      (ix)
 419+ 6CB3
 420+ 6CB3              //  ______________________________________________________________________
 421+ 6CB3              //
 422+ 6CB3              // >far         ha -- a n
 423+ 6CB3              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 424+ 6CB3              // take lower bits of H and L as an offset from E000h
 425+ 6CB3              // then return address  a  between E000h-FFFFh
 426+ 6CB3              // and page number n  between 64-71 (40h-47h)
 427+ 6CB3              // For example, in hex:
 428+ 6CB3              //   0000 >FAR  gives  40.E000
 429+ 6CB3              //   1FFF >FAR  gives  40.FFFF
 430+ 6CB3              //   2000 >FAR  gives  41.E000
 431+ 6CB3              //   3FFF >FAR  gives  41.FFFF
 432+ 6CB3              //   EFFF >FAR  gives  47.EFFF
 433+ 6CB3              //   FFFF >FAR  gives  47.FFFF
 434+ 6CB3                              New_Def TO_FAR, ">FAR", is_code, is_normal
 434+ 6CB3             >
 434+ 6CB3             >Dict_Ptr        defl    $
 434+ 6CB3             >
 434+ 6CB3             >//              ______________________________________________________________________
 434+ 6CB3             >//              Heap part
 434+ 6CB3             >
 434+ 6CB3             >
 434+ 6CB3             >                org     (Heap_Ptr & $1FFF) + $E000
 434+ E5BF             >
 434+ E5BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 434+ E5BF             >Latest_Definition defl  Heap_Ptr
 434+ E5BF             >
 434+ E5BF             >                // dummy db directives used to calculate length of namec
 434+ E5BF 3E 46 41 52 >                db      ">FAR"
 434+ E5C3             >len_NFA         defl    $ - temp_NFA
 434+ E5C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 434+ E5BF             >
 434+ E5BF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 434+ E5C0 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 434+ E5C4             >                org     $-1                 // alter last byte of Name just above to set
 434+ E5C3 D2          >                db      {b $} | END_BIT     // msb as name end
 434+ E5C4             >
 434+ E5C4 B5 05       >                dw      Prev_Ptr            // Link to previous definition Name
 434+ E5C6             >Prev_Ptr        defl    Heap_Ptr
 434+ E5C6             >
 434+ E5C6             >mirror_Ptr      defl    $
 434+ E5C6             >
 434+ E5C6 B5 6C       >                dw      Dict_Ptr + 2        // xt
 434+ E5C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 434+ E5C8             >
 434+ E5C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 434+ E5C8             >
 434+ E5C8             >//              ______________________________________________________________________
 434+ E5C8             >//              Dictionary part
 434+ E5C8             >
 434+ E5C8             >                org     Dict_Ptr
 434+ 6CB3             >
 434+ 6CB3 C6 05       >                dw      mirror_Ptr - $E000
 434+ 6CB5             >
 434+ 6CB5             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 434+ 6CB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 434+ 6CB5 ~           >
 434+ 6CB5 ~           >
 434+ 6CB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 434+ 6CB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 434+ 6CB5             >
 434+ 6CB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 435+ 6CB5 E1                           pop     hl
 436+ 6CB6 CD AA 64                     call    TO_FAR_rout
 437+ 6CB9 E5                           push    hl
 438+ 6CBA 6F                           ld      l, a
 439+ 6CBB 26 00                        ld      h, 0
 440+ 6CBD E5                           push    hl
 441+ 6CBE                              next
 441+ 6CBE DD E9       >                jp      (ix)
 442+ 6CC0
 443+ 6CC0              //  ______________________________________________________________________
 444+ 6CC0              //
 445+ 6CC0              // <far         a n  -- ha
 446+ 6CC0              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 447+ 6CC0              // reverse of >FAR: encodes a FAR address compressing
 448+ 6CC0              // to bits 765 of H, lower bits of HL address offset from E000h
 449+ 6CC0                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 449+ 6CC0             >
 449+ 6CC0             >Dict_Ptr        defl    $
 449+ 6CC0             >
 449+ 6CC0             >//              ______________________________________________________________________
 449+ 6CC0             >//              Heap part
 449+ 6CC0             >
 449+ 6CC0             >
 449+ 6CC0             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ E5C8             >
 449+ E5C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ E5C8             >Latest_Definition defl  Heap_Ptr
 449+ E5C8             >
 449+ E5C8             >                // dummy db directives used to calculate length of namec
 449+ E5C8 3C 46 41 52 >                db      "<FAR"
 449+ E5CC             >len_NFA         defl    $ - temp_NFA
 449+ E5CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ E5C8             >
 449+ E5C8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ E5C9 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 449+ E5CD             >                org     $-1                 // alter last byte of Name just above to set
 449+ E5CC D2          >                db      {b $} | END_BIT     // msb as name end
 449+ E5CD             >
 449+ E5CD BF 05       >                dw      Prev_Ptr            // Link to previous definition Name
 449+ E5CF             >Prev_Ptr        defl    Heap_Ptr
 449+ E5CF             >
 449+ E5CF             >mirror_Ptr      defl    $
 449+ E5CF             >
 449+ E5CF C2 6C       >                dw      Dict_Ptr + 2        // xt
 449+ E5D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ E5D1             >
 449+ E5D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ E5D1             >
 449+ E5D1             >//              ______________________________________________________________________
 449+ E5D1             >//              Dictionary part
 449+ E5D1             >
 449+ E5D1             >                org     Dict_Ptr
 449+ 6CC0             >
 449+ 6CC0 CF 05       >                dw      mirror_Ptr - $E000
 449+ 6CC2             >
 449+ 6CC2             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 6CC2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 449+ 6CC2 ~           >
 449+ 6CC2 ~           >
 449+ 6CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 6CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 6CC2             >
 449+ 6CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 6CC2 E1                           pop     hl                  // page number in e
 451+ 6CC3 7D                           ld      a, l
 452+ 6CC4 E6 07                        and     07
 453+ 6CC6 0F                           rrca
 454+ 6CC7 0F                           rrca
 455+ 6CC8 0F                           rrca
 456+ 6CC9 08                           ex      af, af
 457+ 6CCA E1                           pop     hl                  // address in hl
 458+ 6CCB 7C                           ld      a, h
 459+ 6CCC E6 1F                        and     $1F
 460+ 6CCE 67                           ld      h, a
 461+ 6CCF 08                           ex      af, af
 462+ 6CD0 B4                           or      h
 463+ 6CD1 67                           ld      h, a
 464+ 6CD2                              psh1
 464+ 6CD2 E5          >                push    hl
 464+ 6CD3 DD E9       >                jp      (ix)
 465+ 6CD5
 466+ 6CD5              //  ______________________________________________________________________
 467+ 6CD5              //
 468+ 6CD5              // ?mmu7        a -- f
 469+ 6CD5              // query current page in MMU7 8K-RAM : 0 and 223
 470+ 6CD5                              Colon_Def QMMU7, "?MMU7", is_normal
 470+ 6CD5             >                New_Def  QMMU7, "?MMU7", Enter_Ptr, is_normal ; ok
 470+ 6CD5             >
 470+ 6CD5             >Dict_Ptr        defl    $
 470+ 6CD5             >
 470+ 6CD5             >//              ______________________________________________________________________
 470+ 6CD5             >//              Heap part
 470+ 6CD5             >
 470+ 6CD5             >
 470+ 6CD5             >                org     (Heap_Ptr & $1FFF) + $E000
 470+ E5D1             >
 470+ E5D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 470+ E5D1             >Latest_Definition defl  Heap_Ptr
 470+ E5D1             >
 470+ E5D1             >                // dummy db directives used to calculate length of namec
 470+ E5D1 3F 4D 4D 55 >                db      "?MMU7"
 470+ E5D5 37          >
 470+ E5D6             >len_NFA         defl    $ - temp_NFA
 470+ E5D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 470+ E5D1             >
 470+ E5D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 470+ E5D2 3F 4D 4D 55 >                db      "?MMU7"               // name string in 7-bit ascii, but
 470+ E5D6 37          >
 470+ E5D7             >                org     $-1                 // alter last byte of Name just above to set
 470+ E5D6 B7          >                db      {b $} | END_BIT     // msb as name end
 470+ E5D7             >
 470+ E5D7 C8 05       >                dw      Prev_Ptr            // Link to previous definition Name
 470+ E5D9             >Prev_Ptr        defl    Heap_Ptr
 470+ E5D9             >
 470+ E5D9             >mirror_Ptr      defl    $
 470+ E5D9             >
 470+ E5D9 D7 6C       >                dw      Dict_Ptr + 2        // xt
 470+ E5DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 470+ E5DB             >
 470+ E5DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 470+ E5DB             >
 470+ E5DB             >//              ______________________________________________________________________
 470+ E5DB             >//              Dictionary part
 470+ E5DB             >
 470+ E5DB             >                org     Dict_Ptr
 470+ 6CD5             >
 470+ 6CD5 D9 05       >                dw      mirror_Ptr - $E000
 470+ 6CD7             >
 470+ 6CD7             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 470+ 6CD7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 470+ 6CDA             >
 470+ 6CDA             >
 470+ 6CDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 470+ 6CDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 470+ 6CDA             >
 470+ 6CDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 471+ 6CDA 2B 69                        dw      DUP
 472+ 6CDC A3 63 00 E0                  dw      LIT, $E000
 473+ 6CE0 FC 6B                        dw      ULESS
 474+ 6CE2 85 68                        dw      NOT_OP
 475+ 6CE4 52 68                        dw      EXIT
 476+ 6CE6
 477+ 6CE6              //  ______________________________________________________________________
 478+ 6CE6              //
 479+ 6CE6              // far          hp -- ha
 480+ 6CE6              // query current page in MMU7 8K-RAM : 0 and 223
 481+ 6CE6                              Colon_Def FAR, "FAR", is_normal
 481+ 6CE6             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 481+ 6CE6             >
 481+ 6CE6             >Dict_Ptr        defl    $
 481+ 6CE6             >
 481+ 6CE6             >//              ______________________________________________________________________
 481+ 6CE6             >//              Heap part
 481+ 6CE6             >
 481+ 6CE6             >
 481+ 6CE6             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ E5DB             >
 481+ E5DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ E5DB             >Latest_Definition defl  Heap_Ptr
 481+ E5DB             >
 481+ E5DB             >                // dummy db directives used to calculate length of namec
 481+ E5DB 46 41 52    >                db      "FAR"
 481+ E5DE             >len_NFA         defl    $ - temp_NFA
 481+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ E5DB             >
 481+ E5DB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ E5DC 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 481+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 481+ E5DE D2          >                db      {b $} | END_BIT     // msb as name end
 481+ E5DF             >
 481+ E5DF D1 05       >                dw      Prev_Ptr            // Link to previous definition Name
 481+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 481+ E5E1             >
 481+ E5E1             >mirror_Ptr      defl    $
 481+ E5E1             >
 481+ E5E1 E8 6C       >                dw      Dict_Ptr + 2        // xt
 481+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ E5E3             >
 481+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ E5E3             >
 481+ E5E3             >//              ______________________________________________________________________
 481+ E5E3             >//              Dictionary part
 481+ E5E3             >
 481+ E5E3             >                org     Dict_Ptr
 481+ 6CE6             >
 481+ 6CE6 E1 05       >                dw      mirror_Ptr - $E000
 481+ 6CE8             >
 481+ 6CE8             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 6CE8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 6CEB             >
 481+ 6CEB             >
 481+ 6CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 6CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 6CEB             >
 481+ 6CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 6CEB B5 6C                        dw      TO_FAR
 483+ 6CED AC 6C                        dw      MMU7_STORE
 484+ 6CEF 52 68                        dw      EXIT
 485+ 6CF1
 486+ 6CF1              //  ______________________________________________________________________
 487+ 6CF1              //
 488+ 6CF1              // ?heapp       n -- n f
 489+ 6CF1              // query current page in MMU7 8K-RAM : 0 and 223
 490+ 6CF1                              Colon_Def QHEAPP, "?HEAPP", is_normal
 490+ 6CF1             >                New_Def  QHEAPP, "?HEAPP", Enter_Ptr, is_normal ; ok
 490+ 6CF1             >
 490+ 6CF1             >Dict_Ptr        defl    $
 490+ 6CF1             >
 490+ 6CF1             >//              ______________________________________________________________________
 490+ 6CF1             >//              Heap part
 490+ 6CF1             >
 490+ 6CF1             >
 490+ 6CF1             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E5E3             >
 490+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E5E3             >Latest_Definition defl  Heap_Ptr
 490+ E5E3             >
 490+ E5E3             >                // dummy db directives used to calculate length of namec
 490+ E5E3 3F 48 45 41 >                db      "?HEAPP"
 490+ E5E7 50 50       >
 490+ E5E9             >len_NFA         defl    $ - temp_NFA
 490+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E5E3             >
 490+ E5E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E5E4 3F 48 45 41 >                db      "?HEAPP"               // name string in 7-bit ascii, but
 490+ E5E8 50 50       >
 490+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 490+ E5E9 D0          >                db      {b $} | END_BIT     // msb as name end
 490+ E5EA             >
 490+ E5EA DB 05       >                dw      Prev_Ptr            // Link to previous definition Name
 490+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 490+ E5EC             >
 490+ E5EC             >mirror_Ptr      defl    $
 490+ E5EC             >
 490+ E5EC F3 6C       >                dw      Dict_Ptr + 2        // xt
 490+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E5EE             >
 490+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E5EE             >
 490+ E5EE             >//              ______________________________________________________________________
 490+ E5EE             >//              Dictionary part
 490+ E5EE             >
 490+ E5EE             >                org     Dict_Ptr
 490+ 6CF1             >
 490+ 6CF1 EC 05       >                dw      mirror_Ptr - $E000
 490+ 6CF3             >
 490+ 6CF3             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 6CF3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 6CF6             >
 490+ 6CF6             >
 490+ 6CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 6CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 6CF6             >
 490+ 6CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 6CF6 2B 69                        dw      DUP
 492+ 6CF8 F5 63                        dw      ZBRANCH
 493+ 6CFA 08 00                        dw      QHeap_Skip - $
 494+ 6CFC A3 63 00 60                  dw          LIT, $6000
 495+ 6D00 FC 6B                        dw          ULESS
 496+ 6D02              QHeap_Skip:                                          // endif
 497+ 6D02 52 68                        dw      EXIT                        // ;
 498+ 6D04
 499+ 6D04              //  ______________________________________________________________________
 500+ 6D04              //
 501+ 6D04              // ?>heap       n1 -- n2
 502+ 6D04              // query current page in MMU7 8K-RAM : 0 and 223
 503+ 6D04                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 503+ 6D04             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 503+ 6D04             >
 503+ 6D04             >Dict_Ptr        defl    $
 503+ 6D04             >
 503+ 6D04             >//              ______________________________________________________________________
 503+ 6D04             >//              Heap part
 503+ 6D04             >
 503+ 6D04             >
 503+ 6D04             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E5EE             >
 503+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E5EE             >Latest_Definition defl  Heap_Ptr
 503+ E5EE             >
 503+ E5EE             >                // dummy db directives used to calculate length of namec
 503+ E5EE 3F 3E 48 45 >                db      "?>HEAP"
 503+ E5F2 41 50       >
 503+ E5F4             >len_NFA         defl    $ - temp_NFA
 503+ E5F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E5EE             >
 503+ E5EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E5EF 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 503+ E5F3 41 50       >
 503+ E5F5             >                org     $-1                 // alter last byte of Name just above to set
 503+ E5F4 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ E5F5             >
 503+ E5F5 E3 05       >                dw      Prev_Ptr            // Link to previous definition Name
 503+ E5F7             >Prev_Ptr        defl    Heap_Ptr
 503+ E5F7             >
 503+ E5F7             >mirror_Ptr      defl    $
 503+ E5F7             >
 503+ E5F7 06 6D       >                dw      Dict_Ptr + 2        // xt
 503+ E5F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E5F9             >
 503+ E5F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E5F9             >
 503+ E5F9             >//              ______________________________________________________________________
 503+ E5F9             >//              Dictionary part
 503+ E5F9             >
 503+ E5F9             >                org     Dict_Ptr
 503+ 6D04             >
 503+ 6D04 F7 05       >                dw      mirror_Ptr - $E000
 503+ 6D06             >
 503+ 6D06             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6D06 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6D09             >
 503+ 6D09             >
 503+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6D09             >
 503+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6D09 2B 69                        dw      DUP
 505+ 6D0B F3 6C                        dw      QHEAPP
 506+ 6D0D F5 63                        dw      ZBRANCH
 507+ 6D0F 04 00                        dw      Q2Heap_Skip - $
 508+ 6D11 E8 6C                        dw          FAR
 509+ 6D13              Q2Heap_Skip:                                          // endif
 510+ 6D13 52 68                        dw      EXIT                        // ;
 511+ 6D15
 512+ 6D15              //  ______________________________________________________________________
 513+ 6D15              //
 514+ 6D15              // hp_fetch     -- a
 515+ 6D15                              Colon_Def HP_FETCH, "HP@", is_normal
 515+ 6D15             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 515+ 6D15             >
 515+ 6D15             >Dict_Ptr        defl    $
 515+ 6D15             >
 515+ 6D15             >//              ______________________________________________________________________
 515+ 6D15             >//              Heap part
 515+ 6D15             >
 515+ 6D15             >
 515+ 6D15             >                org     (Heap_Ptr & $1FFF) + $E000
 515+ E5F9             >
 515+ E5F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ E5F9             >Latest_Definition defl  Heap_Ptr
 515+ E5F9             >
 515+ E5F9             >                // dummy db directives used to calculate length of namec
 515+ E5F9 48 50 40    >                db      "HP@"
 515+ E5FC             >len_NFA         defl    $ - temp_NFA
 515+ E5FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ E5F9             >
 515+ E5F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ E5FA 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 515+ E5FD             >                org     $-1                 // alter last byte of Name just above to set
 515+ E5FC C0          >                db      {b $} | END_BIT     // msb as name end
 515+ E5FD             >
 515+ E5FD EE 05       >                dw      Prev_Ptr            // Link to previous definition Name
 515+ E5FF             >Prev_Ptr        defl    Heap_Ptr
 515+ E5FF             >
 515+ E5FF             >mirror_Ptr      defl    $
 515+ E5FF             >
 515+ E5FF 17 6D       >                dw      Dict_Ptr + 2        // xt
 515+ E601             >Heap_Ptr        defl    $ - $E000           // save current HP
 515+ E601             >
 515+ E601             >Current_HP      defl  $ - $E000             // used to set HP once!
 515+ E601             >
 515+ E601             >//              ______________________________________________________________________
 515+ E601             >//              Dictionary part
 515+ E601             >
 515+ E601             >                org     Dict_Ptr
 515+ 6D15             >
 515+ 6D15 FF 05       >                dw      mirror_Ptr - $E000
 515+ 6D17             >
 515+ 6D17             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 6D17 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 6D1A             >
 515+ 6D1A             >
 515+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 6D1A             >
 515+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 6D1A 16 6B 89 69                  dw      HP, FETCH               // hp @
 517+ 6D1E 52 68                        dw      EXIT                    // ;
 518+ 6D20
 519+ 6D20              //  ______________________________________________________________________
 520+ 6D20              //
 521+ 6D20              // page-watermark   -- n
 522+ 6D20              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 523+ 6D20                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 523+ 6D20             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 523+ 6D20             >
 523+ 6D20             >Dict_Ptr        defl    $
 523+ 6D20             >
 523+ 6D20             >//              ______________________________________________________________________
 523+ 6D20             >//              Heap part
 523+ 6D20             >
 523+ 6D20             >
 523+ 6D20             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E601             >
 523+ E601             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E601             >Latest_Definition defl  Heap_Ptr
 523+ E601             >
 523+ E601             >                // dummy db directives used to calculate length of namec
 523+ E601 50 41 47 45 >                db      "PAGE-WATERMARK"
 523+ E605 2D 57 41 54 >
 523+ E609 45 52 4D 41 >
 523+ E60D 52 4B       >
 523+ E60F             >len_NFA         defl    $ - temp_NFA
 523+ E60F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E601             >
 523+ E601 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E602 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 523+ E606 2D 57 41 54 >
 523+ E60A 45 52 4D 41 >
 523+ E60E 52 4B       >
 523+ E610             >                org     $-1                 // alter last byte of Name just above to set
 523+ E60F CB          >                db      {b $} | END_BIT     // msb as name end
 523+ E610             >
 523+ E610 F9 05       >                dw      Prev_Ptr            // Link to previous definition Name
 523+ E612             >Prev_Ptr        defl    Heap_Ptr
 523+ E612             >
 523+ E612             >mirror_Ptr      defl    $
 523+ E612             >
 523+ E612 22 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E614             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E614             >
 523+ E614             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E614             >
 523+ E614             >//              ______________________________________________________________________
 523+ E614             >//              Dictionary part
 523+ E614             >
 523+ E614             >                org     Dict_Ptr
 523+ 6D20             >
 523+ 6D20 12 06       >                dw      mirror_Ptr - $E000
 523+ 6D22             >
 523+ 6D22             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D22 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D25             >
 523+ 6D25             >
 523+ 6D25             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D25             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D25             >
 523+ 6D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 6D25 80 1F       >                dw      $1F80
 524+ 6D27
 525+ 6D27              //  ______________________________________________________________________
 526+ 6D27              //
 527+ 6D27              // skip-hp-page ha -- a
 528+ 6D27                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 528+ 6D27             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 528+ 6D27             >
 528+ 6D27             >Dict_Ptr        defl    $
 528+ 6D27             >
 528+ 6D27             >//              ______________________________________________________________________
 528+ 6D27             >//              Heap part
 528+ 6D27             >
 528+ 6D27             >
 528+ 6D27             >                org     (Heap_Ptr & $1FFF) + $E000
 528+ E614             >
 528+ E614             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ E614             >Latest_Definition defl  Heap_Ptr
 528+ E614             >
 528+ E614             >                // dummy db directives used to calculate length of namec
 528+ E614 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 528+ E618 2D 48 50 2D >
 528+ E61C 50 41 47 45 >
 528+ E620             >len_NFA         defl    $ - temp_NFA
 528+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ E614             >
 528+ E614 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ E615 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 528+ E619 2D 48 50 2D >
 528+ E61D 50 41 47 45 >
 528+ E621             >                org     $-1                 // alter last byte of Name just above to set
 528+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 528+ E621             >
 528+ E621 01 06       >                dw      Prev_Ptr            // Link to previous definition Name
 528+ E623             >Prev_Ptr        defl    Heap_Ptr
 528+ E623             >
 528+ E623             >mirror_Ptr      defl    $
 528+ E623             >
 528+ E623 29 6D       >                dw      Dict_Ptr + 2        // xt
 528+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 528+ E625             >
 528+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 528+ E625             >
 528+ E625             >//              ______________________________________________________________________
 528+ E625             >//              Dictionary part
 528+ E625             >
 528+ E625             >                org     Dict_Ptr
 528+ 6D27             >
 528+ 6D27 23 06       >                dw      mirror_Ptr - $E000
 528+ 6D29             >
 528+ 6D29             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 6D29 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 6D2C             >
 528+ 6D2C             >
 528+ 6D2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 6D2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 6D2C             >
 528+ 6D2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 6D2C 17 6D                        dw      HP_FETCH                // hp@
 530+ 6D2E A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 530+ 6D32 0C 68
 531+ 6D34 A5 68                        dw      PLUS
 532+ 6D36 22 6D                        dw      PAGE_WATERMARK
 533+ 6D38 1F 6C                        dw      GREATER
 534+ 6D3A F5 63                        dw      ZBRANCH
 535+ 6D3C 12 00                        dw      Skip_Skip - $   // if
 536+ 6D3E 17 6D                        dw      HP_FETCH
 537+ 6D40 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 537+ 6D44 1B 68
 538+ 6D46 BE 68 CC 68                  dw      ONE_PLUS, TWO_PLUS
 539+ 6D4A 16 6B 93 69                  dw      HP, STORE
 540+ 6D4E              Skip_Skip:
 541+ 6D4E 52 68                        dw      EXIT                    // ;
 542+ 6D50              //  ______________________________________________________________________
 543+ 6D50              //
 544+ 6D50              // latest       -- nfa
 545+ 6D50                              Colon_Def LATEST, "LATEST", is_normal
 545+ 6D50             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 545+ 6D50             >
 545+ 6D50             >Dict_Ptr        defl    $
 545+ 6D50             >
 545+ 6D50             >//              ______________________________________________________________________
 545+ 6D50             >//              Heap part
 545+ 6D50             >
 545+ 6D50             >
 545+ 6D50             >                org     (Heap_Ptr & $1FFF) + $E000
 545+ E625             >
 545+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ E625             >Latest_Definition defl  Heap_Ptr
 545+ E625             >
 545+ E625             >                // dummy db directives used to calculate length of namec
 545+ E625 4C 41 54 45 >                db      "LATEST"
 545+ E629 53 54       >
 545+ E62B             >len_NFA         defl    $ - temp_NFA
 545+ E62B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ E625             >
 545+ E625 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ E626 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 545+ E62A 53 54       >
 545+ E62C             >                org     $-1                 // alter last byte of Name just above to set
 545+ E62B D4          >                db      {b $} | END_BIT     // msb as name end
 545+ E62C             >
 545+ E62C 14 06       >                dw      Prev_Ptr            // Link to previous definition Name
 545+ E62E             >Prev_Ptr        defl    Heap_Ptr
 545+ E62E             >
 545+ E62E             >mirror_Ptr      defl    $
 545+ E62E             >
 545+ E62E 52 6D       >                dw      Dict_Ptr + 2        // xt
 545+ E630             >Heap_Ptr        defl    $ - $E000           // save current HP
 545+ E630             >
 545+ E630             >Current_HP      defl  $ - $E000             // used to set HP once!
 545+ E630             >
 545+ E630             >//              ______________________________________________________________________
 545+ E630             >//              Dictionary part
 545+ E630             >
 545+ E630             >                org     Dict_Ptr
 545+ 6D50             >
 545+ 6D50 2E 06       >                dw      mirror_Ptr - $E000
 545+ 6D52             >
 545+ 6D52             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 6D52 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 6D55             >
 545+ 6D55             >
 545+ 6D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 6D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 6D55             >
 545+ 6D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 6D55 46 6B                        dw      CURRENT                 // current
 547+ 6D57 89 69 89 69                  dw      FETCH, FETCH            // @ @
 548+ 6D5B E8 6C                        dw      FAR // Q TO HEAP
 549+ 6D5D 52 68                        dw      EXIT                    // ;
 550+ 6D5F
 551+ 6D5F              //  ______________________________________________________________________
 552+ 6D5F              //
 553+ 6D5F              // >body        cfa -- pfa
 554+ 6D5F                              Colon_Def TO_BODY, ">BODY", is_normal
 554+ 6D5F             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 554+ 6D5F             >
 554+ 6D5F             >Dict_Ptr        defl    $
 554+ 6D5F             >
 554+ 6D5F             >//              ______________________________________________________________________
 554+ 6D5F             >//              Heap part
 554+ 6D5F             >
 554+ 6D5F             >
 554+ 6D5F             >                org     (Heap_Ptr & $1FFF) + $E000
 554+ E630             >
 554+ E630             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ E630             >Latest_Definition defl  Heap_Ptr
 554+ E630             >
 554+ E630             >                // dummy db directives used to calculate length of namec
 554+ E630 3E 42 4F 44 >                db      ">BODY"
 554+ E634 59          >
 554+ E635             >len_NFA         defl    $ - temp_NFA
 554+ E635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ E630             >
 554+ E630 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ E631 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 554+ E635 59          >
 554+ E636             >                org     $-1                 // alter last byte of Name just above to set
 554+ E635 D9          >                db      {b $} | END_BIT     // msb as name end
 554+ E636             >
 554+ E636 25 06       >                dw      Prev_Ptr            // Link to previous definition Name
 554+ E638             >Prev_Ptr        defl    Heap_Ptr
 554+ E638             >
 554+ E638             >mirror_Ptr      defl    $
 554+ E638             >
 554+ E638 61 6D       >                dw      Dict_Ptr + 2        // xt
 554+ E63A             >Heap_Ptr        defl    $ - $E000           // save current HP
 554+ E63A             >
 554+ E63A             >Current_HP      defl  $ - $E000             // used to set HP once!
 554+ E63A             >
 554+ E63A             >//              ______________________________________________________________________
 554+ E63A             >//              Dictionary part
 554+ E63A             >
 554+ E63A             >                org     Dict_Ptr
 554+ 6D5F             >
 554+ 6D5F 38 06       >                dw      mirror_Ptr - $E000
 554+ 6D61             >
 554+ 6D61             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 6D61 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 6D64             >
 554+ 6D64             >
 554+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 6D64             >
 554+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 6D64 96 6A A5 68                  dw      THREE, PLUS             // cell+ --> 3 +
 556+ 6D68 52 68                        dw      EXIT                    // ;
 557+ 6D6A
 558+ 6D6A              //  ______________________________________________________________________
 559+ 6D6A              //
 560+ 6D6A              // <name        cfa -- nfa
 561+ 6D6A                              Colon_Def TO_NAME, "<NAME", is_normal
 561+ 6D6A             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 561+ 6D6A             >
 561+ 6D6A             >Dict_Ptr        defl    $
 561+ 6D6A             >
 561+ 6D6A             >//              ______________________________________________________________________
 561+ 6D6A             >//              Heap part
 561+ 6D6A             >
 561+ 6D6A             >
 561+ 6D6A             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ E63A             >
 561+ E63A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ E63A             >Latest_Definition defl  Heap_Ptr
 561+ E63A             >
 561+ E63A             >                // dummy db directives used to calculate length of namec
 561+ E63A 3C 4E 41 4D >                db      "<NAME"
 561+ E63E 45          >
 561+ E63F             >len_NFA         defl    $ - temp_NFA
 561+ E63F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ E63A             >
 561+ E63A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ E63B 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 561+ E63F 45          >
 561+ E640             >                org     $-1                 // alter last byte of Name just above to set
 561+ E63F C5          >                db      {b $} | END_BIT     // msb as name end
 561+ E640             >
 561+ E640 30 06       >                dw      Prev_Ptr            // Link to previous definition Name
 561+ E642             >Prev_Ptr        defl    Heap_Ptr
 561+ E642             >
 561+ E642             >mirror_Ptr      defl    $
 561+ E642             >
 561+ E642 6C 6D       >                dw      Dict_Ptr + 2        // xt
 561+ E644             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ E644             >
 561+ E644             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ E644             >
 561+ E644             >//              ______________________________________________________________________
 561+ E644             >//              Dictionary part
 561+ E644             >
 561+ E644             >                org     Dict_Ptr
 561+ 6D6A             >
 561+ 6D6A 42 06       >                dw      mirror_Ptr - $E000
 561+ 6D6C             >
 561+ 6D6C             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 6D6C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 6D6F             >
 561+ 6D6F             >
 561+ 6D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 6D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 6D6F             >
 561+ 6D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 6D6F D9 68                        dw      CELL_MINUS              // cell-
 563+ 6D71 2B 69 89 69                  dw      DUP, FETCH
 564+ 6D75 F3 6C                        dw      QHEAPP
 565+ 6D77 F5 63                        dw      ZBRANCH
 566+ 6D79 08 00                        dw      ToName_Skip - $
 567+ 6D7B 89 69 E8 6C                  dw          FETCH, FAR
 568+ 6D7F D9 68                        dw          CELL_MINUS
 569+ 6D81              ToName_Skip:                                    // endif
 570+ 6D81
 571+ 6D81 C5 68                        dw      ONE_SUBTRACT            // 1-
 572+ 6D83 9D 6A                        dw      NEG_ONE                 // -1
 573+ 6D85 82 6C                        dw      TRAVERSE                // traverse
 574+ 6D87 52 68                        dw      EXIT                    // ;
 575+ 6D89
 576+ 6D89              //  ______________________________________________________________________
 577+ 6D89              //
 578+ 6D89              // cfa          pfa -- cfa
 579+ 6D89                              Colon_Def CFA, "CFA", is_normal
 579+ 6D89             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 579+ 6D89             >
 579+ 6D89             >Dict_Ptr        defl    $
 579+ 6D89             >
 579+ 6D89             >//              ______________________________________________________________________
 579+ 6D89             >//              Heap part
 579+ 6D89             >
 579+ 6D89             >
 579+ 6D89             >                org     (Heap_Ptr & $1FFF) + $E000
 579+ E644             >
 579+ E644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ E644             >Latest_Definition defl  Heap_Ptr
 579+ E644             >
 579+ E644             >                // dummy db directives used to calculate length of namec
 579+ E644 43 46 41    >                db      "CFA"
 579+ E647             >len_NFA         defl    $ - temp_NFA
 579+ E647             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ E644             >
 579+ E644 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ E645 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 579+ E648             >                org     $-1                 // alter last byte of Name just above to set
 579+ E647 C1          >                db      {b $} | END_BIT     // msb as name end
 579+ E648             >
 579+ E648 3A 06       >                dw      Prev_Ptr            // Link to previous definition Name
 579+ E64A             >Prev_Ptr        defl    Heap_Ptr
 579+ E64A             >
 579+ E64A             >mirror_Ptr      defl    $
 579+ E64A             >
 579+ E64A 8B 6D       >                dw      Dict_Ptr + 2        // xt
 579+ E64C             >Heap_Ptr        defl    $ - $E000           // save current HP
 579+ E64C             >
 579+ E64C             >Current_HP      defl  $ - $E000             // used to set HP once!
 579+ E64C             >
 579+ E64C             >//              ______________________________________________________________________
 579+ E64C             >//              Dictionary part
 579+ E64C             >
 579+ E64C             >                org     Dict_Ptr
 579+ 6D89             >
 579+ 6D89 4A 06       >                dw      mirror_Ptr - $E000
 579+ 6D8B             >
 579+ 6D8B             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 6D8B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 6D8E             >
 579+ 6D8E             >
 579+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 6D8E             >
 579+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 6D8E 96 6A E5 6B                  dw      THREE, SUBTRACT         // 3 -
 581+ 6D92 52 68                        dw      EXIT                    // ;
 582+ 6D94
 583+ 6D94              //  ______________________________________________________________________
 584+ 6D94              //
 585+ 6D94              // nfa          pfa -- nfa
 586+ 6D94                              Colon_Def NFA, "NFA", is_normal
 586+ 6D94             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 586+ 6D94             >
 586+ 6D94             >Dict_Ptr        defl    $
 586+ 6D94             >
 586+ 6D94             >//              ______________________________________________________________________
 586+ 6D94             >//              Heap part
 586+ 6D94             >
 586+ 6D94             >
 586+ 6D94             >                org     (Heap_Ptr & $1FFF) + $E000
 586+ E64C             >
 586+ E64C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ E64C             >Latest_Definition defl  Heap_Ptr
 586+ E64C             >
 586+ E64C             >                // dummy db directives used to calculate length of namec
 586+ E64C 4E 46 41    >                db      "NFA"
 586+ E64F             >len_NFA         defl    $ - temp_NFA
 586+ E64F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ E64C             >
 586+ E64C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ E64D 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 586+ E650             >                org     $-1                 // alter last byte of Name just above to set
 586+ E64F C1          >                db      {b $} | END_BIT     // msb as name end
 586+ E650             >
 586+ E650 44 06       >                dw      Prev_Ptr            // Link to previous definition Name
 586+ E652             >Prev_Ptr        defl    Heap_Ptr
 586+ E652             >
 586+ E652             >mirror_Ptr      defl    $
 586+ E652             >
 586+ E652 96 6D       >                dw      Dict_Ptr + 2        // xt
 586+ E654             >Heap_Ptr        defl    $ - $E000           // save current HP
 586+ E654             >
 586+ E654             >Current_HP      defl  $ - $E000             // used to set HP once!
 586+ E654             >
 586+ E654             >//              ______________________________________________________________________
 586+ E654             >//              Dictionary part
 586+ E654             >
 586+ E654             >                org     Dict_Ptr
 586+ 6D94             >
 586+ 6D94 52 06       >                dw      mirror_Ptr - $E000
 586+ 6D96             >
 586+ 6D96             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 6D96 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 6D99             >
 586+ 6D99             >
 586+ 6D99             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 6D99             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 6D99             >
 586+ 6D99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 6D99 8B 6D                        dw      CFA                     // cfa
 588+ 6D9B 6C 6D                        dw      TO_NAME                 // traverse
 589+ 6D9D 52 68                        dw      EXIT                    // ;
 590+ 6D9F
 591+ 6D9F              //  ______________________________________________________________________
 592+ 6D9F              //
 593+ 6D9F              // lfa          pfa -- lfa
 594+ 6D9F                              Colon_Def LFA, "LFA", is_normal
 594+ 6D9F             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 594+ 6D9F             >
 594+ 6D9F             >Dict_Ptr        defl    $
 594+ 6D9F             >
 594+ 6D9F             >//              ______________________________________________________________________
 594+ 6D9F             >//              Heap part
 594+ 6D9F             >
 594+ 6D9F             >
 594+ 6D9F             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E654             >
 594+ E654             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E654             >Latest_Definition defl  Heap_Ptr
 594+ E654             >
 594+ E654             >                // dummy db directives used to calculate length of namec
 594+ E654 4C 46 41    >                db      "LFA"
 594+ E657             >len_NFA         defl    $ - temp_NFA
 594+ E657             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E654             >
 594+ E654 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E655 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 594+ E658             >                org     $-1                 // alter last byte of Name just above to set
 594+ E657 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E658             >
 594+ E658 4C 06       >                dw      Prev_Ptr            // Link to previous definition Name
 594+ E65A             >Prev_Ptr        defl    Heap_Ptr
 594+ E65A             >
 594+ E65A             >mirror_Ptr      defl    $
 594+ E65A             >
 594+ E65A A1 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E65C             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E65C             >
 594+ E65C             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E65C             >
 594+ E65C             >//              ______________________________________________________________________
 594+ E65C             >//              Dictionary part
 594+ E65C             >
 594+ E65C             >                org     Dict_Ptr
 594+ 6D9F             >
 594+ 6D9F 5A 06       >                dw      mirror_Ptr - $E000
 594+ 6DA1             >
 594+ 6DA1             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DA4             >
 594+ 6DA4             >
 594+ 6DA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DA4             >
 594+ 6DA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DA4 96 6D                        dw      NFA                     // nfa
 596+ 6DA6 88 6A                        dw      ONE                     // 1
 597+ 6DA8 82 6C                        dw      TRAVERSE                // traverse
 598+ 6DAA BE 68                        dw      ONE_PLUS                // 1+
 599+ 6DAC 52 68                        dw      EXIT                    // ;
 600+ 6DAE
 601+ 6DAE              //  ______________________________________________________________________
 602+ 6DAE              //
 603+ 6DAE              // pfa          nfa -- pfa
 604+ 6DAE                              Colon_Def PFA, "PFA", is_normal
 604+ 6DAE             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 604+ 6DAE             >
 604+ 6DAE             >Dict_Ptr        defl    $
 604+ 6DAE             >
 604+ 6DAE             >//              ______________________________________________________________________
 604+ 6DAE             >//              Heap part
 604+ 6DAE             >
 604+ 6DAE             >
 604+ 6DAE             >                org     (Heap_Ptr & $1FFF) + $E000
 604+ E65C             >
 604+ E65C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ E65C             >Latest_Definition defl  Heap_Ptr
 604+ E65C             >
 604+ E65C             >                // dummy db directives used to calculate length of namec
 604+ E65C 50 46 41    >                db      "PFA"
 604+ E65F             >len_NFA         defl    $ - temp_NFA
 604+ E65F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ E65C             >
 604+ E65C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ E65D 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 604+ E660             >                org     $-1                 // alter last byte of Name just above to set
 604+ E65F C1          >                db      {b $} | END_BIT     // msb as name end
 604+ E660             >
 604+ E660 54 06       >                dw      Prev_Ptr            // Link to previous definition Name
 604+ E662             >Prev_Ptr        defl    Heap_Ptr
 604+ E662             >
 604+ E662             >mirror_Ptr      defl    $
 604+ E662             >
 604+ E662 B0 6D       >                dw      Dict_Ptr + 2        // xt
 604+ E664             >Heap_Ptr        defl    $ - $E000           // save current HP
 604+ E664             >
 604+ E664             >Current_HP      defl  $ - $E000             // used to set HP once!
 604+ E664             >
 604+ E664             >//              ______________________________________________________________________
 604+ E664             >//              Dictionary part
 604+ E664             >
 604+ E664             >                org     Dict_Ptr
 604+ 6DAE             >
 604+ 6DAE 62 06       >                dw      mirror_Ptr - $E000
 604+ 6DB0             >
 604+ 6DB0             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 6DB0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 6DB3             >
 604+ 6DB3             >
 604+ 6DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 6DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 6DB3             >
 604+ 6DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 6DB3 06 6D                        dw      QTOHEAP
 606+ 6DB5 88 6A                        dw      ONE                     // 1
 607+ 6DB7 82 6C                        dw      TRAVERSE                // traverse
 608+ 6DB9 BE 68                        dw      ONE_PLUS                // 1+
 609+ 6DBB D4 68                        dw      CELL_PLUS               // cell+
 610+ 6DBD D7 6C                        dw      QMMU7
 611+ 6DBF F5 63                        dw      ZBRANCH
 612+ 6DC1 0E 00                        dw      PFA_Skip - $
 613+ 6DC3 9F 6C                        dw          MMU7_FETCH
 614+ 6DC5 88 6A E5 6B                  dw          ONE, SUBTRACT
 615+ 6DC9 F5 63                        dw          ZBRANCH
 616+ 6DCB 04 00                        dw          PFA_Skip - $
 617+ 6DCD 89 69                        dw              FETCH
 618+ 6DCF              PFA_Skip:                                    // endif
 619+ 6DCF 61 6D                        dw      TO_BODY                 // >body
 620+ 6DD1 52 68                        dw      EXIT                    // ;
 621+ 6DD3
 622+ 6DD3              //  ______________________________________________________________________
 623+ 6DD3              //
 624+ 6DD3              // !csp         --
 625+ 6DD3              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 626+ 6DD3                              Colon_Def STORE_CSP, "!CSP", is_normal
 626+ 6DD3             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 626+ 6DD3             >
 626+ 6DD3             >Dict_Ptr        defl    $
 626+ 6DD3             >
 626+ 6DD3             >//              ______________________________________________________________________
 626+ 6DD3             >//              Heap part
 626+ 6DD3             >
 626+ 6DD3             >
 626+ 6DD3             >                org     (Heap_Ptr & $1FFF) + $E000
 626+ E664             >
 626+ E664             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 626+ E664             >Latest_Definition defl  Heap_Ptr
 626+ E664             >
 626+ E664             >                // dummy db directives used to calculate length of namec
 626+ E664 21 43 53 50 >                db      "!CSP"
 626+ E668             >len_NFA         defl    $ - temp_NFA
 626+ E668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 626+ E664             >
 626+ E664 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 626+ E665 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 626+ E669             >                org     $-1                 // alter last byte of Name just above to set
 626+ E668 D0          >                db      {b $} | END_BIT     // msb as name end
 626+ E669             >
 626+ E669 5C 06       >                dw      Prev_Ptr            // Link to previous definition Name
 626+ E66B             >Prev_Ptr        defl    Heap_Ptr
 626+ E66B             >
 626+ E66B             >mirror_Ptr      defl    $
 626+ E66B             >
 626+ E66B D5 6D       >                dw      Dict_Ptr + 2        // xt
 626+ E66D             >Heap_Ptr        defl    $ - $E000           // save current HP
 626+ E66D             >
 626+ E66D             >Current_HP      defl  $ - $E000             // used to set HP once!
 626+ E66D             >
 626+ E66D             >//              ______________________________________________________________________
 626+ E66D             >//              Dictionary part
 626+ E66D             >
 626+ E66D             >                org     Dict_Ptr
 626+ 6DD3             >
 626+ 6DD3 6B 06       >                dw      mirror_Ptr - $E000
 626+ 6DD5             >
 626+ 6DD5             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 626+ 6DD5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 626+ 6DD8             >
 626+ 6DD8             >
 626+ 6DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 626+ 6DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 626+ 6DD8             >
 626+ 6DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 627+ 6DD8 39 68                        dw      SPFETCH                 // sp@
 628+ 6DDA 64 6B 93 69                  dw      CSP, STORE              // csp !
 629+ 6DDE 52 68                        dw      EXIT                    // ;
 630+ 6DE0
 631+ 6DE0              //  ______________________________________________________________________
 632+ 6DE0              //
 633+ 6DE0              // ?error       f n --
 634+ 6DE0              // rase error n if flag f it true
 635+ 6DE0                              Colon_Def QERROR, "?ERROR", is_normal
 635+ 6DE0             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 635+ 6DE0             >
 635+ 6DE0             >Dict_Ptr        defl    $
 635+ 6DE0             >
 635+ 6DE0             >//              ______________________________________________________________________
 635+ 6DE0             >//              Heap part
 635+ 6DE0             >
 635+ 6DE0             >
 635+ 6DE0             >                org     (Heap_Ptr & $1FFF) + $E000
 635+ E66D             >
 635+ E66D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 635+ E66D             >Latest_Definition defl  Heap_Ptr
 635+ E66D             >
 635+ E66D             >                // dummy db directives used to calculate length of namec
 635+ E66D 3F 45 52 52 >                db      "?ERROR"
 635+ E671 4F 52       >
 635+ E673             >len_NFA         defl    $ - temp_NFA
 635+ E673             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 635+ E66D             >
 635+ E66D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 635+ E66E 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 635+ E672 4F 52       >
 635+ E674             >                org     $-1                 // alter last byte of Name just above to set
 635+ E673 D2          >                db      {b $} | END_BIT     // msb as name end
 635+ E674             >
 635+ E674 64 06       >                dw      Prev_Ptr            // Link to previous definition Name
 635+ E676             >Prev_Ptr        defl    Heap_Ptr
 635+ E676             >
 635+ E676             >mirror_Ptr      defl    $
 635+ E676             >
 635+ E676 E2 6D       >                dw      Dict_Ptr + 2        // xt
 635+ E678             >Heap_Ptr        defl    $ - $E000           // save current HP
 635+ E678             >
 635+ E678             >Current_HP      defl  $ - $E000             // used to set HP once!
 635+ E678             >
 635+ E678             >//              ______________________________________________________________________
 635+ E678             >//              Dictionary part
 635+ E678             >
 635+ E678             >                org     Dict_Ptr
 635+ 6DE0             >
 635+ 6DE0 76 06       >                dw      mirror_Ptr - $E000
 635+ 6DE2             >
 635+ 6DE2             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 635+ 6DE2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 635+ 6DE5             >
 635+ 6DE5             >
 635+ 6DE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 635+ 6DE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 635+ 6DE5             >
 635+ 6DE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 636+ 6DE5 24 69                        dw      SWAP                    // swap
 637+ 6DE7                                                              // if
 638+ 6DE7 F5 63                        dw      ZBRANCH
 639+ 6DE9 08 00                        dw      QError_Else - $
 640+ 6DEB BC 72                        dw          ERROR               //      error  ( is a forward-ref )
 641+ 6DED                                                              // else
 642+ 6DED E8 63                        dw      BRANCH
 643+ 6DEF 04 00                        dw      QError_Endif - $
 644+ 6DF1              QError_Else:
 645+ 6DF1 10 69                        dw          DROP                //      drop
 646+ 6DF3              QError_Endif:                                   // endif
 647+ 6DF3 52 68                        dw      EXIT                    // ;
 648+ 6DF5
 649+ 6DF5              //  ______________________________________________________________________
 650+ 6DF5              //
 651+ 6DF5              // ?comp       --
 652+ 6DF5              // raise msg #17 if not compiling
 653+ 6DF5                              Colon_Def QCOMP, "?COMP", is_normal
 653+ 6DF5             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 653+ 6DF5             >
 653+ 6DF5             >Dict_Ptr        defl    $
 653+ 6DF5             >
 653+ 6DF5             >//              ______________________________________________________________________
 653+ 6DF5             >//              Heap part
 653+ 6DF5             >
 653+ 6DF5             >
 653+ 6DF5             >                org     (Heap_Ptr & $1FFF) + $E000
 653+ E678             >
 653+ E678             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 653+ E678             >Latest_Definition defl  Heap_Ptr
 653+ E678             >
 653+ E678             >                // dummy db directives used to calculate length of namec
 653+ E678 3F 43 4F 4D >                db      "?COMP"
 653+ E67C 50          >
 653+ E67D             >len_NFA         defl    $ - temp_NFA
 653+ E67D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 653+ E678             >
 653+ E678 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 653+ E679 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 653+ E67D 50          >
 653+ E67E             >                org     $-1                 // alter last byte of Name just above to set
 653+ E67D D0          >                db      {b $} | END_BIT     // msb as name end
 653+ E67E             >
 653+ E67E 6D 06       >                dw      Prev_Ptr            // Link to previous definition Name
 653+ E680             >Prev_Ptr        defl    Heap_Ptr
 653+ E680             >
 653+ E680             >mirror_Ptr      defl    $
 653+ E680             >
 653+ E680 F7 6D       >                dw      Dict_Ptr + 2        // xt
 653+ E682             >Heap_Ptr        defl    $ - $E000           // save current HP
 653+ E682             >
 653+ E682             >Current_HP      defl  $ - $E000             // used to set HP once!
 653+ E682             >
 653+ E682             >//              ______________________________________________________________________
 653+ E682             >//              Dictionary part
 653+ E682             >
 653+ E682             >                org     Dict_Ptr
 653+ 6DF5             >
 653+ 6DF5 80 06       >                dw      mirror_Ptr - $E000
 653+ 6DF7             >
 653+ 6DF7             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 653+ 6DF7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 653+ 6DFA             >
 653+ 6DFA             >
 653+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 653+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 653+ 6DFA             >
 653+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 654+ 6DFA 4C 6B 89 69                  dw      STATE, FETCH            // state @
 655+ 6DFE 77 68                        dw      ZEQUAL                  // 0=
 656+ 6E00 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 657+ 6E04 E2 6D                        dw      QERROR                  // ?error
 658+ 6E06 52 68                        dw      EXIT                    // ;
 659+ 6E08
 660+ 6E08              //  ______________________________________________________________________
 661+ 6E08              //
 662+ 6E08              // ?exec       --
 663+ 6E08              // raise msg #18 if compiling
 664+ 6E08                              Colon_Def QEXEC, "?EXEC", is_normal
 664+ 6E08             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 664+ 6E08             >
 664+ 6E08             >Dict_Ptr        defl    $
 664+ 6E08             >
 664+ 6E08             >//              ______________________________________________________________________
 664+ 6E08             >//              Heap part
 664+ 6E08             >
 664+ 6E08             >
 664+ 6E08             >                org     (Heap_Ptr & $1FFF) + $E000
 664+ E682             >
 664+ E682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ E682             >Latest_Definition defl  Heap_Ptr
 664+ E682             >
 664+ E682             >                // dummy db directives used to calculate length of namec
 664+ E682 3F 45 58 45 >                db      "?EXEC"
 664+ E686 43          >
 664+ E687             >len_NFA         defl    $ - temp_NFA
 664+ E687             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ E682             >
 664+ E682 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ E683 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 664+ E687 43          >
 664+ E688             >                org     $-1                 // alter last byte of Name just above to set
 664+ E687 C3          >                db      {b $} | END_BIT     // msb as name end
 664+ E688             >
 664+ E688 78 06       >                dw      Prev_Ptr            // Link to previous definition Name
 664+ E68A             >Prev_Ptr        defl    Heap_Ptr
 664+ E68A             >
 664+ E68A             >mirror_Ptr      defl    $
 664+ E68A             >
 664+ E68A 0A 6E       >                dw      Dict_Ptr + 2        // xt
 664+ E68C             >Heap_Ptr        defl    $ - $E000           // save current HP
 664+ E68C             >
 664+ E68C             >Current_HP      defl  $ - $E000             // used to set HP once!
 664+ E68C             >
 664+ E68C             >//              ______________________________________________________________________
 664+ E68C             >//              Dictionary part
 664+ E68C             >
 664+ E68C             >                org     Dict_Ptr
 664+ 6E08             >
 664+ 6E08 8A 06       >                dw      mirror_Ptr - $E000
 664+ 6E0A             >
 664+ 6E0A             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 6E0A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 6E0D             >
 664+ 6E0D             >
 664+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 6E0D             >
 664+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 6E0D 4C 6B 89 69                  dw      STATE, FETCH            // state @
 666+ 6E11 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 667+ 6E15 E2 6D                        dw      QERROR                  // ?error
 668+ 6E17 52 68                        dw      EXIT                    // ;
 669+ 6E19
 670+ 6E19              //  ______________________________________________________________________
 671+ 6E19              //
 672+ 6E19              // ?pairs       n1 n2 --
 673+ 6E19              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 674+ 6E19                              Colon_Def QPAIRS, "?PAIRS", is_normal
 674+ 6E19             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 674+ 6E19             >
 674+ 6E19             >Dict_Ptr        defl    $
 674+ 6E19             >
 674+ 6E19             >//              ______________________________________________________________________
 674+ 6E19             >//              Heap part
 674+ 6E19             >
 674+ 6E19             >
 674+ 6E19             >                org     (Heap_Ptr & $1FFF) + $E000
 674+ E68C             >
 674+ E68C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 674+ E68C             >Latest_Definition defl  Heap_Ptr
 674+ E68C             >
 674+ E68C             >                // dummy db directives used to calculate length of namec
 674+ E68C 3F 50 41 49 >                db      "?PAIRS"
 674+ E690 52 53       >
 674+ E692             >len_NFA         defl    $ - temp_NFA
 674+ E692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 674+ E68C             >
 674+ E68C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 674+ E68D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 674+ E691 52 53       >
 674+ E693             >                org     $-1                 // alter last byte of Name just above to set
 674+ E692 D3          >                db      {b $} | END_BIT     // msb as name end
 674+ E693             >
 674+ E693 82 06       >                dw      Prev_Ptr            // Link to previous definition Name
 674+ E695             >Prev_Ptr        defl    Heap_Ptr
 674+ E695             >
 674+ E695             >mirror_Ptr      defl    $
 674+ E695             >
 674+ E695 1B 6E       >                dw      Dict_Ptr + 2        // xt
 674+ E697             >Heap_Ptr        defl    $ - $E000           // save current HP
 674+ E697             >
 674+ E697             >Current_HP      defl  $ - $E000             // used to set HP once!
 674+ E697             >
 674+ E697             >//              ______________________________________________________________________
 674+ E697             >//              Dictionary part
 674+ E697             >
 674+ E697             >                org     Dict_Ptr
 674+ 6E19             >
 674+ 6E19 95 06       >                dw      mirror_Ptr - $E000
 674+ 6E1B             >
 674+ 6E1B             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 674+ 6E1B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 674+ 6E1E             >
 674+ 6E1E             >
 674+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 674+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 674+ 6E1E             >
 674+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 675+ 6E1E E5 6B                        dw      SUBTRACT                // -
 676+ 6E20 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 677+ 6E24 E2 6D                        dw      QERROR                  // ?error
 678+ 6E26 52 68                        dw      EXIT                    // ;
 679+ 6E28
 680+ 6E28              //  ______________________________________________________________________
 681+ 6E28              //
 682+ 6E28              // ?csp       --
 683+ 6E28              // raise msg #20 if surrent SP in not what previously saved in CSP.
 684+ 6E28              // Compiler relies on that for  syntax checking of structures
 685+ 6E28                              Colon_Def QCSP, "?CSP", is_normal
 685+ 6E28             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 685+ 6E28             >
 685+ 6E28             >Dict_Ptr        defl    $
 685+ 6E28             >
 685+ 6E28             >//              ______________________________________________________________________
 685+ 6E28             >//              Heap part
 685+ 6E28             >
 685+ 6E28             >
 685+ 6E28             >                org     (Heap_Ptr & $1FFF) + $E000
 685+ E697             >
 685+ E697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ E697             >Latest_Definition defl  Heap_Ptr
 685+ E697             >
 685+ E697             >                // dummy db directives used to calculate length of namec
 685+ E697 3F 43 53 50 >                db      "?CSP"
 685+ E69B             >len_NFA         defl    $ - temp_NFA
 685+ E69B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ E697             >
 685+ E697 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ E698 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 685+ E69C             >                org     $-1                 // alter last byte of Name just above to set
 685+ E69B D0          >                db      {b $} | END_BIT     // msb as name end
 685+ E69C             >
 685+ E69C 8C 06       >                dw      Prev_Ptr            // Link to previous definition Name
 685+ E69E             >Prev_Ptr        defl    Heap_Ptr
 685+ E69E             >
 685+ E69E             >mirror_Ptr      defl    $
 685+ E69E             >
 685+ E69E 2A 6E       >                dw      Dict_Ptr + 2        // xt
 685+ E6A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 685+ E6A0             >
 685+ E6A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 685+ E6A0             >
 685+ E6A0             >//              ______________________________________________________________________
 685+ E6A0             >//              Dictionary part
 685+ E6A0             >
 685+ E6A0             >                org     Dict_Ptr
 685+ 6E28             >
 685+ 6E28 9E 06       >                dw      mirror_Ptr - $E000
 685+ 6E2A             >
 685+ 6E2A             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 6E2A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 6E2D             >
 685+ 6E2D             >
 685+ 6E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 6E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 6E2D             >
 685+ 6E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 6E2D 39 68                        dw      SPFETCH                 // sp@
 687+ 6E2F 64 6B 89 69                  dw      CSP, FETCH              // csp @
 688+ 6E33 E5 6B                        dw      SUBTRACT                // -
 689+ 6E35 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 690+ 6E39 E2 6D                        dw      QERROR                  // ?error
 691+ 6E3B 52 68                        dw      EXIT                    // ;
 692+ 6E3D
 693+ 6E3D              //  ______________________________________________________________________
 694+ 6E3D              //
 695+ 6E3D              // ?loading      --
 696+ 6E3D              // raise msg #22 if not loading
 697+ 6E3D                              Colon_Def QLOADING, "?LOADING", is_normal
 697+ 6E3D             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 697+ 6E3D             >
 697+ 6E3D             >Dict_Ptr        defl    $
 697+ 6E3D             >
 697+ 6E3D             >//              ______________________________________________________________________
 697+ 6E3D             >//              Heap part
 697+ 6E3D             >
 697+ 6E3D             >
 697+ 6E3D             >                org     (Heap_Ptr & $1FFF) + $E000
 697+ E6A0             >
 697+ E6A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ E6A0             >Latest_Definition defl  Heap_Ptr
 697+ E6A0             >
 697+ E6A0             >                // dummy db directives used to calculate length of namec
 697+ E6A0 3F 4C 4F 41 >                db      "?LOADING"
 697+ E6A4 44 49 4E 47 >
 697+ E6A8             >len_NFA         defl    $ - temp_NFA
 697+ E6A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ E6A0             >
 697+ E6A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ E6A1 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 697+ E6A5 44 49 4E 47 >
 697+ E6A9             >                org     $-1                 // alter last byte of Name just above to set
 697+ E6A8 C7          >                db      {b $} | END_BIT     // msb as name end
 697+ E6A9             >
 697+ E6A9 97 06       >                dw      Prev_Ptr            // Link to previous definition Name
 697+ E6AB             >Prev_Ptr        defl    Heap_Ptr
 697+ E6AB             >
 697+ E6AB             >mirror_Ptr      defl    $
 697+ E6AB             >
 697+ E6AB 3F 6E       >                dw      Dict_Ptr + 2        // xt
 697+ E6AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 697+ E6AD             >
 697+ E6AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 697+ E6AD             >
 697+ E6AD             >//              ______________________________________________________________________
 697+ E6AD             >//              Dictionary part
 697+ E6AD             >
 697+ E6AD             >                org     Dict_Ptr
 697+ 6E3D             >
 697+ 6E3D AB 06       >                dw      mirror_Ptr - $E000
 697+ 6E3F             >
 697+ 6E3F             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 6E3F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 6E42             >
 697+ 6E42             >
 697+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 6E42             >
 697+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 6E42 22 6B 89 69                  dw      BLK, FETCH              // blk @
 699+ 6E46 77 68                        dw      ZEQUAL                  // 0=
 700+ 6E48 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 701+ 6E4C E2 6D                        dw      QERROR                  // ?error
 702+ 6E4E 52 68                        dw      EXIT                    // ;
 703+ 6E50
 704+ 6E50              //  ______________________________________________________________________
 705+ 6E50              //
 706+ 6E50              // compile      --
 707+ 6E50              // compiles the following word
 708+ 6E50                              Colon_Def COMPILE, "COMPILE", is_normal
 708+ 6E50             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 708+ 6E50             >
 708+ 6E50             >Dict_Ptr        defl    $
 708+ 6E50             >
 708+ 6E50             >//              ______________________________________________________________________
 708+ 6E50             >//              Heap part
 708+ 6E50             >
 708+ 6E50             >
 708+ 6E50             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E6AD             >
 708+ E6AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E6AD             >Latest_Definition defl  Heap_Ptr
 708+ E6AD             >
 708+ E6AD             >                // dummy db directives used to calculate length of namec
 708+ E6AD 43 4F 4D 50 >                db      "COMPILE"
 708+ E6B1 49 4C 45    >
 708+ E6B4             >len_NFA         defl    $ - temp_NFA
 708+ E6B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E6AD             >
 708+ E6AD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E6AE 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 708+ E6B2 49 4C 45    >
 708+ E6B5             >                org     $-1                 // alter last byte of Name just above to set
 708+ E6B4 C5          >                db      {b $} | END_BIT     // msb as name end
 708+ E6B5             >
 708+ E6B5 A0 06       >                dw      Prev_Ptr            // Link to previous definition Name
 708+ E6B7             >Prev_Ptr        defl    Heap_Ptr
 708+ E6B7             >
 708+ E6B7             >mirror_Ptr      defl    $
 708+ E6B7             >
 708+ E6B7 52 6E       >                dw      Dict_Ptr + 2        // xt
 708+ E6B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E6B9             >
 708+ E6B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E6B9             >
 708+ E6B9             >//              ______________________________________________________________________
 708+ E6B9             >//              Dictionary part
 708+ E6B9             >
 708+ E6B9             >                org     Dict_Ptr
 708+ 6E50             >
 708+ 6E50 B7 06       >                dw      mirror_Ptr - $E000
 708+ 6E52             >
 708+ 6E52             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 6E52 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 708+ 6E55             >
 708+ 6E55             >
 708+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 6E55             >
 708+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 6E55 F7 6D                        dw      QCOMP                   // ?comp
 710+ 6E57 67 68                        dw      R_TO                    // r>
 711+ 6E59 2B 69 D4 68                  dw      DUP, CELL_PLUS          // dup, cell+
 712+ 6E5D 5C 68                        dw      TO_R                    // >r
 713+ 6E5F 89 69 BC 6B                  dw      FETCH, COMMA            // @ ,
 714+ 6E63 52 68                        dw      EXIT                    // ;
 715+ 6E65
 716+ 6E65              //  ______________________________________________________________________
 717+ 6E65              //
 718+ 6E65              // compile,     --
 719+ 6E65              // compiles the following word
 720+ 6E65                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 720+ 6E65             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 720+ 6E65             >
 720+ 6E65             >Dict_Ptr        defl    $
 720+ 6E65             >
 720+ 6E65             >//              ______________________________________________________________________
 720+ 6E65             >//              Heap part
 720+ 6E65             >
 720+ 6E65             >
 720+ 6E65             >                org     (Heap_Ptr & $1FFF) + $E000
 720+ E6B9             >
 720+ E6B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ E6B9             >Latest_Definition defl  Heap_Ptr
 720+ E6B9             >
 720+ E6B9             >                // dummy db directives used to calculate length of namec
 720+ E6B9 43 4F 4D 50 >                db      "COMPILE,"
 720+ E6BD 49 4C 45 2C >
 720+ E6C1             >len_NFA         defl    $ - temp_NFA
 720+ E6C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ E6B9             >
 720+ E6B9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ E6BA 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 720+ E6BE 49 4C 45 2C >
 720+ E6C2             >                org     $-1                 // alter last byte of Name just above to set
 720+ E6C1 AC          >                db      {b $} | END_BIT     // msb as name end
 720+ E6C2             >
 720+ E6C2 AD 06       >                dw      Prev_Ptr            // Link to previous definition Name
 720+ E6C4             >Prev_Ptr        defl    Heap_Ptr
 720+ E6C4             >
 720+ E6C4             >mirror_Ptr      defl    $
 720+ E6C4             >
 720+ E6C4 67 6E       >                dw      Dict_Ptr + 2        // xt
 720+ E6C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 720+ E6C6             >
 720+ E6C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 720+ E6C6             >
 720+ E6C6             >//              ______________________________________________________________________
 720+ E6C6             >//              Dictionary part
 720+ E6C6             >
 720+ E6C6             >                org     Dict_Ptr
 720+ 6E65             >
 720+ 6E65 C4 06       >                dw      mirror_Ptr - $E000
 720+ 6E67             >
 720+ 6E67             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 6E67 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 6E6A             >
 720+ 6E6A             >
 720+ 6E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 6E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 6E6A             >
 720+ 6E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 6E6A F7 6D                        dw      QCOMP                   // ?comp
 722+ 6E6C BC 6B                        dw      COMMA                   // ,
 723+ 6E6E 52 68                        dw      EXIT                    // ;
 724+ 6E70
 725+ 6E70              //  ______________________________________________________________________
 726+ 6E70              //
 727+ 6E70              // [            --
 728+ 6E70              // stop compilation
 729+ 6E70                              Colon_Def SQUARED_OPEN, "[", is_immediate
 729+ 6E70             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 729+ 6E70             >
 729+ 6E70             >Dict_Ptr        defl    $
 729+ 6E70             >
 729+ 6E70             >//              ______________________________________________________________________
 729+ 6E70             >//              Heap part
 729+ 6E70             >
 729+ 6E70             >
 729+ 6E70             >                org     (Heap_Ptr & $1FFF) + $E000
 729+ E6C6             >
 729+ E6C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 729+ E6C6             >Latest_Definition defl  Heap_Ptr
 729+ E6C6             >
 729+ E6C6             >                // dummy db directives used to calculate length of namec
 729+ E6C6 5B          >                db      "["
 729+ E6C7             >len_NFA         defl    $ - temp_NFA
 729+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 729+ E6C6             >
 729+ E6C6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 729+ E6C7 5B          >                db      "["               // name string in 7-bit ascii, but
 729+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 729+ E6C7 DB          >                db      {b $} | END_BIT     // msb as name end
 729+ E6C8             >
 729+ E6C8 B9 06       >                dw      Prev_Ptr            // Link to previous definition Name
 729+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 729+ E6CA             >
 729+ E6CA             >mirror_Ptr      defl    $
 729+ E6CA             >
 729+ E6CA 72 6E       >                dw      Dict_Ptr + 2        // xt
 729+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 729+ E6CC             >
 729+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 729+ E6CC             >
 729+ E6CC             >//              ______________________________________________________________________
 729+ E6CC             >//              Dictionary part
 729+ E6CC             >
 729+ E6CC             >                org     Dict_Ptr
 729+ 6E70             >
 729+ 6E70 CA 06       >                dw      mirror_Ptr - $E000
 729+ 6E72             >
 729+ 6E72             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 729+ 6E72 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 729+ 6E75             >
 729+ 6E75             >
 729+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 729+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 729+ 6E75             >
 729+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 730+ 6E75 81 6A                        dw      ZERO                    // 0
 731+ 6E77 4C 6B 93 69                  dw      STATE, STORE            // state !
 732+ 6E7B 52 68                        dw      EXIT                    // ; immediate
 733+ 6E7D
 734+ 6E7D              //  ______________________________________________________________________
 735+ 6E7D              //
 736+ 6E7D              // ]            --
 737+ 6E7D              // start compilation
 738+ 6E7D                              Colon_Def SQUARED_CLOSE, "]", is_normal
 738+ 6E7D             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 738+ 6E7D             >
 738+ 6E7D             >Dict_Ptr        defl    $
 738+ 6E7D             >
 738+ 6E7D             >//              ______________________________________________________________________
 738+ 6E7D             >//              Heap part
 738+ 6E7D             >
 738+ 6E7D             >
 738+ 6E7D             >                org     (Heap_Ptr & $1FFF) + $E000
 738+ E6CC             >
 738+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ E6CC             >Latest_Definition defl  Heap_Ptr
 738+ E6CC             >
 738+ E6CC             >                // dummy db directives used to calculate length of namec
 738+ E6CC 5D          >                db      "]"
 738+ E6CD             >len_NFA         defl    $ - temp_NFA
 738+ E6CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ E6CC             >
 738+ E6CC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ E6CD 5D          >                db      "]"               // name string in 7-bit ascii, but
 738+ E6CE             >                org     $-1                 // alter last byte of Name just above to set
 738+ E6CD DD          >                db      {b $} | END_BIT     // msb as name end
 738+ E6CE             >
 738+ E6CE C6 06       >                dw      Prev_Ptr            // Link to previous definition Name
 738+ E6D0             >Prev_Ptr        defl    Heap_Ptr
 738+ E6D0             >
 738+ E6D0             >mirror_Ptr      defl    $
 738+ E6D0             >
 738+ E6D0 7F 6E       >                dw      Dict_Ptr + 2        // xt
 738+ E6D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 738+ E6D2             >
 738+ E6D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 738+ E6D2             >
 738+ E6D2             >//              ______________________________________________________________________
 738+ E6D2             >//              Dictionary part
 738+ E6D2             >
 738+ E6D2             >                org     Dict_Ptr
 738+ 6E7D             >
 738+ 6E7D D0 06       >                dw      mirror_Ptr - $E000
 738+ 6E7F             >
 738+ 6E7F             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 6E7F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 738+ 6E82             >
 738+ 6E82             >
 738+ 6E82             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6E82             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6E82             >
 738+ 6E82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6E82 A3 63 C0 00                  dw      LIT, $C0                // 192
 740+ 6E86 4C 6B 93 69                  dw      STATE, STORE            // state !
 741+ 6E8A 52 68                        dw      EXIT                    // ;
 742+ 6E8C
 743+ 6E8C              //  ______________________________________________________________________
 744+ 6E8C              //
 745+ 6E8C              // smudge       --
 746+ 6E8C              // toggle smudge bit of latest definition
 747+ 6E8C                              Colon_Def SMUDGE, "SMUDGE", is_normal
 747+ 6E8C             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 747+ 6E8C             >
 747+ 6E8C             >Dict_Ptr        defl    $
 747+ 6E8C             >
 747+ 6E8C             >//              ______________________________________________________________________
 747+ 6E8C             >//              Heap part
 747+ 6E8C             >
 747+ 6E8C             >
 747+ 6E8C             >                org     (Heap_Ptr & $1FFF) + $E000
 747+ E6D2             >
 747+ E6D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 747+ E6D2             >Latest_Definition defl  Heap_Ptr
 747+ E6D2             >
 747+ E6D2             >                // dummy db directives used to calculate length of namec
 747+ E6D2 53 4D 55 44 >                db      "SMUDGE"
 747+ E6D6 47 45       >
 747+ E6D8             >len_NFA         defl    $ - temp_NFA
 747+ E6D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 747+ E6D2             >
 747+ E6D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 747+ E6D3 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 747+ E6D7 47 45       >
 747+ E6D9             >                org     $-1                 // alter last byte of Name just above to set
 747+ E6D8 C5          >                db      {b $} | END_BIT     // msb as name end
 747+ E6D9             >
 747+ E6D9 CC 06       >                dw      Prev_Ptr            // Link to previous definition Name
 747+ E6DB             >Prev_Ptr        defl    Heap_Ptr
 747+ E6DB             >
 747+ E6DB             >mirror_Ptr      defl    $
 747+ E6DB             >
 747+ E6DB 8E 6E       >                dw      Dict_Ptr + 2        // xt
 747+ E6DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 747+ E6DD             >
 747+ E6DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 747+ E6DD             >
 747+ E6DD             >//              ______________________________________________________________________
 747+ E6DD             >//              Dictionary part
 747+ E6DD             >
 747+ E6DD             >                org     Dict_Ptr
 747+ 6E8C             >
 747+ 6E8C DB 06       >                dw      mirror_Ptr - $E000
 747+ 6E8E             >
 747+ 6E8E             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 747+ 6E8E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 747+ 6E91             >
 747+ 6E91             >
 747+ 6E91             >                endif           ; ok        // for other definitions it "points" the correct handler
 747+ 6E91             >                // Use of "; ok" to suppress "warning[fwdref]"
 747+ 6E91             >
 747+ 6E91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 748+ 6E91 52 6D                        dw      LATEST                  // latest
 749+ 6E93 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 750+ 6E97 80 69                        dw      TOGGLE                  // toggle
 751+ 6E99 52 68                        dw      EXIT                    // ;
 752+ 6E9B
 753+ 6E9B              //  ______________________________________________________________________
 754+ 6E9B              //
 755+ 6E9B              // immediate    --
 756+ 6E9B              // make immediate the latest definition
 757+ 6E9B                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 757+ 6E9B             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 757+ 6E9B             >
 757+ 6E9B             >Dict_Ptr        defl    $
 757+ 6E9B             >
 757+ 6E9B             >//              ______________________________________________________________________
 757+ 6E9B             >//              Heap part
 757+ 6E9B             >
 757+ 6E9B             >
 757+ 6E9B             >                org     (Heap_Ptr & $1FFF) + $E000
 757+ E6DD             >
 757+ E6DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 757+ E6DD             >Latest_Definition defl  Heap_Ptr
 757+ E6DD             >
 757+ E6DD             >                // dummy db directives used to calculate length of namec
 757+ E6DD 49 4D 4D 45 >                db      "IMMEDIATE"
 757+ E6E1 44 49 41 54 >
 757+ E6E5 45          >
 757+ E6E6             >len_NFA         defl    $ - temp_NFA
 757+ E6E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 757+ E6DD             >
 757+ E6DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 757+ E6DE 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 757+ E6E2 44 49 41 54 >
 757+ E6E6 45          >
 757+ E6E7             >                org     $-1                 // alter last byte of Name just above to set
 757+ E6E6 C5          >                db      {b $} | END_BIT     // msb as name end
 757+ E6E7             >
 757+ E6E7 D2 06       >                dw      Prev_Ptr            // Link to previous definition Name
 757+ E6E9             >Prev_Ptr        defl    Heap_Ptr
 757+ E6E9             >
 757+ E6E9             >mirror_Ptr      defl    $
 757+ E6E9             >
 757+ E6E9 9D 6E       >                dw      Dict_Ptr + 2        // xt
 757+ E6EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 757+ E6EB             >
 757+ E6EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 757+ E6EB             >
 757+ E6EB             >//              ______________________________________________________________________
 757+ E6EB             >//              Dictionary part
 757+ E6EB             >
 757+ E6EB             >                org     Dict_Ptr
 757+ 6E9B             >
 757+ 6E9B E9 06       >                dw      mirror_Ptr - $E000
 757+ 6E9D             >
 757+ 6E9D             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 757+ 6E9D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 757+ 6EA0             >
 757+ 6EA0             >
 757+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 757+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 757+ 6EA0             >
 757+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 758+ 6EA0 52 6D                        dw      LATEST                  // latest
 759+ 6EA2 A3 63 40 00                  dw      LIT, $40                // 64
 760+ 6EA6 80 69                        dw      TOGGLE                  // toggle
 761+ 6EA8 52 68                        dw      EXIT                    // ;
 762+ 6EAA
 763+ 6EAA              //  ______________________________________________________________________
 764+ 6EAA              //
 765+ 6EAA              // hex          --
 766+ 6EAA              // change numeration base
 767+ 6EAA                              Colon_Def HEX, "HEX", is_normal
 767+ 6EAA             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 767+ 6EAA             >
 767+ 6EAA             >Dict_Ptr        defl    $
 767+ 6EAA             >
 767+ 6EAA             >//              ______________________________________________________________________
 767+ 6EAA             >//              Heap part
 767+ 6EAA             >
 767+ 6EAA             >
 767+ 6EAA             >                org     (Heap_Ptr & $1FFF) + $E000
 767+ E6EB             >
 767+ E6EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ E6EB             >Latest_Definition defl  Heap_Ptr
 767+ E6EB             >
 767+ E6EB             >                // dummy db directives used to calculate length of namec
 767+ E6EB 48 45 58    >                db      "HEX"
 767+ E6EE             >len_NFA         defl    $ - temp_NFA
 767+ E6EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ E6EB             >
 767+ E6EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ E6EC 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 767+ E6EF             >                org     $-1                 // alter last byte of Name just above to set
 767+ E6EE D8          >                db      {b $} | END_BIT     // msb as name end
 767+ E6EF             >
 767+ E6EF DD 06       >                dw      Prev_Ptr            // Link to previous definition Name
 767+ E6F1             >Prev_Ptr        defl    Heap_Ptr
 767+ E6F1             >
 767+ E6F1             >mirror_Ptr      defl    $
 767+ E6F1             >
 767+ E6F1 AC 6E       >                dw      Dict_Ptr + 2        // xt
 767+ E6F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 767+ E6F3             >
 767+ E6F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 767+ E6F3             >
 767+ E6F3             >//              ______________________________________________________________________
 767+ E6F3             >//              Dictionary part
 767+ E6F3             >
 767+ E6F3             >                org     Dict_Ptr
 767+ 6EAA             >
 767+ 6EAA F1 06       >                dw      mirror_Ptr - $E000
 767+ 6EAC             >
 767+ 6EAC             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 6EAC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 6EAF             >
 767+ 6EAF             >
 767+ 6EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 6EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 6EAF             >
 767+ 6EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 6EAF A3 63 10 00                  dw      LIT, 16                 // 16
 769+ 6EB3 52 6B 93 69                  dw      BASE, STORE             // base !
 770+ 6EB7 52 68                        dw      EXIT                    // ;
 771+ 6EB9
 772+ 6EB9              //  ______________________________________________________________________
 773+ 6EB9              //
 774+ 6EB9              // decimal      --
 775+ 6EB9              // change numeration base
 776+ 6EB9                              Colon_Def DECIMAL, "DECIMAL", is_normal
 776+ 6EB9             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 776+ 6EB9             >
 776+ 6EB9             >Dict_Ptr        defl    $
 776+ 6EB9             >
 776+ 6EB9             >//              ______________________________________________________________________
 776+ 6EB9             >//              Heap part
 776+ 6EB9             >
 776+ 6EB9             >
 776+ 6EB9             >                org     (Heap_Ptr & $1FFF) + $E000
 776+ E6F3             >
 776+ E6F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 776+ E6F3             >Latest_Definition defl  Heap_Ptr
 776+ E6F3             >
 776+ E6F3             >                // dummy db directives used to calculate length of namec
 776+ E6F3 44 45 43 49 >                db      "DECIMAL"
 776+ E6F7 4D 41 4C    >
 776+ E6FA             >len_NFA         defl    $ - temp_NFA
 776+ E6FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 776+ E6F3             >
 776+ E6F3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 776+ E6F4 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 776+ E6F8 4D 41 4C    >
 776+ E6FB             >                org     $-1                 // alter last byte of Name just above to set
 776+ E6FA CC          >                db      {b $} | END_BIT     // msb as name end
 776+ E6FB             >
 776+ E6FB EB 06       >                dw      Prev_Ptr            // Link to previous definition Name
 776+ E6FD             >Prev_Ptr        defl    Heap_Ptr
 776+ E6FD             >
 776+ E6FD             >mirror_Ptr      defl    $
 776+ E6FD             >
 776+ E6FD BB 6E       >                dw      Dict_Ptr + 2        // xt
 776+ E6FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 776+ E6FF             >
 776+ E6FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 776+ E6FF             >
 776+ E6FF             >//              ______________________________________________________________________
 776+ E6FF             >//              Dictionary part
 776+ E6FF             >
 776+ E6FF             >                org     Dict_Ptr
 776+ 6EB9             >
 776+ 6EB9 FD 06       >                dw      mirror_Ptr - $E000
 776+ 6EBB             >
 776+ 6EBB             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 776+ 6EBB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 776+ 6EBE             >
 776+ 6EBE             >
 776+ 6EBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 776+ 6EBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 776+ 6EBE             >
 776+ 6EBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 777+ 6EBE A3 63 0A 00                  dw      LIT, 10                 // 10
 778+ 6EC2 52 6B 93 69                  dw      BASE, STORE             // base !
 779+ 6EC6 52 68                        dw      EXIT                    // ;
 780+ 6EC8
 781+ 6EC8              //  ______________________________________________________________________
 782+ 6EC8              //
 783+ 6EC8              // (;code)       --
 784+ 6EC8              // patch to CFA to call/jump to the "following code"
 785+ 6EC8                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 785+ 6EC8             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 785+ 6EC8             >
 785+ 6EC8             >Dict_Ptr        defl    $
 785+ 6EC8             >
 785+ 6EC8             >//              ______________________________________________________________________
 785+ 6EC8             >//              Heap part
 785+ 6EC8             >
 785+ 6EC8             >
 785+ 6EC8             >                org     (Heap_Ptr & $1FFF) + $E000
 785+ E6FF             >
 785+ E6FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 785+ E6FF             >Latest_Definition defl  Heap_Ptr
 785+ E6FF             >
 785+ E6FF             >                // dummy db directives used to calculate length of namec
 785+ E6FF 28 3B 43 4F >                db      "(;CODE)"
 785+ E703 44 45 29    >
 785+ E706             >len_NFA         defl    $ - temp_NFA
 785+ E706             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 785+ E6FF             >
 785+ E6FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 785+ E700 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 785+ E704 44 45 29    >
 785+ E707             >                org     $-1                 // alter last byte of Name just above to set
 785+ E706 A9          >                db      {b $} | END_BIT     // msb as name end
 785+ E707             >
 785+ E707 F3 06       >                dw      Prev_Ptr            // Link to previous definition Name
 785+ E709             >Prev_Ptr        defl    Heap_Ptr
 785+ E709             >
 785+ E709             >mirror_Ptr      defl    $
 785+ E709             >
 785+ E709 CA 6E       >                dw      Dict_Ptr + 2        // xt
 785+ E70B             >Heap_Ptr        defl    $ - $E000           // save current HP
 785+ E70B             >
 785+ E70B             >Current_HP      defl  $ - $E000             // used to set HP once!
 785+ E70B             >
 785+ E70B             >//              ______________________________________________________________________
 785+ E70B             >//              Dictionary part
 785+ E70B             >
 785+ E70B             >                org     Dict_Ptr
 785+ 6EC8             >
 785+ 6EC8 09 07       >                dw      mirror_Ptr - $E000
 785+ 6ECA             >
 785+ 6ECA             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 785+ 6ECA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 785+ 6ECD             >
 785+ 6ECD             >
 785+ 6ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 785+ 6ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 785+ 6ECD             >
 785+ 6ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 786+ 6ECD 67 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 787+ 6ECF 52 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 788+ 6ED1 B0 6D 8B 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 789+ 6ED5
 790+ 6ED5 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 791+ 6ED9 07 69 A7 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 792+ 6EDD BE 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 793+ 6EDF
 794+ 6EDF 93 69                        dw      STORE                   // !
 795+ 6EE1 52 68                        dw      EXIT                    // ;
 796+ 6EE3
 797+ 6EE3              //  ______________________________________________________________________
 798+ 6EE3              //
 799+ 6EE3              // ;code        --
 800+ 6EE3                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 800+ 6EE3             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 800+ 6EE3             >
 800+ 6EE3             >Dict_Ptr        defl    $
 800+ 6EE3             >
 800+ 6EE3             >//              ______________________________________________________________________
 800+ 6EE3             >//              Heap part
 800+ 6EE3             >
 800+ 6EE3             >
 800+ 6EE3             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E70B             >
 800+ E70B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E70B             >Latest_Definition defl  Heap_Ptr
 800+ E70B             >
 800+ E70B             >                // dummy db directives used to calculate length of namec
 800+ E70B 3B 43 4F 44 >                db      ";CODE"
 800+ E70F 45          >
 800+ E710             >len_NFA         defl    $ - temp_NFA
 800+ E710             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E70B             >
 800+ E70B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E70C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 800+ E710 45          >
 800+ E711             >                org     $-1                 // alter last byte of Name just above to set
 800+ E710 C5          >                db      {b $} | END_BIT     // msb as name end
 800+ E711             >
 800+ E711 FF 06       >                dw      Prev_Ptr            // Link to previous definition Name
 800+ E713             >Prev_Ptr        defl    Heap_Ptr
 800+ E713             >
 800+ E713             >mirror_Ptr      defl    $
 800+ E713             >
 800+ E713 E5 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E715             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E715             >
 800+ E715             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E715             >
 800+ E715             >//              ______________________________________________________________________
 800+ E715             >//              Dictionary part
 800+ E715             >
 800+ E715             >                org     Dict_Ptr
 800+ 6EE3             >
 800+ 6EE3 13 07       >                dw      mirror_Ptr - $E000
 800+ 6EE5             >
 800+ 6EE5             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EE5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EE8             >
 800+ 6EE8             >
 800+ 6EE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EE8             >
 800+ 6EE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EE8 2A 6E                        dw      QCSP                    // ?csp
 802+ 6EEA 52 6E                        dw      COMPILE                 // compile
 803+ 6EEC CA 6E                        dw      C_SEMICOLON_CODE        // (;code)
 804+ 6EEE 72 6E                        dw      SQUARED_OPEN            // [
 805+ 6EF0 48 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 806+ 6EF2 52 68                        dw      EXIT                    // ; immediate
 807+ 6EF4
 808+ 6EF4              //  ______________________________________________________________________
 809+ 6EF4              //
 810+ 6EF4              // <builds      --
 811+ 6EF4                              Colon_Def CBUILDS, "<BUILDS", is_normal
 811+ 6EF4             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 811+ 6EF4             >
 811+ 6EF4             >Dict_Ptr        defl    $
 811+ 6EF4             >
 811+ 6EF4             >//              ______________________________________________________________________
 811+ 6EF4             >//              Heap part
 811+ 6EF4             >
 811+ 6EF4             >
 811+ 6EF4             >                org     (Heap_Ptr & $1FFF) + $E000
 811+ E715             >
 811+ E715             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ E715             >Latest_Definition defl  Heap_Ptr
 811+ E715             >
 811+ E715             >                // dummy db directives used to calculate length of namec
 811+ E715 3C 42 55 49 >                db      "<BUILDS"
 811+ E719 4C 44 53    >
 811+ E71C             >len_NFA         defl    $ - temp_NFA
 811+ E71C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ E715             >
 811+ E715 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ E716 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 811+ E71A 4C 44 53    >
 811+ E71D             >                org     $-1                 // alter last byte of Name just above to set
 811+ E71C D3          >                db      {b $} | END_BIT     // msb as name end
 811+ E71D             >
 811+ E71D 0B 07       >                dw      Prev_Ptr            // Link to previous definition Name
 811+ E71F             >Prev_Ptr        defl    Heap_Ptr
 811+ E71F             >
 811+ E71F             >mirror_Ptr      defl    $
 811+ E71F             >
 811+ E71F F6 6E       >                dw      Dict_Ptr + 2        // xt
 811+ E721             >Heap_Ptr        defl    $ - $E000           // save current HP
 811+ E721             >
 811+ E721             >Current_HP      defl  $ - $E000             // used to set HP once!
 811+ E721             >
 811+ E721             >//              ______________________________________________________________________
 811+ E721             >//              Dictionary part
 811+ E721             >
 811+ E721             >                org     Dict_Ptr
 811+ 6EF4             >
 811+ 6EF4 1F 07       >                dw      mirror_Ptr - $E000
 811+ 6EF6             >
 811+ 6EF6             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 6EF6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 6EF9             >
 811+ 6EF9             >
 811+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 6EF9             >
 811+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 6EF9 81 6A                        dw      ZERO                    // 0
 813+ 6EFB 4C 6A                        dw      CONSTANT                // constant
 814+ 6EFD 52 68                        dw      EXIT                    // ;
 815+ 6EFF
 816+ 6EFF              //  ______________________________________________________________________
 817+ 6EFF              //
 818+ 6EFF              // recurse      --
 819+ 6EFF              //              Colon_Def RECURSE, "RECURSE", is_immediate
 820+ 6EFF              //              dw      QCOMP                   // ?comp
 821+ 6EFF              //              dw      LATEST                  // latest
 822+ 6EFF              //              dw      PFA, CFA                // pfa cfa
 823+ 6EFF              //              dw      COMMA                   // ,
 824+ 6EFF              //              dw      EXIT                    // ; immediate
 825+ 6EFF
 826+ 6EFF              //  ______________________________________________________________________
 827+ 6EFF              //
 828+ 6EFF              // does>     --
 829+ 6EFF                              Colon_Def DOES_TO, "DOES>", is_normal
 829+ 6EFF             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 829+ 6EFF             >
 829+ 6EFF             >Dict_Ptr        defl    $
 829+ 6EFF             >
 829+ 6EFF             >//              ______________________________________________________________________
 829+ 6EFF             >//              Heap part
 829+ 6EFF             >
 829+ 6EFF             >
 829+ 6EFF             >                org     (Heap_Ptr & $1FFF) + $E000
 829+ E721             >
 829+ E721             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ E721             >Latest_Definition defl  Heap_Ptr
 829+ E721             >
 829+ E721             >                // dummy db directives used to calculate length of namec
 829+ E721 44 4F 45 53 >                db      "DOES>"
 829+ E725 3E          >
 829+ E726             >len_NFA         defl    $ - temp_NFA
 829+ E726             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ E721             >
 829+ E721 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ E722 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 829+ E726 3E          >
 829+ E727             >                org     $-1                 // alter last byte of Name just above to set
 829+ E726 BE          >                db      {b $} | END_BIT     // msb as name end
 829+ E727             >
 829+ E727 15 07       >                dw      Prev_Ptr            // Link to previous definition Name
 829+ E729             >Prev_Ptr        defl    Heap_Ptr
 829+ E729             >
 829+ E729             >mirror_Ptr      defl    $
 829+ E729             >
 829+ E729 01 6F       >                dw      Dict_Ptr + 2        // xt
 829+ E72B             >Heap_Ptr        defl    $ - $E000           // save current HP
 829+ E72B             >
 829+ E72B             >Current_HP      defl  $ - $E000             // used to set HP once!
 829+ E72B             >
 829+ E72B             >//              ______________________________________________________________________
 829+ E72B             >//              Dictionary part
 829+ E72B             >
 829+ E72B             >                org     Dict_Ptr
 829+ 6EFF             >
 829+ 6EFF 29 07       >                dw      mirror_Ptr - $E000
 829+ 6F01             >
 829+ 6F01             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 6F01 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 6F04             >
 829+ 6F04             >
 829+ 6F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 6F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 6F04             >
 829+ 6F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 6F04 67 68                        dw      R_TO                    // r>
 831+ 6F06 52 6D                        dw      LATEST                  // latest
 832+ 6F08 B0 6D                        dw      PFA                     // pfa
 833+ 6F0A 93 69                        dw      STORE                   // !
 834+ 6F0C CA 6E                        dw      C_SEMICOLON_CODE        // ;code
 835+ 6F0E              Does_Ptr:
 836+ 6F0E                              // via call coded in CFA
 837+ 6F0E EB                           ex      de, hl //**
 838+ 6F0F                              // *** ldhlrp
 839+ 6F0F 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 840+ 6F10 70                           ld      (hl), b
 841+ 6F11 2B                           dec     hl
 842+ 6F12 71                           ld      (hl), c
 843+ 6F13                              // *** ldrphl
 844+ 6F13 EB                           ex      de, hl //**
 845+ 6F14 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 846+ 6F15
 847+ 6F15 4E                           ld      c, (hl)
 848+ 6F16 23                           inc     hl
 849+ 6F17 46                           ld      b, (hl)
 850+ 6F18 23                           inc     hl
 851+ 6F19
 852+ 6F19                              psh1
 852+ 6F19 E5          >                push    hl
 852+ 6F1A DD E9       >                jp      (ix)
 853+ 6F1C                              // SMUDGE !
 854+ 6F1C
 855+ 6F1C              //  ______________________________________________________________________
 856+ 6F1C              //
 857+ 6F1C              // count        a -- a2 n
 858+ 6F1C              // expects a counted string at address a, returns string address and counter
 859+ 6F1C                              New_Def COUNT, "COUNT", is_code, is_normal
 859+ 6F1C             >
 859+ 6F1C             >Dict_Ptr        defl    $
 859+ 6F1C             >
 859+ 6F1C             >//              ______________________________________________________________________
 859+ 6F1C             >//              Heap part
 859+ 6F1C             >
 859+ 6F1C             >
 859+ 6F1C             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ E72B             >
 859+ E72B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ E72B             >Latest_Definition defl  Heap_Ptr
 859+ E72B             >
 859+ E72B             >                // dummy db directives used to calculate length of namec
 859+ E72B 43 4F 55 4E >                db      "COUNT"
 859+ E72F 54          >
 859+ E730             >len_NFA         defl    $ - temp_NFA
 859+ E730             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ E72B             >
 859+ E72B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ E72C 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 859+ E730 54          >
 859+ E731             >                org     $-1                 // alter last byte of Name just above to set
 859+ E730 D4          >                db      {b $} | END_BIT     // msb as name end
 859+ E731             >
 859+ E731 21 07       >                dw      Prev_Ptr            // Link to previous definition Name
 859+ E733             >Prev_Ptr        defl    Heap_Ptr
 859+ E733             >
 859+ E733             >mirror_Ptr      defl    $
 859+ E733             >
 859+ E733 1E 6F       >                dw      Dict_Ptr + 2        // xt
 859+ E735             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ E735             >
 859+ E735             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ E735             >
 859+ E735             >//              ______________________________________________________________________
 859+ E735             >//              Dictionary part
 859+ E735             >
 859+ E735             >                org     Dict_Ptr
 859+ 6F1C             >
 859+ 6F1C 33 07       >                dw      mirror_Ptr - $E000
 859+ 6F1E             >
 859+ 6F1E             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 6F1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 859+ 6F1E ~           >
 859+ 6F1E ~           >
 859+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 6F1E             >
 859+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 860+ 6F1E D9                           exx
 861+ 6F1F E1                           pop     hl
 862+ 6F20 5E                           ld      e, (hl)
 863+ 6F21 16 00                        ld      d, 0
 864+ 6F23 23                           inc     hl
 865+ 6F24              Count_Here:
 866+ 6F24 E5                           push    hl
 867+ 6F25 D5                           push    de
 868+ 6F26 D9                           exx
 869+ 6F27                              next
 869+ 6F27 DD E9       >                jp      (ix)
 870+ 6F29              //                pop     hl
 871+ 6F29              //                ld      a, (hl)
 872+ 6F29              //                inc     hl
 873+ 6F29              //                push    hl
 874+ 6F29              //                ld      h, 0
 875+ 6F29              //                ld      l, a
 876+ 6F29              //                push    hl
 877+ 6F29              //                next
 878+ 6F29
 879+ 6F29              //  ______________________________________________________________________
 880+ 6F29              //
 881+ 6F29              // bounds       a n -- a+n n
 882+ 6F29              // given an address and a length ( a n ) calculate the bound addresses
 883+ 6F29              // suitable for DO-LOOP
 884+ 6F29                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 884+ 6F29             >
 884+ 6F29             >Dict_Ptr        defl    $
 884+ 6F29             >
 884+ 6F29             >//              ______________________________________________________________________
 884+ 6F29             >//              Heap part
 884+ 6F29             >
 884+ 6F29             >
 884+ 6F29             >                org     (Heap_Ptr & $1FFF) + $E000
 884+ E735             >
 884+ E735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ E735             >Latest_Definition defl  Heap_Ptr
 884+ E735             >
 884+ E735             >                // dummy db directives used to calculate length of namec
 884+ E735 42 4F 55 4E >                db      "BOUNDS"
 884+ E739 44 53       >
 884+ E73B             >len_NFA         defl    $ - temp_NFA
 884+ E73B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ E735             >
 884+ E735 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ E736 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 884+ E73A 44 53       >
 884+ E73C             >                org     $-1                 // alter last byte of Name just above to set
 884+ E73B D3          >                db      {b $} | END_BIT     // msb as name end
 884+ E73C             >
 884+ E73C 2B 07       >                dw      Prev_Ptr            // Link to previous definition Name
 884+ E73E             >Prev_Ptr        defl    Heap_Ptr
 884+ E73E             >
 884+ E73E             >mirror_Ptr      defl    $
 884+ E73E             >
 884+ E73E 2B 6F       >                dw      Dict_Ptr + 2        // xt
 884+ E740             >Heap_Ptr        defl    $ - $E000           // save current HP
 884+ E740             >
 884+ E740             >Current_HP      defl  $ - $E000             // used to set HP once!
 884+ E740             >
 884+ E740             >//              ______________________________________________________________________
 884+ E740             >//              Dictionary part
 884+ E740             >
 884+ E740             >                org     Dict_Ptr
 884+ 6F29             >
 884+ 6F29 3E 07       >                dw      mirror_Ptr - $E000
 884+ 6F2B             >
 884+ 6F2B             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 6F2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 6F2B ~           >
 884+ 6F2B ~           >
 884+ 6F2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 6F2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 6F2B             >
 884+ 6F2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 6F2B D9                           exx
 886+ 6F2C E1                           pop     hl
 887+ 6F2D D1                           pop     de
 888+ 6F2E 19                           add     hl, de
 889+ 6F2F 18 F3                        jr      Count_Here
 890+ 6F31                              // push    hl
 891+ 6F31                              // push    de
 892+ 6F31                              // exx
 893+ 6F31                              // next
 894+ 6F31
 895+ 6F31              //  ______________________________________________________________________
 896+ 6F31              //
 897+ 6F31              // leave        --
 898+ 6F31              // Compile (leave) to leave current LOOP and jump just after it
 899+ 6F31                              Colon_Def LEAVE, "LEAVE", is_immediate
 899+ 6F31             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 899+ 6F31             >
 899+ 6F31             >Dict_Ptr        defl    $
 899+ 6F31             >
 899+ 6F31             >//              ______________________________________________________________________
 899+ 6F31             >//              Heap part
 899+ 6F31             >
 899+ 6F31             >
 899+ 6F31             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ E740             >
 899+ E740             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ E740             >Latest_Definition defl  Heap_Ptr
 899+ E740             >
 899+ E740             >                // dummy db directives used to calculate length of namec
 899+ E740 4C 45 41 56 >                db      "LEAVE"
 899+ E744 45          >
 899+ E745             >len_NFA         defl    $ - temp_NFA
 899+ E745             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ E740             >
 899+ E740 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ E741 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 899+ E745 45          >
 899+ E746             >                org     $-1                 // alter last byte of Name just above to set
 899+ E745 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ E746             >
 899+ E746 35 07       >                dw      Prev_Ptr            // Link to previous definition Name
 899+ E748             >Prev_Ptr        defl    Heap_Ptr
 899+ E748             >
 899+ E748             >mirror_Ptr      defl    $
 899+ E748             >
 899+ E748 33 6F       >                dw      Dict_Ptr + 2        // xt
 899+ E74A             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ E74A             >
 899+ E74A             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ E74A             >
 899+ E74A             >//              ______________________________________________________________________
 899+ E74A             >//              Dictionary part
 899+ E74A             >
 899+ E74A             >                org     Dict_Ptr
 899+ 6F31             >
 899+ 6F31 48 07       >                dw      mirror_Ptr - $E000
 899+ 6F33             >
 899+ 6F33             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 6F33 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 6F36             >
 899+ 6F36             >
 899+ 6F36             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 6F36             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 6F36             >
 899+ 6F36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 6F36 52 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 901+ 6F3A A6 6B 5C 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 901+ 6F3E 81 6A BC 6B
 902+ 6F42 81 6A 81 6A                  dw      ZERO, ZERO
 903+ 6F46 39 68 2B 69                  dw      SPFETCH, DUP
 904+ 6F4A D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS
 905+ 6F4E 1B 69                        dw      TUCK
 906+ 6F50 64 6B 89 69                  dw      CSP, FETCH
 907+ 6F54 24 69 E5 6B                  dw      SWAP, SUBTRACT
 908+ 6F58 8D 67                        dw      CMOVE
 909+ 6F5A 64 6B 89 69                  dw      CSP, FETCH, CELL_MINUS
 909+ 6F5E D9 68
 910+ 6F60 67 68 07 69                  dw      R_TO, OVER, STORE
 910+ 6F64 93 69
 911+ 6F66 D9 68 81 6A                  dw      CELL_MINUS, ZERO
 912+ 6F6A 24 69 93 69                  dw      SWAP, STORE
 913+ 6F6E 52 68                        dw      EXIT                    // ;
 914+ 6F70
 915+ 6F70              //  ______________________________________________________________________
 916+ 6F70              //
 917+ 6F70              // type         a n --
 918+ 6F70              // Sends to current output channel n characters starting at address a.
 919+ 6F70                              Colon_Def TYPE, "TYPE", is_normal
 919+ 6F70             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 919+ 6F70             >
 919+ 6F70             >Dict_Ptr        defl    $
 919+ 6F70             >
 919+ 6F70             >//              ______________________________________________________________________
 919+ 6F70             >//              Heap part
 919+ 6F70             >
 919+ 6F70             >
 919+ 6F70             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ E74A             >
 919+ E74A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ E74A             >Latest_Definition defl  Heap_Ptr
 919+ E74A             >
 919+ E74A             >                // dummy db directives used to calculate length of namec
 919+ E74A 54 59 50 45 >                db      "TYPE"
 919+ E74E             >len_NFA         defl    $ - temp_NFA
 919+ E74E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ E74A             >
 919+ E74A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ E74B 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 919+ E74F             >                org     $-1                 // alter last byte of Name just above to set
 919+ E74E C5          >                db      {b $} | END_BIT     // msb as name end
 919+ E74F             >
 919+ E74F 40 07       >                dw      Prev_Ptr            // Link to previous definition Name
 919+ E751             >Prev_Ptr        defl    Heap_Ptr
 919+ E751             >
 919+ E751             >mirror_Ptr      defl    $
 919+ E751             >
 919+ E751 72 6F       >                dw      Dict_Ptr + 2        // xt
 919+ E753             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ E753             >
 919+ E753             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ E753             >
 919+ E753             >//              ______________________________________________________________________
 919+ E753             >//              Dictionary part
 919+ E753             >
 919+ E753             >                org     Dict_Ptr
 919+ 6F70             >
 919+ 6F70 51 07       >                dw      mirror_Ptr - $E000
 919+ 6F72             >
 919+ 6F72             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 6F72 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 6F75             >
 919+ 6F75             >
 919+ 6F75             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 6F75             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 6F75             >
 919+ 6F75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 6F75 2B 6F                        dw      BOUNDS                  // bounds
 921+ 6F77 0C 64                        dw      C_Q_DO                  // ?do
 922+ 6F79 0C 00                        dw      Type_Skip - $
 923+ 6F7B              Type_Loop:
 924+ 6F7B 3A 64 9E 69                  dw          I, CFETCH           //      i c@
 925+ 6F7F 60 6C                        dw          EMIT                //      emit
 926+ 6F81 E0 63                        dw      C_LOOP                  // loop
 927+ 6F83 F8 FF                        dw      Type_Loop - $
 928+ 6F85              Type_Skip:
 929+ 6F85 52 68                        dw      EXIT                    // ;
 930+ 6F87
 931+ 6F87              //  ______________________________________________________________________
 932+ 6F87              //
 933+ 6F87              // -trailing    a n1 -- a n2
 934+ 6F87              // Assumes that an n1 bytes-long string is stored at address a
 935+ 6F87              // and the string contains a space delimited word,
 936+ 6F87              // Finds n2 as the position of the first character after the word.
 937+ 6F87                              Colon_Def LTRAILING, "-TRAILING", is_normal
 937+ 6F87             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 937+ 6F87             >
 937+ 6F87             >Dict_Ptr        defl    $
 937+ 6F87             >
 937+ 6F87             >//              ______________________________________________________________________
 937+ 6F87             >//              Heap part
 937+ 6F87             >
 937+ 6F87             >
 937+ 6F87             >                org     (Heap_Ptr & $1FFF) + $E000
 937+ E753             >
 937+ E753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ E753             >Latest_Definition defl  Heap_Ptr
 937+ E753             >
 937+ E753             >                // dummy db directives used to calculate length of namec
 937+ E753 2D 54 52 41 >                db      "-TRAILING"
 937+ E757 49 4C 49 4E >
 937+ E75B 47          >
 937+ E75C             >len_NFA         defl    $ - temp_NFA
 937+ E75C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ E753             >
 937+ E753 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ E754 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 937+ E758 49 4C 49 4E >
 937+ E75C 47          >
 937+ E75D             >                org     $-1                 // alter last byte of Name just above to set
 937+ E75C C7          >                db      {b $} | END_BIT     // msb as name end
 937+ E75D             >
 937+ E75D 4A 07       >                dw      Prev_Ptr            // Link to previous definition Name
 937+ E75F             >Prev_Ptr        defl    Heap_Ptr
 937+ E75F             >
 937+ E75F             >mirror_Ptr      defl    $
 937+ E75F             >
 937+ E75F 89 6F       >                dw      Dict_Ptr + 2        // xt
 937+ E761             >Heap_Ptr        defl    $ - $E000           // save current HP
 937+ E761             >
 937+ E761             >Current_HP      defl  $ - $E000             // used to set HP once!
 937+ E761             >
 937+ E761             >//              ______________________________________________________________________
 937+ E761             >//              Dictionary part
 937+ E761             >
 937+ E761             >                org     Dict_Ptr
 937+ 6F87             >
 937+ 6F87 5F 07       >                dw      mirror_Ptr - $E000
 937+ 6F89             >
 937+ 6F89             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 6F89 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 6F8C             >
 937+ 6F8C             >
 937+ 6F8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 6F8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 6F8C             >
 937+ 6F8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 6F8C 2B 69 81 6A                  dw      DUP, ZERO               // dup 0
 939+ 6F90                                                              // do
 940+ 6F90 0C 64                        dw      C_Q_DO
 941+ 6F92 20 00                        dw      LTrailing_Leave - $
 942+ 6F94              LTrailing_Loop:
 943+ 6F94 67 69 A5 68                  dw          TWO_DUP, PLUS       //      2dup +
 944+ 6F98 C5 68                        dw          ONE_SUBTRACT        //      1-
 945+ 6F9A 9E 69                        dw          CFETCH              //      c@
 946+ 6F9C A4 6A E5 6B                  dw          BL, SUBTRACT        //      bl -
 947+ 6FA0                                                              //      if
 948+ 6FA0 F5 63                        dw          ZBRANCH
 949+ 6FA2 0A 00                        dw          LTrailing_Else - $
 950+ 6FA4 00 64                        dw              C_LEAVE         //          leave
 951+ 6FA6 0C 00                        dw              LTrailing_Leave - $
 952+ 6FA8 E8 63                        dw          BRANCH              //      else
 953+ 6FAA 04 00                        dw          LTrailing_Endif - $
 954+ 6FAC              LTrailing_Else:
 955+ 6FAC C5 68                        dw              ONE_SUBTRACT    //          1-
 956+ 6FAE              LTrailing_Endif:                                //      endif
 957+ 6FAE                                                              // loop
 958+ 6FAE E0 63                        dw      C_LOOP
 959+ 6FB0 E4 FF                        dw      LTrailing_Loop - $
 960+ 6FB2              LTrailing_Leave:
 961+ 6FB2 52 68                        dw      EXIT                    // ;
 962+ 6FB4
 963+ 6FB4              //  ______________________________________________________________________
 964+ 6FB4              //
 965+ 6FB4              // accept       a n1 -- n2
 966+ 6FB4              // Accepts at most n1 characters from terminal and stores them at address a
 967+ 6FB4              // CR stops input. A 'nul' is added as trailer.
 968+ 6FB4              // n2 is the string length. n2 is kept in span user variable also.
 969+ 6FB4                              Colon_Def ACCEPT, "ACCEPT", is_normal
 969+ 6FB4             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 969+ 6FB4             >
 969+ 6FB4             >Dict_Ptr        defl    $
 969+ 6FB4             >
 969+ 6FB4             >//              ______________________________________________________________________
 969+ 6FB4             >//              Heap part
 969+ 6FB4             >
 969+ 6FB4             >
 969+ 6FB4             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ E761             >
 969+ E761             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ E761             >Latest_Definition defl  Heap_Ptr
 969+ E761             >
 969+ E761             >                // dummy db directives used to calculate length of namec
 969+ E761 41 43 43 45 >                db      "ACCEPT"
 969+ E765 50 54       >
 969+ E767             >len_NFA         defl    $ - temp_NFA
 969+ E767             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ E761             >
 969+ E761 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ E762 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 969+ E766 50 54       >
 969+ E768             >                org     $-1                 // alter last byte of Name just above to set
 969+ E767 D4          >                db      {b $} | END_BIT     // msb as name end
 969+ E768             >
 969+ E768 53 07       >                dw      Prev_Ptr            // Link to previous definition Name
 969+ E76A             >Prev_Ptr        defl    Heap_Ptr
 969+ E76A             >
 969+ E76A             >mirror_Ptr      defl    $
 969+ E76A             >
 969+ E76A B6 6F       >                dw      Dict_Ptr + 2        // xt
 969+ E76C             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ E76C             >
 969+ E76C             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ E76C             >
 969+ E76C             >//              ______________________________________________________________________
 969+ E76C             >//              Dictionary part
 969+ E76C             >
 969+ E76C             >                org     Dict_Ptr
 969+ 6FB4             >
 969+ 6FB4 6A 07       >                dw      mirror_Ptr - $E000
 969+ 6FB6             >
 969+ 6FB6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 6FB6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 6FB9             >
 969+ 6FB9             >
 969+ 6FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 6FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 6FB9             >
 969+ 6FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 6FB9 07 69 A5 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 970+ 6FBD 07 69
 971+ 6FBF 81 6A 3D 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 972+ 6FC3                                                              // do
 973+ 6FC3 0C 64                        dw      C_Q_DO
 974+ 6FC5 8C 00                        dw      Accept_Leave - $
 975+ 6FC7              Accept_Loop:
 976+ 6FC7 38 66                        dw          CUR
 977+ 6FC9 10 69 80 66                  dw          DROP, KEY           //      drop key        ( a  c )
 978+ 6FCD 2B 69                        dw          DUP                 //      dup             ( a  c  c )
 979+ 6FCF A3 63 0E 00                  dw          LIT, $0E            //      0E
 980+ 6FD3 C7 6A                        dw          PLUS_ORIGIN         //      +origin
 981+ 6FD5 89 69                        dw          FETCH               //      @               ( a  c  c  del )
 982+ 6FD7 F1 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 983+ 6FD9                                                              //      if
 984+ 6FD9 F5 63                        dw          ZBRANCH
 985+ 6FDB 2C 00                        dw          Accept_Else_0 - $
 986+ 6FDD 10 69                        dw              DROP            //          drop        ( a  )
 987+ 6FDF 2B 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 987+ 6FE3 F1 6B
 988+ 6FE5 88 6A 0C 68                  dw              ONE, AND_OP     //          1 and
 989+ 6FE9 2B 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 990+ 6FEB 67 68                        dw              R_TO            //          r> 2 - + r>
 991+ 6FED E1 68 A5 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 992+ 6FF1 5C 68                        dw              TO_R            //
 993+ 6FF3                                                              //          if
 994+ 6FF3 F5 63                        dw              ZBRANCH
 995+ 6FF5 0A 00                        dw              Accept_Else_1 - $
 996+ 6FF7 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 997+ 6FFB                                                              //          else
 998+ 6FFB E8 63                        dw              BRANCH
 999+ 6FFD 06 00                        dw              Accept_Endif_1 - $
1000+ 6FFF              Accept_Else_1:
1001+ 6FFF A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1002+ 7003              Accept_Endif_1:                                 //          endif
1003+ 7003 E8 63                        dw          BRANCH
1004+ 7005 2E 00                        dw          Accept_Endif_0 - $
1005+ 7007              Accept_Else_0:                                  //      else
1006+ 7007 2B 69                        dw              DUP             //          dup         ( a  c  c )
1007+ 7009 A3 63 0D 00                  dw              LIT, 13         //          13
1008+ 700D F1 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1009+ 700F                                                              //          if
1010+ 700F F5 63                        dw              ZBRANCH
1011+ 7011 0C 00                        dw              Accept_Else_2 - $
1012+ 7013 10 69 A4 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1013+ 7017 81 6A                        dw                  ZERO        //              0       ( a  c  0 )
1014+ 7019                                                              //          else
1015+ 7019 E8 63                        dw              BRANCH
1016+ 701B 04 00                        dw              Accept_Endif_2 - $
1017+ 701D              Accept_Else_2:
1018+ 701D 2B 69                        dw                  DUP         //              dup     ( a  c  c )
1019+ 701F                                                              //          endif
1020+ 701F              Accept_Endif_2:
1021+ 701F 3A 64 A7 69                  dw              I, CSTORE       //          i           ( a  c )
1022+ 7023 2B 69 A4 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1022+ 7027 0A 6C
1023+ 7029                                                              //          if
1024+ 7029 F5 63                        dw              ZBRANCH
1025+ 702B 08 00                        dw              Accept_Endif_3 - $
1026+ 702D 67 68                        dw                  R_TO        //              r>
1027+ 702F C5 68                        dw                  ONE_SUBTRACT//              1-
1028+ 7031 5C 68                        dw                  TO_R        //              >r
1029+ 7033                                                              //          endif
1030+ 7033              Accept_Endif_3:
1031+ 7033              Accept_Endif_0:                                 //      endif
1032+ 7033 60 6C                        dw          EMIT                //      emit
1033+ 7035
1034+ 7035 81 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1034+ 7039 BE 68
1035+ 703B 93 69                        dw          STORE               //          ( zero pad )
1036+ 703D 3A 64                        dw          I                   //      i
1037+ 703F 3A 64 9E 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1037+ 7043 77 68
1038+ 7045 F5 63                        dw          ZBRANCH             //
1039+ 7047 06 00                        dw              Accept_Endif_4 - $
1040+ 7049 00 64                        dw                  C_LEAVE     //              leave
1041+ 704B 06 00                        dw                  Accept_Leave - $
1042+ 704D              Accept_Endif_4:                                 //      endif
1043+ 704D                                                              // loop
1044+ 704D E0 63                        dw      C_LOOP
1045+ 704F 78 FF                        dw      Accept_Loop - $
1046+ 7051              Accept_Leave:
1047+ 7051 24 69 E5 6B                  dw      SWAP, SUBTRACT          // swap -
1048+ 7055 BE 68                        dw      ONE_PLUS                // 1+
1049+ 7057 2B 69 94 6B                  dw      DUP, SPAN, STORE        // dup span !
1049+ 705B 93 69
1050+ 705D 52 68                        dw      EXIT                    // ;
1051+ 705F
1052+ 705F              //  ______________________________________________________________________
1053+ 705F              //
1054+ 705F              // expect      a n --
1055+ 705F              // Accepts at most n1 characters from terminal and stores them at address a
1056+ 705F              // CR stops input. A 'nul' is added as trailer.
1057+ 705F              // n2 is the string length. n2 is kept in span user variable also.
1058+ 705F              //              Colon_Def EXPECT, "EXPECT", is_normal
1059+ 705F              //              dw      ACCEPT, DROP            // accept drop
1060+ 705F              //              dw      EXIT                    // ;
1061+ 705F
1062+ 705F              //  ______________________________________________________________________
1063+ 705F              //
1064+ 705F              // query        --
1065+ 705F              // Accept at most 80 character from console. CR stops.
1066+ 705F              // Text is stored in TIB. Variable IN is zeroed.
1067+ 705F                              Colon_Def QUERY, "QUERY", is_normal
1067+ 705F             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1067+ 705F             >
1067+ 705F             >Dict_Ptr        defl    $
1067+ 705F             >
1067+ 705F             >//              ______________________________________________________________________
1067+ 705F             >//              Heap part
1067+ 705F             >
1067+ 705F             >
1067+ 705F             >                org     (Heap_Ptr & $1FFF) + $E000
1067+ E76C             >
1067+ E76C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1067+ E76C             >Latest_Definition defl  Heap_Ptr
1067+ E76C             >
1067+ E76C             >                // dummy db directives used to calculate length of namec
1067+ E76C 51 55 45 52 >                db      "QUERY"
1067+ E770 59          >
1067+ E771             >len_NFA         defl    $ - temp_NFA
1067+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1067+ E76C             >
1067+ E76C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1067+ E76D 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1067+ E771 59          >
1067+ E772             >                org     $-1                 // alter last byte of Name just above to set
1067+ E771 D9          >                db      {b $} | END_BIT     // msb as name end
1067+ E772             >
1067+ E772 61 07       >                dw      Prev_Ptr            // Link to previous definition Name
1067+ E774             >Prev_Ptr        defl    Heap_Ptr
1067+ E774             >
1067+ E774             >mirror_Ptr      defl    $
1067+ E774             >
1067+ E774 61 70       >                dw      Dict_Ptr + 2        // xt
1067+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
1067+ E776             >
1067+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
1067+ E776             >
1067+ E776             >//              ______________________________________________________________________
1067+ E776             >//              Dictionary part
1067+ E776             >
1067+ E776             >                org     Dict_Ptr
1067+ 705F             >
1067+ 705F 74 07       >                dw      mirror_Ptr - $E000
1067+ 7061             >
1067+ 7061             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1067+ 7061 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1067+ 7064             >
1067+ 7064             >
1067+ 7064             >                endif           ; ok        // for other definitions it "points" the correct handler
1067+ 7064             >                // Use of "; ok" to suppress "warning[fwdref]"
1067+ 7064             >
1067+ 7064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1068+ 7064 E6 6A 89 69                  dw      TIB, FETCH              // tib @
1069+ 7068 A3 63 50 00                  dw      LIT, 80                 // 80
1070+ 706C B6 6F 10 69                  dw      ACCEPT, DROP            // accept drop
1071+ 7070 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1071+ 7074 93 69
1072+ 7076 52 68                        dw      EXIT                    // ;
1073+ 7078
1074+ 7078              //  ______________________________________________________________________
1075+ 7078              //
1076+ 7078              // fill        a n c --
1077+ 7078              // If n > 0, fills n locations starting from address a with the value c.
1078+ 7078                              New_Def FILL, "FILL", is_code, is_normal
1078+ 7078             >
1078+ 7078             >Dict_Ptr        defl    $
1078+ 7078             >
1078+ 7078             >//              ______________________________________________________________________
1078+ 7078             >//              Heap part
1078+ 7078             >
1078+ 7078             >
1078+ 7078             >                org     (Heap_Ptr & $1FFF) + $E000
1078+ E776             >
1078+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ E776             >Latest_Definition defl  Heap_Ptr
1078+ E776             >
1078+ E776             >                // dummy db directives used to calculate length of namec
1078+ E776 46 49 4C 4C >                db      "FILL"
1078+ E77A             >len_NFA         defl    $ - temp_NFA
1078+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ E776             >
1078+ E776 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ E777 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1078+ E77B             >                org     $-1                 // alter last byte of Name just above to set
1078+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
1078+ E77B             >
1078+ E77B 6C 07       >                dw      Prev_Ptr            // Link to previous definition Name
1078+ E77D             >Prev_Ptr        defl    Heap_Ptr
1078+ E77D             >
1078+ E77D             >mirror_Ptr      defl    $
1078+ E77D             >
1078+ E77D 7A 70       >                dw      Dict_Ptr + 2        // xt
1078+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
1078+ E77F             >
1078+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
1078+ E77F             >
1078+ E77F             >//              ______________________________________________________________________
1078+ E77F             >//              Dictionary part
1078+ E77F             >
1078+ E77F             >                org     Dict_Ptr
1078+ 7078             >
1078+ 7078 7D 07       >                dw      mirror_Ptr - $E000
1078+ 707A             >
1078+ 707A             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 707A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1078+ 707A ~           >
1078+ 707A ~           >
1078+ 707A             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 707A             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 707A             >
1078+ 707A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 707A D9                           exx
1080+ 707B D1                           pop     de                  // de has character
1081+ 707C C1                           pop     bc                  // bc has counter
1082+ 707D E1                           pop     hl                  // hl has address, save Instruction Pointer
1083+ 707E              Fill_Loop:
1084+ 707E 78                               ld      a, b
1085+ 707F B1                               or      c
1086+ 7080 28 05                        jr      z, Fill_While_End
1087+ 7082 73                               ld      (hl), e
1088+ 7083 0B                               dec     bc
1089+ 7084 23                               inc     hl
1090+ 7085 18 F7                        jr      Fill_Loop
1091+ 7087              Fill_While_End:
1092+ 7087 D9                           exx
1093+ 7088                              next
1093+ 7088 DD E9       >                jp      (ix)
1094+ 708A
1095+ 708A              //  ______________________________________________________________________
1096+ 708A              //
1097+ 708A              // erase        a n --
1098+ 708A              // If n > 0, fills n locations starting from address a with 'nul' characters.
1099+ 708A                              Colon_Def ERASE, "ERASE", is_normal
1099+ 708A             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1099+ 708A             >
1099+ 708A             >Dict_Ptr        defl    $
1099+ 708A             >
1099+ 708A             >//              ______________________________________________________________________
1099+ 708A             >//              Heap part
1099+ 708A             >
1099+ 708A             >
1099+ 708A             >                org     (Heap_Ptr & $1FFF) + $E000
1099+ E77F             >
1099+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1099+ E77F             >Latest_Definition defl  Heap_Ptr
1099+ E77F             >
1099+ E77F             >                // dummy db directives used to calculate length of namec
1099+ E77F 45 52 41 53 >                db      "ERASE"
1099+ E783 45          >
1099+ E784             >len_NFA         defl    $ - temp_NFA
1099+ E784             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1099+ E77F             >
1099+ E77F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1099+ E780 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1099+ E784 45          >
1099+ E785             >                org     $-1                 // alter last byte of Name just above to set
1099+ E784 C5          >                db      {b $} | END_BIT     // msb as name end
1099+ E785             >
1099+ E785 76 07       >                dw      Prev_Ptr            // Link to previous definition Name
1099+ E787             >Prev_Ptr        defl    Heap_Ptr
1099+ E787             >
1099+ E787             >mirror_Ptr      defl    $
1099+ E787             >
1099+ E787 8C 70       >                dw      Dict_Ptr + 2        // xt
1099+ E789             >Heap_Ptr        defl    $ - $E000           // save current HP
1099+ E789             >
1099+ E789             >Current_HP      defl  $ - $E000             // used to set HP once!
1099+ E789             >
1099+ E789             >//              ______________________________________________________________________
1099+ E789             >//              Dictionary part
1099+ E789             >
1099+ E789             >                org     Dict_Ptr
1099+ 708A             >
1099+ 708A 87 07       >                dw      mirror_Ptr - $E000
1099+ 708C             >
1099+ 708C             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1099+ 708C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1099+ 708F             >
1099+ 708F             >
1099+ 708F             >                endif           ; ok        // for other definitions it "points" the correct handler
1099+ 708F             >                // Use of "; ok" to suppress "warning[fwdref]"
1099+ 708F             >
1099+ 708F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1100+ 708F 81 6A 7A 70                  dw      ZERO, FILL              // 0 fill
1101+ 7093 52 68                        dw      EXIT                    // ;
1102+ 7095
1103+ 7095              //  ______________________________________________________________________
1104+ 7095              //
1105+ 7095              // blank        a n --
1106+ 7095              // If n > 0, fills n locations starting from address a with 'nul' characters.
1107+ 7095                              Colon_Def BLANK, "BLANK", is_normal
1107+ 7095             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1107+ 7095             >
1107+ 7095             >Dict_Ptr        defl    $
1107+ 7095             >
1107+ 7095             >//              ______________________________________________________________________
1107+ 7095             >//              Heap part
1107+ 7095             >
1107+ 7095             >
1107+ 7095             >                org     (Heap_Ptr & $1FFF) + $E000
1107+ E789             >
1107+ E789             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ E789             >Latest_Definition defl  Heap_Ptr
1107+ E789             >
1107+ E789             >                // dummy db directives used to calculate length of namec
1107+ E789 42 4C 41 4E >                db      "BLANK"
1107+ E78D 4B          >
1107+ E78E             >len_NFA         defl    $ - temp_NFA
1107+ E78E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ E789             >
1107+ E789 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ E78A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1107+ E78E 4B          >
1107+ E78F             >                org     $-1                 // alter last byte of Name just above to set
1107+ E78E CB          >                db      {b $} | END_BIT     // msb as name end
1107+ E78F             >
1107+ E78F 7F 07       >                dw      Prev_Ptr            // Link to previous definition Name
1107+ E791             >Prev_Ptr        defl    Heap_Ptr
1107+ E791             >
1107+ E791             >mirror_Ptr      defl    $
1107+ E791             >
1107+ E791 97 70       >                dw      Dict_Ptr + 2        // xt
1107+ E793             >Heap_Ptr        defl    $ - $E000           // save current HP
1107+ E793             >
1107+ E793             >Current_HP      defl  $ - $E000             // used to set HP once!
1107+ E793             >
1107+ E793             >//              ______________________________________________________________________
1107+ E793             >//              Dictionary part
1107+ E793             >
1107+ E793             >                org     Dict_Ptr
1107+ 7095             >
1107+ 7095 91 07       >                dw      mirror_Ptr - $E000
1107+ 7097             >
1107+ 7097             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 7097 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 709A             >
1107+ 709A             >
1107+ 709A             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 709A             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 709A             >
1107+ 709A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 709A A4 6A 7A 70                  dw      BL, FILL                // bl fill
1109+ 709E 52 68                        dw      EXIT                    // ;
1110+ 70A0
1111+ 70A0              //  ______________________________________________________________________
1112+ 70A0              //
1113+ 70A0              // hold         c --
1114+ 70A0              // Used between <# and #> to insert a character c in numeric formatting.
1115+ 70A0                              Colon_Def HOLD, "HOLD", is_normal
1115+ 70A0             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1115+ 70A0             >
1115+ 70A0             >Dict_Ptr        defl    $
1115+ 70A0             >
1115+ 70A0             >//              ______________________________________________________________________
1115+ 70A0             >//              Heap part
1115+ 70A0             >
1115+ 70A0             >
1115+ 70A0             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E793             >
1115+ E793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E793             >Latest_Definition defl  Heap_Ptr
1115+ E793             >
1115+ E793             >                // dummy db directives used to calculate length of namec
1115+ E793 48 4F 4C 44 >                db      "HOLD"
1115+ E797             >len_NFA         defl    $ - temp_NFA
1115+ E797             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E793             >
1115+ E793 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E794 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1115+ E798             >                org     $-1                 // alter last byte of Name just above to set
1115+ E797 C4          >                db      {b $} | END_BIT     // msb as name end
1115+ E798             >
1115+ E798 89 07       >                dw      Prev_Ptr            // Link to previous definition Name
1115+ E79A             >Prev_Ptr        defl    Heap_Ptr
1115+ E79A             >
1115+ E79A             >mirror_Ptr      defl    $
1115+ E79A             >
1115+ E79A A2 70       >                dw      Dict_Ptr + 2        // xt
1115+ E79C             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E79C             >
1115+ E79C             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E79C             >
1115+ E79C             >//              ______________________________________________________________________
1115+ E79C             >//              Dictionary part
1115+ E79C             >
1115+ E79C             >                org     Dict_Ptr
1115+ 70A0             >
1115+ 70A0 9A 07       >                dw      mirror_Ptr - $E000
1115+ 70A2             >
1115+ 70A2             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 70A2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 70A5             >
1115+ 70A5             >
1115+ 70A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 70A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 70A5             >
1115+ 70A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 70A5 9D 6A                        dw      NEG_ONE                 // -1
1117+ 70A7 70 6B 71 69                  dw      HLD, PLUSSTORE          // hld +!
1118+ 70AB 70 6B 89 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1118+ 70AF A7 69
1119+ 70B1 52 68                        dw      EXIT                    // ;
1120+ 70B3
1121+ 70B3              //  ______________________________________________________________________
1122+ 70B3              //
1123+ 70B3              // pad         -- a
1124+ 70B3              // leaves the buffer text address. This is at a fixed distance over HERE.
1125+ 70B3                              Colon_Def PAD, "PAD", is_normal
1125+ 70B3             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1125+ 70B3             >
1125+ 70B3             >Dict_Ptr        defl    $
1125+ 70B3             >
1125+ 70B3             >//              ______________________________________________________________________
1125+ 70B3             >//              Heap part
1125+ 70B3             >
1125+ 70B3             >
1125+ 70B3             >                org     (Heap_Ptr & $1FFF) + $E000
1125+ E79C             >
1125+ E79C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ E79C             >Latest_Definition defl  Heap_Ptr
1125+ E79C             >
1125+ E79C             >                // dummy db directives used to calculate length of namec
1125+ E79C 50 41 44    >                db      "PAD"
1125+ E79F             >len_NFA         defl    $ - temp_NFA
1125+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ E79C             >
1125+ E79C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ E79D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1125+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
1125+ E79F C4          >                db      {b $} | END_BIT     // msb as name end
1125+ E7A0             >
1125+ E7A0 93 07       >                dw      Prev_Ptr            // Link to previous definition Name
1125+ E7A2             >Prev_Ptr        defl    Heap_Ptr
1125+ E7A2             >
1125+ E7A2             >mirror_Ptr      defl    $
1125+ E7A2             >
1125+ E7A2 B5 70       >                dw      Dict_Ptr + 2        // xt
1125+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
1125+ E7A4             >
1125+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
1125+ E7A4             >
1125+ E7A4             >//              ______________________________________________________________________
1125+ E7A4             >//              Dictionary part
1125+ E7A4             >
1125+ E7A4             >                org     Dict_Ptr
1125+ 70B3             >
1125+ 70B3 A2 07       >                dw      mirror_Ptr - $E000
1125+ 70B5             >
1125+ 70B5             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 70B5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1125+ 70B8             >
1125+ 70B8             >
1125+ 70B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 70B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 70B8             >
1125+ 70B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 70B8 A6 6B                        dw      HERE                    // here
1127+ 70BA A3 63 44 00                  dw      LIT, 68                 // 68
1128+ 70BE A5 68                        dw      PLUS                    // +
1129+ 70C0 52 68                        dw      EXIT                    // ;
1130+ 70C2
1131+ 70C2              //  ______________________________________________________________________
1132+ 70C2              //
1133+ 70C2              // word         c -- a
1134+ 70C2              // reads characters from input streams until it encouners a c delimiter.
1135+ 70C2              // Stores that packet so it starts from HERE
1136+ 70C2              // WORD leaves a counter as first byte and ends the packet with two spaces.
1137+ 70C2              // Other occurrences of c are ignored.
1138+ 70C2              // If BLK is zero, text is taken from terminal buffer TIB.
1139+ 70C2              // Otherwise text is taken from the disk-block given by BLK.
1140+ 70C2              // "in" variable is incremented of the number of character read.
1141+ 70C2              // The number of characters read is given by ENCLOSE.
1142+ 70C2                              Colon_Def WORD, "WORD", is_normal
1142+ 70C2             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1142+ 70C2             >
1142+ 70C2             >Dict_Ptr        defl    $
1142+ 70C2             >
1142+ 70C2             >//              ______________________________________________________________________
1142+ 70C2             >//              Heap part
1142+ 70C2             >
1142+ 70C2             >
1142+ 70C2             >                org     (Heap_Ptr & $1FFF) + $E000
1142+ E7A4             >
1142+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ E7A4             >Latest_Definition defl  Heap_Ptr
1142+ E7A4             >
1142+ E7A4             >                // dummy db directives used to calculate length of namec
1142+ E7A4 57 4F 52 44 >                db      "WORD"
1142+ E7A8             >len_NFA         defl    $ - temp_NFA
1142+ E7A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ E7A4             >
1142+ E7A4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ E7A5 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1142+ E7A9             >                org     $-1                 // alter last byte of Name just above to set
1142+ E7A8 C4          >                db      {b $} | END_BIT     // msb as name end
1142+ E7A9             >
1142+ E7A9 9C 07       >                dw      Prev_Ptr            // Link to previous definition Name
1142+ E7AB             >Prev_Ptr        defl    Heap_Ptr
1142+ E7AB             >
1142+ E7AB             >mirror_Ptr      defl    $
1142+ E7AB             >
1142+ E7AB C4 70       >                dw      Dict_Ptr + 2        // xt
1142+ E7AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1142+ E7AD             >
1142+ E7AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1142+ E7AD             >
1142+ E7AD             >//              ______________________________________________________________________
1142+ E7AD             >//              Dictionary part
1142+ E7AD             >
1142+ E7AD             >                org     Dict_Ptr
1142+ 70C2             >
1142+ 70C2 AB 07       >                dw      mirror_Ptr - $E000
1142+ 70C4             >
1142+ 70C4             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 70C4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 70C7             >
1142+ 70C7             >
1142+ 70C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 70C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 70C7             >
1142+ 70C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 70C7 22 6B 89 69                  dw      BLK, FETCH              // blk @
1144+ 70CB                                                              // if
1145+ 70CB F5 63                        dw      ZBRANCH
1146+ 70CD 0C 00                        dw      Word_Else - $
1147+ 70CF 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1148+ 70D3 08 79                        dw          BLOCK               //      block ( forward )
1149+ 70D5                                                              // else
1150+ 70D5 E8 63                        dw      BRANCH
1151+ 70D7 06 00                        dw      Word_Endif - $
1152+ 70D9              Word_Else:
1153+ 70D9 E6 6A 89 69                  dw         TIB, FETCH           //      tib @
1154+ 70DD              Word_Endif:                                     // endif
1155+ 70DD 28 6B 89 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1155+ 70E1 A5 68
1156+ 70E3 24 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1157+ 70E7 A6 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1157+ 70EB 22 00 97 70
1158+ 70EF 28 6B 71 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1159+ 70F3 07 69 E5 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1159+ 70F7 5C 68
1160+ 70F9 72 68 A6 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1160+ 70FD A7 69
1161+ 70FF A5 68                        dw      PLUS                    // +
1162+ 7101 A6 6B BE 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1162+ 7105 67 68
1163+ 7107 8D 67                        dw      CMOVE                   // cmove
1164+ 7109 A6 6B                        dw      HERE                    // here
1165+ 710B 52 68                        dw      EXIT                    // ;
1166+ 710D
1167+ 710D              //  ______________________________________________________________________
1168+ 710D              //
1169+ 710D              // (.")         --
1170+ 710D              // Direct procedure compiled by ." and  .(  It executes TYPE.
1171+ 710D                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1171+ 710D             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1171+ 710D             >
1171+ 710D             >Dict_Ptr        defl    $
1171+ 710D             >
1171+ 710D             >//              ______________________________________________________________________
1171+ 710D             >//              Heap part
1171+ 710D             >
1171+ 710D             >
1171+ 710D             >                org     (Heap_Ptr & $1FFF) + $E000
1171+ E7AD             >
1171+ E7AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ E7AD             >Latest_Definition defl  Heap_Ptr
1171+ E7AD             >
1171+ E7AD             >                // dummy db directives used to calculate length of namec
1171+ E7AD 28 2E 22 29 >                db      '(.")'
1171+ E7B1             >len_NFA         defl    $ - temp_NFA
1171+ E7B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ E7AD             >
1171+ E7AD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ E7AE 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1171+ E7B2             >                org     $-1                 // alter last byte of Name just above to set
1171+ E7B1 A9          >                db      {b $} | END_BIT     // msb as name end
1171+ E7B2             >
1171+ E7B2 A4 07       >                dw      Prev_Ptr            // Link to previous definition Name
1171+ E7B4             >Prev_Ptr        defl    Heap_Ptr
1171+ E7B4             >
1171+ E7B4             >mirror_Ptr      defl    $
1171+ E7B4             >
1171+ E7B4 0F 71       >                dw      Dict_Ptr + 2        // xt
1171+ E7B6             >Heap_Ptr        defl    $ - $E000           // save current HP
1171+ E7B6             >
1171+ E7B6             >Current_HP      defl  $ - $E000             // used to set HP once!
1171+ E7B6             >
1171+ E7B6             >//              ______________________________________________________________________
1171+ E7B6             >//              Dictionary part
1171+ E7B6             >
1171+ E7B6             >                org     Dict_Ptr
1171+ 710D             >
1171+ 710D B4 07       >                dw      mirror_Ptr - $E000
1171+ 710F             >
1171+ 710F             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 710F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1171+ 7112             >
1171+ 7112             >
1171+ 7112             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 7112             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 7112             >
1171+ 7112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 7112 72 68 1E 6F                  dw      R_OP, COUNT             // r count
1173+ 7116 2B 69 BE 68                  dw      DUP, ONE_PLUS           // dup 1+
1174+ 711A 67 68 A5 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1174+ 711E 5C 68
1175+ 7120 72 6F                        dw      TYPE                    // type
1176+ 7122 52 68                        dw      EXIT                    // ;
1177+ 7124
1178+ 7124              //  ______________________________________________________________________
1179+ 7124              //
1180+ 7124              // char         -- c
1181+ 7124              // get first character from next input word
1182+ 7124                              Colon_Def CHAR,  "CHAR", is_normal
1182+ 7124             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1182+ 7124             >
1182+ 7124             >Dict_Ptr        defl    $
1182+ 7124             >
1182+ 7124             >//              ______________________________________________________________________
1182+ 7124             >//              Heap part
1182+ 7124             >
1182+ 7124             >
1182+ 7124             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E7B6             >
1182+ E7B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E7B6             >Latest_Definition defl  Heap_Ptr
1182+ E7B6             >
1182+ E7B6             >                // dummy db directives used to calculate length of namec
1182+ E7B6 43 48 41 52 >                db      "CHAR"
1182+ E7BA             >len_NFA         defl    $ - temp_NFA
1182+ E7BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E7B6             >
1182+ E7B6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E7B7 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1182+ E7BB             >                org     $-1                 // alter last byte of Name just above to set
1182+ E7BA D2          >                db      {b $} | END_BIT     // msb as name end
1182+ E7BB             >
1182+ E7BB AD 07       >                dw      Prev_Ptr            // Link to previous definition Name
1182+ E7BD             >Prev_Ptr        defl    Heap_Ptr
1182+ E7BD             >
1182+ E7BD             >mirror_Ptr      defl    $
1182+ E7BD             >
1182+ E7BD 26 71       >                dw      Dict_Ptr + 2        // xt
1182+ E7BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E7BF             >
1182+ E7BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E7BF             >
1182+ E7BF             >//              ______________________________________________________________________
1182+ E7BF             >//              Dictionary part
1182+ E7BF             >
1182+ E7BF             >                org     Dict_Ptr
1182+ 7124             >
1182+ 7124 BD 07       >                dw      mirror_Ptr - $E000
1182+ 7126             >
1182+ 7126             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 7126 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1182+ 7129             >
1182+ 7129             >
1182+ 7129             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 7129             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 7129             >
1182+ 7129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 7129 A4 6A C4 70                  dw      BL, WORD                // bl word
1184+ 712D BE 68 9E 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1185+ 7131 52 68                        dw      EXIT                    // ;
1186+ 7133
1187+ 7133              //  ______________________________________________________________________
1188+ 7133              //
1189+ 7133              // ,"           --
1190+ 7133              // compiles a string terminated by " as a counted string from next input stream
1191+ 7133                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1191+ 7133             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1191+ 7133             >
1191+ 7133             >Dict_Ptr        defl    $
1191+ 7133             >
1191+ 7133             >//              ______________________________________________________________________
1191+ 7133             >//              Heap part
1191+ 7133             >
1191+ 7133             >
1191+ 7133             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E7BF             >
1191+ E7BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E7BF             >Latest_Definition defl  Heap_Ptr
1191+ E7BF             >
1191+ E7BF             >                // dummy db directives used to calculate length of namec
1191+ E7BF 2C 22       >                db      ',"'
1191+ E7C1             >len_NFA         defl    $ - temp_NFA
1191+ E7C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E7BF             >
1191+ E7BF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E7C0 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1191+ E7C2             >                org     $-1                 // alter last byte of Name just above to set
1191+ E7C1 A2          >                db      {b $} | END_BIT     // msb as name end
1191+ E7C2             >
1191+ E7C2 B6 07       >                dw      Prev_Ptr            // Link to previous definition Name
1191+ E7C4             >Prev_Ptr        defl    Heap_Ptr
1191+ E7C4             >
1191+ E7C4             >mirror_Ptr      defl    $
1191+ E7C4             >
1191+ E7C4 35 71       >                dw      Dict_Ptr + 2        // xt
1191+ E7C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E7C6             >
1191+ E7C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E7C6             >
1191+ E7C6             >//              ______________________________________________________________________
1191+ E7C6             >//              Dictionary part
1191+ E7C6             >
1191+ E7C6             >                org     Dict_Ptr
1191+ 7133             >
1191+ 7133 C4 07       >                dw      mirror_Ptr - $E000
1191+ 7135             >
1191+ 7135             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 7135 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 7138             >
1191+ 7138             >
1191+ 7138             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 7138             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 7138             >
1191+ 7138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 7138 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1193+ 713C C4 70                        dw      WORD                    // word
1194+ 713E 9E 69 BE 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1195+ 7142 B1 6B                        dw      ALLOT                   // allot
1196+ 7144 81 6A CB 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1197+ 7148 52 68                        dw      EXIT
1198+ 714A
1199+ 714A              //  ______________________________________________________________________
1200+ 714A              //
1201+ 714A              // .c           c --
1202+ 714A              // intermediate general purpose string builder, used by ." and .(
1203+ 714A                              Colon_Def DOT_C,  ".C", is_immediate
1203+ 714A             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1203+ 714A             >
1203+ 714A             >Dict_Ptr        defl    $
1203+ 714A             >
1203+ 714A             >//              ______________________________________________________________________
1203+ 714A             >//              Heap part
1203+ 714A             >
1203+ 714A             >
1203+ 714A             >                org     (Heap_Ptr & $1FFF) + $E000
1203+ E7C6             >
1203+ E7C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ E7C6             >Latest_Definition defl  Heap_Ptr
1203+ E7C6             >
1203+ E7C6             >                // dummy db directives used to calculate length of namec
1203+ E7C6 2E 43       >                db      ".C"
1203+ E7C8             >len_NFA         defl    $ - temp_NFA
1203+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ E7C6             >
1203+ E7C6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ E7C7 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1203+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
1203+ E7C8 C3          >                db      {b $} | END_BIT     // msb as name end
1203+ E7C9             >
1203+ E7C9 BF 07       >                dw      Prev_Ptr            // Link to previous definition Name
1203+ E7CB             >Prev_Ptr        defl    Heap_Ptr
1203+ E7CB             >
1203+ E7CB             >mirror_Ptr      defl    $
1203+ E7CB             >
1203+ E7CB 4C 71       >                dw      Dict_Ptr + 2        // xt
1203+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
1203+ E7CD             >
1203+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
1203+ E7CD             >
1203+ E7CD             >//              ______________________________________________________________________
1203+ E7CD             >//              Dictionary part
1203+ E7CD             >
1203+ E7CD             >                org     Dict_Ptr
1203+ 714A             >
1203+ 714A CB 07       >                dw      mirror_Ptr - $E000
1203+ 714C             >
1203+ 714C             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 714C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 714F             >
1203+ 714F             >
1203+ 714F             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 714F             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 714F             >
1203+ 714F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 714F 4C 6B 89 69                  dw      STATE, FETCH            // state @
1205+ 7153                                                              // if
1206+ 7153 F5 63                        dw      ZBRANCH
1207+ 7155 12 00                        dw      Dot_C_Else - $
1208+ 7157 52 6E 0F 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1209+ 715B C4 70 9E 69                  dw          WORD, CFETCH        //      word c@
1210+ 715F BE 68 B1 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1211+ 7163                                                              // else
1212+ 7163 E8 63                        dw      BRANCH
1213+ 7165 08 00                        dw      Dot_C_Endif - $
1214+ 7167              Dot_C_Else:
1215+ 7167 C4 70 1E 6F                  dw          WORD, COUNT, TYPE   //      word count type
1215+ 716B 72 6F
1216+ 716D              Dot_C_Endif:                                    // endif
1217+ 716D 52 68                        dw      EXIT                    ;
1218+ 716F
1219+ 716F              //  ______________________________________________________________________
1220+ 716F              //
1221+ 716F              // ."           c --
1222+ 716F                              Colon_Def DOT_QUOTE,  '."', is_immediate
1222+ 716F             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1222+ 716F             >
1222+ 716F             >Dict_Ptr        defl    $
1222+ 716F             >
1222+ 716F             >//              ______________________________________________________________________
1222+ 716F             >//              Heap part
1222+ 716F             >
1222+ 716F             >
1222+ 716F             >                org     (Heap_Ptr & $1FFF) + $E000
1222+ E7CD             >
1222+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ E7CD             >Latest_Definition defl  Heap_Ptr
1222+ E7CD             >
1222+ E7CD             >                // dummy db directives used to calculate length of namec
1222+ E7CD 2E 22       >                db      '."'
1222+ E7CF             >len_NFA         defl    $ - temp_NFA
1222+ E7CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ E7CD             >
1222+ E7CD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ E7CE 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1222+ E7D0             >                org     $-1                 // alter last byte of Name just above to set
1222+ E7CF A2          >                db      {b $} | END_BIT     // msb as name end
1222+ E7D0             >
1222+ E7D0 C6 07       >                dw      Prev_Ptr            // Link to previous definition Name
1222+ E7D2             >Prev_Ptr        defl    Heap_Ptr
1222+ E7D2             >
1222+ E7D2             >mirror_Ptr      defl    $
1222+ E7D2             >
1222+ E7D2 71 71       >                dw      Dict_Ptr + 2        // xt
1222+ E7D4             >Heap_Ptr        defl    $ - $E000           // save current HP
1222+ E7D4             >
1222+ E7D4             >Current_HP      defl  $ - $E000             // used to set HP once!
1222+ E7D4             >
1222+ E7D4             >//              ______________________________________________________________________
1222+ E7D4             >//              Dictionary part
1222+ E7D4             >
1222+ E7D4             >                org     Dict_Ptr
1222+ 716F             >
1222+ 716F D2 07       >                dw      mirror_Ptr - $E000
1222+ 7171             >
1222+ 7171             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 7171 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1222+ 7174             >
1222+ 7174             >
1222+ 7174             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 7174             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 7174             >
1222+ 7174             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 7174 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1224+ 7178 4C 71                        dw      DOT_C                   // [compile] .c
1225+ 717A 52 68                        dw      EXIT                    // ; immediate
1226+ 717C
1227+ 717C              //  ______________________________________________________________________
1228+ 717C              //
1229+ 717C              // .(           c --
1230+ 717C                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1230+ 717C             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1230+ 717C             >
1230+ 717C             >Dict_Ptr        defl    $
1230+ 717C             >
1230+ 717C             >//              ______________________________________________________________________
1230+ 717C             >//              Heap part
1230+ 717C             >
1230+ 717C             >
1230+ 717C             >                org     (Heap_Ptr & $1FFF) + $E000
1230+ E7D4             >
1230+ E7D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ E7D4             >Latest_Definition defl  Heap_Ptr
1230+ E7D4             >
1230+ E7D4             >                // dummy db directives used to calculate length of namec
1230+ E7D4 2E 28       >                db      ".("
1230+ E7D6             >len_NFA         defl    $ - temp_NFA
1230+ E7D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ E7D4             >
1230+ E7D4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ E7D5 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1230+ E7D7             >                org     $-1                 // alter last byte of Name just above to set
1230+ E7D6 A8          >                db      {b $} | END_BIT     // msb as name end
1230+ E7D7             >
1230+ E7D7 CD 07       >                dw      Prev_Ptr            // Link to previous definition Name
1230+ E7D9             >Prev_Ptr        defl    Heap_Ptr
1230+ E7D9             >
1230+ E7D9             >mirror_Ptr      defl    $
1230+ E7D9             >
1230+ E7D9 7E 71       >                dw      Dict_Ptr + 2        // xt
1230+ E7DB             >Heap_Ptr        defl    $ - $E000           // save current HP
1230+ E7DB             >
1230+ E7DB             >Current_HP      defl  $ - $E000             // used to set HP once!
1230+ E7DB             >
1230+ E7DB             >//              ______________________________________________________________________
1230+ E7DB             >//              Dictionary part
1230+ E7DB             >
1230+ E7DB             >                org     Dict_Ptr
1230+ 717C             >
1230+ 717C D9 07       >                dw      mirror_Ptr - $E000
1230+ 717E             >
1230+ 717E             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 717E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1230+ 7181             >
1230+ 7181             >
1230+ 7181             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 7181             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 7181             >
1230+ 7181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 7181 A3 63 29 00                  dw      LIT, ")"                // [char] )
1232+ 7185 4C 71                        dw      DOT_C                   // [compile] .c
1233+ 7187 52 68                        dw      EXIT                    // ; immediate
1234+ 7189
1235+ 7189              //  ______________________________________________________________________
1236+ 7189              //
1237+ 7189              // (sgn)        a -- a f
1238+ 7189              // determines if char in addr a is a sign (+ or -), and in that case increments
1239+ 7189              // a flag. Returns f as the sign, true for negative, false for positive.
1240+ 7189              // called by NUMBER and (EXP)
1241+ 7189                              Colon_Def CSGN,  "(SGN)", is_normal
1241+ 7189             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1241+ 7189             >
1241+ 7189             >Dict_Ptr        defl    $
1241+ 7189             >
1241+ 7189             >//              ______________________________________________________________________
1241+ 7189             >//              Heap part
1241+ 7189             >
1241+ 7189             >
1241+ 7189             >                org     (Heap_Ptr & $1FFF) + $E000
1241+ E7DB             >
1241+ E7DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ E7DB             >Latest_Definition defl  Heap_Ptr
1241+ E7DB             >
1241+ E7DB             >                // dummy db directives used to calculate length of namec
1241+ E7DB 28 53 47 4E >                db      "(SGN)"
1241+ E7DF 29          >
1241+ E7E0             >len_NFA         defl    $ - temp_NFA
1241+ E7E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ E7DB             >
1241+ E7DB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ E7DC 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1241+ E7E0 29          >
1241+ E7E1             >                org     $-1                 // alter last byte of Name just above to set
1241+ E7E0 A9          >                db      {b $} | END_BIT     // msb as name end
1241+ E7E1             >
1241+ E7E1 D4 07       >                dw      Prev_Ptr            // Link to previous definition Name
1241+ E7E3             >Prev_Ptr        defl    Heap_Ptr
1241+ E7E3             >
1241+ E7E3             >mirror_Ptr      defl    $
1241+ E7E3             >
1241+ E7E3 8B 71       >                dw      Dict_Ptr + 2        // xt
1241+ E7E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1241+ E7E5             >
1241+ E7E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1241+ E7E5             >
1241+ E7E5             >//              ______________________________________________________________________
1241+ E7E5             >//              Dictionary part
1241+ E7E5             >
1241+ E7E5             >                org     Dict_Ptr
1241+ 7189             >
1241+ 7189 E3 07       >                dw      mirror_Ptr - $E000
1241+ 718B             >
1241+ 718B             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 718B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1241+ 718E             >
1241+ 718E             >
1241+ 718E             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 718E             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 718E             >
1241+ 718E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 718E 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1242+ 7192 9E 69
1243+ 7194 2B 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1243+ 7198 2D 00 F1 6B
1244+ 719C                                                              // if
1245+ 719C F5 63                        dw      ZBRANCH
1246+ 719E 12 00                        dw      CSgn_Else_0 - $
1247+ 71A0 10 69                        dw          DROP                //      drop
1248+ 71A2 BE 68                        dw          ONE_PLUS            //      1+
1249+ 71A4 88 6A 58 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1249+ 71A8 71 69
1250+ 71AA 88 6A                        dw          ONE                 //      1
1251+ 71AC                                                              // else
1252+ 71AC E8 63                        dw      BRANCH
1253+ 71AE 16 00                        dw      CSgn_Endif_0 - $
1254+ 71B0              CSgn_Else_0:
1255+ 71B0 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1255+ 71B4 F1 6B
1256+ 71B6                                                              //      if
1257+ 71B6 F5 63                        dw          ZBRANCH
1258+ 71B8 0A 00                        dw          CSgn_Endif_1 - $
1259+ 71BA BE 68                        dw              ONE_PLUS        //          1+
1260+ 71BC 88 6A 58 6B                  dw              ONE, DPL        //                dw      EXIT
C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm(1261): error: Unrecognized instruction: 1 dpl
C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm(1261): error: Unexpected: 1 dpl
1261+ 71C0                        1 dpl
1262+ 71C0 71 69                        dw              PLUSSTORE       //          +!
1263+ 71C2              CSgn_Endif_1                                    //      endif
1264+ 71C2 81 6A                        dw          ZERO                //      0
1265+ 71C4              CSgn_Endif_0:                                   // endif
1266+ 71C4 52 68                        dw      EXIT
1267+ 71C6
1268+ 71C6              //  ______________________________________________________________________
1269+ 71C6              //
1270+ 71C6              // (number)     d a -- d1 a1
1271+ 71C6              // using the current BASE parse characters stored in address a
1272+ 71C6              // accumulating a double precision integer d
1273+ 71C6              // the process stops at the first not-convertible character
1274+ 71C6              // A double-number is kept in CPU registers as HLDE.
1275+ 71C6              // On the stack a double number is treated as two single numbers
1276+ 71C6              // where HL is on the top of the stack and DE is the second from top,
1277+ 71C6              // so in the stack memory it appears as LHED.
1278+ 71C6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1279+ 71C6                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1279+ 71C6             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1279+ 71C6             >
1279+ 71C6             >Dict_Ptr        defl    $
1279+ 71C6             >
1279+ 71C6             >//              ______________________________________________________________________
1279+ 71C6             >//              Heap part
1279+ 71C6             >
1279+ 71C6             >
1279+ 71C6             >                org     (Heap_Ptr & $1FFF) + $E000
1279+ E7E5             >
1279+ E7E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1279+ E7E5             >Latest_Definition defl  Heap_Ptr
1279+ E7E5             >
1279+ E7E5             >                // dummy db directives used to calculate length of namec
1279+ E7E5 28 4E 55 4D >                db      "(NUMBER)"
1279+ E7E9 42 45 52 29 >
1279+ E7ED             >len_NFA         defl    $ - temp_NFA
1279+ E7ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1279+ E7E5             >
1279+ E7E5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1279+ E7E6 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1279+ E7EA 42 45 52 29 >
1279+ E7EE             >                org     $-1                 // alter last byte of Name just above to set
1279+ E7ED A9          >                db      {b $} | END_BIT     // msb as name end
1279+ E7EE             >
1279+ E7EE DB 07       >                dw      Prev_Ptr            // Link to previous definition Name
1279+ E7F0             >Prev_Ptr        defl    Heap_Ptr
1279+ E7F0             >
1279+ E7F0             >mirror_Ptr      defl    $
1279+ E7F0             >
1279+ E7F0 C8 71       >                dw      Dict_Ptr + 2        // xt
1279+ E7F2             >Heap_Ptr        defl    $ - $E000           // save current HP
1279+ E7F2             >
1279+ E7F2             >Current_HP      defl  $ - $E000             // used to set HP once!
1279+ E7F2             >
1279+ E7F2             >//              ______________________________________________________________________
1279+ E7F2             >//              Dictionary part
1279+ E7F2             >
1279+ E7F2             >                org     Dict_Ptr
1279+ 71C6             >
1279+ 71C6 F0 07       >                dw      mirror_Ptr - $E000
1279+ 71C8             >
1279+ 71C8             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1279+ 71C8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1279+ 71CB             >
1279+ 71CB             >
1279+ 71CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1279+ 71CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1279+ 71CB             >
1279+ 71CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1280+ 71CB                                                              // begin
1281+ 71CB              CNumber_Begin:
1282+ 71CB BE 68                        dw          ONE_PLUS            //      1+
1283+ 71CD 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r
1284+ 71D1 9E 69                        dw          CFETCH              //      @
1285+ 71D3 52 6B 89 69                  dw          BASE, FETCH         //      base @
1286+ 71D7 4D 64                        dw          DIGIT               //      digit
1287+ 71D9                                                              // while
1288+ 71D9 F5 63                        dw      ZBRANCH
1289+ 71DB 2C 00                        dw      CNumber_While_end - $
1290+ 71DD 24 69                        dw          SWAP                //      swap
1291+ 71DF 52 6B 89 69                  dw          BASE, FETCH         //      base @
1292+ 71E3 B1 67                        dw          UM_MUL              //      um*
1293+ 71E5 10 69 32 69                  dw          DROP, ROT           //      drop rot
1294+ 71E9 52 6B 89 69                  dw          BASE, FETCH         //      base @
1295+ 71ED B1 67                        dw          UM_MUL              //      um*
1296+ 71EF AF 68                        dw          DPLUS               //      d+
1297+ 71F1 58 6B 89 69                  dw          DPL, FETCH          //      dpl @
1298+ 71F5 BE 68                        dw          ONE_PLUS            //      1+
1299+ 71F7                                                              //      if
1300+ 71F7 F5 63                        dw          ZBRANCH
1301+ 71F9 08 00                        dw          CNumber_Endif - $
1302+ 71FB 88 6A 58 6B                  dw              ONE, DPL        //          1 dpl
1303+ 71FF 71 69                        dw              PLUSSTORE       //          +!
1304+ 7201              CNumber_Endif:                                  //      endif
1305+ 7201 67 68                        dw             R_TO             //      r>  ( balance rp )
1306+ 7203 E8 63                        dw      BRANCH
1307+ 7205 C6 FF                        dw      CNumber_Begin - $
1308+ 7207              CNumber_While_end:                              // repeat
1309+ 7207 67 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1310+ 7209 52 68                        dw      EXIT                    // ;
1311+ 720B
1312+ 720B              //  ______________________________________________________________________
1313+ 720B              //
1314+ 720B              // prefix
1315+ 720B                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1315+ 720B             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1315+ 720B             >
1315+ 720B             >Dict_Ptr        defl    $
1315+ 720B             >
1315+ 720B             >//              ______________________________________________________________________
1315+ 720B             >//              Heap part
1315+ 720B             >
1315+ 720B             >
1315+ 720B             >                org     (Heap_Ptr & $1FFF) + $E000
1315+ E7F2             >
1315+ E7F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1315+ E7F2             >Latest_Definition defl  Heap_Ptr
1315+ E7F2             >
1315+ E7F2             >                // dummy db directives used to calculate length of namec
1315+ E7F2 28 50 52 45 >                db      "(PREFIX)"
1315+ E7F6 46 49 58 29 >
1315+ E7FA             >len_NFA         defl    $ - temp_NFA
1315+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1315+ E7F2             >
1315+ E7F2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1315+ E7F3 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1315+ E7F7 46 49 58 29 >
1315+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1315+ E7FA A9          >                db      {b $} | END_BIT     // msb as name end
1315+ E7FB             >
1315+ E7FB E5 07       >                dw      Prev_Ptr            // Link to previous definition Name
1315+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1315+ E7FD             >
1315+ E7FD             >mirror_Ptr      defl    $
1315+ E7FD             >
1315+ E7FD 0D 72       >                dw      Dict_Ptr + 2        // xt
1315+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1315+ E7FF             >
1315+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1315+ E7FF             >
1315+ E7FF             >//              ______________________________________________________________________
1315+ E7FF             >//              Dictionary part
1315+ E7FF             >
1315+ E7FF             >                org     Dict_Ptr
1315+ 720B             >
1315+ 720B FD 07       >                dw      mirror_Ptr - $E000
1315+ 720D             >
1315+ 720D             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1315+ 720D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1315+ 7210             >
1315+ 7210             >
1315+ 7210             >                endif           ; ok        // for other definitions it "points" the correct handler
1315+ 7210             >                // Use of "; ok" to suppress "warning[fwdref]"
1315+ 7210             >
1315+ 7210             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1316+ 7210 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1316+ 7214 9E 69
1317+ 7216 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1317+ 721A F1 6B
1318+ 721C                                                              // if
1319+ 721C F5 63                        dw      ZBRANCH
1320+ 721E 0C 00                        dw      CPrefix_Endif_0 - $
1321+ 7220 BE 68                        dw          ONE_PLUS            //      1+
C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm(1322): error: Expression expected
1322+ 7222 A3 63 10 00                  dw          LIT, 16,
1323+ 7226 52 6B 93 69                  dw          BASE, STORE         //      16 base !
1324+ 722A              CPrefix_Endif_0:                                // endif
1325+ 722A 52 68                        dw      EXIT
1326+ 722C
1327+ 722C              //  ______________________________________________________________________
1328+ 722C              //
1329+ 722C              // number       a -- d
1330+ 722C                              Colon_Def NUMBER,  "NUMBER", is_normal
1330+ 722C             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1330+ 722C             >
1330+ 722C             >Dict_Ptr        defl    $
1330+ 722C             >
1330+ 722C             >//              ______________________________________________________________________
1330+ 722C             >//              Heap part
1330+ 722C             >
1330+ 722C             >
1330+ 722C             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E7FF             >
1330+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E7FF             >Latest_Definition defl  Heap_Ptr
1330+ E7FF             >
1330+ E7FF             >                // dummy db directives used to calculate length of namec
1330+ E7FF 4E 55 4D 42 >                db      "NUMBER"
1330+ E803 45 52       >
1330+ E805             >len_NFA         defl    $ - temp_NFA
1330+ E805             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E7FF             >
1330+ E7FF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E800 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1330+ E804 45 52       >
1330+ E806             >                org     $-1                 // alter last byte of Name just above to set
1330+ E805 D2          >                db      {b $} | END_BIT     // msb as name end
1330+ E806             >
1330+ E806 F2 07       >                dw      Prev_Ptr            // Link to previous definition Name
1330+ E808             >Prev_Ptr        defl    Heap_Ptr
1330+ E808             >
1330+ E808             >mirror_Ptr      defl    $
1330+ E808             >
1330+ E808 2E 72       >                dw      Dict_Ptr + 2        // xt
1330+ E80A             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E80A             >
1330+ E80A             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E80A             >
1330+ E80A             >//              ______________________________________________________________________
1330+ E80A             >//              Dictionary part
1330+ E80A             >
1330+ E80A             >                org     Dict_Ptr
1330+ 722C             >
1330+ 722C 08 08       >                dw      mirror_Ptr - $E000
1330+ 722E             >
1330+ 722E             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 722E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 7231             >
1330+ 7231             >
1330+ 7231             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 7231             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 7231             >
1330+ 7231             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 7231 81 6A 81 6A                  dw      ZERO, ZERO              // 0 0
1332+ 7235 32 69                        dw      ROT                     // rot
1333+ 7237 8B 71 5C 68                  dw      CSGN, TO_R              // (sgn) >r
1334+ 723B 9D 6A 58 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1334+ 723F 93 69
1335+ 7241 52 6B 89 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1335+ 7245 5C 68
1336+ 7247 0D 72                        dw      CPREFIX                 // (prefix)   // ***
1337+ 7249 C8 71                        dw      CNUMBER                 // (number)
1338+ 724B 2B 69 9E 69                  dw      DUP, CFETCH             // dup c@
1339+ 724F A3 63 2E 00                  dw      LIT, ".", EQUALS        // [char] . =  ( decimal point )
1339+ 7253 F1 6B
1340+ 7255                                                              // if
1341+ 7255 F5 63                        dw      ZBRANCH
1342+ 7257 0A 00                        dw      Number_Endif_1 - $
1343+ 7259 81 6A 58 6B                  dw          ZERO, DPL, STORE    //      0 dpl !
1343+ 725D 93 69
1344+ 725F C8 71                        dw          CNUMBER             //      (number)
1345+ 7261              Number_Endif_1:                                 // endif
1346+ 7261 9E 69 A4 6A                  dw      CFETCH, BL              // c@ bl
1347+ 7265 E5 6B 81 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1347+ 7269 E2 6D
1348+ 726B 67 68 52 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1348+ 726F 93 69
1349+ 7271 67 68                        dw      R_TO                    // r>
1350+ 7273                                                              // if
1351+ 7273 F5 63                        dw      ZBRANCH
1352+ 7275 04 00                        dw      Number_Endif_2 - $
1353+ 7277 F4 68                        dw          DMINUS              //      dminus
1354+ 7279              Number_Endif_2:                                 // endif
1355+ 7279 52 68                        dw      EXIT                    // ;
1356+ 727B
1357+ 727B              //  ______________________________________________________________________
1358+ 727B              //
1359+ 727B              // twofind      a -- d
1360+ 727B                              Colon_Def TWOFIND,  "2FIND", is_normal
1360+ 727B             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1360+ 727B             >
1360+ 727B             >Dict_Ptr        defl    $
1360+ 727B             >
1360+ 727B             >//              ______________________________________________________________________
1360+ 727B             >//              Heap part
1360+ 727B             >
1360+ 727B             >
1360+ 727B             >                org     (Heap_Ptr & $1FFF) + $E000
1360+ E80A             >
1360+ E80A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ E80A             >Latest_Definition defl  Heap_Ptr
1360+ E80A             >
1360+ E80A             >                // dummy db directives used to calculate length of namec
1360+ E80A 32 46 49 4E >                db      "2FIND"
1360+ E80E 44          >
1360+ E80F             >len_NFA         defl    $ - temp_NFA
1360+ E80F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ E80A             >
1360+ E80A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ E80B 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1360+ E80F 44          >
1360+ E810             >                org     $-1                 // alter last byte of Name just above to set
1360+ E80F C4          >                db      {b $} | END_BIT     // msb as name end
1360+ E810             >
1360+ E810 FF 07       >                dw      Prev_Ptr            // Link to previous definition Name
1360+ E812             >Prev_Ptr        defl    Heap_Ptr
1360+ E812             >
1360+ E812             >mirror_Ptr      defl    $
1360+ E812             >
1360+ E812 7D 72       >                dw      Dict_Ptr + 2        // xt
1360+ E814             >Heap_Ptr        defl    $ - $E000           // save current HP
1360+ E814             >
1360+ E814             >Current_HP      defl  $ - $E000             // used to set HP once!
1360+ E814             >
1360+ E814             >//              ______________________________________________________________________
1360+ E814             >//              Dictionary part
1360+ E814             >
1360+ E814             >                org     Dict_Ptr
1360+ 727B             >
1360+ 727B 12 08       >                dw      mirror_Ptr - $E000
1360+ 727D             >
1360+ 727D             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 727D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1360+ 7280             >
1360+ 7280             >
1360+ 7280             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 7280             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 7280             >
1360+ 7280             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 7280 5C 68 72 68                  dw      TO_R, R_OP              // >r r@
1362+ 7284 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1362+ 7288 89 69
1363+ 728A BB 64                        dw      C_FIND                  // (find)
1364+ 728C 50 6C                        dw      QDUP                    // ?dup
1365+ 728E 77 68                        dw      ZEQUAL                  // 0=
1366+ 7290                                                              // if
1367+ 7290 F5 63                        dw      ZBRANCH
1368+ 7292 0C 00                        dw      LFind_Endif - $
1369+ 7294 72 68                        dw          R_OP                //      r@
1370+ 7296                              // dw          LATEST               //      latest
1371+ 7296 46 6B 89 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1371+ 729A 89 69
1372+ 729C BB 64                        dw          C_FIND              //      (find)
1373+ 729E              LFind_Endif:                                    // endif
1374+ 729E 67 68 10 69                  dw      R_TO, DROP              // r> drop
1375+ 72A2 52 68                        dw      EXIT                    // ;
1376+ 72A4
1377+ 72A4              //  ______________________________________________________________________
1378+ 72A4              //
1379+ 72A4              // -find        a -- d
1380+ 72A4                              Colon_Def LFIND,  "-FIND", is_normal
1380+ 72A4             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1380+ 72A4             >
1380+ 72A4             >Dict_Ptr        defl    $
1380+ 72A4             >
1380+ 72A4             >//              ______________________________________________________________________
1380+ 72A4             >//              Heap part
1380+ 72A4             >
1380+ 72A4             >
1380+ 72A4             >                org     (Heap_Ptr & $1FFF) + $E000
1380+ E814             >
1380+ E814             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ E814             >Latest_Definition defl  Heap_Ptr
1380+ E814             >
1380+ E814             >                // dummy db directives used to calculate length of namec
1380+ E814 2D 46 49 4E >                db      "-FIND"
1380+ E818 44          >
1380+ E819             >len_NFA         defl    $ - temp_NFA
1380+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ E814             >
1380+ E814 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ E815 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1380+ E819 44          >
1380+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1380+ E819 C4          >                db      {b $} | END_BIT     // msb as name end
1380+ E81A             >
1380+ E81A 0A 08       >                dw      Prev_Ptr            // Link to previous definition Name
1380+ E81C             >Prev_Ptr        defl    Heap_Ptr
1380+ E81C             >
1380+ E81C             >mirror_Ptr      defl    $
1380+ E81C             >
1380+ E81C A6 72       >                dw      Dict_Ptr + 2        // xt
1380+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1380+ E81E             >
1380+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1380+ E81E             >
1380+ E81E             >//              ______________________________________________________________________
1380+ E81E             >//              Dictionary part
1380+ E81E             >
1380+ E81E             >                org     Dict_Ptr
1380+ 72A4             >
1380+ 72A4 1C 08       >                dw      mirror_Ptr - $E000
1380+ 72A6             >
1380+ 72A6             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 72A6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1380+ 72A9             >
1380+ 72A9             >
1380+ 72A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 72A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 72A9             >
1380+ 72A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 72A9 A4 6A C4 70                  dw      BL, WORD                // bl word
1382+ 72AD 7D 72                        dw      TWOFIND                 // 2find
1383+ 72AF 52 68                        dw      EXIT                    // ;
1384+ 72B1
1385+ 72B1              //  ______________________________________________________________________
1386+ 72B1              //
1387+ 72B1              // (abort)      --
1388+ 72B1                              Colon_Def CABORT,  "(ABORT)", is_normal
1388+ 72B1             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1388+ 72B1             >
1388+ 72B1             >Dict_Ptr        defl    $
1388+ 72B1             >
1388+ 72B1             >//              ______________________________________________________________________
1388+ 72B1             >//              Heap part
1388+ 72B1             >
1388+ 72B1             >
1388+ 72B1             >                org     (Heap_Ptr & $1FFF) + $E000
1388+ E81E             >
1388+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ E81E             >Latest_Definition defl  Heap_Ptr
1388+ E81E             >
1388+ E81E             >                // dummy db directives used to calculate length of namec
1388+ E81E 28 41 42 4F >                db      "(ABORT)"
1388+ E822 52 54 29    >
1388+ E825             >len_NFA         defl    $ - temp_NFA
1388+ E825             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ E81E             >
1388+ E81E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ E81F 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1388+ E823 52 54 29    >
1388+ E826             >                org     $-1                 // alter last byte of Name just above to set
1388+ E825 A9          >                db      {b $} | END_BIT     // msb as name end
1388+ E826             >
1388+ E826 14 08       >                dw      Prev_Ptr            // Link to previous definition Name
1388+ E828             >Prev_Ptr        defl    Heap_Ptr
1388+ E828             >
1388+ E828             >mirror_Ptr      defl    $
1388+ E828             >
1388+ E828 B3 72       >                dw      Dict_Ptr + 2        // xt
1388+ E82A             >Heap_Ptr        defl    $ - $E000           // save current HP
1388+ E82A             >
1388+ E82A             >Current_HP      defl  $ - $E000             // used to set HP once!
1388+ E82A             >
1388+ E82A             >//              ______________________________________________________________________
1388+ E82A             >//              Dictionary part
1388+ E82A             >
1388+ E82A             >                org     Dict_Ptr
1388+ 72B1             >
1388+ 72B1 28 08       >                dw      mirror_Ptr - $E000
1388+ 72B3             >
1388+ 72B3             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 72B3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1388+ 72B6             >
1388+ 72B6             >
1388+ 72B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 72B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 72B6             >
1388+ 72B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 72B6 46 75                        dw      ABORT                   // abort
1390+ 72B8 52 68                        dw      EXIT                    // ;
1391+ 72BA
1392+ 72BA              //  ______________________________________________________________________
1393+ 72BA              //
1394+ 72BA              // error        n --
1395+ 72BA              // raise an error
1396+ 72BA              // if WARNING is 0, prints "MSG#n".
1397+ 72BA              // if WARNING is 1, prints line n of screen 4.
1398+ 72BA              // if WARNING is -1 does (ABORT) that normally does ABORT
1399+ 72BA              // value can be negative or beyond block 4.
1400+ 72BA                              Colon_Def ERROR,  "ERROR", is_normal
1400+ 72BA             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1400+ 72BA             >
1400+ 72BA             >Dict_Ptr        defl    $
1400+ 72BA             >
1400+ 72BA             >//              ______________________________________________________________________
1400+ 72BA             >//              Heap part
1400+ 72BA             >
1400+ 72BA             >
1400+ 72BA             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E82A             >
1400+ E82A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E82A             >Latest_Definition defl  Heap_Ptr
1400+ E82A             >
1400+ E82A             >                // dummy db directives used to calculate length of namec
1400+ E82A 45 52 52 4F >                db      "ERROR"
1400+ E82E 52          >
1400+ E82F             >len_NFA         defl    $ - temp_NFA
1400+ E82F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E82A             >
1400+ E82A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E82B 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1400+ E82F 52          >
1400+ E830             >                org     $-1                 // alter last byte of Name just above to set
1400+ E82F D2          >                db      {b $} | END_BIT     // msb as name end
1400+ E830             >
1400+ E830 1E 08       >                dw      Prev_Ptr            // Link to previous definition Name
1400+ E832             >Prev_Ptr        defl    Heap_Ptr
1400+ E832             >
1400+ E832             >mirror_Ptr      defl    $
1400+ E832             >
1400+ E832 BC 72       >                dw      Dict_Ptr + 2        // xt
1400+ E834             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E834             >
1400+ E834             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E834             >
1400+ E834             >//              ______________________________________________________________________
1400+ E834             >//              Dictionary part
1400+ E834             >
1400+ E834             >                org     Dict_Ptr
1400+ 72BA             >
1400+ 72BA 32 08       >                dw      mirror_Ptr - $E000
1400+ 72BC             >
1400+ 72BC             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 72BC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 72BF             >
1400+ 72BF             >
1400+ 72BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 72BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 72BF             >
1400+ 72BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 72BF F2 6A 89 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1401+ 72C3 8A 68
1402+ 72C5                                                              // if
1403+ 72C5 F5 63                        dw      ZBRANCH
1404+ 72C7 04 00                        dw      Error_Endif_1 - $
1405+ 72C9 B3 72                        dw          CABORT              //      (abort)
1406+ 72CB              Error_Endif_1:                                  // endif
1407+ 72CB A6 6B 1E 6F                  dw      HERE, COUNT, TYPE       // here count type
1407+ 72CF 72 6F
1408+ 72D1 0F 71                        dw      C_DOT_QUOTE             // .( ? )
1409+ 72D3 02 3F 20                     db      2, "? "
1410+ 72D6 1B 77                        dw      MESSAGE                 // message  ( forward )
1411+ 72D8 DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1411+ 72DC 42 68
1412+ 72DE 22 6B 89 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1412+ 72E2 50 6C
1413+ 72E4                                                              // if
1414+ 72E4 F5 63                        dw      ZBRANCH
1415+ 72E6 08 00                        dw      Error_Endif_2 - $
1416+ 72E8 28 6B 89 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1416+ 72EC 24 69
1417+ 72EE              Error_Endif_2:                                  // endif
1418+ 72EE 0A 75                        dw      QUIT                    // quit ( forward )
1419+ 72F0 52 68                        dw      EXIT                    // ;
1420+ 72F2              //  ______________________________________________________________________
1421+ 72F2              //
1422+ 72F2              // id.          nfa --
1423+ 72F2                              Colon_Def ID_DOT,  "ID.", is_normal
1423+ 72F2             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1423+ 72F2             >
1423+ 72F2             >Dict_Ptr        defl    $
1423+ 72F2             >
1423+ 72F2             >//              ______________________________________________________________________
1423+ 72F2             >//              Heap part
1423+ 72F2             >
1423+ 72F2             >
1423+ 72F2             >                org     (Heap_Ptr & $1FFF) + $E000
1423+ E834             >
1423+ E834             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1423+ E834             >Latest_Definition defl  Heap_Ptr
1423+ E834             >
1423+ E834             >                // dummy db directives used to calculate length of namec
1423+ E834 49 44 2E    >                db      "ID."
1423+ E837             >len_NFA         defl    $ - temp_NFA
1423+ E837             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1423+ E834             >
1423+ E834 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1423+ E835 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1423+ E838             >                org     $-1                 // alter last byte of Name just above to set
1423+ E837 AE          >                db      {b $} | END_BIT     // msb as name end
1423+ E838             >
1423+ E838 2A 08       >                dw      Prev_Ptr            // Link to previous definition Name
1423+ E83A             >Prev_Ptr        defl    Heap_Ptr
1423+ E83A             >
1423+ E83A             >mirror_Ptr      defl    $
1423+ E83A             >
1423+ E83A F4 72       >                dw      Dict_Ptr + 2        // xt
1423+ E83C             >Heap_Ptr        defl    $ - $E000           // save current HP
1423+ E83C             >
1423+ E83C             >Current_HP      defl  $ - $E000             // used to set HP once!
1423+ E83C             >
1423+ E83C             >//              ______________________________________________________________________
1423+ E83C             >//              Dictionary part
1423+ E83C             >
1423+ E83C             >                org     Dict_Ptr
1423+ 72F2             >
1423+ 72F2 3A 08       >                dw      mirror_Ptr - $E000
1423+ 72F4             >
1423+ 72F4             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1423+ 72F4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1423+ 72F7             >
1423+ 72F7             >
1423+ 72F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1423+ 72F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1423+ 72F7             >
1423+ 72F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1424+ 72F7 06 6D                        dw      QTOHEAP
1425+ 72F9 2B 69 88 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1425+ 72FD 82 6C
1426+ 72FF BE 68                        dw      ONE_PLUS                // 1+
1427+ 7301 07 69 E5 6B                  dw      OVER, SUBTRACT          // over -
1428+ 7305 2B 69 5C 68                  dw      DUP, TO_R               // >r
1429+ 7309 B5 70 24 69                  dw      PAD, SWAP               // pad swap
1430+ 730D 8D 67                        dw      CMOVE                   // cmove
1431+ 730F B5 70 BE 68                  dw      PAD, ONE_PLUS           // pad 1+
1432+ 7313 67 68 C5 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1433+ 7317 72 6F 77 6C                  dw      TYPE, SPACE             // type
1434+ 731B 52 68                        dw      EXIT                    // ;
1435+ 731D
1436+ 731D              //  ______________________________________________________________________
1437+ 731D              //
1438+ 731D              // code         -- cccc
1439+ 731D                              Colon_Def CODE,  "CODE", is_normal
1439+ 731D             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1439+ 731D             >
1439+ 731D             >Dict_Ptr        defl    $
1439+ 731D             >
1439+ 731D             >//              ______________________________________________________________________
1439+ 731D             >//              Heap part
1439+ 731D             >
1439+ 731D             >
1439+ 731D             >                org     (Heap_Ptr & $1FFF) + $E000
1439+ E83C             >
1439+ E83C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1439+ E83C             >Latest_Definition defl  Heap_Ptr
1439+ E83C             >
1439+ E83C             >                // dummy db directives used to calculate length of namec
1439+ E83C 43 4F 44 45 >                db      "CODE"
1439+ E840             >len_NFA         defl    $ - temp_NFA
1439+ E840             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1439+ E83C             >
1439+ E83C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1439+ E83D 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1439+ E841             >                org     $-1                 // alter last byte of Name just above to set
1439+ E840 C5          >                db      {b $} | END_BIT     // msb as name end
1439+ E841             >
1439+ E841 34 08       >                dw      Prev_Ptr            // Link to previous definition Name
1439+ E843             >Prev_Ptr        defl    Heap_Ptr
1439+ E843             >
1439+ E843             >mirror_Ptr      defl    $
1439+ E843             >
1439+ E843 1F 73       >                dw      Dict_Ptr + 2        // xt
1439+ E845             >Heap_Ptr        defl    $ - $E000           // save current HP
1439+ E845             >
1439+ E845             >Current_HP      defl  $ - $E000             // used to set HP once!
1439+ E845             >
1439+ E845             >//              ______________________________________________________________________
1439+ E845             >//              Dictionary part
1439+ E845             >
1439+ E845             >                org     Dict_Ptr
1439+ 731D             >
1439+ 731D 43 08       >                dw      mirror_Ptr - $E000
1439+ 731F             >
1439+ 731F             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1439+ 731F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1439+ 7322             >
1439+ 7322             >
1439+ 7322             >                endif           ; ok        // for other definitions it "points" the correct handler
1439+ 7322             >                // Use of "; ok" to suppress "warning[fwdref]"
1439+ 7322             >
1439+ 7322             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1440+ 7322 A6 72                        dw      LFIND                   // -find
1441+ 7324                                                              // if
1442+ 7324 F5 63                        dw      ZBRANCH
1443+ 7326 10 00                        dw      Code_Endif - $
1444+ 7328 10 69                        dw          DROP                //      drop
1445+ 732A 6C 6D F4 72                  dw          TO_NAME, ID_DOT     //      >name id.
1446+ 732E A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1446+ 7332 1B 77
1447+ 7334 77 6C                        dw          SPACE               //      space
1448+ 7336              Code_Endif:                                     // endif
1449+ 7336 A6 6B                        dw      HERE                    // here
1450+ 7338                                                              // ( ---- here begins NFA ---- )
1451+ 7338 2B 69 9E 69                  dw      DUP, CFETCH             // dup c@
1452+ 733C EC 6A 89 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1452+ 7340 2A 6C
1453+ 7342 BE 68                        dw      ONE_PLUS                // 1+
1454+ 7344 2B 69 B1 6B                  dw      DUP, ALLOT              // dup allot
1455+ 7348 D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1456+ 734C 5C 68                        dw      TO_R                    // >r
1457+ 734E 2B 69                        dw      DUP                     // dup
1458+ 7350 A3 63                        dw      LIT
1459+ 7352 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1460+ 7354 80 69                        dw      TOGGLE                  // toggle
1461+ 7356 A6 6B C5 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1462+ 735A A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1462+ 735E 80 69
1463+ 7360                                                              // ( ---- here is LFA ---- )
1464+ 7360 46 6B 89 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1464+ 7364 89 69
1465+ 7366 BC 6B                        dw      COMMA
1466+ 7368 2B 69 D4 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1466+ 736C BC 6B
1467+ 736E 17 6D                        dw      HP_FETCH                // hp@
1468+ 7370 46 6B 89 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1468+ 7374 93 69
1469+ 7376 17 6D E8 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1470+ 737A 72 68 8D 67                  dw      R_OP, CMOVE
1471+ 737E 72 68 E6 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1471+ 7382 B1 6B
1472+ 7384 67 68 16 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1472+ 7388 71 69
1473+ 738A 17 6D D9 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1474+ 738E BC 6B                        dw      COMMA
1475+ 7390 81 6A 29 6D                  dw      ZERO, SKIP_HP_PAGE
1476+ 7394                                                              // ( ---- here is LFA ---- )
1477+ 7394 52 68                        dw      EXIT                    // ;
1478+ 7396
1479+ 7396              //  ______________________________________________________________________
1480+ 7396              //
1481+ 7396              // create       -- cccc     ( compile time )
1482+ 7396              //              -- a        ( run time )
1483+ 7396                              Colon_Def CREATE,  "CREATE", is_normal
1483+ 7396             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1483+ 7396             >
1483+ 7396             >Dict_Ptr        defl    $
1483+ 7396             >
1483+ 7396             >//              ______________________________________________________________________
1483+ 7396             >//              Heap part
1483+ 7396             >
1483+ 7396             >
1483+ 7396             >                org     (Heap_Ptr & $1FFF) + $E000
1483+ E845             >
1483+ E845             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ E845             >Latest_Definition defl  Heap_Ptr
1483+ E845             >
1483+ E845             >                // dummy db directives used to calculate length of namec
1483+ E845 43 52 45 41 >                db      "CREATE"
1483+ E849 54 45       >
1483+ E84B             >len_NFA         defl    $ - temp_NFA
1483+ E84B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ E845             >
1483+ E845 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ E846 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1483+ E84A 54 45       >
1483+ E84C             >                org     $-1                 // alter last byte of Name just above to set
1483+ E84B C5          >                db      {b $} | END_BIT     // msb as name end
1483+ E84C             >
1483+ E84C 3C 08       >                dw      Prev_Ptr            // Link to previous definition Name
1483+ E84E             >Prev_Ptr        defl    Heap_Ptr
1483+ E84E             >
1483+ E84E             >mirror_Ptr      defl    $
1483+ E84E             >
1483+ E84E 98 73       >                dw      Dict_Ptr + 2        // xt
1483+ E850             >Heap_Ptr        defl    $ - $E000           // save current HP
1483+ E850             >
1483+ E850             >Current_HP      defl  $ - $E000             // used to set HP once!
1483+ E850             >
1483+ E850             >//              ______________________________________________________________________
1483+ E850             >//              Dictionary part
1483+ E850             >
1483+ E850             >                org     Dict_Ptr
1483+ 7396             >
1483+ 7396 4E 08       >                dw      mirror_Ptr - $E000
1483+ 7398             >
1483+ 7398             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 7398 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1483+ 739B             >
1483+ 739B             >
1483+ 739B             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 739B             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 739B             >
1483+ 739B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 739B 1F 73 8E 6E                  dw      CODE, SMUDGE            // code smudge
1485+ 739F A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1485+ 73A3 CB 6B
1486+ 73A5 A3 63 68 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1486+ 73A9 BC 6B
1487+ 73AB CA 6E                        dw      C_SEMICOLON_CODE
1488+ 73AD                              // this routine is called from the call coded in CFA
1489+ 73AD              Create_Ptr:
1490+ 73AD
1491+ 73AD
1492+ 73AD
1493+ 73AD                              next
1493+ 73AD DD E9       >                jp      (ix)
1494+ 73AF
1495+ 73AF              //  ______________________________________________________________________
1496+ 73AF              //
1497+ 73AF              // [compile]    -- cccc     ( compile time )
1498+ 73AF                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1498+ 73AF             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1498+ 73AF             >
1498+ 73AF             >Dict_Ptr        defl    $
1498+ 73AF             >
1498+ 73AF             >//              ______________________________________________________________________
1498+ 73AF             >//              Heap part
1498+ 73AF             >
1498+ 73AF             >
1498+ 73AF             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E850             >
1498+ E850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E850             >Latest_Definition defl  Heap_Ptr
1498+ E850             >
1498+ E850             >                // dummy db directives used to calculate length of namec
1498+ E850 5B 43 4F 4D >                db      "[COMPILE]"
1498+ E854 50 49 4C 45 >
1498+ E858 5D          >
1498+ E859             >len_NFA         defl    $ - temp_NFA
1498+ E859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E850             >
1498+ E850 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E851 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1498+ E855 50 49 4C 45 >
1498+ E859 5D          >
1498+ E85A             >                org     $-1                 // alter last byte of Name just above to set
1498+ E859 DD          >                db      {b $} | END_BIT     // msb as name end
1498+ E85A             >
1498+ E85A 45 08       >                dw      Prev_Ptr            // Link to previous definition Name
1498+ E85C             >Prev_Ptr        defl    Heap_Ptr
1498+ E85C             >
1498+ E85C             >mirror_Ptr      defl    $
1498+ E85C             >
1498+ E85C B1 73       >                dw      Dict_Ptr + 2        // xt
1498+ E85E             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E85E             >
1498+ E85E             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E85E             >
1498+ E85E             >//              ______________________________________________________________________
1498+ E85E             >//              Dictionary part
1498+ E85E             >
1498+ E85E             >                org     Dict_Ptr
1498+ 73AF             >
1498+ 73AF 5C 08       >                dw      mirror_Ptr - $E000
1498+ 73B1             >
1498+ 73B1             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 73B1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 73B4             >
1498+ 73B4             >
1498+ 73B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 73B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 73B4             >
1498+ 73B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 73B4 A6 72                        dw      LFIND                   // -find      (  cfa  b  f  )
1500+ 73B6 77 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1501+ 73B8 81 6A E2 6D                  dw      ZERO, QERROR            // 0 ?error
1502+ 73BC 10 69                        dw      DROP                    // drop       (  cfa  )
1503+ 73BE BC 6B                        dw      COMMA                   // ,
1504+ 73C0 52 68                        dw      EXIT                    // ; immediate
1505+ 73C2
1506+ 73C2              //  ______________________________________________________________________
1507+ 73C2              //
1508+ 73C2              // literal      n --      ( compile time )
1509+ 73C2                              Colon_Def LITERAL,  "LITERAL", is_immediate
1509+ 73C2             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1509+ 73C2             >
1509+ 73C2             >Dict_Ptr        defl    $
1509+ 73C2             >
1509+ 73C2             >//              ______________________________________________________________________
1509+ 73C2             >//              Heap part
1509+ 73C2             >
1509+ 73C2             >
1509+ 73C2             >                org     (Heap_Ptr & $1FFF) + $E000
1509+ E85E             >
1509+ E85E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1509+ E85E             >Latest_Definition defl  Heap_Ptr
1509+ E85E             >
1509+ E85E             >                // dummy db directives used to calculate length of namec
1509+ E85E 4C 49 54 45 >                db      "LITERAL"
1509+ E862 52 41 4C    >
1509+ E865             >len_NFA         defl    $ - temp_NFA
1509+ E865             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1509+ E85E             >
1509+ E85E C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1509+ E85F 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1509+ E863 52 41 4C    >
1509+ E866             >                org     $-1                 // alter last byte of Name just above to set
1509+ E865 CC          >                db      {b $} | END_BIT     // msb as name end
1509+ E866             >
1509+ E866 50 08       >                dw      Prev_Ptr            // Link to previous definition Name
1509+ E868             >Prev_Ptr        defl    Heap_Ptr
1509+ E868             >
1509+ E868             >mirror_Ptr      defl    $
1509+ E868             >
1509+ E868 C4 73       >                dw      Dict_Ptr + 2        // xt
1509+ E86A             >Heap_Ptr        defl    $ - $E000           // save current HP
1509+ E86A             >
1509+ E86A             >Current_HP      defl  $ - $E000             // used to set HP once!
1509+ E86A             >
1509+ E86A             >//              ______________________________________________________________________
1509+ E86A             >//              Dictionary part
1509+ E86A             >
1509+ E86A             >                org     Dict_Ptr
1509+ 73C2             >
1509+ 73C2 68 08       >                dw      mirror_Ptr - $E000
1509+ 73C4             >
1509+ 73C4             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1509+ 73C4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1509+ 73C7             >
1509+ 73C7             >
1509+ 73C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1509+ 73C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1509+ 73C7             >
1509+ 73C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1510+ 73C7 4C 6B 89 69                  dw      STATE, FETCH            // state @
1511+ 73CB                                                              // if
1512+ 73CB F5 63                        dw      ZBRANCH
1513+ 73CD 08 00                        dw      Literal_Endif - $
1514+ 73CF 52 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1515+ 73D3 BC 6B                        dw          COMMA               //      ,
1516+ 73D5              Literal_Endif:                                  // endif
1517+ 73D5 52 68                        dw      EXIT                    // ; immediate
1518+ 73D7
1519+ 73D7              //  ______________________________________________________________________
1520+ 73D7              //
1521+ 73D7              // dliteral     n --      ( compile time )
1522+ 73D7                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1522+ 73D7             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1522+ 73D7             >
1522+ 73D7             >Dict_Ptr        defl    $
1522+ 73D7             >
1522+ 73D7             >//              ______________________________________________________________________
1522+ 73D7             >//              Heap part
1522+ 73D7             >
1522+ 73D7             >
1522+ 73D7             >                org     (Heap_Ptr & $1FFF) + $E000
1522+ E86A             >
1522+ E86A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1522+ E86A             >Latest_Definition defl  Heap_Ptr
1522+ E86A             >
1522+ E86A             >                // dummy db directives used to calculate length of namec
1522+ E86A 44 4C 49 54 >                db      "DLITERAL"
1522+ E86E 45 52 41 4C >
1522+ E872             >len_NFA         defl    $ - temp_NFA
1522+ E872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1522+ E86A             >
1522+ E86A C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1522+ E86B 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1522+ E86F 45 52 41 4C >
1522+ E873             >                org     $-1                 // alter last byte of Name just above to set
1522+ E872 CC          >                db      {b $} | END_BIT     // msb as name end
1522+ E873             >
1522+ E873 5E 08       >                dw      Prev_Ptr            // Link to previous definition Name
1522+ E875             >Prev_Ptr        defl    Heap_Ptr
1522+ E875             >
1522+ E875             >mirror_Ptr      defl    $
1522+ E875             >
1522+ E875 D9 73       >                dw      Dict_Ptr + 2        // xt
1522+ E877             >Heap_Ptr        defl    $ - $E000           // save current HP
1522+ E877             >
1522+ E877             >Current_HP      defl  $ - $E000             // used to set HP once!
1522+ E877             >
1522+ E877             >//              ______________________________________________________________________
1522+ E877             >//              Dictionary part
1522+ E877             >
1522+ E877             >                org     Dict_Ptr
1522+ 73D7             >
1522+ 73D7 75 08       >                dw      mirror_Ptr - $E000
1522+ 73D9             >
1522+ 73D9             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1522+ 73D9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1522+ 73DC             >
1522+ 73DC             >
1522+ 73DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1522+ 73DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1522+ 73DC             >
1522+ 73DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1523+ 73DC 4C 6B 89 69                  dw      STATE, FETCH            // state @
1524+ 73E0                                                              // if
1525+ 73E0 F5 63                        dw      ZBRANCH
1526+ 73E2 08 00                        dw      DLiteral_Endif - $
1527+ 73E4 24 69                        dw          SWAP                //      swap
1528+ 73E6 C4 73 C4 73                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1529+ 73EA              DLiteral_Endif:                                 // endif
1530+ 73EA 52 68                        dw      EXIT                    // ; immediate
1531+ 73EC
1532+ 73EC              //  ______________________________________________________________________
1533+ 73EC              //
1534+ 73EC              // [char]       n --      ( compile time )
1535+ 73EC              // inside colon definition, gets first character from next input word
1536+ 73EC              // and compiles it as literal.
1537+ 73EC                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1537+ 73EC             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1537+ 73EC             >
1537+ 73EC             >Dict_Ptr        defl    $
1537+ 73EC             >
1537+ 73EC             >//              ______________________________________________________________________
1537+ 73EC             >//              Heap part
1537+ 73EC             >
1537+ 73EC             >
1537+ 73EC             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E877             >
1537+ E877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E877             >Latest_Definition defl  Heap_Ptr
1537+ E877             >
1537+ E877             >                // dummy db directives used to calculate length of namec
1537+ E877 5B 43 48 41 >                db      "[CHAR]"
1537+ E87B 52 5D       >
1537+ E87D             >len_NFA         defl    $ - temp_NFA
1537+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E877             >
1537+ E877 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E878 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1537+ E87C 52 5D       >
1537+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1537+ E87D DD          >                db      {b $} | END_BIT     // msb as name end
1537+ E87E             >
1537+ E87E 6A 08       >                dw      Prev_Ptr            // Link to previous definition Name
1537+ E880             >Prev_Ptr        defl    Heap_Ptr
1537+ E880             >
1537+ E880             >mirror_Ptr      defl    $
1537+ E880             >
1537+ E880 EE 73       >                dw      Dict_Ptr + 2        // xt
1537+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E882             >
1537+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E882             >
1537+ E882             >//              ______________________________________________________________________
1537+ E882             >//              Dictionary part
1537+ E882             >
1537+ E882             >                org     Dict_Ptr
1537+ 73EC             >
1537+ 73EC 80 08       >                dw      mirror_Ptr - $E000
1537+ 73EE             >
1537+ 73EE             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 73EE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 73F1             >
1537+ 73F1             >
1537+ 73F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 73F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 73F1             >
1537+ 73F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 73F1 26 71 C4 73                  dw      CHAR, LITERAL           // char [compile] literal
1539+ 73F5 52 68                        dw      EXIT                    // ; immediate
1540+ 73F7
1541+ 73F7              //  ______________________________________________________________________
1542+ 73F7              //
1543+ 73F7              // 0x00         n --      ( compile time )
1544+ 73F7                              Colon_Def NUL_WORD,  $00, is_immediate
1544+ 73F7             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1544+ 73F7             >
1544+ 73F7             >Dict_Ptr        defl    $
1544+ 73F7             >
1544+ 73F7             >//              ______________________________________________________________________
1544+ 73F7             >//              Heap part
1544+ 73F7             >
1544+ 73F7             >
1544+ 73F7             >                org     (Heap_Ptr & $1FFF) + $E000
1544+ E882             >
1544+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1544+ E882             >Latest_Definition defl  Heap_Ptr
1544+ E882             >
1544+ E882             >                // dummy db directives used to calculate length of namec
1544+ E882 00          >                db      $00
1544+ E883             >len_NFA         defl    $ - temp_NFA
1544+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1544+ E882             >
1544+ E882 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1544+ E883 00          >                db      $00               // name string in 7-bit ascii, but
1544+ E884             >                org     $-1                 // alter last byte of Name just above to set
1544+ E883 80          >                db      {b $} | END_BIT     // msb as name end
1544+ E884             >
1544+ E884 77 08       >                dw      Prev_Ptr            // Link to previous definition Name
1544+ E886             >Prev_Ptr        defl    Heap_Ptr
1544+ E886             >
1544+ E886             >mirror_Ptr      defl    $
1544+ E886             >
1544+ E886 F9 73       >                dw      Dict_Ptr + 2        // xt
1544+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1544+ E888             >
1544+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1544+ E888             >
1544+ E888             >//              ______________________________________________________________________
1544+ E888             >//              Dictionary part
1544+ E888             >
1544+ E888             >                org     Dict_Ptr
1544+ 73F7             >
1544+ 73F7 86 08       >                dw      mirror_Ptr - $E000
1544+ 73F9             >
1544+ 73F9             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1544+ 73F9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1544+ 73FC             >
1544+ 73FC             >
1544+ 73FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1544+ 73FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1544+ 73FC             >
1544+ 73FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1545+ 73FC 22 6B 89 69                  dw      BLK, FETCH, ONE         // blk @ 1
1545+ 7400 88 6A
1546+ 7402 1F 6C                        dw      GREATER                 // > if
1547+ 7404                                                              // if
1548+ 7404 F5 63                        dw      ZBRANCH
1549+ 7406 28 00                        dw      Nul_Else_1 - $
1550+ 7408 88 6A 22 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1550+ 740C 71 69
1551+ 740E 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1551+ 7412 93 69
1552+ 7414 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1553+ 7418 B9 6A                        dw          BSCR                //      b/scr
1554+ 741A C5 68                        dw          ONE_SUBTRACT        //      1 -
1555+ 741C 0C 68                        dw          AND_OP              //      and  ( this is tricky )
1556+ 741E 77 68                        dw          ZEQUAL              //      0=
1557+ 7420                                                              //      if
1558+ 7420 F5 63                        dw          ZBRANCH
1559+ 7422 08 00                        dw          Nul_Endif_2 - $
1560+ 7424 0A 6E                        dw              QEXEC           //          ?exec
1561+ 7426 67 68 10 69                  dw              R_TO, DROP      //          r> drop
1562+ 742A              Nul_Endif_2:                                    //      endif
1563+ 742A E8 63                        dw      BRANCH
1564+ 742C 06 00                        dw      Nul_Endif_1 - $
1565+ 742E              Nul_Else_1:                                     // else
1566+ 742E 67 68 10 69                  dw          R_TO, DROP          //      r> drop
1567+ 7432              Nul_Endif_1:                                    // endif
1568+ 7432 52 68                        dw      EXIT                    // ;
1569+ 7434
1570+ 7434              //  ______________________________________________________________________
1571+ 7434              //
1572+ 7434              // ?stack       --
1573+ 7434              // Raise error #1 if stack is empty and you pop it
1574+ 7434              // Raise error #7 if stack is full.
1575+ 7434              // This means SP must always stay between HERE and FFFF
1576+ 7434              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1577+ 7434              // for Next 8K MMU paging this is $DOE8
1578+ 7434                              Colon_Def QSTACK, "?STACK", is_normal
1578+ 7434             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1578+ 7434             >
1578+ 7434             >Dict_Ptr        defl    $
1578+ 7434             >
1578+ 7434             >//              ______________________________________________________________________
1578+ 7434             >//              Heap part
1578+ 7434             >
1578+ 7434             >
1578+ 7434             >                org     (Heap_Ptr & $1FFF) + $E000
1578+ E888             >
1578+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1578+ E888             >Latest_Definition defl  Heap_Ptr
1578+ E888             >
1578+ E888             >                // dummy db directives used to calculate length of namec
1578+ E888 3F 53 54 41 >                db      "?STACK"
1578+ E88C 43 4B       >
1578+ E88E             >len_NFA         defl    $ - temp_NFA
1578+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1578+ E888             >
1578+ E888 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1578+ E889 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1578+ E88D 43 4B       >
1578+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1578+ E88E CB          >                db      {b $} | END_BIT     // msb as name end
1578+ E88F             >
1578+ E88F 82 08       >                dw      Prev_Ptr            // Link to previous definition Name
1578+ E891             >Prev_Ptr        defl    Heap_Ptr
1578+ E891             >
1578+ E891             >mirror_Ptr      defl    $
1578+ E891             >
1578+ E891 36 74       >                dw      Dict_Ptr + 2        // xt
1578+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1578+ E893             >
1578+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1578+ E893             >
1578+ E893             >//              ______________________________________________________________________
1578+ E893             >//              Dictionary part
1578+ E893             >
1578+ E893             >                org     Dict_Ptr
1578+ 7434             >
1578+ 7434 91 08       >                dw      mirror_Ptr - $E000
1578+ 7436             >
1578+ 7436             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1578+ 7436 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1578+ 7439             >
1578+ 7439             >
1578+ 7439             >                endif           ; ok        // for other definitions it "points" the correct handler
1578+ 7439             >                // Use of "; ok" to suppress "warning[fwdref]"
1578+ 7439             >
1578+ 7439             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1579+ 7439 39 68                        dw      SPFETCH                 // sp@
1580+ 743B DA 6A 89 69                  dw      S0, FETCH               // s0 @
1581+ 743F 24 69 FC 6B                  dw      SWAP, ULESS             // swap u<
1582+ 7443 88 6A E2 6D                  dw      ONE, QERROR             // 1 ?error
1583+ 7447 A6 6B                        dw      HERE                    // here
1584+ 7449 DA 6A 89 69                  dw      S0, FETCH, LESS         // s0 @ <
1584+ 744D 0A 6C
1585+ 744F                                                              // if
1586+ 744F F5 63                        dw      ZBRANCH
1587+ 7451 14 00                        dw      QStack_Endif - $
1588+ 7453 39 68                        dw          SPFETCH             //      sp@
1589+ 7455 A6 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1589+ 7459 80 00
1590+ 745B A5 68 FC 6B                  dw          PLUS, ULESS         //      plus u<
1591+ 745F A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1591+ 7463 E2 6D
1592+ 7465              QStack_Endif:                                   // endif
1593+ 7465 52 68                        dw      EXIT                    // ;
1594+ 7467
1595+ 7467
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 113  7467                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 7467              //  ______________________________________________________________________
   2+ 7467              //
   3+ 7467              //  L2.asm
   4+ 7467              //
   5+ 7467              //  Level-2 3dos
   6+ 7467              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7467              //  ______________________________________________________________________
   8+ 7467
   9+ 7467
  10+ 7467              //  ______________________________________________________________________
  11+ 7467              //
  12+ 7467              // interpret    --
  13+ 7467              // This is the text interpreter.
  14+ 7467              // It executes or compiles, depending on STATE, the text coming from
  15+ 7467              // current input stream.
  16+ 7467              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7467              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7467              // leaving on top of stack a single or double precision number, depending
  19+ 7467              // on the presence of a decimal point.
  20+ 7467              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7467              // by the offending word.
  22+ 7467                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7467             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7467             >
  22+ 7467             >Dict_Ptr        defl    $
  22+ 7467             >
  22+ 7467             >//              ______________________________________________________________________
  22+ 7467             >//              Heap part
  22+ 7467             >
  22+ 7467             >
  22+ 7467             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E893             >
  22+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E893             >Latest_Definition defl  Heap_Ptr
  22+ E893             >
  22+ E893             >                // dummy db directives used to calculate length of namec
  22+ E893 49 4E 54 45 >                db      "INTERPRET"
  22+ E897 52 50 52 45 >
  22+ E89B 54          >
  22+ E89C             >len_NFA         defl    $ - temp_NFA
  22+ E89C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E893             >
  22+ E893 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E894 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E898 52 50 52 45 >
  22+ E89C 54          >
  22+ E89D             >                org     $-1                 // alter last byte of Name just above to set
  22+ E89C D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E89D             >
  22+ E89D 88 08       >                dw      Prev_Ptr            // Link to previous definition Name
  22+ E89F             >Prev_Ptr        defl    Heap_Ptr
  22+ E89F             >
  22+ E89F             >mirror_Ptr      defl    $
  22+ E89F             >
  22+ E89F 69 74       >                dw      Dict_Ptr + 2        // xt
  22+ E8A1             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E8A1             >
  22+ E8A1             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E8A1             >
  22+ E8A1             >//              ______________________________________________________________________
  22+ E8A1             >//              Dictionary part
  22+ E8A1             >
  22+ E8A1             >                org     Dict_Ptr
  22+ 7467             >
  22+ 7467 9F 08       >                dw      mirror_Ptr - $E000
  22+ 7469             >
  22+ 7469             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7469 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 746C             >
  22+ 746C             >
  22+ 746C             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 746C             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 746C             >
  22+ 746C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 746C
  24+ 746C              Interpret_Begin:                                        // begin
  25+ 746C A6 72                        dw          LFIND                       //      -find
  26+ 746E                                                                      //      if
  27+ 746E F5 63                        dw          ZBRANCH
  28+ 7470 1A 00                        dw          Interpret_Else_1 - $
  29+ 7472 4C 6B 89 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7476 0A 6C
  30+ 7478                                                                      //          if
  31+ 7478 F5 63                        dw              ZBRANCH
  32+ 747A 08 00                        dw              Interpret_Else_2 - $
  33+ 747C 67 6E                        dw                  COMPILE_XT          //              compile,
  34+ 747E                                                                      //          else
  35+ 747E E8 63                        dw              BRANCH
  36+ 7480 06 00                        dw              Interpret_Endif_2 - $
  37+ 7482              Interpret_Else_2:
  38+ 7482 AE 63 48 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7486              Interpret_Endif_2:                                      //          endif
  40+ 7486                                                                      //      else
  41+ 7486 E8 63                        dw          BRANCH
  42+ 7488 1A 00                        dw          Interpret_Endif_1 - $
  43+ 748A              Interpret_Else_1:
  44+ 748A A6 6B 2E 72                  dw              HERE, NUMBER            //          here number
  45+ 748E 58 6B 89 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7492 BE 68
  46+ 7494                                                                      //          if
  47+ 7494 F5 63                        dw              ZBRANCH
  48+ 7496 08 00                        dw              Interpret_Else_3 - $
  49+ 7498              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7498              //                                                      //              if
  51+ 7498              //              dw                  ZBRANCH
  52+ 7498              //              dw                  Interpret_Endif_4 - $
  53+ 7498              //              dw                      ONE, ZERO       //                  1 0
  54+ 7498              //              dw                      TWO_DROP        //                  2drop
  55+ 7498              //Interpret_Endif_4:                                      //              endif
  56+ 7498 D9 73                        dw                  DLITERAL            //              [compile] dliteral
  57+ 749A                                                                      //          else
  58+ 749A E8 63                        dw              BRANCH
  59+ 749C 06 00                        dw              Interpret_Endif_3 - $
  60+ 749E              Interpret_Else_3:
  61+ 749E 10 69                        dw                  DROP                //              drop
  62+ 74A0 C4 73                        dw                  LITERAL             //              [compile]  literal
  63+ 74A2              Interpret_Endif_3:                                      //          endif
  64+ 74A2              Interpret_Endif_1:                                      //      endif
  65+ 74A2 36 74                        dw          QSTACK                      //      ?stack
  66+ 74A4 B3 66                        dw          QTERMINAL                   //      ?terminal
  67+ 74A6                                                                      //      if
  68+ 74A6 F5 63                        dw          ZBRANCH
  69+ 74A8 04 00                        dw          Interpret_Endif_5 - $
  70+ 74AA 0A 75                        dw              QUIT                    //          quit
  71+ 74AC              Interpret_Endif_5:                                      //      endif
  72+ 74AC E8 63                        dw      BRANCH
  73+ 74AE BE FF                        dw      Interpret_Begin - $
  74+ 74B0 52 68                        dw      EXIT                            // ;
  75+ 74B2
  76+ 74B2              //  ______________________________________________________________________
  77+ 74B2              //
  78+ 74B2              // vocabulary   -- cccc     ( compile time )
  79+ 74B2              // Defining word used in the form   VOCABULARY cccc
  80+ 74B2              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 74B2              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 74B2              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 74B2              // so new definitions can be inserted in that vocabulary.
  84+ 74B2                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 74B2             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 74B2             >
  84+ 74B2             >Dict_Ptr        defl    $
  84+ 74B2             >
  84+ 74B2             >//              ______________________________________________________________________
  84+ 74B2             >//              Heap part
  84+ 74B2             >
  84+ 74B2             >
  84+ 74B2             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E8A1             >
  84+ E8A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E8A1             >Latest_Definition defl  Heap_Ptr
  84+ E8A1             >
  84+ E8A1             >                // dummy db directives used to calculate length of namec
  84+ E8A1 56 4F 43 41 >                db      "VOCABULARY"
  84+ E8A5 42 55 4C 41 >
  84+ E8A9 52 59       >
  84+ E8AB             >len_NFA         defl    $ - temp_NFA
  84+ E8AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E8A1             >
  84+ E8A1 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E8A2 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E8A6 42 55 4C 41 >
  84+ E8AA 52 59       >
  84+ E8AC             >                org     $-1                 // alter last byte of Name just above to set
  84+ E8AB D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E8AC             >
  84+ E8AC 93 08       >                dw      Prev_Ptr            // Link to previous definition Name
  84+ E8AE             >Prev_Ptr        defl    Heap_Ptr
  84+ E8AE             >
  84+ E8AE             >mirror_Ptr      defl    $
  84+ E8AE             >
  84+ E8AE B4 74       >                dw      Dict_Ptr + 2        // xt
  84+ E8B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E8B0             >
  84+ E8B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E8B0             >
  84+ E8B0             >//              ______________________________________________________________________
  84+ E8B0             >//              Dictionary part
  84+ E8B0             >
  84+ E8B0             >                org     Dict_Ptr
  84+ 74B2             >
  84+ 74B2 AE 08       >                dw      mirror_Ptr - $E000
  84+ 74B4             >
  84+ 74B4             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 74B4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 74B7             >
  84+ 74B7             >
  84+ 74B7             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 74B7             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 74B7             >
  84+ 74B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 74B7
  86+ 74B7 F6 6E                        dw      CBUILDS
  87+ 74B9
  88+ 74B9 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 74BD BC 6B
  89+ 74BF 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  90+ 74C3 D9 68 BC 6B                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 74C7 A6 6B                        dw      HERE                    // here
  92+ 74C9 04 6B 89 69                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 74CD BC 6B
  93+ 74CF 04 6B 93 69                  dw      VOC_LINK, STORE         // voc-link !
  94+ 74D3
  95+ 74D3 01 6F                        dw      DOES_TO                 // does>
  96+ 74D5              Vocabulary_Does:
  97+ 74D5 D4 68                        dw      CELL_PLUS               // cell+
  98+ 74D7 40 6B 93 69                  dw      CONTEXT, STORE          // context !
  99+ 74DB 52 68                        dw      EXIT                    // ;
 100+ 74DD
 101+ 74DD              //  ______________________________________________________________________
 102+ 74DD              //
 103+ 74DD              // forth        --
 104+ 74DD              // Name of the first vocabulary.
 105+ 74DD              // It makes FORTH the CONTEXT vocabulary.
 106+ 74DD              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 74DD              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 74DD              // of a colon definition to be able to select the vocabulary.
 109+ 74DD
 110+ 74DD                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 74DD             >
 110+ 74DD             >Dict_Ptr        defl    $
 110+ 74DD             >
 110+ 74DD             >//              ______________________________________________________________________
 110+ 74DD             >//              Heap part
 110+ 74DD             >
 110+ 74DD             >
 110+ 74DD             >                org     (Heap_Ptr & $1FFF) + $E000
 110+ E8B0             >
 110+ E8B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ E8B0             >Latest_Definition defl  Heap_Ptr
 110+ E8B0             >
 110+ E8B0             >                // dummy db directives used to calculate length of namec
 110+ E8B0 46 4F 52 54 >                db      "FORTH"
 110+ E8B4 48          >
 110+ E8B5             >len_NFA         defl    $ - temp_NFA
 110+ E8B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ E8B0             >
 110+ E8B0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ E8B1 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ E8B5 48          >
 110+ E8B6             >                org     $-1                 // alter last byte of Name just above to set
 110+ E8B5 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ E8B6             >
 110+ E8B6 A1 08       >                dw      Prev_Ptr            // Link to previous definition Name
 110+ E8B8             >Prev_Ptr        defl    Heap_Ptr
 110+ E8B8             >
 110+ E8B8             >mirror_Ptr      defl    $
 110+ E8B8             >
 110+ E8B8 DF 74       >                dw      Dict_Ptr + 2        // xt
 110+ E8BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 110+ E8BA             >
 110+ E8BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 110+ E8BA             >
 110+ E8BA             >//              ______________________________________________________________________
 110+ E8BA             >//              Dictionary part
 110+ E8BA             >
 110+ E8BA             >                org     Dict_Ptr
 110+ 74DD             >
 110+ 74DD B8 08       >                dw      mirror_Ptr - $E000
 110+ 74DF             >
 110+ 74DF             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 74DF CD 0E 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 74E2             >
 110+ 74E2             >
 110+ 74E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 74E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 74E2             >
 110+ 74E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 74E2 D5 74                        dw      Vocabulary_Does
 112+ 74E4 81 A0                        db      $81, $A0
 113+ 74E6              Forth_Latest_Ptr:
 114+ 74E6 B0 08                        dw      Latest_Definition
 115+ 74E8              Voclink_Ptr:
 116+ 74E8 00 00                        dw      0
 117+ 74EA              // Any new vocabulary is structured as follow:
 118+ 74EA              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 74EA              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 74EA              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 74EA              //       at creations it points to the null-word of its parent vocabulary
 122+ 74EA              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 74EA              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 74EA              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 74EA              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 74EA              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 74EA              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 74EA
 129+ 74EA              //  ______________________________________________________________________
 130+ 74EA              //
 131+ 74EA              // definitions  --
 132+ 74EA              // Used in the form  cccc DEFINITIONS
 133+ 74EA              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 74EA              // vocabulary cccc.
 135+ 74EA                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 74EA             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 74EA             >
 135+ 74EA             >Dict_Ptr        defl    $
 135+ 74EA             >
 135+ 74EA             >//              ______________________________________________________________________
 135+ 74EA             >//              Heap part
 135+ 74EA             >
 135+ 74EA             >
 135+ 74EA             >                org     (Heap_Ptr & $1FFF) + $E000
 135+ E8BA             >
 135+ E8BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ E8BA             >Latest_Definition defl  Heap_Ptr
 135+ E8BA             >
 135+ E8BA             >                // dummy db directives used to calculate length of namec
 135+ E8BA 44 45 46 49 >                db      "DEFINITIONS"
 135+ E8BE 4E 49 54 49 >
 135+ E8C2 4F 4E 53    >
 135+ E8C5             >len_NFA         defl    $ - temp_NFA
 135+ E8C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ E8BA             >
 135+ E8BA 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ E8BB 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ E8BF 4E 49 54 49 >
 135+ E8C3 4F 4E 53    >
 135+ E8C6             >                org     $-1                 // alter last byte of Name just above to set
 135+ E8C5 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ E8C6             >
 135+ E8C6 B0 08       >                dw      Prev_Ptr            // Link to previous definition Name
 135+ E8C8             >Prev_Ptr        defl    Heap_Ptr
 135+ E8C8             >
 135+ E8C8             >mirror_Ptr      defl    $
 135+ E8C8             >
 135+ E8C8 EC 74       >                dw      Dict_Ptr + 2        // xt
 135+ E8CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 135+ E8CA             >
 135+ E8CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 135+ E8CA             >
 135+ E8CA             >//              ______________________________________________________________________
 135+ E8CA             >//              Dictionary part
 135+ E8CA             >
 135+ E8CA             >                org     Dict_Ptr
 135+ 74EA             >
 135+ 74EA C8 08       >                dw      mirror_Ptr - $E000
 135+ 74EC             >
 135+ 74EC             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 74EC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 74EF             >
 135+ 74EF             >
 135+ 74EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 74EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 74EF             >
 135+ 74EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 74EF 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 137+ 74F3 46 6B 93 69                  dw      CURRENT, STORE          // current !
 138+ 74F7 52 68                        dw      EXIT                    // ;
 139+ 74F9
 140+ 74F9              //  ______________________________________________________________________
 141+ 74F9              //
 142+ 74F9              // (            -- cccc )
 143+ 74F9              // the following text is interpreted as a comment until a closing )
 144+ 74F9                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 74F9             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 74F9             >
 144+ 74F9             >Dict_Ptr        defl    $
 144+ 74F9             >
 144+ 74F9             >//              ______________________________________________________________________
 144+ 74F9             >//              Heap part
 144+ 74F9             >
 144+ 74F9             >
 144+ 74F9             >                org     (Heap_Ptr & $1FFF) + $E000
 144+ E8CA             >
 144+ E8CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ E8CA             >Latest_Definition defl  Heap_Ptr
 144+ E8CA             >
 144+ E8CA             >                // dummy db directives used to calculate length of namec
 144+ E8CA 28          >                db      "("
 144+ E8CB             >len_NFA         defl    $ - temp_NFA
 144+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ E8CA             >
 144+ E8CA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ E8CB 28          >                db      "("               // name string in 7-bit ascii, but
 144+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
 144+ E8CB A8          >                db      {b $} | END_BIT     // msb as name end
 144+ E8CC             >
 144+ E8CC BA 08       >                dw      Prev_Ptr            // Link to previous definition Name
 144+ E8CE             >Prev_Ptr        defl    Heap_Ptr
 144+ E8CE             >
 144+ E8CE             >mirror_Ptr      defl    $
 144+ E8CE             >
 144+ E8CE FB 74       >                dw      Dict_Ptr + 2        // xt
 144+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 144+ E8D0             >
 144+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 144+ E8D0             >
 144+ E8D0             >//              ______________________________________________________________________
 144+ E8D0             >//              Dictionary part
 144+ E8D0             >
 144+ E8D0             >                org     Dict_Ptr
 144+ 74F9             >
 144+ 74F9 CE 08       >                dw      mirror_Ptr - $E000
 144+ 74FB             >
 144+ 74FB             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 74FB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 74FE             >
 144+ 74FE             >
 144+ 74FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 74FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 74FE             >
 144+ 74FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 74FE A3 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7502 C4 70 10 69                  dw      WORD, DROP              // word drop
 147+ 7506 52 68                        dw      EXIT                    // ;
 148+ 7508
 149+ 7508              //  ______________________________________________________________________
 150+ 7508              //
 151+ 7508              // quit         --
 152+ 7508              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7508                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7508             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7508             >
 153+ 7508             >Dict_Ptr        defl    $
 153+ 7508             >
 153+ 7508             >//              ______________________________________________________________________
 153+ 7508             >//              Heap part
 153+ 7508             >
 153+ 7508             >
 153+ 7508             >                org     (Heap_Ptr & $1FFF) + $E000
 153+ E8D0             >
 153+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ E8D0             >Latest_Definition defl  Heap_Ptr
 153+ E8D0             >
 153+ E8D0             >                // dummy db directives used to calculate length of namec
 153+ E8D0 51 55 49 54 >                db      "QUIT"
 153+ E8D4             >len_NFA         defl    $ - temp_NFA
 153+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ E8D0             >
 153+ E8D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ E8D1 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
 153+ E8D4 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ E8D5             >
 153+ E8D5 CA 08       >                dw      Prev_Ptr            // Link to previous definition Name
 153+ E8D7             >Prev_Ptr        defl    Heap_Ptr
 153+ E8D7             >
 153+ E8D7             >mirror_Ptr      defl    $
 153+ E8D7             >
 153+ E8D7 0A 75       >                dw      Dict_Ptr + 2        // xt
 153+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 153+ E8D9             >
 153+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 153+ E8D9             >
 153+ E8D9             >//              ______________________________________________________________________
 153+ E8D9             >//              Dictionary part
 153+ E8D9             >
 153+ E8D9             >                org     Dict_Ptr
 153+ 7508             >
 153+ 7508 D7 08       >                dw      mirror_Ptr - $E000
 153+ 750A             >
 153+ 750A             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 750A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 750D             >
 153+ 750D             >
 153+ 750D             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 750D             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 750D             >
 153+ 750D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 750D
 155+ 750D 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7511 FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7515 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7519 93 69
 158+ 751B 81 6A 22 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 751F 93 69
 159+ 7521 72 6E                        dw      SQUARED_OPEN            // [compile] [
 160+ 7523                                                              // begin
 161+ 7523              Quit_Begin:
 162+ 7523 E0 6A 89 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7527 4D 68
 163+ 7529 B6 65                        dw      CR                      //      cr
 164+ 752B 61 70                        dw      QUERY                   //      query
 165+ 752D              Next_Breakpoint_1:
 166+ 752D 69 74                        dw      INTERPRET               //      interpret
 167+ 752F 4C 6B 89 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7533 77 68
 168+ 7535                                                              //      if
 169+ 7535 F5 63                        dw      ZBRANCH
 170+ 7537 07 00                        dw      Quit_Endif - $
 171+ 7539 0F 71                        dw          C_DOT_QUOTE
 172+ 753B 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 753E              Quit_Endif:                                     //      else
 174+ 753E                                                              // again
 175+ 753E E8 63                        dw      BRANCH
 176+ 7540 E3 FF                        dw      Quit_Begin - $
 177+ 7542 52 68                        dw      EXIT                    // ;
 178+ 7544
 179+ 7544              //  ______________________________________________________________________
 180+ 7544              //
 181+ 7544              // abort        --
 182+ 7544                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7544             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7544             >
 182+ 7544             >Dict_Ptr        defl    $
 182+ 7544             >
 182+ 7544             >//              ______________________________________________________________________
 182+ 7544             >//              Heap part
 182+ 7544             >
 182+ 7544             >
 182+ 7544             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E8D9             >
 182+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E8D9             >Latest_Definition defl  Heap_Ptr
 182+ E8D9             >
 182+ E8D9             >                // dummy db directives used to calculate length of namec
 182+ E8D9 41 42 4F 52 >                db      "ABORT"
 182+ E8DD 54          >
 182+ E8DE             >len_NFA         defl    $ - temp_NFA
 182+ E8DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E8D9             >
 182+ E8D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E8DA 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ E8DE 54          >
 182+ E8DF             >                org     $-1                 // alter last byte of Name just above to set
 182+ E8DE D4          >                db      {b $} | END_BIT     // msb as name end
 182+ E8DF             >
 182+ E8DF D0 08       >                dw      Prev_Ptr            // Link to previous definition Name
 182+ E8E1             >Prev_Ptr        defl    Heap_Ptr
 182+ E8E1             >
 182+ E8E1             >mirror_Ptr      defl    $
 182+ E8E1             >
 182+ E8E1 46 75       >                dw      Dict_Ptr + 2        // xt
 182+ E8E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E8E3             >
 182+ E8E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E8E3             >
 182+ E8E3             >//              ______________________________________________________________________
 182+ E8E3             >//              Dictionary part
 182+ E8E3             >
 182+ E8E3             >                org     Dict_Ptr
 182+ 7544             >
 182+ 7544 E1 08       >                dw      mirror_Ptr - $E000
 182+ 7546             >
 182+ 7546             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7546 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7549             >
 182+ 7549             >
 182+ 7549             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7549             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7549             >
 182+ 7549             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7549 DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 754D 42 68
 184+ 754F BB 6E                        dw      DECIMAL                 // decimal
 185+ 7551 DF 74                        dw      FORTH                   // [compile] forth
 186+ 7553 EC 74                        dw      DEFINITIONS             // definitions
 187+ 7555              Autoexec_Ptr:
 188+ 7555 B1 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7557 0A 75                        dw      QUIT                    // quit
 190+ 7559 52 68                        dw      EXIT                    // ;
 191+ 755B
 192+ 755B              //  ______________________________________________________________________
 193+ 755B              //
 194+ 755B              // warm         --
 195+ 755B                              Colon_Def WARM, "WARM", is_normal
 195+ 755B             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 755B             >
 195+ 755B             >Dict_Ptr        defl    $
 195+ 755B             >
 195+ 755B             >//              ______________________________________________________________________
 195+ 755B             >//              Heap part
 195+ 755B             >
 195+ 755B             >
 195+ 755B             >                org     (Heap_Ptr & $1FFF) + $E000
 195+ E8E3             >
 195+ E8E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ E8E3             >Latest_Definition defl  Heap_Ptr
 195+ E8E3             >
 195+ E8E3             >                // dummy db directives used to calculate length of namec
 195+ E8E3 57 41 52 4D >                db      "WARM"
 195+ E8E7             >len_NFA         defl    $ - temp_NFA
 195+ E8E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ E8E3             >
 195+ E8E3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ E8E4 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ E8E8             >                org     $-1                 // alter last byte of Name just above to set
 195+ E8E7 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ E8E8             >
 195+ E8E8 D9 08       >                dw      Prev_Ptr            // Link to previous definition Name
 195+ E8EA             >Prev_Ptr        defl    Heap_Ptr
 195+ E8EA             >
 195+ E8EA             >mirror_Ptr      defl    $
 195+ E8EA             >
 195+ E8EA 5D 75       >                dw      Dict_Ptr + 2        // xt
 195+ E8EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 195+ E8EC             >
 195+ E8EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 195+ E8EC             >
 195+ E8EC             >//              ______________________________________________________________________
 195+ E8EC             >//              Dictionary part
 195+ E8EC             >
 195+ E8EC             >                org     Dict_Ptr
 195+ 755B             >
 195+ 755B EA 08       >                dw      mirror_Ptr - $E000
 195+ 755D             >
 195+ 755D             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 755D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7560             >
 195+ 7560             >
 195+ 7560             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7560             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7560             >
 195+ 7560             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7560 19 78                        dw      BLK_INIT                // blk-init
 197+ 7562 3D 7F                        dw      SPLASH                  // splash
 198+ 7564 A3 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7568 60 6C
 199+ 756A 46 75                        dw      ABORT                   // abort
 200+ 756C 52 68                        dw      EXIT                    // exit
 201+ 756E
 202+ 756E              //  ______________________________________________________________________
 203+ 756E              //
 204+ 756E              // cold         --
 205+ 756E                              Colon_Def COLD, "COLD", is_normal
 205+ 756E             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 756E             >
 205+ 756E             >Dict_Ptr        defl    $
 205+ 756E             >
 205+ 756E             >//              ______________________________________________________________________
 205+ 756E             >//              Heap part
 205+ 756E             >
 205+ 756E             >
 205+ 756E             >                org     (Heap_Ptr & $1FFF) + $E000
 205+ E8EC             >
 205+ E8EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ E8EC             >Latest_Definition defl  Heap_Ptr
 205+ E8EC             >
 205+ E8EC             >                // dummy db directives used to calculate length of namec
 205+ E8EC 43 4F 4C 44 >                db      "COLD"
 205+ E8F0             >len_NFA         defl    $ - temp_NFA
 205+ E8F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ E8EC             >
 205+ E8EC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ E8ED 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ E8F1             >                org     $-1                 // alter last byte of Name just above to set
 205+ E8F0 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ E8F1             >
 205+ E8F1 E3 08       >                dw      Prev_Ptr            // Link to previous definition Name
 205+ E8F3             >Prev_Ptr        defl    Heap_Ptr
 205+ E8F3             >
 205+ E8F3             >mirror_Ptr      defl    $
 205+ E8F3             >
 205+ E8F3 70 75       >                dw      Dict_Ptr + 2        // xt
 205+ E8F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 205+ E8F5             >
 205+ E8F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 205+ E8F5             >
 205+ E8F5             >//              ______________________________________________________________________
 205+ E8F5             >//              Dictionary part
 205+ E8F5             >
 205+ E8F5             >                org     Dict_Ptr
 205+ 756E             >
 205+ 756E F3 08       >                dw      mirror_Ptr - $E000
 205+ 7570             >
 205+ 7570             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7570 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 7573             >
 205+ 7573             >
 205+ 7573             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 7573             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 7573             >
 205+ 7573             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 7573 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7577 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 757B 89 69                        dw      FETCH                   // @
 209+ 757D A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7581 A5 68
 210+ 7583 A3 63 16 00                  dw      LIT, 22                 // 22
 211+ 7587 8D 67                        dw      CMOVE
 212+ 7589 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 758D 89 69                        dw      FETCH                   // @
 214+ 758F A3 63 E6 74                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7593 93 69                        dw      STORE                   // !
 216+ 7595 81 6A 1C 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7599 93 69
 217+ 759B 0A 6B 89 69                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 759F 2B 69
 218+ 75A1 76 6B 93 69                  dw      USE, STORE              // use !
 219+ 75A5 7C 6B 93 69                  dw      PREV, STORE             // prev !
 220+ 75A9 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 75AD 88 6B 93 69
 221+ 75B1              //              dw      LIT, 8
 222+ 75B1              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 75B1
 224+ 75B1 5D 75        Warm_Start:     dw      WARM
 225+ 75B3 70 75        Cold_Start:     dw      COLD
 226+ 75B5 52 68                        dw      EXIT
 227+ 75B7
 228+ 75B7              //  ______________________________________________________________________
 229+ 75B7              WarmRoutine:
 230+ 75B7              ColdRoutine:
 231+ 75B7 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 232+ 75BB
 233+ 75BB D9                           exx
 234+ 75BC E5                           push    hl                      // save Basic's return address
 235+ 75BD D9                           exx
 236+ 75BE ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 75C2
 238+ 75C2                              // pre-set the four main 16-bit registers
 239+ 75C2 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 240+ 75C6 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 241+ 75C9                              // ld      de, (R0_origin)         // Return Stack Pointer
 242+ 75C9                              ldrphl
 242+ 75C9 22 96 63    >                ld      (RP_Pointer),hl
 243+ 75CC EB                           ex      de, hl
 244+ 75CD 01 B1 75                     ld      bc, Warm_Start          // Instruction Pointer
 245+ 75D0
 246+ 75D0 38 02                        jr      c, Warm_Skip
 247+ 75D2 03                           inc     bc
 248+ 75D3 03                           inc     bc
 249+ 75D4              Warm_Skip:
 250+ 75D4                              next
 250+ 75D4 DD E9       >                jp      (ix)
 251+ 75D6
 252+ 75D6              //  ______________________________________________________________________
 253+ 75D6              //
 254+ 75D6              // basic        --
 255+ 75D6                              New_Def BASIC, "BASIC", is_code, is_normal
 255+ 75D6             >
 255+ 75D6             >Dict_Ptr        defl    $
 255+ 75D6             >
 255+ 75D6             >//              ______________________________________________________________________
 255+ 75D6             >//              Heap part
 255+ 75D6             >
 255+ 75D6             >
 255+ 75D6             >                org     (Heap_Ptr & $1FFF) + $E000
 255+ E8F5             >
 255+ E8F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ E8F5             >Latest_Definition defl  Heap_Ptr
 255+ E8F5             >
 255+ E8F5             >                // dummy db directives used to calculate length of namec
 255+ E8F5 42 41 53 49 >                db      "BASIC"
 255+ E8F9 43          >
 255+ E8FA             >len_NFA         defl    $ - temp_NFA
 255+ E8FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ E8F5             >
 255+ E8F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ E8F6 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 255+ E8FA 43          >
 255+ E8FB             >                org     $-1                 // alter last byte of Name just above to set
 255+ E8FA C3          >                db      {b $} | END_BIT     // msb as name end
 255+ E8FB             >
 255+ E8FB EC 08       >                dw      Prev_Ptr            // Link to previous definition Name
 255+ E8FD             >Prev_Ptr        defl    Heap_Ptr
 255+ E8FD             >
 255+ E8FD             >mirror_Ptr      defl    $
 255+ E8FD             >
 255+ E8FD D8 75       >                dw      Dict_Ptr + 2        // xt
 255+ E8FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 255+ E8FF             >
 255+ E8FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 255+ E8FF             >
 255+ E8FF             >//              ______________________________________________________________________
 255+ E8FF             >//              Dictionary part
 255+ E8FF             >
 255+ E8FF             >                org     Dict_Ptr
 255+ 75D6             >
 255+ 75D6 FD 08       >                dw      mirror_Ptr - $E000
 255+ 75D8             >
 255+ 75D8             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 75D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 75D8 ~           >
 255+ 75D8 ~           >
 255+ 75D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 75D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 75D8             >
 255+ 75D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 75D8 C1                           pop     bc                      // return  TOS  value to Basic
 257+ 75D9 21 00 00                     ld      hl, 0
 258+ 75DC 39                           add     hl, sp
 259+ 75DD ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 260+ 75E1              //              nop
 261+ 75E1 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 262+ 75E4 D9                           exx
 263+ 75E5 E1                           pop     hl                      // restore h'l'
 264+ 75E6 D9                           exx
 265+ 75E7 C9                           ret                             // to where USR Basic was left
 266+ 75E8
 267+ 75E8              //  ______________________________________________________________________
 268+ 75E8              //
 269+ 75E8              // +-           n1 n2 -- n3
 270+ 75E8              // leaves n1 with the sign of n2 as n3.
 271+ 75E8                              Colon_Def PLUS_MINUS, "+-", is_normal
 271+ 75E8             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 271+ 75E8             >
 271+ 75E8             >Dict_Ptr        defl    $
 271+ 75E8             >
 271+ 75E8             >//              ______________________________________________________________________
 271+ 75E8             >//              Heap part
 271+ 75E8             >
 271+ 75E8             >
 271+ 75E8             >                org     (Heap_Ptr & $1FFF) + $E000
 271+ E8FF             >
 271+ E8FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 271+ E8FF             >Latest_Definition defl  Heap_Ptr
 271+ E8FF             >
 271+ E8FF             >                // dummy db directives used to calculate length of namec
 271+ E8FF 2B 2D       >                db      "+-"
 271+ E901             >len_NFA         defl    $ - temp_NFA
 271+ E901             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 271+ E8FF             >
 271+ E8FF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 271+ E900 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 271+ E902             >                org     $-1                 // alter last byte of Name just above to set
 271+ E901 AD          >                db      {b $} | END_BIT     // msb as name end
 271+ E902             >
 271+ E902 F5 08       >                dw      Prev_Ptr            // Link to previous definition Name
 271+ E904             >Prev_Ptr        defl    Heap_Ptr
 271+ E904             >
 271+ E904             >mirror_Ptr      defl    $
 271+ E904             >
 271+ E904 EA 75       >                dw      Dict_Ptr + 2        // xt
 271+ E906             >Heap_Ptr        defl    $ - $E000           // save current HP
 271+ E906             >
 271+ E906             >Current_HP      defl  $ - $E000             // used to set HP once!
 271+ E906             >
 271+ E906             >//              ______________________________________________________________________
 271+ E906             >//              Dictionary part
 271+ E906             >
 271+ E906             >                org     Dict_Ptr
 271+ 75E8             >
 271+ 75E8 04 09       >                dw      mirror_Ptr - $E000
 271+ 75EA             >
 271+ 75EA             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 271+ 75EA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 271+ 75ED             >
 271+ 75ED             >
 271+ 75ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 271+ 75ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 271+ 75ED             >
 271+ 75ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 272+ 75ED 8A 68                        dw      ZLESS                   // 0<
 273+ 75EF                                                              // if
 274+ 75EF F5 63                        dw      ZBRANCH
 275+ 75F1 04 00                        dw      Plus_Minus_Endif - $
 276+ 75F3 E6 68                        dw          MINUS               //      minus
 277+ 75F5              Plus_Minus_Endif:                               // endif
 278+ 75F5 52 68                        dw      EXIT                    // ;
 279+ 75F7
 280+ 75F7              //  ______________________________________________________________________
 281+ 75F7              //
 282+ 75F7              // d+-          d1 n -- d2
 283+ 75F7              // leaves d1 with the sign of n as d2.
 284+ 75F7                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 284+ 75F7             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 284+ 75F7             >
 284+ 75F7             >Dict_Ptr        defl    $
 284+ 75F7             >
 284+ 75F7             >//              ______________________________________________________________________
 284+ 75F7             >//              Heap part
 284+ 75F7             >
 284+ 75F7             >
 284+ 75F7             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E906             >
 284+ E906             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E906             >Latest_Definition defl  Heap_Ptr
 284+ E906             >
 284+ E906             >                // dummy db directives used to calculate length of namec
 284+ E906 44 2B 2D    >                db      "D+-"
 284+ E909             >len_NFA         defl    $ - temp_NFA
 284+ E909             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E906             >
 284+ E906 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E907 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 284+ E90A             >                org     $-1                 // alter last byte of Name just above to set
 284+ E909 AD          >                db      {b $} | END_BIT     // msb as name end
 284+ E90A             >
 284+ E90A FF 08       >                dw      Prev_Ptr            // Link to previous definition Name
 284+ E90C             >Prev_Ptr        defl    Heap_Ptr
 284+ E90C             >
 284+ E90C             >mirror_Ptr      defl    $
 284+ E90C             >
 284+ E90C F9 75       >                dw      Dict_Ptr + 2        // xt
 284+ E90E             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E90E             >
 284+ E90E             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E90E             >
 284+ E90E             >//              ______________________________________________________________________
 284+ E90E             >//              Dictionary part
 284+ E90E             >
 284+ E90E             >                org     Dict_Ptr
 284+ 75F7             >
 284+ 75F7 0C 09       >                dw      mirror_Ptr - $E000
 284+ 75F9             >
 284+ 75F9             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 75F9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 75FC             >
 284+ 75FC             >
 284+ 75FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 75FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 75FC             >
 284+ 75FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 75FC 8A 68                        dw      ZLESS                   // 0<
 286+ 75FE                                                              // if
 287+ 75FE F5 63                        dw      ZBRANCH
 288+ 7600 04 00                        dw      DPlus_Minus_Endif - $
 289+ 7602 F4 68                        dw          DMINUS              //      dminus
 290+ 7604              DPlus_Minus_Endif:                              // endif
 291+ 7604 52 68                        dw      EXIT                    // ;
 292+ 7606
 293+ 7606              //  ______________________________________________________________________
 294+ 7606              //
 295+ 7606              // abs          n1 -- n2
 296+ 7606                              Colon_Def ABS_OP, "ABS", is_normal
 296+ 7606             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 296+ 7606             >
 296+ 7606             >Dict_Ptr        defl    $
 296+ 7606             >
 296+ 7606             >//              ______________________________________________________________________
 296+ 7606             >//              Heap part
 296+ 7606             >
 296+ 7606             >
 296+ 7606             >                org     (Heap_Ptr & $1FFF) + $E000
 296+ E90E             >
 296+ E90E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ E90E             >Latest_Definition defl  Heap_Ptr
 296+ E90E             >
 296+ E90E             >                // dummy db directives used to calculate length of namec
 296+ E90E 41 42 53    >                db      "ABS"
 296+ E911             >len_NFA         defl    $ - temp_NFA
 296+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ E90E             >
 296+ E90E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ E90F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 296+ E912             >                org     $-1                 // alter last byte of Name just above to set
 296+ E911 D3          >                db      {b $} | END_BIT     // msb as name end
 296+ E912             >
 296+ E912 06 09       >                dw      Prev_Ptr            // Link to previous definition Name
 296+ E914             >Prev_Ptr        defl    Heap_Ptr
 296+ E914             >
 296+ E914             >mirror_Ptr      defl    $
 296+ E914             >
 296+ E914 08 76       >                dw      Dict_Ptr + 2        // xt
 296+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
 296+ E916             >
 296+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
 296+ E916             >
 296+ E916             >//              ______________________________________________________________________
 296+ E916             >//              Dictionary part
 296+ E916             >
 296+ E916             >                org     Dict_Ptr
 296+ 7606             >
 296+ 7606 14 09       >                dw      mirror_Ptr - $E000
 296+ 7608             >
 296+ 7608             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 7608 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 760B             >
 296+ 760B             >
 296+ 760B             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 760B             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 760B             >
 296+ 760B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 760B 2B 69                        dw      DUP                     // dup
 298+ 760D EA 75                        dw      PLUS_MINUS              // +-
 299+ 760F 52 68                        dw      EXIT                    // ;
 300+ 7611
 301+ 7611              //  ______________________________________________________________________
 302+ 7611              //
 303+ 7611              // dabs         d1 -- d2
 304+ 7611                              Colon_Def DABS, "DABS", is_normal
 304+ 7611             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 304+ 7611             >
 304+ 7611             >Dict_Ptr        defl    $
 304+ 7611             >
 304+ 7611             >//              ______________________________________________________________________
 304+ 7611             >//              Heap part
 304+ 7611             >
 304+ 7611             >
 304+ 7611             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E916             >
 304+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E916             >Latest_Definition defl  Heap_Ptr
 304+ E916             >
 304+ E916             >                // dummy db directives used to calculate length of namec
 304+ E916 44 41 42 53 >                db      "DABS"
 304+ E91A             >len_NFA         defl    $ - temp_NFA
 304+ E91A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E916             >
 304+ E916 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E917 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 304+ E91B             >                org     $-1                 // alter last byte of Name just above to set
 304+ E91A D3          >                db      {b $} | END_BIT     // msb as name end
 304+ E91B             >
 304+ E91B 0E 09       >                dw      Prev_Ptr            // Link to previous definition Name
 304+ E91D             >Prev_Ptr        defl    Heap_Ptr
 304+ E91D             >
 304+ E91D             >mirror_Ptr      defl    $
 304+ E91D             >
 304+ E91D 13 76       >                dw      Dict_Ptr + 2        // xt
 304+ E91F             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E91F             >
 304+ E91F             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E91F             >
 304+ E91F             >//              ______________________________________________________________________
 304+ E91F             >//              Dictionary part
 304+ E91F             >
 304+ E91F             >                org     Dict_Ptr
 304+ 7611             >
 304+ 7611 1D 09       >                dw      mirror_Ptr - $E000
 304+ 7613             >
 304+ 7613             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7613 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7616             >
 304+ 7616             >
 304+ 7616             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7616             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7616             >
 304+ 7616             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7616 2B 69                        dw      DUP                     // dup
 306+ 7618 F9 75                        dw      DPLUS_MINUS             // d+-
 307+ 761A 52 68                        dw      EXIT                    // ;
 308+ 761C
 309+ 761C              //  ______________________________________________________________________
 310+ 761C              //
 311+ 761C              // m*           n1 n2 -- d
 312+ 761C              // multiply two integer giving a double
 313+ 761C                              Colon_Def MMUL, "M*", is_normal
 313+ 761C             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 313+ 761C             >
 313+ 761C             >Dict_Ptr        defl    $
 313+ 761C             >
 313+ 761C             >//              ______________________________________________________________________
 313+ 761C             >//              Heap part
 313+ 761C             >
 313+ 761C             >
 313+ 761C             >                org     (Heap_Ptr & $1FFF) + $E000
 313+ E91F             >
 313+ E91F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ E91F             >Latest_Definition defl  Heap_Ptr
 313+ E91F             >
 313+ E91F             >                // dummy db directives used to calculate length of namec
 313+ E91F 4D 2A       >                db      "M*"
 313+ E921             >len_NFA         defl    $ - temp_NFA
 313+ E921             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ E91F             >
 313+ E91F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ E920 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 313+ E922             >                org     $-1                 // alter last byte of Name just above to set
 313+ E921 AA          >                db      {b $} | END_BIT     // msb as name end
 313+ E922             >
 313+ E922 16 09       >                dw      Prev_Ptr            // Link to previous definition Name
 313+ E924             >Prev_Ptr        defl    Heap_Ptr
 313+ E924             >
 313+ E924             >mirror_Ptr      defl    $
 313+ E924             >
 313+ E924 1E 76       >                dw      Dict_Ptr + 2        // xt
 313+ E926             >Heap_Ptr        defl    $ - $E000           // save current HP
 313+ E926             >
 313+ E926             >Current_HP      defl  $ - $E000             // used to set HP once!
 313+ E926             >
 313+ E926             >//              ______________________________________________________________________
 313+ E926             >//              Dictionary part
 313+ E926             >
 313+ E926             >                org     Dict_Ptr
 313+ 761C             >
 313+ 761C 24 09       >                dw      mirror_Ptr - $E000
 313+ 761E             >
 313+ 761E             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 761E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 7621             >
 313+ 7621             >
 313+ 7621             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7621             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7621             >
 313+ 7621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7621 67 69 2A 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 314+ 7625 5C 68
 315+ 7627 08 76 24 69                  dw      ABS_OP, SWAP            // abs swap
 316+ 762B 08 76 B1 67                  dw      ABS_OP, UM_MUL          // abs um*
 317+ 762F 67 68 F9 75                  dw      R_TO, DPLUS_MINUS       // r> d+-
 318+ 7633 52 68                        dw      EXIT                    // ;
 319+ 7635
 320+ 7635              //  ______________________________________________________________________
 321+ 7635              //
 322+ 7635              // sm/rem       d n -- q r
 323+ 7635              // Symmetric division: divides a double into n giving quotient q and remainder r
 324+ 7635              // the remainder has the sign of d.
 325+ 7635                              Colon_Def SMDIVM, "SM/REM", is_normal
 325+ 7635             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 325+ 7635             >
 325+ 7635             >Dict_Ptr        defl    $
 325+ 7635             >
 325+ 7635             >//              ______________________________________________________________________
 325+ 7635             >//              Heap part
 325+ 7635             >
 325+ 7635             >
 325+ 7635             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E926             >
 325+ E926             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E926             >Latest_Definition defl  Heap_Ptr
 325+ E926             >
 325+ E926             >                // dummy db directives used to calculate length of namec
 325+ E926 53 4D 2F 52 >                db      "SM/REM"
 325+ E92A 45 4D       >
 325+ E92C             >len_NFA         defl    $ - temp_NFA
 325+ E92C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E926             >
 325+ E926 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E927 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 325+ E92B 45 4D       >
 325+ E92D             >                org     $-1                 // alter last byte of Name just above to set
 325+ E92C CD          >                db      {b $} | END_BIT     // msb as name end
 325+ E92D             >
 325+ E92D 1F 09       >                dw      Prev_Ptr            // Link to previous definition Name
 325+ E92F             >Prev_Ptr        defl    Heap_Ptr
 325+ E92F             >
 325+ E92F             >mirror_Ptr      defl    $
 325+ E92F             >
 325+ E92F 37 76       >                dw      Dict_Ptr + 2        // xt
 325+ E931             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E931             >
 325+ E931             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E931             >
 325+ E931             >//              ______________________________________________________________________
 325+ E931             >//              Dictionary part
 325+ E931             >
 325+ E931             >                org     Dict_Ptr
 325+ 7635             >
 325+ 7635 2F 09       >                dw      mirror_Ptr - $E000
 325+ 7637             >
 325+ 7637             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 7637 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 763A             >
 325+ 763A             >
 325+ 763A             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 763A             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 763A             >
 325+ 763A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 763A 07 69 5C 68                  dw      OVER, TO_R, TO_R        // over >r >r
 326+ 763E 5C 68
 327+ 7640 13 76 72 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 327+ 7644 08 76
 328+ 7646 D9 67                        dw      UMDIVMOD                // um/mod
 329+ 7648 67 68                        dw      R_TO                    // r>
 330+ 764A 72 68 2A 68                  dw      R_OP, XOR_OP            // r xor
 331+ 764E EA 75 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 332+ 7652 67 68                        dw      R_TO                    // r>
 333+ 7654 EA 75 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 334+ 7658 52 68                        dw      EXIT                    // ;
 335+ 765A
 336+ 765A              //  ______________________________________________________________________
 337+ 765A              //
 338+ 765A              // fm/mod       d n -- q r
 339+ 765A              // Floored division: divides a double into n giving quotient q and remainder r
 340+ 765A              // the remainder has the sign of d.
 341+ 765A                              Colon_Def FMDIVM, "FM/MOD", is_normal
 341+ 765A             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 341+ 765A             >
 341+ 765A             >Dict_Ptr        defl    $
 341+ 765A             >
 341+ 765A             >//              ______________________________________________________________________
 341+ 765A             >//              Heap part
 341+ 765A             >
 341+ 765A             >
 341+ 765A             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ E931             >
 341+ E931             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ E931             >Latest_Definition defl  Heap_Ptr
 341+ E931             >
 341+ E931             >                // dummy db directives used to calculate length of namec
 341+ E931 46 4D 2F 4D >                db      "FM/MOD"
 341+ E935 4F 44       >
 341+ E937             >len_NFA         defl    $ - temp_NFA
 341+ E937             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ E931             >
 341+ E931 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ E932 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 341+ E936 4F 44       >
 341+ E938             >                org     $-1                 // alter last byte of Name just above to set
 341+ E937 C4          >                db      {b $} | END_BIT     // msb as name end
 341+ E938             >
 341+ E938 26 09       >                dw      Prev_Ptr            // Link to previous definition Name
 341+ E93A             >Prev_Ptr        defl    Heap_Ptr
 341+ E93A             >
 341+ E93A             >mirror_Ptr      defl    $
 341+ E93A             >
 341+ E93A 5C 76       >                dw      Dict_Ptr + 2        // xt
 341+ E93C             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ E93C             >
 341+ E93C             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ E93C             >
 341+ E93C             >//              ______________________________________________________________________
 341+ E93C             >//              Dictionary part
 341+ E93C             >
 341+ E93C             >                org     Dict_Ptr
 341+ 765A             >
 341+ 765A 3A 09       >                dw      mirror_Ptr - $E000
 341+ 765C             >
 341+ 765C             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 765C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 765F             >
 341+ 765F             >
 341+ 765F             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 765F             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 765F             >
 341+ 765F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 765F 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
 343+ 7663 37 76                        dw      SMDIVM
 344+ 7665 07 69 2B 69                  dw      OVER, DUP
 345+ 7669 77 68 77 68                  dw      ZEQUAL, ZEQUAL
 346+ 766D 24 69 8A 68                  dw      SWAP, ZLESS
 347+ 7671 72 68 8A 68                  dw      R_OP, ZLESS
 348+ 7675 2A 68 0C 68                  dw      XOR_OP, AND_OP
 349+ 7679 F5 63                        dw      ZBRANCH
 350+ 767B 10 00                        dw      Fm_Mod_Else - $
 351+ 767D C5 68                        dw          ONE_SUBTRACT
 352+ 767F 24 69 67 68                  dw          SWAP, R_TO
 353+ 7683 A5 68 24 69                  dw          PLUS, SWAP
 354+ 7687 E8 63                        dw      BRANCH
 355+ 7689 06 00                        dw      Fm_Mod_Endif - $
 356+ 768B              Fm_Mod_Else:
 357+ 768B 67 68 10 69                  dw          R_TO, DROP
 358+ 768F              Fm_Mod_Endif:
 359+ 768F 52 68                        dw      EXIT
 360+ 7691              //              dw      TWO_DUP                 // 2dup
 361+ 7691              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 362+ 7691              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 363+ 7691              //              dw      UMDIVMOD                // um/mod
 364+ 7691              //              dw      SWAP                    // swap
 365+ 7691              //              dw      II, ZLESS               // i'
 366+ 7691              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 367+ 7691              //              dw      R_TO                    // r>
 368+ 7691              //              dw      PLUS_MINUS, SWAP        // +- swap
 369+ 7691              //              dw      R_OP                    // r@
 370+ 7691              //              dw      ZLESS                   // i'
 371+ 7691              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 372+ 7691              //              dw      R_TO                    // r>
 373+ 7691              //              dw      PLUS_MINUS              // +- swap
 374+ 7691              //              dw      EXIT                    // ;
 375+ 7691
 376+ 7691              //  ______________________________________________________________________
 377+ 7691              //
 378+ 7691              // m/mod        d n -- q r
 379+ 7691              // multiply two integer giving a double
 380+ 7691                              Colon_Def MDIVM, "M/MOD", is_normal
 380+ 7691             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 380+ 7691             >
 380+ 7691             >Dict_Ptr        defl    $
 380+ 7691             >
 380+ 7691             >//              ______________________________________________________________________
 380+ 7691             >//              Heap part
 380+ 7691             >
 380+ 7691             >
 380+ 7691             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ E93C             >
 380+ E93C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ E93C             >Latest_Definition defl  Heap_Ptr
 380+ E93C             >
 380+ E93C             >                // dummy db directives used to calculate length of namec
 380+ E93C 4D 2F 4D 4F >                db      "M/MOD"
 380+ E940 44          >
 380+ E941             >len_NFA         defl    $ - temp_NFA
 380+ E941             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ E93C             >
 380+ E93C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ E93D 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 380+ E941 44          >
 380+ E942             >                org     $-1                 // alter last byte of Name just above to set
 380+ E941 C4          >                db      {b $} | END_BIT     // msb as name end
 380+ E942             >
 380+ E942 31 09       >                dw      Prev_Ptr            // Link to previous definition Name
 380+ E944             >Prev_Ptr        defl    Heap_Ptr
 380+ E944             >
 380+ E944             >mirror_Ptr      defl    $
 380+ E944             >
 380+ E944 93 76       >                dw      Dict_Ptr + 2        // xt
 380+ E946             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ E946             >
 380+ E946             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ E946             >
 380+ E946             >//              ______________________________________________________________________
 380+ E946             >//              Dictionary part
 380+ E946             >
 380+ E946             >                org     Dict_Ptr
 380+ 7691             >
 380+ 7691 44 09       >                dw      mirror_Ptr - $E000
 380+ 7693             >
 380+ 7693             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7693 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7696             >
 380+ 7696             >
 380+ 7696             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7696             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7696             >
 380+ 7696             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7696 37 76                        dw      SMDIVM
 382+ 7698 52 68                        dw      EXIT                    // ;
 383+ 769A
 384+ 769A              //  ______________________________________________________________________
 385+ 769A              //
 386+ 769A              // m/           d n -- q
 387+ 769A              // multiply two integer giving a double
 388+ 769A                              Colon_Def MDIV, "M/", is_normal
 388+ 769A             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 388+ 769A             >
 388+ 769A             >Dict_Ptr        defl    $
 388+ 769A             >
 388+ 769A             >//              ______________________________________________________________________
 388+ 769A             >//              Heap part
 388+ 769A             >
 388+ 769A             >
 388+ 769A             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E946             >
 388+ E946             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E946             >Latest_Definition defl  Heap_Ptr
 388+ E946             >
 388+ E946             >                // dummy db directives used to calculate length of namec
 388+ E946 4D 2F       >                db      "M/"
 388+ E948             >len_NFA         defl    $ - temp_NFA
 388+ E948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E946             >
 388+ E946 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E947 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 388+ E949             >                org     $-1                 // alter last byte of Name just above to set
 388+ E948 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ E949             >
 388+ E949 3C 09       >                dw      Prev_Ptr            // Link to previous definition Name
 388+ E94B             >Prev_Ptr        defl    Heap_Ptr
 388+ E94B             >
 388+ E94B             >mirror_Ptr      defl    $
 388+ E94B             >
 388+ E94B 9C 76       >                dw      Dict_Ptr + 2        // xt
 388+ E94D             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E94D             >
 388+ E94D             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E94D             >
 388+ E94D             >//              ______________________________________________________________________
 388+ E94D             >//              Dictionary part
 388+ E94D             >
 388+ E94D             >                org     Dict_Ptr
 388+ 769A             >
 388+ 769A 4B 09       >                dw      mirror_Ptr - $E000
 388+ 769C             >
 388+ 769C             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 769C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 769F             >
 388+ 769F             >
 388+ 769F             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 769F             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 769F             >
 388+ 769F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 769F 93 76 15 69                  dw      MDIVM, NIP
 390+ 76A3 52 68                        dw      EXIT                    // ;
 391+ 76A5
 392+ 76A5              //  ______________________________________________________________________
 393+ 76A5              //
 394+ 76A5              // *            n1 n2 -- n3
 395+ 76A5              // multiply two integer
 396+ 76A5                              Colon_Def MUL, "*", is_normal
 396+ 76A5             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 396+ 76A5             >
 396+ 76A5             >Dict_Ptr        defl    $
 396+ 76A5             >
 396+ 76A5             >//              ______________________________________________________________________
 396+ 76A5             >//              Heap part
 396+ 76A5             >
 396+ 76A5             >
 396+ 76A5             >                org     (Heap_Ptr & $1FFF) + $E000
 396+ E94D             >
 396+ E94D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 396+ E94D             >Latest_Definition defl  Heap_Ptr
 396+ E94D             >
 396+ E94D             >                // dummy db directives used to calculate length of namec
 396+ E94D 2A          >                db      "*"
 396+ E94E             >len_NFA         defl    $ - temp_NFA
 396+ E94E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 396+ E94D             >
 396+ E94D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 396+ E94E 2A          >                db      "*"               // name string in 7-bit ascii, but
 396+ E94F             >                org     $-1                 // alter last byte of Name just above to set
 396+ E94E AA          >                db      {b $} | END_BIT     // msb as name end
 396+ E94F             >
 396+ E94F 46 09       >                dw      Prev_Ptr            // Link to previous definition Name
 396+ E951             >Prev_Ptr        defl    Heap_Ptr
 396+ E951             >
 396+ E951             >mirror_Ptr      defl    $
 396+ E951             >
 396+ E951 A7 76       >                dw      Dict_Ptr + 2        // xt
 396+ E953             >Heap_Ptr        defl    $ - $E000           // save current HP
 396+ E953             >
 396+ E953             >Current_HP      defl  $ - $E000             // used to set HP once!
 396+ E953             >
 396+ E953             >//              ______________________________________________________________________
 396+ E953             >//              Dictionary part
 396+ E953             >
 396+ E953             >                org     Dict_Ptr
 396+ 76A5             >
 396+ 76A5 51 09       >                dw      mirror_Ptr - $E000
 396+ 76A7             >
 396+ 76A7             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 396+ 76A7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 396+ 76AA             >
 396+ 76AA             >
 396+ 76AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 396+ 76AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 396+ 76AA             >
 396+ 76AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 397+ 76AA 1E 76 10 69                  dw      MMUL, DROP              // m* drop
 398+ 76AE 52 68                        dw      EXIT                    // ;
 399+ 76B0
 400+ 76B0              //  ______________________________________________________________________
 401+ 76B0              //
 402+ 76B0              // /mod         n1 n2 -- n3 n4
 403+ 76B0              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 404+ 76B0              // The remainder has the sign of n1
 405+ 76B0                              Colon_Def DIVMOD, "/MOD", is_normal
 405+ 76B0             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 405+ 76B0             >
 405+ 76B0             >Dict_Ptr        defl    $
 405+ 76B0             >
 405+ 76B0             >//              ______________________________________________________________________
 405+ 76B0             >//              Heap part
 405+ 76B0             >
 405+ 76B0             >
 405+ 76B0             >                org     (Heap_Ptr & $1FFF) + $E000
 405+ E953             >
 405+ E953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ E953             >Latest_Definition defl  Heap_Ptr
 405+ E953             >
 405+ E953             >                // dummy db directives used to calculate length of namec
 405+ E953 2F 4D 4F 44 >                db      "/MOD"
 405+ E957             >len_NFA         defl    $ - temp_NFA
 405+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ E953             >
 405+ E953 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ E954 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 405+ E958             >                org     $-1                 // alter last byte of Name just above to set
 405+ E957 C4          >                db      {b $} | END_BIT     // msb as name end
 405+ E958             >
 405+ E958 4D 09       >                dw      Prev_Ptr            // Link to previous definition Name
 405+ E95A             >Prev_Ptr        defl    Heap_Ptr
 405+ E95A             >
 405+ E95A             >mirror_Ptr      defl    $
 405+ E95A             >
 405+ E95A B2 76       >                dw      Dict_Ptr + 2        // xt
 405+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 405+ E95C             >
 405+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 405+ E95C             >
 405+ E95C             >//              ______________________________________________________________________
 405+ E95C             >//              Dictionary part
 405+ E95C             >
 405+ E95C             >                org     Dict_Ptr
 405+ 76B0             >
 405+ 76B0 5A 09       >                dw      mirror_Ptr - $E000
 405+ 76B2             >
 405+ 76B2             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 76B2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 76B5             >
 405+ 76B5             >
 405+ 76B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 76B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 76B5             >
 405+ 76B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 76B5 5C 68 DA 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 406+ 76B9 67 68
 407+ 76BB 93 76                        dw      MDIVM                   // m/mod
 408+ 76BD 52 68                        dw      EXIT                    // ;
 409+ 76BF
 410+ 76BF              //  ______________________________________________________________________
 411+ 76BF              //
 412+ 76BF              // /            n1 n2 -- n3
 413+ 76BF              // division
 414+ 76BF                              Colon_Def DIV, "/", is_normal
 414+ 76BF             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 414+ 76BF             >
 414+ 76BF             >Dict_Ptr        defl    $
 414+ 76BF             >
 414+ 76BF             >//              ______________________________________________________________________
 414+ 76BF             >//              Heap part
 414+ 76BF             >
 414+ 76BF             >
 414+ 76BF             >                org     (Heap_Ptr & $1FFF) + $E000
 414+ E95C             >
 414+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ E95C             >Latest_Definition defl  Heap_Ptr
 414+ E95C             >
 414+ E95C             >                // dummy db directives used to calculate length of namec
 414+ E95C 2F          >                db      "/"
 414+ E95D             >len_NFA         defl    $ - temp_NFA
 414+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ E95C             >
 414+ E95C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ E95D 2F          >                db      "/"               // name string in 7-bit ascii, but
 414+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 414+ E95D AF          >                db      {b $} | END_BIT     // msb as name end
 414+ E95E             >
 414+ E95E 53 09       >                dw      Prev_Ptr            // Link to previous definition Name
 414+ E960             >Prev_Ptr        defl    Heap_Ptr
 414+ E960             >
 414+ E960             >mirror_Ptr      defl    $
 414+ E960             >
 414+ E960 C1 76       >                dw      Dict_Ptr + 2        // xt
 414+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 414+ E962             >
 414+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 414+ E962             >
 414+ E962             >//              ______________________________________________________________________
 414+ E962             >//              Dictionary part
 414+ E962             >
 414+ E962             >                org     Dict_Ptr
 414+ 76BF             >
 414+ 76BF 60 09       >                dw      mirror_Ptr - $E000
 414+ 76C1             >
 414+ 76C1             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 76C1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 76C4             >
 414+ 76C4             >
 414+ 76C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 76C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 76C4             >
 414+ 76C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 76C4 B2 76 15 69                  dw      DIVMOD, NIP             // /mod nip
 416+ 76C8 52 68                        dw      EXIT                    // ;
 417+ 76CA
 418+ 76CA              //  ______________________________________________________________________
 419+ 76CA              //
 420+ 76CA              // mod          n1 n2 -- n3
 421+ 76CA                              Colon_Def MOD, "MOD", is_normal
 421+ 76CA             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 421+ 76CA             >
 421+ 76CA             >Dict_Ptr        defl    $
 421+ 76CA             >
 421+ 76CA             >//              ______________________________________________________________________
 421+ 76CA             >//              Heap part
 421+ 76CA             >
 421+ 76CA             >
 421+ 76CA             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E962             >
 421+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E962             >Latest_Definition defl  Heap_Ptr
 421+ E962             >
 421+ E962             >                // dummy db directives used to calculate length of namec
 421+ E962 4D 4F 44    >                db      "MOD"
 421+ E965             >len_NFA         defl    $ - temp_NFA
 421+ E965             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E962             >
 421+ E962 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E963 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 421+ E966             >                org     $-1                 // alter last byte of Name just above to set
 421+ E965 C4          >                db      {b $} | END_BIT     // msb as name end
 421+ E966             >
 421+ E966 5C 09       >                dw      Prev_Ptr            // Link to previous definition Name
 421+ E968             >Prev_Ptr        defl    Heap_Ptr
 421+ E968             >
 421+ E968             >mirror_Ptr      defl    $
 421+ E968             >
 421+ E968 CC 76       >                dw      Dict_Ptr + 2        // xt
 421+ E96A             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E96A             >
 421+ E96A             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E96A             >
 421+ E96A             >//              ______________________________________________________________________
 421+ E96A             >//              Dictionary part
 421+ E96A             >
 421+ E96A             >                org     Dict_Ptr
 421+ 76CA             >
 421+ 76CA 68 09       >                dw      mirror_Ptr - $E000
 421+ 76CC             >
 421+ 76CC             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 76CC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 76CF             >
 421+ 76CF             >
 421+ 76CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 76CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 76CF             >
 421+ 76CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 76CF B2 76 10 69                  dw      DIVMOD, DROP            // /mod drop
 423+ 76D3 52 68                        dw      EXIT                    // ;
 424+ 76D5
 425+ 76D5              //  ______________________________________________________________________
 426+ 76D5              //
 427+ 76D5              // */mod        n1 n2 n3 -- n4 n5
 428+ 76D5              // leaves the quotient n5 and the remainder n4 of the operation
 429+ 76D5              // (n1 * n2) / n3. The intermediate passage through a double number
 430+ 76D5              // avoids loss of precision
 431+ 76D5                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 431+ 76D5             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 431+ 76D5             >
 431+ 76D5             >Dict_Ptr        defl    $
 431+ 76D5             >
 431+ 76D5             >//              ______________________________________________________________________
 431+ 76D5             >//              Heap part
 431+ 76D5             >
 431+ 76D5             >
 431+ 76D5             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ E96A             >
 431+ E96A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ E96A             >Latest_Definition defl  Heap_Ptr
 431+ E96A             >
 431+ E96A             >                // dummy db directives used to calculate length of namec
 431+ E96A 2A 2F 4D 4F >                db      "*/MOD"
 431+ E96E 44          >
 431+ E96F             >len_NFA         defl    $ - temp_NFA
 431+ E96F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ E96A             >
 431+ E96A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ E96B 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 431+ E96F 44          >
 431+ E970             >                org     $-1                 // alter last byte of Name just above to set
 431+ E96F C4          >                db      {b $} | END_BIT     // msb as name end
 431+ E970             >
 431+ E970 62 09       >                dw      Prev_Ptr            // Link to previous definition Name
 431+ E972             >Prev_Ptr        defl    Heap_Ptr
 431+ E972             >
 431+ E972             >mirror_Ptr      defl    $
 431+ E972             >
 431+ E972 D7 76       >                dw      Dict_Ptr + 2        // xt
 431+ E974             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ E974             >
 431+ E974             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ E974             >
 431+ E974             >//              ______________________________________________________________________
 431+ E974             >//              Dictionary part
 431+ E974             >
 431+ E974             >                org     Dict_Ptr
 431+ 76D5             >
 431+ 76D5 72 09       >                dw      mirror_Ptr - $E000
 431+ 76D7             >
 431+ 76D7             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 76D7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 76DA             >
 431+ 76DA             >
 431+ 76DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 76DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 76DA             >
 431+ 76DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 76DA 5C 68 1E 76                  dw      TO_R, MMUL              // >r  m*
 433+ 76DE 67 68 93 76                  dw      R_TO, MDIVM             // r>  m/mod
 434+ 76E2 52 68                        dw      EXIT                    // ;
 435+ 76E4
 436+ 76E4              //  ______________________________________________________________________
 437+ 76E4              //
 438+ 76E4              // */          n1 n2 n3 -- n4
 439+ 76E4              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 440+ 76E4                              Colon_Def MUL_DIV, "*/", is_normal
 440+ 76E4             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 440+ 76E4             >
 440+ 76E4             >Dict_Ptr        defl    $
 440+ 76E4             >
 440+ 76E4             >//              ______________________________________________________________________
 440+ 76E4             >//              Heap part
 440+ 76E4             >
 440+ 76E4             >
 440+ 76E4             >                org     (Heap_Ptr & $1FFF) + $E000
 440+ E974             >
 440+ E974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ E974             >Latest_Definition defl  Heap_Ptr
 440+ E974             >
 440+ E974             >                // dummy db directives used to calculate length of namec
 440+ E974 2A 2F       >                db      "*/"
 440+ E976             >len_NFA         defl    $ - temp_NFA
 440+ E976             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ E974             >
 440+ E974 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ E975 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 440+ E977             >                org     $-1                 // alter last byte of Name just above to set
 440+ E976 AF          >                db      {b $} | END_BIT     // msb as name end
 440+ E977             >
 440+ E977 6A 09       >                dw      Prev_Ptr            // Link to previous definition Name
 440+ E979             >Prev_Ptr        defl    Heap_Ptr
 440+ E979             >
 440+ E979             >mirror_Ptr      defl    $
 440+ E979             >
 440+ E979 E6 76       >                dw      Dict_Ptr + 2        // xt
 440+ E97B             >Heap_Ptr        defl    $ - $E000           // save current HP
 440+ E97B             >
 440+ E97B             >Current_HP      defl  $ - $E000             // used to set HP once!
 440+ E97B             >
 440+ E97B             >//              ______________________________________________________________________
 440+ E97B             >//              Dictionary part
 440+ E97B             >
 440+ E97B             >                org     Dict_Ptr
 440+ 76E4             >
 440+ 76E4 79 09       >                dw      mirror_Ptr - $E000
 440+ 76E6             >
 440+ 76E6             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 76E6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 76E9             >
 440+ 76E9             >
 440+ 76E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 76E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 76E9             >
 440+ 76E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 76E9 D7 76                        dw     MUL_DIV_MOD              // */mod
 442+ 76EB 15 69                        dw     NIP                      // nip
 443+ 76ED 52 68                        dw     EXIT                     // ;
 444+ 76EF
 445+ 76EF
 446+ 76EF              //  ______________________________________________________________________
 447+ 76EF              //
 448+ 76EF              // m/mod        ud1 u2 -- u3 ud4
 449+ 76EF              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 450+ 76EF              // All terms are unsigned.
 451+ 76EF              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 452+ 76EF              //              dw      TO_R                    // >r           ( ud1 )
 453+ 76EF              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 454+ 76EF              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 455+ 76EF              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 456+ 76EF              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 457+ 76EF              //              dw      EXIT                    // ;
 458+ 76EF
 459+ 76EF              //  ______________________________________________________________________
 460+ 76EF              //
 461+ 76EF              // (line)       n1 n2 -- a b
 462+ 76EF              // sends the line n1 of block n2 to the disk buffer.
 463+ 76EF              // it returns the address a and ca counter b = C/L meaning a whole line.
 464+ 76EF                              Colon_Def CLINE, "(LINE)", is_normal
 464+ 76EF             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 464+ 76EF             >
 464+ 76EF             >Dict_Ptr        defl    $
 464+ 76EF             >
 464+ 76EF             >//              ______________________________________________________________________
 464+ 76EF             >//              Heap part
 464+ 76EF             >
 464+ 76EF             >
 464+ 76EF             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ E97B             >
 464+ E97B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ E97B             >Latest_Definition defl  Heap_Ptr
 464+ E97B             >
 464+ E97B             >                // dummy db directives used to calculate length of namec
 464+ E97B 28 4C 49 4E >                db      "(LINE)"
 464+ E97F 45 29       >
 464+ E981             >len_NFA         defl    $ - temp_NFA
 464+ E981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ E97B             >
 464+ E97B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ E97C 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 464+ E980 45 29       >
 464+ E982             >                org     $-1                 // alter last byte of Name just above to set
 464+ E981 A9          >                db      {b $} | END_BIT     // msb as name end
 464+ E982             >
 464+ E982 74 09       >                dw      Prev_Ptr            // Link to previous definition Name
 464+ E984             >Prev_Ptr        defl    Heap_Ptr
 464+ E984             >
 464+ E984             >mirror_Ptr      defl    $
 464+ E984             >
 464+ E984 F1 76       >                dw      Dict_Ptr + 2        // xt
 464+ E986             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ E986             >
 464+ E986             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ E986             >
 464+ E986             >//              ______________________________________________________________________
 464+ E986             >//              Dictionary part
 464+ E986             >
 464+ E986             >                org     Dict_Ptr
 464+ 76EF             >
 464+ 76EF 84 09       >                dw      mirror_Ptr - $E000
 464+ 76F1             >
 464+ 76F1             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 76F1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 76F4             >
 464+ 76F4             >
 464+ 76F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 76F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 76F4             >
 464+ 76F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 76F4 5C 68                        dw      TO_R                    // >r
 466+ 76F6 AB 6A                        dw      CL                      // c/l
 467+ 76F8 B2 6A D7 76                  dw      BBUF, MUL_DIV_MOD       // */mod
 468+ 76FC 67 68                        dw      R_TO                    // r>
 469+ 76FE B9 6A A7 76                  dw      BSCR, MUL, PLUS         // b/scr * +
 469+ 7702 A5 68
 470+ 7704 08 79                        dw      BLOCK                   // block   ( forward )
 471+ 7706 A5 68                        dw      PLUS                    // +
 472+ 7708 AB 6A                        dw      CL                      // c/l
 473+ 770A 52 68                        dw      EXIT                    // ;
 474+ 770C
 475+ 770C              //  ______________________________________________________________________
 476+ 770C              //
 477+ 770C              // .line        n1 n2 --
 478+ 770C              // Sends to output line  n1  of screen n2.
 479+ 770C                              Colon_Def DOT_LINE, ".LINE", is_normal
 479+ 770C             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 479+ 770C             >
 479+ 770C             >Dict_Ptr        defl    $
 479+ 770C             >
 479+ 770C             >//              ______________________________________________________________________
 479+ 770C             >//              Heap part
 479+ 770C             >
 479+ 770C             >
 479+ 770C             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E986             >
 479+ E986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E986             >Latest_Definition defl  Heap_Ptr
 479+ E986             >
 479+ E986             >                // dummy db directives used to calculate length of namec
 479+ E986 2E 4C 49 4E >                db      ".LINE"
 479+ E98A 45          >
 479+ E98B             >len_NFA         defl    $ - temp_NFA
 479+ E98B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E986             >
 479+ E986 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E987 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 479+ E98B 45          >
 479+ E98C             >                org     $-1                 // alter last byte of Name just above to set
 479+ E98B C5          >                db      {b $} | END_BIT     // msb as name end
 479+ E98C             >
 479+ E98C 7B 09       >                dw      Prev_Ptr            // Link to previous definition Name
 479+ E98E             >Prev_Ptr        defl    Heap_Ptr
 479+ E98E             >
 479+ E98E             >mirror_Ptr      defl    $
 479+ E98E             >
 479+ E98E 0E 77       >                dw      Dict_Ptr + 2        // xt
 479+ E990             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E990             >
 479+ E990             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E990             >
 479+ E990             >//              ______________________________________________________________________
 479+ E990             >//              Dictionary part
 479+ E990             >
 479+ E990             >                org     Dict_Ptr
 479+ 770C             >
 479+ 770C 8E 09       >                dw      mirror_Ptr - $E000
 479+ 770E             >
 479+ 770E             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 770E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 7711             >
 479+ 7711             >
 479+ 7711             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 7711             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 7711             >
 479+ 7711             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 7711 F1 76 89 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 480+ 7715 72 6F
 481+ 7717 52 68                        dw      EXIT                    // ;
 482+ 7719
 483+ 7719              //  ______________________________________________________________________
 484+ 7719              //
 485+ 7719              // message       n1 n2 --
 486+ 7719              // prints error message to current channel.
 487+ 7719              // if WARNING is 0, prints "MSG#n".
 488+ 7719              // if WARNING is 1, prints line n of screen 4.
 489+ 7719              // if WARNING is -1, see ERROR
 490+ 7719              // value can be negative or beyond block 4.
 491+ 7719                              Colon_Def MESSAGE, "MESSAGE", is_normal
 491+ 7719             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 491+ 7719             >
 491+ 7719             >Dict_Ptr        defl    $
 491+ 7719             >
 491+ 7719             >//              ______________________________________________________________________
 491+ 7719             >//              Heap part
 491+ 7719             >
 491+ 7719             >
 491+ 7719             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ E990             >
 491+ E990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ E990             >Latest_Definition defl  Heap_Ptr
 491+ E990             >
 491+ E990             >                // dummy db directives used to calculate length of namec
 491+ E990 4D 45 53 53 >                db      "MESSAGE"
 491+ E994 41 47 45    >
 491+ E997             >len_NFA         defl    $ - temp_NFA
 491+ E997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ E990             >
 491+ E990 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ E991 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 491+ E995 41 47 45    >
 491+ E998             >                org     $-1                 // alter last byte of Name just above to set
 491+ E997 C5          >                db      {b $} | END_BIT     // msb as name end
 491+ E998             >
 491+ E998 86 09       >                dw      Prev_Ptr            // Link to previous definition Name
 491+ E99A             >Prev_Ptr        defl    Heap_Ptr
 491+ E99A             >
 491+ E99A             >mirror_Ptr      defl    $
 491+ E99A             >
 491+ E99A 1B 77       >                dw      Dict_Ptr + 2        // xt
 491+ E99C             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ E99C             >
 491+ E99C             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ E99C             >
 491+ E99C             >//              ______________________________________________________________________
 491+ E99C             >//              Dictionary part
 491+ E99C             >
 491+ E99C             >                org     Dict_Ptr
 491+ 7719             >
 491+ 7719 9A 09       >                dw      mirror_Ptr - $E000
 491+ 771B             >
 491+ 771B             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 771B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 491+ 771E             >
 491+ 771E             >
 491+ 771E             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 771E             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 771E             >
 491+ 771E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 771E F2 6A 89 69                  dw      WARNING, FETCH          // warning @
 493+ 7722                                                              // if
 494+ 7722 F5 63                        dw      ZBRANCH
 495+ 7724 18 00                        dw      Message_Else - $
 496+ 7726 A3 63 04 00                  dw          LIT, 4              //      4
 497+ 772A 3A 6B 89 69                  dw          OFFSET, FETCH       //      offset @
 498+ 772E B9 6A C1 76                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 498+ 7732 E5 6B
 499+ 7734 0E 77                        dw          DOT_LINE            //      .line
 500+ 7736 77 6C                        dw          SPACE               //      space
 501+ 7738                                                              // else
 502+ 7738
 503+ 7738 E8 63                        dw      BRANCH
 504+ 773A 0B 00                        dw      Message_ENdif - $
 505+ 773C              Message_Else:
 506+ 773C 0F 71                        dw          C_DOT_QUOTE         //      .( msg#)
 507+ 773E 04 6D 73 67                  db          4, "msg#"
 507+ 7742 23
 508+ 7743 4C 7E                        dw          DOT                 //      .  ( forward )
 509+ 7745              Message_ENdif:                                  // endif
 510+ 7745 52 68                        dw      EXIT                    // ;
 511+ 7747
 512+ 7747
 513+ 7747              //  ______________________________________________________________________
 514+ 7747              //
 515+ 7747              // device
 516+ 7747                              Variable_Def DEVICE,   "DEVICE",   2
 516+ 7747             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 516+ 7747             >
 516+ 7747             >Dict_Ptr        defl    $
 516+ 7747             >
 516+ 7747             >//              ______________________________________________________________________
 516+ 7747             >//              Heap part
 516+ 7747             >
 516+ 7747             >
 516+ 7747             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ E99C             >
 516+ E99C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ E99C             >Latest_Definition defl  Heap_Ptr
 516+ E99C             >
 516+ E99C             >                // dummy db directives used to calculate length of namec
 516+ E99C 44 45 56 49 >                db      "DEVICE"
 516+ E9A0 43 45       >
 516+ E9A2             >len_NFA         defl    $ - temp_NFA
 516+ E9A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ E99C             >
 516+ E99C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ E99D 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 516+ E9A1 43 45       >
 516+ E9A3             >                org     $-1                 // alter last byte of Name just above to set
 516+ E9A2 C5          >                db      {b $} | END_BIT     // msb as name end
 516+ E9A3             >
 516+ E9A3 90 09       >                dw      Prev_Ptr            // Link to previous definition Name
 516+ E9A5             >Prev_Ptr        defl    Heap_Ptr
 516+ E9A5             >
 516+ E9A5             >mirror_Ptr      defl    $
 516+ E9A5             >
 516+ E9A5 49 77       >                dw      Dict_Ptr + 2        // xt
 516+ E9A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ E9A7             >
 516+ E9A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ E9A7             >
 516+ E9A7             >//              ______________________________________________________________________
 516+ E9A7             >//              Dictionary part
 516+ E9A7             >
 516+ E9A7             >                org     Dict_Ptr
 516+ 7747             >
 516+ 7747 A5 09       >                dw      mirror_Ptr - $E000
 516+ 7749             >
 516+ 7749             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7749 CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 516+ 774C             >
 516+ 774C             >
 516+ 774C             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 774C             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 774C             >
 516+ 774C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 774C 02 00       >                dw      2
 517+ 774E
 518+ 774E              //  ______________________________________________________________________
 519+ 774E
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 114  774E                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 774E              //  ______________________________________________________________________
   2+ 774E              //
   3+ 774E              //  next-opt.asm
   4+ 774E              //
   5+ 774E              //  ZX Spectrum Next - peculiar definitions
   6+ 774E              //  ______________________________________________________________________
   7+ 774E
   8+ 774E              //  ______________________________________________________________________
   9+ 774E              //
  10+ 774E              // reg@         n -- b
  11+ 774E              // read Next REGister n giving byte b
  12+ 774E              //
  13+ 774E              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 774E              //              dw      LIT, $243B
  15+ 774E              //              dw      PSTORE
  16+ 774E              //              dw      LIT, $253B
  17+ 774E              //              dw      PFETCH
  18+ 774E              //              dw      EXIT
  19+ 774E                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 774E             >
  19+ 774E             >Dict_Ptr        defl    $
  19+ 774E             >
  19+ 774E             >//              ______________________________________________________________________
  19+ 774E             >//              Heap part
  19+ 774E             >
  19+ 774E             >
  19+ 774E             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ E9A7             >
  19+ E9A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ E9A7             >Latest_Definition defl  Heap_Ptr
  19+ E9A7             >
  19+ E9A7             >                // dummy db directives used to calculate length of namec
  19+ E9A7 52 45 47 40 >                db      "REG@"
  19+ E9AB             >len_NFA         defl    $ - temp_NFA
  19+ E9AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ E9A7             >
  19+ E9A7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ E9A8 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ E9AC             >                org     $-1                 // alter last byte of Name just above to set
  19+ E9AB C0          >                db      {b $} | END_BIT     // msb as name end
  19+ E9AC             >
  19+ E9AC 9C 09       >                dw      Prev_Ptr            // Link to previous definition Name
  19+ E9AE             >Prev_Ptr        defl    Heap_Ptr
  19+ E9AE             >
  19+ E9AE             >mirror_Ptr      defl    $
  19+ E9AE             >
  19+ E9AE 50 77       >                dw      Dict_Ptr + 2        // xt
  19+ E9B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ E9B0             >
  19+ E9B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ E9B0             >
  19+ E9B0             >//              ______________________________________________________________________
  19+ E9B0             >//              Dictionary part
  19+ E9B0             >
  19+ E9B0             >                org     Dict_Ptr
  19+ 774E             >
  19+ 774E AE 09       >                dw      mirror_Ptr - $E000
  19+ 7750             >
  19+ 7750             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7750 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7750 ~           >
  19+ 7750 ~           >
  19+ 7750             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7750             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7750             >
  19+ 7750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7750 D9                           exx
  21+ 7751 01 3B 24                     ld      bc, $243B
  22+ 7754 E1                           pop     hl
  23+ 7755 ED 69                        out     (c), l
  24+ 7757 04                           inc     b
  25+ 7758 ED 68                        in      l, (c)
  26+ 775A E5                           push    hl
  27+ 775B D9                           exx
  28+ 775C                              next
  28+ 775C DD E9       >                jp      (ix)
  29+ 775E
  30+ 775E
  31+ 775E              //  ______________________________________________________________________
  32+ 775E              //
  33+ 775E              // reg!         b n --
  34+ 775E              // write value b to Next REGister n
  35+ 775E              //
  36+ 775E              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 775E              //              dw      LIT, $243B
  38+ 775E              //              dw      PSTORE
  39+ 775E              //              dw      LIT, $253B
  40+ 775E              //              dw      PSTORE
  41+ 775E              //              dw      EXIT
  42+ 775E                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 775E             >
  42+ 775E             >Dict_Ptr        defl    $
  42+ 775E             >
  42+ 775E             >//              ______________________________________________________________________
  42+ 775E             >//              Heap part
  42+ 775E             >
  42+ 775E             >
  42+ 775E             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ E9B0             >
  42+ E9B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ E9B0             >Latest_Definition defl  Heap_Ptr
  42+ E9B0             >
  42+ E9B0             >                // dummy db directives used to calculate length of namec
  42+ E9B0 52 45 47 21 >                db      "REG!"
  42+ E9B4             >len_NFA         defl    $ - temp_NFA
  42+ E9B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ E9B0             >
  42+ E9B0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ E9B1 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ E9B5             >                org     $-1                 // alter last byte of Name just above to set
  42+ E9B4 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ E9B5             >
  42+ E9B5 A7 09       >                dw      Prev_Ptr            // Link to previous definition Name
  42+ E9B7             >Prev_Ptr        defl    Heap_Ptr
  42+ E9B7             >
  42+ E9B7             >mirror_Ptr      defl    $
  42+ E9B7             >
  42+ E9B7 60 77       >                dw      Dict_Ptr + 2        // xt
  42+ E9B9             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ E9B9             >
  42+ E9B9             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ E9B9             >
  42+ E9B9             >//              ______________________________________________________________________
  42+ E9B9             >//              Dictionary part
  42+ E9B9             >
  42+ E9B9             >                org     Dict_Ptr
  42+ 775E             >
  42+ 775E B7 09       >                dw      mirror_Ptr - $E000
  42+ 7760             >
  42+ 7760             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7760 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7760 ~           >
  42+ 7760 ~           >
  42+ 7760             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7760             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7760             >
  42+ 7760             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7760 D9                           exx
  44+ 7761 01 3B 24                     ld      bc, $243B
  45+ 7764 E1                           pop     hl
  46+ 7765 ED 69                        out     (c), l
  47+ 7767 04                           inc     b
  48+ 7768 E1                           pop     hl
  49+ 7769 ED 69                        out     (c), l
  50+ 776B D9                           exx
  51+ 776C                              next
  51+ 776C DD E9       >                jp      (ix)
  52+ 776E
  53+ 776E
  54+ 776E              //  ______________________________________________________________________
  55+ 776E              //
  56+ 776E              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 776E              // NextZXOS call wrapper.
  58+ 776E              //  n1 = hl register parameter value
  59+ 776E              //  n2 = de register parameter value
  60+ 776E              //  n3 = bc register parameter value
  61+ 776E              //  n4 =  a register parameter value
  62+ 776E              //   a = routine address in ROM 3
  63+ 776E              // ----
  64+ 776E              //  n5 = hl returned value
  65+ 776E              //  n6 = de returned value
  66+ 776E              //  n7 = bc returned value
  67+ 776E              //  n8 =  a returned value
  68+ 776E              //   f
  69+ 776E                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 776E             >
  69+ 776E             >Dict_Ptr        defl    $
  69+ 776E             >
  69+ 776E             >//              ______________________________________________________________________
  69+ 776E             >//              Heap part
  69+ 776E             >
  69+ 776E             >
  69+ 776E             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ E9B9             >
  69+ E9B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ E9B9             >Latest_Definition defl  Heap_Ptr
  69+ E9B9             >
  69+ E9B9             >                // dummy db directives used to calculate length of namec
  69+ E9B9 4D 5F 50 33 >                db      "M_P3DOS"
  69+ E9BD 44 4F 53    >
  69+ E9C0             >len_NFA         defl    $ - temp_NFA
  69+ E9C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ E9B9             >
  69+ E9B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ E9BA 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ E9BE 44 4F 53    >
  69+ E9C1             >                org     $-1                 // alter last byte of Name just above to set
  69+ E9C0 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ E9C1             >
  69+ E9C1 B0 09       >                dw      Prev_Ptr            // Link to previous definition Name
  69+ E9C3             >Prev_Ptr        defl    Heap_Ptr
  69+ E9C3             >
  69+ E9C3             >mirror_Ptr      defl    $
  69+ E9C3             >
  69+ E9C3 70 77       >                dw      Dict_Ptr + 2        // xt
  69+ E9C5             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ E9C5             >
  69+ E9C5             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ E9C5             >
  69+ E9C5             >//              ______________________________________________________________________
  69+ E9C5             >//              Dictionary part
  69+ E9C5             >
  69+ E9C5             >                org     Dict_Ptr
  69+ 776E             >
  69+ 776E C3 09       >                dw      mirror_Ptr - $E000
  69+ 7770             >
  69+ 7770             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7770 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7770 ~           >
  69+ 7770 ~           >
  69+ 7770             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7770             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7770             >
  69+ 7770             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7770 D9                            exx
  71+ 7771 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 7772 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 7773 7B                            ld      a, e
  74+ 7774 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 7775 D1                            pop     de                  // de' argument              //  n1
  76+ 7776 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 7777 D9                           exx
  78+ 7778 E1                           pop     hl                  // entry address a
  79+ 7779 DD E5                        push    ix
  80+ 777B D5                           push    de
  81+ 777C C5                           push    bc
  82+ 777D EB                           ex      de, hl              // de is entry address
  83+ 777E              //              ld      (SP_Saved), sp
  84+ 777E              //              ld      sp, Cold_origin - 5
  85+ 777E 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 7780
  87+ 7780 CF                           rst     08
  88+ 7781 94                           db      $94
  89+ 7782
  90+ 7782              //              ld      sp, (SP_Saved)
  91+ 7782              //              push    ix
  92+ 7782              //              pop     hl
  93+ 7782              //              ld      (IX_Echo), hl
  94+ 7782 DD 22 98 63                  ld      (IX_Echo), ix
  95+ 7786
  96+ 7786 D9                           exx
  97+ 7787 C1                           pop     bc
  98+ 7788 D1                           pop     de
  99+ 7789 DD E1                        pop     ix
 100+ 778B D9                            exx
 101+ 778C E5                            push    hl
 102+ 778D D5                            push    de
 103+ 778E C5                            push    bc
 104+ 778F 26 00                         ld      h, 0
 105+ 7791 6F                            ld      l, a
 106+ 7792 E5                            push    hl
 107+ 7793 D9                           exx
 108+ 7794 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 7796 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 7797 E5                           push    hl
 111+ 7798                              next
 111+ 7798 DD E9       >                jp      (ix)
 112+ 779A
 113+ 779A              //  ______________________________________________________________________
 114+ 779A              //
 115+ 779A              // blk-fh
 116+ 779A                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 779A             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 779A             >
 116+ 779A             >Dict_Ptr        defl    $
 116+ 779A             >
 116+ 779A             >//              ______________________________________________________________________
 116+ 779A             >//              Heap part
 116+ 779A             >
 116+ 779A             >
 116+ 779A             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E9C5             >
 116+ E9C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E9C5             >Latest_Definition defl  Heap_Ptr
 116+ E9C5             >
 116+ E9C5             >                // dummy db directives used to calculate length of namec
 116+ E9C5 42 4C 4B 2D >                db      "BLK-FH"
 116+ E9C9 46 48       >
 116+ E9CB             >len_NFA         defl    $ - temp_NFA
 116+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E9C5             >
 116+ E9C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E9C6 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ E9CA 46 48       >
 116+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 116+ E9CB C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E9CC             >
 116+ E9CC B9 09       >                dw      Prev_Ptr            // Link to previous definition Name
 116+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 116+ E9CE             >
 116+ E9CE             >mirror_Ptr      defl    $
 116+ E9CE             >
 116+ E9CE 9C 77       >                dw      Dict_Ptr + 2        // xt
 116+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E9D0             >
 116+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E9D0             >
 116+ E9D0             >//              ______________________________________________________________________
 116+ E9D0             >//              Dictionary part
 116+ E9D0             >
 116+ E9D0             >                org     Dict_Ptr
 116+ 779A             >
 116+ 779A CE 09       >                dw      mirror_Ptr - $E000
 116+ 779C             >
 116+ 779C             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 779C CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 779F             >
 116+ 779F             >
 116+ 779F             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 779F             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 779F             >
 116+ 779F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 779F 01 00       >                dw      1
 117+ 77A1
 118+ 77A1                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 77A1             >
 118+ 77A1             >Dict_Ptr        defl    $
 118+ 77A1             >
 118+ 77A1             >//              ______________________________________________________________________
 118+ 77A1             >//              Heap part
 118+ 77A1             >
 118+ 77A1             >
 118+ 77A1             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ E9D0             >
 118+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ E9D0             >Latest_Definition defl  Heap_Ptr
 118+ E9D0             >
 118+ E9D0             >                // dummy db directives used to calculate length of namec
 118+ E9D0 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ E9D4 46 4E 41 4D >
 118+ E9D8 45          >
 118+ E9D9             >len_NFA         defl    $ - temp_NFA
 118+ E9D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ E9D0             >
 118+ E9D0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ E9D1 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ E9D5 46 4E 41 4D >
 118+ E9D9 45          >
 118+ E9DA             >                org     $-1                 // alter last byte of Name just above to set
 118+ E9D9 C5          >                db      {b $} | END_BIT     // msb as name end
 118+ E9DA             >
 118+ E9DA C5 09       >                dw      Prev_Ptr            // Link to previous definition Name
 118+ E9DC             >Prev_Ptr        defl    Heap_Ptr
 118+ E9DC             >
 118+ E9DC             >mirror_Ptr      defl    $
 118+ E9DC             >
 118+ E9DC A3 77       >                dw      Dict_Ptr + 2        // xt
 118+ E9DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ E9DE             >
 118+ E9DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ E9DE             >
 118+ E9DE             >//              ______________________________________________________________________
 118+ E9DE             >//              Dictionary part
 118+ E9DE             >
 118+ E9DE             >                org     Dict_Ptr
 118+ 77A1             >
 118+ 77A1 DC 09       >                dw      mirror_Ptr - $E000
 118+ 77A3             >
 118+ 77A3             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 77A3 CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 77A6             >
 118+ 77A6             >
 118+ 77A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 77A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 77A6             >
 118+ 77A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 77A6 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 77AA 6F 63 6B 73
 119+ 77AE 2D 36 34 2E
 119+ 77B2 62 69 6E 00
 120+ 77B6 00 00 00...                  ds      24
 121+ 77CE
 122+ 77CE              //  ______________________________________________________________________
 123+ 77CE              //
 124+ 77CE              // blk-seek     n --
 125+ 77CE              // seek block n  within blocks!.bin  file
 126+ 77CE                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 77CE             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 77CE             >
 126+ 77CE             >Dict_Ptr        defl    $
 126+ 77CE             >
 126+ 77CE             >//              ______________________________________________________________________
 126+ 77CE             >//              Heap part
 126+ 77CE             >
 126+ 77CE             >
 126+ 77CE             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E9DE             >
 126+ E9DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E9DE             >Latest_Definition defl  Heap_Ptr
 126+ E9DE             >
 126+ E9DE             >                // dummy db directives used to calculate length of namec
 126+ E9DE 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ E9E2 53 45 45 4B >
 126+ E9E6             >len_NFA         defl    $ - temp_NFA
 126+ E9E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E9DE             >
 126+ E9DE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E9DF 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ E9E3 53 45 45 4B >
 126+ E9E7             >                org     $-1                 // alter last byte of Name just above to set
 126+ E9E6 CB          >                db      {b $} | END_BIT     // msb as name end
 126+ E9E7             >
 126+ E9E7 D0 09       >                dw      Prev_Ptr            // Link to previous definition Name
 126+ E9E9             >Prev_Ptr        defl    Heap_Ptr
 126+ E9E9             >
 126+ E9E9             >mirror_Ptr      defl    $
 126+ E9E9             >
 126+ E9E9 D0 77       >                dw      Dict_Ptr + 2        // xt
 126+ E9EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E9EB             >
 126+ E9EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E9EB             >
 126+ E9EB             >//              ______________________________________________________________________
 126+ E9EB             >//              Dictionary part
 126+ E9EB             >
 126+ E9EB             >                org     Dict_Ptr
 126+ 77CE             >
 126+ 77CE E9 09       >                dw      mirror_Ptr - $E000
 126+ 77D0             >
 126+ 77D0             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 77D0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 77D3             >
 126+ 77D3             >
 126+ 77D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 77D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 77D3             >
 126+ 77D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 77D3 B2 6A 1E 76                  dw  BBUF, MMUL
 128+ 77D7 9C 77 89 69                  dw  BLK_FH, FETCH
 129+ 77DB E3 66                        dw  F_SEEK
 130+ 77DD A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 77E1 E2 6D
 131+ 77E3 52 68                        dw  EXIT
 132+ 77E5
 133+ 77E5              //  ______________________________________________________________________
 134+ 77E5              //
 135+ 77E5              // blk-read     n --
 136+ 77E5              // seek block n  within blocks!.bin  file
 137+ 77E5                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 77E5             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 77E5             >
 137+ 77E5             >Dict_Ptr        defl    $
 137+ 77E5             >
 137+ 77E5             >//              ______________________________________________________________________
 137+ 77E5             >//              Heap part
 137+ 77E5             >
 137+ 77E5             >
 137+ 77E5             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ E9EB             >
 137+ E9EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ E9EB             >Latest_Definition defl  Heap_Ptr
 137+ E9EB             >
 137+ E9EB             >                // dummy db directives used to calculate length of namec
 137+ E9EB 42 4C 4B 2D >                db      "BLK-READ"
 137+ E9EF 52 45 41 44 >
 137+ E9F3             >len_NFA         defl    $ - temp_NFA
 137+ E9F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ E9EB             >
 137+ E9EB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ E9EC 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ E9F0 52 45 41 44 >
 137+ E9F4             >                org     $-1                 // alter last byte of Name just above to set
 137+ E9F3 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ E9F4             >
 137+ E9F4 DE 09       >                dw      Prev_Ptr            // Link to previous definition Name
 137+ E9F6             >Prev_Ptr        defl    Heap_Ptr
 137+ E9F6             >
 137+ E9F6             >mirror_Ptr      defl    $
 137+ E9F6             >
 137+ E9F6 E7 77       >                dw      Dict_Ptr + 2        // xt
 137+ E9F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ E9F8             >
 137+ E9F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ E9F8             >
 137+ E9F8             >//              ______________________________________________________________________
 137+ E9F8             >//              Dictionary part
 137+ E9F8             >
 137+ E9F8             >                org     Dict_Ptr
 137+ 77E5             >
 137+ 77E5 F6 09       >                dw      mirror_Ptr - $E000
 137+ 77E7             >
 137+ 77E7             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 77E7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 77EA             >
 137+ 77EA             >
 137+ 77EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 77EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 77EA             >
 137+ 77EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 77EA D0 77                        dw  BLK_SEEK
 139+ 77EC B2 6A                        dw  BBUF
 140+ 77EE 9C 77 89 69                  dw  BLK_FH, FETCH
 141+ 77F2 2F 67                        dw  F_READ
 142+ 77F4 A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 77F8 E2 6D
 143+ 77FA 10 69                        dw  DROP
 144+ 77FC 52 68                        dw  EXIT
 145+ 77FE
 146+ 77FE              //  ______________________________________________________________________
 147+ 77FE              //
 148+ 77FE              // blk-write     n --
 149+ 77FE              // seek block n  within blocks!.bin  file
 150+ 77FE                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 77FE             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 77FE             >
 150+ 77FE             >Dict_Ptr        defl    $
 150+ 77FE             >
 150+ 77FE             >//              ______________________________________________________________________
 150+ 77FE             >//              Heap part
 150+ 77FE             >
 150+ 77FE             >
 150+ 77FE             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E9F8             >
 150+ E9F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E9F8             >Latest_Definition defl  Heap_Ptr
 150+ E9F8             >
 150+ E9F8             >                // dummy db directives used to calculate length of namec
 150+ E9F8 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ E9FC 57 52 49 54 >
 150+ EA00 45          >
 150+ EA01             >len_NFA         defl    $ - temp_NFA
 150+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E9F8             >
 150+ E9F8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E9F9 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ E9FD 57 52 49 54 >
 150+ EA01 45          >
 150+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA01 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA02             >
 150+ EA02 EB 09       >                dw      Prev_Ptr            // Link to previous definition Name
 150+ EA04             >Prev_Ptr        defl    Heap_Ptr
 150+ EA04             >
 150+ EA04             >mirror_Ptr      defl    $
 150+ EA04             >
 150+ EA04 00 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA06             >
 150+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA06             >
 150+ EA06             >//              ______________________________________________________________________
 150+ EA06             >//              Dictionary part
 150+ EA06             >
 150+ EA06             >                org     Dict_Ptr
 150+ 77FE             >
 150+ 77FE 04 0A       >                dw      mirror_Ptr - $E000
 150+ 7800             >
 150+ 7800             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7800 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 7803             >
 150+ 7803             >
 150+ 7803             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 7803             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 7803             >
 150+ 7803             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7803 D0 77                        dw  BLK_SEEK
 152+ 7805 B2 6A                        dw  BBUF
 153+ 7807 9C 77 89 69                  dw  BLK_FH, FETCH
 154+ 780B 4A 67                        dw  F_WRITE
 155+ 780D A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 7811 E2 6D
 156+ 7813 10 69                        dw  DROP
 157+ 7815 52 68                        dw  EXIT
 158+ 7817
 159+ 7817              //  ______________________________________________________________________
 160+ 7817              //
 161+ 7817              // blk-init     n --
 162+ 7817              // seek block n  within blocks!.bin  file
 163+ 7817                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 7817             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 7817             >
 163+ 7817             >Dict_Ptr        defl    $
 163+ 7817             >
 163+ 7817             >//              ______________________________________________________________________
 163+ 7817             >//              Heap part
 163+ 7817             >
 163+ 7817             >
 163+ 7817             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA06             >
 163+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA06             >Latest_Definition defl  Heap_Ptr
 163+ EA06             >
 163+ EA06             >                // dummy db directives used to calculate length of namec
 163+ EA06 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA0A 49 4E 49 54 >
 163+ EA0E             >len_NFA         defl    $ - temp_NFA
 163+ EA0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA06             >
 163+ EA06 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA07 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EA0B 49 4E 49 54 >
 163+ EA0F             >                org     $-1                 // alter last byte of Name just above to set
 163+ EA0E D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EA0F             >
 163+ EA0F F8 09       >                dw      Prev_Ptr            // Link to previous definition Name
 163+ EA11             >Prev_Ptr        defl    Heap_Ptr
 163+ EA11             >
 163+ EA11             >mirror_Ptr      defl    $
 163+ EA11             >
 163+ EA11 19 78       >                dw      Dict_Ptr + 2        // xt
 163+ EA13             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EA13             >
 163+ EA13             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EA13             >
 163+ EA13             >//              ______________________________________________________________________
 163+ EA13             >//              Dictionary part
 163+ EA13             >
 163+ EA13             >                org     Dict_Ptr
 163+ 7817             >
 163+ 7817 11 0A       >                dw      mirror_Ptr - $E000
 163+ 7819             >
 163+ 7819             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 7819 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 781C             >
 163+ 781C             >
 163+ 781C             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 781C             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 781C             >
 163+ 781C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 781C 9C 77 89 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 7820 FF 66 10 69
 165+ 7824 A3 77 BE 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 7828 A6 6B 96 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 782C 5A 67
 167+ 782E A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 7832 E2 6D
 168+ 7834 9C 77 93 69                  dw  BLK_FH, STORE
 169+ 7838 52 68                        dw  EXIT
 170+ 783A
 171+ 783A              //  ______________________________________________________________________
 172+ 783A              //
 173+ 783A              // #sec
 174+ 783A              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 783A              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 783A
 177+ 783A                              Constant_Def NSEC , "#SEC", 32767
 177+ 783A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 783A             >
 177+ 783A             >Dict_Ptr        defl    $
 177+ 783A             >
 177+ 783A             >//              ______________________________________________________________________
 177+ 783A             >//              Heap part
 177+ 783A             >
 177+ 783A             >
 177+ 783A             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EA13             >
 177+ EA13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EA13             >Latest_Definition defl  Heap_Ptr
 177+ EA13             >
 177+ EA13             >                // dummy db directives used to calculate length of namec
 177+ EA13 23 53 45 43 >                db      "#SEC"
 177+ EA17             >len_NFA         defl    $ - temp_NFA
 177+ EA17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EA13             >
 177+ EA13 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EA14 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EA18             >                org     $-1                 // alter last byte of Name just above to set
 177+ EA17 C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EA18             >
 177+ EA18 06 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 177+ EA1A             >Prev_Ptr        defl    Heap_Ptr
 177+ EA1A             >
 177+ EA1A             >mirror_Ptr      defl    $
 177+ EA1A             >
 177+ EA1A 3C 78       >                dw      Dict_Ptr + 2        // xt
 177+ EA1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EA1C             >
 177+ EA1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EA1C             >
 177+ EA1C             >//              ______________________________________________________________________
 177+ EA1C             >//              Dictionary part
 177+ EA1C             >
 177+ EA1C             >                org     Dict_Ptr
 177+ 783A             >
 177+ 783A 1A 0A       >                dw      mirror_Ptr - $E000
 177+ 783C             >
 177+ 783C             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 783C CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 783F             >
 177+ 783F             >
 177+ 783F             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 783F             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 783F             >
 177+ 783F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 783F FF 7F       >                dw      32767
 178+ 7841
 179+ 7841              //  ______________________________________________________________________
 180+ 7841
 181+ 7841
 182+ 7841
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 115  7841                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 7841              //  ______________________________________________________________________
   2+ 7841              //
   3+ 7841              //  L3.asm
   4+ 7841              //
   5+ 7841              //  Continuation of L2.asm
   6+ 7841              //  I/O Block definitions
   7+ 7841              //  ______________________________________________________________________
   8+ 7841
   9+ 7841
  10+ 7841              //  ______________________________________________________________________
  11+ 7841              //
  12+ 7841              // r/w          a n f --
  13+ 7841              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7841                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7841             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7841             >
  14+ 7841             >Dict_Ptr        defl    $
  14+ 7841             >
  14+ 7841             >//              ______________________________________________________________________
  14+ 7841             >//              Heap part
  14+ 7841             >
  14+ 7841             >
  14+ 7841             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA1C             >
  14+ EA1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA1C             >Latest_Definition defl  Heap_Ptr
  14+ EA1C             >
  14+ EA1C             >                // dummy db directives used to calculate length of namec
  14+ EA1C 52 2F 57    >                db      "R/W"
  14+ EA1F             >len_NFA         defl    $ - temp_NFA
  14+ EA1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA1C             >
  14+ EA1C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA1D 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA20             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA1F D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA20             >
  14+ EA20 13 0A       >                dw      Prev_Ptr            // Link to previous definition Name
  14+ EA22             >Prev_Ptr        defl    Heap_Ptr
  14+ EA22             >
  14+ EA22             >mirror_Ptr      defl    $
  14+ EA22             >
  14+ EA22 43 78       >                dw      Dict_Ptr + 2        // xt
  14+ EA24             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA24             >
  14+ EA24             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA24             >
  14+ EA24             >//              ______________________________________________________________________
  14+ EA24             >//              Dictionary part
  14+ EA24             >
  14+ EA24             >                org     Dict_Ptr
  14+ 7841             >
  14+ 7841 22 0A       >                dw      mirror_Ptr - $E000
  14+ 7843             >
  14+ 7843             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7843 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7846             >
  14+ 7846             >
  14+ 7846             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7846             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7846             >
  14+ 7846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7846 5C 68                        dw      TO_R                    // >r
  16+ 7848 C5 68                        dw      ONE_SUBTRACT            // 1-
  17+ 784A 2B 69 8A 68                  dw      DUP, ZLESS              // dup 0<
  18+ 784E 07 69 3C 78                  dw      OVER, NSEC              // over #sec
  19+ 7852 C5 68 1F 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7856 1B 68                        dw      OR_OP                   // or
  21+ 7858 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 785C E2 6D
  22+ 785E 67 68                        dw      R_TO                    // r>
  23+ 7860                                                              // if
  24+ 7860 F5 63                        dw      ZBRANCH
  25+ 7862 08 00                        dw      Read_Write_Else - $
  26+ 7864 E7 77                        dw          BLK_READ            //      blk-read
  27+ 7866 E8 63                        dw      BRANCH
  28+ 7868 04 00                        dw      Read_Write_Endif - $
  29+ 786A              Read_Write_Else:                                // else
  30+ 786A 00 78                        dw          BLK_WRITE           //      blk-write
  31+ 786C              Read_Write_Endif:                               // endif
  32+ 786C 52 68                        dw      EXIT                    // ;
  33+ 786E
  34+ 786E
  35+ 786E              //  ______________________________________________________________________
  36+ 786E              //
  37+ 786E              // +buf        a1 -- a2 f
  38+ 786E              // advences to next buffer, cyclically rotating along them
  39+ 786E                              Colon_Def PBUF, "+BUF", is_normal
  39+ 786E             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 786E             >
  39+ 786E             >Dict_Ptr        defl    $
  39+ 786E             >
  39+ 786E             >//              ______________________________________________________________________
  39+ 786E             >//              Heap part
  39+ 786E             >
  39+ 786E             >
  39+ 786E             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA24             >
  39+ EA24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA24             >Latest_Definition defl  Heap_Ptr
  39+ EA24             >
  39+ EA24             >                // dummy db directives used to calculate length of namec
  39+ EA24 2B 42 55 46 >                db      "+BUF"
  39+ EA28             >len_NFA         defl    $ - temp_NFA
  39+ EA28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA24             >
  39+ EA24 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA25 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EA29             >                org     $-1                 // alter last byte of Name just above to set
  39+ EA28 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EA29             >
  39+ EA29 1C 0A       >                dw      Prev_Ptr            // Link to previous definition Name
  39+ EA2B             >Prev_Ptr        defl    Heap_Ptr
  39+ EA2B             >
  39+ EA2B             >mirror_Ptr      defl    $
  39+ EA2B             >
  39+ EA2B 70 78       >                dw      Dict_Ptr + 2        // xt
  39+ EA2D             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EA2D             >
  39+ EA2D             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EA2D             >
  39+ EA2D             >//              ______________________________________________________________________
  39+ EA2D             >//              Dictionary part
  39+ EA2D             >
  39+ EA2D             >                org     Dict_Ptr
  39+ 786E             >
  39+ 786E 2B 0A       >                dw      mirror_Ptr - $E000
  39+ 7870             >
  39+ 7870             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7870 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7873             >
  39+ 7873             >
  39+ 7873             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7873             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7873             >
  39+ 7873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7873 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7877 A5 68
  41+ 7879 2B 69 10 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 787D 89 69
  42+ 787F F1 6B                        dw      EQUALS                  // =
  43+ 7881                                                              // if
  44+ 7881 F5 63                        dw      ZBRANCH
  45+ 7883 08 00                        dw      PBuf_Endif - $
  46+ 7885 10 69                        dw          DROP                //      drop
  47+ 7887 0A 6B 89 69                  dw          FIRST, FETCH        //      first @
  48+ 788B              PBuf_Endif:                                     // endif
  49+ 788B 2B 69 7C 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 788F 89 69
  50+ 7891 E5 6B                        dw      SUBTRACT                // -
  51+ 7893 52 68                        dw      EXIT                    // ;
  52+ 7895
  53+ 7895              //  ______________________________________________________________________
  54+ 7895              //
  55+ 7895              // update       --
  56+ 7895              // mark the last used block to be written to disk
  57+ 7895                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7895             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7895             >
  57+ 7895             >Dict_Ptr        defl    $
  57+ 7895             >
  57+ 7895             >//              ______________________________________________________________________
  57+ 7895             >//              Heap part
  57+ 7895             >
  57+ 7895             >
  57+ 7895             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EA2D             >
  57+ EA2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EA2D             >Latest_Definition defl  Heap_Ptr
  57+ EA2D             >
  57+ EA2D             >                // dummy db directives used to calculate length of namec
  57+ EA2D 55 50 44 41 >                db      "UPDATE"
  57+ EA31 54 45       >
  57+ EA33             >len_NFA         defl    $ - temp_NFA
  57+ EA33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EA2D             >
  57+ EA2D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EA2E 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EA32 54 45       >
  57+ EA34             >                org     $-1                 // alter last byte of Name just above to set
  57+ EA33 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EA34             >
  57+ EA34 24 0A       >                dw      Prev_Ptr            // Link to previous definition Name
  57+ EA36             >Prev_Ptr        defl    Heap_Ptr
  57+ EA36             >
  57+ EA36             >mirror_Ptr      defl    $
  57+ EA36             >
  57+ EA36 97 78       >                dw      Dict_Ptr + 2        // xt
  57+ EA38             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EA38             >
  57+ EA38             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EA38             >
  57+ EA38             >//              ______________________________________________________________________
  57+ EA38             >//              Dictionary part
  57+ EA38             >
  57+ EA38             >                org     Dict_Ptr
  57+ 7895             >
  57+ 7895 36 0A       >                dw      mirror_Ptr - $E000
  57+ 7897             >
  57+ 7897             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7897 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 789A             >
  57+ 789A             >
  57+ 789A             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 789A             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 789A             >
  57+ 789A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 789A 7C 6B 89 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 789E 89 69
  59+ 78A0 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 78A4 1B 68
  60+ 78A6 7C 6B 89 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 78AA 93 69
  61+ 78AC 52 68                        dw      EXIT                    // ;
  62+ 78AE
  63+ 78AE
  64+ 78AE              //  ______________________________________________________________________
  65+ 78AE              //
  66+ 78AE              // empty-buffers --
  67+ 78AE                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 78AE             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 78AE             >
  67+ 78AE             >Dict_Ptr        defl    $
  67+ 78AE             >
  67+ 78AE             >//              ______________________________________________________________________
  67+ 78AE             >//              Heap part
  67+ 78AE             >
  67+ 78AE             >
  67+ 78AE             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EA38             >
  67+ EA38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EA38             >Latest_Definition defl  Heap_Ptr
  67+ EA38             >
  67+ EA38             >                // dummy db directives used to calculate length of namec
  67+ EA38 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EA3C 59 2D 42 55 >
  67+ EA40 46 46 45 52 >
  67+ EA44 53          >
  67+ EA45             >len_NFA         defl    $ - temp_NFA
  67+ EA45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EA38             >
  67+ EA38 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EA39 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EA3D 59 2D 42 55 >
  67+ EA41 46 46 45 52 >
  67+ EA45 53          >
  67+ EA46             >                org     $-1                 // alter last byte of Name just above to set
  67+ EA45 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EA46             >
  67+ EA46 2D 0A       >                dw      Prev_Ptr            // Link to previous definition Name
  67+ EA48             >Prev_Ptr        defl    Heap_Ptr
  67+ EA48             >
  67+ EA48             >mirror_Ptr      defl    $
  67+ EA48             >
  67+ EA48 B0 78       >                dw      Dict_Ptr + 2        // xt
  67+ EA4A             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EA4A             >
  67+ EA4A             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EA4A             >
  67+ EA4A             >//              ______________________________________________________________________
  67+ EA4A             >//              Dictionary part
  67+ EA4A             >
  67+ EA4A             >                org     Dict_Ptr
  67+ 78AE             >
  67+ 78AE 48 0A       >                dw      mirror_Ptr - $E000
  67+ 78B0             >
  67+ 78B0             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 78B0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 78B3             >
  67+ 78B3             >
  67+ 78B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 78B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 78B3             >
  67+ 78B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 78B3 0A 6B 89 69                  dw      FIRST, FETCH            // first @
  69+ 78B7 10 6B 89 69                  dw      LIMIT, FETCH            // limit @
  70+ 78BB 07 69 E5 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 78BF 8C 70
  71+ 78C1 52 68                        dw      EXIT                    // ;
  72+ 78C3
  73+ 78C3              //  ______________________________________________________________________
  74+ 78C3              //
  75+ 78C3              // buffer       n -- a
  76+ 78C3              // read block n and gives the address to a buffer
  77+ 78C3              // any block previously inside the buffer, if modified, is rewritten to
  78+ 78C3              // disk before reading the block n.
  79+ 78C3
  80+ 78C3                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 78C3             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 78C3             >
  80+ 78C3             >Dict_Ptr        defl    $
  80+ 78C3             >
  80+ 78C3             >//              ______________________________________________________________________
  80+ 78C3             >//              Heap part
  80+ 78C3             >
  80+ 78C3             >
  80+ 78C3             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EA4A             >
  80+ EA4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EA4A             >Latest_Definition defl  Heap_Ptr
  80+ EA4A             >
  80+ EA4A             >                // dummy db directives used to calculate length of namec
  80+ EA4A 42 55 46 46 >                db      "BUFFER"
  80+ EA4E 45 52       >
  80+ EA50             >len_NFA         defl    $ - temp_NFA
  80+ EA50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EA4A             >
  80+ EA4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EA4B 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EA4F 45 52       >
  80+ EA51             >                org     $-1                 // alter last byte of Name just above to set
  80+ EA50 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EA51             >
  80+ EA51 38 0A       >                dw      Prev_Ptr            // Link to previous definition Name
  80+ EA53             >Prev_Ptr        defl    Heap_Ptr
  80+ EA53             >
  80+ EA53             >mirror_Ptr      defl    $
  80+ EA53             >
  80+ EA53 C5 78       >                dw      Dict_Ptr + 2        // xt
  80+ EA55             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EA55             >
  80+ EA55             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EA55             >
  80+ EA55             >//              ______________________________________________________________________
  80+ EA55             >//              Dictionary part
  80+ EA55             >
  80+ EA55             >                org     Dict_Ptr
  80+ 78C3             >
  80+ 78C3 53 0A       >                dw      mirror_Ptr - $E000
  80+ 78C5             >
  80+ 78C5             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 78C5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 78C8             >
  80+ 78C8             >
  80+ 78C8             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 78C8             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 78C8             >
  80+ 78C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 78C8 76 6B 89 69                  dw      USE, FETCH              // use @
  82+ 78CC 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
  83+ 78D0                                                              // begin
  84+ 78D0              Buffer_Begin:
  85+ 78D0 70 78                        dw          PBUF                //      +buf
  86+ 78D2                                                              // until
  87+ 78D2 F5 63                        dw      ZBRANCH
  88+ 78D4 FC FF                        dw      Buffer_Begin - $
  89+ 78D6 76 6B 93 69                  dw      USE, STORE              // use !
  90+ 78DA 72 68 89 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 78DE 8A 68
  91+ 78E0                                                              // if
  92+ 78E0 F5 63                        dw      ZBRANCH
  93+ 78E2 14 00                        dw      Buffer_Endif - $
  94+ 78E4 72 68 D4 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 78E8 72 68 89 69                  dw          R_OP, FETCH         //      r fetch
  96+ 78EC A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 78F0 0C 68                        dw          AND_OP              //      and
  98+ 78F2 81 6A 43 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 78F6              Buffer_Endif:                                   // endif
 100+ 78F6 72 68 93 69                  dw      R_OP, STORE             // r !
 101+ 78FA 72 68 7C 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 78FE 93 69
 102+ 7900 67 68 D4 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7904 52 68                        dw      EXIT                    // ;
 104+ 7906
 105+ 7906              //  ______________________________________________________________________
 106+ 7906              //
 107+ 7906              // block        n -- a
 108+ 7906              // Leaves the buffer address that contains the block n.
 109+ 7906              // If the block is not already present, it will be loaded from disk
 110+ 7906              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7906              // disk before reading the block n.
 112+ 7906              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7906
 114+ 7906                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7906             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7906             >
 114+ 7906             >Dict_Ptr        defl    $
 114+ 7906             >
 114+ 7906             >//              ______________________________________________________________________
 114+ 7906             >//              Heap part
 114+ 7906             >
 114+ 7906             >
 114+ 7906             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EA55             >
 114+ EA55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EA55             >Latest_Definition defl  Heap_Ptr
 114+ EA55             >
 114+ EA55             >                // dummy db directives used to calculate length of namec
 114+ EA55 42 4C 4F 43 >                db      "BLOCK"
 114+ EA59 4B          >
 114+ EA5A             >len_NFA         defl    $ - temp_NFA
 114+ EA5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EA55             >
 114+ EA55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EA56 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EA5A 4B          >
 114+ EA5B             >                org     $-1                 // alter last byte of Name just above to set
 114+ EA5A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EA5B             >
 114+ EA5B 4A 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 114+ EA5D             >Prev_Ptr        defl    Heap_Ptr
 114+ EA5D             >
 114+ EA5D             >mirror_Ptr      defl    $
 114+ EA5D             >
 114+ EA5D 08 79       >                dw      Dict_Ptr + 2        // xt
 114+ EA5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EA5F             >
 114+ EA5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EA5F             >
 114+ EA5F             >//              ______________________________________________________________________
 114+ EA5F             >//              Dictionary part
 114+ EA5F             >
 114+ EA5F             >                org     Dict_Ptr
 114+ 7906             >
 114+ 7906 5D 0A       >                dw      mirror_Ptr - $E000
 114+ 7908             >
 114+ 7908             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7908 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 790B             >
 114+ 790B             >
 114+ 790B             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 790B             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 790B             >
 114+ 790B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 790B 3A 6B 89 69                  dw      OFFSET, FETCH           // offset @
 116+ 790F A5 68 5C 68                  dw      PLUS, TO_R              // + >r
 117+ 7913 7C 6B 89 69                  dw      PREV, FETCH             // prev @
 118+ 7917 2B 69 89 69                  dw      DUP, FETCH              // dup @
 119+ 791B 72 68 E5 6B                  dw      R_OP, SUBTRACT          // r -
 120+ 791F 2B 69 A5 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7923                                                              // if
 122+ 7923 F5 63                        dw        ZBRANCH
 123+ 7925 32 00                        dw        Block_Endif_1 - $
 124+ 7927              Block_Begin:                                    //      begin
 125+ 7927 70 78 77 68                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 792B                                                              //          if
 127+ 792B F5 63                        dw          ZBRANCH
 128+ 792D 12 00                        dw          Block_Endif_2 - $
 129+ 792F 10 69                        dw              DROP            //              drop
 130+ 7931 72 68 C5 78                  dw              R_OP, BUFFER    //              r buffer
 131+ 7935 2B 69                        dw              DUP             //              dup
 132+ 7937 72 68 88 6A                  dw              R_OP, ONE       //              r 1
 133+ 793B 43 78                        dw              READ_WRITE      //              r/w
 134+ 793D E1 68                        dw              TWO_MINUS       //              2-
 135+ 793F              Block_Endif_2:                                  //          endif
 136+ 793F 2B 69 89 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7943 72 68
 137+ 7945 E5 6B 2B 69                  dw          SUBTRACT, DUP       //          - dup
 138+ 7949 A5 68 77 68                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 794D                                                              //      until
 140+ 794D F5 63                        dw        ZBRANCH
 141+ 794F D8 FF                        dw        Block_Begin - $
 142+ 7951 2B 69 7C 6B                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7955 93 69
 143+ 7957              Block_Endif_1:                                  // endif
 144+ 7957 67 68 10 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 795B D4 68
 145+ 795D 52 68                        dw      EXIT                    // ;
 146+ 795F
 147+ 795F              //  ______________________________________________________________________
 148+ 795F              //
 149+ 795F              // #buff        -- n
 150+ 795F              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 795F                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 795F             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 795F             >
 151+ 795F             >Dict_Ptr        defl    $
 151+ 795F             >
 151+ 795F             >//              ______________________________________________________________________
 151+ 795F             >//              Heap part
 151+ 795F             >
 151+ 795F             >
 151+ 795F             >                org     (Heap_Ptr & $1FFF) + $E000
 151+ EA5F             >
 151+ EA5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ EA5F             >Latest_Definition defl  Heap_Ptr
 151+ EA5F             >
 151+ EA5F             >                // dummy db directives used to calculate length of namec
 151+ EA5F 23 42 55 46 >                db      "#BUFF"
 151+ EA63 46          >
 151+ EA64             >len_NFA         defl    $ - temp_NFA
 151+ EA64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ EA5F             >
 151+ EA5F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ EA60 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ EA64 46          >
 151+ EA65             >                org     $-1                 // alter last byte of Name just above to set
 151+ EA64 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ EA65             >
 151+ EA65 55 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 151+ EA67             >Prev_Ptr        defl    Heap_Ptr
 151+ EA67             >
 151+ EA67             >mirror_Ptr      defl    $
 151+ EA67             >
 151+ EA67 61 79       >                dw      Dict_Ptr + 2        // xt
 151+ EA69             >Heap_Ptr        defl    $ - $E000           // save current HP
 151+ EA69             >
 151+ EA69             >Current_HP      defl  $ - $E000             // used to set HP once!
 151+ EA69             >
 151+ EA69             >//              ______________________________________________________________________
 151+ EA69             >//              Dictionary part
 151+ EA69             >
 151+ EA69             >                org     Dict_Ptr
 151+ 795F             >
 151+ 795F 67 0A       >                dw      mirror_Ptr - $E000
 151+ 7961             >
 151+ 7961             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7961 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7964             >
 151+ 7964             >
 151+ 7964             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7964             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7964             >
 151+ 7964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7964 07 00       >                dw      7
 152+ 7966
 153+ 7966              //  ______________________________________________________________________
 154+ 7966              //
 155+ 7966              // flush        --
 156+ 7966                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7966             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7966             >
 156+ 7966             >Dict_Ptr        defl    $
 156+ 7966             >
 156+ 7966             >//              ______________________________________________________________________
 156+ 7966             >//              Heap part
 156+ 7966             >
 156+ 7966             >
 156+ 7966             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA69             >
 156+ EA69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA69             >Latest_Definition defl  Heap_Ptr
 156+ EA69             >
 156+ EA69             >                // dummy db directives used to calculate length of namec
 156+ EA69 46 4C 55 53 >                db      "FLUSH"
 156+ EA6D 48          >
 156+ EA6E             >len_NFA         defl    $ - temp_NFA
 156+ EA6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA69             >
 156+ EA69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA6A 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ EA6E 48          >
 156+ EA6F             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA6E C8          >                db      {b $} | END_BIT     // msb as name end
 156+ EA6F             >
 156+ EA6F 5F 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 156+ EA71             >Prev_Ptr        defl    Heap_Ptr
 156+ EA71             >
 156+ EA71             >mirror_Ptr      defl    $
 156+ EA71             >
 156+ EA71 68 79       >                dw      Dict_Ptr + 2        // xt
 156+ EA73             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA73             >
 156+ EA73             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA73             >
 156+ EA73             >//              ______________________________________________________________________
 156+ EA73             >//              Dictionary part
 156+ EA73             >
 156+ EA73             >                org     Dict_Ptr
 156+ 7966             >
 156+ 7966 71 0A       >                dw      mirror_Ptr - $E000
 156+ 7968             >
 156+ 7968             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7968 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 796B             >
 156+ 796B             >
 156+ 796B             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 796B             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 796B             >
 156+ 796B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 796B 61 79 BE 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 796F 81 6A
 158+ 7971              Flush_Do:                                       // do
 159+ 7971 34 64                        dw      C_DO
 160+ 7973 81 6A C5 78                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7977 10 69
 161+ 7979                                                              // loop
 162+ 7979 E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 797D 9C 77 89 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7981 0B 67 10 69                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7985 52 68                        dw      EXIT                    // exit
 166+ 7987
 167+ 7987              //  ______________________________________________________________________
 168+ 7987              //
 169+ 7987              // f_getline    a m fh -- n
 170+ 7987              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7987              // Address a is left for subsequent processing
 172+ 7987              // and n as the actual number of byte read, that is the length of line
 173+ 7987                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7987             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7987             >
 173+ 7987             >Dict_Ptr        defl    $
 173+ 7987             >
 173+ 7987             >//              ______________________________________________________________________
 173+ 7987             >//              Heap part
 173+ 7987             >
 173+ 7987             >
 173+ 7987             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ EA73             >
 173+ EA73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ EA73             >Latest_Definition defl  Heap_Ptr
 173+ EA73             >
 173+ EA73             >                // dummy db directives used to calculate length of namec
 173+ EA73 46 5F 47 45 >                db      "F_GETLINE"
 173+ EA77 54 4C 49 4E >
 173+ EA7B 45          >
 173+ EA7C             >len_NFA         defl    $ - temp_NFA
 173+ EA7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ EA73             >
 173+ EA73 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ EA74 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ EA78 54 4C 49 4E >
 173+ EA7C 45          >
 173+ EA7D             >                org     $-1                 // alter last byte of Name just above to set
 173+ EA7C C5          >                db      {b $} | END_BIT     // msb as name end
 173+ EA7D             >
 173+ EA7D 69 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 173+ EA7F             >Prev_Ptr        defl    Heap_Ptr
 173+ EA7F             >
 173+ EA7F             >mirror_Ptr      defl    $
 173+ EA7F             >
 173+ EA7F 89 79       >                dw      Dict_Ptr + 2        // xt
 173+ EA81             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ EA81             >
 173+ EA81             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ EA81             >
 173+ EA81             >//              ______________________________________________________________________
 173+ EA81             >//              Dictionary part
 173+ EA81             >
 173+ EA81             >                org     Dict_Ptr
 173+ 7987             >
 173+ 7987 7F 0A       >                dw      mirror_Ptr - $E000
 173+ 7989             >
 173+ 7989             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7989 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 798C             >
 173+ 798C             >
 173+ 798C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 798C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 798C             >
 173+ 798C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 798C 5C 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 798E 1B 69                        dw      TUCK                    // tuck             ( m a m )
 176+ 7990 72 68 17 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7994 A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7998 E2 6D
 178+ 799A
 179+ 799A 5A 69 07 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 799E BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 79A2
 182+ 79A2 72 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 79A6 A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 79AA E2 6D
 184+ 79AC                                                              // if ( at least 1 chr was read )  \  fh
 185+ 79AC F5 63                        dw      ZBRANCH
 186+ 79AE 3C 00                        dw      FGetline_Else - $
 187+ 79B0 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 79B4 29 65
 188+ 79B6 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 79BA 24 69                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 79BC A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 79C0 29 65
 191+ 79C2 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 79C6 32 69 2A 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 79CA 2B 69 94 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 79CE 93 69
 194+ 79D0 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 79D4 5A 69 67 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 79D8 81 6A AF 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 79DC 67 68 E3 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 79E0 A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 79E4 E2 6D
 199+ 79E6                                                              // else
 200+ 79E6 E8 63                        dw      BRANCH
 201+ 79E8 0C 00                        dw      FGetline_Endif - $
 202+ 79EA              FGetline_Else:
 203+ 79EA 67 68                        dw          R_TO                //      r>              ( m d a fh )
 204+ 79EC 5A 69 54 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 79F0 10 69 81 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 79F4              FGetline_Endif:                                 // endif
 207+ 79F4 5C 68 2B 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 79F8 2B 69
 208+ 79FA BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 79FE 72 68 8D 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7A02 67 69 A5 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7A06 81 6A 24 69                  dw      ZERO, SWAP              // 0 swap
 212+ 7A0A D9 68 93 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7A0E 72 68 A5 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7A12 C5 68
 214+ 7A14 24 69 72 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7A18 E5 6B
 215+ 7A1A 97 70                        dw      BLANK                   // blank
 216+ 7A1C 67 68                        dw      R_TO                    // r>                   ( n )
 217+ 7A1E 52 68                        dw      EXIT                    // ;
 218+ 7A20
 219+ 7A20              //  ______________________________________________________________________
 220+ 7A20              //
 221+ 7A20              // f_include    fh --
 222+ 7A20              // Given a filehandle includes the source from file
 223+ 7A20                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7A20             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7A20             >
 223+ 7A20             >Dict_Ptr        defl    $
 223+ 7A20             >
 223+ 7A20             >//              ______________________________________________________________________
 223+ 7A20             >//              Heap part
 223+ 7A20             >
 223+ 7A20             >
 223+ 7A20             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ EA81             >
 223+ EA81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ EA81             >Latest_Definition defl  Heap_Ptr
 223+ EA81             >
 223+ EA81             >                // dummy db directives used to calculate length of namec
 223+ EA81 46 5F 49 4E >                db      "F_INCLUDE"
 223+ EA85 43 4C 55 44 >
 223+ EA89 45          >
 223+ EA8A             >len_NFA         defl    $ - temp_NFA
 223+ EA8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ EA81             >
 223+ EA81 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ EA82 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ EA86 43 4C 55 44 >
 223+ EA8A 45          >
 223+ EA8B             >                org     $-1                 // alter last byte of Name just above to set
 223+ EA8A C5          >                db      {b $} | END_BIT     // msb as name end
 223+ EA8B             >
 223+ EA8B 73 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 223+ EA8D             >Prev_Ptr        defl    Heap_Ptr
 223+ EA8D             >
 223+ EA8D             >mirror_Ptr      defl    $
 223+ EA8D             >
 223+ EA8D 22 7A       >                dw      Dict_Ptr + 2        // xt
 223+ EA8F             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ EA8F             >
 223+ EA8F             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ EA8F             >
 223+ EA8F             >//              ______________________________________________________________________
 223+ EA8F             >//              Dictionary part
 223+ EA8F             >
 223+ EA8F             >                org     Dict_Ptr
 223+ 7A20             >
 223+ 7A20 8D 0A       >                dw      mirror_Ptr - $E000
 223+ 7A22             >
 223+ 7A22             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7A22 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7A25             >
 223+ 7A25             >
 223+ 7A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7A25             >
 223+ 7A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7A25 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7A29 5C 68
 225+ 7A2B 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7A2F 5C 68
 226+ 7A31 8E 6B 89 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7A35 5C 68
 227+ 7A37 72 68                        dw      R_OP                    // r
 228+ 7A39                                                              // if
 229+ 7A39 F5 63                        dw      ZBRANCH
 230+ 7A3B 20 00                        dw      FInclude_Else_1 - $
 231+ 7A3D 72 68 17 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7A41 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7A45 E2 6D
 233+ 7A47 28 6B 89 69                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7A4B E1 68                        dw          TWO_MINUS
 235+ 7A4D 94 6B 89 69                  dw          SPAN, FETCH         //      span @ -
 236+ 7A51 E5 6B                        dw          SUBTRACT
 237+ 7A53 DA 6B AF 68                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7A57                                                              // else
 239+ 7A57 E8 63                        dw      BRANCH
 240+ 7A59 06 00                        dw      FInclude_Endif_1 - $
 241+ 7A5B              FInclude_Else_1:
 242+ 7A5B 81 6A 81 6A                  dw          ZERO, ZERO          //      0 0
 243+ 7A5F                                                              // endif
 244+ 7A5F              FInclude_Endif_1:
 245+ 7A5F 5C 68 5C 68                  dw      TO_R, TO_R              // >r >r
 246+ 7A63 8E 6B 93 69                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7A67              FInclude_Begin:                                 // begin
 248+ 7A67 88 6A 08 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7A6B B2 6A
 249+ 7A6D 67 69 97 70                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7A71 24 69 BE 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7A75 24 69 D9 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7A79 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7A7D 89 79                        dw          F_GETLINE           //      f_getline
 254+ 7A7F                                                              // while
 255+ 7A7F F5 63                        dw      ZBRANCH
 256+ 7A81 14 00                        dw      FInclude_Repeat - $
 257+ 7A83 88 6A 22 6B                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7A87 93 69
 258+ 7A89 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7A8D 93 69
 259+ 7A8F 69 74                        dw          INTERPRET           //      interpret
 260+ 7A91 E8 63                        dw      BRANCH
 261+ 7A93 D4 FF                        dw      FInclude_Begin - $
 262+ 7A95              FInclude_Repeat:                                // repeat
 263+ 7A95 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7A99 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7A9D 93 69
 265+ 7A9F FF 66                        dw      F_CLOSE                 // f_close
 266+ 7AA1 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7AA5 E2 6D
 267+ 7AA7 67 68 67 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7AAB 67 68
 268+ 7AAD 2B 69 8E 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7AB1 93 69
 269+ 7AB3                                                              // if
 270+ 7AB3 F5 63                        dw      ZBRANCH
 271+ 7AB5 12 00                        dw      FInclude_Else_2 - $
 272+ 7AB7 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7ABB E3 66                        dw          F_SEEK              //      f_seek
 274+ 7ABD A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7AC1 E2 6D
 275+ 7AC3                                                              // else
 276+ 7AC3 E8 63                        dw      BRANCH
 277+ 7AC5 04 00                        dw      FInclude_Endif_2 - $
 278+ 7AC7              FInclude_Else_2:
 279+ 7AC7 54 69                        dw          TWO_DROP            //      2drop
 280+ 7AC9              FInclude_Endif_2:                               // endif
 281+ 7AC9 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7ACD 93 69
 282+ 7ACF 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7AD3 93 69
 283+ 7AD5 52 68                        dw      EXIT                    // ;
 284+ 7AD7
 285+ 7AD7              //  ______________________________________________________________________
 286+ 7AD7              //
 287+ 7AD7              // open<         -- fh
 288+ 7AD7              // Open the following filename and return it file-handle
 289+ 7AD7              // Used in the form OPEN CCCC
 290+ 7AD7                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7AD7             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7AD7             >
 290+ 7AD7             >Dict_Ptr        defl    $
 290+ 7AD7             >
 290+ 7AD7             >//              ______________________________________________________________________
 290+ 7AD7             >//              Heap part
 290+ 7AD7             >
 290+ 7AD7             >
 290+ 7AD7             >                org     (Heap_Ptr & $1FFF) + $E000
 290+ EA8F             >
 290+ EA8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ EA8F             >Latest_Definition defl  Heap_Ptr
 290+ EA8F             >
 290+ EA8F             >                // dummy db directives used to calculate length of namec
 290+ EA8F 4F 50 45 4E >                db      "OPEN<"
 290+ EA93 3C          >
 290+ EA94             >len_NFA         defl    $ - temp_NFA
 290+ EA94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ EA8F             >
 290+ EA8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ EA90 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ EA94 3C          >
 290+ EA95             >                org     $-1                 // alter last byte of Name just above to set
 290+ EA94 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ EA95             >
 290+ EA95 81 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 290+ EA97             >Prev_Ptr        defl    Heap_Ptr
 290+ EA97             >
 290+ EA97             >mirror_Ptr      defl    $
 290+ EA97             >
 290+ EA97 D9 7A       >                dw      Dict_Ptr + 2        // xt
 290+ EA99             >Heap_Ptr        defl    $ - $E000           // save current HP
 290+ EA99             >
 290+ EA99             >Current_HP      defl  $ - $E000             // used to set HP once!
 290+ EA99             >
 290+ EA99             >//              ______________________________________________________________________
 290+ EA99             >//              Dictionary part
 290+ EA99             >
 290+ EA99             >                org     Dict_Ptr
 290+ 7AD7             >
 290+ 7AD7 97 0A       >                dw      mirror_Ptr - $E000
 290+ 7AD9             >
 290+ 7AD9             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7AD9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7ADC             >
 290+ 7ADC             >
 290+ 7ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7ADC             >
 290+ 7ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7ADC A4 6A                        dw      BL
 292+ 7ADE C4 70 1E 6F                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7AE2 07 69
 293+ 7AE4 A5 68 81 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7AE8 24 69 93 69
 294+ 7AEC B5 70 88 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7AF0 5A 67
 295+ 7AF2 A3 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7AF6 E2 6D                        dw      QERROR                  // ?error
 297+ 7AF8 52 68                        dw      EXIT                    // ;
 298+ 7AFA
 299+ 7AFA              //  ______________________________________________________________________
 300+ 7AFA              //
 301+ 7AFA              // include      -- cccc
 302+ 7AFA              // Include the following filename
 303+ 7AFA                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7AFA             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7AFA             >
 303+ 7AFA             >Dict_Ptr        defl    $
 303+ 7AFA             >
 303+ 7AFA             >//              ______________________________________________________________________
 303+ 7AFA             >//              Heap part
 303+ 7AFA             >
 303+ 7AFA             >
 303+ 7AFA             >                org     (Heap_Ptr & $1FFF) + $E000
 303+ EA99             >
 303+ EA99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ EA99             >Latest_Definition defl  Heap_Ptr
 303+ EA99             >
 303+ EA99             >                // dummy db directives used to calculate length of namec
 303+ EA99 49 4E 43 4C >                db      "INCLUDE"
 303+ EA9D 55 44 45    >
 303+ EAA0             >len_NFA         defl    $ - temp_NFA
 303+ EAA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ EA99             >
 303+ EA99 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ EA9A 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ EA9E 55 44 45    >
 303+ EAA1             >                org     $-1                 // alter last byte of Name just above to set
 303+ EAA0 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ EAA1             >
 303+ EAA1 8F 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 303+ EAA3             >Prev_Ptr        defl    Heap_Ptr
 303+ EAA3             >
 303+ EAA3             >mirror_Ptr      defl    $
 303+ EAA3             >
 303+ EAA3 FC 7A       >                dw      Dict_Ptr + 2        // xt
 303+ EAA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 303+ EAA5             >
 303+ EAA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 303+ EAA5             >
 303+ EAA5             >//              ______________________________________________________________________
 303+ EAA5             >//              Dictionary part
 303+ EAA5             >
 303+ EAA5             >                org     Dict_Ptr
 303+ 7AFA             >
 303+ 7AFA A3 0A       >                dw      mirror_Ptr - $E000
 303+ 7AFC             >
 303+ 7AFC             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7AFC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7AFF             >
 303+ 7AFF             >
 303+ 7AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7AFF             >
 303+ 7AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7AFF D9 7A                        dw      OPEN_FH                 // open
 305+ 7B01 2B 69 22 7A                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7B05 FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7B09 52 68                        dw      EXIT                    // ;
 308+ 7B0B
 309+ 7B0B              //  ______________________________________________________________________
 310+ 7B0B              //
 311+ 7B0B              // needs
 312+ 7B0B              // check for cccc exists in vocabulary
 313+ 7B0B              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7B0B
 315+ 7B0B              // temp filename cccc.f as counted string zero-padded
 316+ 7B0B                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7B0B             >
 316+ 7B0B             >Dict_Ptr        defl    $
 316+ 7B0B             >
 316+ 7B0B             >//              ______________________________________________________________________
 316+ 7B0B             >//              Heap part
 316+ 7B0B             >
 316+ 7B0B             >
 316+ 7B0B             >                org     (Heap_Ptr & $1FFF) + $E000
 316+ EAA5             >
 316+ EAA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ EAA5             >Latest_Definition defl  Heap_Ptr
 316+ EAA5             >
 316+ EAA5             >                // dummy db directives used to calculate length of namec
 316+ EAA5 4E 45 45 44 >                db      "NEEDS-W"
 316+ EAA9 53 2D 57    >
 316+ EAAC             >len_NFA         defl    $ - temp_NFA
 316+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ EAA5             >
 316+ EAA5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ EAA6 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ EAAA 53 2D 57    >
 316+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
 316+ EAAC D7          >                db      {b $} | END_BIT     // msb as name end
 316+ EAAD             >
 316+ EAAD 99 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 316+ EAAF             >Prev_Ptr        defl    Heap_Ptr
 316+ EAAF             >
 316+ EAAF             >mirror_Ptr      defl    $
 316+ EAAF             >
 316+ EAAF 0D 7B       >                dw      Dict_Ptr + 2        // xt
 316+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 316+ EAB1             >
 316+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 316+ EAB1             >
 316+ EAB1             >//              ______________________________________________________________________
 316+ EAB1             >//              Dictionary part
 316+ EAB1             >
 316+ EAB1             >                org     Dict_Ptr
 316+ 7B0B             >
 316+ 7B0B AF 0A       >                dw      mirror_Ptr - $E000
 316+ 7B0D             >
 316+ 7B0D             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7B0D CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7B10             >
 316+ 7B10             >
 316+ 7B10             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7B10             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7B10             >
 316+ 7B10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7B10 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7B33              // temp complete path+filename
 319+ 7B33                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7B33             >
 319+ 7B33             >Dict_Ptr        defl    $
 319+ 7B33             >
 319+ 7B33             >//              ______________________________________________________________________
 319+ 7B33             >//              Heap part
 319+ 7B33             >
 319+ 7B33             >
 319+ 7B33             >                org     (Heap_Ptr & $1FFF) + $E000
 319+ EAB1             >
 319+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ EAB1             >Latest_Definition defl  Heap_Ptr
 319+ EAB1             >
 319+ EAB1             >                // dummy db directives used to calculate length of namec
 319+ EAB1 4E 45 45 44 >                db      "NEEDS-FN"
 319+ EAB5 53 2D 46 4E >
 319+ EAB9             >len_NFA         defl    $ - temp_NFA
 319+ EAB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ EAB1             >
 319+ EAB1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ EAB2 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ EAB6 53 2D 46 4E >
 319+ EABA             >                org     $-1                 // alter last byte of Name just above to set
 319+ EAB9 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ EABA             >
 319+ EABA A5 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 319+ EABC             >Prev_Ptr        defl    Heap_Ptr
 319+ EABC             >
 319+ EABC             >mirror_Ptr      defl    $
 319+ EABC             >
 319+ EABC 35 7B       >                dw      Dict_Ptr + 2        // xt
 319+ EABE             >Heap_Ptr        defl    $ - $E000           // save current HP
 319+ EABE             >
 319+ EABE             >Current_HP      defl  $ - $E000             // used to set HP once!
 319+ EABE             >
 319+ EABE             >//              ______________________________________________________________________
 319+ EABE             >//              Dictionary part
 319+ EABE             >
 319+ EABE             >                org     Dict_Ptr
 319+ 7B33             >
 319+ 7B33 BC 0A       >                dw      mirror_Ptr - $E000
 319+ 7B35             >
 319+ 7B35             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7B35 CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7B38             >
 319+ 7B38             >
 319+ 7B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7B38             >
 319+ 7B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7B38 00 00 00...                  ds      40
 321+ 7B60              // constant path
 322+ 7B60                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7B60             >
 322+ 7B60             >Dict_Ptr        defl    $
 322+ 7B60             >
 322+ 7B60             >//              ______________________________________________________________________
 322+ 7B60             >//              Heap part
 322+ 7B60             >
 322+ 7B60             >
 322+ 7B60             >                org     (Heap_Ptr & $1FFF) + $E000
 322+ EABE             >
 322+ EABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ EABE             >Latest_Definition defl  Heap_Ptr
 322+ EABE             >
 322+ EABE             >                // dummy db directives used to calculate length of namec
 322+ EABE 4E 45 45 44 >                db      "NEEDS-INC"
 322+ EAC2 53 2D 49 4E >
 322+ EAC6 43          >
 322+ EAC7             >len_NFA         defl    $ - temp_NFA
 322+ EAC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ EABE             >
 322+ EABE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ EABF 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ EAC3 53 2D 49 4E >
 322+ EAC7 43          >
 322+ EAC8             >                org     $-1                 // alter last byte of Name just above to set
 322+ EAC7 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ EAC8             >
 322+ EAC8 B1 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 322+ EACA             >Prev_Ptr        defl    Heap_Ptr
 322+ EACA             >
 322+ EACA             >mirror_Ptr      defl    $
 322+ EACA             >
 322+ EACA 62 7B       >                dw      Dict_Ptr + 2        // xt
 322+ EACC             >Heap_Ptr        defl    $ - $E000           // save current HP
 322+ EACC             >
 322+ EACC             >Current_HP      defl  $ - $E000             // used to set HP once!
 322+ EACC             >
 322+ EACC             >//              ______________________________________________________________________
 322+ EACC             >//              Dictionary part
 322+ EACC             >
 322+ EACC             >                org     Dict_Ptr
 322+ 7B60             >
 322+ 7B60 CA 0A       >                dw      mirror_Ptr - $E000
 322+ 7B62             >
 322+ 7B62             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7B62 CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7B65             >
 322+ 7B65             >
 322+ 7B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7B65             >
 322+ 7B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7B65 04 69 6E 63                  db      4, "inc/", 0
 323+ 7B69 2F 00
 324+ 7B6B                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7B6B             >
 324+ 7B6B             >Dict_Ptr        defl    $
 324+ 7B6B             >
 324+ 7B6B             >//              ______________________________________________________________________
 324+ 7B6B             >//              Heap part
 324+ 7B6B             >
 324+ 7B6B             >
 324+ 7B6B             >                org     (Heap_Ptr & $1FFF) + $E000
 324+ EACC             >
 324+ EACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ EACC             >Latest_Definition defl  Heap_Ptr
 324+ EACC             >
 324+ EACC             >                // dummy db directives used to calculate length of namec
 324+ EACC 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ EAD0 53 2D 4C 49 >
 324+ EAD4 42          >
 324+ EAD5             >len_NFA         defl    $ - temp_NFA
 324+ EAD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ EACC             >
 324+ EACC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ EACD 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ EAD1 53 2D 4C 49 >
 324+ EAD5 42          >
 324+ EAD6             >                org     $-1                 // alter last byte of Name just above to set
 324+ EAD5 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ EAD6             >
 324+ EAD6 BE 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 324+ EAD8             >Prev_Ptr        defl    Heap_Ptr
 324+ EAD8             >
 324+ EAD8             >mirror_Ptr      defl    $
 324+ EAD8             >
 324+ EAD8 6D 7B       >                dw      Dict_Ptr + 2        // xt
 324+ EADA             >Heap_Ptr        defl    $ - $E000           // save current HP
 324+ EADA             >
 324+ EADA             >Current_HP      defl  $ - $E000             // used to set HP once!
 324+ EADA             >
 324+ EADA             >//              ______________________________________________________________________
 324+ EADA             >//              Dictionary part
 324+ EADA             >
 324+ EADA             >                org     Dict_Ptr
 324+ 7B6B             >
 324+ 7B6B D8 0A       >                dw      mirror_Ptr - $E000
 324+ 7B6D             >
 324+ 7B6D             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 7B6D CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 7B70             >
 324+ 7B70             >
 324+ 7B70             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 7B70             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 7B70             >
 324+ 7B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 7B70 04 6C 69 62                  db      4, "lib/", 0
 325+ 7B74 2F 00
 326+ 7B76
 327+ 7B76              // Concatenate path at a and filename and include it
 328+ 7B76              // No error is issued if filename doesn't exist.
 329+ 7B76                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 7B76             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 7B76             >
 329+ 7B76             >Dict_Ptr        defl    $
 329+ 7B76             >
 329+ 7B76             >//              ______________________________________________________________________
 329+ 7B76             >//              Heap part
 329+ 7B76             >
 329+ 7B76             >
 329+ 7B76             >                org     (Heap_Ptr & $1FFF) + $E000
 329+ EADA             >
 329+ EADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ EADA             >Latest_Definition defl  Heap_Ptr
 329+ EADA             >
 329+ EADA             >                // dummy db directives used to calculate length of namec
 329+ EADA 4E 45 45 44 >                db      "NEEDS/"
 329+ EADE 53 2F       >
 329+ EAE0             >len_NFA         defl    $ - temp_NFA
 329+ EAE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ EADA             >
 329+ EADA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ EADB 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ EADF 53 2F       >
 329+ EAE1             >                org     $-1                 // alter last byte of Name just above to set
 329+ EAE0 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ EAE1             >
 329+ EAE1 CC 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 329+ EAE3             >Prev_Ptr        defl    Heap_Ptr
 329+ EAE3             >
 329+ EAE3             >mirror_Ptr      defl    $
 329+ EAE3             >
 329+ EAE3 78 7B       >                dw      Dict_Ptr + 2        // xt
 329+ EAE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 329+ EAE5             >
 329+ EAE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 329+ EAE5             >
 329+ EAE5             >//              ______________________________________________________________________
 329+ EAE5             >//              Dictionary part
 329+ EAE5             >
 329+ EAE5             >                org     Dict_Ptr
 329+ 7B76             >
 329+ 7B76 E3 0A       >                dw      mirror_Ptr - $E000
 329+ 7B78             >
 329+ 7B78             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 7B78 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 7B7B             >
 329+ 7B7B             >
 329+ 7B7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 7B7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 7B7B             >
 329+ 7B7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 7B7B 1E 6F 1B 69                  dw      COUNT, TUCK             // n a n
 331+ 7B7F 35 7B 24 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 7B83 8D 67
 332+ 7B85 35 7B A5 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 7B89 0D 7B BE 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 7B8D 24 69
 334+ 7B8F A3 63 23 00                  dw      LIT, 35
 335+ 7B93 8D 67                        dw      CMOVE
 336+ 7B95 35 7B                        dw      NEEDS_FN
 337+ 7B97 B5 70 88 6A                  dw      PAD, ONE, F_OPEN
 337+ 7B9B 5A 67
 338+ 7B9D 77 68                        dw      ZEQUAL
 339+ 7B9F F5 63                        dw      ZBRANCH
 340+ 7BA1 08 00                        dw      Needs_1 - $
 341+ 7BA3 22 7A                        dw          F_INCLUDE
 342+ 7BA5 E8 63                        dw      BRANCH
 343+ 7BA7 04 00                        dw      Needs_2 - $
 344+ 7BA9              Needs_1:
 345+ 7BA9              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 7BA9              //              dw          LIT, 43, MESSAGE
 347+ 7BA9 10 69                        dw          DROP
 348+ 7BAB              Needs_2:
 349+ 7BAB 52 68                        dw      EXIT                    // ;
 350+ 7BAD
 351+ 7BAD
 352+ 7BAD                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 7BAD             >
 352+ 7BAD             >Dict_Ptr        defl    $
 352+ 7BAD             >
 352+ 7BAD             >//              ______________________________________________________________________
 352+ 7BAD             >//              Heap part
 352+ 7BAD             >
 352+ 7BAD             >
 352+ 7BAD             >                org     (Heap_Ptr & $1FFF) + $E000
 352+ EAE5             >
 352+ EAE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ EAE5             >Latest_Definition defl  Heap_Ptr
 352+ EAE5             >
 352+ EAE5             >                // dummy db directives used to calculate length of namec
 352+ EAE5 4E 44 4F 4D >                db      "NDOM"
 352+ EAE9             >len_NFA         defl    $ - temp_NFA
 352+ EAE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ EAE5             >
 352+ EAE5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ EAE6 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ EAEA             >                org     $-1                 // alter last byte of Name just above to set
 352+ EAE9 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ EAEA             >
 352+ EAEA DA 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 352+ EAEC             >Prev_Ptr        defl    Heap_Ptr
 352+ EAEC             >
 352+ EAEC             >mirror_Ptr      defl    $
 352+ EAEC             >
 352+ EAEC AF 7B       >                dw      Dict_Ptr + 2        // xt
 352+ EAEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 352+ EAEE             >
 352+ EAEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 352+ EAEE             >
 352+ EAEE             >//              ______________________________________________________________________
 352+ EAEE             >//              Dictionary part
 352+ EAEE             >
 352+ EAEE             >                org     Dict_Ptr
 352+ 7BAD             >
 352+ 7BAD EC 0A       >                dw      mirror_Ptr - $E000
 352+ 7BAF             >
 352+ 7BAF             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 7BAF CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 7BB2             >
 352+ 7BB2             >
 352+ 7BB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 7BB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 7BB2             >
 352+ 7BB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 7BB2              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 7BB2 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 7BB6 7C 5C 3C 3E
 354+ 7BBA 22
 355+ 7BBB 00                           db 0
 356+ 7BBC
 357+ 7BBC                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 7BBC             >
 357+ 7BBC             >Dict_Ptr        defl    $
 357+ 7BBC             >
 357+ 7BBC             >//              ______________________________________________________________________
 357+ 7BBC             >//              Heap part
 357+ 7BBC             >
 357+ 7BBC             >
 357+ 7BBC             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ EAEE             >
 357+ EAEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ EAEE             >Latest_Definition defl  Heap_Ptr
 357+ EAEE             >
 357+ EAEE             >                // dummy db directives used to calculate length of namec
 357+ EAEE 4E 43 44 4D >                db      "NCDM"
 357+ EAF2             >len_NFA         defl    $ - temp_NFA
 357+ EAF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ EAEE             >
 357+ EAEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ EAEF 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ EAF3             >                org     $-1                 // alter last byte of Name just above to set
 357+ EAF2 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ EAF3             >
 357+ EAF3 E5 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 357+ EAF5             >Prev_Ptr        defl    Heap_Ptr
 357+ EAF5             >
 357+ EAF5             >mirror_Ptr      defl    $
 357+ EAF5             >
 357+ EAF5 BE 7B       >                dw      Dict_Ptr + 2        // xt
 357+ EAF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ EAF7             >
 357+ EAF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ EAF7             >
 357+ EAF7             >//              ______________________________________________________________________
 357+ EAF7             >//              Dictionary part
 357+ EAF7             >
 357+ EAF7             >                org     Dict_Ptr
 357+ 7BBC             >
 357+ 7BBC F5 0A       >                dw      mirror_Ptr - $E000
 357+ 7BBE             >
 357+ 7BBE             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 7BBE CD AD 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 7BC1             >
 357+ 7BC1             >
 357+ 7BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 7BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 7BC1             >
 357+ 7BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 7BC1              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 7BC1 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 7BC5 24 5F 7B 7D
 359+ 7BC9 7E
 360+ 7BCA 00                           db 0
 361+ 7BCB
 362+ 7BCB              // Replace illegal character in filename using the map here above
 363+ 7BCB              // at the moment we need only  "
 364+ 7BCB                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 7BCB             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 7BCB             >
 364+ 7BCB             >Dict_Ptr        defl    $
 364+ 7BCB             >
 364+ 7BCB             >//              ______________________________________________________________________
 364+ 7BCB             >//              Heap part
 364+ 7BCB             >
 364+ 7BCB             >
 364+ 7BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EAF7             >
 364+ EAF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EAF7             >Latest_Definition defl  Heap_Ptr
 364+ EAF7             >
 364+ EAF7             >                // dummy db directives used to calculate length of namec
 364+ EAF7 4D 41 50 2D >                db      "MAP-FN"
 364+ EAFB 46 4E       >
 364+ EAFD             >len_NFA         defl    $ - temp_NFA
 364+ EAFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EAF7             >
 364+ EAF7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EAF8 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ EAFC 46 4E       >
 364+ EAFE             >                org     $-1                 // alter last byte of Name just above to set
 364+ EAFD CE          >                db      {b $} | END_BIT     // msb as name end
 364+ EAFE             >
 364+ EAFE EE 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 364+ EB00             >Prev_Ptr        defl    Heap_Ptr
 364+ EB00             >
 364+ EB00             >mirror_Ptr      defl    $
 364+ EB00             >
 364+ EB00 CD 7B       >                dw      Dict_Ptr + 2        // xt
 364+ EB02             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB02             >
 364+ EB02             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB02             >
 364+ EB02             >//              ______________________________________________________________________
 364+ EB02             >//              Dictionary part
 364+ EB02             >
 364+ EB02             >                org     Dict_Ptr
 364+ 7BCB             >
 364+ 7BCB 00 0B       >                dw      mirror_Ptr - $E000
 364+ 7BCD             >
 364+ 7BCD             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7BCD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 7BD0             >
 364+ 7BD0             >
 364+ 7BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 7BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 7BD0             >
 364+ 7BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 7BD0 1E 6F 2B 6F                  dw      COUNT, BOUNDS
 366+ 7BD4 34 64                        dw      C_DO
 367+ 7BD6              Needs_3:
 368+ 7BD6 BE 7B AF 7B                  dw          NCDM, NDOM, LIT, 10
 368+ 7BDA A3 63 0A 00
 369+ 7BDE 3A 64 9E 69                  dw          I, CFETCH
 370+ 7BE2 5B 65                        dw          C_MAP
 371+ 7BE4 3A 64 A7 69                  dw          I, CSTORE
 372+ 7BE8              Needs_4:
 373+ 7BE8 E0 63                        dw      C_LOOP
 374+ 7BEA EC FF                        dw      Needs_3 - $
 375+ 7BEC 52 68                        dw      EXIT
 376+ 7BEE
 377+ 7BEE
 378+ 7BEE              // include  "path/cccc.f" if cccc is not defined
 379+ 7BEE              // filename cccc.f is temporary stored at NEEDS-W
 380+ 7BEE                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 7BEE             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 7BEE             >
 380+ 7BEE             >Dict_Ptr        defl    $
 380+ 7BEE             >
 380+ 7BEE             >//              ______________________________________________________________________
 380+ 7BEE             >//              Heap part
 380+ 7BEE             >
 380+ 7BEE             >
 380+ 7BEE             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB02             >
 380+ EB02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB02             >Latest_Definition defl  Heap_Ptr
 380+ EB02             >
 380+ EB02             >                // dummy db directives used to calculate length of namec
 380+ EB02 4E 45 45 44 >                db      "NEEDS-F"
 380+ EB06 53 2D 46    >
 380+ EB09             >len_NFA         defl    $ - temp_NFA
 380+ EB09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB02             >
 380+ EB02 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB03 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ EB07 53 2D 46    >
 380+ EB0A             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB09 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ EB0A             >
 380+ EB0A F7 0A       >                dw      Prev_Ptr            // Link to previous definition Name
 380+ EB0C             >Prev_Ptr        defl    Heap_Ptr
 380+ EB0C             >
 380+ EB0C             >mirror_Ptr      defl    $
 380+ EB0C             >
 380+ EB0C F0 7B       >                dw      Dict_Ptr + 2        // xt
 380+ EB0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB0E             >
 380+ EB0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB0E             >
 380+ EB0E             >//              ______________________________________________________________________
 380+ EB0E             >//              Dictionary part
 380+ EB0E             >
 380+ EB0E             >                org     Dict_Ptr
 380+ 7BEE             >
 380+ 7BEE 0C 0B       >                dw      mirror_Ptr - $E000
 380+ 7BF0             >
 380+ 7BF0             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7BF0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7BF3             >
 380+ 7BF3             >
 380+ 7BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7BF3             >
 380+ 7BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7BF3 A6 72                        dw      LFIND
 382+ 7BF5 F5 63                        dw      ZBRANCH
 383+ 7BF7 0A 00                        dw      Needs_5 - $
 384+ 7BF9
 385+ 7BF9 10 69 54 69                  dw          DROP, TWO_DROP
 386+ 7BFD E8 63                        dw      BRANCH
 387+ 7BFF 2C 00                        dw      Needs_6 - $
 388+ 7C01              Needs_5:
 389+ 7C01 0D 7B                        dw          NEEDS_W
 390+ 7C03 A3 63 23 00                  dw          LIT, 35
 391+ 7C07 8C 70                        dw          ERASE                   // a
 392+ 7C09 A6 6B 9E 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 7C0D BE 68
 393+ 7C0F A6 6B 07 69                  dw          HERE, OVER              // a n here n
 394+ 7C13 0D 7B 24 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 7C17 8D 67
 395+ 7C19 0D 7B CD 7B                  dw          NEEDS_W, NEEDS_CHECK
 396+ 7C1D 0D 7B A5 68                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 7C21 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 7C25 24 69 93 69                  dw          SWAP, STORE             // a
 399+ 7C29 78 7B                        dw          NEEDS_SLASH
 400+ 7C2B              Needs_6:
 401+ 7C2B 52 68                        dw      EXIT
 402+ 7C2D
 403+ 7C2D
 404+ 7C2D              // check for cccc exists in vocabulary
 405+ 7C2D              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 7C2D              // search in inc subdirectory
 407+ 7C2D                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 7C2D             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 7C2D             >
 407+ 7C2D             >Dict_Ptr        defl    $
 407+ 7C2D             >
 407+ 7C2D             >//              ______________________________________________________________________
 407+ 7C2D             >//              Heap part
 407+ 7C2D             >
 407+ 7C2D             >
 407+ 7C2D             >                org     (Heap_Ptr & $1FFF) + $E000
 407+ EB0E             >
 407+ EB0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ EB0E             >Latest_Definition defl  Heap_Ptr
 407+ EB0E             >
 407+ EB0E             >                // dummy db directives used to calculate length of namec
 407+ EB0E 4E 45 45 44 >                db      "NEEDS"
 407+ EB12 53          >
 407+ EB13             >len_NFA         defl    $ - temp_NFA
 407+ EB13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ EB0E             >
 407+ EB0E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ EB0F 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ EB13 53          >
 407+ EB14             >                org     $-1                 // alter last byte of Name just above to set
 407+ EB13 D3          >                db      {b $} | END_BIT     // msb as name end
 407+ EB14             >
 407+ EB14 02 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 407+ EB16             >Prev_Ptr        defl    Heap_Ptr
 407+ EB16             >
 407+ EB16             >mirror_Ptr      defl    $
 407+ EB16             >
 407+ EB16 2F 7C       >                dw      Dict_Ptr + 2        // xt
 407+ EB18             >Heap_Ptr        defl    $ - $E000           // save current HP
 407+ EB18             >
 407+ EB18             >Current_HP      defl  $ - $E000             // used to set HP once!
 407+ EB18             >
 407+ EB18             >//              ______________________________________________________________________
 407+ EB18             >//              Dictionary part
 407+ EB18             >
 407+ EB18             >                org     Dict_Ptr
 407+ 7C2D             >
 407+ 7C2D 16 0B       >                dw      mirror_Ptr - $E000
 407+ 7C2F             >
 407+ 7C2F             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 7C2F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 7C32             >
 407+ 7C32             >
 407+ 7C32             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 7C32             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 7C32             >
 407+ 7C32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 7C32 28 6B 89 69                  dw      TO_IN, FETCH
 409+ 7C36 2B 69                        dw      DUP
 410+ 7C38 62 7B F0 7B                  dw      NEEDS_INC, NEEDS_PATH
 411+ 7C3C 28 6B 93 69                  dw      TO_IN, STORE
 412+ 7C40 6D 7B F0 7B                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 7C44 28 6B 93 69                  dw      TO_IN, STORE
 414+ 7C48 A6 72                        dw      LFIND
 415+ 7C4A F5 63                        dw      ZBRANCH
 416+ 7C4C 08 00                        dw      Needs_10 - $
 417+ 7C4E 54 69                        dw          TWO_DROP
 418+ 7C50 E8 63                        dw      BRANCH
 419+ 7C52 10 00                        dw      Needs_11 - $
 420+ 7C54              Needs_10:
 421+ 7C54 0D 7B 1E 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 7C58 72 6F 77 6C
 422+ 7C5C A3 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 7C60 1B 77
 423+ 7C62              Needs_11:
 424+ 7C62 52 68                        dw      EXIT
 425+ 7C64
 426+ 7C64
 427+ 7C64              //  ______________________________________________________________________
 428+ 7C64              //
 429+ 7C64              // load         n --
 430+ 7C64                              Colon_Def LOAD, "LOAD", is_normal
 430+ 7C64             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 430+ 7C64             >
 430+ 7C64             >Dict_Ptr        defl    $
 430+ 7C64             >
 430+ 7C64             >//              ______________________________________________________________________
 430+ 7C64             >//              Heap part
 430+ 7C64             >
 430+ 7C64             >
 430+ 7C64             >                org     (Heap_Ptr & $1FFF) + $E000
 430+ EB18             >
 430+ EB18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ EB18             >Latest_Definition defl  Heap_Ptr
 430+ EB18             >
 430+ EB18             >                // dummy db directives used to calculate length of namec
 430+ EB18 4C 4F 41 44 >                db      "LOAD"
 430+ EB1C             >len_NFA         defl    $ - temp_NFA
 430+ EB1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ EB18             >
 430+ EB18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ EB19 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 430+ EB1D             >                org     $-1                 // alter last byte of Name just above to set
 430+ EB1C C4          >                db      {b $} | END_BIT     // msb as name end
 430+ EB1D             >
 430+ EB1D 0E 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 430+ EB1F             >Prev_Ptr        defl    Heap_Ptr
 430+ EB1F             >
 430+ EB1F             >mirror_Ptr      defl    $
 430+ EB1F             >
 430+ EB1F 66 7C       >                dw      Dict_Ptr + 2        // xt
 430+ EB21             >Heap_Ptr        defl    $ - $E000           // save current HP
 430+ EB21             >
 430+ EB21             >Current_HP      defl  $ - $E000             // used to set HP once!
 430+ EB21             >
 430+ EB21             >//              ______________________________________________________________________
 430+ EB21             >//              Dictionary part
 430+ EB21             >
 430+ EB21             >                org     Dict_Ptr
 430+ 7C64             >
 430+ 7C64 1F 0B       >                dw      mirror_Ptr - $E000
 430+ 7C66             >
 430+ 7C66             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 7C66 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 7C69             >
 430+ 7C69             >
 430+ 7C69             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 7C69             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 7C69             >
 430+ 7C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 7C69 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 7C6D 5C 68
 432+ 7C6F 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 7C73 5C 68
 433+ 7C75
 434+ 7C75 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 7C79 93 69
 435+ 7C7B B9 6A A7 76                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 7C7F 22 6B 93 69
 436+ 7C83 69 74                        dw      INTERPRET               // interpret
 437+ 7C85
 438+ 7C85 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 7C89 93 69
 439+ 7C8B 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 7C8F 93 69
 440+ 7C91 52 68                        dw      EXIT                    // ;
 441+ 7C93
 442+ 7C93              //  ______________________________________________________________________
 443+ 7C93              //
 444+ 7C93              // -->          --
 445+ 7C93                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 7C93             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 7C93             >
 445+ 7C93             >Dict_Ptr        defl    $
 445+ 7C93             >
 445+ 7C93             >//              ______________________________________________________________________
 445+ 7C93             >//              Heap part
 445+ 7C93             >
 445+ 7C93             >
 445+ 7C93             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB21             >
 445+ EB21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB21             >Latest_Definition defl  Heap_Ptr
 445+ EB21             >
 445+ EB21             >                // dummy db directives used to calculate length of namec
 445+ EB21 2D 2D 3E    >                db      "-->"
 445+ EB24             >len_NFA         defl    $ - temp_NFA
 445+ EB24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB21             >
 445+ EB21 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB22 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ EB25             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB24 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ EB25             >
 445+ EB25 18 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 445+ EB27             >Prev_Ptr        defl    Heap_Ptr
 445+ EB27             >
 445+ EB27             >mirror_Ptr      defl    $
 445+ EB27             >
 445+ EB27 95 7C       >                dw      Dict_Ptr + 2        // xt
 445+ EB29             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EB29             >
 445+ EB29             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EB29             >
 445+ EB29             >//              ______________________________________________________________________
 445+ EB29             >//              Dictionary part
 445+ EB29             >
 445+ EB29             >                org     Dict_Ptr
 445+ 7C93             >
 445+ 7C93 27 0B       >                dw      mirror_Ptr - $E000
 445+ 7C95             >
 445+ 7C95             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 7C95 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 7C98             >
 445+ 7C98             >
 445+ 7C98             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 7C98             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 7C98             >
 445+ 7C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 7C98 3F 6E                        dw      QLOADING                // ?loading
 447+ 7C9A 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 7C9E 93 69
 448+ 7CA0 B9 6A                        dw      BSCR                    // b/scr
 449+ 7CA2 22 6B 89 69                  dw      BLK, FETCH              // blk @
 450+ 7CA6 07 69                        dw      OVER                    // over
 451+ 7CA8 CC 76                        dw      MOD                     // mod
 452+ 7CAA E5 6B                        dw      SUBTRACT                // -
 453+ 7CAC 22 6B 71 69                  dw      BLK, PLUSSTORE          // +!
 454+ 7CB0 52 68                        dw      EXIT                    // ;
 455+ 7CB2
 456+ 7CB2              //  ______________________________________________________________________
 457+ 7CB2              //
 458+ 7CB2              // '            -- xt
 459+ 7CB2                              Colon_Def TICK, "'", is_normal
 459+ 7CB2             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 7CB2             >
 459+ 7CB2             >Dict_Ptr        defl    $
 459+ 7CB2             >
 459+ 7CB2             >//              ______________________________________________________________________
 459+ 7CB2             >//              Heap part
 459+ 7CB2             >
 459+ 7CB2             >
 459+ 7CB2             >                org     (Heap_Ptr & $1FFF) + $E000
 459+ EB29             >
 459+ EB29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ EB29             >Latest_Definition defl  Heap_Ptr
 459+ EB29             >
 459+ EB29             >                // dummy db directives used to calculate length of namec
 459+ EB29 27          >                db      "'"
 459+ EB2A             >len_NFA         defl    $ - temp_NFA
 459+ EB2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ EB29             >
 459+ EB29 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ EB2A 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ EB2B             >                org     $-1                 // alter last byte of Name just above to set
 459+ EB2A A7          >                db      {b $} | END_BIT     // msb as name end
 459+ EB2B             >
 459+ EB2B 21 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 459+ EB2D             >Prev_Ptr        defl    Heap_Ptr
 459+ EB2D             >
 459+ EB2D             >mirror_Ptr      defl    $
 459+ EB2D             >
 459+ EB2D B4 7C       >                dw      Dict_Ptr + 2        // xt
 459+ EB2F             >Heap_Ptr        defl    $ - $E000           // save current HP
 459+ EB2F             >
 459+ EB2F             >Current_HP      defl  $ - $E000             // used to set HP once!
 459+ EB2F             >
 459+ EB2F             >//              ______________________________________________________________________
 459+ EB2F             >//              Dictionary part
 459+ EB2F             >
 459+ EB2F             >                org     Dict_Ptr
 459+ 7CB2             >
 459+ 7CB2 2D 0B       >                dw      mirror_Ptr - $E000
 459+ 7CB4             >
 459+ 7CB4             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 7CB4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 7CB7             >
 459+ 7CB7             >
 459+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 7CB7             >
 459+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 7CB7 A6 72                        dw      LFIND                   // -find
 461+ 7CB9 77 68                        dw      ZEQUAL                  // 0=
 462+ 7CBB 81 6A E2 6D                  dw      ZERO, QERROR            // 0 ?error
 463+ 7CBF 10 69                        dw      DROP                    // drop
 464+ 7CC1 52 68                        dw      EXIT                    // ;
 465+ 7CC3
 466+ 7CC3              //  ______________________________________________________________________
 467+ 7CC3              //
 468+ 7CC3              // forget       -- cccc
 469+ 7CC3                              Colon_Def FORGET, "FORGET", is_normal
 469+ 7CC3             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 7CC3             >
 469+ 7CC3             >Dict_Ptr        defl    $
 469+ 7CC3             >
 469+ 7CC3             >//              ______________________________________________________________________
 469+ 7CC3             >//              Heap part
 469+ 7CC3             >
 469+ 7CC3             >
 469+ 7CC3             >                org     (Heap_Ptr & $1FFF) + $E000
 469+ EB2F             >
 469+ EB2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ EB2F             >Latest_Definition defl  Heap_Ptr
 469+ EB2F             >
 469+ EB2F             >                // dummy db directives used to calculate length of namec
 469+ EB2F 46 4F 52 47 >                db      "FORGET"
 469+ EB33 45 54       >
 469+ EB35             >len_NFA         defl    $ - temp_NFA
 469+ EB35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ EB2F             >
 469+ EB2F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ EB30 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ EB34 45 54       >
 469+ EB36             >                org     $-1                 // alter last byte of Name just above to set
 469+ EB35 D4          >                db      {b $} | END_BIT     // msb as name end
 469+ EB36             >
 469+ EB36 29 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 469+ EB38             >Prev_Ptr        defl    Heap_Ptr
 469+ EB38             >
 469+ EB38             >mirror_Ptr      defl    $
 469+ EB38             >
 469+ EB38 C5 7C       >                dw      Dict_Ptr + 2        // xt
 469+ EB3A             >Heap_Ptr        defl    $ - $E000           // save current HP
 469+ EB3A             >
 469+ EB3A             >Current_HP      defl  $ - $E000             // used to set HP once!
 469+ EB3A             >
 469+ EB3A             >//              ______________________________________________________________________
 469+ EB3A             >//              Dictionary part
 469+ EB3A             >
 469+ EB3A             >                org     Dict_Ptr
 469+ 7CC3             >
 469+ 7CC3 38 0B       >                dw      mirror_Ptr - $E000
 469+ 7CC5             >
 469+ 7CC5             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 7CC5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 7CC8             >
 469+ 7CC8             >
 469+ 7CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 7CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 7CC8             >
 469+ 7CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 7CC8 46 6B 89 69                  dw      CURRENT, FETCH          // current @
 471+ 7CCC 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 472+ 7CD0 E5 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 7CD4 17 00 E2 6D
 473+ 7CD8 B4 7C 61 6D                  dw      TICK, TO_BODY           // ' >body
 474+ 7CDC 2B 69 F8 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 7CE0 89 69
 475+ 7CE2 FC 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 7CE6 15 00 E2 6D
 476+ 7CEA 2B 69 96 6D                  dw      DUP, NFA                // dup nfa
 477+ 7CEE
 478+ 7CEE                          //  dw      DUP
 479+ 7CEE                          //  dw      LIT, $E000, LESS
 480+ 7CEE                          //  dw      MMU7_FETCH, ONE, EQUALS
 481+ 7CEE                          //  dw      OR_OP, NOT_OP
 482+ 7CEE                          //  dw      ZBRANCH
 483+ 7CEE                          //  dw      Forget_then - $
 484+ 7CEE
 485+ 7CEE 9F 6C C2 6C                  dw      MMU7_FETCH, FROM_FAR
 486+ 7CF2 16 6B 93 69                  dw      HP, STORE
 487+ 7CF6 2B 69 8B 6D                  dw      DUP, CFA, CELL_MINUS
 487+ 7CFA D9 68
 488+ 7CFC              // Forget_then:
 489+ 7CFC FE 6A 93 69                  dw      DP, STORE               // dp !
 490+ 7D00 A1 6D 89 69                  dw      LFA, FETCH              // lfa @
 491+ 7D04 40 6B 89 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 491+ 7D08 93 69
 492+ 7D0A 52 68                        dw      EXIT                    // ;
 493+ 7D0C
 494+ 7D0C              //  ______________________________________________________________________
 495+ 7D0C              //
 496+ 7D0C              // marker       -- cccc
 497+ 7D0C                              Colon_Def MARKER, "MARKER", is_immediate
 497+ 7D0C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 497+ 7D0C             >
 497+ 7D0C             >Dict_Ptr        defl    $
 497+ 7D0C             >
 497+ 7D0C             >//              ______________________________________________________________________
 497+ 7D0C             >//              Heap part
 497+ 7D0C             >
 497+ 7D0C             >
 497+ 7D0C             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ EB3A             >
 497+ EB3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ EB3A             >Latest_Definition defl  Heap_Ptr
 497+ EB3A             >
 497+ EB3A             >                // dummy db directives used to calculate length of namec
 497+ EB3A 4D 41 52 4B >                db      "MARKER"
 497+ EB3E 45 52       >
 497+ EB40             >len_NFA         defl    $ - temp_NFA
 497+ EB40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ EB3A             >
 497+ EB3A C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ EB3B 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 497+ EB3F 45 52       >
 497+ EB41             >                org     $-1                 // alter last byte of Name just above to set
 497+ EB40 D2          >                db      {b $} | END_BIT     // msb as name end
 497+ EB41             >
 497+ EB41 2F 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 497+ EB43             >Prev_Ptr        defl    Heap_Ptr
 497+ EB43             >
 497+ EB43             >mirror_Ptr      defl    $
 497+ EB43             >
 497+ EB43 0E 7D       >                dw      Dict_Ptr + 2        // xt
 497+ EB45             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ EB45             >
 497+ EB45             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ EB45             >
 497+ EB45             >//              ______________________________________________________________________
 497+ EB45             >//              Dictionary part
 497+ EB45             >
 497+ EB45             >                org     Dict_Ptr
 497+ 7D0C             >
 497+ 7D0C 43 0B       >                dw      mirror_Ptr - $E000
 497+ 7D0E             >
 497+ 7D0E             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 7D0E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 497+ 7D11             >
 497+ 7D11             >
 497+ 7D11             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 7D11             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 7D11             >
 497+ 7D11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 7D11 F6 6E                        dw      CBUILDS
 499+ 7D13 04 6B 89 69                  dw      VOC_LINK, FETCH, COMMA
 499+ 7D17 BC 6B
 500+ 7D19 46 6B 89 69                  dw      CURRENT, FETCH, COMMA
 500+ 7D1D BC 6B
 501+ 7D1F 40 6B 89 69                  dw      CONTEXT, FETCH, COMMA
 501+ 7D23 BC 6B
 502+ 7D25 46 6B 89 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 502+ 7D29 89 69 BC 6B
 503+ 7D2D 52 6D B0 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 503+ 7D31 A1 6D 89 69
 503+ 7D35 BC 6B
 504+ 7D37 01 6F                        dw      DOES_TO
 505+ 7D39 2B 69 89 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 505+ 7D3D 04 6B 93 69
 505+ 7D41 D4 68
 506+ 7D43 2B 69 89 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 506+ 7D47 46 6B 93 69
 506+ 7D4B D4 68
 507+ 7D4D 2B 69 89 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 507+ 7D51 40 6B 93 69
 507+ 7D55 D4 68
 508+ 7D57 2B 69 89 69                  dw      DUP, FETCH
 509+ 7D5B                          //  dw      DUP, QHEAPP
 510+ 7D5B                          //  dw      ZBRANCH
 511+ 7D5B                          //  dw      Marker_then - $
 512+ 7D5B 2B 69 16 6B                  dw          DUP, HP, STORE
 512+ 7D5F 93 69
 513+ 7D61 B0 6D 8B 6D                  dw          PFA, CFA, CELL_MINUS
 513+ 7D65 D9 68
 514+ 7D67              // Marker_then:
 515+ 7D67 FE 6A 93 69                  dw      DP, STORE, CELL_PLUS
 515+ 7D6B D4 68
 516+ 7D6D 89 69 46 6B                  dw      FETCH, CURRENT, FETCH, STORE
 516+ 7D71 89 69 93 69
 517+ 7D75 52 68                        dw      EXIT
 518+ 7D77
 519+ 7D77              //  ______________________________________________________________________
 520+ 7D77              //
 521+ 7D77              // spaces       n --
 522+ 7D77                              Colon_Def SPACES, "SPACES", is_normal
 522+ 7D77             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 522+ 7D77             >
 522+ 7D77             >Dict_Ptr        defl    $
 522+ 7D77             >
 522+ 7D77             >//              ______________________________________________________________________
 522+ 7D77             >//              Heap part
 522+ 7D77             >
 522+ 7D77             >
 522+ 7D77             >                org     (Heap_Ptr & $1FFF) + $E000
 522+ EB45             >
 522+ EB45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ EB45             >Latest_Definition defl  Heap_Ptr
 522+ EB45             >
 522+ EB45             >                // dummy db directives used to calculate length of namec
 522+ EB45 53 50 41 43 >                db      "SPACES"
 522+ EB49 45 53       >
 522+ EB4B             >len_NFA         defl    $ - temp_NFA
 522+ EB4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ EB45             >
 522+ EB45 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ EB46 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 522+ EB4A 45 53       >
 522+ EB4C             >                org     $-1                 // alter last byte of Name just above to set
 522+ EB4B D3          >                db      {b $} | END_BIT     // msb as name end
 522+ EB4C             >
 522+ EB4C 3A 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 522+ EB4E             >Prev_Ptr        defl    Heap_Ptr
 522+ EB4E             >
 522+ EB4E             >mirror_Ptr      defl    $
 522+ EB4E             >
 522+ EB4E 79 7D       >                dw      Dict_Ptr + 2        // xt
 522+ EB50             >Heap_Ptr        defl    $ - $E000           // save current HP
 522+ EB50             >
 522+ EB50             >Current_HP      defl  $ - $E000             // used to set HP once!
 522+ EB50             >
 522+ EB50             >//              ______________________________________________________________________
 522+ EB50             >//              Dictionary part
 522+ EB50             >
 522+ EB50             >                org     Dict_Ptr
 522+ 7D77             >
 522+ 7D77 4E 0B       >                dw      mirror_Ptr - $E000
 522+ 7D79             >
 522+ 7D79             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7D79 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 7D7C             >
 522+ 7D7C             >
 522+ 7D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7D7C             >
 522+ 7D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7D7C 81 6A 3D 6C                  dw      ZERO, MAX
 524+ 7D80 81 6A 0C 64                  dw      ZERO, C_Q_DO
 525+ 7D84 08 00                        dw      Spaces_Leave - $
 526+ 7D86              Spaces_Loop:
 527+ 7D86 77 6C                        dw          SPACE
 528+ 7D88 E0 63                        dw      C_LOOP
 529+ 7D8A FC FF                        dw      Spaces_Loop - $
 530+ 7D8C              Spaces_Leave:
 531+ 7D8C 52 68                        dw      EXIT                    // ;
 532+ 7D8E
 533+ 7D8E              //  ______________________________________________________________________
 534+ 7D8E              //
 535+ 7D8E              // <#           --
 536+ 7D8E                              Colon_Def BEGIN_DASH, "<#", is_normal
 536+ 7D8E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 536+ 7D8E             >
 536+ 7D8E             >Dict_Ptr        defl    $
 536+ 7D8E             >
 536+ 7D8E             >//              ______________________________________________________________________
 536+ 7D8E             >//              Heap part
 536+ 7D8E             >
 536+ 7D8E             >
 536+ 7D8E             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ EB50             >
 536+ EB50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ EB50             >Latest_Definition defl  Heap_Ptr
 536+ EB50             >
 536+ EB50             >                // dummy db directives used to calculate length of namec
 536+ EB50 3C 23       >                db      "<#"
 536+ EB52             >len_NFA         defl    $ - temp_NFA
 536+ EB52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ EB50             >
 536+ EB50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ EB51 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 536+ EB53             >                org     $-1                 // alter last byte of Name just above to set
 536+ EB52 A3          >                db      {b $} | END_BIT     // msb as name end
 536+ EB53             >
 536+ EB53 45 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 536+ EB55             >Prev_Ptr        defl    Heap_Ptr
 536+ EB55             >
 536+ EB55             >mirror_Ptr      defl    $
 536+ EB55             >
 536+ EB55 90 7D       >                dw      Dict_Ptr + 2        // xt
 536+ EB57             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ EB57             >
 536+ EB57             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ EB57             >
 536+ EB57             >//              ______________________________________________________________________
 536+ EB57             >//              Dictionary part
 536+ EB57             >
 536+ EB57             >                org     Dict_Ptr
 536+ 7D8E             >
 536+ 7D8E 55 0B       >                dw      mirror_Ptr - $E000
 536+ 7D90             >
 536+ 7D90             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 7D90 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 7D93             >
 536+ 7D93             >
 536+ 7D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 7D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 7D93             >
 536+ 7D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 7D93 B5 70 70 6B                  dw      PAD, HLD, STORE
 537+ 7D97 93 69
 538+ 7D99 52 68                        dw      EXIT
 539+ 7D9B
 540+ 7D9B              //  ______________________________________________________________________
 541+ 7D9B              //
 542+ 7D9B              // #>           --
 543+ 7D9B                              Colon_Def DASH_END, "#>", is_normal
 543+ 7D9B             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 543+ 7D9B             >
 543+ 7D9B             >Dict_Ptr        defl    $
 543+ 7D9B             >
 543+ 7D9B             >//              ______________________________________________________________________
 543+ 7D9B             >//              Heap part
 543+ 7D9B             >
 543+ 7D9B             >
 543+ 7D9B             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ EB57             >
 543+ EB57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ EB57             >Latest_Definition defl  Heap_Ptr
 543+ EB57             >
 543+ EB57             >                // dummy db directives used to calculate length of namec
 543+ EB57 23 3E       >                db      "#>"
 543+ EB59             >len_NFA         defl    $ - temp_NFA
 543+ EB59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ EB57             >
 543+ EB57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ EB58 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 543+ EB5A             >                org     $-1                 // alter last byte of Name just above to set
 543+ EB59 BE          >                db      {b $} | END_BIT     // msb as name end
 543+ EB5A             >
 543+ EB5A 50 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 543+ EB5C             >Prev_Ptr        defl    Heap_Ptr
 543+ EB5C             >
 543+ EB5C             >mirror_Ptr      defl    $
 543+ EB5C             >
 543+ EB5C 9D 7D       >                dw      Dict_Ptr + 2        // xt
 543+ EB5E             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ EB5E             >
 543+ EB5E             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ EB5E             >
 543+ EB5E             >//              ______________________________________________________________________
 543+ EB5E             >//              Dictionary part
 543+ EB5E             >
 543+ EB5E             >                org     Dict_Ptr
 543+ 7D9B             >
 543+ 7D9B 5C 0B       >                dw      mirror_Ptr - $E000
 543+ 7D9D             >
 543+ 7D9D             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 7D9D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 7DA0             >
 543+ 7DA0             >
 543+ 7DA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 7DA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 7DA0             >
 543+ 7DA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 7DA0 54 69                        dw      TWO_DROP
 545+ 7DA2 70 6B 89 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 545+ 7DA6 B5 70 07 69
 545+ 7DAA E5 6B
 546+ 7DAC 52 68                        dw      EXIT
 547+ 7DAE
 548+ 7DAE              //  ______________________________________________________________________
 549+ 7DAE              //
 550+ 7DAE              // sign         n d -- d
 551+ 7DAE                              Colon_Def SIGN, "SIGN", is_normal
 551+ 7DAE             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 551+ 7DAE             >
 551+ 7DAE             >Dict_Ptr        defl    $
 551+ 7DAE             >
 551+ 7DAE             >//              ______________________________________________________________________
 551+ 7DAE             >//              Heap part
 551+ 7DAE             >
 551+ 7DAE             >
 551+ 7DAE             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EB5E             >
 551+ EB5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EB5E             >Latest_Definition defl  Heap_Ptr
 551+ EB5E             >
 551+ EB5E             >                // dummy db directives used to calculate length of namec
 551+ EB5E 53 49 47 4E >                db      "SIGN"
 551+ EB62             >len_NFA         defl    $ - temp_NFA
 551+ EB62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EB5E             >
 551+ EB5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EB5F 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 551+ EB63             >                org     $-1                 // alter last byte of Name just above to set
 551+ EB62 CE          >                db      {b $} | END_BIT     // msb as name end
 551+ EB63             >
 551+ EB63 57 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 551+ EB65             >Prev_Ptr        defl    Heap_Ptr
 551+ EB65             >
 551+ EB65             >mirror_Ptr      defl    $
 551+ EB65             >
 551+ EB65 B0 7D       >                dw      Dict_Ptr + 2        // xt
 551+ EB67             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EB67             >
 551+ EB67             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EB67             >
 551+ EB67             >//              ______________________________________________________________________
 551+ EB67             >//              Dictionary part
 551+ EB67             >
 551+ EB67             >                org     Dict_Ptr
 551+ 7DAE             >
 551+ 7DAE 65 0B       >                dw      mirror_Ptr - $E000
 551+ 7DB0             >
 551+ 7DB0             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 7DB0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7DB3             >
 551+ 7DB3             >
 551+ 7DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7DB3             >
 551+ 7DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7DB3 8A 68                        dw      ZLESS
 553+ 7DB5 F5 63                        dw      ZBRANCH
 554+ 7DB7 08 00                        dw      Sign_Endif - $
 555+ 7DB9 A3 63 2D 00                  dw          LIT, 45, HOLD
 555+ 7DBD A2 70
 556+ 7DBF              Sign_Endif:
 557+ 7DBF 52 68                        dw      EXIT
 558+ 7DC1
 559+ 7DC1              //  ______________________________________________________________________
 560+ 7DC1              //
 561+ 7DC1              // #           d1 -- d2
 562+ 7DC1                              Colon_Def DASH, "#", is_normal
 562+ 7DC1             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 562+ 7DC1             >
 562+ 7DC1             >Dict_Ptr        defl    $
 562+ 7DC1             >
 562+ 7DC1             >//              ______________________________________________________________________
 562+ 7DC1             >//              Heap part
 562+ 7DC1             >
 562+ 7DC1             >
 562+ 7DC1             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ EB67             >
 562+ EB67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ EB67             >Latest_Definition defl  Heap_Ptr
 562+ EB67             >
 562+ EB67             >                // dummy db directives used to calculate length of namec
 562+ EB67 23          >                db      "#"
 562+ EB68             >len_NFA         defl    $ - temp_NFA
 562+ EB68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ EB67             >
 562+ EB67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ EB68 23          >                db      "#"               // name string in 7-bit ascii, but
 562+ EB69             >                org     $-1                 // alter last byte of Name just above to set
 562+ EB68 A3          >                db      {b $} | END_BIT     // msb as name end
 562+ EB69             >
 562+ EB69 5E 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 562+ EB6B             >Prev_Ptr        defl    Heap_Ptr
 562+ EB6B             >
 562+ EB6B             >mirror_Ptr      defl    $
 562+ EB6B             >
 562+ EB6B C3 7D       >                dw      Dict_Ptr + 2        // xt
 562+ EB6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ EB6D             >
 562+ EB6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ EB6D             >
 562+ EB6D             >//              ______________________________________________________________________
 562+ EB6D             >//              Dictionary part
 562+ EB6D             >
 562+ EB6D             >                org     Dict_Ptr
 562+ 7DC1             >
 562+ 7DC1 6B 0B       >                dw      mirror_Ptr - $E000
 562+ 7DC3             >
 562+ 7DC3             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 7DC3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 7DC6             >
 562+ 7DC6             >
 562+ 7DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 7DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 7DC6             >
 562+ 7DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 7DC6 52 6B 89 69                  dw      BASE, FETCH
 564+ 7DCA
 565+ 7DCA 5C 68                        dw      TO_R                    // >r           ( ud1 )
 566+ 7DCC 81 6A 72 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 566+ 7DD0 D9 67
 567+ 7DD2 67 68 24 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 567+ 7DD6 5C 68
 568+ 7DD8 D9 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 569+ 7DDA 67 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 570+ 7DDC
 571+ 7DDC 32 69                        dw      ROT
 572+ 7DDE A3 63 09 00                  dw      LIT, 9, OVER, LESS
 572+ 7DE2 07 69 0A 6C
 573+ 7DE6 F5 63                        dw      ZBRANCH
 574+ 7DE8 08 00                        dw      Dash_Endif - $
 575+ 7DEA A3 63 07 00                  dw          LIT, 7, PLUS
 575+ 7DEE A5 68
 576+ 7DF0              Dash_Endif:
 577+ 7DF0
 578+ 7DF0 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 578+ 7DF4 A5 68 A2 70
 579+ 7DF8 52 68                        dw      EXIT
 580+ 7DFA
 581+ 7DFA              //  ______________________________________________________________________
 582+ 7DFA              //
 583+ 7DFA              // #s           d1 -- d2
 584+ 7DFA                              Colon_Def DASHES, "#S", is_normal
 584+ 7DFA             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 584+ 7DFA             >
 584+ 7DFA             >Dict_Ptr        defl    $
 584+ 7DFA             >
 584+ 7DFA             >//              ______________________________________________________________________
 584+ 7DFA             >//              Heap part
 584+ 7DFA             >
 584+ 7DFA             >
 584+ 7DFA             >                org     (Heap_Ptr & $1FFF) + $E000
 584+ EB6D             >
 584+ EB6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ EB6D             >Latest_Definition defl  Heap_Ptr
 584+ EB6D             >
 584+ EB6D             >                // dummy db directives used to calculate length of namec
 584+ EB6D 23 53       >                db      "#S"
 584+ EB6F             >len_NFA         defl    $ - temp_NFA
 584+ EB6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ EB6D             >
 584+ EB6D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ EB6E 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 584+ EB70             >                org     $-1                 // alter last byte of Name just above to set
 584+ EB6F D3          >                db      {b $} | END_BIT     // msb as name end
 584+ EB70             >
 584+ EB70 67 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 584+ EB72             >Prev_Ptr        defl    Heap_Ptr
 584+ EB72             >
 584+ EB72             >mirror_Ptr      defl    $
 584+ EB72             >
 584+ EB72 FC 7D       >                dw      Dict_Ptr + 2        // xt
 584+ EB74             >Heap_Ptr        defl    $ - $E000           // save current HP
 584+ EB74             >
 584+ EB74             >Current_HP      defl  $ - $E000             // used to set HP once!
 584+ EB74             >
 584+ EB74             >//              ______________________________________________________________________
 584+ EB74             >//              Dictionary part
 584+ EB74             >
 584+ EB74             >                org     Dict_Ptr
 584+ 7DFA             >
 584+ 7DFA 72 0B       >                dw      mirror_Ptr - $E000
 584+ 7DFC             >
 584+ 7DFC             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 7DFC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 7DFF             >
 584+ 7DFF             >
 584+ 7DFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 7DFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 7DFF             >
 584+ 7DFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 7DFF              Dashes_Begin:
 586+ 7DFF C3 7D 67 69                  dw      DASH, TWO_DUP
 587+ 7E03 1B 68 77 68                  dw          OR_OP, ZEQUAL
 588+ 7E07 F5 63                        dw      ZBRANCH
 589+ 7E09 F6 FF                        dw      Dashes_Begin - $
 590+ 7E0B 52 68                        dw      EXIT
 591+ 7E0D
 592+ 7E0D              //  ______________________________________________________________________
 593+ 7E0D              //
 594+ 7E0D              // d.r          d n --
 595+ 7E0D                              Colon_Def D_DOT_R, "D.R", is_normal
 595+ 7E0D             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 595+ 7E0D             >
 595+ 7E0D             >Dict_Ptr        defl    $
 595+ 7E0D             >
 595+ 7E0D             >//              ______________________________________________________________________
 595+ 7E0D             >//              Heap part
 595+ 7E0D             >
 595+ 7E0D             >
 595+ 7E0D             >                org     (Heap_Ptr & $1FFF) + $E000
 595+ EB74             >
 595+ EB74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ EB74             >Latest_Definition defl  Heap_Ptr
 595+ EB74             >
 595+ EB74             >                // dummy db directives used to calculate length of namec
 595+ EB74 44 2E 52    >                db      "D.R"
 595+ EB77             >len_NFA         defl    $ - temp_NFA
 595+ EB77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ EB74             >
 595+ EB74 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ EB75 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 595+ EB78             >                org     $-1                 // alter last byte of Name just above to set
 595+ EB77 D2          >                db      {b $} | END_BIT     // msb as name end
 595+ EB78             >
 595+ EB78 6D 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 595+ EB7A             >Prev_Ptr        defl    Heap_Ptr
 595+ EB7A             >
 595+ EB7A             >mirror_Ptr      defl    $
 595+ EB7A             >
 595+ EB7A 0F 7E       >                dw      Dict_Ptr + 2        // xt
 595+ EB7C             >Heap_Ptr        defl    $ - $E000           // save current HP
 595+ EB7C             >
 595+ EB7C             >Current_HP      defl  $ - $E000             // used to set HP once!
 595+ EB7C             >
 595+ EB7C             >//              ______________________________________________________________________
 595+ EB7C             >//              Dictionary part
 595+ EB7C             >
 595+ EB7C             >                org     Dict_Ptr
 595+ 7E0D             >
 595+ 7E0D 7A 0B       >                dw      mirror_Ptr - $E000
 595+ 7E0F             >
 595+ 7E0F             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 7E0F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 7E12             >
 595+ 7E12             >
 595+ 7E12             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 7E12             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 7E12             >
 595+ 7E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 7E12 5C 68                        dw      TO_R
 597+ 7E14 1B 69 13 76                  dw      TUCK, DABS
 598+ 7E18 90 7D FC 7D                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 598+ 7E1C 32 69 B0 7D
 598+ 7E20 9D 7D
 599+ 7E22 67 68                        dw      R_TO
 600+ 7E24 07 69 E5 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 600+ 7E28 79 7D 72 6F
 601+ 7E2C 52 68                        dw      EXIT
 602+ 7E2E
 603+ 7E2E              //  ______________________________________________________________________
 604+ 7E2E              //
 605+ 7E2E              // .r           n1 n2 --
 606+ 7E2E                              Colon_Def DOT_R, ".R", is_normal
 606+ 7E2E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 606+ 7E2E             >
 606+ 7E2E             >Dict_Ptr        defl    $
 606+ 7E2E             >
 606+ 7E2E             >//              ______________________________________________________________________
 606+ 7E2E             >//              Heap part
 606+ 7E2E             >
 606+ 7E2E             >
 606+ 7E2E             >                org     (Heap_Ptr & $1FFF) + $E000
 606+ EB7C             >
 606+ EB7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ EB7C             >Latest_Definition defl  Heap_Ptr
 606+ EB7C             >
 606+ EB7C             >                // dummy db directives used to calculate length of namec
 606+ EB7C 2E 52       >                db      ".R"
 606+ EB7E             >len_NFA         defl    $ - temp_NFA
 606+ EB7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ EB7C             >
 606+ EB7C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ EB7D 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 606+ EB7F             >                org     $-1                 // alter last byte of Name just above to set
 606+ EB7E D2          >                db      {b $} | END_BIT     // msb as name end
 606+ EB7F             >
 606+ EB7F 74 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 606+ EB81             >Prev_Ptr        defl    Heap_Ptr
 606+ EB81             >
 606+ EB81             >mirror_Ptr      defl    $
 606+ EB81             >
 606+ EB81 30 7E       >                dw      Dict_Ptr + 2        // xt
 606+ EB83             >Heap_Ptr        defl    $ - $E000           // save current HP
 606+ EB83             >
 606+ EB83             >Current_HP      defl  $ - $E000             // used to set HP once!
 606+ EB83             >
 606+ EB83             >//              ______________________________________________________________________
 606+ EB83             >//              Dictionary part
 606+ EB83             >
 606+ EB83             >                org     Dict_Ptr
 606+ 7E2E             >
 606+ 7E2E 81 0B       >                dw      mirror_Ptr - $E000
 606+ 7E30             >
 606+ 7E30             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 7E30 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 7E33             >
 606+ 7E33             >
 606+ 7E33             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 7E33             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 7E33             >
 606+ 7E33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 7E33 5C 68                        dw      TO_R
 608+ 7E35 DA 6B 67 68                  dw      S_TO_D, R_TO
 609+ 7E39 0F 7E                        dw      D_DOT_R
 610+ 7E3B 52 68                        dw      EXIT
 611+ 7E3D
 612+ 7E3D              //  ______________________________________________________________________
 613+ 7E3D              //
 614+ 7E3D              // d.           d --
 615+ 7E3D                              Colon_Def D_DOT, "D.", is_normal
 615+ 7E3D             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 615+ 7E3D             >
 615+ 7E3D             >Dict_Ptr        defl    $
 615+ 7E3D             >
 615+ 7E3D             >//              ______________________________________________________________________
 615+ 7E3D             >//              Heap part
 615+ 7E3D             >
 615+ 7E3D             >
 615+ 7E3D             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ EB83             >
 615+ EB83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ EB83             >Latest_Definition defl  Heap_Ptr
 615+ EB83             >
 615+ EB83             >                // dummy db directives used to calculate length of namec
 615+ EB83 44 2E       >                db      "D."
 615+ EB85             >len_NFA         defl    $ - temp_NFA
 615+ EB85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ EB83             >
 615+ EB83 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ EB84 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 615+ EB86             >                org     $-1                 // alter last byte of Name just above to set
 615+ EB85 AE          >                db      {b $} | END_BIT     // msb as name end
 615+ EB86             >
 615+ EB86 7C 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 615+ EB88             >Prev_Ptr        defl    Heap_Ptr
 615+ EB88             >
 615+ EB88             >mirror_Ptr      defl    $
 615+ EB88             >
 615+ EB88 3F 7E       >                dw      Dict_Ptr + 2        // xt
 615+ EB8A             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ EB8A             >
 615+ EB8A             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ EB8A             >
 615+ EB8A             >//              ______________________________________________________________________
 615+ EB8A             >//              Dictionary part
 615+ EB8A             >
 615+ EB8A             >                org     Dict_Ptr
 615+ 7E3D             >
 615+ 7E3D 88 0B       >                dw      mirror_Ptr - $E000
 615+ 7E3F             >
 615+ 7E3F             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 7E3F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 7E42             >
 615+ 7E42             >
 615+ 7E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 7E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 7E42             >
 615+ 7E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 7E42 81 6A 0F 7E                  dw      ZERO, D_DOT_R, SPACE
 616+ 7E46 77 6C
 617+ 7E48 52 68                        dw      EXIT
 618+ 7E4A
 619+ 7E4A              //  ______________________________________________________________________
 620+ 7E4A              //
 621+ 7E4A              // .            n --
 622+ 7E4A                              Colon_Def DOT, ".", is_normal
 622+ 7E4A             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 622+ 7E4A             >
 622+ 7E4A             >Dict_Ptr        defl    $
 622+ 7E4A             >
 622+ 7E4A             >//              ______________________________________________________________________
 622+ 7E4A             >//              Heap part
 622+ 7E4A             >
 622+ 7E4A             >
 622+ 7E4A             >                org     (Heap_Ptr & $1FFF) + $E000
 622+ EB8A             >
 622+ EB8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ EB8A             >Latest_Definition defl  Heap_Ptr
 622+ EB8A             >
 622+ EB8A             >                // dummy db directives used to calculate length of namec
 622+ EB8A 2E          >                db      "."
 622+ EB8B             >len_NFA         defl    $ - temp_NFA
 622+ EB8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ EB8A             >
 622+ EB8A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ EB8B 2E          >                db      "."               // name string in 7-bit ascii, but
 622+ EB8C             >                org     $-1                 // alter last byte of Name just above to set
 622+ EB8B AE          >                db      {b $} | END_BIT     // msb as name end
 622+ EB8C             >
 622+ EB8C 83 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 622+ EB8E             >Prev_Ptr        defl    Heap_Ptr
 622+ EB8E             >
 622+ EB8E             >mirror_Ptr      defl    $
 622+ EB8E             >
 622+ EB8E 4C 7E       >                dw      Dict_Ptr + 2        // xt
 622+ EB90             >Heap_Ptr        defl    $ - $E000           // save current HP
 622+ EB90             >
 622+ EB90             >Current_HP      defl  $ - $E000             // used to set HP once!
 622+ EB90             >
 622+ EB90             >//              ______________________________________________________________________
 622+ EB90             >//              Dictionary part
 622+ EB90             >
 622+ EB90             >                org     Dict_Ptr
 622+ 7E4A             >
 622+ 7E4A 8E 0B       >                dw      mirror_Ptr - $E000
 622+ 7E4C             >
 622+ 7E4C             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 7E4C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 7E4F             >
 622+ 7E4F             >
 622+ 7E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 7E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 7E4F             >
 622+ 7E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 7E4F DA 6B 3F 7E                  dw      S_TO_D, D_DOT
 624+ 7E53 52 68                        dw      EXIT
 625+ 7E55
 626+ 7E55              //  ______________________________________________________________________
 627+ 7E55              //
 628+ 7E55              // ?            n --
 629+ 7E55                              Colon_Def QUESTION, "?", is_normal
 629+ 7E55             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 629+ 7E55             >
 629+ 7E55             >Dict_Ptr        defl    $
 629+ 7E55             >
 629+ 7E55             >//              ______________________________________________________________________
 629+ 7E55             >//              Heap part
 629+ 7E55             >
 629+ 7E55             >
 629+ 7E55             >                org     (Heap_Ptr & $1FFF) + $E000
 629+ EB90             >
 629+ EB90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 629+ EB90             >Latest_Definition defl  Heap_Ptr
 629+ EB90             >
 629+ EB90             >                // dummy db directives used to calculate length of namec
 629+ EB90 3F          >                db      "?"
 629+ EB91             >len_NFA         defl    $ - temp_NFA
 629+ EB91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 629+ EB90             >
 629+ EB90 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 629+ EB91 3F          >                db      "?"               // name string in 7-bit ascii, but
 629+ EB92             >                org     $-1                 // alter last byte of Name just above to set
 629+ EB91 BF          >                db      {b $} | END_BIT     // msb as name end
 629+ EB92             >
 629+ EB92 8A 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 629+ EB94             >Prev_Ptr        defl    Heap_Ptr
 629+ EB94             >
 629+ EB94             >mirror_Ptr      defl    $
 629+ EB94             >
 629+ EB94 57 7E       >                dw      Dict_Ptr + 2        // xt
 629+ EB96             >Heap_Ptr        defl    $ - $E000           // save current HP
 629+ EB96             >
 629+ EB96             >Current_HP      defl  $ - $E000             // used to set HP once!
 629+ EB96             >
 629+ EB96             >//              ______________________________________________________________________
 629+ EB96             >//              Dictionary part
 629+ EB96             >
 629+ EB96             >                org     Dict_Ptr
 629+ 7E55             >
 629+ 7E55 94 0B       >                dw      mirror_Ptr - $E000
 629+ 7E57             >
 629+ 7E57             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 629+ 7E57 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 629+ 7E5A             >
 629+ 7E5A             >
 629+ 7E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 629+ 7E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 629+ 7E5A             >
 629+ 7E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 630+ 7E5A 89 69 4C 7E                  dw      FETCH, DOT
 631+ 7E5E 52 68                        dw      EXIT
 632+ 7E60
 633+ 7E60              //  ______________________________________________________________________
 634+ 7E60              //
 635+ 7E60              // u.           u --
 636+ 7E60                              Colon_Def U_DOT, "U.", is_normal
 636+ 7E60             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 636+ 7E60             >
 636+ 7E60             >Dict_Ptr        defl    $
 636+ 7E60             >
 636+ 7E60             >//              ______________________________________________________________________
 636+ 7E60             >//              Heap part
 636+ 7E60             >
 636+ 7E60             >
 636+ 7E60             >                org     (Heap_Ptr & $1FFF) + $E000
 636+ EB96             >
 636+ EB96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ EB96             >Latest_Definition defl  Heap_Ptr
 636+ EB96             >
 636+ EB96             >                // dummy db directives used to calculate length of namec
 636+ EB96 55 2E       >                db      "U."
 636+ EB98             >len_NFA         defl    $ - temp_NFA
 636+ EB98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ EB96             >
 636+ EB96 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ EB97 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 636+ EB99             >                org     $-1                 // alter last byte of Name just above to set
 636+ EB98 AE          >                db      {b $} | END_BIT     // msb as name end
 636+ EB99             >
 636+ EB99 90 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 636+ EB9B             >Prev_Ptr        defl    Heap_Ptr
 636+ EB9B             >
 636+ EB9B             >mirror_Ptr      defl    $
 636+ EB9B             >
 636+ EB9B 62 7E       >                dw      Dict_Ptr + 2        // xt
 636+ EB9D             >Heap_Ptr        defl    $ - $E000           // save current HP
 636+ EB9D             >
 636+ EB9D             >Current_HP      defl  $ - $E000             // used to set HP once!
 636+ EB9D             >
 636+ EB9D             >//              ______________________________________________________________________
 636+ EB9D             >//              Dictionary part
 636+ EB9D             >
 636+ EB9D             >                org     Dict_Ptr
 636+ 7E60             >
 636+ 7E60 9B 0B       >                dw      mirror_Ptr - $E000
 636+ 7E62             >
 636+ 7E62             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 7E62 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 7E65             >
 636+ 7E65             >
 636+ 7E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 7E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 7E65             >
 636+ 7E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 7E65 81 6A 3F 7E                  dw      ZERO, D_DOT
 638+ 7E69 52 68                        dw      EXIT
 639+ 7E6B
 640+ 7E6B              //  ______________________________________________________________________
 641+ 7E6B              //
 642+ 7E6B              // words        --
 643+ 7E6B                              Colon_Def WORDS, "WORDS", is_normal
 643+ 7E6B             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 643+ 7E6B             >
 643+ 7E6B             >Dict_Ptr        defl    $
 643+ 7E6B             >
 643+ 7E6B             >//              ______________________________________________________________________
 643+ 7E6B             >//              Heap part
 643+ 7E6B             >
 643+ 7E6B             >
 643+ 7E6B             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ EB9D             >
 643+ EB9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ EB9D             >Latest_Definition defl  Heap_Ptr
 643+ EB9D             >
 643+ EB9D             >                // dummy db directives used to calculate length of namec
 643+ EB9D 57 4F 52 44 >                db      "WORDS"
 643+ EBA1 53          >
 643+ EBA2             >len_NFA         defl    $ - temp_NFA
 643+ EBA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ EB9D             >
 643+ EB9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ EB9E 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 643+ EBA2 53          >
 643+ EBA3             >                org     $-1                 // alter last byte of Name just above to set
 643+ EBA2 D3          >                db      {b $} | END_BIT     // msb as name end
 643+ EBA3             >
 643+ EBA3 96 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 643+ EBA5             >Prev_Ptr        defl    Heap_Ptr
 643+ EBA5             >
 643+ EBA5             >mirror_Ptr      defl    $
 643+ EBA5             >
 643+ EBA5 6D 7E       >                dw      Dict_Ptr + 2        // xt
 643+ EBA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ EBA7             >
 643+ EBA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ EBA7             >
 643+ EBA7             >//              ______________________________________________________________________
 643+ EBA7             >//              Dictionary part
 643+ EBA7             >
 643+ EBA7             >                org     Dict_Ptr
 643+ 7E6B             >
 643+ 7E6B A5 0B       >                dw      mirror_Ptr - $E000
 643+ 7E6D             >
 643+ 7E6D             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 7E6D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 7E70             >
 643+ 7E70             >
 643+ 7E70             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 7E70             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 7E70             >
 643+ 7E70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 7E70 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 644+ 7E74 2E 6B 93 69
 645+ 7E78 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH
 645+ 7E7C 89 69
 646+ 7E7E              Words_Begin:
 647+ 7E7E E8 6C                        dw          FAR // Q TO HEAP
 648+ 7E80 2B 69 9E 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 648+ 7E84 A3 63 1F 00
 648+ 7E88 0C 68
 649+ 7E8A 2E 6B 89 69                  dw          OUT, FETCH, PLUS
 649+ 7E8E A5 68
 650+ 7E90 AB 6A 0A 6C                  dw          CL, LESS, ZEQUAL
 650+ 7E94 77 68
 651+ 7E96 F5 63                        dw          ZBRANCH
 652+ 7E98 0A 00                        dw          Words_Endif - $
 653+ 7E9A B6 65 81 6A                  dw              CR, ZERO, OUT, STORE
 653+ 7E9E 2E 6B 93 69
 654+ 7EA2              Words_Endif:
 655+ 7EA2 2B 69 F4 72                  dw          DUP, ID_DOT
 656+ 7EA6 88 6A 82 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 656+ 7EAA BE 68 89 69
 657+ 7EAE 2B 69 77 68                  dw          DUP, ZEQUAL
 658+ 7EB2 B3 66 1B 68                  dw          QTERMINAL, OR_OP
 659+ 7EB6 F5 63                        dw      ZBRANCH
 660+ 7EB8 C6 FF                        dw      Words_Begin - $
 661+ 7EBA 10 69                        dw      DROP
 662+ 7EBC 52 68                        dw      EXIT
 663+ 7EBE
 664+ 7EBE              //  ______________________________________________________________________
 665+ 7EBE              //
 666+ 7EBE              // list         n --
 667+ 7EBE                              Colon_Def LIST, "LIST", is_normal
 667+ 7EBE             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 667+ 7EBE             >
 667+ 7EBE             >Dict_Ptr        defl    $
 667+ 7EBE             >
 667+ 7EBE             >//              ______________________________________________________________________
 667+ 7EBE             >//              Heap part
 667+ 7EBE             >
 667+ 7EBE             >
 667+ 7EBE             >                org     (Heap_Ptr & $1FFF) + $E000
 667+ EBA7             >
 667+ EBA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 667+ EBA7             >Latest_Definition defl  Heap_Ptr
 667+ EBA7             >
 667+ EBA7             >                // dummy db directives used to calculate length of namec
 667+ EBA7 4C 49 53 54 >                db      "LIST"
 667+ EBAB             >len_NFA         defl    $ - temp_NFA
 667+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 667+ EBA7             >
 667+ EBA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 667+ EBA8 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 667+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 667+ EBAB D4          >                db      {b $} | END_BIT     // msb as name end
 667+ EBAC             >
 667+ EBAC 9D 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 667+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 667+ EBAE             >
 667+ EBAE             >mirror_Ptr      defl    $
 667+ EBAE             >
 667+ EBAE C0 7E       >                dw      Dict_Ptr + 2        // xt
 667+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 667+ EBB0             >
 667+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 667+ EBB0             >
 667+ EBB0             >//              ______________________________________________________________________
 667+ EBB0             >//              Dictionary part
 667+ EBB0             >
 667+ EBB0             >                org     Dict_Ptr
 667+ 7EBE             >
 667+ 7EBE AE 0B       >                dw      mirror_Ptr - $E000
 667+ 7EC0             >
 667+ 7EC0             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 667+ 7EC0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 667+ 7EC3             >
 667+ 7EC3             >
 667+ 7EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 667+ 7EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 667+ 7EC3             >
 667+ 7EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 668+ 7EC3 BB 6E B6 65                  dw      DECIMAL, CR
 669+ 7EC7 2B 69 34 6B                  dw      DUP, SCR, STORE
 669+ 7ECB 93 69
 670+ 7ECD 0F 71                        dw      C_DOT_QUOTE
 671+ 7ECF 05 53 63 72                  db      5, "Scr# "
 671+ 7ED3 23 20
 672+ 7ED5 4C 7E                        dw      DOT
 673+ 7ED7 C0 6A 81 6A                  dw      LSCR, ZERO, C_DO
 673+ 7EDB 34 64
 674+ 7EDD              List_Loop:
 675+ 7EDD B6 65                        dw          CR
 676+ 7EDF 3A 64 96 6A                  dw          I, THREE
 677+ 7EE3 30 7E 77 6C                  dw          DOT_R, SPACE
 678+ 7EE7 3A 64 34 6B                  dw          I, SCR, FETCH, DOT_LINE
 678+ 7EEB 89 69 0E 77
 679+ 7EEF B3 66                        dw          QTERMINAL
 680+ 7EF1 F5 63                        dw          ZBRANCH
 681+ 7EF3 06 00                        dw          List_Endif - $
 682+ 7EF5 00 64                        dw              C_LEAVE
 683+ 7EF7 06 00                        dw              List_Leave - $
 684+ 7EF9              List_Endif:
 685+ 7EF9 E0 63                        dw      C_LOOP
 686+ 7EFB E2 FF                        dw      List_Loop - $
 687+ 7EFD              List_Leave:
 688+ 7EFD B6 65                        dw      CR
 689+ 7EFF 52 68                        dw      EXIT
 690+ 7F01
 691+ 7F01              //  ______________________________________________________________________
 692+ 7F01              //
 693+ 7F01              // index        n1 n2 --
 694+ 7F01                              Colon_Def INDEX, "INDEX", is_normal
 694+ 7F01             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 694+ 7F01             >
 694+ 7F01             >Dict_Ptr        defl    $
 694+ 7F01             >
 694+ 7F01             >//              ______________________________________________________________________
 694+ 7F01             >//              Heap part
 694+ 7F01             >
 694+ 7F01             >
 694+ 7F01             >                org     (Heap_Ptr & $1FFF) + $E000
 694+ EBB0             >
 694+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ EBB0             >Latest_Definition defl  Heap_Ptr
 694+ EBB0             >
 694+ EBB0             >                // dummy db directives used to calculate length of namec
 694+ EBB0 49 4E 44 45 >                db      "INDEX"
 694+ EBB4 58          >
 694+ EBB5             >len_NFA         defl    $ - temp_NFA
 694+ EBB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ EBB0             >
 694+ EBB0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ EBB1 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 694+ EBB5 58          >
 694+ EBB6             >                org     $-1                 // alter last byte of Name just above to set
 694+ EBB5 D8          >                db      {b $} | END_BIT     // msb as name end
 694+ EBB6             >
 694+ EBB6 A7 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 694+ EBB8             >Prev_Ptr        defl    Heap_Ptr
 694+ EBB8             >
 694+ EBB8             >mirror_Ptr      defl    $
 694+ EBB8             >
 694+ EBB8 03 7F       >                dw      Dict_Ptr + 2        // xt
 694+ EBBA             >Heap_Ptr        defl    $ - $E000           // save current HP
 694+ EBBA             >
 694+ EBBA             >Current_HP      defl  $ - $E000             // used to set HP once!
 694+ EBBA             >
 694+ EBBA             >//              ______________________________________________________________________
 694+ EBBA             >//              Dictionary part
 694+ EBBA             >
 694+ EBBA             >                org     Dict_Ptr
 694+ 7F01             >
 694+ 7F01 B8 0B       >                dw      mirror_Ptr - $E000
 694+ 7F03             >
 694+ 7F03             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 7F03 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 7F06             >
 694+ 7F06             >
 694+ 7F06             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 7F06             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 7F06             >
 694+ 7F06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 7F06 BE 68 24 69                  dw      ONE_PLUS, SWAP, C_DO
 695+ 7F0A 34 64
 696+ 7F0C              Index_Loop:
 697+ 7F0C B6 65 3A 64                  dw          CR, I, THREE
 697+ 7F10 96 6A
 698+ 7F12 30 7E 77 6C                  dw          DOT_R, SPACE
 699+ 7F16 81 6A 3A 64                  dw          ZERO, I, DOT_LINE
 699+ 7F1A 0E 77
 700+ 7F1C B3 66                        dw          QTERMINAL
 701+ 7F1E F5 63                        dw          ZBRANCH
 702+ 7F20 06 00                        dw          Index_Endif - $
 703+ 7F22 00 64                        dw              C_LEAVE
 704+ 7F24 06 00                        dw              Index_Leave - $
 705+ 7F26              Index_Endif:
 706+ 7F26 E0 63                        dw      C_LOOP
 707+ 7F28 E4 FF                        dw      Index_Loop - $
 708+ 7F2A              Index_Leave:
 709+ 7F2A B6 65                        dw      CR
 710+ 7F2C 52 68                        dw      EXIT
 711+ 7F2E
 712+ 7F2E              //  ______________________________________________________________________
 713+ 7F2E              //
 714+ 7F2E              // cls          --
 715+ 7F2E                              Colon_Def CLS, "CLS", is_normal
 715+ 7F2E             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 715+ 7F2E             >
 715+ 7F2E             >Dict_Ptr        defl    $
 715+ 7F2E             >
 715+ 7F2E             >//              ______________________________________________________________________
 715+ 7F2E             >//              Heap part
 715+ 7F2E             >
 715+ 7F2E             >
 715+ 7F2E             >                org     (Heap_Ptr & $1FFF) + $E000
 715+ EBBA             >
 715+ EBBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ EBBA             >Latest_Definition defl  Heap_Ptr
 715+ EBBA             >
 715+ EBBA             >                // dummy db directives used to calculate length of namec
 715+ EBBA 43 4C 53    >                db      "CLS"
 715+ EBBD             >len_NFA         defl    $ - temp_NFA
 715+ EBBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ EBBA             >
 715+ EBBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ EBBB 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 715+ EBBE             >                org     $-1                 // alter last byte of Name just above to set
 715+ EBBD D3          >                db      {b $} | END_BIT     // msb as name end
 715+ EBBE             >
 715+ EBBE B0 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 715+ EBC0             >Prev_Ptr        defl    Heap_Ptr
 715+ EBC0             >
 715+ EBC0             >mirror_Ptr      defl    $
 715+ EBC0             >
 715+ EBC0 30 7F       >                dw      Dict_Ptr + 2        // xt
 715+ EBC2             >Heap_Ptr        defl    $ - $E000           // save current HP
 715+ EBC2             >
 715+ EBC2             >Current_HP      defl  $ - $E000             // used to set HP once!
 715+ EBC2             >
 715+ EBC2             >//              ______________________________________________________________________
 715+ EBC2             >//              Dictionary part
 715+ EBC2             >
 715+ EBC2             >                org     Dict_Ptr
 715+ 7F2E             >
 715+ 7F2E C0 0B       >                dw      mirror_Ptr - $E000
 715+ 7F30             >
 715+ 7F30             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 7F30 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 7F33             >
 715+ 7F33             >
 715+ 7F33             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 7F33             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 7F33             >
 715+ 7F33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 7F33 A3 63 0E 00                  dw      LIT, $0E, EMITC
 716+ 7F37 A2 65
 717+ 7F39 52 68                        dw      EXIT
 718+ 7F3B
 719+ 7F3B              //  ______________________________________________________________________
 720+ 7F3B              //
 721+ 7F3B              // splash       --
 722+ 7F3B                              Colon_Def SPLASH, "SPLASH", is_normal
 722+ 7F3B             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 722+ 7F3B             >
 722+ 7F3B             >Dict_Ptr        defl    $
 722+ 7F3B             >
 722+ 7F3B             >//              ______________________________________________________________________
 722+ 7F3B             >//              Heap part
 722+ 7F3B             >
 722+ 7F3B             >
 722+ 7F3B             >                org     (Heap_Ptr & $1FFF) + $E000
 722+ EBC2             >
 722+ EBC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 722+ EBC2             >Latest_Definition defl  Heap_Ptr
 722+ EBC2             >
 722+ EBC2             >                // dummy db directives used to calculate length of namec
 722+ EBC2 53 50 4C 41 >                db      "SPLASH"
 722+ EBC6 53 48       >
 722+ EBC8             >len_NFA         defl    $ - temp_NFA
 722+ EBC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 722+ EBC2             >
 722+ EBC2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 722+ EBC3 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 722+ EBC7 53 48       >
 722+ EBC9             >                org     $-1                 // alter last byte of Name just above to set
 722+ EBC8 C8          >                db      {b $} | END_BIT     // msb as name end
 722+ EBC9             >
 722+ EBC9 BA 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 722+ EBCB             >Prev_Ptr        defl    Heap_Ptr
 722+ EBCB             >
 722+ EBCB             >mirror_Ptr      defl    $
 722+ EBCB             >
 722+ EBCB 3D 7F       >                dw      Dict_Ptr + 2        // xt
 722+ EBCD             >Heap_Ptr        defl    $ - $E000           // save current HP
 722+ EBCD             >
 722+ EBCD             >Current_HP      defl  $ - $E000             // used to set HP once!
 722+ EBCD             >
 722+ EBCD             >//              ______________________________________________________________________
 722+ EBCD             >//              Dictionary part
 722+ EBCD             >
 722+ EBCD             >                org     Dict_Ptr
 722+ 7F3B             >
 722+ 7F3B CB 0B       >                dw      mirror_Ptr - $E000
 722+ 7F3D             >
 722+ 7F3D             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 722+ 7F3D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 722+ 7F40             >
 722+ 7F40             >
 722+ 7F40             >                endif           ; ok        // for other definitions it "points" the correct handler
 722+ 7F40             >                // Use of "; ok" to suppress "warning[fwdref]"
 722+ 7F40             >
 722+ 7F40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 723+ 7F40 30 7F                        dw      CLS
 724+ 7F42 0F 71                        dw      C_DOT_QUOTE
 725+ 7F44 57                           db      87
 726+ 7F45 76 2D 46 6F                  db      "v-Forth 1.7 NextZXOS version", 13    // 29
 726+ 7F49 72 74 68 20
 726+ 7F4D 31 2E 37 20
 726+ 7F51 4E 65 78 74
 726+ 7F55 5A 58 4F 53
 726+ 7F59 20 76 65 72
 726+ 7F5D 73 69 6F 6E
 726+ 7F61 0D
 727+ 7F62 48 65 61 70                  db      "Heap Vocabulary - build 20230619", 13  // 33
 727+ 7F66 20 56 6F 63
 727+ 7F6A 61 62 75 6C
 727+ 7F6E 61 72 79 20
 727+ 7F72 2D 20 62 75
 727+ 7F76 69 6C 64 20
 727+ 7F7A 32 30 32 33
 727+ 7F7E 30 36 31 39
 727+ 7F82 0D
 728+ 7F83 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13        // 25
 728+ 7F87 2D 32 30 32
 728+ 7F8B 33 20 4D 61
 728+ 7F8F 74 74 65 6F
 728+ 7F93 20 56 69 74
 728+ 7F97 74 75 72 69
 728+ 7F9B 0D
 729+ 7F9C 52 68                        dw      EXIT
 730+ 7F9E
 731+ 7F9E              //  ______________________________________________________________________
 732+ 7F9E              //
 733+ 7F9E              // video        --
 734+ 7F9E                              Colon_Def VIDEO, "VIDEO", is_normal
 734+ 7F9E             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 734+ 7F9E             >
 734+ 7F9E             >Dict_Ptr        defl    $
 734+ 7F9E             >
 734+ 7F9E             >//              ______________________________________________________________________
 734+ 7F9E             >//              Heap part
 734+ 7F9E             >
 734+ 7F9E             >
 734+ 7F9E             >                org     (Heap_Ptr & $1FFF) + $E000
 734+ EBCD             >
 734+ EBCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 734+ EBCD             >Latest_Definition defl  Heap_Ptr
 734+ EBCD             >
 734+ EBCD             >                // dummy db directives used to calculate length of namec
 734+ EBCD 56 49 44 45 >                db      "VIDEO"
 734+ EBD1 4F          >
 734+ EBD2             >len_NFA         defl    $ - temp_NFA
 734+ EBD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 734+ EBCD             >
 734+ EBCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 734+ EBCE 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 734+ EBD2 4F          >
 734+ EBD3             >                org     $-1                 // alter last byte of Name just above to set
 734+ EBD2 CF          >                db      {b $} | END_BIT     // msb as name end
 734+ EBD3             >
 734+ EBD3 C2 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 734+ EBD5             >Prev_Ptr        defl    Heap_Ptr
 734+ EBD5             >
 734+ EBD5             >mirror_Ptr      defl    $
 734+ EBD5             >
 734+ EBD5 A0 7F       >                dw      Dict_Ptr + 2        // xt
 734+ EBD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 734+ EBD7             >
 734+ EBD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 734+ EBD7             >
 734+ EBD7             >//              ______________________________________________________________________
 734+ EBD7             >//              Dictionary part
 734+ EBD7             >
 734+ EBD7             >                org     Dict_Ptr
 734+ 7F9E             >
 734+ 7F9E D5 0B       >                dw      mirror_Ptr - $E000
 734+ 7FA0             >
 734+ 7FA0             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 734+ 7FA0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 734+ 7FA3             >
 734+ 7FA3             >
 734+ 7FA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 734+ 7FA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 734+ 7FA3             >
 734+ 7FA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 735+ 7FA3 8F 6A 2B 69                  dw      TWO, DUP, DEVICE, STORE
 735+ 7FA7 49 77 93 69
 736+ 7FAB C7 66                        dw      SELECT
 737+ 7FAD 52 68                        dw      EXIT
 738+ 7FAF
 739+ 7FAF              //  ______________________________________________________________________
 740+ 7FAF              //
 741+ 7FAF              // autoexec     --
 742+ 7FAF              // this word is called the first time the Forth system boot to
 743+ 7FAF              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 744+ 7FAF                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 744+ 7FAF             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 744+ 7FAF             >
 744+ 7FAF             >Dict_Ptr        defl    $
 744+ 7FAF             >
 744+ 7FAF             >//              ______________________________________________________________________
 744+ 7FAF             >//              Heap part
 744+ 7FAF             >
 744+ 7FAF             >
 744+ 7FAF             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ EBD7             >
 744+ EBD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ EBD7             >Latest_Definition defl  Heap_Ptr
 744+ EBD7             >
 744+ EBD7             >                // dummy db directives used to calculate length of namec
 744+ EBD7 41 55 54 4F >                db      "AUTOEXEC"
 744+ EBDB 45 58 45 43 >
 744+ EBDF             >len_NFA         defl    $ - temp_NFA
 744+ EBDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ EBD7             >
 744+ EBD7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ EBD8 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 744+ EBDC 45 58 45 43 >
 744+ EBE0             >                org     $-1                 // alter last byte of Name just above to set
 744+ EBDF C3          >                db      {b $} | END_BIT     // msb as name end
 744+ EBE0             >
 744+ EBE0 CD 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 744+ EBE2             >Prev_Ptr        defl    Heap_Ptr
 744+ EBE2             >
 744+ EBE2             >mirror_Ptr      defl    $
 744+ EBE2             >
 744+ EBE2 B1 7F       >                dw      Dict_Ptr + 2        // xt
 744+ EBE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ EBE4             >
 744+ EBE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ EBE4             >
 744+ EBE4             >//              ______________________________________________________________________
 744+ EBE4             >//              Dictionary part
 744+ EBE4             >
 744+ EBE4             >                org     Dict_Ptr
 744+ 7FAF             >
 744+ 7FAF E2 0B       >                dw      mirror_Ptr - $E000
 744+ 7FB1             >
 744+ 7FB1             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 7FB1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 7FB4             >
 744+ 7FB4             >
 744+ 7FB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 7FB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 7FB4             >
 744+ 7FB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 7FB4 A3 63 0B 00                  dw      LIT, 11
 746+ 7FB8 A3 63 48 6A                  dw      LIT, NOOP
 747+ 7FBC A3 63 55 75                  dw      LIT, Autoexec_Ptr
 748+ 7FC0 93 69                        dw      STORE
 749+ 7FC2 66 7C                        dw      LOAD
 750+ 7FC4 0A 75                        dw      QUIT
 751+ 7FC6 52 68                        dw      EXIT
 752+ 7FC8
 753+ 7FC8
 754+ 7FC8              //  ______________________________________________________________________
 755+ 7FC8              //
 756+ 7FC8              // bye     --
 757+ 7FC8              //
 758+ 7FC8                              Colon_Def BYE, "BYE", is_normal
 758+ 7FC8             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 758+ 7FC8             >
 758+ 7FC8             >Dict_Ptr        defl    $
 758+ 7FC8             >
 758+ 7FC8             >//              ______________________________________________________________________
 758+ 7FC8             >//              Heap part
 758+ 7FC8             >
 758+ 7FC8             >
 758+ 7FC8             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ EBE4             >
 758+ EBE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ EBE4             >Latest_Definition defl  Heap_Ptr
 758+ EBE4             >
 758+ EBE4             >                // dummy db directives used to calculate length of namec
 758+ EBE4 42 59 45    >                db      "BYE"
 758+ EBE7             >len_NFA         defl    $ - temp_NFA
 758+ EBE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ EBE4             >
 758+ EBE4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ EBE5 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 758+ EBE8             >                org     $-1                 // alter last byte of Name just above to set
 758+ EBE7 C5          >                db      {b $} | END_BIT     // msb as name end
 758+ EBE8             >
 758+ EBE8 D7 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 758+ EBEA             >Prev_Ptr        defl    Heap_Ptr
 758+ EBEA             >
 758+ EBEA             >mirror_Ptr      defl    $
 758+ EBEA             >
 758+ EBEA CA 7F       >                dw      Dict_Ptr + 2        // xt
 758+ EBEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ EBEC             >
 758+ EBEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ EBEC             >
 758+ EBEC             >//              ______________________________________________________________________
 758+ EBEC             >//              Dictionary part
 758+ EBEC             >
 758+ EBEC             >                org     Dict_Ptr
 758+ 7FC8             >
 758+ 7FC8 EA 0B       >                dw      mirror_Ptr - $E000
 758+ 7FCA             >
 758+ 7FCA             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 7FCA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 7FCD             >
 758+ 7FCD             >
 758+ 7FCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 7FCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 7FCD             >
 758+ 7FCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 7FCD 68 79                        dw      FLUSH
 760+ 7FCF B0 78                        dw      EMPTY_BUFFERS
 761+ 7FD1 9C 77 89 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 761+ 7FD5 FF 66 10 69
 762+ 7FD9 81 6A C7 6A                  dw      ZERO, PLUS_ORIGIN
 763+ 7FDD D8 75                        dw      BASIC
 764+ 7FDF
 765+ 7FDF              //  ______________________________________________________________________
 766+ 7FDF              //
 767+ 7FDF              // invv     --
 768+ 7FDF              //
 769+ 7FDF              //              Colon_Def INVV, "INVV", is_normal
 770+ 7FDF              //              dw      LIT, 20, EMITC, ONE, EMITC
 771+ 7FDF              //              dw      EXIT
 772+ 7FDF
 773+ 7FDF              //  ______________________________________________________________________
 774+ 7FDF              //
 775+ 7FDF              // truv     --
 776+ 7FDF              //
 777+ 7FDF              //              Colon_Def TRUV, "TRUV", is_normal
 778+ 7FDF              //              dw      LIT, 20, EMITC, ZERO, EMITC
 779+ 7FDF              //              dw      EXIT
 780+ 7FDF
 781+ 7FDF              //  ______________________________________________________________________
 782+ 7FDF              //
 783+ 7FDF              // mark     --
 784+ 7FDF              //
 785+ 7FDF              //              Colon_Def MARK, "MARK", is_normal
 786+ 7FDF              //              dw      INVV, TYPE, TRUV
 787+ 7FDF              //              dw      EXIT
 788+ 7FDF
 789+ 7FDF              //  ______________________________________________________________________
 790+ 7FDF              //
 791+ 7FDF              // back     --
 792+ 7FDF              //
 793+ 7FDF                              Colon_Def BACK, "BACK", is_normal
 793+ 7FDF             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 793+ 7FDF             >
 793+ 7FDF             >Dict_Ptr        defl    $
 793+ 7FDF             >
 793+ 7FDF             >//              ______________________________________________________________________
 793+ 7FDF             >//              Heap part
 793+ 7FDF             >
 793+ 7FDF             >
 793+ 7FDF             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ EBEC             >
 793+ EBEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ EBEC             >Latest_Definition defl  Heap_Ptr
 793+ EBEC             >
 793+ EBEC             >                // dummy db directives used to calculate length of namec
 793+ EBEC 42 41 43 4B >                db      "BACK"
 793+ EBF0             >len_NFA         defl    $ - temp_NFA
 793+ EBF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ EBEC             >
 793+ EBEC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ EBED 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 793+ EBF1             >                org     $-1                 // alter last byte of Name just above to set
 793+ EBF0 CB          >                db      {b $} | END_BIT     // msb as name end
 793+ EBF1             >
 793+ EBF1 E4 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 793+ EBF3             >Prev_Ptr        defl    Heap_Ptr
 793+ EBF3             >
 793+ EBF3             >mirror_Ptr      defl    $
 793+ EBF3             >
 793+ EBF3 E1 7F       >                dw      Dict_Ptr + 2        // xt
 793+ EBF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ EBF5             >
 793+ EBF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ EBF5             >
 793+ EBF5             >//              ______________________________________________________________________
 793+ EBF5             >//              Dictionary part
 793+ EBF5             >
 793+ EBF5             >                org     Dict_Ptr
 793+ 7FDF             >
 793+ 7FDF F3 0B       >                dw      mirror_Ptr - $E000
 793+ 7FE1             >
 793+ 7FE1             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 7FE1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 7FE4             >
 793+ 7FE4             >
 793+ 7FE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 7FE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 7FE4             >
 793+ 7FE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 7FE4 A6 6B E5 6B                  dw      HERE, SUBTRACT, COMMA
 794+ 7FE8 BC 6B
 795+ 7FEA 52 68                        dw      EXIT
 796+ 7FEC
 797+ 7FEC              //  ______________________________________________________________________
 798+ 7FEC              //
 799+ 7FEC              // if          ( -- a 2 ) \ compile-time
 800+ 7FEC              // IF ... THEN
 801+ 7FEC              // IF ... ELSE ... ENDIF
 802+ 7FEC                              Colon_Def IF, "IF", is_immediate
 802+ 7FEC             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 802+ 7FEC             >
 802+ 7FEC             >Dict_Ptr        defl    $
 802+ 7FEC             >
 802+ 7FEC             >//              ______________________________________________________________________
 802+ 7FEC             >//              Heap part
 802+ 7FEC             >
 802+ 7FEC             >
 802+ 7FEC             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ EBF5             >
 802+ EBF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ EBF5             >Latest_Definition defl  Heap_Ptr
 802+ EBF5             >
 802+ EBF5             >                // dummy db directives used to calculate length of namec
 802+ EBF5 49 46       >                db      "IF"
 802+ EBF7             >len_NFA         defl    $ - temp_NFA
 802+ EBF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ EBF5             >
 802+ EBF5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ EBF6 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 802+ EBF8             >                org     $-1                 // alter last byte of Name just above to set
 802+ EBF7 C6          >                db      {b $} | END_BIT     // msb as name end
 802+ EBF8             >
 802+ EBF8 EC 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 802+ EBFA             >Prev_Ptr        defl    Heap_Ptr
 802+ EBFA             >
 802+ EBFA             >mirror_Ptr      defl    $
 802+ EBFA             >
 802+ EBFA EE 7F       >                dw      Dict_Ptr + 2        // xt
 802+ EBFC             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ EBFC             >
 802+ EBFC             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ EBFC             >
 802+ EBFC             >//              ______________________________________________________________________
 802+ EBFC             >//              Dictionary part
 802+ EBFC             >
 802+ EBFC             >                org     Dict_Ptr
 802+ 7FEC             >
 802+ 7FEC FA 0B       >                dw      mirror_Ptr - $E000
 802+ 7FEE             >
 802+ 7FEE             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 7FEE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 7FF1             >
 802+ 7FF1             >
 802+ 7FF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 7FF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 7FF1             >
 802+ 7FF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 7FF1 52 6E F5 63                  dw      COMPILE, ZBRANCH
 804+ 7FF5 A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 804+ 7FF9 BC 6B
 805+ 7FFB 8F 6A                        dw      TWO
 806+ 7FFD 52 68                        dw      EXIT
 807+ 7FFF
 808+ 7FFF              //  ______________________________________________________________________
 809+ 7FFF              //
 810+ 7FFF              // then        ( a 2 -- ) \ compile-time
 811+ 7FFF              //
 812+ 7FFF                              Colon_Def THEN, "THEN", is_immediate
 812+ 7FFF             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 812+ 7FFF             >
 812+ 7FFF             >Dict_Ptr        defl    $
 812+ 7FFF             >
 812+ 7FFF             >//              ______________________________________________________________________
 812+ 7FFF             >//              Heap part
 812+ 7FFF             >
 812+ 7FFF             >
 812+ 7FFF             >                org     (Heap_Ptr & $1FFF) + $E000
 812+ EBFC             >
 812+ EBFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ EBFC             >Latest_Definition defl  Heap_Ptr
 812+ EBFC             >
 812+ EBFC             >                // dummy db directives used to calculate length of namec
 812+ EBFC 54 48 45 4E >                db      "THEN"
 812+ EC00             >len_NFA         defl    $ - temp_NFA
 812+ EC00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ EBFC             >
 812+ EBFC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ EBFD 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 812+ EC01             >                org     $-1                 // alter last byte of Name just above to set
 812+ EC00 CE          >                db      {b $} | END_BIT     // msb as name end
 812+ EC01             >
 812+ EC01 F5 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 812+ EC03             >Prev_Ptr        defl    Heap_Ptr
 812+ EC03             >
 812+ EC03             >mirror_Ptr      defl    $
 812+ EC03             >
 812+ EC03 01 80       >                dw      Dict_Ptr + 2        // xt
 812+ EC05             >Heap_Ptr        defl    $ - $E000           // save current HP
 812+ EC05             >
 812+ EC05             >Current_HP      defl  $ - $E000             // used to set HP once!
 812+ EC05             >
 812+ EC05             >//              ______________________________________________________________________
 812+ EC05             >//              Dictionary part
 812+ EC05             >
 812+ EC05             >                org     Dict_Ptr
 812+ 7FFF             >
 812+ 7FFF 03 0C       >                dw      mirror_Ptr - $E000
 812+ 8001             >
 812+ 8001             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 8001 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 8004             >
 812+ 8004             >
 812+ 8004             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 8004             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 8004             >
 812+ 8004             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 8004 F7 6D                        dw      QCOMP
 814+ 8006 8F 6A 1B 6E                  dw      TWO, QPAIRS
 815+ 800A A6 6B 07 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 815+ 800E E5 6B 24 69
 815+ 8012 93 69
 816+ 8014 52 68                        dw      EXIT
 817+ 8016
 818+ 8016              //  ______________________________________________________________________
 819+ 8016              //
 820+ 8016              // endif       ( a 2 -- ) \ compile-time
 821+ 8016              //
 822+ 8016                              Colon_Def ENDIF, "ENDIF", is_immediate
 822+ 8016             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 822+ 8016             >
 822+ 8016             >Dict_Ptr        defl    $
 822+ 8016             >
 822+ 8016             >//              ______________________________________________________________________
 822+ 8016             >//              Heap part
 822+ 8016             >
 822+ 8016             >
 822+ 8016             >                org     (Heap_Ptr & $1FFF) + $E000
 822+ EC05             >
 822+ EC05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 822+ EC05             >Latest_Definition defl  Heap_Ptr
 822+ EC05             >
 822+ EC05             >                // dummy db directives used to calculate length of namec
 822+ EC05 45 4E 44 49 >                db      "ENDIF"
 822+ EC09 46          >
 822+ EC0A             >len_NFA         defl    $ - temp_NFA
 822+ EC0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 822+ EC05             >
 822+ EC05 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 822+ EC06 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 822+ EC0A 46          >
 822+ EC0B             >                org     $-1                 // alter last byte of Name just above to set
 822+ EC0A C6          >                db      {b $} | END_BIT     // msb as name end
 822+ EC0B             >
 822+ EC0B FC 0B       >                dw      Prev_Ptr            // Link to previous definition Name
 822+ EC0D             >Prev_Ptr        defl    Heap_Ptr
 822+ EC0D             >
 822+ EC0D             >mirror_Ptr      defl    $
 822+ EC0D             >
 822+ EC0D 18 80       >                dw      Dict_Ptr + 2        // xt
 822+ EC0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 822+ EC0F             >
 822+ EC0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 822+ EC0F             >
 822+ EC0F             >//              ______________________________________________________________________
 822+ EC0F             >//              Dictionary part
 822+ EC0F             >
 822+ EC0F             >                org     Dict_Ptr
 822+ 8016             >
 822+ 8016 0D 0C       >                dw      mirror_Ptr - $E000
 822+ 8018             >
 822+ 8018             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 822+ 8018 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 822+ 801B             >
 822+ 801B             >
 822+ 801B             >                endif           ; ok        // for other definitions it "points" the correct handler
 822+ 801B             >                // Use of "; ok" to suppress "warning[fwdref]"
 822+ 801B             >
 822+ 801B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 823+ 801B 01 80                        dw      THEN
 824+ 801D 52 68                        dw      EXIT
 825+ 801F
 826+ 801F              //  ______________________________________________________________________
 827+ 801F              //
 828+ 801F              // else        ( a1 2 -- a2 2 ) \ compile-time
 829+ 801F              //
 830+ 801F                              Colon_Def ELSE, "ELSE", is_immediate
 830+ 801F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 830+ 801F             >
 830+ 801F             >Dict_Ptr        defl    $
 830+ 801F             >
 830+ 801F             >//              ______________________________________________________________________
 830+ 801F             >//              Heap part
 830+ 801F             >
 830+ 801F             >
 830+ 801F             >                org     (Heap_Ptr & $1FFF) + $E000
 830+ EC0F             >
 830+ EC0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ EC0F             >Latest_Definition defl  Heap_Ptr
 830+ EC0F             >
 830+ EC0F             >                // dummy db directives used to calculate length of namec
 830+ EC0F 45 4C 53 45 >                db      "ELSE"
 830+ EC13             >len_NFA         defl    $ - temp_NFA
 830+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ EC0F             >
 830+ EC0F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ EC10 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 830+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 830+ EC13 C5          >                db      {b $} | END_BIT     // msb as name end
 830+ EC14             >
 830+ EC14 05 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 830+ EC16             >Prev_Ptr        defl    Heap_Ptr
 830+ EC16             >
 830+ EC16             >mirror_Ptr      defl    $
 830+ EC16             >
 830+ EC16 21 80       >                dw      Dict_Ptr + 2        // xt
 830+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 830+ EC18             >
 830+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 830+ EC18             >
 830+ EC18             >//              ______________________________________________________________________
 830+ EC18             >//              Dictionary part
 830+ EC18             >
 830+ EC18             >                org     Dict_Ptr
 830+ 801F             >
 830+ 801F 16 0C       >                dw      mirror_Ptr - $E000
 830+ 8021             >
 830+ 8021             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 8021 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 830+ 8024             >
 830+ 8024             >
 830+ 8024             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 8024             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 8024             >
 830+ 8024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 8024 F7 6D                        dw      QCOMP
 832+ 8026 8F 6A 1B 6E                  dw      TWO, QPAIRS
 833+ 802A 52 6E E8 63                  dw      COMPILE, BRANCH
 834+ 802E A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 834+ 8032 BC 6B
 835+ 8034 24 69 8F 6A                  dw      SWAP, TWO, THEN
 835+ 8038 01 80
 836+ 803A 8F 6A                        dw      TWO
 837+ 803C 52 68                        dw      EXIT
 838+ 803E
 839+ 803E              //  ______________________________________________________________________
 840+ 803E              //
 841+ 803E              // begin        ( -- a 1 ) \ compile-time
 842+ 803E              // BEGIN ... AGAIN
 843+ 803E              // BEGIN ... f UNTIL
 844+ 803E              // BEGIN ... f WHILE ... REPEAT
 845+ 803E                              Colon_Def BEGIN, "BEGIN", is_immediate
 845+ 803E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 845+ 803E             >
 845+ 803E             >Dict_Ptr        defl    $
 845+ 803E             >
 845+ 803E             >//              ______________________________________________________________________
 845+ 803E             >//              Heap part
 845+ 803E             >
 845+ 803E             >
 845+ 803E             >                org     (Heap_Ptr & $1FFF) + $E000
 845+ EC18             >
 845+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ EC18             >Latest_Definition defl  Heap_Ptr
 845+ EC18             >
 845+ EC18             >                // dummy db directives used to calculate length of namec
 845+ EC18 42 45 47 49 >                db      "BEGIN"
 845+ EC1C 4E          >
 845+ EC1D             >len_NFA         defl    $ - temp_NFA
 845+ EC1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ EC18             >
 845+ EC18 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ EC19 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 845+ EC1D 4E          >
 845+ EC1E             >                org     $-1                 // alter last byte of Name just above to set
 845+ EC1D CE          >                db      {b $} | END_BIT     // msb as name end
 845+ EC1E             >
 845+ EC1E 0F 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 845+ EC20             >Prev_Ptr        defl    Heap_Ptr
 845+ EC20             >
 845+ EC20             >mirror_Ptr      defl    $
 845+ EC20             >
 845+ EC20 40 80       >                dw      Dict_Ptr + 2        // xt
 845+ EC22             >Heap_Ptr        defl    $ - $E000           // save current HP
 845+ EC22             >
 845+ EC22             >Current_HP      defl  $ - $E000             // used to set HP once!
 845+ EC22             >
 845+ EC22             >//              ______________________________________________________________________
 845+ EC22             >//              Dictionary part
 845+ EC22             >
 845+ EC22             >                org     Dict_Ptr
 845+ 803E             >
 845+ 803E 20 0C       >                dw      mirror_Ptr - $E000
 845+ 8040             >
 845+ 8040             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 8040 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 845+ 8043             >
 845+ 8043             >
 845+ 8043             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 8043             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 8043             >
 845+ 8043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 8043 F7 6D                        dw      QCOMP
 847+ 8045 A6 6B                        dw      HERE
 848+ 8047 8F 6A                        dw      TWO
 849+ 8049 52 68                        dw      EXIT
 850+ 804B
 851+ 804B              //  ______________________________________________________________________
 852+ 804B              //
 853+ 804B              // again        ( a 1 -- ) \ compile-time
 854+ 804B                              Colon_Def AGAIN, "AGAIN", is_immediate
 854+ 804B             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 854+ 804B             >
 854+ 804B             >Dict_Ptr        defl    $
 854+ 804B             >
 854+ 804B             >//              ______________________________________________________________________
 854+ 804B             >//              Heap part
 854+ 804B             >
 854+ 804B             >
 854+ 804B             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ EC22             >
 854+ EC22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ EC22             >Latest_Definition defl  Heap_Ptr
 854+ EC22             >
 854+ EC22             >                // dummy db directives used to calculate length of namec
 854+ EC22 41 47 41 49 >                db      "AGAIN"
 854+ EC26 4E          >
 854+ EC27             >len_NFA         defl    $ - temp_NFA
 854+ EC27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ EC22             >
 854+ EC22 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ EC23 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 854+ EC27 4E          >
 854+ EC28             >                org     $-1                 // alter last byte of Name just above to set
 854+ EC27 CE          >                db      {b $} | END_BIT     // msb as name end
 854+ EC28             >
 854+ EC28 18 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 854+ EC2A             >Prev_Ptr        defl    Heap_Ptr
 854+ EC2A             >
 854+ EC2A             >mirror_Ptr      defl    $
 854+ EC2A             >
 854+ EC2A 4D 80       >                dw      Dict_Ptr + 2        // xt
 854+ EC2C             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ EC2C             >
 854+ EC2C             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ EC2C             >
 854+ EC2C             >//              ______________________________________________________________________
 854+ EC2C             >//              Dictionary part
 854+ EC2C             >
 854+ EC2C             >                org     Dict_Ptr
 854+ 804B             >
 854+ 804B 2A 0C       >                dw      mirror_Ptr - $E000
 854+ 804D             >
 854+ 804D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 804D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 8050             >
 854+ 8050             >
 854+ 8050             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 8050             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 8050             >
 854+ 8050             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 8050 F7 6D                        dw      QCOMP
 856+ 8052 8F 6A 1B 6E                  dw      TWO, QPAIRS
 857+ 8056 52 6E E8 63                  dw      COMPILE, BRANCH
 858+ 805A E1 7F                        dw      BACK
 859+ 805C 52 68                        dw      EXIT
 860+ 805E
 861+ 805E              //  ______________________________________________________________________
 862+ 805E              //
 863+ 805E              // until        ( a 1 -- ) \ compile-time
 864+ 805E                              Colon_Def UNTIL, "UNTIL", is_immediate
 864+ 805E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 864+ 805E             >
 864+ 805E             >Dict_Ptr        defl    $
 864+ 805E             >
 864+ 805E             >//              ______________________________________________________________________
 864+ 805E             >//              Heap part
 864+ 805E             >
 864+ 805E             >
 864+ 805E             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ EC2C             >
 864+ EC2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ EC2C             >Latest_Definition defl  Heap_Ptr
 864+ EC2C             >
 864+ EC2C             >                // dummy db directives used to calculate length of namec
 864+ EC2C 55 4E 54 49 >                db      "UNTIL"
 864+ EC30 4C          >
 864+ EC31             >len_NFA         defl    $ - temp_NFA
 864+ EC31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ EC2C             >
 864+ EC2C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ EC2D 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 864+ EC31 4C          >
 864+ EC32             >                org     $-1                 // alter last byte of Name just above to set
 864+ EC31 CC          >                db      {b $} | END_BIT     // msb as name end
 864+ EC32             >
 864+ EC32 22 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 864+ EC34             >Prev_Ptr        defl    Heap_Ptr
 864+ EC34             >
 864+ EC34             >mirror_Ptr      defl    $
 864+ EC34             >
 864+ EC34 60 80       >                dw      Dict_Ptr + 2        // xt
 864+ EC36             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ EC36             >
 864+ EC36             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ EC36             >
 864+ EC36             >//              ______________________________________________________________________
 864+ EC36             >//              Dictionary part
 864+ EC36             >
 864+ EC36             >                org     Dict_Ptr
 864+ 805E             >
 864+ 805E 34 0C       >                dw      mirror_Ptr - $E000
 864+ 8060             >
 864+ 8060             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 8060 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 8063             >
 864+ 8063             >
 864+ 8063             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 8063             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 8063             >
 864+ 8063             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 8063 F7 6D                        dw      QCOMP
 866+ 8065 8F 6A 1B 6E                  dw      TWO, QPAIRS
 867+ 8069 52 6E F5 63                  dw      COMPILE, ZBRANCH
 868+ 806D E1 7F                        dw      BACK
 869+ 806F 52 68                        dw      EXIT
 870+ 8071
 871+ 8071              //  ______________________________________________________________________
 872+ 8071              //
 873+ 8071              // end          ( a 1 -- ) \ compile-time
 874+ 8071                              Colon_Def END, "END", is_immediate
 874+ 8071             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 874+ 8071             >
 874+ 8071             >Dict_Ptr        defl    $
 874+ 8071             >
 874+ 8071             >//              ______________________________________________________________________
 874+ 8071             >//              Heap part
 874+ 8071             >
 874+ 8071             >
 874+ 8071             >                org     (Heap_Ptr & $1FFF) + $E000
 874+ EC36             >
 874+ EC36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ EC36             >Latest_Definition defl  Heap_Ptr
 874+ EC36             >
 874+ EC36             >                // dummy db directives used to calculate length of namec
 874+ EC36 45 4E 44    >                db      "END"
 874+ EC39             >len_NFA         defl    $ - temp_NFA
 874+ EC39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ EC36             >
 874+ EC36 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ EC37 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 874+ EC3A             >                org     $-1                 // alter last byte of Name just above to set
 874+ EC39 C4          >                db      {b $} | END_BIT     // msb as name end
 874+ EC3A             >
 874+ EC3A 2C 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 874+ EC3C             >Prev_Ptr        defl    Heap_Ptr
 874+ EC3C             >
 874+ EC3C             >mirror_Ptr      defl    $
 874+ EC3C             >
 874+ EC3C 73 80       >                dw      Dict_Ptr + 2        // xt
 874+ EC3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 874+ EC3E             >
 874+ EC3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 874+ EC3E             >
 874+ EC3E             >//              ______________________________________________________________________
 874+ EC3E             >//              Dictionary part
 874+ EC3E             >
 874+ EC3E             >                org     Dict_Ptr
 874+ 8071             >
 874+ 8071 3C 0C       >                dw      mirror_Ptr - $E000
 874+ 8073             >
 874+ 8073             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 8073 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 8076             >
 874+ 8076             >
 874+ 8076             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 8076             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 8076             >
 874+ 8076             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 8076 60 80                        dw      UNTIL
 876+ 8078 52 68                        dw      EXIT
 877+ 807A
 878+ 807A              //  ______________________________________________________________________
 879+ 807A              //
 880+ 807A              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 881+ 807A                              Colon_Def WHILE, "WHILE", is_immediate
 881+ 807A             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 881+ 807A             >
 881+ 807A             >Dict_Ptr        defl    $
 881+ 807A             >
 881+ 807A             >//              ______________________________________________________________________
 881+ 807A             >//              Heap part
 881+ 807A             >
 881+ 807A             >
 881+ 807A             >                org     (Heap_Ptr & $1FFF) + $E000
 881+ EC3E             >
 881+ EC3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ EC3E             >Latest_Definition defl  Heap_Ptr
 881+ EC3E             >
 881+ EC3E             >                // dummy db directives used to calculate length of namec
 881+ EC3E 57 48 49 4C >                db      "WHILE"
 881+ EC42 45          >
 881+ EC43             >len_NFA         defl    $ - temp_NFA
 881+ EC43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ EC3E             >
 881+ EC3E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ EC3F 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 881+ EC43 45          >
 881+ EC44             >                org     $-1                 // alter last byte of Name just above to set
 881+ EC43 C5          >                db      {b $} | END_BIT     // msb as name end
 881+ EC44             >
 881+ EC44 36 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 881+ EC46             >Prev_Ptr        defl    Heap_Ptr
 881+ EC46             >
 881+ EC46             >mirror_Ptr      defl    $
 881+ EC46             >
 881+ EC46 7C 80       >                dw      Dict_Ptr + 2        // xt
 881+ EC48             >Heap_Ptr        defl    $ - $E000           // save current HP
 881+ EC48             >
 881+ EC48             >Current_HP      defl  $ - $E000             // used to set HP once!
 881+ EC48             >
 881+ EC48             >//              ______________________________________________________________________
 881+ EC48             >//              Dictionary part
 881+ EC48             >
 881+ EC48             >                org     Dict_Ptr
 881+ 807A             >
 881+ 807A 46 0C       >                dw      mirror_Ptr - $E000
 881+ 807C             >
 881+ 807C             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 807C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 807F             >
 881+ 807F             >
 881+ 807F             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 807F             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 807F             >
 881+ 807F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 807F EE 7F                        dw      IF
 883+ 8081              //              dw      TWO_PLUS // ( that is 4 )
 884+ 8081 5A 69                        dw      TWO_SWAP
 885+ 8083 52 68                        dw      EXIT
 886+ 8085
 887+ 8085              //  ______________________________________________________________________
 888+ 8085              //
 889+ 8085              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 890+ 8085                              Colon_Def REPEAT, "REPEAT", is_immediate
 890+ 8085             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 890+ 8085             >
 890+ 8085             >Dict_Ptr        defl    $
 890+ 8085             >
 890+ 8085             >//              ______________________________________________________________________
 890+ 8085             >//              Heap part
 890+ 8085             >
 890+ 8085             >
 890+ 8085             >                org     (Heap_Ptr & $1FFF) + $E000
 890+ EC48             >
 890+ EC48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ EC48             >Latest_Definition defl  Heap_Ptr
 890+ EC48             >
 890+ EC48             >                // dummy db directives used to calculate length of namec
 890+ EC48 52 45 50 45 >                db      "REPEAT"
 890+ EC4C 41 54       >
 890+ EC4E             >len_NFA         defl    $ - temp_NFA
 890+ EC4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ EC48             >
 890+ EC48 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ EC49 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 890+ EC4D 41 54       >
 890+ EC4F             >                org     $-1                 // alter last byte of Name just above to set
 890+ EC4E D4          >                db      {b $} | END_BIT     // msb as name end
 890+ EC4F             >
 890+ EC4F 3E 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 890+ EC51             >Prev_Ptr        defl    Heap_Ptr
 890+ EC51             >
 890+ EC51             >mirror_Ptr      defl    $
 890+ EC51             >
 890+ EC51 87 80       >                dw      Dict_Ptr + 2        // xt
 890+ EC53             >Heap_Ptr        defl    $ - $E000           // save current HP
 890+ EC53             >
 890+ EC53             >Current_HP      defl  $ - $E000             // used to set HP once!
 890+ EC53             >
 890+ EC53             >//              ______________________________________________________________________
 890+ EC53             >//              Dictionary part
 890+ EC53             >
 890+ EC53             >                org     Dict_Ptr
 890+ 8085             >
 890+ 8085 51 0C       >                dw      mirror_Ptr - $E000
 890+ 8087             >
 890+ 8087             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 8087 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 808A             >
 890+ 808A             >
 890+ 808A             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 808A             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 808A             >
 890+ 808A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 808A 4D 80                        dw      AGAIN
 892+ 808C              //              dw      TWO_MINUS
 893+ 808C 01 80                        dw      THEN
 894+ 808E 52 68                        dw      EXIT
 895+ 8090
 896+ 8090              //  ______________________________________________________________________
 897+ 8090              //
 898+ 8090              // ?do-
 899+ 8090              // special version of "BACK" used by ?DO and LOOP
 900+ 8090                              Colon_Def C_DO_BACK, "?DO-", is_normal
 900+ 8090             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 900+ 8090             >
 900+ 8090             >Dict_Ptr        defl    $
 900+ 8090             >
 900+ 8090             >//              ______________________________________________________________________
 900+ 8090             >//              Heap part
 900+ 8090             >
 900+ 8090             >
 900+ 8090             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ EC53             >
 900+ EC53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ EC53             >Latest_Definition defl  Heap_Ptr
 900+ EC53             >
 900+ EC53             >                // dummy db directives used to calculate length of namec
 900+ EC53 3F 44 4F 2D >                db      "?DO-"
 900+ EC57             >len_NFA         defl    $ - temp_NFA
 900+ EC57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ EC53             >
 900+ EC53 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ EC54 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 900+ EC58             >                org     $-1                 // alter last byte of Name just above to set
 900+ EC57 AD          >                db      {b $} | END_BIT     // msb as name end
 900+ EC58             >
 900+ EC58 48 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 900+ EC5A             >Prev_Ptr        defl    Heap_Ptr
 900+ EC5A             >
 900+ EC5A             >mirror_Ptr      defl    $
 900+ EC5A             >
 900+ EC5A 92 80       >                dw      Dict_Ptr + 2        // xt
 900+ EC5C             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ EC5C             >
 900+ EC5C             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ EC5C             >
 900+ EC5C             >//              ______________________________________________________________________
 900+ EC5C             >//              Dictionary part
 900+ EC5C             >
 900+ EC5C             >                org     Dict_Ptr
 900+ 8090             >
 900+ 8090 5A 0C       >                dw      mirror_Ptr - $E000
 900+ 8092             >
 900+ 8092             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 8092 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 900+ 8095             >
 900+ 8095             >
 900+ 8095             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 8095             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 8095             >
 900+ 8095             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 8095 E1 7F                        dw      BACK
 902+ 8097              CDoBack_Begin:
 903+ 8097 39 68 64 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 903+ 809B 89 69 E5 6B
 904+ 809F F5 63                        dw      ZBRANCH
 905+ 80A1 0A 00                        dw      CDoBack_While - $
 906+ 80A3 CC 68 01 80                  dw          TWO_PLUS, THEN
 907+ 80A7 E8 63                        dw      BRANCH
 908+ 80A9 EE FF                        dw      CDoBack_Begin - $
 909+ 80AB              CDoBack_While:
 910+ 80AB 2A 6E 64 6B                  dw      QCSP, CSP, STORE
 910+ 80AF 93 69
 911+ 80B1 52 68                        dw      EXIT
 912+ 80B3
 913+ 80B3              //  ______________________________________________________________________
 914+ 80B3              //
 915+ 80B3              // do
 916+ 80B3              // DO  ... LOOP
 917+ 80B3              // DO  ... n +LOOP
 918+ 80B3              // ?DO ... LOOP
 919+ 80B3              // ?DO ... n +LOOP
 920+ 80B3                              Colon_Def DO, "DO", is_immediate
 920+ 80B3             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 920+ 80B3             >
 920+ 80B3             >Dict_Ptr        defl    $
 920+ 80B3             >
 920+ 80B3             >//              ______________________________________________________________________
 920+ 80B3             >//              Heap part
 920+ 80B3             >
 920+ 80B3             >
 920+ 80B3             >                org     (Heap_Ptr & $1FFF) + $E000
 920+ EC5C             >
 920+ EC5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ EC5C             >Latest_Definition defl  Heap_Ptr
 920+ EC5C             >
 920+ EC5C             >                // dummy db directives used to calculate length of namec
 920+ EC5C 44 4F       >                db      "DO"
 920+ EC5E             >len_NFA         defl    $ - temp_NFA
 920+ EC5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ EC5C             >
 920+ EC5C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ EC5D 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 920+ EC5F             >                org     $-1                 // alter last byte of Name just above to set
 920+ EC5E CF          >                db      {b $} | END_BIT     // msb as name end
 920+ EC5F             >
 920+ EC5F 53 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 920+ EC61             >Prev_Ptr        defl    Heap_Ptr
 920+ EC61             >
 920+ EC61             >mirror_Ptr      defl    $
 920+ EC61             >
 920+ EC61 B5 80       >                dw      Dict_Ptr + 2        // xt
 920+ EC63             >Heap_Ptr        defl    $ - $E000           // save current HP
 920+ EC63             >
 920+ EC63             >Current_HP      defl  $ - $E000             // used to set HP once!
 920+ EC63             >
 920+ EC63             >//              ______________________________________________________________________
 920+ EC63             >//              Dictionary part
 920+ EC63             >
 920+ EC63             >                org     Dict_Ptr
 920+ 80B3             >
 920+ 80B3 61 0C       >                dw      mirror_Ptr - $E000
 920+ 80B5             >
 920+ 80B5             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 80B5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 80B8             >
 920+ 80B8             >
 920+ 80B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 80B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 80B8             >
 920+ 80B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 80B8 52 6E 34 64                  dw      COMPILE, C_DO
 922+ 80BC 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 922+ 80C0 D5 6D
 923+ 80C2 A6 6B 96 6A                  dw      HERE, THREE
 924+ 80C6 52 68                        dw      EXIT
 925+ 80C8
 926+ 80C8              //  ______________________________________________________________________
 927+ 80C8              //
 928+ 80C8              // loop
 929+ 80C8                              Colon_Def LOOP, "LOOP", is_immediate
 929+ 80C8             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 929+ 80C8             >
 929+ 80C8             >Dict_Ptr        defl    $
 929+ 80C8             >
 929+ 80C8             >//              ______________________________________________________________________
 929+ 80C8             >//              Heap part
 929+ 80C8             >
 929+ 80C8             >
 929+ 80C8             >                org     (Heap_Ptr & $1FFF) + $E000
 929+ EC63             >
 929+ EC63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ EC63             >Latest_Definition defl  Heap_Ptr
 929+ EC63             >
 929+ EC63             >                // dummy db directives used to calculate length of namec
 929+ EC63 4C 4F 4F 50 >                db      "LOOP"
 929+ EC67             >len_NFA         defl    $ - temp_NFA
 929+ EC67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ EC63             >
 929+ EC63 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ EC64 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 929+ EC68             >                org     $-1                 // alter last byte of Name just above to set
 929+ EC67 D0          >                db      {b $} | END_BIT     // msb as name end
 929+ EC68             >
 929+ EC68 5C 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 929+ EC6A             >Prev_Ptr        defl    Heap_Ptr
 929+ EC6A             >
 929+ EC6A             >mirror_Ptr      defl    $
 929+ EC6A             >
 929+ EC6A CA 80       >                dw      Dict_Ptr + 2        // xt
 929+ EC6C             >Heap_Ptr        defl    $ - $E000           // save current HP
 929+ EC6C             >
 929+ EC6C             >Current_HP      defl  $ - $E000             // used to set HP once!
 929+ EC6C             >
 929+ EC6C             >//              ______________________________________________________________________
 929+ EC6C             >//              Dictionary part
 929+ EC6C             >
 929+ EC6C             >                org     Dict_Ptr
 929+ 80C8             >
 929+ 80C8 6A 0C       >                dw      mirror_Ptr - $E000
 929+ 80CA             >
 929+ 80CA             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 80CA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 80CD             >
 929+ 80CD             >
 929+ 80CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 80CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 80CD             >
 929+ 80CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 80CD 96 6A 1B 6E                  dw      THREE, QPAIRS
 931+ 80D1 52 6E E0 63                  dw      COMPILE, C_LOOP
 932+ 80D5 92 80                        dw      C_DO_BACK
 933+ 80D7 52 68                        dw      EXIT
 934+ 80D9
 935+ 80D9              //  ______________________________________________________________________
 936+ 80D9              //
 937+ 80D9              // +loop
 938+ 80D9                              Colon_Def PLOOP, "+LOOP", is_immediate
 938+ 80D9             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 938+ 80D9             >
 938+ 80D9             >Dict_Ptr        defl    $
 938+ 80D9             >
 938+ 80D9             >//              ______________________________________________________________________
 938+ 80D9             >//              Heap part
 938+ 80D9             >
 938+ 80D9             >
 938+ 80D9             >                org     (Heap_Ptr & $1FFF) + $E000
 938+ EC6C             >
 938+ EC6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 938+ EC6C             >Latest_Definition defl  Heap_Ptr
 938+ EC6C             >
 938+ EC6C             >                // dummy db directives used to calculate length of namec
 938+ EC6C 2B 4C 4F 4F >                db      "+LOOP"
 938+ EC70 50          >
 938+ EC71             >len_NFA         defl    $ - temp_NFA
 938+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 938+ EC6C             >
 938+ EC6C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 938+ EC6D 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 938+ EC71 50          >
 938+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 938+ EC71 D0          >                db      {b $} | END_BIT     // msb as name end
 938+ EC72             >
 938+ EC72 63 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 938+ EC74             >Prev_Ptr        defl    Heap_Ptr
 938+ EC74             >
 938+ EC74             >mirror_Ptr      defl    $
 938+ EC74             >
 938+ EC74 DB 80       >                dw      Dict_Ptr + 2        // xt
 938+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 938+ EC76             >
 938+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 938+ EC76             >
 938+ EC76             >//              ______________________________________________________________________
 938+ EC76             >//              Dictionary part
 938+ EC76             >
 938+ EC76             >                org     Dict_Ptr
 938+ 80D9             >
 938+ 80D9 74 0C       >                dw      mirror_Ptr - $E000
 938+ 80DB             >
 938+ 80DB             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 938+ 80DB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 938+ 80DE             >
 938+ 80DE             >
 938+ 80DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 938+ 80DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 938+ 80DE             >
 938+ 80DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 939+ 80DE 96 6A 1B 6E                  dw      THREE, QPAIRS
 940+ 80E2 52 6E B1 63                  dw      COMPILE, C_PLOOP
 941+ 80E6 92 80                        dw      C_DO_BACK
 942+ 80E8 52 68                        dw      EXIT
 943+ 80EA
 944+ 80EA              //  ______________________________________________________________________
 945+ 80EA              //
 946+ 80EA              // ?do
 947+ 80EA                              Colon_Def QDO, "?DO", is_immediate
 947+ 80EA             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 947+ 80EA             >
 947+ 80EA             >Dict_Ptr        defl    $
 947+ 80EA             >
 947+ 80EA             >//              ______________________________________________________________________
 947+ 80EA             >//              Heap part
 947+ 80EA             >
 947+ 80EA             >
 947+ 80EA             >                org     (Heap_Ptr & $1FFF) + $E000
 947+ EC76             >
 947+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ EC76             >Latest_Definition defl  Heap_Ptr
 947+ EC76             >
 947+ EC76             >                // dummy db directives used to calculate length of namec
 947+ EC76 3F 44 4F    >                db      "?DO"
 947+ EC79             >len_NFA         defl    $ - temp_NFA
 947+ EC79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ EC76             >
 947+ EC76 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ EC77 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 947+ EC7A             >                org     $-1                 // alter last byte of Name just above to set
 947+ EC79 CF          >                db      {b $} | END_BIT     // msb as name end
 947+ EC7A             >
 947+ EC7A 6C 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 947+ EC7C             >Prev_Ptr        defl    Heap_Ptr
 947+ EC7C             >
 947+ EC7C             >mirror_Ptr      defl    $
 947+ EC7C             >
 947+ EC7C EC 80       >                dw      Dict_Ptr + 2        // xt
 947+ EC7E             >Heap_Ptr        defl    $ - $E000           // save current HP
 947+ EC7E             >
 947+ EC7E             >Current_HP      defl  $ - $E000             // used to set HP once!
 947+ EC7E             >
 947+ EC7E             >//              ______________________________________________________________________
 947+ EC7E             >//              Dictionary part
 947+ EC7E             >
 947+ EC7E             >                org     Dict_Ptr
 947+ 80EA             >
 947+ 80EA 7C 0C       >                dw      mirror_Ptr - $E000
 947+ 80EC             >
 947+ 80EC             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 80EC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 80EF             >
 947+ 80EF             >
 947+ 80EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 80EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 80EF             >
 947+ 80EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 80EF 52 6E 0C 64                  dw      COMPILE, C_Q_DO
 949+ 80F3 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 949+ 80F7 D5 6D
 950+ 80F9 A6 6B 81 6A                  dw      HERE, ZERO, COMMA, ZERO
 950+ 80FD BC 6B 81 6A
 951+ 8101 A6 6B 96 6A                  dw      HERE, THREE
 952+ 8105 52 68                        dw      EXIT
 953+ 8107
 954+ 8107              //  ______________________________________________________________________
 955+ 8107              //
 956+ 8107              // \
 957+ 8107                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 957+ 8107             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 957+ 8107             >
 957+ 8107             >Dict_Ptr        defl    $
 957+ 8107             >
 957+ 8107             >//              ______________________________________________________________________
 957+ 8107             >//              Heap part
 957+ 8107             >
 957+ 8107             >
 957+ 8107             >                org     (Heap_Ptr & $1FFF) + $E000
 957+ EC7E             >
 957+ EC7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ EC7E             >Latest_Definition defl  Heap_Ptr
 957+ EC7E             >
 957+ EC7E             >                // dummy db directives used to calculate length of namec
 957+ EC7E 5C          >                db      "\\"
 957+ EC7F             >len_NFA         defl    $ - temp_NFA
 957+ EC7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ EC7E             >
 957+ EC7E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ EC7F 5C          >                db      "\\"               // name string in 7-bit ascii, but
 957+ EC80             >                org     $-1                 // alter last byte of Name just above to set
 957+ EC7F DC          >                db      {b $} | END_BIT     // msb as name end
 957+ EC80             >
 957+ EC80 76 0C       >                dw      Prev_Ptr            // Link to previous definition Name
 957+ EC82             >Prev_Ptr        defl    Heap_Ptr
 957+ EC82             >
 957+ EC82             >mirror_Ptr      defl    $
 957+ EC82             >
 957+ EC82 09 81       >                dw      Dict_Ptr + 2        // xt
 957+ EC84             >Heap_Ptr        defl    $ - $E000           // save current HP
 957+ EC84             >
 957+ EC84             >Current_HP      defl  $ - $E000             // used to set HP once!
 957+ EC84             >
 957+ EC84             >//              ______________________________________________________________________
 957+ EC84             >//              Dictionary part
 957+ EC84             >
 957+ EC84             >                org     Dict_Ptr
 957+ 8107             >
 957+ 8107 82 0C       >                dw      mirror_Ptr - $E000
 957+ 8109             >
 957+ 8109             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 8109 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 810C             >
 957+ 810C             >
 957+ 810C             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 810C             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 810C             >
 957+ 810C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 810C 22 6B 89 69                  dw      BLK, FETCH
 959+ 8110 F5 63                        dw      ZBRANCH
 960+ 8112 30 00                        dw      Backslash_Else_1 - $
 961+ 8114 22 6B 89 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 961+ 8118 88 6A 1F 6C
 962+ 811C F5 63                        dw          ZBRANCH
 963+ 811E 18 00                        dw          Backslash_Else_2 - $
 964+ 8120 28 6B 89 69                  dw              TO_IN, FETCH, CL, MOD, CL
 964+ 8124 AB 6A CC 76
 964+ 8128 AB 6A
 965+ 812A 24 69 E5 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 965+ 812E 28 6B 71 69
 966+ 8132 E8 63                        dw          BRANCH
 967+ 8134 0A 00                        dw          Backslash_Endif_2 - $
 968+ 8136              Backslash_Else_2:
 969+ 8136 B2 6A D9 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 969+ 813A 28 6B 93 69
 970+ 813E              Backslash_Endif_2:
 971+ 813E E8 63                        dw      BRANCH
 972+ 8140 10 00                        dw      Backslash_Endif_1 - $
 973+ 8142              Backslash_Else_1:
 974+ 8142 81 6A E6 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 974+ 8146 89 69 28 6B
 974+ 814A 89 69 A5 68
 974+ 814E 93 69
 975+ 8150              Backslash_Endif_1:
 976+ 8150 52 68                        dw      EXIT
 977+ 8152
 978+ 8152              Fence_Word:
 979+ 8152              //  ______________________________________________________________________
 980+ 8152              //
 981+ 8152
 982+ 8152 00           Here_Dictionary db      0
 983+ 8153
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 116  8153
 117  8153              // now we save the compiled file so we can either run it or debug it
 118  8153                              SAVENEX OPEN "output/main.nex", ORIGIN
 119  8153                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 120  8153                              SAVENEX CFG  0
 121  8153                              SAVENEX BANK 2, 0
 122  8153                              SAVENEX AUTO
 123  8153                              SAVENEX CLOSE
 124  8153
 125  8153              //              PAGE 7 ;set 7 page to current slot
 126  8153              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 127  8153              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 128  8153
 129  8153                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 130  8153                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 131  8153
 132  8153                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 133  8153                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 134  8153
 135  8153                              // To load on ZX Spectrum Next you have to type
 136  8153                              //      LOAD "ram7.bin" BANK 16
 137  8153                              //      LOAD "forth17d.bin" CODE
 138  8153
 139  8153                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
