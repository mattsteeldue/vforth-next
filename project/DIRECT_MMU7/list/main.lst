# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20231112
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  70  0000 ~            Heap_offset     defl    $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366
 103+ 6366              Behave          macro   xp
 104+ 6366 ~            temp_PTR        defl    $                   // save this org
 105+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 106+ 6366 ~                            dw      xp
 107+ 6366 ~                            org     temp_PTR
 108+ 6366                              endm
 109+ 6366
 110+ 6366              //  ______________________________________________________________________
 111+ 6366              //
 112+ 6366              //  Create a new "low-level" definition
 113+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 114+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 115+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 116+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 117+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 118+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 119+ 6366              //  This macro acts much like the standard Forth definition CREATE
 120+ 6366
 121+ 6366              New_Def         macro   label, namec, runcode, bits
 122+ 6366 ~
 123+ 6366 ~            Dict_Ptr        defl    $
 124+ 6366 ~
 125+ 6366 ~            //              ______________________________________________________________________
 126+ 6366 ~            //              Heap part
 127+ 6366 ~
 128+ 6366 ~
 129+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 130+ 6366 ~
 131+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6366 ~            Latest_Definition defl  Heap_Ptr
 133+ 6366 ~
 134+ 6366 ~                            // dummy db directives used to calculate length of namec
 135+ 6366 ~                            db      namec
 136+ 6366 ~            len_NFA         defl    $ - temp_NFA
 137+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 6366 ~
 139+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 141+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 142+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 143+ 6366 ~
 144+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 145+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 146+ 6366 ~
 147+ 6366 ~            mirror_Ptr      defl    $
 148+ 6366 ~
 149+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 150+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 151+ 6366 ~
 152+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 153+ 6366 ~
 154+ 6366 ~            //              ______________________________________________________________________
 155+ 6366 ~            //              Dictionary part
 156+ 6366 ~
 157+ 6366 ~                            org     Dict_Ptr
 158+ 6366 ~
 159+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6366 ~
 161+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 163+ 6366 ~
 164+ 6366 ~
 165+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6366 ~
 168+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6366                              endm
 170+ 6366
 171+ 6366              //  ______________________________________________________________________
 172+ 6366              //
 173+ 6366              // Create a "constant"
 174+ 6366              // The constant value is compiled in first PFA cell
 175+ 6366              Constant_Def    macro   label, namec, constant_value
 176+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 177+ 6366 ~                            dw      constant_value
 178+ 6366                              endm
 179+ 6366
 180+ 6366              //  ______________________________________________________________________
 181+ 6366              //
 182+ 6366              // Create a "variable"
 183+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 184+ 6366              // this allow creation of "variables" which content is  of any length
 185+ 6366              Variable_Def    macro   label, namec, initial_value
 186+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 187+ 6366 ~                            dw      initial_value // ?
 188+ 6366                              endm
 189+ 6366
 190+ 6366              //  ______________________________________________________________________
 191+ 6366              //
 192+ 6366              // Create a "user"
 193+ 6366              // It uses a single byte as offset to calculate the address of the variable
 194+ 6366              User_Def        macro   label, namec, offset_value
 195+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 196+ 6366 ~                            db      offset_value
 197+ 6366                              endm
 198+ 6366
 199+ 6366              //  ______________________________________________________________________
 200+ 6366              //
 201+ 6366              // Create a "colon-definition"
 202+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 203+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 204+ 6366              Colon_Def       macro   label, namec, bits
 205+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 206+ 6366                              endm
 207+ 6366
 208+ 6366              //  ______________________________________________________________________
 209+ 6366              //
 210+ 6366              // Create a "heap-string"
 211+ 6366              Start_Heap      macro
 212+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 213+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 214+ 6366 ~
 215+ 6366                              endm
 216+ 6366
 217+ 6366              End_Heap        macro
 218+ 6366 ~            Heap_Ptr        defl    $ - $E000
 219+ 6366 ~                            org     temp_ORG
 220+ 6366 ~
 221+ 6366                              endm
 222+ 6366
 223+ 6366
 224+ 6366              //  ______________________________________________________________________
 225+ 6366              //
 226+ 6366
 227+ 6366
 228+ 6366
 229+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 230+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 231+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 232+ 6366              USER_system:    equ     $D188               // User variables zone.
 233+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 234+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 235+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 43 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 43 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 1B 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 99 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 99 81        DP_origin       dw      Fence_Word
  38+ 6386 5A 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 21 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 71                           db      113
  65+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  65+ E007 6F 72 74 68
  65+ E00B 20 31 2E 37
  65+ E00F 20 2D 20 4E
  65+ E013 65 78 74 5A
  65+ E017 58 4F 53 20
  65+ E01B 76 65 72 73
  65+ E01F 69 6F 6E 20
  65+ E023 0D
  66+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-11-12 ", $0D  // 37
  66+ E028 70 20 56 6F
  66+ E02C 63 61 62 75
  66+ E030 6C 61 72 79
  66+ E034 20 2D 20 62
  66+ E038 75 69 6C 64
  66+ E03C 20 32 30 32
  66+ E040 33 2D 31 31
  66+ E044 2D 31 32 20
  66+ E048 0D
  67+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  67+ E04D 20 4C 69 63
  67+ E051 65 6E 73 65
  67+ E055 20 7F
  68+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D            // 27
  68+ E05B 30 2D 32 30
  68+ E05F 32 33 20 4D
  68+ E063 61 74 74 65
  68+ E067 6F 20 56 69
  68+ E06B 74 74 75 72
  68+ E06F 69 20 0D
  69+ E072 07 00                        db      7,0
  70+ E074                              End_Heap
  70+ E074             >Heap_Ptr        defl    $ - $E000
  70+ E074             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E074             >
 124+ E074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E074             >Latest_Definition defl  Heap_Ptr
 124+ E074             >
 124+ E074             >                // dummy db directives used to calculate length of namec
 124+ E074 4C 49 54    >                db      "LIT"
 124+ E077             >len_NFA         defl    $ - temp_NFA
 124+ E077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E074             >
 124+ E074 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E075 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E078             >                org     $-1                 // alter last byte of Name just above to set
 124+ E077 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E078             >
 124+ E078 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E07A             >Prev_Ptr        defl    Heap_Ptr
 124+ E07A             >
 124+ E07A             >mirror_Ptr      defl    $
 124+ E07A             >
 124+ E07A A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07C             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07C             >
 124+ E07C             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07C             >
 124+ E07C             >//              ______________________________________________________________________
 124+ E07C             >//              Dictionary part
 124+ E07C             >
 124+ E07C             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 7A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07C             >
 140+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07C             >Latest_Definition defl  Heap_Ptr
 140+ E07C             >
 140+ E07C             >                // dummy db directives used to calculate length of namec
 140+ E07C 45 58 45 43 >                db      "EXECUTE"
 140+ E080 55 54 45    >
 140+ E083             >len_NFA         defl    $ - temp_NFA
 140+ E083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07C             >
 140+ E07C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07D 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E081 55 54 45    >
 140+ E084             >                org     $-1                 // alter last byte of Name just above to set
 140+ E083 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E084             >
 140+ E084 74 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E086             >Prev_Ptr        defl    Heap_Ptr
 140+ E086             >
 140+ E086             >mirror_Ptr      defl    $
 140+ E086             >
 140+ E086 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E088             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E088             >
 140+ E088             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E088             >
 140+ E088             >//              ______________________________________________________________________
 140+ E088             >//              Dictionary part
 140+ E088             >
 140+ E088             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 86 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E088             >
 160+ E088             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E088             >Latest_Definition defl  Heap_Ptr
 160+ E088             >
 160+ E088             >                // dummy db directives used to calculate length of namec
 160+ E088 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08C 4F 50 29    >
 160+ E08F             >len_NFA         defl    $ - temp_NFA
 160+ E08F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E088             >
 160+ E088 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E089 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08D 4F 50 29    >
 160+ E090             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08F A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E090             >
 160+ E090 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E092             >Prev_Ptr        defl    Heap_Ptr
 160+ E092             >
 160+ E092             >mirror_Ptr      defl    $
 160+ E092             >
 160+ E092 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E094             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E094             >
 160+ E094             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E094             >
 160+ E094             >//              ______________________________________________________________________
 160+ E094             >//              Dictionary part
 160+ E094             >
 160+ E094             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 92 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 E1                           pop     hl                  // get increment
 164+ 63B2 EB                           ex      de, hl
 165+ 63B3                              // *** ldhlrp
 166+ 63B3 C5                           push    bc                  // Save IP
 167+ 63B4 42                           ld      b, d                // bc is increment
 168+ 63B5 4B                           ld      c, e
 169+ 63B6 E5                           push    hl
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 04                        jr      c, Loop_Endif
 196+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 63D2 C1                               pop     bc                  // Retrieve IP
 198+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 63D5              Loop_Endif:
 200+ 63D5 C1                           pop     bc                  // discard original RP
 201+ 63D6 EB                           ex      de, hl
 202+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 63D8 EB                           ex      de, hl
 205+ 63D9 C1                           pop     bc                  // Retrieve IP
 206+ 63DA 03                           inc     bc                  // skip branch-style offset
 207+ 63DB 03                           inc     bc
 208+ 63DC                              next
 208+ 63DC DD E9       >                jp      (ix)
 209+ 63DE
 210+ 63DE              //  ______________________________________________________________________
 211+ 63DE              //
 212+ 63DE              // (loop)       n --
 213+ 63DE              // same as (LOOP) but index is incremented by 1
 214+ 63DE              // compiled by LOOP.
 215+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 63DE             >
 215+ 63DE             >Dict_Ptr        defl    $
 215+ 63DE             >
 215+ 63DE             >//              ______________________________________________________________________
 215+ 63DE             >//              Heap part
 215+ 63DE             >
 215+ 63DE             >
 215+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E094             >
 215+ E094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E094             >Latest_Definition defl  Heap_Ptr
 215+ E094             >
 215+ E094             >                // dummy db directives used to calculate length of namec
 215+ E094 28 4C 4F 4F >                db      "(LOOP)"
 215+ E098 50 29       >
 215+ E09A             >len_NFA         defl    $ - temp_NFA
 215+ E09A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E094             >
 215+ E094 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E095 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E099 50 29       >
 215+ E09B             >                org     $-1                 // alter last byte of Name just above to set
 215+ E09A A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E09B             >
 215+ E09B 88 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09D             >Prev_Ptr        defl    Heap_Ptr
 215+ E09D             >
 215+ E09D             >mirror_Ptr      defl    $
 215+ E09D             >
 215+ E09D E0 63       >                dw      Dict_Ptr + 2        // xt
 215+ E09F             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09F             >
 215+ E09F             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09F             >
 215+ E09F             >//              ______________________________________________________________________
 215+ E09F             >//              Dictionary part
 215+ E09F             >
 215+ E09F             >                org     Dict_Ptr
 215+ 63DE             >
 215+ 63DE 9D 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 63E0             >
 215+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 63E0 ~           >
 215+ 63E0 ~           >
 215+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 63E0             >
 215+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 63E0 ED 8A 00 01                  push    1
 217+ 63E4 18 CB                        jr      Loop_Ptr
 218+ 63E6
 219+ 63E6              //  ______________________________________________________________________
 220+ 63E6              //
 221+ 63E6              // branch       --
 222+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 224+ 63E6
 225+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 63E6             >
 225+ 63E6             >Dict_Ptr        defl    $
 225+ 63E6             >
 225+ 63E6             >//              ______________________________________________________________________
 225+ 63E6             >//              Heap part
 225+ 63E6             >
 225+ 63E6             >
 225+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09F             >
 225+ E09F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09F             >Latest_Definition defl  Heap_Ptr
 225+ E09F             >
 225+ E09F             >                // dummy db directives used to calculate length of namec
 225+ E09F 42 52 41 4E >                db      "BRANCH"
 225+ E0A3 43 48       >
 225+ E0A5             >len_NFA         defl    $ - temp_NFA
 225+ E0A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09F             >
 225+ E09F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E0A0 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A4 43 48       >
 225+ E0A6             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A5 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A6             >
 225+ E0A6 94 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A8             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A8             >
 225+ E0A8             >mirror_Ptr      defl    $
 225+ E0A8             >
 225+ E0A8 E8 63       >                dw      Dict_Ptr + 2        // xt
 225+ E0AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0AA             >
 225+ E0AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0AA             >
 225+ E0AA             >//              ______________________________________________________________________
 225+ E0AA             >//              Dictionary part
 225+ E0AA             >
 225+ E0AA             >                org     Dict_Ptr
 225+ 63E6             >
 225+ 63E6 A8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 63E8             >
 225+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 63E8 ~           >
 225+ 63E8 ~           >
 225+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 63E8             >
 225+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 63E8              Branch_Ptr:
 227+ 63E8 0A                           ld      a, (bc)
 228+ 63E9 6F                           ld      l, a
 229+ 63EA 03                           inc     bc
 230+ 63EB 0A                           ld      a, (bc)
 231+ 63EC 67                           ld      h, a
 232+ 63ED 0B                           dec     bc
 233+ 63EE 09                           add     hl, bc
 234+ 63EF 4D                           ld      c, l
 235+ 63F0 44                           ld      b, h
 236+ 63F1                              next
 236+ 63F1 DD E9       >                jp      (ix)
 237+ 63F3
 238+ 63F3
 239+ 63F3              //  ______________________________________________________________________
 240+ 63F3              //
 241+ 63F3              // 0branch      f --
 242+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 63F3              // compiled by IF, UNTIL and some other immediate words
 244+ 63F3
 245+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 63F3             >
 245+ 63F3             >Dict_Ptr        defl    $
 245+ 63F3             >
 245+ 63F3             >//              ______________________________________________________________________
 245+ 63F3             >//              Heap part
 245+ 63F3             >
 245+ 63F3             >
 245+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0AA             >
 245+ E0AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0AA             >Latest_Definition defl  Heap_Ptr
 245+ E0AA             >
 245+ E0AA             >                // dummy db directives used to calculate length of namec
 245+ E0AA 30 42 52 41 >                db      "0BRANCH"
 245+ E0AE 4E 43 48    >
 245+ E0B1             >len_NFA         defl    $ - temp_NFA
 245+ E0B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0AA             >
 245+ E0AA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0AB 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AF 4E 43 48    >
 245+ E0B2             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B1 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0B2             >
 245+ E0B2 9F 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B4             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B4             >
 245+ E0B4             >mirror_Ptr      defl    $
 245+ E0B4             >
 245+ E0B4 F5 63       >                dw      Dict_Ptr + 2        // xt
 245+ E0B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B6             >
 245+ E0B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B6             >
 245+ E0B6             >//              ______________________________________________________________________
 245+ E0B6             >//              Dictionary part
 245+ E0B6             >
 245+ E0B6             >                org     Dict_Ptr
 245+ 63F3             >
 245+ 63F3 B4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 63F5             >
 245+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 63F5 ~           >
 245+ 63F5 ~           >
 245+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 63F5             >
 245+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 63F5              ZBranch_Ptr:
 247+ 63F5 E1                           pop     hl
 248+ 63F6 7D                           ld      a, l
 249+ 63F7 B4                           or      h
 250+ 63F8 28 EE                        jr      z, Branch_Ptr
 251+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 63FB 03                           inc     bc
 253+ 63FC                              next
 253+ 63FC DD E9       >                jp      (ix)
 254+ 63FE
 255+ 63FE              //  ______________________________________________________________________
 256+ 63FE              //
 257+ 63FE              // (leave)        --
 258+ 63FE              // compiled by LEAVE
 259+ 63FE              // this forces to exit from loop and jump past
 260+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FE             >
 260+ 63FE             >Dict_Ptr        defl    $
 260+ 63FE             >
 260+ 63FE             >//              ______________________________________________________________________
 260+ 63FE             >//              Heap part
 260+ 63FE             >
 260+ 63FE             >
 260+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B6             >
 260+ E0B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B6             >Latest_Definition defl  Heap_Ptr
 260+ E0B6             >
 260+ E0B6             >                // dummy db directives used to calculate length of namec
 260+ E0B6 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0BA 56 45 29    >
 260+ E0BD             >len_NFA         defl    $ - temp_NFA
 260+ E0BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B6             >
 260+ E0B6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B7 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0BB 56 45 29    >
 260+ E0BE             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BD A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BE             >
 260+ E0BE AA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0C0             >Prev_Ptr        defl    Heap_Ptr
 260+ E0C0             >
 260+ E0C0             >mirror_Ptr      defl    $
 260+ E0C0             >
 260+ E0C0 00 64       >                dw      Dict_Ptr + 2        // xt
 260+ E0C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0C2             >
 260+ E0C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0C2             >
 260+ E0C2             >//              ______________________________________________________________________
 260+ E0C2             >//              Dictionary part
 260+ E0C2             >
 260+ E0C2             >                org     Dict_Ptr
 260+ 63FE             >
 260+ 63FE C0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6400             >
 260+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6400 ~           >
 260+ 6400 ~           >
 260+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6400             >
 260+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6400 EB                           ex      de, hl
 262+ 6401                              // *** ldhlrp
 263+ 6401 3E 04                        ld      a, 4
 264+ 6403 ED 31                        add     hl, a
 265+ 6405                              // *** ldrphl
 266+ 6405 EB                           ex      de, hl
 267+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6408                              next
 268+ 6408 DD E9       >                jp      (ix)
 269+ 640A
 270+ 640A              //  ______________________________________________________________________
 271+ 640A              //
 272+ 640A              // (?do)        lim ind --
 273+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 640A              // used to skip the loop if lim == ind
 276+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 640A             >
 276+ 640A             >Dict_Ptr        defl    $
 276+ 640A             >
 276+ 640A             >//              ______________________________________________________________________
 276+ 640A             >//              Heap part
 276+ 640A             >
 276+ 640A             >
 276+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0C2             >
 276+ E0C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0C2             >Latest_Definition defl  Heap_Ptr
 276+ E0C2             >
 276+ E0C2             >                // dummy db directives used to calculate length of namec
 276+ E0C2 28 3F 44 4F >                db      "(?DO)"
 276+ E0C6 29          >
 276+ E0C7             >len_NFA         defl    $ - temp_NFA
 276+ E0C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0C2             >
 276+ E0C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C3 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C7 29          >
 276+ E0C8             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C7 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C8             >
 276+ E0C8 B6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0CA             >Prev_Ptr        defl    Heap_Ptr
 276+ E0CA             >
 276+ E0CA             >mirror_Ptr      defl    $
 276+ E0CA             >
 276+ E0CA 0C 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0CC             >
 276+ E0CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0CC             >
 276+ E0CC             >//              ______________________________________________________________________
 276+ E0CC             >//              Dictionary part
 276+ E0CC             >
 276+ E0CC             >                org     Dict_Ptr
 276+ 640A             >
 276+ 640A CA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 640C             >
 276+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 640C ~           >
 276+ 640C ~           >
 276+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 640C             >
 276+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 640C D9                           exx
 278+ 640D D1                            pop     de                  // de has the index
 279+ 640E E1                            pop     hl                  // hl has the limit
 280+ 640F 44                            ld      b, h
 281+ 6410 4D                            ld      c, l
 282+ 6411 E5                            push    hl                  // put them back to stack for later
 283+ 6412 D5                            push    de
 284+ 6413 A7                            and     a                   // reset carry flag
 285+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 286+ 6416 D9                           exx
 287+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6419 E1                               pop     hl
 289+ 641A E1                               pop     hl
 290+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 641D              Do_Ptr:
 292+ 641D                              // *** ldhlrp                 // prepare RP
 293+ 641D                              // *** ex      de, hl
 294+ 641D                              // dec     de
 295+ 641D                              // dec     de
 296+ 641D                              // dec     de
 297+ 641D                              // dec     de
 298+ 641D ED 35 FC FF                  add     de, -4
 299+ 6421 D5                           push    de                  // pass it to h'l'
 300+ 6422                              // *** ex      de, hl
 301+ 6422                              // *** ldrphl
 302+ 6422 D9                           exx
 303+ 6423 E1                            pop     hl
 304+ 6424
 305+ 6424                               // store index as top RP
 306+ 6424 D1                            pop     de
 307+ 6425 73                            ld      (hl), e
 308+ 6426 23                            inc     hl
 309+ 6427 72                            ld      (hl), d
 310+ 6428 23                            inc     hl
 311+ 6429                               // stores lim as second from top RP
 312+ 6429 D1                            pop     de
 313+ 642A 73                            ld      (hl), e
 314+ 642B 23                            inc     hl
 315+ 642C 72                            ld      (hl), d
 316+ 642D D9                           exx
 317+ 642E                              // skip branch-style offseet
 318+ 642E 03                           inc     bc
 319+ 642F 03                           inc     bc
 320+ 6430                              next
 320+ 6430 DD E9       >                jp      (ix)
 321+ 6432
 322+ 6432              //  ______________________________________________________________________
 323+ 6432              //
 324+ 6432              // (do)        lim ind --
 325+ 6432              // compiled by DO to make a loop checking for lim == ind first
 326+ 6432              // this is a simpler version of (?DO)
 327+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 6432             >
 327+ 6432             >Dict_Ptr        defl    $
 327+ 6432             >
 327+ 6432             >//              ______________________________________________________________________
 327+ 6432             >//              Heap part
 327+ 6432             >
 327+ 6432             >
 327+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CC             >
 327+ E0CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CC             >Latest_Definition defl  Heap_Ptr
 327+ E0CC             >
 327+ E0CC             >                // dummy db directives used to calculate length of namec
 327+ E0CC 28 44 4F 29 >                db      "(DO)"
 327+ E0D0             >len_NFA         defl    $ - temp_NFA
 327+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CC             >
 327+ E0CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CD 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0D0 A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D1             >
 327+ E0D1 C2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D3             >
 327+ E0D3             >mirror_Ptr      defl    $
 327+ E0D3             >
 327+ E0D3 34 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D5             >
 327+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D5             >
 327+ E0D5             >//              ______________________________________________________________________
 327+ E0D5             >//              Dictionary part
 327+ E0D5             >
 327+ E0D5             >                org     Dict_Ptr
 327+ 6432             >
 327+ 6432 D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 6434             >
 327+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 6434 ~           >
 327+ 6434 ~           >
 327+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 6434             >
 327+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 6434 0B                           dec     bc                  // prepare IP beforehand
 329+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 6436 18 E5                        jr      Do_Ptr
 331+ 6438
 332+ 6438              //  ______________________________________________________________________
 333+ 6438              //
 334+ 6438              // i            -- n
 335+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6438              // the current value of the index-loop
 337+ 6438                              New_Def I, "I", is_code, is_normal
 337+ 6438             >
 337+ 6438             >Dict_Ptr        defl    $
 337+ 6438             >
 337+ 6438             >//              ______________________________________________________________________
 337+ 6438             >//              Heap part
 337+ 6438             >
 337+ 6438             >
 337+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D5             >
 337+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D5             >Latest_Definition defl  Heap_Ptr
 337+ E0D5             >
 337+ E0D5             >                // dummy db directives used to calculate length of namec
 337+ E0D5 49          >                db      "I"
 337+ E0D6             >len_NFA         defl    $ - temp_NFA
 337+ E0D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D5             >
 337+ E0D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D6 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D7             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D6 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D7             >
 337+ E0D7 CC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D9             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D9             >
 337+ E0D9             >mirror_Ptr      defl    $
 337+ E0D9             >
 337+ E0D9 3A 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0DB             >
 337+ E0DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0DB             >
 337+ E0DB             >//              ______________________________________________________________________
 337+ E0DB             >//              Dictionary part
 337+ E0DB             >
 337+ E0DB             >                org     Dict_Ptr
 337+ 6438             >
 337+ 6438 D9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 643A             >
 337+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 643A ~           >
 337+ 643A ~           >
 337+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 643A             >
 337+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 643A              I_Ptr:
 339+ 643A 62                           ld      h, d
 340+ 643B 6B                           ld      l, e
 341+ 643C                              // *** ldhlrp
 342+ 643C              I_Ptr_prime:
 343+ 643C 7E                           ld      a, (hl)
 344+ 643D 23                           inc     hl
 345+ 643E 66                           ld      h, (hl)
 346+ 643F 6F                           ld      l, a
 347+ 6440 E5                           push    hl
 348+ 6441                              next
 348+ 6441 DD E9       >                jp      (ix)
 349+ 6443
 350+ 6443
 351+ 6443              //  ______________________________________________________________________
 352+ 6443              //
 353+ 6443              // i'            -- n
 354+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 6443              // the limit of the index-loop
 356+ 6443
 357+ 6443                              New_Def II, "I'", is_code, is_normal
 357+ 6443             >
 357+ 6443             >Dict_Ptr        defl    $
 357+ 6443             >
 357+ 6443             >//              ______________________________________________________________________
 357+ 6443             >//              Heap part
 357+ 6443             >
 357+ 6443             >
 357+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0DB             >
 357+ E0DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0DB             >Latest_Definition defl  Heap_Ptr
 357+ E0DB             >
 357+ E0DB             >                // dummy db directives used to calculate length of namec
 357+ E0DB 49 27       >                db      "I'"
 357+ E0DD             >len_NFA         defl    $ - temp_NFA
 357+ E0DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0DB             >
 357+ E0DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DC 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DE             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DD A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DE             >
 357+ E0DE D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0E0             >Prev_Ptr        defl    Heap_Ptr
 357+ E0E0             >
 357+ E0E0             >mirror_Ptr      defl    $
 357+ E0E0             >
 357+ E0E0 45 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E2             >
 357+ E0E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E2             >
 357+ E0E2             >//              ______________________________________________________________________
 357+ E0E2             >//              Dictionary part
 357+ E0E2             >
 357+ E0E2             >                org     Dict_Ptr
 357+ 6443             >
 357+ 6443 E0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 6445             >
 357+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 6445 ~           >
 357+ 6445 ~           >
 357+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6445             >
 357+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6445 62                           ld      h, d
 359+ 6446 6B                           ld      l, e
 360+ 6447                              // *** ldhlrp
 361+ 6447 23                           inc     hl
 362+ 6448 23                           inc     hl
 363+ 6449 18 F1                        jr      I_Ptr_prime
 364+ 644B
 365+ 644B
 366+ 644B              //  ______________________________________________________________________
 367+ 644B              //
 368+ 644B              // digit        c n -- u tf  |  ff
 369+ 644B              // convert a character c using base n
 370+ 644B              // returns a unsigned number and a true flag
 371+ 644B              // or just a false flag if the conversion fails
 372+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 644B             >
 372+ 644B             >Dict_Ptr        defl    $
 372+ 644B             >
 372+ 644B             >//              ______________________________________________________________________
 372+ 644B             >//              Heap part
 372+ 644B             >
 372+ 644B             >
 372+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E2             >
 372+ E0E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E2             >Latest_Definition defl  Heap_Ptr
 372+ E0E2             >
 372+ E0E2             >                // dummy db directives used to calculate length of namec
 372+ E0E2 44 49 47 49 >                db      "DIGIT"
 372+ E0E6 54          >
 372+ E0E7             >len_NFA         defl    $ - temp_NFA
 372+ E0E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E2             >
 372+ E0E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E3 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E7 54          >
 372+ E0E8             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E7 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E8             >
 372+ E0E8 DB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0EA             >Prev_Ptr        defl    Heap_Ptr
 372+ E0EA             >
 372+ E0EA             >mirror_Ptr      defl    $
 372+ E0EA             >
 372+ E0EA 4D 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EC             >
 372+ E0EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EC             >
 372+ E0EC             >//              ______________________________________________________________________
 372+ E0EC             >//              Dictionary part
 372+ E0EC             >
 372+ E0EC             >                org     Dict_Ptr
 372+ 644B             >
 372+ 644B EA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 644D             >
 372+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 644D ~           >
 372+ 644D ~           >
 372+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 644D             >
 372+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 644D D9                           exx
 374+ 644E E1                           pop     hl                  // l has the base
 375+ 644F D1                           pop     de                  // e has the digit
 376+ 6450 7B                           ld      a, e
 377+ 6451 FE 60                        cp      $60                 // check if lowercase
 378+ 6453 38 02                        jr      c, Digit_Uppercase
 379+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 6457              Digit_Uppercase:
 381+ 6457 D6 30                        sub     $30
 382+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 645B FE 0A                            cp      $0A
 384+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 645F D6 07                                sub     7                   // try hex and subtract 7
 386+ 6461 FE 0A                                cp      $0A
 387+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 6465
 389+ 6465              Digit_Decimal:
 390+ 6465                              // compare digit
 391+ 6465 BD                           cp      l                   // compare with base
 392+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6469 21 01 00                         ld      hl, 1
 395+ 646C D5                               push    de
 396+ 646D E5                               push    hl
 397+ 646E D9                               exx
 398+ 646F                                  next
 398+ 646F DD E9       >                jp      (ix)
 399+ 6471              Digit_Fail:
 400+ 6471 21 00 00                     ld      hl, 0
 401+ 6474 E5                           push    hl
 402+ 6475 D9                           exx
 403+ 6476                              next
 403+ 6476 DD E9       >                jp      (ix)
 404+ 6478
 405+ 6478              //  ______________________________________________________________________
 406+ 6478              //
 407+ 6478              //  parametric uppercase routine
 408+ 6478              //  depending on the following op-code the routine can be by-passed
 409+ 6478              //  changing the behaviour of some callers.
 410+ 6478              //  If it is "ret" then the system is Case-Sensitive
 411+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 412+ 6478              //  Only A register is touched.
 413+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 6479              Case_Upper:
 415+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 647B D8                           ret     c                   // no change if A < "a"
 417+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 647E D0                           ret     nc                  // no change if A > "z"
 419+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 6481 C9                           ret
 421+ 6482
 422+ 6482              //  ______________________________________________________________________
 423+ 6482              //
 424+ 6482              //  caseon      --
 425+ 6482              // set system case-sensitivity on
 426+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 6482             >
 427+ 6482             >Dict_Ptr        defl    $
 427+ 6482             >
 427+ 6482             >//              ______________________________________________________________________
 427+ 6482             >//              Heap part
 427+ 6482             >
 427+ 6482             >
 427+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0EC             >
 427+ E0EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0EC             >Latest_Definition defl  Heap_Ptr
 427+ E0EC             >
 427+ E0EC             >                // dummy db directives used to calculate length of namec
 427+ E0EC 43 41 53 45 >                db      "CASEON"
 427+ E0F0 4F 4E       >
 427+ E0F2             >len_NFA         defl    $ - temp_NFA
 427+ E0F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0EC             >
 427+ E0EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0ED 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0F1 4F 4E       >
 427+ E0F3             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0F2 CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F3             >
 427+ E0F3 E2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F5             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F5             >
 427+ E0F5             >mirror_Ptr      defl    $
 427+ E0F5             >
 427+ E0F5 84 64       >                dw      Dict_Ptr + 2        // xt
 427+ E0F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F7             >
 427+ E0F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F7             >
 427+ E0F7             >//              ______________________________________________________________________
 427+ E0F7             >//              Dictionary part
 427+ E0F7             >
 427+ E0F7             >                org     Dict_Ptr
 427+ 6482             >
 427+ 6482 F5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 6484             >
 427+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 6484 ~           >
 427+ 6484 ~           >
 427+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 6484             >
 427+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 6484 3E C9                        ld      a, $C9              // "ret"
 429+ 6486 32 78 64                     ld      (Case_Sensitive), a
 430+ 6489                              next
 430+ 6489 DD E9       >                jp      (ix)
 431+ 648B
 432+ 648B              //  ______________________________________________________________________
 433+ 648B              //
 434+ 648B              //  caseoff     --
 435+ 648B              // set system case-sensitivity on
 436+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 648B             >
 437+ 648B             >Dict_Ptr        defl    $
 437+ 648B             >
 437+ 648B             >//              ______________________________________________________________________
 437+ 648B             >//              Heap part
 437+ 648B             >
 437+ 648B             >
 437+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F7             >
 437+ E0F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F7             >Latest_Definition defl  Heap_Ptr
 437+ E0F7             >
 437+ E0F7             >                // dummy db directives used to calculate length of namec
 437+ E0F7 43 41 53 45 >                db      "CASEOFF"
 437+ E0FB 4F 46 46    >
 437+ E0FE             >len_NFA         defl    $ - temp_NFA
 437+ E0FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F7             >
 437+ E0F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0FC 4F 46 46    >
 437+ E0FF             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FE C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FF             >
 437+ E0FF EC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E101             >Prev_Ptr        defl    Heap_Ptr
 437+ E101             >
 437+ E101             >mirror_Ptr      defl    $
 437+ E101             >
 437+ E101 8D 64       >                dw      Dict_Ptr + 2        // xt
 437+ E103             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E103             >
 437+ E103             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E103             >
 437+ E103             >//              ______________________________________________________________________
 437+ E103             >//              Dictionary part
 437+ E103             >
 437+ E103             >                org     Dict_Ptr
 437+ 648B             >
 437+ 648B 01 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 648D             >
 437+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 648D ~           >
 437+ 648D ~           >
 437+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 648D             >
 437+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 648D 3E 00                        ld      a, $00              // "nop"
 439+ 648F 32 78 64                     ld      (Case_Sensitive), a
 440+ 6492                              next
 440+ 6492 DD E9       >                jp      (ix)
 441+ 6494
 442+ 6494              //  ______________________________________________________________________
 443+ 6494              //
 444+ 6494              //  upper       c1 -- c1 | c2
 445+ 6494              // character on top of stack is forced to Uppercase.
 446+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 6494             >
 446+ 6494             >Dict_Ptr        defl    $
 446+ 6494             >
 446+ 6494             >//              ______________________________________________________________________
 446+ 6494             >//              Heap part
 446+ 6494             >
 446+ 6494             >
 446+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E103             >
 446+ E103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E103             >Latest_Definition defl  Heap_Ptr
 446+ E103             >
 446+ E103             >                // dummy db directives used to calculate length of namec
 446+ E103 55 50 50 45 >                db      "UPPER"
 446+ E107 52          >
 446+ E108             >len_NFA         defl    $ - temp_NFA
 446+ E108             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E103             >
 446+ E103 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E104 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E108 52          >
 446+ E109             >                org     $-1                 // alter last byte of Name just above to set
 446+ E108 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E109             >
 446+ E109 F7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E10B             >Prev_Ptr        defl    Heap_Ptr
 446+ E10B             >
 446+ E10B             >mirror_Ptr      defl    $
 446+ E10B             >
 446+ E10B 96 64       >                dw      Dict_Ptr + 2        // xt
 446+ E10D             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10D             >
 446+ E10D             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10D             >
 446+ E10D             >//              ______________________________________________________________________
 446+ E10D             >//              Dictionary part
 446+ E10D             >
 446+ E10D             >                org     Dict_Ptr
 446+ 6494             >
 446+ 6494 0B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 6496             >
 446+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 6496 ~           >
 446+ 6496 ~           >
 446+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 6496             >
 446+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 6496 E1                           pop     hl
 448+ 6497 7D                           ld      a, l
 449+ 6498 CD 79 64                     call    Case_Upper
 450+ 649B 6F                           ld      l, a
 451+ 649C
 452+ 649C                              psh1
 452+ 649C E5          >                push    hl
 452+ 649D DD E9       >                jp      (ix)
 453+ 649F
 454+ 649F              //  ______________________________________________________________________
 455+ 649F
 456+ 649F              MMU7_read:
 457+ 649F 01 3B 24                     ld      bc, $243B
 458+ 64A2 3E 57                        ld      a, 87
 459+ 64A4 ED 79                        out     (c), a
 460+ 64A6 04                           inc     b
 461+ 64A7 ED 78                        in      a, (c)
 462+ 64A9 C9                           ret
 463+ 64AA
 464+ 64AA              //  ______________________________________________________________________
 465+ 64AA
 466+ 64AA              TO_FAR_rout:
 467+ 64AA 7C                           ld      a, h
 468+ 64AB 08                           ex      af, af
 469+ 64AC 7C                           ld      a, h
 470+ 64AD F6 E0                        or      $E0
 471+ 64AF 67                           ld      h, a
 472+ 64B0 08                           ex      af, af
 473+ 64B1 07                           rlca
 474+ 64B2 07                           rlca
 475+ 64B3 07                           rlca
 476+ 64B4 E6 07                        and     $07
 477+ 64B6 C6 20                        add     $20
 478+ 64B8 C9                           ret
 479+ 64B9
 480+ 64B9
 481+ 64B9              //  ______________________________________________________________________
 482+ 64B9              //
 483+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 484+ 64B9              // vocabulary search,
 485+ 64B9              // - voc is starting word's NFA
 486+ 64B9              // - addr is the string to be searched for
 487+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 488+ 64B9              // (which contains length and some flags) and a true flag.
 489+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 490+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 490+ 64B9             >
 490+ 64B9             >Dict_Ptr        defl    $
 490+ 64B9             >
 490+ 64B9             >//              ______________________________________________________________________
 490+ 64B9             >//              Heap part
 490+ 64B9             >
 490+ 64B9             >
 490+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E10D             >
 490+ E10D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E10D             >Latest_Definition defl  Heap_Ptr
 490+ E10D             >
 490+ E10D             >                // dummy db directives used to calculate length of namec
 490+ E10D 28 46 49 4E >                db      "(FIND)"
 490+ E111 44 29       >
 490+ E113             >len_NFA         defl    $ - temp_NFA
 490+ E113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E10D             >
 490+ E10D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E10E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 490+ E112 44 29       >
 490+ E114             >                org     $-1                 // alter last byte of Name just above to set
 490+ E113 A9          >                db      {b $} | END_BIT     // msb as name end
 490+ E114             >
 490+ E114 03 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E116             >Prev_Ptr        defl    Heap_Ptr
 490+ E116             >
 490+ E116             >mirror_Ptr      defl    $
 490+ E116             >
 490+ E116 BB 64       >                dw      Dict_Ptr + 2        // xt
 490+ E118             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E118             >
 490+ E118             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E118             >
 490+ E118             >//              ______________________________________________________________________
 490+ E118             >//              Dictionary part
 490+ E118             >
 490+ E118             >                org     Dict_Ptr
 490+ 64B9             >
 490+ 64B9 16 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 64BB             >
 490+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 490+ 64BB ~           >
 490+ 64BB ~           >
 490+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 64BB             >
 490+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 64BB D9                           exx
 492+ 64BC CD 9F 64                     call    MMU7_read
 493+ 64BF D9                           exx
 494+ 64C0 6F                           ld      l, a
 495+ 64C1 D9                           exx
 496+ 64C2
 497+ 64C2 D1                           pop     de                      // de has dictionary pointer
 498+ 64C3              Find_VocabularyLoop:
 499+ 64C3 7A                               ld      a, d
 500+ 64C4 D6 60                            sub     $60
 501+ 64C6 30 08                            jr      nc, Find_far_endif
 502+ 64C8 EB                                   ex      de, hl
 503+ 64C9 CD AA 64                             call    TO_FAR_rout
 504+ 64CC EB                                   ex      de, hl
 505+ 64CD ED 92 57                             nextreg 87, a
 506+ 64D0              Find_far_endif:
 507+ 64D0 E1                               pop     hl                  // string pointer to search for
 508+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 509+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 510+ 64D3 08                               ex      af,af'              // for later use (!)
 511+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 512+ 64D5 AE                               xor     (hl)                // check if same length
 513+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 514+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 515+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 516+ 64DA
 517+ 64DA              Find_ThisWord:      // begin loop
 518+ 64DA 23                                   inc     hl
 519+ 64DB 13                                   inc     de
 520+ 64DC 1A                                   ld      a, (de)
 521+ 64DD                                      // case insensitive option - begin
 522+ 64DD                                      // push    bc
 523+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 524+ 64DF 47                                   ld      b, a
 525+ 64E0 1A                                   ld      a, (de)
 526+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 527+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 528+ 64E6 4F                                   ld      c, a
 529+ 64E7 7E                                   ld      a, (hl)
 530+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 531+ 64EB A9                                   xor     c
 532+ 64EC A8                                   xor     b
 533+ 64ED                                      // pop     bc
 534+ 64ED                                      // case insensitive option - end
 535+ 64ED 87                                   add     a                   // ignore msb during compare
 536+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 537+ 64F0
 538+ 64F0                                  // loop back until last byte msb is found set
 539+ 64F0                                  // that bit marks the ending char of this word
 540+ 64F0 30 E8                            jr      nc, Find_ThisWord
 541+ 64F2
 542+ 64F2                                  // match found !
 543+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 544+ 64F5 19                               add     hl, de
 545+ 64F6
 546+ 64F6                              //  ld      a, h
 547+ 64F6                              //  and     $E0
 548+ 64F6                              //  xor     h
 549+ 64F6                              //  jr      nz, Non_MMU7
 550+ 64F6                                  //  call    MMU7_read
 551+ 64F6                                  //  dec     a
 552+ 64F6                                  //  jr      z, Non_MMU7
 553+ 64F6 5E                                       ld      e, (hl)
 554+ 64F7 23                                       inc     hl
 555+ 64F8 56                                       ld      d, (hl)
 556+ 64F9 EB                                       ex      de, hl
 557+ 64FA              //Non_MMU7:
 558+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64FC 5F                               ld      e, a
 561+ 64FD 16 00                            ld      d, 0
 562+ 64FF 21 FF FF                         ld      hl, -1
 563+ 6502 D5                               push    de
 564+ 6503 E5                               push    hl
 565+ 6504 D9                               exx
 566+ 6505 7D                               ld      a, l
 567+ 6506 ED 92 57                         nextreg 87, a
 568+ 6509                                  next
 568+ 6509 DD E9       >                jp      (ix)
 569+ 650B
 570+ 650B              Find_DidntMatch: // didn't match (*)
 571+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 650D
 573+ 650D              Find_DifferentLenght:
 574+ 650D                                  // consume chars until the end of the word
 575+ 650D                                  // that is last byte msb is found set
 576+ 650D 13                                   inc     de
 577+ 650E 1A                                   ld      a, (de)
 578+ 650F 87                                   add     a, a
 579+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6512
 581+ 6512              Find_WordEnd:   // word-end  found (**)
 582+ 6512                                  // take LFA and use it
 583+ 6512 13                               inc     de
 584+ 6513 EB                               ex      de, hl
 585+ 6514 5E                               ld      e, (hl)
 586+ 6515 23                               inc     hl
 587+ 6516 56                               ld      d, (hl)
 588+ 6517 7A                               ld      a, d
 589+ 6518 B3                               or      e
 590+ 6519
 591+ 6519                              // loop until end of vocabulary
 592+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 651B
 594+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 595+ 651C 21 00 00                     ld      hl, 0
 596+ 651F E5                           push    hl
 597+ 6520 D9                           exx
 598+ 6521 7D                           ld      a, l
 599+ 6522 ED 92 57                     nextreg 87, a
 600+ 6525                              next
 600+ 6525 DD E9       >                jp      (ix)
 601+ 6527
 602+ 6527              //  ______________________________________________________________________
 603+ 6527              //
 604+ 6527              // enclose      a c -- a  n1 n2 n3
 605+ 6527              // starting from a, using delimiter c, determines the offsets:
 606+ 6527              //   n1   the first character non-delimiter
 607+ 6527              //   n2   the first delimiter after the text
 608+ 6527              //   n3   the first character non enclosed.
 609+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 6527              // an uncoditional delimiter.
 611+ 6527              // Examples:
 612+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 615+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 6527             >
 615+ 6527             >Dict_Ptr        defl    $
 615+ 6527             >
 615+ 6527             >//              ______________________________________________________________________
 615+ 6527             >//              Heap part
 615+ 6527             >
 615+ 6527             >
 615+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E118             >
 615+ E118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E118             >Latest_Definition defl  Heap_Ptr
 615+ E118             >
 615+ E118             >                // dummy db directives used to calculate length of namec
 615+ E118 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11C 4F 53 45    >
 615+ E11F             >len_NFA         defl    $ - temp_NFA
 615+ E11F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E118             >
 615+ E118 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E119 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11D 4F 53 45    >
 615+ E120             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11F C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E120             >
 615+ E120 0D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E122             >Prev_Ptr        defl    Heap_Ptr
 615+ E122             >
 615+ E122             >mirror_Ptr      defl    $
 615+ E122             >
 615+ E122 29 65       >                dw      Dict_Ptr + 2        // xt
 615+ E124             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E124             >
 615+ E124             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E124             >
 615+ E124             >//              ______________________________________________________________________
 615+ E124             >//              Dictionary part
 615+ E124             >
 615+ E124             >                org     Dict_Ptr
 615+ 6527             >
 615+ 6527 22 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6529             >
 615+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6529 ~           >
 615+ 6529 ~           >
 615+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6529             >
 615+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6529 D9                           exx
 617+ 652A D1                           pop     de                  //  e has the character
 618+ 652B E1                           pop     hl                  // hl has the string address
 619+ 652C E5                           push    hl
 620+ 652D 7B                           ld      a, e
 621+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6531 2B                           dec     hl
 623+ 6532              Enclose_NonDelimiter:
 624+ 6532                              // find first non delimiter
 625+ 6532 23                               inc     hl
 626+ 6533 13                               inc     de
 627+ 6534 BE                               cp      (hl)
 628+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 6537 D5                           push    de
 630+ 6538
 631+ 6538                              // push    bc                  // save Instruction Pointer
 632+ 6538
 633+ 6538 4F                           ld      c, a                // save char
 634+ 6539 7E                           ld      a, (hl)
 635+ 653A A7                           and     a                   // stop if 0x00
 636+ 653B 20 07                        jr      nz, Enclose_NextChar
 637+ 653D                              /// case iii. no more character in string
 638+ 653D                                  // pop     bc                  // restore Instruction Pointer
 639+ 653D 13                               inc     de
 640+ 653E D5                               push    de
 641+ 653F 1B                               dec     de
 642+ 6540 D5                               push    de
 643+ 6541 D9                               exx
 644+ 6542                                  next
 644+ 6542 DD E9       >                jp      (ix)
 645+ 6544              Enclose_NextChar:
 646+ 6544 79                               ld      a, c
 647+ 6545 23                               inc     hl
 648+ 6546 13                               inc     de
 649+ 6547 BE                               cp      (hl)
 650+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 651+ 654A                                      // case i. first non enclosed
 652+ 654A                                      // pop     bc                  // restore Instruction Pointer
 653+ 654A D5                                   push    de
 654+ 654B 13                                   inc     de
 655+ 654C D5                                   push    de
 656+ 654D D9                                   exx
 657+ 654E                                      next
 657+ 654E DD E9       >                jp      (ix)
 658+ 6550              Enclose_NonSeparator:
 659+ 6550 7E                               ld      a, (hl)
 660+ 6551 A7                               and     a
 661+ 6552 20 F0                        jr      nz, Enclose_NextChar
 662+ 6554
 663+ 6554                              // case ii. separator & terminator
 664+ 6554                              // pop     bc                  // restore Instruction Pointer
 665+ 6554 D5                           push    de
 666+ 6555 D5                           push    de
 667+ 6556 D9                           exx
 668+ 6557                              next
 668+ 6557 DD E9       >                jp      (ix)
 669+ 6559
 670+ 6559              //  ______________________________________________________________________
 671+ 6559              //
 672+ 6559              // (map)        a2 a1 n c1 -- c2
 673+ 6559              // translate character c1 using mapping string a2 and a2
 674+ 6559              // if c1 is not present within string a1 then
 675+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 676+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 676+ 6559             >
 676+ 6559             >Dict_Ptr        defl    $
 676+ 6559             >
 676+ 6559             >//              ______________________________________________________________________
 676+ 6559             >//              Heap part
 676+ 6559             >
 676+ 6559             >
 676+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 676+ E124             >
 676+ E124             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ E124             >Latest_Definition defl  Heap_Ptr
 676+ E124             >
 676+ E124             >                // dummy db directives used to calculate length of namec
 676+ E124 28 4D 41 50 >                db      "(MAP)"
 676+ E128 29          >
 676+ E129             >len_NFA         defl    $ - temp_NFA
 676+ E129             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ E124             >
 676+ E124 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ E125 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 676+ E129 29          >
 676+ E12A             >                org     $-1                 // alter last byte of Name just above to set
 676+ E129 A9          >                db      {b $} | END_BIT     // msb as name end
 676+ E12A             >
 676+ E12A 18 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 676+ E12C             >Prev_Ptr        defl    Heap_Ptr
 676+ E12C             >
 676+ E12C             >mirror_Ptr      defl    $
 676+ E12C             >
 676+ E12C 5B 65       >                dw      Dict_Ptr + 2        // xt
 676+ E12E             >Heap_Ptr        defl    $ - $E000           // save current HP
 676+ E12E             >
 676+ E12E             >Current_HP      defl  $ - $E000             // used to set HP once!
 676+ E12E             >
 676+ E12E             >//              ______________________________________________________________________
 676+ E12E             >//              Dictionary part
 676+ E12E             >
 676+ E12E             >                org     Dict_Ptr
 676+ 6559             >
 676+ 6559 2C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 676+ 655B             >
 676+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 676+ 655B ~           >
 676+ 655B ~           >
 676+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 655B             >
 676+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 655B D9                           exx
 678+ 655C E1                           pop     hl
 679+ 655D 7D                           ld      a, l
 680+ 655E C1                           pop     bc
 681+ 655F E1                           pop     hl
 682+ 6560 50                           ld      d, b
 683+ 6561 59                           ld      e, c
 684+ 6562 ED B1                        cpir
 685+ 6564 E1                           pop     hl
 686+ 6565 20 05                        jr      nz, C_Map_Then
 686+ 6567
 687+ 6567 19                               add     hl, de
 688+ 6568 2B                               dec     hl
 689+ 6569 ED 42                            sbc     hl, bc
 690+ 656B 7E                               ld      a, (hl)
 691+ 656C              C_Map_Then:
 692+ 656C 6F                           ld      l, a
 693+ 656D 26 00                        ld      h, 0
 694+ 656F E5                           push    hl
 695+ 6570 D9                           exx
 696+ 6571                              next
 696+ 6571 DD E9       >                jp      (ix)
 697+ 6573
 698+ 6573              //  ______________________________________________________________________
 699+ 6573              //
 700+ 6573              // (compare)    a1 a2 n -- b
 701+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 702+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 703+ 6573              //  0 : if strings are equal
 704+ 6573              // +1 : if string at a1 greater than string at a2
 705+ 6573              // -1 : if string at a1 less than string at a2
 706+ 6573              // strings can be 256 bytes in length at most.
 707+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 707+ 6573             >
 707+ 6573             >Dict_Ptr        defl    $
 707+ 6573             >
 707+ 6573             >//              ______________________________________________________________________
 707+ 6573             >//              Heap part
 707+ 6573             >
 707+ 6573             >
 707+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E12E             >
 707+ E12E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E12E             >Latest_Definition defl  Heap_Ptr
 707+ E12E             >
 707+ E12E             >                // dummy db directives used to calculate length of namec
 707+ E12E 28 43 4F 4D >                db      "(COMPARE)"
 707+ E132 50 41 52 45 >
 707+ E136 29          >
 707+ E137             >len_NFA         defl    $ - temp_NFA
 707+ E137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E12E             >
 707+ E12E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E12F 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 707+ E133 50 41 52 45 >
 707+ E137 29          >
 707+ E138             >                org     $-1                 // alter last byte of Name just above to set
 707+ E137 A9          >                db      {b $} | END_BIT     // msb as name end
 707+ E138             >
 707+ E138 24 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E13A             >Prev_Ptr        defl    Heap_Ptr
 707+ E13A             >
 707+ E13A             >mirror_Ptr      defl    $
 707+ E13A             >
 707+ E13A 75 65       >                dw      Dict_Ptr + 2        // xt
 707+ E13C             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E13C             >
 707+ E13C             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E13C             >
 707+ E13C             >//              ______________________________________________________________________
 707+ E13C             >//              Dictionary part
 707+ E13C             >
 707+ E13C             >                org     Dict_Ptr
 707+ 6573             >
 707+ 6573 3A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 6575             >
 707+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 707+ 6575 ~           >
 707+ 6575 ~           >
 707+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 6575             >
 707+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 6575 D9                           exx
 709+ 6576 E1                           pop     hl                  // Number of bytes
 710+ 6577 7D                           ld      a, l
 711+ 6578 E1                           pop     hl                  // hl points string a2
 712+ 6579 D1                           pop     de                  // hl points string a1
 713+ 657A              //              push    bc                  // Instruction pointer on stack
 714+ 657A 47                           ld      b, a
 715+ 657B              C_Compare_Loop:
 716+ 657B 7E                               ld      a, (hl)
 717+ 657C CD 78 64                         call    Case_Sensitive
 718+ 657F 4F                               ld      c, a
 719+ 6580 1A                               ld      a, (de)
 720+ 6581 CD 78 64                         call    Case_Sensitive
 721+ 6584 B9                               cp      c
 722+ 6585 13                               inc     de
 723+ 6586 23                               inc     hl
 724+ 6587 28 0E                            jr      z, C_Compare_Equal
 725+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 726+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 727+ 658E 18 03                                jr      C_Compare_Then      // Else
 728+ 6590              C_Compare_NotLessThan:
 729+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 730+ 6593              C_Compare_Then:                                 // Endif
 731+ 6593              //                      pop     bc              // restore Instruction Pointer
 732+ 6593 E5                                   push    hl
 733+ 6594 D9                                   exx
 734+ 6595
 735+ 6595                                      next
 735+ 6595 DD E9       >                jp      (ix)
 736+ 6597
 737+ 6597              C_Compare_Equal:
 738+ 6597 10 E2                        djnz    C_Compare_Loop
 739+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 740+ 659C              //              pop     bc                  // restore Instruction Pointer
 741+ 659C E5                           push    hl
 742+ 659D D9                           exx
 743+ 659E
 744+ 659E                              next
 744+ 659E DD E9       >                jp      (ix)
 745+ 65A0
 746+ 65A0              //  ______________________________________________________________________
 747+ 65A0              //
 748+ 65A0              // emitc        c --
 749+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 750+ 65A0              // the the current channel (see SELECT to change stream-channel)
 751+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 751+ 65A0             >
 751+ 65A0             >Dict_Ptr        defl    $
 751+ 65A0             >
 751+ 65A0             >//              ______________________________________________________________________
 751+ 65A0             >//              Heap part
 751+ 65A0             >
 751+ 65A0             >
 751+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 751+ E13C             >
 751+ E13C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ E13C             >Latest_Definition defl  Heap_Ptr
 751+ E13C             >
 751+ E13C             >                // dummy db directives used to calculate length of namec
 751+ E13C 45 4D 49 54 >                db      "EMITC"
 751+ E140 43          >
 751+ E141             >len_NFA         defl    $ - temp_NFA
 751+ E141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ E13C             >
 751+ E13C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ E13D 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 751+ E141 43          >
 751+ E142             >                org     $-1                 // alter last byte of Name just above to set
 751+ E141 C3          >                db      {b $} | END_BIT     // msb as name end
 751+ E142             >
 751+ E142 2E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 751+ E144             >Prev_Ptr        defl    Heap_Ptr
 751+ E144             >
 751+ E144             >mirror_Ptr      defl    $
 751+ E144             >
 751+ E144 A2 65       >                dw      Dict_Ptr + 2        // xt
 751+ E146             >Heap_Ptr        defl    $ - $E000           // save current HP
 751+ E146             >
 751+ E146             >Current_HP      defl  $ - $E000             // used to set HP once!
 751+ E146             >
 751+ E146             >//              ______________________________________________________________________
 751+ E146             >//              Dictionary part
 751+ E146             >
 751+ E146             >                org     Dict_Ptr
 751+ 65A0             >
 751+ 65A0 44 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 751+ 65A2             >
 751+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 751+ 65A2 ~           >
 751+ 65A2 ~           >
 751+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 65A2             >
 751+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 65A2 E1                           pop     hl
 753+ 65A3 7D                           ld      a, l
 754+ 65A4              Emitc_Ptr:
 755+ 65A4 C5                           push    bc
 756+ 65A5 D5                           push    de
 757+ 65A6 DD E5                        push    ix
 758+ 65A8 D7                           rst     $10
 759+ 65A9 DD E1                        pop     ix
 760+ 65AB D1                           pop     de
 761+ 65AC C1                           pop     bc
 762+ 65AD 3E FF                        ld      a, 255            // max possible
 763+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 764+ 65B2                              next
 764+ 65B2 DD E9       >                jp      (ix)
 765+ 65B4
 766+ 65B4              //  ______________________________________________________________________
 767+ 65B4              //
 768+ 65B4              // cr           --
 769+ 65B4              // send a CR via EMITC
 770+ 65B4                              New_Def CR, "CR", is_code, is_normal
 770+ 65B4             >
 770+ 65B4             >Dict_Ptr        defl    $
 770+ 65B4             >
 770+ 65B4             >//              ______________________________________________________________________
 770+ 65B4             >//              Heap part
 770+ 65B4             >
 770+ 65B4             >
 770+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E146             >
 770+ E146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E146             >Latest_Definition defl  Heap_Ptr
 770+ E146             >
 770+ E146             >                // dummy db directives used to calculate length of namec
 770+ E146 43 52       >                db      "CR"
 770+ E148             >len_NFA         defl    $ - temp_NFA
 770+ E148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E146             >
 770+ E146 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E147 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 770+ E149             >                org     $-1                 // alter last byte of Name just above to set
 770+ E148 D2          >                db      {b $} | END_BIT     // msb as name end
 770+ E149             >
 770+ E149 3C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E14B             >Prev_Ptr        defl    Heap_Ptr
 770+ E14B             >
 770+ E14B             >mirror_Ptr      defl    $
 770+ E14B             >
 770+ E14B B6 65       >                dw      Dict_Ptr + 2        // xt
 770+ E14D             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E14D             >
 770+ E14D             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E14D             >
 770+ E14D             >//              ______________________________________________________________________
 770+ E14D             >//              Dictionary part
 770+ E14D             >
 770+ E14D             >                org     Dict_Ptr
 770+ 65B4             >
 770+ 65B4 4B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 65B6             >
 770+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 770+ 65B6 ~           >
 770+ 65B6 ~           >
 770+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 65B6             >
 770+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 65B6
 772+ 65B6 3E 0D                        ld      a, CR_CHAR
 773+ 65B8 18 EA                        jr      Emitc_Ptr
 774+ 65BA
 775+ 65BA              Emitc_Vec:
 776+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 777+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 778+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 779+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 780+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 781+ 65C4 16 66                        dw      C_Emit_NL         // lf (unix newline)
 782+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 783+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 784+ 65CA
 785+ 65CA              Emit_Selector_Start:
 786+ 65CA 06                           db      $06                 // comma
 787+ 65CB 07                           db      $07                 // bel
 788+ 65CC 08                           db      $08                 // bs
 789+ 65CD 09                           db      $09                 // tab
 790+ 65CE 0D                           db      $0D                 // cr
 791+ 65CF 0A                           db      $0A                 // lf (unix newline)
 792+ 65D0 20                           db      $20
 793+ 65D1              Emit_Selector_End:
 794+ 65D1 20                           db      $20
 795+ 65D2
 796+ 65D2              //  ______________________________________________________________________
 797+ 65D2              //
 798+ 65D2              // (?emit)      c1 -- c2 | c1
 799+ 65D2              // decode a character to be sent via EMIT
 800+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 801+ 65D2              // the routine should resolve anything and convert the character anyway.
 802+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 802+ 65D2             >
 802+ 65D2             >Dict_Ptr        defl    $
 802+ 65D2             >
 802+ 65D2             >//              ______________________________________________________________________
 802+ 65D2             >//              Heap part
 802+ 65D2             >
 802+ 65D2             >
 802+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ E14D             >
 802+ E14D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ E14D             >Latest_Definition defl  Heap_Ptr
 802+ E14D             >
 802+ E14D             >                // dummy db directives used to calculate length of namec
 802+ E14D 28 3F 45 4D >                db      "(?EMIT)"
 802+ E151 49 54 29    >
 802+ E154             >len_NFA         defl    $ - temp_NFA
 802+ E154             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ E14D             >
 802+ E14D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ E14E 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 802+ E152 49 54 29    >
 802+ E155             >                org     $-1                 // alter last byte of Name just above to set
 802+ E154 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ E155             >
 802+ E155 46 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ E157             >Prev_Ptr        defl    Heap_Ptr
 802+ E157             >
 802+ E157             >mirror_Ptr      defl    $
 802+ E157             >
 802+ E157 D4 65       >                dw      Dict_Ptr + 2        // xt
 802+ E159             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ E159             >
 802+ E159             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ E159             >
 802+ E159             >//              ______________________________________________________________________
 802+ E159             >//              Dictionary part
 802+ E159             >
 802+ E159             >                org     Dict_Ptr
 802+ 65D2             >
 802+ 65D2 57 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 65D4             >
 802+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 802+ 65D4 ~           >
 802+ 65D4 ~           >
 802+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 65D4             >
 802+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 65D4 D9                           exx
 804+ 65D5 D1                           pop     de
 805+ 65D6 7B                           ld      a, e                //  de has c1
 806+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 807+ 65D9                              // push    bc                  // save Instruction Pointer
 808+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 809+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 810+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 811+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 812+ 65E3                                  // Found then decode it
 813+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 814+ 65E6 09                               add     hl, bc
 815+ 65E7 09                               add     hl, bc
 816+ 65E8 5E                               ld      e, (hl)
 817+ 65E9 23                               inc     hl
 818+ 65EA 56                               ld      d, (hl)
 819+ 65EB EB                               ex      de, hl
 820+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 821+ 65EC E9                               jp      (hl)                // one of the following labels
 822+ 65ED              C_Emit_Not_Found:
 823+ 65ED                              // pop     bc                  // restore Instruction Pointer
 824+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 825+ 65EF 30 02                        jr      nc, C_Emit_Printable
 826+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 827+ 65F3              C_Emit_Printable:
 828+ 65F3 6F                           ld      l, a
 829+ 65F4 26 00                        ld      h, 0
 830+ 65F6 E5                           push    hl
 831+ 65F7 D9                           exx
 832+ 65F8                              next
 832+ 65F8 DD E9       >                jp      (ix)
 833+ 65FA
 834+ 65FA              C_Emit_Bel:
 835+ 65FA D9                            exx
 836+ 65FB C5                           push    bc                  // save Instruction Pointer
 837+ 65FC D5                           push    de
 838+ 65FD 11 00 01                     ld      de, $0100
 839+ 6600 21 00 02                     ld      hl, $0200
 840+ 6603 DD E5                        push    ix                  // save Next Pointer
 841+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 842+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 843+ 660A D1                           pop     de
 844+ 660B C1                           pop     bc                  // restore Instruction Pointer
 845+ 660C 21 00 00                     ld      hl, NUL_CHAR
 846+ 660F E5                           push    hl
 847+ 6610                              next
 847+ 6610 DD E9       >                jp      (ix)
 848+ 6612
 849+ 6612 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 850+ 6614 18 DD                        jr      C_Emit_Printable
 851+ 6616                          //  push    hl
 852+ 6616                          //  exx
 853+ 6616                          //  next
 854+ 6616
 855+ 6616 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 856+ 6618 18 D9                        jr      C_Emit_Printable
 857+ 661A                          //  push    hl
 858+ 661A                          //  exx
 859+ 661A                          //  next
 860+ 661A
 861+ 661A              //  ______________________________________________________________________
 862+ 661A
 863+ 661A              Key_Table:
 864+ 661A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 865+ 661B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 866+ 661C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 867+ 661D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 868+ 661E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 869+ 661F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 870+ 6620 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 871+ 6621 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 872+ 6622 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 873+ 6623 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 874+ 6624 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 875+ 6625              Key_MapTo:
 876+ 6625 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 877+ 6626 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 878+ 6627 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 879+ 6628 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 880+ 6629 5D                           db      $5D                 //  6: SYMBOL+U : ]
 881+ 662A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 882+ 662B 7D                           db      $7D                 //  4: SYMBOL+G : }
 883+ 662C 7B                           db      $7B                 //  3: SYMBOL+F : {
 884+ 662D 5C                           db      $5C                 //  2: SYMBOl+D : //
 885+ 662E 7C                           db      $7C                 //  1: SYMBOL+S : |
 886+ 662F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 887+ 6630
 888+ 6630              //  ______________________________________________________________________
 889+ 6630              //
 890+ 6630              // curs         -- c
 891+ 6630              // wait for a keypress
 892+ 6630              // This definition need Standard ROM Interrupt to be served
 893+ 6630
 894+ 6630                              New_Def CUR, "CURS", is_code, is_normal
 894+ 6630             >
 894+ 6630             >Dict_Ptr        defl    $
 894+ 6630             >
 894+ 6630             >//              ______________________________________________________________________
 894+ 6630             >//              Heap part
 894+ 6630             >
 894+ 6630             >
 894+ 6630             >                org     (Heap_Ptr & $1FFF) + $E000
 894+ E159             >
 894+ E159             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ E159             >Latest_Definition defl  Heap_Ptr
 894+ E159             >
 894+ E159             >                // dummy db directives used to calculate length of namec
 894+ E159 43 55 52 53 >                db      "CURS"
 894+ E15D             >len_NFA         defl    $ - temp_NFA
 894+ E15D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ E159             >
 894+ E159 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ E15A 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 894+ E15E             >                org     $-1                 // alter last byte of Name just above to set
 894+ E15D D3          >                db      {b $} | END_BIT     // msb as name end
 894+ E15E             >
 894+ E15E 4D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 894+ E160             >Prev_Ptr        defl    Heap_Ptr
 894+ E160             >
 894+ E160             >mirror_Ptr      defl    $
 894+ E160             >
 894+ E160 32 66       >                dw      Dict_Ptr + 2        // xt
 894+ E162             >Heap_Ptr        defl    $ - $E000           // save current HP
 894+ E162             >
 894+ E162             >Current_HP      defl  $ - $E000             // used to set HP once!
 894+ E162             >
 894+ E162             >//              ______________________________________________________________________
 894+ E162             >//              Dictionary part
 894+ E162             >
 894+ E162             >                org     Dict_Ptr
 894+ 6630             >
 894+ 6630 60 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 894+ 6632             >
 894+ 6632             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 6632 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 894+ 6632 ~           >
 894+ 6632 ~           >
 894+ 6632             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 6632             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 6632             >
 894+ 6632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 6632
 896+ 6632 C5                           push    bc                  // save Instruction Pointer
 897+ 6633 D5                           push    de                  // save Return Stack Pointer
 898+ 6634 DD E5                        push    ix
 899+ 6636 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 900+ 663A 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 901+ 663D FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 902+ 6641
 903+ 6641              Cur_Wait:
 904+ 6641 76                               halt
 905+ 6642 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 906+ 6644 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 907+ 6647
 908+ 6647                                  // software-flash: flips face every 320 ms
 909+ 6647 3E 20                            ld      a, $20              // Timing based
 910+ 6649 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 911+ 664C
 912+ 664C 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 913+ 664F 20 0C                            jr      nz, Cur_Cursor
 914+ 6651 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 915+ 6654 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 916+ 6658 28 03                                jr      z, Cur_Cursor
 917+ 665A 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 918+ 665D              Cur_Cursor:
 919+ 665D D7                               rst     $10
 920+ 665E 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 921+ 6660 D7                               rst     $10
 922+ 6661
 923+ 6661 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 924+ 6665 28 DA                        jr      z, Cur_Wait
 925+ 6667
 926+ 6667 76                           halt    // this is to sync flashing cursor.
 927+ 6668
 928+ 6668 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 929+ 666A D7                           rst     $10
 930+ 666B 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 931+ 666D D7                           rst     $10
 932+ 666E
 933+ 666E ED 7B 92 63                  ld      sp, (SP_Saved)
 934+ 6672
 935+ 6672 DD E1                        pop     ix
 936+ 6674 D1                           pop     de                  // Restore Return Stack Pointer
 937+ 6675 C1                           pop     bc                  // Restore Instruction Pointer
 938+ 6676                              next
 938+ 6676 DD E9       >                jp      (ix)
 939+ 6678
 940+ 6678
 941+ 6678              //  ______________________________________________________________________
 942+ 6678              //
 943+ 6678              // key          -- c
 944+ 6678              // This definition need Standard ROM Interrupt to be served
 945+ 6678
 946+ 6678                              New_Def KEY, "KEY", is_code, is_normal
 946+ 6678             >
 946+ 6678             >Dict_Ptr        defl    $
 946+ 6678             >
 946+ 6678             >//              ______________________________________________________________________
 946+ 6678             >//              Heap part
 946+ 6678             >
 946+ 6678             >
 946+ 6678             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E162             >
 946+ E162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E162             >Latest_Definition defl  Heap_Ptr
 946+ E162             >
 946+ E162             >                // dummy db directives used to calculate length of namec
 946+ E162 4B 45 59    >                db      "KEY"
 946+ E165             >len_NFA         defl    $ - temp_NFA
 946+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E162             >
 946+ E162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E163 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 946+ E166             >                org     $-1                 // alter last byte of Name just above to set
 946+ E165 D9          >                db      {b $} | END_BIT     // msb as name end
 946+ E166             >
 946+ E166 59 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E168             >Prev_Ptr        defl    Heap_Ptr
 946+ E168             >
 946+ E168             >mirror_Ptr      defl    $
 946+ E168             >
 946+ E168 7A 66       >                dw      Dict_Ptr + 2        // xt
 946+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E16A             >
 946+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E16A             >
 946+ E16A             >//              ______________________________________________________________________
 946+ E16A             >//              Dictionary part
 946+ E16A             >
 946+ E16A             >                org     Dict_Ptr
 946+ 6678             >
 946+ 6678 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 667A             >
 946+ 667A             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 667A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 946+ 667A ~           >
 946+ 667A ~           >
 946+ 667A             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 667A             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 667A             >
 946+ 667A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 667A
 948+ 667A C5                           push    bc                  // Save Instruction Pointer
 949+ 667B
 950+ 667B              Key_Wait:
 951+ 667B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 952+ 667F 28 FA                        jr      z, Key_Wait
 953+ 6681
 954+ 6681 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 955+ 6684
 956+ 6684                              // decode character from above table
 957+ 6684 21 1A 66                     ld      hl, Key_Table
 958+ 6687 01 0B 00                     ld      bc, $000B
 959+ 668A ED B1                        cpir
 960+ 668C 20 05                        jr      nz, Key_DontMap
 961+ 668E 21 25 66                         ld      hl, Key_MapTo
 962+ 6691 09                               add     hl, bc
 963+ 6692 7E                               ld      a, (hl)
 964+ 6693 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 965+ 6695 20 09                        jr      nz, Key_NoCapsLock
 966+ 6697 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 967+ 669A 7E                               ld      a, (hl)
 968+ 669B EE 08                            xor     $08
 969+ 669D 77                               ld      (hl), a
 970+ 669E 3E 00                            ld      a, NUL_CHAR
 971+ 66A0 6F           Key_NoCapsLock: ld      l, a
 972+ 66A1 26 00                        ld      h, 0                // Prepare TOS
 973+ 66A3
 974+ 66A3 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 975+ 66A7
 976+ 66A7 C1                           pop     bc                  // Restore Instruction Pointer
 977+ 66A8
 978+ 66A8                              psh1
 978+ 66A8 E5          >                push    hl
 978+ 66A9 DD E9       >                jp      (ix)
 979+ 66AB
 980+ 66AB
 981+ 66AB              //  ______________________________________________________________________
 982+ 66AB              //
 983+ 66AB              // click        --
 984+ 66AB              // This definition need Standard ROM Interrupt to be served
 985+ 66AB              //
 986+ 66AB              //              New_Def CLICK, "CLICK", is_code, is_normal
 987+ 66AB              //
 988+ 66AB              //                push    bc
 989+ 66AB              //              ld      a, ($5C48)          // BORDCR system variable
 990+ 66AB              //              rra
 991+ 66AB              //              rra
 992+ 66AB              //              rra
 993+ 66AB              //              or      $18                 // quick'n'dirty click
 994+ 66AB              //              out     ($fe), a
 995+ 66AB              //              ld      b, 0
 996+ 66AB              //              djnz    $                   // wait loop
 997+ 66AB              //              xor     $18
 998+ 66AB              //              out     ($fe), a
 999+ 66AB              //                pop     bc
1000+ 66AB
1001+ 66AB              //              next
1002+ 66AB
1003+ 66AB              //  ______________________________________________________________________
1004+ 66AB              //
1005+ 66AB              // key?         -- f
1006+ 66AB              // key available
1007+ 66AB              //
1008+ 66AB              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1009+ 66AB              //
1010+ 66AB              //              ld      hl, 0000
1011+ 66AB              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1012+ 66AB              //              jr      z, Key_Q
1013+ 66AB              //                  dec     hl
1014+ 66AB              // Key_Q:
1015+ 66AB              //                psh1
1016+ 66AB              //              next
1017+ 66AB
1018+ 66AB              //  ______________________________________________________________________
1019+ 66AB              //
1020+ 66AB              // ?terminal    -- FALSE | TRUE
1021+ 66AB              // test for BREAK keypress
1022+ 66AB                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1022+ 66AB             >
1022+ 66AB             >Dict_Ptr        defl    $
1022+ 66AB             >
1022+ 66AB             >//              ______________________________________________________________________
1022+ 66AB             >//              Heap part
1022+ 66AB             >
1022+ 66AB             >
1022+ 66AB             >                org     (Heap_Ptr & $1FFF) + $E000
1022+ E16A             >
1022+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1022+ E16A             >Latest_Definition defl  Heap_Ptr
1022+ E16A             >
1022+ E16A             >                // dummy db directives used to calculate length of namec
1022+ E16A 3F 54 45 52 >                db      "?TERMINAL"
1022+ E16E 4D 49 4E 41 >
1022+ E172 4C          >
1022+ E173             >len_NFA         defl    $ - temp_NFA
1022+ E173             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1022+ E16A             >
1022+ E16A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1022+ E16B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1022+ E16F 4D 49 4E 41 >
1022+ E173 4C          >
1022+ E174             >                org     $-1                 // alter last byte of Name just above to set
1022+ E173 CC          >                db      {b $} | END_BIT     // msb as name end
1022+ E174             >
1022+ E174 62 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1022+ E176             >Prev_Ptr        defl    Heap_Ptr
1022+ E176             >
1022+ E176             >mirror_Ptr      defl    $
1022+ E176             >
1022+ E176 AD 66       >                dw      Dict_Ptr + 2        // xt
1022+ E178             >Heap_Ptr        defl    $ - $E000           // save current HP
1022+ E178             >
1022+ E178             >Current_HP      defl  $ - $E000             // used to set HP once!
1022+ E178             >
1022+ E178             >//              ______________________________________________________________________
1022+ E178             >//              Dictionary part
1022+ E178             >
1022+ E178             >                org     Dict_Ptr
1022+ 66AB             >
1022+ 66AB 76 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1022+ 66AD             >
1022+ 66AD             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1022+ 66AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1022+ 66AD ~           >
1022+ 66AD ~           >
1022+ 66AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1022+ 66AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1022+ 66AD             >
1022+ 66AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1023+ 66AD D9                           exx
1024+ 66AE 01 FE 7F                     ld      bc, $7ffe
1025+ 66B1 ED 50                        in      d, (c)
1026+ 66B3 41                           ld      b, c
1027+ 66B4 ED 78                        in      a, (c)
1028+ 66B6 B2                           or       d
1029+ 66B7 1F                           rra
1030+ 66B8 3F                           ccf
1031+ 66B9 ED 62                        sbc     hl, hl
1032+ 66BB E5                           push    hl
1033+ 66BC D9                           exx
1034+ 66BD                              next
1034+ 66BD DD E9       >                jp      (ix)
1035+ 66BF
1036+ 66BF
1037+ 66BF              //  ______________________________________________________________________
1038+ 66BF              //
1039+ 66BF              // inkey        -- c | 0
1040+ 66BF              // call ROM inkey$ routine, returns c or "zero".
1041+ 66BF              //
1042+ 66BF              //              New_Def INKEY, "INKEY", is_code, is_normal
1043+ 66BF              //              push    bc
1044+ 66BF              //              push    de
1045+ 66BF              //              ld      (SP_Saved), sp
1046+ 66BF              //              ld      sp, Cold_origin - 5
1047+ 66BF              //              push    ix
1048+ 66BF              //              call    $15E6                   // instead of 15E9
1049+ 66BF              //              pop     ix
1050+ 66BF              //              ld      sp, (SP_Saved)
1051+ 66BF              //              ld      l, a
1052+ 66BF              //              ld      h, 0
1053+ 66BF              //              pop     de
1054+ 66BF              //              pop     bc
1055+ 66BF              //              psh1
1056+ 66BF
1057+ 66BF              //  ______________________________________________________________________
1058+ 66BF              //
1059+ 66BF              // select      n --
1060+ 66BF              // selects the given channel number
1061+ 66BF
1062+ 66BF                              New_Def SELECT, "SELECT", is_code, is_normal
1062+ 66BF             >
1062+ 66BF             >Dict_Ptr        defl    $
1062+ 66BF             >
1062+ 66BF             >//              ______________________________________________________________________
1062+ 66BF             >//              Heap part
1062+ 66BF             >
1062+ 66BF             >
1062+ 66BF             >                org     (Heap_Ptr & $1FFF) + $E000
1062+ E178             >
1062+ E178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ E178             >Latest_Definition defl  Heap_Ptr
1062+ E178             >
1062+ E178             >                // dummy db directives used to calculate length of namec
1062+ E178 53 45 4C 45 >                db      "SELECT"
1062+ E17C 43 54       >
1062+ E17E             >len_NFA         defl    $ - temp_NFA
1062+ E17E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ E178             >
1062+ E178 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ E179 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1062+ E17D 43 54       >
1062+ E17F             >                org     $-1                 // alter last byte of Name just above to set
1062+ E17E D4          >                db      {b $} | END_BIT     // msb as name end
1062+ E17F             >
1062+ E17F 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1062+ E181             >Prev_Ptr        defl    Heap_Ptr
1062+ E181             >
1062+ E181             >mirror_Ptr      defl    $
1062+ E181             >
1062+ E181 C1 66       >                dw      Dict_Ptr + 2        // xt
1062+ E183             >Heap_Ptr        defl    $ - $E000           // save current HP
1062+ E183             >
1062+ E183             >Current_HP      defl  $ - $E000             // used to set HP once!
1062+ E183             >
1062+ E183             >//              ______________________________________________________________________
1062+ E183             >//              Dictionary part
1062+ E183             >
1062+ E183             >                org     Dict_Ptr
1062+ 66BF             >
1062+ 66BF 81 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1062+ 66C1             >
1062+ 66C1             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 66C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1062+ 66C1 ~           >
1062+ 66C1 ~           >
1062+ 66C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 66C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 66C1             >
1062+ 66C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 66C1 E1                           pop     hl
1064+ 66C2 C5                           push    bc
1065+ 66C3 D5                           push    de
1066+ 66C4 7D                           ld      a, l
1067+ 66C5 ED 73 92 63                  ld      (SP_Saved), sp
1068+ 66C9 31 61 63                     ld      sp, Cold_origin - 5
1069+ 66CC DD E5                        push    ix
1070+ 66CE CD 01 16                     call    $1601
1071+ 66D1 DD E1                        pop     ix
1072+ 66D3 ED 7B 92 63                  ld      sp, (SP_Saved)
1073+ 66D7 D1                           pop     de
1074+ 66D8 C1                           pop     bc
1075+ 66D9                              next
1075+ 66D9 DD E9       >                jp      (ix)
1076+ 66DB
1077+ 66DB              //  ______________________________________________________________________
1078+ 66DB              //
1079+ 66DB              // ZX Spectrum Next - Low Level disk primitives.
1080+ 66DB              // this include is "here" for backward compatibility
1081+ 66DB
1082+ 66DB                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66DB              //  ______________________________________________________________________
   2++66DB              //
   3++66DB              //  next-opt.asm
   4++66DB              //
   5++66DB              //  ZX Spectrum Next - peculiar definitions
   6++66DB              //  ______________________________________________________________________
   7++66DB
   8++66DB              //  ______________________________________________________________________
   9++66DB              //
  10++66DB              // f_seek       d u -- f
  11++66DB              // Seek to position d in file-handle u.
  12++66DB              // Return a false-flag 0 on success, True flag on error
  13++66DB                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66DB             >
  13++66DB             >Dict_Ptr        defl    $
  13++66DB             >
  13++66DB             >//              ______________________________________________________________________
  13++66DB             >//              Heap part
  13++66DB             >
  13++66DB             >
  13++66DB             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E183             >
  13++E183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E183             >Latest_Definition defl  Heap_Ptr
  13++E183             >
  13++E183             >                // dummy db directives used to calculate length of namec
  13++E183 46 5F 53 45 >                db      "F_SEEK"
  13++E187 45 4B       >
  13++E189             >len_NFA         defl    $ - temp_NFA
  13++E189             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E183             >
  13++E183 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E184 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E188 45 4B       >
  13++E18A             >                org     $-1                 // alter last byte of Name just above to set
  13++E189 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18A             >
  13++E18A 78 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18C             >Prev_Ptr        defl    Heap_Ptr
  13++E18C             >
  13++E18C             >mirror_Ptr      defl    $
  13++E18C             >
  13++E18C DD 66       >                dw      Dict_Ptr + 2        // xt
  13++E18E             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18E             >
  13++E18E             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18E             >
  13++E18E             >//              ______________________________________________________________________
  13++E18E             >//              Dictionary part
  13++E18E             >
  13++E18E             >                org     Dict_Ptr
  13++66DB             >
  13++66DB 8C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66DD             >
  13++66DD             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66DD ~           >
  13++66DD ~           >
  13++66DD             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66DD             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66DD             >
  13++66DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66DD D9                            exx
  15++66DE E1                            pop     hl                  // file-handle
  16++66DF 7D                            ld      a, l
  17++66E0 C1                            pop     bc                  // bc has high-word of d
  18++66E1 D1                            pop     de
  19++66E2 D9                           exx
  20++66E3 DD E5                        push    ix
  21++66E5 D5                           push    de
  22++66E6 C5                           push    bc                  // save Instruction Pointer
  23++66E7 D9                            exx
  24++66E8 DD 21 00 00                   ld      ix, 0
  25++66EC F3                            di
  26++66ED CF                            rst     $08
  27++66EE 9F                            db      $9F
  28++66EF              F_Seek_Exit:
  29++66EF FB                           ei
  30++66F0 C1                           pop     bc                  // restore Instruction Pointer
  31++66F1 D1                           pop     de
  32++66F2 DD E1                        pop     ix
  33++66F4 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66F6                              psh1
  34++66F6 E5          >                push    hl
  34++66F7 DD E9       >                jp      (ix)
  35++66F9
  36++66F9              //  ______________________________________________________________________
  37++66F9              //
  38++66F9              // f_close      u -- f
  39++66F9              // Close file-handle u.
  40++66F9              // Return 0 on success, True flag on error
  41++66F9
  42++66F9                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66F9             >
  42++66F9             >Dict_Ptr        defl    $
  42++66F9             >
  42++66F9             >//              ______________________________________________________________________
  42++66F9             >//              Heap part
  42++66F9             >
  42++66F9             >
  42++66F9             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18E             >
  42++E18E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18E             >Latest_Definition defl  Heap_Ptr
  42++E18E             >
  42++E18E             >                // dummy db directives used to calculate length of namec
  42++E18E 46 5F 43 4C >                db      "F_CLOSE"
  42++E192 4F 53 45    >
  42++E195             >len_NFA         defl    $ - temp_NFA
  42++E195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18E             >
  42++E18E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E193 4F 53 45    >
  42++E196             >                org     $-1                 // alter last byte of Name just above to set
  42++E195 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E196             >
  42++E196 83 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E198             >Prev_Ptr        defl    Heap_Ptr
  42++E198             >
  42++E198             >mirror_Ptr      defl    $
  42++E198             >
  42++E198 FB 66       >                dw      Dict_Ptr + 2        // xt
  42++E19A             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19A             >
  42++E19A             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19A             >
  42++E19A             >//              ______________________________________________________________________
  42++E19A             >//              Dictionary part
  42++E19A             >
  42++E19A             >                org     Dict_Ptr
  42++66F9             >
  42++66F9 98 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66FB             >
  42++66FB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66FB ~           >
  42++66FB ~           >
  42++66FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66FB             >
  42++66FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66FB
  44++66FB E1                           pop     hl
  45++66FC 7D                           ld      a, l                // file-handle
  46++66FD DD E5                        push    ix
  47++66FF D5                           push    de
  48++6700 C5                           push    bc                  // Save Instruction pointer
  49++6701 F3                           di
  50++6702 CF                           rst     $08
  51++6703 9B                           db      $9B
  52++6704 18 E9                        jr      F_Seek_Exit
  53++6706              //              ei
  54++6706              //              pop     de
  55++6706              //              pop     bc
  56++6706              //              pop     ix
  57++6706              //              sbc     hl, hl
  58++6706              //              psh1
  59++6706
  60++6706              //  ______________________________________________________________________
  61++6706              //
  62++6706              // f_sync      u -- f
  63++6706              // Close file-handle u.
  64++6706              // Return 0 on success, True flag on error
  65++6706
  66++6706                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++6706             >
  66++6706             >Dict_Ptr        defl    $
  66++6706             >
  66++6706             >//              ______________________________________________________________________
  66++6706             >//              Heap part
  66++6706             >
  66++6706             >
  66++6706             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19A             >
  66++E19A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19A             >Latest_Definition defl  Heap_Ptr
  66++E19A             >
  66++E19A             >                // dummy db directives used to calculate length of namec
  66++E19A 46 5F 53 59 >                db      "F_SYNC"
  66++E19E 4E 43       >
  66++E1A0             >len_NFA         defl    $ - temp_NFA
  66++E1A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19A             >
  66++E19A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E19B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19F 4E 43       >
  66++E1A1             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A0 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A1             >
  66++E1A1 8E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A3             >Prev_Ptr        defl    Heap_Ptr
  66++E1A3             >
  66++E1A3             >mirror_Ptr      defl    $
  66++E1A3             >
  66++E1A3 08 67       >                dw      Dict_Ptr + 2        // xt
  66++E1A5             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A5             >
  66++E1A5             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A5             >
  66++E1A5             >//              ______________________________________________________________________
  66++E1A5             >//              Dictionary part
  66++E1A5             >
  66++E1A5             >                org     Dict_Ptr
  66++6706             >
  66++6706 A3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++6708             >
  66++6708             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++6708 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++6708 ~           >
  66++6708 ~           >
  66++6708             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++6708             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++6708             >
  66++6708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++6708 E1                           pop     hl
  68++6709 7D                           ld      a, l                // file-handle
  69++670A DD E5                        push    ix
  70++670C D5                           push    de
  71++670D C5                           push    bc
  72++670E F3                           di
  73++670F CF                           rst     $08
  74++6710 9C                           db      $9C
  75++6711 18 DC                        jr      F_Seek_Exit
  76++6713              //              ei
  77++6713              //              pop     de
  78++6713              //              pop     bc
  79++6713              //              pop     ix
  80++6713              //              sbc     hl, hl
  81++6713              //              psh1
  82++6713
  83++6713              //  ______________________________________________________________________
  84++6713              //
  85++6713              // f_fgetpos    u -- d f
  86++6713              // Seek to position d in file-handle u.
  87++6713              // Return a false-flag 0 on success, True flag on error
  88++6713                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++6713             >
  88++6713             >Dict_Ptr        defl    $
  88++6713             >
  88++6713             >//              ______________________________________________________________________
  88++6713             >//              Heap part
  88++6713             >
  88++6713             >
  88++6713             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A5             >
  88++E1A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A5             >Latest_Definition defl  Heap_Ptr
  88++E1A5             >
  88++E1A5             >                // dummy db directives used to calculate length of namec
  88++E1A5 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A9 45 54 50 4F >
  88++E1AD 53          >
  88++E1AE             >len_NFA         defl    $ - temp_NFA
  88++E1AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A5             >
  88++E1A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AA 45 54 50 4F >
  88++E1AE 53          >
  88++E1AF             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AE D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AF             >
  88++E1AF 9A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B1             >Prev_Ptr        defl    Heap_Ptr
  88++E1B1             >
  88++E1B1             >mirror_Ptr      defl    $
  88++E1B1             >
  88++E1B1 15 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B3             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B3             >
  88++E1B3             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B3             >
  88++E1B3             >//              ______________________________________________________________________
  88++E1B3             >//              Dictionary part
  88++E1B3             >
  88++E1B3             >                org     Dict_Ptr
  88++6713             >
  88++6713 B1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++6715             >
  88++6715             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++6715 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++6715 ~           >
  88++6715 ~           >
  88++6715             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++6715             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++6715             >
  88++6715             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++6715 E1                            pop     hl
  90++6716 7D                            ld      a, l                // file-handle
  91++6717 DD E5                         push    ix
  92++6719 D5                            push    de
  93++671A C5                            push    bc
  94++671B F3                            di
  95++671C CF                            rst     $08
  96++671D A0                            db      $A0
  97++671E FB                            ei
  98++671F D9                           exx
  99++6720 C1                           pop     bc                  // IP
 100++6721 D1                           pop     de                  // Return Stack Pointer
 101++6722 DD E1                        pop     ix
 102++6724 D9                            exx
 103++6725 D5                            push    de
 104++6726 C5                            push    bc
 105++6727 ED 62                         sbc     hl, hl
 106++6729 E5                            push    hl
 107++672A D9                           exx
 108++672B                              next
 108++672B DD E9       >                jp      (ix)
 109++672D
 110++672D              //  ______________________________________________________________________
 111++672D              //
 112++672D              // f_read       a b u -- n f
 113++672D              // Read b bytes from file-handle u to address a
 114++672D              // Return the actual number n of bytes read
 115++672D              // Return 0 on success, True flag on error
 116++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 116++672D             >
 116++672D             >Dict_Ptr        defl    $
 116++672D             >
 116++672D             >//              ______________________________________________________________________
 116++672D             >//              Heap part
 116++672D             >
 116++672D             >
 116++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B3             >
 116++E1B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B3             >Latest_Definition defl  Heap_Ptr
 116++E1B3             >
 116++E1B3             >                // dummy db directives used to calculate length of namec
 116++E1B3 46 5F 52 45 >                db      "F_READ"
 116++E1B7 41 44       >
 116++E1B9             >len_NFA         defl    $ - temp_NFA
 116++E1B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B3             >
 116++E1B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B4 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B8 41 44       >
 116++E1BA             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B9 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BA             >
 116++E1BA A5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BC             >Prev_Ptr        defl    Heap_Ptr
 116++E1BC             >
 116++E1BC             >mirror_Ptr      defl    $
 116++E1BC             >
 116++E1BC 2F 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BE             >
 116++E1BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BE             >
 116++E1BE             >//              ______________________________________________________________________
 116++E1BE             >//              Dictionary part
 116++E1BE             >
 116++E1BE             >                org     Dict_Ptr
 116++672D             >
 116++672D BC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++672F             >
 116++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++672F ~           >
 116++672F ~           >
 116++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++672F             >
 116++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++672F D9                            exx
 118++6730 E1                            pop     hl
 119++6731 7D                            ld      a, l                // file-handle
 120++6732 C1                            pop     bc                  // bc has bytes to read
 121++6733 DD E3                         ex      (sp), ix            // ix has address
 122++6735 D9                           exx
 123++6736 D5                           push    de                  // Save Return Stack pointer
 124++6737 C5                           push    bc                  // Save Instruction pointer
 125++6738 D9                            exx
 126++6739 F3                            di
 127++673A CF                            rst     $08
 128++673B 9D                            db      $9D
 129++673C              F_Read_Exit:
 130++673C FB                           ei
 131++673D D9                           exx
 132++673E C1                           pop     bc                  // Restore Instruction pointer
 133++673F D1                           pop     de                  // Restore Return Stack pointer
 134++6740 DD E1                        pop     ix                  // Restore ix
 135++6742 D9                            exx
 136++6743 D5                            push    de                  // bytes involved in i/o operation
 137++6744 ED 62                         sbc     hl, hl
 138++6746 E5                            push    hl
 139++6747 D9                           exx
 140++6748                              next
 140++6748 DD E9       >                jp      (ix)
 141++674A
 142++674A              //  ______________________________________________________________________
 143++674A              //
 144++674A              // f_write      a b u -- n f
 145++674A              // Write bytes currently stored at address a to file-handle u.
 146++674A              // Return the actual n bytes written and 0 on success, True flag on error.
 147++674A                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++674A             >
 147++674A             >Dict_Ptr        defl    $
 147++674A             >
 147++674A             >//              ______________________________________________________________________
 147++674A             >//              Heap part
 147++674A             >
 147++674A             >
 147++674A             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BE             >
 147++E1BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BE             >Latest_Definition defl  Heap_Ptr
 147++E1BE             >
 147++E1BE             >                // dummy db directives used to calculate length of namec
 147++E1BE 46 5F 57 52 >                db      "F_WRITE"
 147++E1C2 49 54 45    >
 147++E1C5             >len_NFA         defl    $ - temp_NFA
 147++E1C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BE             >
 147++E1BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BF 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C3 49 54 45    >
 147++E1C6             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C5 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C6             >
 147++E1C6 B3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C8             >Prev_Ptr        defl    Heap_Ptr
 147++E1C8             >
 147++E1C8             >mirror_Ptr      defl    $
 147++E1C8             >
 147++E1C8 4C 67       >                dw      Dict_Ptr + 2        // xt
 147++E1CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1CA             >
 147++E1CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1CA             >
 147++E1CA             >//              ______________________________________________________________________
 147++E1CA             >//              Dictionary part
 147++E1CA             >
 147++E1CA             >                org     Dict_Ptr
 147++674A             >
 147++674A C8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++674C             >
 147++674C             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++674C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++674C ~           >
 147++674C ~           >
 147++674C             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++674C             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++674C             >
 147++674C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++674C D9                            exx
 149++674D E1                            pop     hl
 150++674E 7D                            ld      a, l                // file-handle
 151++674F C1                            pop     bc                  // bc has bytes to read
 152++6750 DD E3                         ex      (sp), ix            // ix has address
 153++6752 D9                           exx
 154++6753 D5                           push    de                  // Save Return Stack pointer
 155++6754 C5                           push    bc                  // Save Instruction pointer
 156++6755 D9                            exx
 157++6756 F3                            di
 158++6757 CF                            rst     $08
 159++6758 9E                            db      $9E
 160++6759 18 E1                         jr F_Read_Exit
 161++675B              //                ei
 162++675B              //                exx
 163++675B              //                pop     de                  // Restore Return Stack pointer
 164++675B              //                pop     bc                  // Restore Instruction pointer
 165++675B              //                pop     ix                  // Restore ix
 166++675B              //                 exx
 167++675B              //                 push    de                  // bytes involved in i/o operation
 168++675B              //                 sbc     hl, hl
 169++675B              //                 push    hl
 170++675B              //                exx
 171++675B              //                next
 172++675B
 173++675B              //  ______________________________________________________________________
 174++675B              //
 175++675B              // f_open       a1 a2 b -- u f
 176++675B              // open a file
 177++675B              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++675B              // a2 is address to an 8-byte header data used in some cases.
 179++675B              // b is access mode-byte, that is a combination of:
 180++675B              // any/all of:
 181++675B              //   esx_mode_read          $01 request read access
 182++675B              //   esx_mode_write         $02 request write access
 183++675B              //   esx_mode_use_header    $40 read/write +3DOS header
 184++675B              // plus one of:
 185++675B              //   esx_mode_open_exist    $00 only open existing file
 186++675B              //   esx_mode_open_creat    $08 open existing or create file
 187++675B              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++675B              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++675B              // Return file-handle u and 0 on success, True flag on error
 190++675B                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++675B             >
 190++675B             >Dict_Ptr        defl    $
 190++675B             >
 190++675B             >//              ______________________________________________________________________
 190++675B             >//              Heap part
 190++675B             >
 190++675B             >
 190++675B             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1CA             >
 190++E1CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1CA             >Latest_Definition defl  Heap_Ptr
 190++E1CA             >
 190++E1CA             >                // dummy db directives used to calculate length of namec
 190++E1CA 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CE 45 4E       >
 190++E1D0             >len_NFA         defl    $ - temp_NFA
 190++E1D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1CA             >
 190++E1CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1CB 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CF 45 4E       >
 190++E1D1             >                org     $-1                 // alter last byte of Name just above to set
 190++E1D0 CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1D1             >
 190++E1D1 BE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D3             >Prev_Ptr        defl    Heap_Ptr
 190++E1D3             >
 190++E1D3             >mirror_Ptr      defl    $
 190++E1D3             >
 190++E1D3 5D 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D5             >
 190++E1D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D5             >
 190++E1D5             >//              ______________________________________________________________________
 190++E1D5             >//              Dictionary part
 190++E1D5             >
 190++E1D5             >                org     Dict_Ptr
 190++675B             >
 190++675B D3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++675D             >
 190++675D             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++675D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++675D ~           >
 190++675D ~           >
 190++675D             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++675D             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++675D             >
 190++675D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++675D D9                            exx
 192++675E C1                            pop     bc                  // file-mode
 193++675F 41                            ld      b, c                // file-mode
 194++6760 D1                            pop     de                  // 8-bytes buffer if any
 195++6761 DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++6763 D9                           exx
 197++6764 D5                           push    de                  // Save Return Stack pointer
 198++6765 C5                           push    bc                  // Save Instruction pointer
 199++6766 D9                            exx
 200++6767 3E 2A                         ld      a, "*"
 201++6769 F3                            di
 202++676A CF                            rst     $08
 203++676B 9A                            db      $9A
 204++676C              F_Open_Exit:
 205++676C FB                            ei
 206++676D 5F                            ld      e, a                // return the handle-number
 207++676E 16 00                         ld      d, 0
 208++6770 18 CA                        jr F_Read_Exit
 209++6772
 210++6772              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++6772              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++6772              //   \ DROP
 213++6772              //   \ F_CLOSE
 214++6772
 215++6772
 216++6772              //  ______________________________________________________________________
 217++6772              //
 218++6772              // f_opendir    a1 -- u f
 219++6772              // open a file
 220++6772                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++6772             >
 220++6772             >Dict_Ptr        defl    $
 220++6772             >
 220++6772             >//              ______________________________________________________________________
 220++6772             >//              Heap part
 220++6772             >
 220++6772             >
 220++6772             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D5             >
 220++E1D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D5             >Latest_Definition defl  Heap_Ptr
 220++E1D5             >
 220++E1D5             >                // dummy db directives used to calculate length of namec
 220++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D9 45 4E 44 49 >
 220++E1DD 52          >
 220++E1DE             >len_NFA         defl    $ - temp_NFA
 220++E1DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D5             >
 220++E1D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D6 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1DA 45 4E 44 49 >
 220++E1DE 52          >
 220++E1DF             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DE D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DF             >
 220++E1DF CA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1E1             >Prev_Ptr        defl    Heap_Ptr
 220++E1E1             >
 220++E1E1             >mirror_Ptr      defl    $
 220++E1E1             >
 220++E1E1 74 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E3             >
 220++E1E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E3             >
 220++E1E3             >//              ______________________________________________________________________
 220++E1E3             >//              Dictionary part
 220++E1E3             >
 220++E1E3             >                org     Dict_Ptr
 220++6772             >
 220++6772 E1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++6774             >
 220++6774             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++6774 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++6774 ~           >
 220++6774 ~           >
 220++6774             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++6774             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++6774             >
 220++6774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++6774 DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++6776 D5                           push    de                  // Save Return Stack pointer
 223++6777 C5                           push    bc                  // Save Instruction pointer
 224++6778 06 10                        ld      b, $10              // file-mode
 225++677A 3E 43                        ld      a, "C"
 226++677C F3                           di
 227++677D CF                           rst     $08
 228++677E A3                           db      $A3
 229++677F 18 EB                        jr      F_Open_Exit
 230++6781
 231++6781
 232++6781              //  ______________________________________________________________________
 233++6781              //
 234++6781              // f_readdir    a1 a2 b -- u f
 235++6781              // open a file
 236++6781                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++6781             >
 236++6781             >Dict_Ptr        defl    $
 236++6781             >
 236++6781             >//              ______________________________________________________________________
 236++6781             >//              Heap part
 236++6781             >
 236++6781             >
 236++6781             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E3             >
 236++E1E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E3             >Latest_Definition defl  Heap_Ptr
 236++E1E3             >
 236++E1E3             >                // dummy db directives used to calculate length of namec
 236++E1E3 46 5F 52 45 >                db      "F_READDIR"
 236++E1E7 41 44 44 49 >
 236++E1EB 52          >
 236++E1EC             >len_NFA         defl    $ - temp_NFA
 236++E1EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E3             >
 236++E1E3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E4 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E8 41 44 44 49 >
 236++E1EC 52          >
 236++E1ED             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EC D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1ED             >
 236++E1ED D5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1EF             >Prev_Ptr        defl    Heap_Ptr
 236++E1EF             >
 236++E1EF             >mirror_Ptr      defl    $
 236++E1EF             >
 236++E1EF 83 67       >                dw      Dict_Ptr + 2        // xt
 236++E1F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1F1             >
 236++E1F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1F1             >
 236++E1F1             >//              ______________________________________________________________________
 236++E1F1             >//              Dictionary part
 236++E1F1             >
 236++E1F1             >                org     Dict_Ptr
 236++6781             >
 236++6781 EF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++6783             >
 236++6783             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++6783 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++6783 ~           >
 236++6783 ~           >
 236++6783             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++6783             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++6783             >
 236++6783             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++6783 D9                            exx
 238++6784 E1                            pop     hl
 239++6785 7D                            ld      a, l
 240++6786 D1                            pop     de
 241++6787 DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6789 D9                           exx
 243++678A D5                           push    de                  // Save Return Stack pointer
 244++678B C5                           push    bc                  // Save Instruction pointer
 245++678C D9                            exx
 246++678D F3                            di
 247++678E CF                            rst     $08
 248++678F A4                            db      $A4
 249++6790 18 DA                         jr      F_Open_Exit
 250++6792
 251++6792
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1083+ 6792
1084+ 6792
1085+ 6792              //  ______________________________________________________________________
1086+ 6792              //
1087+ 6792              // cmove    a1 a2 u --
1088+ 6792              // If u > 0, moves memory content starting at address a1 for n bytes long
1089+ 6792              // storing then starting at address addr2.
1090+ 6792              // The content of a1 is moved first. See CMOVE> also.
1091+ 6792                              New_Def CMOVE, "CMOVE", is_code, is_normal
1091+ 6792             >
1091+ 6792             >Dict_Ptr        defl    $
1091+ 6792             >
1091+ 6792             >//              ______________________________________________________________________
1091+ 6792             >//              Heap part
1091+ 6792             >
1091+ 6792             >
1091+ 6792             >                org     (Heap_Ptr & $1FFF) + $E000
1091+ E1F1             >
1091+ E1F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ E1F1             >Latest_Definition defl  Heap_Ptr
1091+ E1F1             >
1091+ E1F1             >                // dummy db directives used to calculate length of namec
1091+ E1F1 43 4D 4F 56 >                db      "CMOVE"
1091+ E1F5 45          >
1091+ E1F6             >len_NFA         defl    $ - temp_NFA
1091+ E1F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ E1F1             >
1091+ E1F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ E1F2 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1091+ E1F6 45          >
1091+ E1F7             >                org     $-1                 // alter last byte of Name just above to set
1091+ E1F6 C5          >                db      {b $} | END_BIT     // msb as name end
1091+ E1F7             >
1091+ E1F7 E3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1091+ E1F9             >Prev_Ptr        defl    Heap_Ptr
1091+ E1F9             >
1091+ E1F9             >mirror_Ptr      defl    $
1091+ E1F9             >
1091+ E1F9 94 67       >                dw      Dict_Ptr + 2        // xt
1091+ E1FB             >Heap_Ptr        defl    $ - $E000           // save current HP
1091+ E1FB             >
1091+ E1FB             >Current_HP      defl  $ - $E000             // used to set HP once!
1091+ E1FB             >
1091+ E1FB             >//              ______________________________________________________________________
1091+ E1FB             >//              Dictionary part
1091+ E1FB             >
1091+ E1FB             >                org     Dict_Ptr
1091+ 6792             >
1091+ 6792 F9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1091+ 6794             >
1091+ 6794             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 6794 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1091+ 6794 ~           >
1091+ 6794 ~           >
1091+ 6794             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 6794             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 6794             >
1091+ 6794             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 6794 D9                           exx
1093+ 6795
1094+ 6795 C1                           pop     bc                  // bc has counter
1095+ 6796 D1                           pop     de                  // de now has dest
1096+ 6797 E1                           pop     hl                 // hl has source, save Instruction Pointer
1097+ 6798 78                           ld      a, b
1098+ 6799 B1                           or      c
1099+ 679A 28 02                        jr      z, Cmove_NoMove
1100+ 679C ED B0                            ldir
1101+ 679E              Cmove_NoMove:
1102+ 679E D9                           exx
1103+ 679F
1104+ 679F                              next
1104+ 679F DD E9       >                jp      (ix)
1105+ 67A1
1106+ 67A1              //  ______________________________________________________________________
1107+ 67A1              //
1108+ 67A1              // cmove>    a1 a2 u --
1109+ 67A1              // If u > 0, moves memory content starting at address a1 for n bytes long
1110+ 67A1              // storing then starting at address addr2.
1111+ 67A1              // The content of a1 is moved last. See cmove.
1112+ 67A1                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1112+ 67A1             >
1112+ 67A1             >Dict_Ptr        defl    $
1112+ 67A1             >
1112+ 67A1             >//              ______________________________________________________________________
1112+ 67A1             >//              Heap part
1112+ 67A1             >
1112+ 67A1             >
1112+ 67A1             >                org     (Heap_Ptr & $1FFF) + $E000
1112+ E1FB             >
1112+ E1FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ E1FB             >Latest_Definition defl  Heap_Ptr
1112+ E1FB             >
1112+ E1FB             >                // dummy db directives used to calculate length of namec
1112+ E1FB 43 4D 4F 56 >                db      "CMOVE>"
1112+ E1FF 45 3E       >
1112+ E201             >len_NFA         defl    $ - temp_NFA
1112+ E201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ E1FB             >
1112+ E1FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ E1FC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1112+ E200 45 3E       >
1112+ E202             >                org     $-1                 // alter last byte of Name just above to set
1112+ E201 BE          >                db      {b $} | END_BIT     // msb as name end
1112+ E202             >
1112+ E202 F1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1112+ E204             >Prev_Ptr        defl    Heap_Ptr
1112+ E204             >
1112+ E204             >mirror_Ptr      defl    $
1112+ E204             >
1112+ E204 A3 67       >                dw      Dict_Ptr + 2        // xt
1112+ E206             >Heap_Ptr        defl    $ - $E000           // save current HP
1112+ E206             >
1112+ E206             >Current_HP      defl  $ - $E000             // used to set HP once!
1112+ E206             >
1112+ E206             >//              ______________________________________________________________________
1112+ E206             >//              Dictionary part
1112+ E206             >
1112+ E206             >                org     Dict_Ptr
1112+ 67A1             >
1112+ 67A1 04 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1112+ 67A3             >
1112+ 67A3             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 67A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1112+ 67A3 ~           >
1112+ 67A3 ~           >
1112+ 67A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 67A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 67A3             >
1112+ 67A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 67A3 D9                           exx
1114+ 67A4
1115+ 67A4 C1                           pop     bc                  // bc has counter
1116+ 67A5 D1                           pop     de                  // de has dest
1117+ 67A6 E1                           pop     hl                  // hl has source, save Instruction Pointer
1118+ 67A7 78                           ld      a, b
1119+ 67A8 B1                           or      c
1120+ 67A9 28 08                        jr      z, CmoveV_NoMove
1121+ 67AB EB                               ex      de, hl              // compute address to
1122+ 67AC 09                               add     hl, bc              // operate backward
1123+ 67AD 2B                               dec     hl
1124+ 67AE EB                               ex      de, hl
1125+ 67AF 09                               add     hl, bc
1126+ 67B0 2B                               dec     hl
1127+ 67B1 ED B8                            lddr                        // backward
1128+ 67B3              CmoveV_NoMove:
1129+ 67B3 D9                           exx
1130+ 67B4
1131+ 67B4                              next
1131+ 67B4 DD E9       >                jp      (ix)
1132+ 67B6
1133+ 67B6              //  ______________________________________________________________________
1134+ 67B6              //
1135+ 67B6              // um*      u1 u2 -- ud
1136+ 67B6              // Unsigned multiplication
1137+ 67B6              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1138+ 67B6              // On the stack a double number is treated as two single numbers
1139+ 67B6              // where DE is on the top of the stack and HL is the second from top,
1140+ 67B6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1141+ 67B6              // this definition could use "MUL" Z80N new op-code.
1142+ 67B6                              New_Def UM_MUL, "UM*", is_code, is_normal
1142+ 67B6             >
1142+ 67B6             >Dict_Ptr        defl    $
1142+ 67B6             >
1142+ 67B6             >//              ______________________________________________________________________
1142+ 67B6             >//              Heap part
1142+ 67B6             >
1142+ 67B6             >
1142+ 67B6             >                org     (Heap_Ptr & $1FFF) + $E000
1142+ E206             >
1142+ E206             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ E206             >Latest_Definition defl  Heap_Ptr
1142+ E206             >
1142+ E206             >                // dummy db directives used to calculate length of namec
1142+ E206 55 4D 2A    >                db      "UM*"
1142+ E209             >len_NFA         defl    $ - temp_NFA
1142+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ E206             >
1142+ E206 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ E207 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1142+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1142+ E209 AA          >                db      {b $} | END_BIT     // msb as name end
1142+ E20A             >
1142+ E20A FB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1142+ E20C             >Prev_Ptr        defl    Heap_Ptr
1142+ E20C             >
1142+ E20C             >mirror_Ptr      defl    $
1142+ E20C             >
1142+ E20C B8 67       >                dw      Dict_Ptr + 2        // xt
1142+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1142+ E20E             >
1142+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1142+ E20E             >
1142+ E20E             >//              ______________________________________________________________________
1142+ E20E             >//              Dictionary part
1142+ E20E             >
1142+ E20E             >                org     Dict_Ptr
1142+ 67B6             >
1142+ 67B6 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1142+ 67B8             >
1142+ 67B8             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 67B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1142+ 67B8 ~           >
1142+ 67B8 ~           >
1142+ 67B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 67B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 67B8             >
1142+ 67B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 67B8 D9                           exx
1144+ 67B9 D1                           pop     de                    // de has u2 operand
1145+ 67BA E1                           pop     hl                    // hl has u1 operand
1146+ 67BB 45                           ld      b, l
1147+ 67BC 4B                           ld      c, e
1148+ 67BD 5D                           ld      e, l
1149+ 67BE 6A                           ld      l, d
1150+ 67BF E5                           push    hl
1151+ 67C0 69                           ld      l, c
1152+ 67C1 ED 30                        mul
1153+ 67C3 EB                           ex      de, hl
1154+ 67C4 ED 30                        mul
1155+ 67C6 AF                           xor     a
1156+ 67C7 19                           add     hl, de
1157+ 67C8 8F                           adc     a
1158+ 67C9 59                           ld      e, c
1159+ 67CA 50                           ld      d, b
1160+ 67CB ED 30                        mul
1161+ 67CD 47                           ld      b, a
1162+ 67CE 4C                           ld      c, h
1163+ 67CF 7A                           ld      a, d
1164+ 67D0 85                           add     l
1165+ 67D1 67                           ld      h, a
1166+ 67D2 6B                           ld      l, e
1167+ 67D3 D1                           pop     de
1168+ 67D4 ED 30                        mul
1169+ 67D6 EB                           ex      de, hl
1170+ 67D7 ED 4A                        adc     hl, bc
1171+ 67D9 D5                           push    de
1172+ 67DA E5                           push    hl
1173+ 67DB D9                           exx
1174+ 67DC                              next
1174+ 67DC DD E9       >                jp      (ix)
1175+ 67DE
1176+ 67DE              //  ______________________________________________________________________
1177+ 67DE              //
1178+ 67DE              // um/mod      ud u1 -- q r
1179+ 67DE              // divides ud into u1 giving quotient q and remainder r
1180+ 67DE              // algorithm takes 16 bit at a time starting from msb
1181+ 67DE              // DE grows from lsb upward with quotient result
1182+ 67DE              // HL keeps the remainder at each stage of division
1183+ 67DE              // each loop 'lowers' the next binary digit to form the current dividend
1184+ 67DE                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1184+ 67DE             >
1184+ 67DE             >Dict_Ptr        defl    $
1184+ 67DE             >
1184+ 67DE             >//              ______________________________________________________________________
1184+ 67DE             >//              Heap part
1184+ 67DE             >
1184+ 67DE             >
1184+ 67DE             >                org     (Heap_Ptr & $1FFF) + $E000
1184+ E20E             >
1184+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1184+ E20E             >Latest_Definition defl  Heap_Ptr
1184+ E20E             >
1184+ E20E             >                // dummy db directives used to calculate length of namec
1184+ E20E 55 4D 2F 4D >                db      "UM/MOD"
1184+ E212 4F 44       >
1184+ E214             >len_NFA         defl    $ - temp_NFA
1184+ E214             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1184+ E20E             >
1184+ E20E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1184+ E20F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1184+ E213 4F 44       >
1184+ E215             >                org     $-1                 // alter last byte of Name just above to set
1184+ E214 C4          >                db      {b $} | END_BIT     // msb as name end
1184+ E215             >
1184+ E215 06 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1184+ E217             >Prev_Ptr        defl    Heap_Ptr
1184+ E217             >
1184+ E217             >mirror_Ptr      defl    $
1184+ E217             >
1184+ E217 E0 67       >                dw      Dict_Ptr + 2        // xt
1184+ E219             >Heap_Ptr        defl    $ - $E000           // save current HP
1184+ E219             >
1184+ E219             >Current_HP      defl  $ - $E000             // used to set HP once!
1184+ E219             >
1184+ E219             >//              ______________________________________________________________________
1184+ E219             >//              Dictionary part
1184+ E219             >
1184+ E219             >                org     Dict_Ptr
1184+ 67DE             >
1184+ 67DE 17 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1184+ 67E0             >
1184+ 67E0             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1184+ 67E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1184+ 67E0 ~           >
1184+ 67E0 ~           >
1184+ 67E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1184+ 67E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1184+ 67E0             >
1184+ 67E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1185+ 67E0 D9                           exx
1186+ 67E1 C1                           pop     bc                      // divisor
1187+ 67E2
1188+ 67E2 E1                           pop     hl                      // < high part
1189+ 67E3 D1                           pop     de                      // < low part and
1190+ 67E4
1191+ 67E4 7D                           ld      a, l                    // check without changing arguments
1192+ 67E5 91                           sub     c                       // if divisor is greater than high part
1193+ 67E6 7C                           ld      a, h                    // so quotient will be in range
1194+ 67E7 98                           sbc     a, b
1195+ 67E8 30 20                        jr      nc, Um_DivMod_OutOfRange
1196+ 67EA 3E 10                            ld      a, 16
1197+ 67EC              Um_DivMod_Loop:
1198+ 67EC CB 23                                sla     e
1199+ 67EE CB 12                                rl      d
1200+ 67F0 ED 6A                                adc     hl, hl
1201+ 67F2 30 05                                jr      nc, Um_DivMod_Carry
1202+ 67F4 A7                                       and     a
1203+ 67F5 ED 42                                    sbc     hl, bc
1204+ 67F7 18 07                                jr      Um_DivMod_Endif    // else
1205+ 67F9              Um_DivMod_Carry:
1206+ 67F9 A7                                       and     a
1207+ 67FA ED 42                                    sbc     hl, bc
1208+ 67FC 30 02                                    jr      nc, Um_DivMod_Endif
1209+ 67FE 09                                           add     hl, bc
1210+ 67FF 1B                                           dec     de
1211+ 6800              Um_DivMod_Endif:                                   // endif
1212+ 6800 13                                   inc     de
1213+ 6801 3D                                   dec     a
1214+ 6802 20 E8                            jr      nz, Um_DivMod_Loop
1215+ 6804 EB                               ex      de, hl
1216+ 6805              Um_DivMod_Bailout:
1217+ 6805 D5                               push    de                  // de := remanider
1218+ 6806 E5                               push    hl                  // hl := quotient
1219+ 6807 D9                               exx
1220+ 6808                                  next
1220+ 6808 DD E9       >                jp      (ix)
1221+ 680A
1222+ 680A              Um_DivMod_OutOfRange:
1223+ 680A 21 FF FF                     ld      hl, -1
1224+ 680D 54                           ld      d, h
1225+ 680E 5D                           ld      e, l
1226+ 680F 18 F4                        jr      Um_DivMod_Bailout
1227+ 6811
1228+ 6811              //  ______________________________________________________________________
1229+ 6811              //
1230+ 6811              // and          n1 n2 -- n3
1231+ 6811              // bit logical AND. Returns n3 as n1 & n2
1232+ 6811                              New_Def AND_OP, "AND", is_code, is_normal
1232+ 6811             >
1232+ 6811             >Dict_Ptr        defl    $
1232+ 6811             >
1232+ 6811             >//              ______________________________________________________________________
1232+ 6811             >//              Heap part
1232+ 6811             >
1232+ 6811             >
1232+ 6811             >                org     (Heap_Ptr & $1FFF) + $E000
1232+ E219             >
1232+ E219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1232+ E219             >Latest_Definition defl  Heap_Ptr
1232+ E219             >
1232+ E219             >                // dummy db directives used to calculate length of namec
1232+ E219 41 4E 44    >                db      "AND"
1232+ E21C             >len_NFA         defl    $ - temp_NFA
1232+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1232+ E219             >
1232+ E219 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1232+ E21A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1232+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1232+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1232+ E21D             >
1232+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1232+ E21F             >Prev_Ptr        defl    Heap_Ptr
1232+ E21F             >
1232+ E21F             >mirror_Ptr      defl    $
1232+ E21F             >
1232+ E21F 13 68       >                dw      Dict_Ptr + 2        // xt
1232+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1232+ E221             >
1232+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1232+ E221             >
1232+ E221             >//              ______________________________________________________________________
1232+ E221             >//              Dictionary part
1232+ E221             >
1232+ E221             >                org     Dict_Ptr
1232+ 6811             >
1232+ 6811 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1232+ 6813             >
1232+ 6813             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1232+ 6813 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1232+ 6813 ~           >
1232+ 6813 ~           >
1232+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
1232+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
1232+ 6813             >
1232+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1233+ 6813 D9                           exx
1234+ 6814 D1                           pop     de
1235+ 6815 E1                           pop     hl
1236+ 6816 7B                           ld      a, e
1237+ 6817 A5                           and     l
1238+ 6818 6F                           ld      l, a
1239+ 6819 7A                           ld      a, d
1240+ 681A A4                           and     h
1241+ 681B              Boolean_exit:
1242+ 681B 67                           ld      h, a
1243+ 681C E5                           push    hl
1244+ 681D D9                           exx
1245+ 681E                              next
1245+ 681E DD E9       >                jp      (ix)
1246+ 6820
1247+ 6820              //  ______________________________________________________________________
1248+ 6820              //
1249+ 6820              // or           n1 n2 -- n3
1250+ 6820              // bit logical OR. Returns n3 as n1 | n2
1251+ 6820                              New_Def OR_OP, "OR", is_code, is_normal
1251+ 6820             >
1251+ 6820             >Dict_Ptr        defl    $
1251+ 6820             >
1251+ 6820             >//              ______________________________________________________________________
1251+ 6820             >//              Heap part
1251+ 6820             >
1251+ 6820             >
1251+ 6820             >                org     (Heap_Ptr & $1FFF) + $E000
1251+ E221             >
1251+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ E221             >Latest_Definition defl  Heap_Ptr
1251+ E221             >
1251+ E221             >                // dummy db directives used to calculate length of namec
1251+ E221 4F 52       >                db      "OR"
1251+ E223             >len_NFA         defl    $ - temp_NFA
1251+ E223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ E221             >
1251+ E221 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ E222 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1251+ E224             >                org     $-1                 // alter last byte of Name just above to set
1251+ E223 D2          >                db      {b $} | END_BIT     // msb as name end
1251+ E224             >
1251+ E224 19 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1251+ E226             >Prev_Ptr        defl    Heap_Ptr
1251+ E226             >
1251+ E226             >mirror_Ptr      defl    $
1251+ E226             >
1251+ E226 22 68       >                dw      Dict_Ptr + 2        // xt
1251+ E228             >Heap_Ptr        defl    $ - $E000           // save current HP
1251+ E228             >
1251+ E228             >Current_HP      defl  $ - $E000             // used to set HP once!
1251+ E228             >
1251+ E228             >//              ______________________________________________________________________
1251+ E228             >//              Dictionary part
1251+ E228             >
1251+ E228             >                org     Dict_Ptr
1251+ 6820             >
1251+ 6820 26 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1251+ 6822             >
1251+ 6822             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 6822 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 6822 ~           >
1251+ 6822 ~           >
1251+ 6822             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 6822             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 6822             >
1251+ 6822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 6822 D9                           exx
1253+ 6823 D1                           pop     de
1254+ 6824 E1                           pop     hl
1255+ 6825 7B                           ld      a, e
1256+ 6826 B5                           or      l
1257+ 6827 6F                           ld      l, a
1258+ 6828 7A                           ld      a, d
1259+ 6829 B4                           or      h
1260+ 682A 18 EF                        jr      Boolean_exit
1261+ 682C                        //    ld      h, a
1262+ 682C                        //    push    hl
1263+ 682C                        //    exx
1264+ 682C                        //    next
1265+ 682C
1266+ 682C              //  ______________________________________________________________________
1267+ 682C              //
1268+ 682C              // xor          n1 n2 -- n3
1269+ 682C              // bit logical OR. Returns n3 as n1 ^ n2
1270+ 682C                              New_Def XOR_OP, "XOR", is_code, is_normal
1270+ 682C             >
1270+ 682C             >Dict_Ptr        defl    $
1270+ 682C             >
1270+ 682C             >//              ______________________________________________________________________
1270+ 682C             >//              Heap part
1270+ 682C             >
1270+ 682C             >
1270+ 682C             >                org     (Heap_Ptr & $1FFF) + $E000
1270+ E228             >
1270+ E228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ E228             >Latest_Definition defl  Heap_Ptr
1270+ E228             >
1270+ E228             >                // dummy db directives used to calculate length of namec
1270+ E228 58 4F 52    >                db      "XOR"
1270+ E22B             >len_NFA         defl    $ - temp_NFA
1270+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ E228             >
1270+ E228 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ E229 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1270+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1270+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1270+ E22C             >
1270+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1270+ E22E             >Prev_Ptr        defl    Heap_Ptr
1270+ E22E             >
1270+ E22E             >mirror_Ptr      defl    $
1270+ E22E             >
1270+ E22E 2E 68       >                dw      Dict_Ptr + 2        // xt
1270+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1270+ E230             >
1270+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1270+ E230             >
1270+ E230             >//              ______________________________________________________________________
1270+ E230             >//              Dictionary part
1270+ E230             >
1270+ E230             >                org     Dict_Ptr
1270+ 682C             >
1270+ 682C 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1270+ 682E             >
1270+ 682E             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 682E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 682E ~           >
1270+ 682E ~           >
1270+ 682E             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 682E             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 682E             >
1270+ 682E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 682E D9                           exx
1272+ 682F D1                           pop     de
1273+ 6830 E1                           pop     hl
1274+ 6831 7B                           ld      a, e
1275+ 6832 AD                           xor     l
1276+ 6833 6F                           ld      l, a
1277+ 6834 7A                           ld      a, d
1278+ 6835 AC                           xor     h
1279+ 6836 18 E3                        jr      Boolean_exit
1280+ 6838                        //    ld      h, a
1281+ 6838                        //    push    hl
1282+ 6838                        //    exx
1283+ 6838                        //    next
1284+ 6838
1285+ 6838              //  ______________________________________________________________________
1286+ 6838              //
1287+ 6838              // sp@      -- a
1288+ 6838              // returns on top of stack the value of SP before execution
1289+ 6838                              New_Def SPFETCH, "SP@", is_code, is_normal
1289+ 6838             >
1289+ 6838             >Dict_Ptr        defl    $
1289+ 6838             >
1289+ 6838             >//              ______________________________________________________________________
1289+ 6838             >//              Heap part
1289+ 6838             >
1289+ 6838             >
1289+ 6838             >                org     (Heap_Ptr & $1FFF) + $E000
1289+ E230             >
1289+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1289+ E230             >Latest_Definition defl  Heap_Ptr
1289+ E230             >
1289+ E230             >                // dummy db directives used to calculate length of namec
1289+ E230 53 50 40    >                db      "SP@"
1289+ E233             >len_NFA         defl    $ - temp_NFA
1289+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1289+ E230             >
1289+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1289+ E231 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1289+ E234             >                org     $-1                 // alter last byte of Name just above to set
1289+ E233 C0          >                db      {b $} | END_BIT     // msb as name end
1289+ E234             >
1289+ E234 28 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1289+ E236             >Prev_Ptr        defl    Heap_Ptr
1289+ E236             >
1289+ E236             >mirror_Ptr      defl    $
1289+ E236             >
1289+ E236 3A 68       >                dw      Dict_Ptr + 2        // xt
1289+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1289+ E238             >
1289+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1289+ E238             >
1289+ E238             >//              ______________________________________________________________________
1289+ E238             >//              Dictionary part
1289+ E238             >
1289+ E238             >                org     Dict_Ptr
1289+ 6838             >
1289+ 6838 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1289+ 683A             >
1289+ 683A             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1289+ 683A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1289+ 683A ~           >
1289+ 683A ~           >
1289+ 683A             >                endif           ; ok        // for other definitions it "points" the correct handler
1289+ 683A             >                // Use of "; ok" to suppress "warning[fwdref]"
1289+ 683A             >
1289+ 683A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1290+ 683A
1291+ 683A 21 00 00                     ld      hl, 0
1292+ 683D 39                           add     hl, sp
1293+ 683E
1294+ 683E                              psh1
1294+ 683E E5          >                push    hl
1294+ 683F DD E9       >                jp      (ix)
1295+ 6841
1296+ 6841              //  ______________________________________________________________________
1297+ 6841              //
1298+ 6841              // sp!      a --
1299+ 6841              // restore SP to the initial value passed
1300+ 6841              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1301+ 6841                              New_Def SPSTORE, "SP!", is_code, is_normal
1301+ 6841             >
1301+ 6841             >Dict_Ptr        defl    $
1301+ 6841             >
1301+ 6841             >//              ______________________________________________________________________
1301+ 6841             >//              Heap part
1301+ 6841             >
1301+ 6841             >
1301+ 6841             >                org     (Heap_Ptr & $1FFF) + $E000
1301+ E238             >
1301+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ E238             >Latest_Definition defl  Heap_Ptr
1301+ E238             >
1301+ E238             >                // dummy db directives used to calculate length of namec
1301+ E238 53 50 21    >                db      "SP!"
1301+ E23B             >len_NFA         defl    $ - temp_NFA
1301+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ E238             >
1301+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ E239 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1301+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1301+ E23B A1          >                db      {b $} | END_BIT     // msb as name end
1301+ E23C             >
1301+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1301+ E23E             >Prev_Ptr        defl    Heap_Ptr
1301+ E23E             >
1301+ E23E             >mirror_Ptr      defl    $
1301+ E23E             >
1301+ E23E 43 68       >                dw      Dict_Ptr + 2        // xt
1301+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1301+ E240             >
1301+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1301+ E240             >
1301+ E240             >//              ______________________________________________________________________
1301+ E240             >//              Dictionary part
1301+ E240             >
1301+ E240             >                org     Dict_Ptr
1301+ 6841             >
1301+ 6841 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1301+ 6843             >
1301+ 6843             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 6843 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1301+ 6843 ~           >
1301+ 6843 ~           >
1301+ 6843             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 6843             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 6843             >
1301+ 6843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 6843 E1                           pop     hl
1303+ 6844 F9                           ld      sp, hl
1304+ 6845
1305+ 6845                              next
1305+ 6845 DD E9       >                jp      (ix)
1306+ 6847
1307+ 6847              //  ______________________________________________________________________
1308+ 6847              //
1309+ 6847              // rp@      -- a
1310+ 6847              // returns on top of stack the value of Return-Pointer
1311+ 6847                              New_Def RPFETCH, "RP@", is_code, is_normal
1311+ 6847             >
1311+ 6847             >Dict_Ptr        defl    $
1311+ 6847             >
1311+ 6847             >//              ______________________________________________________________________
1311+ 6847             >//              Heap part
1311+ 6847             >
1311+ 6847             >
1311+ 6847             >                org     (Heap_Ptr & $1FFF) + $E000
1311+ E240             >
1311+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ E240             >Latest_Definition defl  Heap_Ptr
1311+ E240             >
1311+ E240             >                // dummy db directives used to calculate length of namec
1311+ E240 52 50 40    >                db      "RP@"
1311+ E243             >len_NFA         defl    $ - temp_NFA
1311+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ E240             >
1311+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ E241 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1311+ E244             >                org     $-1                 // alter last byte of Name just above to set
1311+ E243 C0          >                db      {b $} | END_BIT     // msb as name end
1311+ E244             >
1311+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1311+ E246             >Prev_Ptr        defl    Heap_Ptr
1311+ E246             >
1311+ E246             >mirror_Ptr      defl    $
1311+ E246             >
1311+ E246 49 68       >                dw      Dict_Ptr + 2        // xt
1311+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1311+ E248             >
1311+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1311+ E248             >
1311+ E248             >//              ______________________________________________________________________
1311+ E248             >//              Dictionary part
1311+ E248             >
1311+ E248             >                org     Dict_Ptr
1311+ 6847             >
1311+ 6847 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1311+ 6849             >
1311+ 6849             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6849 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1311+ 6849 ~           >
1311+ 6849 ~           >
1311+ 6849             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6849             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6849             >
1311+ 6849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6849
1313+ 6849                              // *** ldhlrp
1314+ 6849                              // *** ex      de, hl
1315+ 6849 D5                           push de
1316+ 684A
1317+ 684A                              next
1317+ 684A DD E9       >                jp      (ix)
1318+ 684C
1319+ 684C              //  ______________________________________________________________________
1320+ 684C              //
1321+ 684C              // rp!      a --
1322+ 684C              // restore RP to the initial value passed
1323+ 684C              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1324+ 684C                              New_Def RPSTORE, "RP!", is_code, is_normal
1324+ 684C             >
1324+ 684C             >Dict_Ptr        defl    $
1324+ 684C             >
1324+ 684C             >//              ______________________________________________________________________
1324+ 684C             >//              Heap part
1324+ 684C             >
1324+ 684C             >
1324+ 684C             >                org     (Heap_Ptr & $1FFF) + $E000
1324+ E248             >
1324+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ E248             >Latest_Definition defl  Heap_Ptr
1324+ E248             >
1324+ E248             >                // dummy db directives used to calculate length of namec
1324+ E248 52 50 21    >                db      "RP!"
1324+ E24B             >len_NFA         defl    $ - temp_NFA
1324+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ E248             >
1324+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ E249 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1324+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1324+ E24B A1          >                db      {b $} | END_BIT     // msb as name end
1324+ E24C             >
1324+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1324+ E24E             >Prev_Ptr        defl    Heap_Ptr
1324+ E24E             >
1324+ E24E             >mirror_Ptr      defl    $
1324+ E24E             >
1324+ E24E 4E 68       >                dw      Dict_Ptr + 2        // xt
1324+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1324+ E250             >
1324+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1324+ E250             >
1324+ E250             >//              ______________________________________________________________________
1324+ E250             >//              Dictionary part
1324+ E250             >
1324+ E250             >                org     Dict_Ptr
1324+ 684C             >
1324+ 684C 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1324+ 684E             >
1324+ 684E             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 684E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1324+ 684E ~           >
1324+ 684E ~           >
1324+ 684E             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 684E             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 684E             >
1324+ 684E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 684E D1                           pop     de
1326+ 684F                              // *** ex      de, hl
1327+ 684F                              // *** ldrphl
1328+ 684F
1329+ 684F                              next
1329+ 684F DD E9       >                jp      (ix)
1330+ 6851
1331+ 6851              //  ______________________________________________________________________
1332+ 6851              //
1333+ 6851              // exit       --
1334+ 6851              // exits back to the caller word
1335+ 6851                              New_Def EXIT, "EXIT", is_code, is_normal
1335+ 6851             >
1335+ 6851             >Dict_Ptr        defl    $
1335+ 6851             >
1335+ 6851             >//              ______________________________________________________________________
1335+ 6851             >//              Heap part
1335+ 6851             >
1335+ 6851             >
1335+ 6851             >                org     (Heap_Ptr & $1FFF) + $E000
1335+ E250             >
1335+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ E250             >Latest_Definition defl  Heap_Ptr
1335+ E250             >
1335+ E250             >                // dummy db directives used to calculate length of namec
1335+ E250 45 58 49 54 >                db      "EXIT"
1335+ E254             >len_NFA         defl    $ - temp_NFA
1335+ E254             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ E250             >
1335+ E250 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ E251 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1335+ E255             >                org     $-1                 // alter last byte of Name just above to set
1335+ E254 D4          >                db      {b $} | END_BIT     // msb as name end
1335+ E255             >
1335+ E255 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1335+ E257             >Prev_Ptr        defl    Heap_Ptr
1335+ E257             >
1335+ E257             >mirror_Ptr      defl    $
1335+ E257             >
1335+ E257 53 68       >                dw      Dict_Ptr + 2        // xt
1335+ E259             >Heap_Ptr        defl    $ - $E000           // save current HP
1335+ E259             >
1335+ E259             >Current_HP      defl  $ - $E000             // used to set HP once!
1335+ E259             >
1335+ E259             >//              ______________________________________________________________________
1335+ E259             >//              Dictionary part
1335+ E259             >
1335+ E259             >                org     Dict_Ptr
1335+ 6851             >
1335+ 6851 57 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1335+ 6853             >
1335+ 6853             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 6853 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1335+ 6853 ~           >
1335+ 6853 ~           >
1335+ 6853             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 6853             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 6853             >
1335+ 6853             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 6853 EB                           ex      de, hl
1337+ 6854                              // *** ldhlrp                      // Get Return Stack Pointer
1338+ 6854 4E                           ld      c, (hl)             // pop Instruction Pointer
1339+ 6855 23                           inc     hl                  // from Return Stack
1340+ 6856 46                           ld      b, (hl)
1341+ 6857 23                           inc     hl
1342+ 6858                              // *** ldrphl                      // Set Return Stack Pointer
1343+ 6858 EB                           ex      de, hl
1344+ 6859                              next
1344+ 6859 DD E9       >                jp      (ix)
1345+ 685B
1346+ 685B              //  ______________________________________________________________________
1347+ 685B              //
1348+ 685B              // lastl      --
1349+ 685B              // exits back to the caller word
1350+ 685B              //              New_Def EXIT, "LASTL", is_code, is_normal
1351+ 685B              //              push    de
1352+ 685B              //              ex      de, hl //**
1353+ 685B              //              // *** ldhlrp                      // Get Return Stack Pointer
1354+ 685B              //              ld      e, (hl)             // pop Instruction Pointer
1355+ 685B              //              inc     hl                  // from Return Stack
1356+ 685B              //              ld      d, (hl)
1357+ 685B              //              inc     hl
1358+ 685B              //              ld      (hl), e
1359+ 685B              //              inc     hl
1360+ 685B              //              ld      (hl), d
1361+ 685B              //              add     hl, -3
1362+ 685B              //              pop     de
1363+ 685B              //              next
1364+ 685B
1365+ 685B              //  ______________________________________________________________________
1366+ 685B              //
1367+ 685B              // >r      n --
1368+ 685B              // pop from calculator-stack and push into return-stack
1369+ 685B                              New_Def TO_R, ">R", is_code, is_normal
1369+ 685B             >
1369+ 685B             >Dict_Ptr        defl    $
1369+ 685B             >
1369+ 685B             >//              ______________________________________________________________________
1369+ 685B             >//              Heap part
1369+ 685B             >
1369+ 685B             >
1369+ 685B             >                org     (Heap_Ptr & $1FFF) + $E000
1369+ E259             >
1369+ E259             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1369+ E259             >Latest_Definition defl  Heap_Ptr
1369+ E259             >
1369+ E259             >                // dummy db directives used to calculate length of namec
1369+ E259 3E 52       >                db      ">R"
1369+ E25B             >len_NFA         defl    $ - temp_NFA
1369+ E25B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1369+ E259             >
1369+ E259 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1369+ E25A 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1369+ E25C             >                org     $-1                 // alter last byte of Name just above to set
1369+ E25B D2          >                db      {b $} | END_BIT     // msb as name end
1369+ E25C             >
1369+ E25C 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1369+ E25E             >Prev_Ptr        defl    Heap_Ptr
1369+ E25E             >
1369+ E25E             >mirror_Ptr      defl    $
1369+ E25E             >
1369+ E25E 5D 68       >                dw      Dict_Ptr + 2        // xt
1369+ E260             >Heap_Ptr        defl    $ - $E000           // save current HP
1369+ E260             >
1369+ E260             >Current_HP      defl  $ - $E000             // used to set HP once!
1369+ E260             >
1369+ E260             >//              ______________________________________________________________________
1369+ E260             >//              Dictionary part
1369+ E260             >
1369+ E260             >                org     Dict_Ptr
1369+ 685B             >
1369+ 685B 5E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1369+ 685D             >
1369+ 685D             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1369+ 685D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1369+ 685D ~           >
1369+ 685D ~           >
1369+ 685D             >                endif           ; ok        // for other definitions it "points" the correct handler
1369+ 685D             >                // Use of "; ok" to suppress "warning[fwdref]"
1369+ 685D             >
1369+ 685D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1370+ 685D E1                           pop     hl
1371+ 685E EB                           ex      de, hl //**
1372+ 685F                              // *** ldhlrp
1373+ 685F 2B                           dec     hl
1374+ 6860 72                           ld      (hl), d             // store current TOS
1375+ 6861 2B                           dec     hl                  // to Return Stack
1376+ 6862 73                           ld      (hl), e
1377+ 6863                              // *** ldrphl
1378+ 6863 EB                           ex      de, hl //**
1379+ 6864                              next
1379+ 6864 DD E9       >                jp      (ix)
1380+ 6866
1381+ 6866              //  ______________________________________________________________________
1382+ 6866              //
1383+ 6866              // r>      -- n
1384+ 6866              // pop from return-stack and push into calculator-stack
1385+ 6866                              New_Def R_TO, "R>", is_code, is_normal
1385+ 6866             >
1385+ 6866             >Dict_Ptr        defl    $
1385+ 6866             >
1385+ 6866             >//              ______________________________________________________________________
1385+ 6866             >//              Heap part
1385+ 6866             >
1385+ 6866             >
1385+ 6866             >                org     (Heap_Ptr & $1FFF) + $E000
1385+ E260             >
1385+ E260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ E260             >Latest_Definition defl  Heap_Ptr
1385+ E260             >
1385+ E260             >                // dummy db directives used to calculate length of namec
1385+ E260 52 3E       >                db      "R>"
1385+ E262             >len_NFA         defl    $ - temp_NFA
1385+ E262             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ E260             >
1385+ E260 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ E261 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1385+ E263             >                org     $-1                 // alter last byte of Name just above to set
1385+ E262 BE          >                db      {b $} | END_BIT     // msb as name end
1385+ E263             >
1385+ E263 59 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1385+ E265             >Prev_Ptr        defl    Heap_Ptr
1385+ E265             >
1385+ E265             >mirror_Ptr      defl    $
1385+ E265             >
1385+ E265 68 68       >                dw      Dict_Ptr + 2        // xt
1385+ E267             >Heap_Ptr        defl    $ - $E000           // save current HP
1385+ E267             >
1385+ E267             >Current_HP      defl  $ - $E000             // used to set HP once!
1385+ E267             >
1385+ E267             >//              ______________________________________________________________________
1385+ E267             >//              Dictionary part
1385+ E267             >
1385+ E267             >                org     Dict_Ptr
1385+ 6866             >
1385+ 6866 65 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1385+ 6868             >
1385+ 6868             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6868 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 6868 ~           >
1385+ 6868 ~           >
1385+ 6868             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6868             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6868             >
1385+ 6868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6868
1387+ 6868 EB                           ex      de, hl //**
1388+ 6869                              // *** ldhlrp
1389+ 6869 5E                           ld      e, (hl)             // retrieve from Return Stack
1390+ 686A 23                           inc     hl
1391+ 686B 56                           ld      d, (hl)
1392+ 686C 23                           inc     hl
1393+ 686D                              // *** ldrphl
1394+ 686D EB                           ex      de, hl //**
1395+ 686E E5                           push    hl
1396+ 686F                              next
1396+ 686F DD E9       >                jp      (ix)
1397+ 6871
1398+ 6871              //  ______________________________________________________________________
1399+ 6871              //
1400+ 6871              // r@           -- n
1401+ 6871              // return on top of stack the value of top of return-stack
1402+ 6871              // Since this is the same as I, we alter R's CFA to jump there
1403+ 6871                              New_Def R_OP, "R@", is_code, is_normal
1403+ 6871             >
1403+ 6871             >Dict_Ptr        defl    $
1403+ 6871             >
1403+ 6871             >//              ______________________________________________________________________
1403+ 6871             >//              Heap part
1403+ 6871             >
1403+ 6871             >
1403+ 6871             >                org     (Heap_Ptr & $1FFF) + $E000
1403+ E267             >
1403+ E267             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ E267             >Latest_Definition defl  Heap_Ptr
1403+ E267             >
1403+ E267             >                // dummy db directives used to calculate length of namec
1403+ E267 52 40       >                db      "R@"
1403+ E269             >len_NFA         defl    $ - temp_NFA
1403+ E269             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ E267             >
1403+ E267 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ E268 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1403+ E26A             >                org     $-1                 // alter last byte of Name just above to set
1403+ E269 C0          >                db      {b $} | END_BIT     // msb as name end
1403+ E26A             >
1403+ E26A 60 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1403+ E26C             >Prev_Ptr        defl    Heap_Ptr
1403+ E26C             >
1403+ E26C             >mirror_Ptr      defl    $
1403+ E26C             >
1403+ E26C 73 68       >                dw      Dict_Ptr + 2        // xt
1403+ E26E             >Heap_Ptr        defl    $ - $E000           // save current HP
1403+ E26E             >
1403+ E26E             >Current_HP      defl  $ - $E000             // used to set HP once!
1403+ E26E             >
1403+ E26E             >//              ______________________________________________________________________
1403+ E26E             >//              Dictionary part
1403+ E26E             >
1403+ E26E             >                org     Dict_Ptr
1403+ 6871             >
1403+ 6871 6C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1403+ 6873             >
1403+ 6873             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 6873 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1403+ 6873 ~           >
1403+ 6873 ~           >
1403+ 6873             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 6873             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 6873             >
1403+ 6873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 6873                          //  Behave  I_Ptr
1405+ 6873 C3 3A 64                     jp      I_Ptr
1406+ 6876
1407+ 6876              //  ______________________________________________________________________
1408+ 6876              //
1409+ 6876              // r            -- n
1410+ 6876              // return on top of stack the value of top of return-stack
1411+ 6876              // Since this is the same as I, we alter R's CFA to jump there
1412+ 6876              //              New_Def R_OLD, "R", is_code, is_normal
1413+ 6876              //              jp      I_Ptr
1414+ 6876
1415+ 6876              //  ______________________________________________________________________
1416+ 6876              //
1417+ 6876              // 0=           n -- f
1418+ 6876              // true (non zero) if n is zero, false (0) elsewere
1419+ 6876                              New_Def ZEQUAL, "0=", is_code, is_normal
1419+ 6876             >
1419+ 6876             >Dict_Ptr        defl    $
1419+ 6876             >
1419+ 6876             >//              ______________________________________________________________________
1419+ 6876             >//              Heap part
1419+ 6876             >
1419+ 6876             >
1419+ 6876             >                org     (Heap_Ptr & $1FFF) + $E000
1419+ E26E             >
1419+ E26E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ E26E             >Latest_Definition defl  Heap_Ptr
1419+ E26E             >
1419+ E26E             >                // dummy db directives used to calculate length of namec
1419+ E26E 30 3D       >                db      "0="
1419+ E270             >len_NFA         defl    $ - temp_NFA
1419+ E270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ E26E             >
1419+ E26E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ E26F 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1419+ E271             >                org     $-1                 // alter last byte of Name just above to set
1419+ E270 BD          >                db      {b $} | END_BIT     // msb as name end
1419+ E271             >
1419+ E271 67 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1419+ E273             >Prev_Ptr        defl    Heap_Ptr
1419+ E273             >
1419+ E273             >mirror_Ptr      defl    $
1419+ E273             >
1419+ E273 78 68       >                dw      Dict_Ptr + 2        // xt
1419+ E275             >Heap_Ptr        defl    $ - $E000           // save current HP
1419+ E275             >
1419+ E275             >Current_HP      defl  $ - $E000             // used to set HP once!
1419+ E275             >
1419+ E275             >//              ______________________________________________________________________
1419+ E275             >//              Dictionary part
1419+ E275             >
1419+ E275             >                org     Dict_Ptr
1419+ 6876             >
1419+ 6876 73 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1419+ 6878             >
1419+ 6878             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6878 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1419+ 6878 ~           >
1419+ 6878 ~           >
1419+ 6878             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6878             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6878             >
1419+ 6878             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6878              Zero_Equal:
1421+ 6878 E1                           pop     hl
1422+ 6879 7D                           ld      a, l
1423+ 687A B4                           or      h
1424+ 687B 21 00 00                     ld      hl, FALSE_FLAG
1425+ 687E 20 01                        jr      nz, ZEqual_Skip
1426+ 6880 2B                               dec     hl
1427+ 6881              ZEqual_Skip:
1428+ 6881                              psh1
1428+ 6881 E5          >                push    hl
1428+ 6882 DD E9       >                jp      (ix)
1429+ 6884
1430+ 6884              //  ______________________________________________________________________
1431+ 6884              //
1432+ 6884              // not         a1 -- a2
1433+ 6884              // increment by 2 top of stack
1434+ 6884                              New_Def NOT_OP, "NOT", is_code, is_normal
1434+ 6884             >
1434+ 6884             >Dict_Ptr        defl    $
1434+ 6884             >
1434+ 6884             >//              ______________________________________________________________________
1434+ 6884             >//              Heap part
1434+ 6884             >
1434+ 6884             >
1434+ 6884             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E275             >
1434+ E275             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E275             >Latest_Definition defl  Heap_Ptr
1434+ E275             >
1434+ E275             >                // dummy db directives used to calculate length of namec
1434+ E275 4E 4F 54    >                db      "NOT"
1434+ E278             >len_NFA         defl    $ - temp_NFA
1434+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E275             >
1434+ E275 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E276 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1434+ E279             >                org     $-1                 // alter last byte of Name just above to set
1434+ E278 D4          >                db      {b $} | END_BIT     // msb as name end
1434+ E279             >
1434+ E279 6E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E27B             >Prev_Ptr        defl    Heap_Ptr
1434+ E27B             >
1434+ E27B             >mirror_Ptr      defl    $
1434+ E27B             >
1434+ E27B 86 68       >                dw      Dict_Ptr + 2        // xt
1434+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E27D             >
1434+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E27D             >
1434+ E27D             >//              ______________________________________________________________________
1434+ E27D             >//              Dictionary part
1434+ E27D             >
1434+ E27D             >                org     Dict_Ptr
1434+ 6884             >
1434+ 6884 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 6886             >
1434+ 6886             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 6886 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1434+ 6886 ~           >
1434+ 6886 ~           >
1434+ 6886             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 6886             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 6886             >
1434+ 6886             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 6886                          //  Behave  Zero_Equal
1436+ 6886 C3 78 68                     jp      Zero_Equal
1437+ 6889
1438+ 6889              //  ______________________________________________________________________
1439+ 6889              //
1440+ 6889              // 0<           n -- f
1441+ 6889              // true (non zero) if n is less than zero, false (0) elsewere
1442+ 6889                              New_Def ZLESS, "0<", is_code, is_normal
1442+ 6889             >
1442+ 6889             >Dict_Ptr        defl    $
1442+ 6889             >
1442+ 6889             >//              ______________________________________________________________________
1442+ 6889             >//              Heap part
1442+ 6889             >
1442+ 6889             >
1442+ 6889             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E27D             >
1442+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E27D             >Latest_Definition defl  Heap_Ptr
1442+ E27D             >
1442+ E27D             >                // dummy db directives used to calculate length of namec
1442+ E27D 30 3C       >                db      "0<"
1442+ E27F             >len_NFA         defl    $ - temp_NFA
1442+ E27F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E27D             >
1442+ E27D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E27E 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1442+ E280             >                org     $-1                 // alter last byte of Name just above to set
1442+ E27F BC          >                db      {b $} | END_BIT     // msb as name end
1442+ E280             >
1442+ E280 75 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E282             >Prev_Ptr        defl    Heap_Ptr
1442+ E282             >
1442+ E282             >mirror_Ptr      defl    $
1442+ E282             >
1442+ E282 8B 68       >                dw      Dict_Ptr + 2        // xt
1442+ E284             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E284             >
1442+ E284             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E284             >
1442+ E284             >//              ______________________________________________________________________
1442+ E284             >//              Dictionary part
1442+ E284             >
1442+ E284             >                org     Dict_Ptr
1442+ 6889             >
1442+ 6889 82 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 688B             >
1442+ 688B             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 688B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1442+ 688B ~           >
1442+ 688B ~           >
1442+ 688B             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 688B             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 688B             >
1442+ 688B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 688B E1                           pop     hl
1444+ 688C 29                           add     hl, hl
1445+ 688D ED 62                        sbc     hl, hl
1446+ 688F                              psh1
1446+ 688F E5          >                push    hl
1446+ 6890 DD E9       >                jp      (ix)
1447+ 6892
1448+ 6892              //  ______________________________________________________________________
1449+ 6892              //
1450+ 6892              // 0>           n -- f
1451+ 6892              // true (non zero) if n is less than zero, false (0) elsewere
1452+ 6892                              New_Def ZGREATER, "0>", is_code, is_normal
1452+ 6892             >
1452+ 6892             >Dict_Ptr        defl    $
1452+ 6892             >
1452+ 6892             >//              ______________________________________________________________________
1452+ 6892             >//              Heap part
1452+ 6892             >
1452+ 6892             >
1452+ 6892             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E284             >
1452+ E284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E284             >Latest_Definition defl  Heap_Ptr
1452+ E284             >
1452+ E284             >                // dummy db directives used to calculate length of namec
1452+ E284 30 3E       >                db      "0>"
1452+ E286             >len_NFA         defl    $ - temp_NFA
1452+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E284             >
1452+ E284 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E285 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1452+ E287             >                org     $-1                 // alter last byte of Name just above to set
1452+ E286 BE          >                db      {b $} | END_BIT     // msb as name end
1452+ E287             >
1452+ E287 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E289             >Prev_Ptr        defl    Heap_Ptr
1452+ E289             >
1452+ E289             >mirror_Ptr      defl    $
1452+ E289             >
1452+ E289 94 68       >                dw      Dict_Ptr + 2        // xt
1452+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E28B             >
1452+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E28B             >
1452+ E28B             >//              ______________________________________________________________________
1452+ E28B             >//              Dictionary part
1452+ E28B             >
1452+ E28B             >                org     Dict_Ptr
1452+ 6892             >
1452+ 6892 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 6894             >
1452+ 6894             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 6894 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 6894 ~           >
1452+ 6894 ~           >
1452+ 6894             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 6894             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 6894             >
1452+ 6894             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 6894 E1                           pop     hl
1454+ 6895 7D                           ld      a, l
1455+ 6896 B4                           or      h
1456+ 6897 29                           add     hl, hl
1457+ 6898 21 00 00                     ld      hl, FALSE_FLAG
1458+ 689B 38 04                        jr      c, ZGreater_Skip
1459+ 689D A7                               and     a
1460+ 689E 28 01                            jr      z, ZGreater_Skip
1461+ 68A0 2B                                   dec     hl
1462+ 68A1              ZGreater_Skip:
1463+ 68A1                              psh1
1463+ 68A1 E5          >                push    hl
1463+ 68A2 DD E9       >                jp      (ix)
1464+ 68A4
1465+ 68A4              //  ______________________________________________________________________
1466+ 68A4              //
1467+ 68A4              // +            n1 n2 -- n3
1468+ 68A4              // returns the unsigned sum of two top values
1469+ 68A4                              New_Def PLUS, "+", is_code, is_normal
1469+ 68A4             >
1469+ 68A4             >Dict_Ptr        defl    $
1469+ 68A4             >
1469+ 68A4             >//              ______________________________________________________________________
1469+ 68A4             >//              Heap part
1469+ 68A4             >
1469+ 68A4             >
1469+ 68A4             >                org     (Heap_Ptr & $1FFF) + $E000
1469+ E28B             >
1469+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ E28B             >Latest_Definition defl  Heap_Ptr
1469+ E28B             >
1469+ E28B             >                // dummy db directives used to calculate length of namec
1469+ E28B 2B          >                db      "+"
1469+ E28C             >len_NFA         defl    $ - temp_NFA
1469+ E28C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ E28B             >
1469+ E28B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ E28C 2B          >                db      "+"               // name string in 7-bit ascii, but
1469+ E28D             >                org     $-1                 // alter last byte of Name just above to set
1469+ E28C AB          >                db      {b $} | END_BIT     // msb as name end
1469+ E28D             >
1469+ E28D 84 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1469+ E28F             >Prev_Ptr        defl    Heap_Ptr
1469+ E28F             >
1469+ E28F             >mirror_Ptr      defl    $
1469+ E28F             >
1469+ E28F A6 68       >                dw      Dict_Ptr + 2        // xt
1469+ E291             >Heap_Ptr        defl    $ - $E000           // save current HP
1469+ E291             >
1469+ E291             >Current_HP      defl  $ - $E000             // used to set HP once!
1469+ E291             >
1469+ E291             >//              ______________________________________________________________________
1469+ E291             >//              Dictionary part
1469+ E291             >
1469+ E291             >                org     Dict_Ptr
1469+ 68A4             >
1469+ 68A4 8F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1469+ 68A6             >
1469+ 68A6             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 68A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1469+ 68A6 ~           >
1469+ 68A6 ~           >
1469+ 68A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 68A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 68A6             >
1469+ 68A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 68A6 D9                           exx
1471+ 68A7 E1                           pop     hl
1472+ 68A8 D1                           pop     de
1473+ 68A9 19                           add     hl, de
1474+ 68AA E5                           push    hl
1475+ 68AB D9                           exx
1476+ 68AC                              next
1476+ 68AC DD E9       >                jp      (ix)
1477+ 68AE
1478+ 68AE
1479+ 68AE              //  ______________________________________________________________________
1480+ 68AE              //
1481+ 68AE              // d+           d1 d2 -- d3
1482+ 68AE              // returns the unsigned sum of two top double-numbers
1483+ 68AE              //      d2  d1
1484+ 68AE              //      h l h l
1485+ 68AE              // SP   LHEDLHED
1486+ 68AE              // SP  +01234567
1487+ 68AE                              New_Def DPLUS, "D+", is_code, is_normal
1487+ 68AE             >
1487+ 68AE             >Dict_Ptr        defl    $
1487+ 68AE             >
1487+ 68AE             >//              ______________________________________________________________________
1487+ 68AE             >//              Heap part
1487+ 68AE             >
1487+ 68AE             >
1487+ 68AE             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E291             >
1487+ E291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E291             >Latest_Definition defl  Heap_Ptr
1487+ E291             >
1487+ E291             >                // dummy db directives used to calculate length of namec
1487+ E291 44 2B       >                db      "D+"
1487+ E293             >len_NFA         defl    $ - temp_NFA
1487+ E293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E291             >
1487+ E291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E292 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1487+ E294             >                org     $-1                 // alter last byte of Name just above to set
1487+ E293 AB          >                db      {b $} | END_BIT     // msb as name end
1487+ E294             >
1487+ E294 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E296             >Prev_Ptr        defl    Heap_Ptr
1487+ E296             >
1487+ E296             >mirror_Ptr      defl    $
1487+ E296             >
1487+ E296 B0 68       >                dw      Dict_Ptr + 2        // xt
1487+ E298             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E298             >
1487+ E298             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E298             >
1487+ E298             >//              ______________________________________________________________________
1487+ E298             >//              Dictionary part
1487+ E298             >
1487+ E298             >                org     Dict_Ptr
1487+ 68AE             >
1487+ 68AE 96 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 68B0             >
1487+ 68B0             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 68B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1487+ 68B0 ~           >
1487+ 68B0 ~           >
1487+ 68B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 68B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 68B0             >
1487+ 68B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 68B0
1489+ 68B0 D9                           exx
1490+ 68B1 C1                           pop     bc                  // bc := d2.H
1491+ 68B2 D1                           pop     de                  // hl := d2.L
1492+ 68B3 E1                           pop     hl                  // d1.H
1493+ 68B4 E3                           ex      (sp), hl            // d1.L
1494+ 68B5 19                           add     hl, de              // hl := d2.L + d1.L
1495+ 68B6 E3                           ex      (sp), hl            // d1.H
1496+ 68B7 ED 4A                        adc     hl, bc              // d1.H + d2.H
1497+ 68B9 E5                           push    hl
1498+ 68BA D9                           exx
1499+ 68BB                              next
1499+ 68BB DD E9       >                jp      (ix)
1500+ 68BD
1501+ 68BD              //  ______________________________________________________________________
1502+ 68BD              //
1503+ 68BD              // 1+           n1 -- n2
1504+ 68BD              // increment by 1 top of stack
1505+ 68BD                              New_Def ONE_PLUS, "1+", is_code, is_normal
1505+ 68BD             >
1505+ 68BD             >Dict_Ptr        defl    $
1505+ 68BD             >
1505+ 68BD             >//              ______________________________________________________________________
1505+ 68BD             >//              Heap part
1505+ 68BD             >
1505+ 68BD             >
1505+ 68BD             >                org     (Heap_Ptr & $1FFF) + $E000
1505+ E298             >
1505+ E298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1505+ E298             >Latest_Definition defl  Heap_Ptr
1505+ E298             >
1505+ E298             >                // dummy db directives used to calculate length of namec
1505+ E298 31 2B       >                db      "1+"
1505+ E29A             >len_NFA         defl    $ - temp_NFA
1505+ E29A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1505+ E298             >
1505+ E298 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1505+ E299 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1505+ E29B             >                org     $-1                 // alter last byte of Name just above to set
1505+ E29A AB          >                db      {b $} | END_BIT     // msb as name end
1505+ E29B             >
1505+ E29B 91 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1505+ E29D             >Prev_Ptr        defl    Heap_Ptr
1505+ E29D             >
1505+ E29D             >mirror_Ptr      defl    $
1505+ E29D             >
1505+ E29D BF 68       >                dw      Dict_Ptr + 2        // xt
1505+ E29F             >Heap_Ptr        defl    $ - $E000           // save current HP
1505+ E29F             >
1505+ E29F             >Current_HP      defl  $ - $E000             // used to set HP once!
1505+ E29F             >
1505+ E29F             >//              ______________________________________________________________________
1505+ E29F             >//              Dictionary part
1505+ E29F             >
1505+ E29F             >                org     Dict_Ptr
1505+ 68BD             >
1505+ 68BD 9D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1505+ 68BF             >
1505+ 68BF             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1505+ 68BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1505+ 68BF ~           >
1505+ 68BF ~           >
1505+ 68BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1505+ 68BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1505+ 68BF             >
1505+ 68BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1506+ 68BF E1                           pop     hl
1507+ 68C0 23                           inc     hl
1508+ 68C1
1509+ 68C1                              psh1
1509+ 68C1 E5          >                push    hl
1509+ 68C2 DD E9       >                jp      (ix)
1510+ 68C4
1511+ 68C4              //  ______________________________________________________________________
1512+ 68C4              //
1513+ 68C4              // 1-           n1 -- n2
1514+ 68C4              // decrement by 1 top of stack
1515+ 68C4                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1515+ 68C4             >
1515+ 68C4             >Dict_Ptr        defl    $
1515+ 68C4             >
1515+ 68C4             >//              ______________________________________________________________________
1515+ 68C4             >//              Heap part
1515+ 68C4             >
1515+ 68C4             >
1515+ 68C4             >                org     (Heap_Ptr & $1FFF) + $E000
1515+ E29F             >
1515+ E29F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1515+ E29F             >Latest_Definition defl  Heap_Ptr
1515+ E29F             >
1515+ E29F             >                // dummy db directives used to calculate length of namec
1515+ E29F 31 2D       >                db      "1-"
1515+ E2A1             >len_NFA         defl    $ - temp_NFA
1515+ E2A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1515+ E29F             >
1515+ E29F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1515+ E2A0 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1515+ E2A2             >                org     $-1                 // alter last byte of Name just above to set
1515+ E2A1 AD          >                db      {b $} | END_BIT     // msb as name end
1515+ E2A2             >
1515+ E2A2 98 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1515+ E2A4             >Prev_Ptr        defl    Heap_Ptr
1515+ E2A4             >
1515+ E2A4             >mirror_Ptr      defl    $
1515+ E2A4             >
1515+ E2A4 C6 68       >                dw      Dict_Ptr + 2        // xt
1515+ E2A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1515+ E2A6             >
1515+ E2A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1515+ E2A6             >
1515+ E2A6             >//              ______________________________________________________________________
1515+ E2A6             >//              Dictionary part
1515+ E2A6             >
1515+ E2A6             >                org     Dict_Ptr
1515+ 68C4             >
1515+ 68C4 A4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1515+ 68C6             >
1515+ 68C6             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1515+ 68C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1515+ 68C6 ~           >
1515+ 68C6 ~           >
1515+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1515+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1515+ 68C6             >
1515+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1516+ 68C6 E1                           pop     hl
1517+ 68C7 2B                           dec     hl
1518+ 68C8
1519+ 68C8                              psh1
1519+ 68C8 E5          >                push    hl
1519+ 68C9 DD E9       >                jp      (ix)
1520+ 68CB
1521+ 68CB              //  ______________________________________________________________________
1522+ 68CB              //
1523+ 68CB              // 2+           n1 -- n2
1524+ 68CB              // increment by 2 top of stack
1525+ 68CB                              New_Def TWO_PLUS, "2+", is_code, is_normal
1525+ 68CB             >
1525+ 68CB             >Dict_Ptr        defl    $
1525+ 68CB             >
1525+ 68CB             >//              ______________________________________________________________________
1525+ 68CB             >//              Heap part
1525+ 68CB             >
1525+ 68CB             >
1525+ 68CB             >                org     (Heap_Ptr & $1FFF) + $E000
1525+ E2A6             >
1525+ E2A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1525+ E2A6             >Latest_Definition defl  Heap_Ptr
1525+ E2A6             >
1525+ E2A6             >                // dummy db directives used to calculate length of namec
1525+ E2A6 32 2B       >                db      "2+"
1525+ E2A8             >len_NFA         defl    $ - temp_NFA
1525+ E2A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1525+ E2A6             >
1525+ E2A6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1525+ E2A7 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1525+ E2A9             >                org     $-1                 // alter last byte of Name just above to set
1525+ E2A8 AB          >                db      {b $} | END_BIT     // msb as name end
1525+ E2A9             >
1525+ E2A9 9F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1525+ E2AB             >Prev_Ptr        defl    Heap_Ptr
1525+ E2AB             >
1525+ E2AB             >mirror_Ptr      defl    $
1525+ E2AB             >
1525+ E2AB CD 68       >                dw      Dict_Ptr + 2        // xt
1525+ E2AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1525+ E2AD             >
1525+ E2AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1525+ E2AD             >
1525+ E2AD             >//              ______________________________________________________________________
1525+ E2AD             >//              Dictionary part
1525+ E2AD             >
1525+ E2AD             >                org     Dict_Ptr
1525+ 68CB             >
1525+ 68CB AB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1525+ 68CD             >
1525+ 68CD             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1525+ 68CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1525+ 68CD ~           >
1525+ 68CD ~           >
1525+ 68CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1525+ 68CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1525+ 68CD             >
1525+ 68CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1526+ 68CD              Two_Plus:
1527+ 68CD E1                           pop     hl
1528+ 68CE 23                           inc     hl
1529+ 68CF 23                           inc     hl
1530+ 68D0
1531+ 68D0                              psh1
1531+ 68D0 E5          >                push    hl
1531+ 68D1 DD E9       >                jp      (ix)
1532+ 68D3
1533+ 68D3              //  ______________________________________________________________________
1534+ 68D3              //
1535+ 68D3              // cell+        a1 -- a2
1536+ 68D3              // increment by 2 top of stack
1537+ 68D3                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1537+ 68D3             >
1537+ 68D3             >Dict_Ptr        defl    $
1537+ 68D3             >
1537+ 68D3             >//              ______________________________________________________________________
1537+ 68D3             >//              Heap part
1537+ 68D3             >
1537+ 68D3             >
1537+ 68D3             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E2AD             >
1537+ E2AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E2AD             >Latest_Definition defl  Heap_Ptr
1537+ E2AD             >
1537+ E2AD             >                // dummy db directives used to calculate length of namec
1537+ E2AD 43 45 4C 4C >                db      "CELL+"
1537+ E2B1 2B          >
1537+ E2B2             >len_NFA         defl    $ - temp_NFA
1537+ E2B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E2AD             >
1537+ E2AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E2AE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1537+ E2B2 2B          >
1537+ E2B3             >                org     $-1                 // alter last byte of Name just above to set
1537+ E2B2 AB          >                db      {b $} | END_BIT     // msb as name end
1537+ E2B3             >
1537+ E2B3 A6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E2B5             >Prev_Ptr        defl    Heap_Ptr
1537+ E2B5             >
1537+ E2B5             >mirror_Ptr      defl    $
1537+ E2B5             >
1537+ E2B5 D5 68       >                dw      Dict_Ptr + 2        // xt
1537+ E2B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E2B7             >
1537+ E2B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E2B7             >
1537+ E2B7             >//              ______________________________________________________________________
1537+ E2B7             >//              Dictionary part
1537+ E2B7             >
1537+ E2B7             >                org     Dict_Ptr
1537+ 68D3             >
1537+ 68D3 B5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 68D5             >
1537+ 68D5             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 68D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1537+ 68D5 ~           >
1537+ 68D5 ~           >
1537+ 68D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 68D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 68D5             >
1537+ 68D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 68D5 C3 CD 68                     jp      Two_Plus
1539+ 68D8
1540+ 68D8              //  ______________________________________________________________________
1541+ 68D8              //
1542+ 68D8              // align        a1 -- a2
1543+ 68D8              // align memory : not used
1544+ 68D8              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1545+ 68D8              //            next
1546+ 68D8
1547+ 68D8              //  ______________________________________________________________________
1548+ 68D8              //
1549+ 68D8              // cell-        a1 -- a2
1550+ 68D8              // decrement by 2 top of stack
1551+ 68D8                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1551+ 68D8             >
1551+ 68D8             >Dict_Ptr        defl    $
1551+ 68D8             >
1551+ 68D8             >//              ______________________________________________________________________
1551+ 68D8             >//              Heap part
1551+ 68D8             >
1551+ 68D8             >
1551+ 68D8             >                org     (Heap_Ptr & $1FFF) + $E000
1551+ E2B7             >
1551+ E2B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1551+ E2B7             >Latest_Definition defl  Heap_Ptr
1551+ E2B7             >
1551+ E2B7             >                // dummy db directives used to calculate length of namec
1551+ E2B7 43 45 4C 4C >                db      "CELL-"
1551+ E2BB 2D          >
1551+ E2BC             >len_NFA         defl    $ - temp_NFA
1551+ E2BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1551+ E2B7             >
1551+ E2B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1551+ E2B8 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1551+ E2BC 2D          >
1551+ E2BD             >                org     $-1                 // alter last byte of Name just above to set
1551+ E2BC AD          >                db      {b $} | END_BIT     // msb as name end
1551+ E2BD             >
1551+ E2BD AD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1551+ E2BF             >Prev_Ptr        defl    Heap_Ptr
1551+ E2BF             >
1551+ E2BF             >mirror_Ptr      defl    $
1551+ E2BF             >
1551+ E2BF DA 68       >                dw      Dict_Ptr + 2        // xt
1551+ E2C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1551+ E2C1             >
1551+ E2C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1551+ E2C1             >
1551+ E2C1             >//              ______________________________________________________________________
1551+ E2C1             >//              Dictionary part
1551+ E2C1             >
1551+ E2C1             >                org     Dict_Ptr
1551+ 68D8             >
1551+ 68D8 BF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1551+ 68DA             >
1551+ 68DA             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1551+ 68DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1551+ 68DA ~           >
1551+ 68DA ~           >
1551+ 68DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1551+ 68DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1551+ 68DA             >
1551+ 68DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1552+ 68DA              CellMinus:
1553+ 68DA E1                           pop     hl
1554+ 68DB 2B                           dec     hl
1555+ 68DC 2B                           dec     hl
1556+ 68DD
1557+ 68DD                              psh1
1557+ 68DD E5          >                push    hl
1557+ 68DE DD E9       >                jp      (ix)
1558+ 68E0
1559+ 68E0              //  ______________________________________________________________________
1560+ 68E0              //
1561+ 68E0              // 2-           a1 -- a2
1562+ 68E0              // decrement by 2 top of stack
1563+ 68E0                              New_Def TWO_MINUS, "2-", is_code, is_normal
1563+ 68E0             >
1563+ 68E0             >Dict_Ptr        defl    $
1563+ 68E0             >
1563+ 68E0             >//              ______________________________________________________________________
1563+ 68E0             >//              Heap part
1563+ 68E0             >
1563+ 68E0             >
1563+ 68E0             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E2C1             >
1563+ E2C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E2C1             >Latest_Definition defl  Heap_Ptr
1563+ E2C1             >
1563+ E2C1             >                // dummy db directives used to calculate length of namec
1563+ E2C1 32 2D       >                db      "2-"
1563+ E2C3             >len_NFA         defl    $ - temp_NFA
1563+ E2C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E2C1             >
1563+ E2C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E2C2 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1563+ E2C4             >                org     $-1                 // alter last byte of Name just above to set
1563+ E2C3 AD          >                db      {b $} | END_BIT     // msb as name end
1563+ E2C4             >
1563+ E2C4 B7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E2C6             >Prev_Ptr        defl    Heap_Ptr
1563+ E2C6             >
1563+ E2C6             >mirror_Ptr      defl    $
1563+ E2C6             >
1563+ E2C6 E2 68       >                dw      Dict_Ptr + 2        // xt
1563+ E2C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E2C8             >
1563+ E2C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E2C8             >
1563+ E2C8             >//              ______________________________________________________________________
1563+ E2C8             >//              Dictionary part
1563+ E2C8             >
1563+ E2C8             >                org     Dict_Ptr
1563+ 68E0             >
1563+ 68E0 C6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 68E2             >
1563+ 68E2             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 68E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 68E2 ~           >
1563+ 68E2 ~           >
1563+ 68E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 68E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 68E2             >
1563+ 68E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 68E2 C3 DA 68                     jp      CellMinus
1565+ 68E5
1566+ 68E5              //  ______________________________________________________________________
1567+ 68E5              //
1568+ 68E5              // negate       n1 -- n2
1569+ 68E5              // change the sign of number
1570+ 68E5                              New_Def MINUS, "NEGATE", is_code, is_normal
1570+ 68E5             >
1570+ 68E5             >Dict_Ptr        defl    $
1570+ 68E5             >
1570+ 68E5             >//              ______________________________________________________________________
1570+ 68E5             >//              Heap part
1570+ 68E5             >
1570+ 68E5             >
1570+ 68E5             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2C8             >
1570+ E2C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2C8             >Latest_Definition defl  Heap_Ptr
1570+ E2C8             >
1570+ E2C8             >                // dummy db directives used to calculate length of namec
1570+ E2C8 4E 45 47 41 >                db      "NEGATE"
1570+ E2CC 54 45       >
1570+ E2CE             >len_NFA         defl    $ - temp_NFA
1570+ E2CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2C8             >
1570+ E2C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2C9 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1570+ E2CD 54 45       >
1570+ E2CF             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2CE C5          >                db      {b $} | END_BIT     // msb as name end
1570+ E2CF             >
1570+ E2CF C1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2D1             >Prev_Ptr        defl    Heap_Ptr
1570+ E2D1             >
1570+ E2D1             >mirror_Ptr      defl    $
1570+ E2D1             >
1570+ E2D1 E7 68       >                dw      Dict_Ptr + 2        // xt
1570+ E2D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2D3             >
1570+ E2D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2D3             >
1570+ E2D3             >//              ______________________________________________________________________
1570+ E2D3             >//              Dictionary part
1570+ E2D3             >
1570+ E2D3             >                org     Dict_Ptr
1570+ 68E5             >
1570+ 68E5 D1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 68E7             >
1570+ 68E7             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 68E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 68E7 ~           >
1570+ 68E7 ~           >
1570+ 68E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 68E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 68E7             >
1570+ 68E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 68E7 D9                           exx
1572+ 68E8 21 00 00                     ld      hl, 0               // subtract from 0
1573+ 68EB D1                           pop     de
1574+ 68EC B7                           or      a
1575+ 68ED ED 52                        sbc     hl, de
1576+ 68EF E5                           push    hl
1577+ 68F0 D9                           exx
1578+ 68F1                              next
1578+ 68F1 DD E9       >                jp      (ix)
1579+ 68F3
1580+ 68F3              //  ______________________________________________________________________
1581+ 68F3              //
1582+ 68F3              // dnegate      d1 -- d2
1583+ 68F3              // change the sign of a double number
1584+ 68F3                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1584+ 68F3             >
1584+ 68F3             >Dict_Ptr        defl    $
1584+ 68F3             >
1584+ 68F3             >//              ______________________________________________________________________
1584+ 68F3             >//              Heap part
1584+ 68F3             >
1584+ 68F3             >
1584+ 68F3             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E2D3             >
1584+ E2D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E2D3             >Latest_Definition defl  Heap_Ptr
1584+ E2D3             >
1584+ E2D3             >                // dummy db directives used to calculate length of namec
1584+ E2D3 44 4E 45 47 >                db      "DNEGATE"
1584+ E2D7 41 54 45    >
1584+ E2DA             >len_NFA         defl    $ - temp_NFA
1584+ E2DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E2D3             >
1584+ E2D3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E2D4 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1584+ E2D8 41 54 45    >
1584+ E2DB             >                org     $-1                 // alter last byte of Name just above to set
1584+ E2DA C5          >                db      {b $} | END_BIT     // msb as name end
1584+ E2DB             >
1584+ E2DB C8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E2DD             >Prev_Ptr        defl    Heap_Ptr
1584+ E2DD             >
1584+ E2DD             >mirror_Ptr      defl    $
1584+ E2DD             >
1584+ E2DD F5 68       >                dw      Dict_Ptr + 2        // xt
1584+ E2DF             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E2DF             >
1584+ E2DF             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E2DF             >
1584+ E2DF             >//              ______________________________________________________________________
1584+ E2DF             >//              Dictionary part
1584+ E2DF             >
1584+ E2DF             >                org     Dict_Ptr
1584+ 68F3             >
1584+ 68F3 DD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 68F5             >
1584+ 68F5             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 68F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1584+ 68F5 ~           >
1584+ 68F5 ~           >
1584+ 68F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 68F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 68F5             >
1584+ 68F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 68F5 D9                           exx
1586+ 68F6 C1                           pop     bc                  // d1.H
1587+ 68F7 D1                           pop     de                  // d1.L
1588+ 68F8 AF                           xor     a
1589+ 68F9 67                           ld      h, a
1590+ 68FA 6F                           ld      l, a
1591+ 68FB ED 52                        sbc     hl, de              // subtact from zero
1592+ 68FD E5                           push    hl                  // > d2-L
1593+ 68FE 67                           ld      h, a
1594+ 68FF 6F                           ld      l, a
1595+ 6900 ED 42                        sbc     hl, bc              // subtract from zero with carry
1596+ 6902                                                          // > d2-H
1597+ 6902 E5                           push    hl
1598+ 6903 D9                           exx
1599+ 6904                              next
1599+ 6904 DD E9       >                jp      (ix)
1600+ 6906
1601+ 6906              //  ______________________________________________________________________
1602+ 6906              //
1603+ 6906              // over         n1 n2 -- n1 n2 n1
1604+ 6906              // copy the second value of stack and put it on top.
1605+ 6906                              New_Def OVER, "OVER", is_code, is_normal
1605+ 6906             >
1605+ 6906             >Dict_Ptr        defl    $
1605+ 6906             >
1605+ 6906             >//              ______________________________________________________________________
1605+ 6906             >//              Heap part
1605+ 6906             >
1605+ 6906             >
1605+ 6906             >                org     (Heap_Ptr & $1FFF) + $E000
1605+ E2DF             >
1605+ E2DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ E2DF             >Latest_Definition defl  Heap_Ptr
1605+ E2DF             >
1605+ E2DF             >                // dummy db directives used to calculate length of namec
1605+ E2DF 4F 56 45 52 >                db      "OVER"
1605+ E2E3             >len_NFA         defl    $ - temp_NFA
1605+ E2E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ E2DF             >
1605+ E2DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ E2E0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1605+ E2E4             >                org     $-1                 // alter last byte of Name just above to set
1605+ E2E3 D2          >                db      {b $} | END_BIT     // msb as name end
1605+ E2E4             >
1605+ E2E4 D3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1605+ E2E6             >Prev_Ptr        defl    Heap_Ptr
1605+ E2E6             >
1605+ E2E6             >mirror_Ptr      defl    $
1605+ E2E6             >
1605+ E2E6 08 69       >                dw      Dict_Ptr + 2        // xt
1605+ E2E8             >Heap_Ptr        defl    $ - $E000           // save current HP
1605+ E2E8             >
1605+ E2E8             >Current_HP      defl  $ - $E000             // used to set HP once!
1605+ E2E8             >
1605+ E2E8             >//              ______________________________________________________________________
1605+ E2E8             >//              Dictionary part
1605+ E2E8             >
1605+ E2E8             >                org     Dict_Ptr
1605+ 6906             >
1605+ 6906 E6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1605+ 6908             >
1605+ 6908             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 6908 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1605+ 6908 ~           >
1605+ 6908 ~           >
1605+ 6908             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 6908             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 6908             >
1605+ 6908             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 6908                              // exx     // we can use af instead OPTIMIZATION possible
1607+ 6908 F1                           pop     af                  //   n2
1608+ 6909 E1                           pop     hl                  // < n1
1609+ 690A E5                           push    hl                  // > n1
1610+ 690B F5                           push    af                  // > n2
1611+ 690C E5                           push    hl                  // > n1
1612+ 690D                              // exx
1613+ 690D                              next
1613+ 690D DD E9       >                jp      (ix)
1614+ 690F
1615+ 690F              //  ______________________________________________________________________
1616+ 690F              //
1617+ 690F              // drop         n1 --
1618+ 690F              // drops the top of stack
1619+ 690F                              New_Def DROP, "DROP", is_code, is_normal
1619+ 690F             >
1619+ 690F             >Dict_Ptr        defl    $
1619+ 690F             >
1619+ 690F             >//              ______________________________________________________________________
1619+ 690F             >//              Heap part
1619+ 690F             >
1619+ 690F             >
1619+ 690F             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E2E8             >
1619+ E2E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E2E8             >Latest_Definition defl  Heap_Ptr
1619+ E2E8             >
1619+ E2E8             >                // dummy db directives used to calculate length of namec
1619+ E2E8 44 52 4F 50 >                db      "DROP"
1619+ E2EC             >len_NFA         defl    $ - temp_NFA
1619+ E2EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E2E8             >
1619+ E2E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E2E9 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1619+ E2ED             >                org     $-1                 // alter last byte of Name just above to set
1619+ E2EC D0          >                db      {b $} | END_BIT     // msb as name end
1619+ E2ED             >
1619+ E2ED DF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E2EF             >Prev_Ptr        defl    Heap_Ptr
1619+ E2EF             >
1619+ E2EF             >mirror_Ptr      defl    $
1619+ E2EF             >
1619+ E2EF 11 69       >                dw      Dict_Ptr + 2        // xt
1619+ E2F1             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E2F1             >
1619+ E2F1             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E2F1             >
1619+ E2F1             >//              ______________________________________________________________________
1619+ E2F1             >//              Dictionary part
1619+ E2F1             >
1619+ E2F1             >                org     Dict_Ptr
1619+ 690F             >
1619+ 690F EF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 6911             >
1619+ 6911             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 6911 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1619+ 6911 ~           >
1619+ 6911 ~           >
1619+ 6911             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 6911             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 6911             >
1619+ 6911             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 6911 E1                           pop     hl                  // < n1 and discard previous TOS
1621+ 6912                              next
1621+ 6912 DD E9       >                jp      (ix)
1622+ 6914
1623+ 6914              //  ______________________________________________________________________
1624+ 6914              //
1625+ 6914              // nip          n1 n2 -- n2
1626+ 6914              // drops the second elemento on the stack
1627+ 6914                              New_Def NIP, "NIP", is_code, is_normal
1627+ 6914             >
1627+ 6914             >Dict_Ptr        defl    $
1627+ 6914             >
1627+ 6914             >//              ______________________________________________________________________
1627+ 6914             >//              Heap part
1627+ 6914             >
1627+ 6914             >
1627+ 6914             >                org     (Heap_Ptr & $1FFF) + $E000
1627+ E2F1             >
1627+ E2F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1627+ E2F1             >Latest_Definition defl  Heap_Ptr
1627+ E2F1             >
1627+ E2F1             >                // dummy db directives used to calculate length of namec
1627+ E2F1 4E 49 50    >                db      "NIP"
1627+ E2F4             >len_NFA         defl    $ - temp_NFA
1627+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1627+ E2F1             >
1627+ E2F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1627+ E2F2 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1627+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1627+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1627+ E2F5             >
1627+ E2F5 E8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1627+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1627+ E2F7             >
1627+ E2F7             >mirror_Ptr      defl    $
1627+ E2F7             >
1627+ E2F7 16 69       >                dw      Dict_Ptr + 2        // xt
1627+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1627+ E2F9             >
1627+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1627+ E2F9             >
1627+ E2F9             >//              ______________________________________________________________________
1627+ E2F9             >//              Dictionary part
1627+ E2F9             >
1627+ E2F9             >                org     Dict_Ptr
1627+ 6914             >
1627+ 6914 F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1627+ 6916             >
1627+ 6916             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1627+ 6916 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1627+ 6916 ~           >
1627+ 6916 ~           >
1627+ 6916             >                endif           ; ok        // for other definitions it "points" the correct handler
1627+ 6916             >                // Use of "; ok" to suppress "warning[fwdref]"
1627+ 6916             >
1627+ 6916             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1628+ 6916
1629+ 6916 E1                           pop     hl                  // < n1 discarded
1630+ 6917 E3                           ex      (sp), hl
1631+ 6918                              next
1631+ 6918 DD E9       >                jp      (ix)
1632+ 691A
1633+ 691A              //  ______________________________________________________________________
1634+ 691A              //
1635+ 691A              // tuck         n1 n2 -- n2 n1 n2
1636+ 691A              // copy the top element after the second.
1637+ 691A                              New_Def TUCK, "TUCK", is_code, is_normal
1637+ 691A             >
1637+ 691A             >Dict_Ptr        defl    $
1637+ 691A             >
1637+ 691A             >//              ______________________________________________________________________
1637+ 691A             >//              Heap part
1637+ 691A             >
1637+ 691A             >
1637+ 691A             >                org     (Heap_Ptr & $1FFF) + $E000
1637+ E2F9             >
1637+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ E2F9             >Latest_Definition defl  Heap_Ptr
1637+ E2F9             >
1637+ E2F9             >                // dummy db directives used to calculate length of namec
1637+ E2F9 54 55 43 4B >                db      "TUCK"
1637+ E2FD             >len_NFA         defl    $ - temp_NFA
1637+ E2FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ E2F9             >
1637+ E2F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ E2FA 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1637+ E2FE             >                org     $-1                 // alter last byte of Name just above to set
1637+ E2FD CB          >                db      {b $} | END_BIT     // msb as name end
1637+ E2FE             >
1637+ E2FE F1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1637+ E300             >Prev_Ptr        defl    Heap_Ptr
1637+ E300             >
1637+ E300             >mirror_Ptr      defl    $
1637+ E300             >
1637+ E300 1C 69       >                dw      Dict_Ptr + 2        // xt
1637+ E302             >Heap_Ptr        defl    $ - $E000           // save current HP
1637+ E302             >
1637+ E302             >Current_HP      defl  $ - $E000             // used to set HP once!
1637+ E302             >
1637+ E302             >//              ______________________________________________________________________
1637+ E302             >//              Dictionary part
1637+ E302             >
1637+ E302             >                org     Dict_Ptr
1637+ 691A             >
1637+ 691A 00 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1637+ 691C             >
1637+ 691C             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 691C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1637+ 691C ~           >
1637+ 691C ~           >
1637+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 691C             >
1637+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 691C E1                           pop     hl
1639+ 691D F1                           pop     af                  // < n1
1640+ 691E E5                           push    hl                  // > n2  and TOS
1641+ 691F F5                           push    af                  // > n1
1642+ 6920 E5                           push    hl
1643+ 6921                              next
1643+ 6921 DD E9       >                jp      (ix)
1644+ 6923
1645+ 6923              //  ______________________________________________________________________
1646+ 6923              //
1647+ 6923              // swap         n1 n2 -- n2 n1
1648+ 6923              // swaps the two values on top of stack
1649+ 6923                              New_Def SWAP, "SWAP", is_code, is_normal
1649+ 6923             >
1649+ 6923             >Dict_Ptr        defl    $
1649+ 6923             >
1649+ 6923             >//              ______________________________________________________________________
1649+ 6923             >//              Heap part
1649+ 6923             >
1649+ 6923             >
1649+ 6923             >                org     (Heap_Ptr & $1FFF) + $E000
1649+ E302             >
1649+ E302             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1649+ E302             >Latest_Definition defl  Heap_Ptr
1649+ E302             >
1649+ E302             >                // dummy db directives used to calculate length of namec
1649+ E302 53 57 41 50 >                db      "SWAP"
1649+ E306             >len_NFA         defl    $ - temp_NFA
1649+ E306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1649+ E302             >
1649+ E302 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1649+ E303 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1649+ E307             >                org     $-1                 // alter last byte of Name just above to set
1649+ E306 D0          >                db      {b $} | END_BIT     // msb as name end
1649+ E307             >
1649+ E307 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1649+ E309             >Prev_Ptr        defl    Heap_Ptr
1649+ E309             >
1649+ E309             >mirror_Ptr      defl    $
1649+ E309             >
1649+ E309 25 69       >                dw      Dict_Ptr + 2        // xt
1649+ E30B             >Heap_Ptr        defl    $ - $E000           // save current HP
1649+ E30B             >
1649+ E30B             >Current_HP      defl  $ - $E000             // used to set HP once!
1649+ E30B             >
1649+ E30B             >//              ______________________________________________________________________
1649+ E30B             >//              Dictionary part
1649+ E30B             >
1649+ E30B             >                org     Dict_Ptr
1649+ 6923             >
1649+ 6923 09 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1649+ 6925             >
1649+ 6925             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1649+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1649+ 6925 ~           >
1649+ 6925 ~           >
1649+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1649+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1649+ 6925             >
1649+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1650+ 6925 E1                           pop     hl                  // < n1
1651+ 6926 E3                           ex      (sp),hl             // > n2
1652+ 6927 E5                           push    hl                  // copy n1 to TOS
1653+ 6928                              next
1653+ 6928 DD E9       >                jp      (ix)
1654+ 692A
1655+ 692A              //  ______________________________________________________________________
1656+ 692A              //
1657+ 692A              // dup         n -- n n
1658+ 692A              // duplicates the top value of stack
1659+ 692A                              New_Def DUP, "DUP", is_code, is_normal
1659+ 692A             >
1659+ 692A             >Dict_Ptr        defl    $
1659+ 692A             >
1659+ 692A             >//              ______________________________________________________________________
1659+ 692A             >//              Heap part
1659+ 692A             >
1659+ 692A             >
1659+ 692A             >                org     (Heap_Ptr & $1FFF) + $E000
1659+ E30B             >
1659+ E30B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1659+ E30B             >Latest_Definition defl  Heap_Ptr
1659+ E30B             >
1659+ E30B             >                // dummy db directives used to calculate length of namec
1659+ E30B 44 55 50    >                db      "DUP"
1659+ E30E             >len_NFA         defl    $ - temp_NFA
1659+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1659+ E30B             >
1659+ E30B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1659+ E30C 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1659+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1659+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1659+ E30F             >
1659+ E30F 02 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1659+ E311             >Prev_Ptr        defl    Heap_Ptr
1659+ E311             >
1659+ E311             >mirror_Ptr      defl    $
1659+ E311             >
1659+ E311 2C 69       >                dw      Dict_Ptr + 2        // xt
1659+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1659+ E313             >
1659+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1659+ E313             >
1659+ E313             >//              ______________________________________________________________________
1659+ E313             >//              Dictionary part
1659+ E313             >
1659+ E313             >                org     Dict_Ptr
1659+ 692A             >
1659+ 692A 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1659+ 692C             >
1659+ 692C             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1659+ 692C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1659+ 692C ~           >
1659+ 692C ~           >
1659+ 692C             >                endif           ; ok        // for other definitions it "points" the correct handler
1659+ 692C             >                // Use of "; ok" to suppress "warning[fwdref]"
1659+ 692C             >
1659+ 692C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1660+ 692C E1                           pop     hl
1661+ 692D E5                           push    hl                  // > n duplicate TOS
1662+ 692E E5                           push    hl
1663+ 692F                              next
1663+ 692F DD E9       >                jp      (ix)
1664+ 6931
1665+ 6931              //  ______________________________________________________________________
1666+ 6931              //
1667+ 6931              // rot         n1 n2 n3 -- n2 n3 n1
1668+ 6931              // Rotates the 3 top values of stack by picking the 3rd in access-order
1669+ 6931              // and putting it on top. The other two are shifted down one place.
1670+ 6931                              New_Def ROT, "ROT", is_code, is_normal
1670+ 6931             >
1670+ 6931             >Dict_Ptr        defl    $
1670+ 6931             >
1670+ 6931             >//              ______________________________________________________________________
1670+ 6931             >//              Heap part
1670+ 6931             >
1670+ 6931             >
1670+ 6931             >                org     (Heap_Ptr & $1FFF) + $E000
1670+ E313             >
1670+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ E313             >Latest_Definition defl  Heap_Ptr
1670+ E313             >
1670+ E313             >                // dummy db directives used to calculate length of namec
1670+ E313 52 4F 54    >                db      "ROT"
1670+ E316             >len_NFA         defl    $ - temp_NFA
1670+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ E313             >
1670+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ E314 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1670+ E317             >                org     $-1                 // alter last byte of Name just above to set
1670+ E316 D4          >                db      {b $} | END_BIT     // msb as name end
1670+ E317             >
1670+ E317 0B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1670+ E319             >Prev_Ptr        defl    Heap_Ptr
1670+ E319             >
1670+ E319             >mirror_Ptr      defl    $
1670+ E319             >
1670+ E319 33 69       >                dw      Dict_Ptr + 2        // xt
1670+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1670+ E31B             >
1670+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1670+ E31B             >
1670+ E31B             >//              ______________________________________________________________________
1670+ E31B             >//              Dictionary part
1670+ E31B             >
1670+ E31B             >                org     Dict_Ptr
1670+ 6931             >
1670+ 6931 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1670+ 6933             >
1670+ 6933             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 6933 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1670+ 6933 ~           >
1670+ 6933 ~           >
1670+ 6933             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 6933             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 6933             >
1670+ 6933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 6933 D9                           exx
1672+ 6934 D1                           pop     de                  // < n3
1673+ 6935 E1                           pop     hl                  // < n2
1674+ 6936 E3                           ex      (sp),hl             // > n2 < n1
1675+ 6937 D5                           push    de                  // > n3
1676+ 6938 E5                           push    hl                  // copy n1 to TOS
1677+ 6939 D9                           exx
1678+ 693A                              next
1678+ 693A DD E9       >                jp      (ix)
1679+ 693C
1680+ 693C              //  ______________________________________________________________________
1681+ 693C              //
1682+ 693C              // -rot         n1 n2 n3 -- n3 n1 n2
1683+ 693C              // Rotates the 3 top values of stack by picking the 1st in access-order
1684+ 693C              // and putting back to 3rd place. The other two are shifted down one place.
1685+ 693C                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1685+ 693C             >
1685+ 693C             >Dict_Ptr        defl    $
1685+ 693C             >
1685+ 693C             >//              ______________________________________________________________________
1685+ 693C             >//              Heap part
1685+ 693C             >
1685+ 693C             >
1685+ 693C             >                org     (Heap_Ptr & $1FFF) + $E000
1685+ E31B             >
1685+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ E31B             >Latest_Definition defl  Heap_Ptr
1685+ E31B             >
1685+ E31B             >                // dummy db directives used to calculate length of namec
1685+ E31B 2D 52 4F 54 >                db      "-ROT"
1685+ E31F             >len_NFA         defl    $ - temp_NFA
1685+ E31F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ E31B             >
1685+ E31B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ E31C 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1685+ E320             >                org     $-1                 // alter last byte of Name just above to set
1685+ E31F D4          >                db      {b $} | END_BIT     // msb as name end
1685+ E320             >
1685+ E320 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1685+ E322             >Prev_Ptr        defl    Heap_Ptr
1685+ E322             >
1685+ E322             >mirror_Ptr      defl    $
1685+ E322             >
1685+ E322 3E 69       >                dw      Dict_Ptr + 2        // xt
1685+ E324             >Heap_Ptr        defl    $ - $E000           // save current HP
1685+ E324             >
1685+ E324             >Current_HP      defl  $ - $E000             // used to set HP once!
1685+ E324             >
1685+ E324             >//              ______________________________________________________________________
1685+ E324             >//              Dictionary part
1685+ E324             >
1685+ E324             >                org     Dict_Ptr
1685+ 693C             >
1685+ 693C 22 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1685+ 693E             >
1685+ 693E             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 693E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1685+ 693E ~           >
1685+ 693E ~           >
1685+ 693E             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 693E             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 693E             >
1685+ 693E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 693E D9                           exx
1687+ 693F E1                           pop     hl                  // < n3
1688+ 6940 D1                           pop     de                  // < n2
1689+ 6941 E3                           ex      (sp),hl             // > n3 < n1
1690+ 6942 E5                           push    hl                  // > n1
1691+ 6943 D5                           push    de                  // copy n3 to TOS
1692+ 6944 D9                           exx
1693+ 6945                              next
1693+ 6945 DD E9       >                jp      (ix)
1694+ 6947
1695+ 6947              //  ______________________________________________________________________
1696+ 6947              //
1697+ 6947              // pick        n1 -- nx
1698+ 6947              // picks the nth element from TOS
1699+ 6947                              New_Def PICK, "PICK", is_code, is_normal
1699+ 6947             >
1699+ 6947             >Dict_Ptr        defl    $
1699+ 6947             >
1699+ 6947             >//              ______________________________________________________________________
1699+ 6947             >//              Heap part
1699+ 6947             >
1699+ 6947             >
1699+ 6947             >                org     (Heap_Ptr & $1FFF) + $E000
1699+ E324             >
1699+ E324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1699+ E324             >Latest_Definition defl  Heap_Ptr
1699+ E324             >
1699+ E324             >                // dummy db directives used to calculate length of namec
1699+ E324 50 49 43 4B >                db      "PICK"
1699+ E328             >len_NFA         defl    $ - temp_NFA
1699+ E328             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1699+ E324             >
1699+ E324 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1699+ E325 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1699+ E329             >                org     $-1                 // alter last byte of Name just above to set
1699+ E328 CB          >                db      {b $} | END_BIT     // msb as name end
1699+ E329             >
1699+ E329 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1699+ E32B             >Prev_Ptr        defl    Heap_Ptr
1699+ E32B             >
1699+ E32B             >mirror_Ptr      defl    $
1699+ E32B             >
1699+ E32B 49 69       >                dw      Dict_Ptr + 2        // xt
1699+ E32D             >Heap_Ptr        defl    $ - $E000           // save current HP
1699+ E32D             >
1699+ E32D             >Current_HP      defl  $ - $E000             // used to set HP once!
1699+ E32D             >
1699+ E32D             >//              ______________________________________________________________________
1699+ E32D             >//              Dictionary part
1699+ E32D             >
1699+ E32D             >                org     Dict_Ptr
1699+ 6947             >
1699+ 6947 2B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1699+ 6949             >
1699+ 6949             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1699+ 6949 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1699+ 6949 ~           >
1699+ 6949 ~           >
1699+ 6949             >                endif           ; ok        // for other definitions it "points" the correct handler
1699+ 6949             >                // Use of "; ok" to suppress "warning[fwdref]"
1699+ 6949             >
1699+ 6949             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1700+ 6949 E1                           pop     hl                  // take TOS as index
1701+ 694A 29                           add     hl, hl              // as cells
1702+ 694B 39                           add     hl, sp              // from Stack Pointer
1703+ 694C 7E                           ld      a, (hl)             // replace TOS
1704+ 694D 23                           inc     hl
1705+ 694E 66                           ld      h, (hl)
1706+ 694F 6F                           ld      l, a
1707+ 6950 E5                           push    hl
1708+ 6951                              next
1708+ 6951 DD E9       >                jp      (ix)
1709+ 6953
1710+ 6953
1711+ 6953              //  ______________________________________________________________________
1712+ 6953              //
1713+ 6953              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1714+ 6953              // picks the nth element from TOS
1715+ 6953              //              New_Def ROLL, "ROLL", is_code, is_normal
1716+ 6953              //              exx                     // we need all registers free
1717+ 6953              //              pop     hl              // number of cells to roll
1718+ 6953              //              ld      a, h
1719+ 6953              //              or       l
1720+ 6953              //              jr      z, Roll_Zero
1721+ 6953              //                  add     hl, hl              // number of bytes to move
1722+ 6953              //                  ld      b, h
1723+ 6953              //                  ld      c, l
1724+ 6953              //                  add     hl, sp          // address of n1
1725+ 6953              //                  ld      a, (hl)         // take n1 into a and a,
1726+ 6953              //                  inc     hl
1727+ 6953              //                  ex      af, af'
1728+ 6953              //                  ld      a, (hl)         // take n1 into a and a,
1729+ 6953              //                  ld      d, h
1730+ 6953              //                  ld      e, l
1731+ 6953              //                  dec     hl
1732+ 6953              //                  dec     hl
1733+ 6953              //                  lddr
1734+ 6953              //                  ex      de, hl
1735+ 6953              //                  ld      (hl), a
1736+ 6953              //                  dec     hl
1737+ 6953              //                  ex      af, af'
1738+ 6953              //                  ld      (hl), a
1739+ 6953              //Roll_Zero:
1740+ 6953              //              exx
1741+ 6953              //              next
1742+ 6953
1743+ 6953
1744+ 6953              //  ______________________________________________________________________
1745+ 6953              //
1746+ 6953              // 2over        d1 d2 -- d1 d2 d1
1747+ 6953              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1748+ 6953              // copy the second double of stack and put on top.
1749+ 6953                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1749+ 6953             >
1749+ 6953             >Dict_Ptr        defl    $
1749+ 6953             >
1749+ 6953             >//              ______________________________________________________________________
1749+ 6953             >//              Heap part
1749+ 6953             >
1749+ 6953             >
1749+ 6953             >                org     (Heap_Ptr & $1FFF) + $E000
1749+ E32D             >
1749+ E32D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1749+ E32D             >Latest_Definition defl  Heap_Ptr
1749+ E32D             >
1749+ E32D             >                // dummy db directives used to calculate length of namec
1749+ E32D 32 4F 56 45 >                db      "2OVER"
1749+ E331 52          >
1749+ E332             >len_NFA         defl    $ - temp_NFA
1749+ E332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1749+ E32D             >
1749+ E32D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1749+ E32E 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1749+ E332 52          >
1749+ E333             >                org     $-1                 // alter last byte of Name just above to set
1749+ E332 D2          >                db      {b $} | END_BIT     // msb as name end
1749+ E333             >
1749+ E333 24 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1749+ E335             >Prev_Ptr        defl    Heap_Ptr
1749+ E335             >
1749+ E335             >mirror_Ptr      defl    $
1749+ E335             >
1749+ E335 55 69       >                dw      Dict_Ptr + 2        // xt
1749+ E337             >Heap_Ptr        defl    $ - $E000           // save current HP
1749+ E337             >
1749+ E337             >Current_HP      defl  $ - $E000             // used to set HP once!
1749+ E337             >
1749+ E337             >//              ______________________________________________________________________
1749+ E337             >//              Dictionary part
1749+ E337             >
1749+ E337             >                org     Dict_Ptr
1749+ 6953             >
1749+ 6953 35 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1749+ 6955             >
1749+ 6955             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1749+ 6955 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1749+ 6955 ~           >
1749+ 6955 ~           >
1749+ 6955             >                endif           ; ok        // for other definitions it "points" the correct handler
1749+ 6955             >                // Use of "; ok" to suppress "warning[fwdref]"
1749+ 6955             >
1749+ 6955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1750+ 6955 D9                           exx
1751+ 6956 21 07 00                     ld      hl, 7
1752+ 6959 39                           add     hl, sp
1753+ 695A 56                           ld      d, (hl)
1754+ 695B 2B                           dec     hl
1755+ 695C 5E                           ld      e, (hl)             // d1-L
1756+ 695D D5                           push    de
1757+ 695E 2B                           dec     hl
1758+ 695F 56                           ld      d, (hl)
1759+ 6960 2B                           dec     hl
1760+ 6961 5E                           ld      e, (hl)             // d1-H
1761+ 6962 D5                           push    de
1762+ 6963 D9                           exx
1763+ 6964                              next
1763+ 6964 DD E9       >                jp      (ix)
1764+ 6966
1765+ 6966              //  ______________________________________________________________________
1766+ 6966              //
1767+ 6966              // 2drop        d --
1768+ 6966              //              n1 n2 --
1769+ 6966              // drops the top double from stack
1770+ 6966                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1770+ 6966             >
1770+ 6966             >Dict_Ptr        defl    $
1770+ 6966             >
1770+ 6966             >//              ______________________________________________________________________
1770+ 6966             >//              Heap part
1770+ 6966             >
1770+ 6966             >
1770+ 6966             >                org     (Heap_Ptr & $1FFF) + $E000
1770+ E337             >
1770+ E337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ E337             >Latest_Definition defl  Heap_Ptr
1770+ E337             >
1770+ E337             >                // dummy db directives used to calculate length of namec
1770+ E337 32 44 52 4F >                db      "2DROP"
1770+ E33B 50          >
1770+ E33C             >len_NFA         defl    $ - temp_NFA
1770+ E33C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ E337             >
1770+ E337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ E338 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1770+ E33C 50          >
1770+ E33D             >                org     $-1                 // alter last byte of Name just above to set
1770+ E33C D0          >                db      {b $} | END_BIT     // msb as name end
1770+ E33D             >
1770+ E33D 2D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1770+ E33F             >Prev_Ptr        defl    Heap_Ptr
1770+ E33F             >
1770+ E33F             >mirror_Ptr      defl    $
1770+ E33F             >
1770+ E33F 68 69       >                dw      Dict_Ptr + 2        // xt
1770+ E341             >Heap_Ptr        defl    $ - $E000           // save current HP
1770+ E341             >
1770+ E341             >Current_HP      defl  $ - $E000             // used to set HP once!
1770+ E341             >
1770+ E341             >//              ______________________________________________________________________
1770+ E341             >//              Dictionary part
1770+ E341             >
1770+ E341             >                org     Dict_Ptr
1770+ 6966             >
1770+ 6966 3F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1770+ 6968             >
1770+ 6968             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6968 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1770+ 6968 ~           >
1770+ 6968 ~           >
1770+ 6968             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6968             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6968             >
1770+ 6968             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6968 E1                           pop     hl
1772+ 6969 E1                           pop     hl
1773+ 696A                              next
1773+ 696A DD E9       >                jp      (ix)
1774+ 696C
1775+ 696C              //  ______________________________________________________________________
1776+ 696C              //
1777+ 696C              // 2nip         d1 d2 -- d2
1778+ 696C              //              n1 n2 n3 n4 -- n3 n4
1779+ 696C              // drops the second double on the stack
1780+ 696C              //              New_Def TWO_NIP, 4, "2nip"
1781+ 696C              //              ...
1782+ 696C
1783+ 696C              //  ______________________________________________________________________
1784+ 696C              //
1785+ 696C              // 2tuck         d1 d2 -- d2 d1 d2
1786+ 696C              // copy the top element after the second.
1787+ 696C              //              New_Def TWO_TUCK, 5, "2tuck"
1788+ 696C              //              ...
1789+ 696C
1790+ 696C              //  ______________________________________________________________________
1791+ 696C              //
1792+ 696C              // 2swap         d1 d2 -- d2 d1
1793+ 696C              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1794+ 696C              // swaps the two doubles on top of stack
1795+ 696C                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1795+ 696C             >
1795+ 696C             >Dict_Ptr        defl    $
1795+ 696C             >
1795+ 696C             >//              ______________________________________________________________________
1795+ 696C             >//              Heap part
1795+ 696C             >
1795+ 696C             >
1795+ 696C             >                org     (Heap_Ptr & $1FFF) + $E000
1795+ E341             >
1795+ E341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1795+ E341             >Latest_Definition defl  Heap_Ptr
1795+ E341             >
1795+ E341             >                // dummy db directives used to calculate length of namec
1795+ E341 32 53 57 41 >                db      "2SWAP"
1795+ E345 50          >
1795+ E346             >len_NFA         defl    $ - temp_NFA
1795+ E346             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1795+ E341             >
1795+ E341 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1795+ E342 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1795+ E346 50          >
1795+ E347             >                org     $-1                 // alter last byte of Name just above to set
1795+ E346 D0          >                db      {b $} | END_BIT     // msb as name end
1795+ E347             >
1795+ E347 37 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1795+ E349             >Prev_Ptr        defl    Heap_Ptr
1795+ E349             >
1795+ E349             >mirror_Ptr      defl    $
1795+ E349             >
1795+ E349 6E 69       >                dw      Dict_Ptr + 2        // xt
1795+ E34B             >Heap_Ptr        defl    $ - $E000           // save current HP
1795+ E34B             >
1795+ E34B             >Current_HP      defl  $ - $E000             // used to set HP once!
1795+ E34B             >
1795+ E34B             >//              ______________________________________________________________________
1795+ E34B             >//              Dictionary part
1795+ E34B             >
1795+ E34B             >                org     Dict_Ptr
1795+ 696C             >
1795+ 696C 49 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1795+ 696E             >
1795+ 696E             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1795+ 696E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1795+ 696E ~           >
1795+ 696E ~           >
1795+ 696E             >                endif           ; ok        // for other definitions it "points" the correct handler
1795+ 696E             >                // Use of "; ok" to suppress "warning[fwdref]"
1795+ 696E             >
1795+ 696E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1796+ 696E D9                           exx
1797+ 696F F1                           pop     af                  //   d2-H
1798+ 6970 E1                           pop     hl                  // < d2-L
1799+ 6971 D1                           pop     de                  // < d1-H
1800+ 6972 E3                           ex      (sp), hl            // < d1-L > d2-L
1801+ 6973 F5                           push    af                  // > d2-H
1802+ 6974 E5                           push    hl                  // > d1-L
1803+ 6975 D5                           push    de
1804+ 6976 D9                           exx
1805+ 6977                              next
1805+ 6977 DD E9       >                jp      (ix)
1806+ 6979
1807+ 6979              //  ______________________________________________________________________
1808+ 6979              //
1809+ 6979              // 2dup         d -- d d
1810+ 6979              //              n1 n2 -- n1 n2 n1 n2
1811+ 6979              // duplicates the top double of stack
1812+ 6979                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1812+ 6979             >
1812+ 6979             >Dict_Ptr        defl    $
1812+ 6979             >
1812+ 6979             >//              ______________________________________________________________________
1812+ 6979             >//              Heap part
1812+ 6979             >
1812+ 6979             >
1812+ 6979             >                org     (Heap_Ptr & $1FFF) + $E000
1812+ E34B             >
1812+ E34B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1812+ E34B             >Latest_Definition defl  Heap_Ptr
1812+ E34B             >
1812+ E34B             >                // dummy db directives used to calculate length of namec
1812+ E34B 32 44 55 50 >                db      "2DUP"
1812+ E34F             >len_NFA         defl    $ - temp_NFA
1812+ E34F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1812+ E34B             >
1812+ E34B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1812+ E34C 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1812+ E350             >                org     $-1                 // alter last byte of Name just above to set
1812+ E34F D0          >                db      {b $} | END_BIT     // msb as name end
1812+ E350             >
1812+ E350 41 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1812+ E352             >Prev_Ptr        defl    Heap_Ptr
1812+ E352             >
1812+ E352             >mirror_Ptr      defl    $
1812+ E352             >
1812+ E352 7B 69       >                dw      Dict_Ptr + 2        // xt
1812+ E354             >Heap_Ptr        defl    $ - $E000           // save current HP
1812+ E354             >
1812+ E354             >Current_HP      defl  $ - $E000             // used to set HP once!
1812+ E354             >
1812+ E354             >//              ______________________________________________________________________
1812+ E354             >//              Dictionary part
1812+ E354             >
1812+ E354             >                org     Dict_Ptr
1812+ 6979             >
1812+ 6979 52 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1812+ 697B             >
1812+ 697B             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1812+ 697B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1812+ 697B ~           >
1812+ 697B ~           >
1812+ 697B             >                endif           ; ok        // for other definitions it "points" the correct handler
1812+ 697B             >                // Use of "; ok" to suppress "warning[fwdref]"
1812+ 697B             >
1812+ 697B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1813+ 697B E1                           pop     hl                  // < d-H
1814+ 697C F1                           pop     af                  // < d-L
1815+ 697D F5                           push    af                  // < d-L
1816+ 697E E5                           push    hl                  // > d-H
1817+ 697F F5                           push    af                  // > d-L
1818+ 6980 E5                           push    hl                  // > d-H
1819+ 6981                              next
1819+ 6981 DD E9       >                jp      (ix)
1820+ 6983
1821+ 6983              //  ______________________________________________________________________
1822+ 6983              //
1823+ 6983              // 2rot         d1 d2 d3 -- d2 d3 d1
1824+ 6983              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1825+ 6983              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1826+ 6983              // and putting it on top. The other two are shifted down one place.
1827+ 6983              //              New_Def TWO?ROT, 4, "2rot"
1828+ 6983              //              ...
1829+ 6983              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1830+ 6983              //
1831+ 6983              //      d3  |d2  |d1  |
1832+ 6983              //      h l |h l |h l |
1833+ 6983              // SP   LHED|LHED|LHED|
1834+ 6983              // SP  +0123|4567|89ab|
1835+ 6983              //              ld      hl, $000B
1836+ 6983              //              add     hl, sp
1837+ 6983              //              ld      d, (hl)
1838+ 6983              //              dec     hl
1839+ 6983              //              ld      e, (hl)
1840+ 6983              //              dec     hl
1841+ 6983              //              push    de
1842+ 6983              //              ld      d, (hl)
1843+ 6983              //              dec     hl
1844+ 6983              //              ld      e, (hl)
1845+ 6983              //              dec     hl
1846+ 6983              //              push    de
1847+ 6983
1848+ 6983              //      d1  |d3  |d2  |d1  |
1849+ 6983              //      h l |h l |h l |h l |
1850+ 6983              // SP   LHED|LHED|LHED|LHED|
1851+ 6983              // SP       +0123|4567|89ab|
1852+ 6983
1853+ 6983              //              ld      d, h
1854+ 6983              //              ld      e, l
1855+ 6983              //              inc     de
1856+ 6983              //              inc     de
1857+ 6983              //              inc     de
1858+ 6983              //              inc     de
1859+ 6983              //              push    bc
1860+ 6983              //              ld      bc, $000C
1861+ 6983              //              lddr
1862+ 6983              //              pop     bc
1863+ 6983              //              pop     de
1864+ 6983              //              pop     de
1865+ 6983              //
1866+ 6983              //              next
1867+ 6983
1868+ 6983
1869+ 6983              //  ______________________________________________________________________
1870+ 6983              //
1871+ 6983              // +!           n a --
1872+ 6983              // Sums to the content of address a the number n.
1873+ 6983              // It is the same of  a @ n + a !
1874+ 6983                              New_Def PLUSSTORE, "+!", is_code, is_normal
1874+ 6983             >
1874+ 6983             >Dict_Ptr        defl    $
1874+ 6983             >
1874+ 6983             >//              ______________________________________________________________________
1874+ 6983             >//              Heap part
1874+ 6983             >
1874+ 6983             >
1874+ 6983             >                org     (Heap_Ptr & $1FFF) + $E000
1874+ E354             >
1874+ E354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1874+ E354             >Latest_Definition defl  Heap_Ptr
1874+ E354             >
1874+ E354             >                // dummy db directives used to calculate length of namec
1874+ E354 2B 21       >                db      "+!"
1874+ E356             >len_NFA         defl    $ - temp_NFA
1874+ E356             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1874+ E354             >
1874+ E354 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1874+ E355 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1874+ E357             >                org     $-1                 // alter last byte of Name just above to set
1874+ E356 A1          >                db      {b $} | END_BIT     // msb as name end
1874+ E357             >
1874+ E357 4B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1874+ E359             >Prev_Ptr        defl    Heap_Ptr
1874+ E359             >
1874+ E359             >mirror_Ptr      defl    $
1874+ E359             >
1874+ E359 85 69       >                dw      Dict_Ptr + 2        // xt
1874+ E35B             >Heap_Ptr        defl    $ - $E000           // save current HP
1874+ E35B             >
1874+ E35B             >Current_HP      defl  $ - $E000             // used to set HP once!
1874+ E35B             >
1874+ E35B             >//              ______________________________________________________________________
1874+ E35B             >//              Dictionary part
1874+ E35B             >
1874+ E35B             >                org     Dict_Ptr
1874+ 6983             >
1874+ 6983 59 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1874+ 6985             >
1874+ 6985             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1874+ 6985 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1874+ 6985 ~           >
1874+ 6985 ~           >
1874+ 6985             >                endif           ; ok        // for other definitions it "points" the correct handler
1874+ 6985             >                // Use of "; ok" to suppress "warning[fwdref]"
1874+ 6985             >
1874+ 6985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1875+ 6985 D9                           exx
1876+ 6986 E1                           pop     hl                  // hl is the address
1877+ 6987 D1                           pop     de                  // de is the number
1878+ 6988 7E                           ld      a, (hl)
1879+ 6989 83                           add     e
1880+ 698A 77                           ld      (hl), a
1881+ 698B 23                           inc     hl
1882+ 698C 7E                           ld      a, (hl)
1883+ 698D 8A                           adc     d
1884+ 698E 77                           ld      (hl), a
1885+ 698F D9                           exx
1886+ 6990                              next
1886+ 6990 DD E9       >                jp      (ix)
1887+ 6992
1888+ 6992              //  ______________________________________________________________________
1889+ 6992              //
1890+ 6992              // toggle       a n --
1891+ 6992              // Complements (xor) the byte at addrress  a  with the model n.
1892+ 6992                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1892+ 6992             >
1892+ 6992             >Dict_Ptr        defl    $
1892+ 6992             >
1892+ 6992             >//              ______________________________________________________________________
1892+ 6992             >//              Heap part
1892+ 6992             >
1892+ 6992             >
1892+ 6992             >                org     (Heap_Ptr & $1FFF) + $E000
1892+ E35B             >
1892+ E35B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1892+ E35B             >Latest_Definition defl  Heap_Ptr
1892+ E35B             >
1892+ E35B             >                // dummy db directives used to calculate length of namec
1892+ E35B 54 4F 47 47 >                db      "TOGGLE"
1892+ E35F 4C 45       >
1892+ E361             >len_NFA         defl    $ - temp_NFA
1892+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1892+ E35B             >
1892+ E35B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1892+ E35C 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1892+ E360 4C 45       >
1892+ E362             >                org     $-1                 // alter last byte of Name just above to set
1892+ E361 C5          >                db      {b $} | END_BIT     // msb as name end
1892+ E362             >
1892+ E362 54 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1892+ E364             >Prev_Ptr        defl    Heap_Ptr
1892+ E364             >
1892+ E364             >mirror_Ptr      defl    $
1892+ E364             >
1892+ E364 94 69       >                dw      Dict_Ptr + 2        // xt
1892+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1892+ E366             >
1892+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1892+ E366             >
1892+ E366             >//              ______________________________________________________________________
1892+ E366             >//              Dictionary part
1892+ E366             >
1892+ E366             >                org     Dict_Ptr
1892+ 6992             >
1892+ 6992 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1892+ 6994             >
1892+ 6994             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1892+ 6994 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1892+ 6994 ~           >
1892+ 6994 ~           >
1892+ 6994             >                endif           ; ok        // for other definitions it "points" the correct handler
1892+ 6994             >                // Use of "; ok" to suppress "warning[fwdref]"
1892+ 6994             >
1892+ 6994             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1893+ 6994 E1                           pop     hl
1894+ 6995 7D                           ld      a, l
1895+ 6996 E1                           pop     hl
1896+ 6997 AE                           xor     (hl)
1897+ 6998 77                           ld      (hl), a
1898+ 6999
1899+ 6999                              next
1899+ 6999 DD E9       >                jp      (ix)
1900+ 699B
1901+ 699B              //  ______________________________________________________________________
1902+ 699B              //
1903+ 699B              // @            a -- n
1904+ 699B              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1905+ 699B                              New_Def FETCH, "@", is_code, is_normal
1905+ 699B             >
1905+ 699B             >Dict_Ptr        defl    $
1905+ 699B             >
1905+ 699B             >//              ______________________________________________________________________
1905+ 699B             >//              Heap part
1905+ 699B             >
1905+ 699B             >
1905+ 699B             >                org     (Heap_Ptr & $1FFF) + $E000
1905+ E366             >
1905+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1905+ E366             >Latest_Definition defl  Heap_Ptr
1905+ E366             >
1905+ E366             >                // dummy db directives used to calculate length of namec
1905+ E366 40          >                db      "@"
1905+ E367             >len_NFA         defl    $ - temp_NFA
1905+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1905+ E366             >
1905+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1905+ E367 40          >                db      "@"               // name string in 7-bit ascii, but
1905+ E368             >                org     $-1                 // alter last byte of Name just above to set
1905+ E367 C0          >                db      {b $} | END_BIT     // msb as name end
1905+ E368             >
1905+ E368 5B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1905+ E36A             >Prev_Ptr        defl    Heap_Ptr
1905+ E36A             >
1905+ E36A             >mirror_Ptr      defl    $
1905+ E36A             >
1905+ E36A 9D 69       >                dw      Dict_Ptr + 2        // xt
1905+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1905+ E36C             >
1905+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1905+ E36C             >
1905+ E36C             >//              ______________________________________________________________________
1905+ E36C             >//              Dictionary part
1905+ E36C             >
1905+ E36C             >                org     Dict_Ptr
1905+ 699B             >
1905+ 699B 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1905+ 699D             >
1905+ 699D             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1905+ 699D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1905+ 699D ~           >
1905+ 699D ~           >
1905+ 699D             >                endif           ; ok        // for other definitions it "points" the correct handler
1905+ 699D             >                // Use of "; ok" to suppress "warning[fwdref]"
1905+ 699D             >
1905+ 699D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1906+ 699D E1                           pop     hl
1907+ 699E 7E                           ld      a, (hl)             // low-byte
1908+ 699F 23                           inc     hl
1909+ 69A0 66                           ld      h, (hl)             // high-byte
1910+ 69A1 6F                           ld      l, a
1911+ 69A2 E5                           push    hl
1912+ 69A3                              next
1912+ 69A3 DD E9       >                jp      (ix)
1913+ 69A5
1914+ 69A5              //  ______________________________________________________________________
1915+ 69A5              //
1916+ 69A5              // !            n a --
1917+ 69A5              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1918+ 69A5                              New_Def STORE, "!", is_code, is_normal
1918+ 69A5             >
1918+ 69A5             >Dict_Ptr        defl    $
1918+ 69A5             >
1918+ 69A5             >//              ______________________________________________________________________
1918+ 69A5             >//              Heap part
1918+ 69A5             >
1918+ 69A5             >
1918+ 69A5             >                org     (Heap_Ptr & $1FFF) + $E000
1918+ E36C             >
1918+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1918+ E36C             >Latest_Definition defl  Heap_Ptr
1918+ E36C             >
1918+ E36C             >                // dummy db directives used to calculate length of namec
1918+ E36C 21          >                db      "!"
1918+ E36D             >len_NFA         defl    $ - temp_NFA
1918+ E36D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1918+ E36C             >
1918+ E36C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1918+ E36D 21          >                db      "!"               // name string in 7-bit ascii, but
1918+ E36E             >                org     $-1                 // alter last byte of Name just above to set
1918+ E36D A1          >                db      {b $} | END_BIT     // msb as name end
1918+ E36E             >
1918+ E36E 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1918+ E370             >Prev_Ptr        defl    Heap_Ptr
1918+ E370             >
1918+ E370             >mirror_Ptr      defl    $
1918+ E370             >
1918+ E370 A7 69       >                dw      Dict_Ptr + 2        // xt
1918+ E372             >Heap_Ptr        defl    $ - $E000           // save current HP
1918+ E372             >
1918+ E372             >Current_HP      defl  $ - $E000             // used to set HP once!
1918+ E372             >
1918+ E372             >//              ______________________________________________________________________
1918+ E372             >//              Dictionary part
1918+ E372             >
1918+ E372             >                org     Dict_Ptr
1918+ 69A5             >
1918+ 69A5 70 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1918+ 69A7             >
1918+ 69A7             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1918+ 69A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1918+ 69A7 ~           >
1918+ 69A7 ~           >
1918+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1918+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1918+ 69A7             >
1918+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1919+ 69A7 D9                           exx
1920+ 69A8 E1                           pop     hl                  // address
1921+ 69A9 D1                           pop     de                  // < n
1922+ 69AA 73                           ld      (hl), e             // low-byte
1923+ 69AB 23                           inc     hl
1924+ 69AC 72                           ld      (hl), d             // high-byte
1925+ 69AD D9                           exx
1926+ 69AE                              next
1926+ 69AE DD E9       >                jp      (ix)
1927+ 69B0
1928+ 69B0              //  ______________________________________________________________________
1929+ 69B0              //
1930+ 69B0              // c@           a -- c
1931+ 69B0              // fetch a character n from address a
1932+ 69B0                              New_Def CFETCH, "C@", is_code, is_normal
1932+ 69B0             >
1932+ 69B0             >Dict_Ptr        defl    $
1932+ 69B0             >
1932+ 69B0             >//              ______________________________________________________________________
1932+ 69B0             >//              Heap part
1932+ 69B0             >
1932+ 69B0             >
1932+ 69B0             >                org     (Heap_Ptr & $1FFF) + $E000
1932+ E372             >
1932+ E372             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1932+ E372             >Latest_Definition defl  Heap_Ptr
1932+ E372             >
1932+ E372             >                // dummy db directives used to calculate length of namec
1932+ E372 43 40       >                db      "C@"
1932+ E374             >len_NFA         defl    $ - temp_NFA
1932+ E374             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1932+ E372             >
1932+ E372 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1932+ E373 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1932+ E375             >                org     $-1                 // alter last byte of Name just above to set
1932+ E374 C0          >                db      {b $} | END_BIT     // msb as name end
1932+ E375             >
1932+ E375 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1932+ E377             >Prev_Ptr        defl    Heap_Ptr
1932+ E377             >
1932+ E377             >mirror_Ptr      defl    $
1932+ E377             >
1932+ E377 B2 69       >                dw      Dict_Ptr + 2        // xt
1932+ E379             >Heap_Ptr        defl    $ - $E000           // save current HP
1932+ E379             >
1932+ E379             >Current_HP      defl  $ - $E000             // used to set HP once!
1932+ E379             >
1932+ E379             >//              ______________________________________________________________________
1932+ E379             >//              Dictionary part
1932+ E379             >
1932+ E379             >                org     Dict_Ptr
1932+ 69B0             >
1932+ 69B0 77 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1932+ 69B2             >
1932+ 69B2             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1932+ 69B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1932+ 69B2 ~           >
1932+ 69B2 ~           >
1932+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1932+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1932+ 69B2             >
1932+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1933+ 69B2 E1                           pop     hl
1934+ 69B3 6E                           ld      l, (hl)             // low-byte
1935+ 69B4 26 00                        ld      h, 0
1936+ 69B6
1937+ 69B6                              psh1
1937+ 69B6 E5          >                push    hl
1937+ 69B7 DD E9       >                jp      (ix)
1938+ 69B9
1939+ 69B9              //  ______________________________________________________________________
1940+ 69B9              //
1941+ 69B9              // c!           c a --
1942+ 69B9              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1943+ 69B9                              New_Def CSTORE, "C!", is_code, is_normal
1943+ 69B9             >
1943+ 69B9             >Dict_Ptr        defl    $
1943+ 69B9             >
1943+ 69B9             >//              ______________________________________________________________________
1943+ 69B9             >//              Heap part
1943+ 69B9             >
1943+ 69B9             >
1943+ 69B9             >                org     (Heap_Ptr & $1FFF) + $E000
1943+ E379             >
1943+ E379             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1943+ E379             >Latest_Definition defl  Heap_Ptr
1943+ E379             >
1943+ E379             >                // dummy db directives used to calculate length of namec
1943+ E379 43 21       >                db      "C!"
1943+ E37B             >len_NFA         defl    $ - temp_NFA
1943+ E37B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1943+ E379             >
1943+ E379 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1943+ E37A 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1943+ E37C             >                org     $-1                 // alter last byte of Name just above to set
1943+ E37B A1          >                db      {b $} | END_BIT     // msb as name end
1943+ E37C             >
1943+ E37C 72 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1943+ E37E             >Prev_Ptr        defl    Heap_Ptr
1943+ E37E             >
1943+ E37E             >mirror_Ptr      defl    $
1943+ E37E             >
1943+ E37E BB 69       >                dw      Dict_Ptr + 2        // xt
1943+ E380             >Heap_Ptr        defl    $ - $E000           // save current HP
1943+ E380             >
1943+ E380             >Current_HP      defl  $ - $E000             // used to set HP once!
1943+ E380             >
1943+ E380             >//              ______________________________________________________________________
1943+ E380             >//              Dictionary part
1943+ E380             >
1943+ E380             >                org     Dict_Ptr
1943+ 69B9             >
1943+ 69B9 7E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1943+ 69BB             >
1943+ 69BB             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1943+ 69BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1943+ 69BB ~           >
1943+ 69BB ~           >
1943+ 69BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1943+ 69BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1943+ 69BB             >
1943+ 69BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1944+ 69BB D9                           exx
1945+ 69BC E1                           pop     hl                  // < address
1946+ 69BD D1                           pop     de
1947+ 69BE 73                           ld      (hl), e             // low-byte
1948+ 69BF D9                           exx
1949+ 69C0                              next
1949+ 69C0 DD E9       >                jp      (ix)
1950+ 69C2
1951+ 69C2              //  ______________________________________________________________________
1952+ 69C2              //
1953+ 69C2              // 2@           a -- d
1954+ 69C2              // fetch a 32 bits number d from address a and leaves it on top of the
1955+ 69C2              // stack as two single numbers, high part as top of the stack.
1956+ 69C2              // A double number is normally kept in CPU registers as HLDE.
1957+ 69C2              // On stack a double number is treated as two single numbers
1958+ 69C2              // where BC is on the top of the stack and HL is the second from top,
1959+ 69C2              // so the sign of the number can be checked on top of stack
1960+ 69C2              // and in the stack memory it appears as LHED.
1961+ 69C2                              New_Def TWO_FETCH, "2@", is_code, is_normal
1961+ 69C2             >
1961+ 69C2             >Dict_Ptr        defl    $
1961+ 69C2             >
1961+ 69C2             >//              ______________________________________________________________________
1961+ 69C2             >//              Heap part
1961+ 69C2             >
1961+ 69C2             >
1961+ 69C2             >                org     (Heap_Ptr & $1FFF) + $E000
1961+ E380             >
1961+ E380             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1961+ E380             >Latest_Definition defl  Heap_Ptr
1961+ E380             >
1961+ E380             >                // dummy db directives used to calculate length of namec
1961+ E380 32 40       >                db      "2@"
1961+ E382             >len_NFA         defl    $ - temp_NFA
1961+ E382             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1961+ E380             >
1961+ E380 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1961+ E381 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1961+ E383             >                org     $-1                 // alter last byte of Name just above to set
1961+ E382 C0          >                db      {b $} | END_BIT     // msb as name end
1961+ E383             >
1961+ E383 79 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1961+ E385             >Prev_Ptr        defl    Heap_Ptr
1961+ E385             >
1961+ E385             >mirror_Ptr      defl    $
1961+ E385             >
1961+ E385 C4 69       >                dw      Dict_Ptr + 2        // xt
1961+ E387             >Heap_Ptr        defl    $ - $E000           // save current HP
1961+ E387             >
1961+ E387             >Current_HP      defl  $ - $E000             // used to set HP once!
1961+ E387             >
1961+ E387             >//              ______________________________________________________________________
1961+ E387             >//              Dictionary part
1961+ E387             >
1961+ E387             >                org     Dict_Ptr
1961+ 69C2             >
1961+ 69C2 85 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1961+ 69C4             >
1961+ 69C4             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1961+ 69C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1961+ 69C4 ~           >
1961+ 69C4 ~           >
1961+ 69C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1961+ 69C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1961+ 69C4             >
1961+ 69C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1962+ 69C4 D9                           exx
1963+ 69C5 E1                           pop     hl                  // address
1964+ 69C6 5E                           ld      e, (hl)             // low-byte
1965+ 69C7 23                           inc     hl
1966+ 69C8 56                           ld      d, (hl)             // high-byte
1967+ 69C9 23                           inc     hl
1968+ 69CA 7E                           ld      a, (hl)             // low-byte
1969+ 69CB 23                           inc     hl
1970+ 69CC 66                           ld      h, (hl)             // high-byte
1971+ 69CD 6F                           ld      l, a
1972+ 69CE E5                           push    hl
1973+ 69CF D5                           push    de
1974+ 69D0 D9                           exx
1975+ 69D1                              next
1975+ 69D1 DD E9       >                jp      (ix)
1976+ 69D3
1977+ 69D3              //  ______________________________________________________________________
1978+ 69D3              //
1979+ 69D3              // 2!           d a --
1980+ 69D3              // stores a 32 bits number d from address a and leaves it on top of the
1981+ 69D3              // stack as two single numbers, high part as top of the stack.
1982+ 69D3              // A double number is normally kept in CPU registers as HLDE.
1983+ 69D3              // On stack a double number is treated as two single numbers
1984+ 69D3              // where BC is on the top of the stack and HL is the second from top,
1985+ 69D3              // so the sign of the number can be checked on top of stack
1986+ 69D3              // and in the stack memory it appears as LHED.
1987+ 69D3                              New_Def TWO_STORE, "2!", is_code, is_normal
1987+ 69D3             >
1987+ 69D3             >Dict_Ptr        defl    $
1987+ 69D3             >
1987+ 69D3             >//              ______________________________________________________________________
1987+ 69D3             >//              Heap part
1987+ 69D3             >
1987+ 69D3             >
1987+ 69D3             >                org     (Heap_Ptr & $1FFF) + $E000
1987+ E387             >
1987+ E387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1987+ E387             >Latest_Definition defl  Heap_Ptr
1987+ E387             >
1987+ E387             >                // dummy db directives used to calculate length of namec
1987+ E387 32 21       >                db      "2!"
1987+ E389             >len_NFA         defl    $ - temp_NFA
1987+ E389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1987+ E387             >
1987+ E387 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1987+ E388 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1987+ E38A             >                org     $-1                 // alter last byte of Name just above to set
1987+ E389 A1          >                db      {b $} | END_BIT     // msb as name end
1987+ E38A             >
1987+ E38A 80 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1987+ E38C             >Prev_Ptr        defl    Heap_Ptr
1987+ E38C             >
1987+ E38C             >mirror_Ptr      defl    $
1987+ E38C             >
1987+ E38C D5 69       >                dw      Dict_Ptr + 2        // xt
1987+ E38E             >Heap_Ptr        defl    $ - $E000           // save current HP
1987+ E38E             >
1987+ E38E             >Current_HP      defl  $ - $E000             // used to set HP once!
1987+ E38E             >
1987+ E38E             >//              ______________________________________________________________________
1987+ E38E             >//              Dictionary part
1987+ E38E             >
1987+ E38E             >                org     Dict_Ptr
1987+ 69D3             >
1987+ 69D3 8C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1987+ 69D5             >
1987+ 69D5             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1987+ 69D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1987+ 69D5 ~           >
1987+ 69D5 ~           >
1987+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1987+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1987+ 69D5             >
1987+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1988+ 69D5 D9                           exx
1989+ 69D6 E1                           pop     hl                  // address
1990+ 69D7 C1                           pop     bc                  // < high-part
1991+ 69D8 D1                           pop     de                  // < low-part > Instruction Pointer
1992+ 69D9 71                           ld      (hl), c
1993+ 69DA 23                           inc     hl
1994+ 69DB 70                           ld      (hl), b
1995+ 69DC 23                           inc     hl
1996+ 69DD 73                           ld      (hl), e
1997+ 69DE 23                           inc     hl
1998+ 69DF 72                           ld      (hl), d
1999+ 69E0 D9                           exx
2000+ 69E1                              next
2000+ 69E1 DD E9       >                jp      (ix)
2001+ 69E3
2002+ 69E3              //  ______________________________________________________________________
2003+ 69E3              //
2004+ 69E3              // p@           a -- c
2005+ 69E3              // Read one byte from port a and leave the result on top of stack
2006+ 69E3                              New_Def PFETCH, "P@", is_code, is_normal
2006+ 69E3             >
2006+ 69E3             >Dict_Ptr        defl    $
2006+ 69E3             >
2006+ 69E3             >//              ______________________________________________________________________
2006+ 69E3             >//              Heap part
2006+ 69E3             >
2006+ 69E3             >
2006+ 69E3             >                org     (Heap_Ptr & $1FFF) + $E000
2006+ E38E             >
2006+ E38E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2006+ E38E             >Latest_Definition defl  Heap_Ptr
2006+ E38E             >
2006+ E38E             >                // dummy db directives used to calculate length of namec
2006+ E38E 50 40       >                db      "P@"
2006+ E390             >len_NFA         defl    $ - temp_NFA
2006+ E390             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2006+ E38E             >
2006+ E38E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2006+ E38F 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2006+ E391             >                org     $-1                 // alter last byte of Name just above to set
2006+ E390 C0          >                db      {b $} | END_BIT     // msb as name end
2006+ E391             >
2006+ E391 87 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2006+ E393             >Prev_Ptr        defl    Heap_Ptr
2006+ E393             >
2006+ E393             >mirror_Ptr      defl    $
2006+ E393             >
2006+ E393 E5 69       >                dw      Dict_Ptr + 2        // xt
2006+ E395             >Heap_Ptr        defl    $ - $E000           // save current HP
2006+ E395             >
2006+ E395             >Current_HP      defl  $ - $E000             // used to set HP once!
2006+ E395             >
2006+ E395             >//              ______________________________________________________________________
2006+ E395             >//              Dictionary part
2006+ E395             >
2006+ E395             >                org     Dict_Ptr
2006+ 69E3             >
2006+ 69E3 93 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2006+ 69E5             >
2006+ 69E5             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2006+ 69E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2006+ 69E5 ~           >
2006+ 69E5 ~           >
2006+ 69E5             >                endif           ; ok        // for other definitions it "points" the correct handler
2006+ 69E5             >                // Use of "; ok" to suppress "warning[fwdref]"
2006+ 69E5             >
2006+ 69E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2007+ 69E5 D9                           exx
2008+ 69E6 C1                           pop     bc
2009+ 69E7 26 00                        ld      h, 0
2010+ 69E9 ED 68                        in      l, (c)
2011+ 69EB E5                           push    hl
2012+ 69EC D9                           exx
2013+ 69ED                              next
2013+ 69ED DD E9       >                jp      (ix)
2014+ 69EF
2015+ 69EF              //  ______________________________________________________________________
2016+ 69EF              //
2017+ 69EF              // p!           c a --
2018+ 69EF              // Send one byte (top of stack) to port a
2019+ 69EF                              New_Def PSTORE, "P!", is_code, is_normal
2019+ 69EF             >
2019+ 69EF             >Dict_Ptr        defl    $
2019+ 69EF             >
2019+ 69EF             >//              ______________________________________________________________________
2019+ 69EF             >//              Heap part
2019+ 69EF             >
2019+ 69EF             >
2019+ 69EF             >                org     (Heap_Ptr & $1FFF) + $E000
2019+ E395             >
2019+ E395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2019+ E395             >Latest_Definition defl  Heap_Ptr
2019+ E395             >
2019+ E395             >                // dummy db directives used to calculate length of namec
2019+ E395 50 21       >                db      "P!"
2019+ E397             >len_NFA         defl    $ - temp_NFA
2019+ E397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2019+ E395             >
2019+ E395 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2019+ E396 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2019+ E398             >                org     $-1                 // alter last byte of Name just above to set
2019+ E397 A1          >                db      {b $} | END_BIT     // msb as name end
2019+ E398             >
2019+ E398 8E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2019+ E39A             >Prev_Ptr        defl    Heap_Ptr
2019+ E39A             >
2019+ E39A             >mirror_Ptr      defl    $
2019+ E39A             >
2019+ E39A F1 69       >                dw      Dict_Ptr + 2        // xt
2019+ E39C             >Heap_Ptr        defl    $ - $E000           // save current HP
2019+ E39C             >
2019+ E39C             >Current_HP      defl  $ - $E000             // used to set HP once!
2019+ E39C             >
2019+ E39C             >//              ______________________________________________________________________
2019+ E39C             >//              Dictionary part
2019+ E39C             >
2019+ E39C             >                org     Dict_Ptr
2019+ 69EF             >
2019+ 69EF 9A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2019+ 69F1             >
2019+ 69F1             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2019+ 69F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2019+ 69F1 ~           >
2019+ 69F1 ~           >
2019+ 69F1             >                endif           ; ok        // for other definitions it "points" the correct handler
2019+ 69F1             >                // Use of "; ok" to suppress "warning[fwdref]"
2019+ 69F1             >
2019+ 69F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2020+ 69F1 D9                           exx
2021+ 69F2 C1                           pop     bc
2022+ 69F3 E1                           pop     hl                  // < c
2023+ 69F4 ED 69                        out     (c), l              // low-byte
2024+ 69F6 D9                           exx
2025+ 69F7                              next
2025+ 69F7 DD E9       >                jp      (ix)
2026+ 69F9
2027+ 69F9
2028+ 69F9              //  ______________________________________________________________________
2029+ 69F9              //
2030+ 69F9              // 2*           n1 -- n2
2031+ 69F9              // doubles the number at top of stack
2032+ 69F9                              New_Def TWO_MUL, "2*", is_code, is_normal
2032+ 69F9             >
2032+ 69F9             >Dict_Ptr        defl    $
2032+ 69F9             >
2032+ 69F9             >//              ______________________________________________________________________
2032+ 69F9             >//              Heap part
2032+ 69F9             >
2032+ 69F9             >
2032+ 69F9             >                org     (Heap_Ptr & $1FFF) + $E000
2032+ E39C             >
2032+ E39C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2032+ E39C             >Latest_Definition defl  Heap_Ptr
2032+ E39C             >
2032+ E39C             >                // dummy db directives used to calculate length of namec
2032+ E39C 32 2A       >                db      "2*"
2032+ E39E             >len_NFA         defl    $ - temp_NFA
2032+ E39E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2032+ E39C             >
2032+ E39C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2032+ E39D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2032+ E39F             >                org     $-1                 // alter last byte of Name just above to set
2032+ E39E AA          >                db      {b $} | END_BIT     // msb as name end
2032+ E39F             >
2032+ E39F 95 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2032+ E3A1             >Prev_Ptr        defl    Heap_Ptr
2032+ E3A1             >
2032+ E3A1             >mirror_Ptr      defl    $
2032+ E3A1             >
2032+ E3A1 FB 69       >                dw      Dict_Ptr + 2        // xt
2032+ E3A3             >Heap_Ptr        defl    $ - $E000           // save current HP
2032+ E3A3             >
2032+ E3A3             >Current_HP      defl  $ - $E000             // used to set HP once!
2032+ E3A3             >
2032+ E3A3             >//              ______________________________________________________________________
2032+ E3A3             >//              Dictionary part
2032+ E3A3             >
2032+ E3A3             >                org     Dict_Ptr
2032+ 69F9             >
2032+ 69F9 A1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2032+ 69FB             >
2032+ 69FB             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2032+ 69FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2032+ 69FB ~           >
2032+ 69FB ~           >
2032+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
2032+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
2032+ 69FB             >
2032+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2033+ 69FB              Two_Mul_Ptr:
2034+ 69FB E1                           pop     hl
2035+ 69FC 29                           add     hl, hl
2036+ 69FD
2037+ 69FD                              psh1
2037+ 69FD E5          >                push    hl
2037+ 69FE DD E9       >                jp      (ix)
2038+ 6A00
2039+ 6A00              //  ______________________________________________________________________
2040+ 6A00              //
2041+ 6A00              // 2/           n1 -- n2
2042+ 6A00              // halves the top of stack, sign is unchanged
2043+ 6A00                              New_Def TWO_DIV, "2/", is_code, is_normal
2043+ 6A00             >
2043+ 6A00             >Dict_Ptr        defl    $
2043+ 6A00             >
2043+ 6A00             >//              ______________________________________________________________________
2043+ 6A00             >//              Heap part
2043+ 6A00             >
2043+ 6A00             >
2043+ 6A00             >                org     (Heap_Ptr & $1FFF) + $E000
2043+ E3A3             >
2043+ E3A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2043+ E3A3             >Latest_Definition defl  Heap_Ptr
2043+ E3A3             >
2043+ E3A3             >                // dummy db directives used to calculate length of namec
2043+ E3A3 32 2F       >                db      "2/"
2043+ E3A5             >len_NFA         defl    $ - temp_NFA
2043+ E3A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2043+ E3A3             >
2043+ E3A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2043+ E3A4 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2043+ E3A6             >                org     $-1                 // alter last byte of Name just above to set
2043+ E3A5 AF          >                db      {b $} | END_BIT     // msb as name end
2043+ E3A6             >
2043+ E3A6 9C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2043+ E3A8             >Prev_Ptr        defl    Heap_Ptr
2043+ E3A8             >
2043+ E3A8             >mirror_Ptr      defl    $
2043+ E3A8             >
2043+ E3A8 02 6A       >                dw      Dict_Ptr + 2        // xt
2043+ E3AA             >Heap_Ptr        defl    $ - $E000           // save current HP
2043+ E3AA             >
2043+ E3AA             >Current_HP      defl  $ - $E000             // used to set HP once!
2043+ E3AA             >
2043+ E3AA             >//              ______________________________________________________________________
2043+ E3AA             >//              Dictionary part
2043+ E3AA             >
2043+ E3AA             >                org     Dict_Ptr
2043+ 6A00             >
2043+ 6A00 A8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2043+ 6A02             >
2043+ 6A02             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2043+ 6A02 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2043+ 6A02 ~           >
2043+ 6A02 ~           >
2043+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
2043+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
2043+ 6A02             >
2043+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2044+ 6A02 E1                           pop     hl
2045+ 6A03 CB 2C                        sra     h
2046+ 6A05 CB 1D                        rr      l
2047+ 6A07
2048+ 6A07                              psh1
2048+ 6A07 E5          >                push    hl
2048+ 6A08 DD E9       >                jp      (ix)
2049+ 6A0A
2050+ 6A0A              //  ______________________________________________________________________
2051+ 6A0A              //
2052+ 6A0A              // lshift       n1 u -- n2
2053+ 6A0A              // bit left shift of u bits
2054+ 6A0A                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2054+ 6A0A             >
2054+ 6A0A             >Dict_Ptr        defl    $
2054+ 6A0A             >
2054+ 6A0A             >//              ______________________________________________________________________
2054+ 6A0A             >//              Heap part
2054+ 6A0A             >
2054+ 6A0A             >
2054+ 6A0A             >                org     (Heap_Ptr & $1FFF) + $E000
2054+ E3AA             >
2054+ E3AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2054+ E3AA             >Latest_Definition defl  Heap_Ptr
2054+ E3AA             >
2054+ E3AA             >                // dummy db directives used to calculate length of namec
2054+ E3AA 4C 53 48 49 >                db      "LSHIFT"
2054+ E3AE 46 54       >
2054+ E3B0             >len_NFA         defl    $ - temp_NFA
2054+ E3B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2054+ E3AA             >
2054+ E3AA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2054+ E3AB 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2054+ E3AF 46 54       >
2054+ E3B1             >                org     $-1                 // alter last byte of Name just above to set
2054+ E3B0 D4          >                db      {b $} | END_BIT     // msb as name end
2054+ E3B1             >
2054+ E3B1 A3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2054+ E3B3             >Prev_Ptr        defl    Heap_Ptr
2054+ E3B3             >
2054+ E3B3             >mirror_Ptr      defl    $
2054+ E3B3             >
2054+ E3B3 0C 6A       >                dw      Dict_Ptr + 2        // xt
2054+ E3B5             >Heap_Ptr        defl    $ - $E000           // save current HP
2054+ E3B5             >
2054+ E3B5             >Current_HP      defl  $ - $E000             // used to set HP once!
2054+ E3B5             >
2054+ E3B5             >//              ______________________________________________________________________
2054+ E3B5             >//              Dictionary part
2054+ E3B5             >
2054+ E3B5             >                org     Dict_Ptr
2054+ 6A0A             >
2054+ 6A0A B3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2054+ 6A0C             >
2054+ 6A0C             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2054+ 6A0C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2054+ 6A0C ~           >
2054+ 6A0C ~           >
2054+ 6A0C             >                endif           ; ok        // for other definitions it "points" the correct handler
2054+ 6A0C             >                // Use of "; ok" to suppress "warning[fwdref]"
2054+ 6A0C             >
2054+ 6A0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2055+ 6A0C D9                           exx
2056+ 6A0D C1                           pop     bc
2057+ 6A0E 41                           ld      b, c
2058+ 6A0F D1                           pop     de
2059+ 6A10 ED 28                        bsla    de, b
2060+ 6A12 D5                           push    de
2061+ 6A13 D9                           exx
2062+ 6A14                              next
2062+ 6A14 DD E9       >                jp      (ix)
2063+ 6A16
2064+ 6A16              //  ______________________________________________________________________
2065+ 6A16              //
2066+ 6A16              // rshift       n1 u -- n2
2067+ 6A16              // bit right shift of u bits
2068+ 6A16                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2068+ 6A16             >
2068+ 6A16             >Dict_Ptr        defl    $
2068+ 6A16             >
2068+ 6A16             >//              ______________________________________________________________________
2068+ 6A16             >//              Heap part
2068+ 6A16             >
2068+ 6A16             >
2068+ 6A16             >                org     (Heap_Ptr & $1FFF) + $E000
2068+ E3B5             >
2068+ E3B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2068+ E3B5             >Latest_Definition defl  Heap_Ptr
2068+ E3B5             >
2068+ E3B5             >                // dummy db directives used to calculate length of namec
2068+ E3B5 52 53 48 49 >                db      "RSHIFT"
2068+ E3B9 46 54       >
2068+ E3BB             >len_NFA         defl    $ - temp_NFA
2068+ E3BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2068+ E3B5             >
2068+ E3B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2068+ E3B6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2068+ E3BA 46 54       >
2068+ E3BC             >                org     $-1                 // alter last byte of Name just above to set
2068+ E3BB D4          >                db      {b $} | END_BIT     // msb as name end
2068+ E3BC             >
2068+ E3BC AA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2068+ E3BE             >Prev_Ptr        defl    Heap_Ptr
2068+ E3BE             >
2068+ E3BE             >mirror_Ptr      defl    $
2068+ E3BE             >
2068+ E3BE 18 6A       >                dw      Dict_Ptr + 2        // xt
2068+ E3C0             >Heap_Ptr        defl    $ - $E000           // save current HP
2068+ E3C0             >
2068+ E3C0             >Current_HP      defl  $ - $E000             // used to set HP once!
2068+ E3C0             >
2068+ E3C0             >//              ______________________________________________________________________
2068+ E3C0             >//              Dictionary part
2068+ E3C0             >
2068+ E3C0             >                org     Dict_Ptr
2068+ 6A16             >
2068+ 6A16 BE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2068+ 6A18             >
2068+ 6A18             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2068+ 6A18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2068+ 6A18 ~           >
2068+ 6A18 ~           >
2068+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
2068+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
2068+ 6A18             >
2068+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2069+ 6A18 D9                           exx
2070+ 6A19 C1                           pop     bc
2071+ 6A1A 41                           ld      b, c
2072+ 6A1B D1                           pop     de
2073+ 6A1C ED 2A                        bsrl    de, b
2074+ 6A1E D5                           push    de
2075+ 6A1F D9                           exx
2076+ 6A20                              next
2076+ 6A20 DD E9       >                jp      (ix)
2077+ 6A22
2078+ 6A22              //  ______________________________________________________________________
2079+ 6A22              //
2080+ 6A22              // cells        n1 -- n2
2081+ 6A22              // decrement by 2 top of stack
2082+ 6A22                              New_Def CELLS, "CELLS", is_code, is_normal
2082+ 6A22             >
2082+ 6A22             >Dict_Ptr        defl    $
2082+ 6A22             >
2082+ 6A22             >//              ______________________________________________________________________
2082+ 6A22             >//              Heap part
2082+ 6A22             >
2082+ 6A22             >
2082+ 6A22             >                org     (Heap_Ptr & $1FFF) + $E000
2082+ E3C0             >
2082+ E3C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2082+ E3C0             >Latest_Definition defl  Heap_Ptr
2082+ E3C0             >
2082+ E3C0             >                // dummy db directives used to calculate length of namec
2082+ E3C0 43 45 4C 4C >                db      "CELLS"
2082+ E3C4 53          >
2082+ E3C5             >len_NFA         defl    $ - temp_NFA
2082+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2082+ E3C0             >
2082+ E3C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2082+ E3C1 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2082+ E3C5 53          >
2082+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
2082+ E3C5 D3          >                db      {b $} | END_BIT     // msb as name end
2082+ E3C6             >
2082+ E3C6 B5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2082+ E3C8             >Prev_Ptr        defl    Heap_Ptr
2082+ E3C8             >
2082+ E3C8             >mirror_Ptr      defl    $
2082+ E3C8             >
2082+ E3C8 24 6A       >                dw      Dict_Ptr + 2        // xt
2082+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
2082+ E3CA             >
2082+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
2082+ E3CA             >
2082+ E3CA             >//              ______________________________________________________________________
2082+ E3CA             >//              Dictionary part
2082+ E3CA             >
2082+ E3CA             >                org     Dict_Ptr
2082+ 6A22             >
2082+ 6A22 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2082+ 6A24             >
2082+ 6A24             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2082+ 6A24 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2082+ 6A24 ~           >
2082+ 6A24 ~           >
2082+ 6A24             >                endif           ; ok        // for other definitions it "points" the correct handler
2082+ 6A24             >                // Use of "; ok" to suppress "warning[fwdref]"
2082+ 6A24             >
2082+ 6A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2083+ 6A24 C3 FB 69                     jp      Two_Mul_Ptr
2084+ 6A27
2085+ 6A27
2086+ 6A27              //  ______________________________________________________________________
2087+ 6A27
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A27                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A27              //  ______________________________________________________________________
   2+ 6A27              //
   3+ 6A27              //  L1.asm
   4+ 6A27              //
   5+ 6A27              //  Level-1 definitions and derivate
   6+ 6A27              //  ______________________________________________________________________
   7+ 6A27
   8+ 6A27              //  ______________________________________________________________________
   9+ 6A27              //
  10+ 6A27              // :            -- cccc     ( compile time )
  11+ 6A27              //              i*x -- j*x  ( run time )
  12+ 6A27              // Colon Definition
  13+ 6A27                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A27             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A27             >
  13+ 6A27             >Dict_Ptr        defl    $
  13+ 6A27             >
  13+ 6A27             >//              ______________________________________________________________________
  13+ 6A27             >//              Heap part
  13+ 6A27             >
  13+ 6A27             >
  13+ 6A27             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CA             >
  13+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CA             >Latest_Definition defl  Heap_Ptr
  13+ E3CA             >
  13+ E3CA             >                // dummy db directives used to calculate length of namec
  13+ E3CA 3A          >                db      ":"
  13+ E3CB             >len_NFA         defl    $ - temp_NFA
  13+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CA             >
  13+ E3CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CB 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CB BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CC             >
  13+ E3CC C0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CE             >
  13+ E3CE             >mirror_Ptr      defl    $
  13+ E3CE             >
  13+ E3CE 29 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D0             >
  13+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D0             >
  13+ E3D0             >//              ______________________________________________________________________
  13+ E3D0             >//              Dictionary part
  13+ E3D0             >
  13+ E3D0             >                org     Dict_Ptr
  13+ 6A27             >
  13+ 6A27 CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A29             >
  13+ 6A29             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A29 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A2C             >
  13+ 6A2C             >
  13+ 6A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A2C             >
  13+ 6A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A2C
  15+ 6A2C 1E 6E                        dw      QEXEC                   // ?exec
  16+ 6A2E E9 6D                        dw      STORE_CSP               // !csp
  17+ 6A30 5A 6B 9D 69                  dw      CURRENT, FETCH          // current @
  18+ 6A34 54 6B A7 69                  dw      CONTEXT, STORE          // context !
  19+ 6A38 0A 74                        dw      CREATE                  // create  ( forward )
  20+ 6A3A A2 6E                        dw      SMUDGE                  // dmudge
  21+ 6A3C 93 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A3E DE 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A40                                                              // ... immediate
  24+ 6A40              Enter_Ptr:
  25+ 6A40                              // via call coded in CFA
  26+ 6A40 EB                           ex      de, hl //**
  27+ 6A41                              // *** ldhlrp
  28+ 6A41 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A42 70                           ld      (hl), b
  30+ 6A43 2B                           dec     hl
  31+ 6A44 71                           ld      (hl), c
  32+ 6A45                              // *** ldrphl
  33+ 6A45 EB                           ex      de, hl //**
  34+ 6A46
  35+ 6A46
  36+ 6A46 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A47                              next
  37+ 6A47 DD E9       >                jp      (ix)
  38+ 6A49
  39+ 6A49              //  ______________________________________________________________________
  40+ 6A49              //
  41+ 6A49              // ;            --
  42+ 6A49              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A49                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A49             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A49             >
  43+ 6A49             >Dict_Ptr        defl    $
  43+ 6A49             >
  43+ 6A49             >//              ______________________________________________________________________
  43+ 6A49             >//              Heap part
  43+ 6A49             >
  43+ 6A49             >
  43+ 6A49             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D0             >
  43+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D0             >Latest_Definition defl  Heap_Ptr
  43+ E3D0             >
  43+ E3D0             >                // dummy db directives used to calculate length of namec
  43+ E3D0 3B          >                db      ";"
  43+ E3D1             >len_NFA         defl    $ - temp_NFA
  43+ E3D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D0             >
  43+ E3D0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D1 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D2             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D1 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D2             >
  43+ E3D2 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D4             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D4             >
  43+ E3D4             >mirror_Ptr      defl    $
  43+ E3D4             >
  43+ E3D4 4B 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D6             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D6             >
  43+ E3D6             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D6             >
  43+ E3D6             >//              ______________________________________________________________________
  43+ E3D6             >//              Dictionary part
  43+ E3D6             >
  43+ E3D6             >                org     Dict_Ptr
  43+ 6A49             >
  43+ 6A49 D4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A4B             >
  43+ 6A4B             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A4B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A4E             >
  43+ 6A4E             >
  43+ 6A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A4E             >
  43+ 6A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A4E
  45+ 6A4E 3E 6E                        dw      QCSP                    // ?csp
  46+ 6A50 66 6E 53 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A54 A2 6E                        dw      SMUDGE                  // smudge
  48+ 6A56 86 6E                        dw      SQUARED_OPEN            // [
  49+ 6A58 53 68                        dw      EXIT                    // ; immediate
  50+ 6A5A
  51+ 6A5A              //  ______________________________________________________________________
  52+ 6A5A              //
  53+ 6A5A              // noop         --
  54+ 6A5A
  55+ 6A5A                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A5A             >
  55+ 6A5A             >Dict_Ptr        defl    $
  55+ 6A5A             >
  55+ 6A5A             >//              ______________________________________________________________________
  55+ 6A5A             >//              Heap part
  55+ 6A5A             >
  55+ 6A5A             >
  55+ 6A5A             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D6             >
  55+ E3D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D6             >Latest_Definition defl  Heap_Ptr
  55+ E3D6             >
  55+ E3D6             >                // dummy db directives used to calculate length of namec
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DA             >len_NFA         defl    $ - temp_NFA
  55+ E3DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D6             >
  55+ E3D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D7 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DB             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DA D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DB             >
  55+ E3DB D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DD             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DD             >
  55+ E3DD             >mirror_Ptr      defl    $
  55+ E3DD             >
  55+ E3DD 5C 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DF             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DF             >
  55+ E3DF             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DF             >
  55+ E3DF             >//              ______________________________________________________________________
  55+ E3DF             >//              Dictionary part
  55+ E3DF             >
  55+ E3DF             >                org     Dict_Ptr
  55+ 6A5A             >
  55+ 6A5A DD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A5C             >
  55+ 6A5C             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A5C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A5C ~           >
  55+ 6A5C ~           >
  55+ 6A5C             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A5C             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A5C             >
  55+ 6A5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A5C                              next
  56+ 6A5C DD E9       >                jp      (ix)
  57+ 6A5E
  58+ 6A5E              //  ______________________________________________________________________
  59+ 6A5E              //
  60+ 6A5E              // constant     n -- cccc     ( compile time )
  61+ 6A5E              //              -- n          ( run time )
  62+ 6A5E              // Constant definition.
  63+ 6A5E                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A5E             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A5E             >
  63+ 6A5E             >Dict_Ptr        defl    $
  63+ 6A5E             >
  63+ 6A5E             >//              ______________________________________________________________________
  63+ 6A5E             >//              Heap part
  63+ 6A5E             >
  63+ 6A5E             >
  63+ 6A5E             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DF             >
  63+ E3DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DF             >Latest_Definition defl  Heap_Ptr
  63+ E3DF             >
  63+ E3DF             >                // dummy db directives used to calculate length of namec
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >len_NFA         defl    $ - temp_NFA
  63+ E3E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DF             >
  63+ E3DF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E0 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E4 54 41 4E 54 >
  63+ E3E8             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E7 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E8             >
  63+ E3E8 D6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EA             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EA             >
  63+ E3EA             >mirror_Ptr      defl    $
  63+ E3EA             >
  63+ E3EA 60 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EC             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EC             >
  63+ E3EC             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EC             >
  63+ E3EC             >//              ______________________________________________________________________
  63+ E3EC             >//              Dictionary part
  63+ E3EC             >
  63+ E3EC             >                org     Dict_Ptr
  63+ 6A5E             >
  63+ 6A5E EA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A60             >
  63+ 6A60             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A60 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A63             >
  63+ 6A63             >
  63+ 6A63             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A63             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A63             >
  63+ 6A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A63 0A 74                        dw      CREATE                  // create
  65+ 6A65 D0 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A67 DE 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A69              Constant_Ptr:
  68+ 6A69
  69+ 6A69
  70+ 6A69 E1                           pop     hl
  71+ 6A6A
  72+ 6A6A 7E                           ld      a, (hl)
  73+ 6A6B 23                           inc     hl
  74+ 6A6C 66                           ld      h, (hl)
  75+ 6A6D 6F                           ld      l, a
  76+ 6A6E E5                           push    hl
  77+ 6A6F                              next
  77+ 6A6F DD E9       >                jp      (ix)
  78+ 6A71
  79+ 6A71              //  ______________________________________________________________________
  80+ 6A71              //
  81+ 6A71              // variable     n -- cccc     ( compile time )
  82+ 6A71              //              -- a          ( run time )
  83+ 6A71              // Variable definition, n is the initial value.
  84+ 6A71                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A71             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A71             >
  84+ 6A71             >Dict_Ptr        defl    $
  84+ 6A71             >
  84+ 6A71             >//              ______________________________________________________________________
  84+ 6A71             >//              Heap part
  84+ 6A71             >
  84+ 6A71             >
  84+ 6A71             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EC             >
  84+ E3EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EC             >Latest_Definition defl  Heap_Ptr
  84+ E3EC             >
  84+ E3EC             >                // dummy db directives used to calculate length of namec
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >len_NFA         defl    $ - temp_NFA
  84+ E3F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EC             >
  84+ E3EC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3ED 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F1 41 42 4C 45 >
  84+ E3F5             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F4 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F5             >
  84+ E3F5 DF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F7             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F7             >
  84+ E3F7             >mirror_Ptr      defl    $
  84+ E3F7             >
  84+ E3F7 73 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F9             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F9             >
  84+ E3F9             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F9             >
  84+ E3F9             >//              ______________________________________________________________________
  84+ E3F9             >//              Dictionary part
  84+ E3F9             >
  84+ E3F9             >                org     Dict_Ptr
  84+ 6A71             >
  84+ 6A71 F7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A73             >
  84+ 6A73             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A73 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A76             >
  84+ 6A76             >
  84+ 6A76             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A76             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A76             >
  84+ 6A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A76
  86+ 6A76 95 6A                        dw      ZERO
  87+ 6A78 60 6A                        dw      CONSTANT                // constant
  88+ 6A7A DE 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A7C              Variable_Ptr:
  90+ 6A7C
  91+ 6A7C
  92+ 6A7C
  93+ 6A7C
  94+ 6A7C                              next
  94+ 6A7C DD E9       >                jp      (ix)
  95+ 6A7E
  96+ 6A7E              //  ______________________________________________________________________
  97+ 6A7E              //
  98+ 6A7E              // user         b -- cccc     ( compile time )
  99+ 6A7E              //              -- a          ( run time )
 100+ 6A7E              // User variable definition
 101+ 6A7E                              Colon_Def USER, "USER", is_normal
 101+ 6A7E             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A7E             >
 101+ 6A7E             >Dict_Ptr        defl    $
 101+ 6A7E             >
 101+ 6A7E             >//              ______________________________________________________________________
 101+ 6A7E             >//              Heap part
 101+ 6A7E             >
 101+ 6A7E             >
 101+ 6A7E             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F9             >
 101+ E3F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F9             >Latest_Definition defl  Heap_Ptr
 101+ E3F9             >
 101+ E3F9             >                // dummy db directives used to calculate length of namec
 101+ E3F9 55 53 45 52 >                db      "USER"
 101+ E3FD             >len_NFA         defl    $ - temp_NFA
 101+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F9             >
 101+ E3F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FA 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FD D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FE             >
 101+ E3FE EC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E400             >Prev_Ptr        defl    Heap_Ptr
 101+ E400             >
 101+ E400             >mirror_Ptr      defl    $
 101+ E400             >
 101+ E400 80 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E402             >
 101+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E402             >
 101+ E402             >//              ______________________________________________________________________
 101+ E402             >//              Dictionary part
 101+ E402             >
 101+ E402             >                org     Dict_Ptr
 101+ 6A7E             >
 101+ 6A7E 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A80             >
 101+ 6A80             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A80 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A83             >
 101+ 6A83             >
 101+ 6A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A83             >
 101+ 6A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A83
 103+ 6A83 0A 74                        dw      CREATE                  // create
 104+ 6A85 DF 6B                        dw      CCOMMA                  // c,
 105+ 6A87 DE 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A89
 107+ 6A89
 108+ 6A89              User_Ptr:
 109+ 6A89                              // via call coded in CFA
 110+ 6A89 E1                           pop     hl
 111+ 6A8A
 112+ 6A8A 7E                           ld      a, (hl)
 113+ 6A8B 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A8E ED 31                        add     hl, a
 115+ 6A90 E5                           push    hl
 116+ 6A91                              next
 116+ 6A91 DD E9       >                jp      (ix)
 117+ 6A93
 118+ 6A93              //  ______________________________________________________________________
 119+ 6A93              //
 120+ 6A93                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A93             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A93             >
 120+ 6A93             >Dict_Ptr        defl    $
 120+ 6A93             >
 120+ 6A93             >//              ______________________________________________________________________
 120+ 6A93             >//              Heap part
 120+ 6A93             >
 120+ 6A93             >
 120+ 6A93             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E402             >
 120+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E402             >Latest_Definition defl  Heap_Ptr
 120+ E402             >
 120+ E402             >                // dummy db directives used to calculate length of namec
 120+ E402 30          >                db      "0"
 120+ E403             >len_NFA         defl    $ - temp_NFA
 120+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E402             >
 120+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E403 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E404             >                org     $-1                 // alter last byte of Name just above to set
 120+ E403 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E404             >
 120+ E404 F9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E406             >Prev_Ptr        defl    Heap_Ptr
 120+ E406             >
 120+ E406             >mirror_Ptr      defl    $
 120+ E406             >
 120+ E406 95 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E408             >
 120+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E408             >
 120+ E408             >//              ______________________________________________________________________
 120+ E408             >//              Dictionary part
 120+ E408             >
 120+ E408             >                org     Dict_Ptr
 120+ 6A93             >
 120+ 6A93 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A95             >
 120+ 6A95             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A95 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A98             >
 120+ 6A98             >
 120+ 6A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A98             >
 120+ 6A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A98 00 00       >                dw      0
 121+ 6A9A                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A9A             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A9A             >
 121+ 6A9A             >Dict_Ptr        defl    $
 121+ 6A9A             >
 121+ 6A9A             >//              ______________________________________________________________________
 121+ 6A9A             >//              Heap part
 121+ 6A9A             >
 121+ 6A9A             >
 121+ 6A9A             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E408             >
 121+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E408             >Latest_Definition defl  Heap_Ptr
 121+ E408             >
 121+ E408             >                // dummy db directives used to calculate length of namec
 121+ E408 31          >                db      "1"
 121+ E409             >len_NFA         defl    $ - temp_NFA
 121+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E408             >
 121+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E409 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 121+ E409 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40A             >
 121+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40C             >Prev_Ptr        defl    Heap_Ptr
 121+ E40C             >
 121+ E40C             >mirror_Ptr      defl    $
 121+ E40C             >
 121+ E40C 9C 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40E             >
 121+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40E             >
 121+ E40E             >//              ______________________________________________________________________
 121+ E40E             >//              Dictionary part
 121+ E40E             >
 121+ E40E             >                org     Dict_Ptr
 121+ 6A9A             >
 121+ 6A9A 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A9C             >
 121+ 6A9C             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A9C CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A9F             >
 121+ 6A9F             >
 121+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A9F             >
 121+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A9F 01 00       >                dw      1
 122+ 6AA1                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6AA1             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6AA1             >
 122+ 6AA1             >Dict_Ptr        defl    $
 122+ 6AA1             >
 122+ 6AA1             >//              ______________________________________________________________________
 122+ 6AA1             >//              Heap part
 122+ 6AA1             >
 122+ 6AA1             >
 122+ 6AA1             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40E             >
 122+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40E             >Latest_Definition defl  Heap_Ptr
 122+ E40E             >
 122+ E40E             >                // dummy db directives used to calculate length of namec
 122+ E40E 32          >                db      "2"
 122+ E40F             >len_NFA         defl    $ - temp_NFA
 122+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40E             >
 122+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40F 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E410             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40F B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E410             >
 122+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E412             >Prev_Ptr        defl    Heap_Ptr
 122+ E412             >
 122+ E412             >mirror_Ptr      defl    $
 122+ E412             >
 122+ E412 A3 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E414             >
 122+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E414             >
 122+ E414             >//              ______________________________________________________________________
 122+ E414             >//              Dictionary part
 122+ E414             >
 122+ E414             >                org     Dict_Ptr
 122+ 6AA1             >
 122+ 6AA1 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6AA3             >
 122+ 6AA3             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6AA3 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6AA6             >
 122+ 6AA6             >
 122+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6AA6             >
 122+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6AA6 02 00       >                dw      2
 123+ 6AA8                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6AA8             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6AA8             >
 123+ 6AA8             >Dict_Ptr        defl    $
 123+ 6AA8             >
 123+ 6AA8             >//              ______________________________________________________________________
 123+ 6AA8             >//              Heap part
 123+ 6AA8             >
 123+ 6AA8             >
 123+ 6AA8             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E414             >
 123+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E414             >Latest_Definition defl  Heap_Ptr
 123+ E414             >
 123+ E414             >                // dummy db directives used to calculate length of namec
 123+ E414 33          >                db      "3"
 123+ E415             >len_NFA         defl    $ - temp_NFA
 123+ E415             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E414             >
 123+ E414 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E415 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E416             >                org     $-1                 // alter last byte of Name just above to set
 123+ E415 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E416             >
 123+ E416 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E418             >Prev_Ptr        defl    Heap_Ptr
 123+ E418             >
 123+ E418             >mirror_Ptr      defl    $
 123+ E418             >
 123+ E418 AA 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E41A             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41A             >
 123+ E41A             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41A             >
 123+ E41A             >//              ______________________________________________________________________
 123+ E41A             >//              Dictionary part
 123+ E41A             >
 123+ E41A             >                org     Dict_Ptr
 123+ 6AA8             >
 123+ 6AA8 18 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6AAA             >
 123+ 6AAA             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6AAA CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6AAD             >
 123+ 6AAD             >
 123+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6AAD             >
 123+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6AAD 03 00       >                dw      3
 124+ 6AAF                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6AAF             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6AAF             >
 124+ 6AAF             >Dict_Ptr        defl    $
 124+ 6AAF             >
 124+ 6AAF             >//              ______________________________________________________________________
 124+ 6AAF             >//              Heap part
 124+ 6AAF             >
 124+ 6AAF             >
 124+ 6AAF             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41A             >
 124+ E41A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41A             >Latest_Definition defl  Heap_Ptr
 124+ E41A             >
 124+ E41A             >                // dummy db directives used to calculate length of namec
 124+ E41A 2D 31       >                db      "-1"
 124+ E41C             >len_NFA         defl    $ - temp_NFA
 124+ E41C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41A             >
 124+ E41A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41D             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41C B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41D             >
 124+ E41D 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41F             >Prev_Ptr        defl    Heap_Ptr
 124+ E41F             >
 124+ E41F             >mirror_Ptr      defl    $
 124+ E41F             >
 124+ E41F B1 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E421             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E421             >
 124+ E421             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E421             >
 124+ E421             >//              ______________________________________________________________________
 124+ E421             >//              Dictionary part
 124+ E421             >
 124+ E421             >                org     Dict_Ptr
 124+ 6AAF             >
 124+ 6AAF 1F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6AB1             >
 124+ 6AB1             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6AB1 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AB4             >
 124+ 6AB4             >
 124+ 6AB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AB4             >
 124+ 6AB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AB4 FF FF       >                dw      -1
 125+ 6AB6                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AB6             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AB6             >
 125+ 6AB6             >Dict_Ptr        defl    $
 125+ 6AB6             >
 125+ 6AB6             >//              ______________________________________________________________________
 125+ 6AB6             >//              Heap part
 125+ 6AB6             >
 125+ 6AB6             >
 125+ 6AB6             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E421             >
 125+ E421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E421             >Latest_Definition defl  Heap_Ptr
 125+ E421             >
 125+ E421             >                // dummy db directives used to calculate length of namec
 125+ E421 42 4C       >                db      "BL"
 125+ E423             >len_NFA         defl    $ - temp_NFA
 125+ E423             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E421             >
 125+ E421 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E422 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E424             >                org     $-1                 // alter last byte of Name just above to set
 125+ E423 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E424             >
 125+ E424 1A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E426             >Prev_Ptr        defl    Heap_Ptr
 125+ E426             >
 125+ E426             >mirror_Ptr      defl    $
 125+ E426             >
 125+ E426 B8 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E428             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E428             >
 125+ E428             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E428             >
 125+ E428             >//              ______________________________________________________________________
 125+ E428             >//              Dictionary part
 125+ E428             >
 125+ E428             >                org     Dict_Ptr
 125+ 6AB6             >
 125+ 6AB6 26 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AB8             >
 125+ 6AB8             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AB8 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6ABB             >
 125+ 6ABB             >
 125+ 6ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6ABB             >
 125+ 6ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6ABB 20 00       >                dw      $20
 126+ 6ABD                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6ABD             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6ABD             >
 126+ 6ABD             >Dict_Ptr        defl    $
 126+ 6ABD             >
 126+ 6ABD             >//              ______________________________________________________________________
 126+ 6ABD             >//              Heap part
 126+ 6ABD             >
 126+ 6ABD             >
 126+ 6ABD             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E428             >
 126+ E428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E428             >Latest_Definition defl  Heap_Ptr
 126+ E428             >
 126+ E428             >                // dummy db directives used to calculate length of namec
 126+ E428 43 2F 4C    >                db      "C/L"
 126+ E42B             >len_NFA         defl    $ - temp_NFA
 126+ E42B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E428             >
 126+ E428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E429 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42C             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42B CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42C             >
 126+ E42C 21 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42E             >Prev_Ptr        defl    Heap_Ptr
 126+ E42E             >
 126+ E42E             >mirror_Ptr      defl    $
 126+ E42E             >
 126+ E42E BF 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E430             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E430             >
 126+ E430             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E430             >
 126+ E430             >//              ______________________________________________________________________
 126+ E430             >//              Dictionary part
 126+ E430             >
 126+ E430             >                org     Dict_Ptr
 126+ 6ABD             >
 126+ 6ABD 2E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6ABF             >
 126+ 6ABF             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6ABF CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AC2             >
 126+ 6AC2             >
 126+ 6AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AC2             >
 126+ 6AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AC2 40 00       >                dw      64
 127+ 6AC4                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AC4             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AC4             >
 127+ 6AC4             >Dict_Ptr        defl    $
 127+ 6AC4             >
 127+ 6AC4             >//              ______________________________________________________________________
 127+ 6AC4             >//              Heap part
 127+ 6AC4             >
 127+ 6AC4             >
 127+ 6AC4             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E430             >
 127+ E430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E430             >Latest_Definition defl  Heap_Ptr
 127+ E430             >
 127+ E430             >                // dummy db directives used to calculate length of namec
 127+ E430 42 2F 42 55 >                db      "B/BUF"
 127+ E434 46          >
 127+ E435             >len_NFA         defl    $ - temp_NFA
 127+ E435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E430             >
 127+ E430 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E431 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E435 46          >
 127+ E436             >                org     $-1                 // alter last byte of Name just above to set
 127+ E435 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E436             >
 127+ E436 28 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E438             >Prev_Ptr        defl    Heap_Ptr
 127+ E438             >
 127+ E438             >mirror_Ptr      defl    $
 127+ E438             >
 127+ E438 C6 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E43A             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43A             >
 127+ E43A             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43A             >
 127+ E43A             >//              ______________________________________________________________________
 127+ E43A             >//              Dictionary part
 127+ E43A             >
 127+ E43A             >                org     Dict_Ptr
 127+ 6AC4             >
 127+ 6AC4 38 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AC6             >
 127+ 6AC6             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AC6 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AC9             >
 127+ 6AC9             >
 127+ 6AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AC9             >
 127+ 6AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AC9 00 02       >                dw      512
 128+ 6ACB                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6ACB             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6ACB             >
 128+ 6ACB             >Dict_Ptr        defl    $
 128+ 6ACB             >
 128+ 6ACB             >//              ______________________________________________________________________
 128+ 6ACB             >//              Heap part
 128+ 6ACB             >
 128+ 6ACB             >
 128+ 6ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43A             >
 128+ E43A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43A             >Latest_Definition defl  Heap_Ptr
 128+ E43A             >
 128+ E43A             >                // dummy db directives used to calculate length of namec
 128+ E43A 42 2F 53 43 >                db      "B/SCR"
 128+ E43E 52          >
 128+ E43F             >len_NFA         defl    $ - temp_NFA
 128+ E43F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43A             >
 128+ E43A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43F 52          >
 128+ E440             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43F D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E440             >
 128+ E440 30 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E442             >Prev_Ptr        defl    Heap_Ptr
 128+ E442             >
 128+ E442             >mirror_Ptr      defl    $
 128+ E442             >
 128+ E442 CD 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E444             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E444             >
 128+ E444             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E444             >
 128+ E444             >//              ______________________________________________________________________
 128+ E444             >//              Dictionary part
 128+ E444             >
 128+ E444             >                org     Dict_Ptr
 128+ 6ACB             >
 128+ 6ACB 42 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6ACD             >
 128+ 6ACD             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6ACD CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AD0             >
 128+ 6AD0             >
 128+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AD0             >
 128+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AD0 02 00       >                dw      2
 129+ 6AD2                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6AD2             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6AD2             >
 129+ 6AD2             >Dict_Ptr        defl    $
 129+ 6AD2             >
 129+ 6AD2             >//              ______________________________________________________________________
 129+ 6AD2             >//              Heap part
 129+ 6AD2             >
 129+ 6AD2             >
 129+ 6AD2             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E444             >
 129+ E444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E444             >Latest_Definition defl  Heap_Ptr
 129+ E444             >
 129+ E444             >                // dummy db directives used to calculate length of namec
 129+ E444 4C 2F 53 43 >                db      "L/SCR"
 129+ E448 52          >
 129+ E449             >len_NFA         defl    $ - temp_NFA
 129+ E449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E444             >
 129+ E444 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E445 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E449 52          >
 129+ E44A             >                org     $-1                 // alter last byte of Name just above to set
 129+ E449 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44A             >
 129+ E44A 3A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44C             >Prev_Ptr        defl    Heap_Ptr
 129+ E44C             >
 129+ E44C             >mirror_Ptr      defl    $
 129+ E44C             >
 129+ E44C D4 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44E             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44E             >
 129+ E44E             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44E             >
 129+ E44E             >//              ______________________________________________________________________
 129+ E44E             >//              Dictionary part
 129+ E44E             >
 129+ E44E             >                org     Dict_Ptr
 129+ 6AD2             >
 129+ 6AD2 4C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AD4             >
 129+ 6AD4             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AD4 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AD7             >
 129+ 6AD7             >
 129+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AD7             >
 129+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AD7 10 00       >                dw      16
 130+ 6AD9
 131+ 6AD9              //  ______________________________________________________________________
 132+ 6AD9              //
 133+ 6AD9              // +origin         --
 134+ 6AD9              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AD9              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AD9              //              dw      PLUS                    // +
 137+ 6AD9              //              dw      EXIT                    // ;
 138+ 6AD9                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AD9             >
 138+ 6AD9             >Dict_Ptr        defl    $
 138+ 6AD9             >
 138+ 6AD9             >//              ______________________________________________________________________
 138+ 6AD9             >//              Heap part
 138+ 6AD9             >
 138+ 6AD9             >
 138+ 6AD9             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44E             >
 138+ E44E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44E             >Latest_Definition defl  Heap_Ptr
 138+ E44E             >
 138+ E44E             >                // dummy db directives used to calculate length of namec
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E452 47 49 4E    >
 138+ E455             >len_NFA         defl    $ - temp_NFA
 138+ E455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44E             >
 138+ E44E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44F 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E453 47 49 4E    >
 138+ E456             >                org     $-1                 // alter last byte of Name just above to set
 138+ E455 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E456             >
 138+ E456 44 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E458             >Prev_Ptr        defl    Heap_Ptr
 138+ E458             >
 138+ E458             >mirror_Ptr      defl    $
 138+ E458             >
 138+ E458 DB 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E45A             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45A             >
 138+ E45A             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45A             >
 138+ E45A             >//              ______________________________________________________________________
 138+ E45A             >//              Dictionary part
 138+ E45A             >
 138+ E45A             >                org     Dict_Ptr
 138+ 6AD9             >
 138+ 6AD9 58 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6ADB             >
 138+ 6ADB             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6ADB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6ADB ~           >
 138+ 6ADB ~           >
 138+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6ADB             >
 138+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6ADB D9                           exx
 140+ 6ADC E1                           pop     hl
 141+ 6ADD 11 66 63                     ld      de, Cold_origin
 142+ 6AE0 19                           add     hl, de
 143+ 6AE1 E5                           push    hl
 144+ 6AE2 D9                           exx
 145+ 6AE3                              next
 145+ 6AE3 DD E9       >                jp      (ix)
 146+ 6AE5
 147+ 6AE5
 148+ 6AE5              //  ______________________________________________________________________
 149+ 6AE5              //
 150+ 6AE5                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AE5             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AE5             >
 150+ 6AE5             >Dict_Ptr        defl    $
 150+ 6AE5             >
 150+ 6AE5             >//              ______________________________________________________________________
 150+ 6AE5             >//              Heap part
 150+ 6AE5             >
 150+ 6AE5             >
 150+ 6AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45A             >
 150+ E45A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45A             >Latest_Definition defl  Heap_Ptr
 150+ E45A             >
 150+ E45A             >                // dummy db directives used to calculate length of namec
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"
 150+ E45E 54 29       >
 150+ E460             >len_NFA         defl    $ - temp_NFA
 150+ E460             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45A             >
 150+ E45A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45F 54 29       >
 150+ E461             >                org     $-1                 // alter last byte of Name just above to set
 150+ E460 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E461             >
 150+ E461 4E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E463             >Prev_Ptr        defl    Heap_Ptr
 150+ E463             >
 150+ E463             >mirror_Ptr      defl    $
 150+ E463             >
 150+ E463 E7 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E465             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E465             >
 150+ E465             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E465             >
 150+ E465             >//              ______________________________________________________________________
 150+ E465             >//              Dictionary part
 150+ E465             >
 150+ E465             >                org     Dict_Ptr
 150+ 6AE5             >
 150+ 6AE5 63 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AE7             >
 150+ 6AE7             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AE7 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AEA             >
 150+ 6AEA             >
 150+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AEA             >
 150+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AEA 9A 63       >                dw      Next_Ptr
 151+ 6AEC
 152+ 6AEC              //  ______________________________________________________________________
 153+ 6AEC              //
 154+ 6AEC
 155+ 6AEC                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AEC             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AEC             >
 155+ 6AEC             >Dict_Ptr        defl    $
 155+ 6AEC             >
 155+ 6AEC             >//              ______________________________________________________________________
 155+ 6AEC             >//              Heap part
 155+ 6AEC             >
 155+ 6AEC             >
 155+ 6AEC             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E465             >
 155+ E465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E465             >Latest_Definition defl  Heap_Ptr
 155+ E465             >
 155+ E465             >                // dummy db directives used to calculate length of namec
 155+ E465 53 30       >                db      "S0"
 155+ E467             >len_NFA         defl    $ - temp_NFA
 155+ E467             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E465             >
 155+ E465 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E466 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E468             >                org     $-1                 // alter last byte of Name just above to set
 155+ E467 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E468             >
 155+ E468 5A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46A             >Prev_Ptr        defl    Heap_Ptr
 155+ E46A             >
 155+ E46A             >mirror_Ptr      defl    $
 155+ E46A             >
 155+ E46A EE 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46C             >
 155+ E46C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46C             >
 155+ E46C             >//              ______________________________________________________________________
 155+ E46C             >//              Dictionary part
 155+ E46C             >
 155+ E46C             >                org     Dict_Ptr
 155+ 6AEC             >
 155+ 6AEC 6A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6AEE             >
 155+ 6AEE             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6AEE CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AF1             >
 155+ 6AF1             >
 155+ 6AF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AF1             >
 155+ 6AF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AF1 06          >                db      06
 156+ 6AF2                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AF2             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AF2             >
 156+ 6AF2             >Dict_Ptr        defl    $
 156+ 6AF2             >
 156+ 6AF2             >//              ______________________________________________________________________
 156+ 6AF2             >//              Heap part
 156+ 6AF2             >
 156+ 6AF2             >
 156+ 6AF2             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46C             >
 156+ E46C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46C             >Latest_Definition defl  Heap_Ptr
 156+ E46C             >
 156+ E46C             >                // dummy db directives used to calculate length of namec
 156+ E46C 52 30       >                db      "R0"
 156+ E46E             >len_NFA         defl    $ - temp_NFA
 156+ E46E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46C             >
 156+ E46C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46D 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46F             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46E B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46F             >
 156+ E46F 65 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E471             >Prev_Ptr        defl    Heap_Ptr
 156+ E471             >
 156+ E471             >mirror_Ptr      defl    $
 156+ E471             >
 156+ E471 F4 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E473             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E473             >
 156+ E473             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E473             >
 156+ E473             >//              ______________________________________________________________________
 156+ E473             >//              Dictionary part
 156+ E473             >
 156+ E473             >                org     Dict_Ptr
 156+ 6AF2             >
 156+ 6AF2 71 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AF4             >
 156+ 6AF4             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AF4 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AF7             >
 156+ 6AF7             >
 156+ 6AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AF7             >
 156+ 6AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AF7 08          >                db      08
 157+ 6AF8                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AF8             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AF8             >
 157+ 6AF8             >Dict_Ptr        defl    $
 157+ 6AF8             >
 157+ 6AF8             >//              ______________________________________________________________________
 157+ 6AF8             >//              Heap part
 157+ 6AF8             >
 157+ 6AF8             >
 157+ 6AF8             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E473             >
 157+ E473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E473             >Latest_Definition defl  Heap_Ptr
 157+ E473             >
 157+ E473             >                // dummy db directives used to calculate length of namec
 157+ E473 54 49 42    >                db      "TIB"
 157+ E476             >len_NFA         defl    $ - temp_NFA
 157+ E476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E473             >
 157+ E473 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E474 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E477             >                org     $-1                 // alter last byte of Name just above to set
 157+ E476 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E477             >
 157+ E477 6C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E479             >Prev_Ptr        defl    Heap_Ptr
 157+ E479             >
 157+ E479             >mirror_Ptr      defl    $
 157+ E479             >
 157+ E479 FA 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E47B             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47B             >
 157+ E47B             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47B             >
 157+ E47B             >//              ______________________________________________________________________
 157+ E47B             >//              Dictionary part
 157+ E47B             >
 157+ E47B             >                org     Dict_Ptr
 157+ 6AF8             >
 157+ 6AF8 79 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AFA             >
 157+ 6AFA             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AFA CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AFD             >
 157+ 6AFD             >
 157+ 6AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AFD             >
 157+ 6AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AFD 0A          >                db      10
 158+ 6AFE                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AFE             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AFE             >
 158+ 6AFE             >Dict_Ptr        defl    $
 158+ 6AFE             >
 158+ 6AFE             >//              ______________________________________________________________________
 158+ 6AFE             >//              Heap part
 158+ 6AFE             >
 158+ 6AFE             >
 158+ 6AFE             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47B             >
 158+ E47B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47B             >Latest_Definition defl  Heap_Ptr
 158+ E47B             >
 158+ E47B             >                // dummy db directives used to calculate length of namec
 158+ E47B 57 49 44 54 >                db      "WIDTH"
 158+ E47F 48          >
 158+ E480             >len_NFA         defl    $ - temp_NFA
 158+ E480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47B             >
 158+ E47B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47C 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E480 48          >
 158+ E481             >                org     $-1                 // alter last byte of Name just above to set
 158+ E480 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E481             >
 158+ E481 73 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E483             >Prev_Ptr        defl    Heap_Ptr
 158+ E483             >
 158+ E483             >mirror_Ptr      defl    $
 158+ E483             >
 158+ E483 00 6B       >                dw      Dict_Ptr + 2        // xt
 158+ E485             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E485             >
 158+ E485             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E485             >
 158+ E485             >//              ______________________________________________________________________
 158+ E485             >//              Dictionary part
 158+ E485             >
 158+ E485             >                org     Dict_Ptr
 158+ 6AFE             >
 158+ 6AFE 83 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6B00             >
 158+ 6B00             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6B00 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6B03             >
 158+ 6B03             >
 158+ 6B03             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6B03             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6B03             >
 158+ 6B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6B03 0C          >                db      12
 159+ 6B04                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6B04             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6B04             >
 159+ 6B04             >Dict_Ptr        defl    $
 159+ 6B04             >
 159+ 6B04             >//              ______________________________________________________________________
 159+ 6B04             >//              Heap part
 159+ 6B04             >
 159+ 6B04             >
 159+ 6B04             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E485             >
 159+ E485             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E485             >Latest_Definition defl  Heap_Ptr
 159+ E485             >
 159+ E485             >                // dummy db directives used to calculate length of namec
 159+ E485 57 41 52 4E >                db      "WARNING"
 159+ E489 49 4E 47    >
 159+ E48C             >len_NFA         defl    $ - temp_NFA
 159+ E48C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E485             >
 159+ E485 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E486 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48A 49 4E 47    >
 159+ E48D             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48C C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48D             >
 159+ E48D 7B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48F             >Prev_Ptr        defl    Heap_Ptr
 159+ E48F             >
 159+ E48F             >mirror_Ptr      defl    $
 159+ E48F             >
 159+ E48F 06 6B       >                dw      Dict_Ptr + 2        // xt
 159+ E491             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E491             >
 159+ E491             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E491             >
 159+ E491             >//              ______________________________________________________________________
 159+ E491             >//              Dictionary part
 159+ E491             >
 159+ E491             >                org     Dict_Ptr
 159+ 6B04             >
 159+ 6B04 8F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6B06             >
 159+ 6B06             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6B06 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6B09             >
 159+ 6B09             >
 159+ 6B09             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6B09             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6B09             >
 159+ 6B09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6B09 0E          >                db      14
 160+ 6B0A                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6B0A             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6B0A             >
 160+ 6B0A             >Dict_Ptr        defl    $
 160+ 6B0A             >
 160+ 6B0A             >//              ______________________________________________________________________
 160+ 6B0A             >//              Heap part
 160+ 6B0A             >
 160+ 6B0A             >
 160+ 6B0A             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E491             >
 160+ E491             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E491             >Latest_Definition defl  Heap_Ptr
 160+ E491             >
 160+ E491             >                // dummy db directives used to calculate length of namec
 160+ E491 46 45 4E 43 >                db      "FENCE"
 160+ E495 45          >
 160+ E496             >len_NFA         defl    $ - temp_NFA
 160+ E496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E491             >
 160+ E491 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E492 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E496 45          >
 160+ E497             >                org     $-1                 // alter last byte of Name just above to set
 160+ E496 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E497             >
 160+ E497 85 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E499             >Prev_Ptr        defl    Heap_Ptr
 160+ E499             >
 160+ E499             >mirror_Ptr      defl    $
 160+ E499             >
 160+ E499 0C 6B       >                dw      Dict_Ptr + 2        // xt
 160+ E49B             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49B             >
 160+ E49B             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49B             >
 160+ E49B             >//              ______________________________________________________________________
 160+ E49B             >//              Dictionary part
 160+ E49B             >
 160+ E49B             >                org     Dict_Ptr
 160+ 6B0A             >
 160+ 6B0A 99 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6B0C             >
 160+ 6B0C             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6B0C CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6B0F             >
 160+ 6B0F             >
 160+ 6B0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6B0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6B0F             >
 160+ 6B0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6B0F 10          >                db      16
 161+ 6B10                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6B10             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6B10             >
 161+ 6B10             >Dict_Ptr        defl    $
 161+ 6B10             >
 161+ 6B10             >//              ______________________________________________________________________
 161+ 6B10             >//              Heap part
 161+ 6B10             >
 161+ 6B10             >
 161+ 6B10             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49B             >
 161+ E49B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49B             >Latest_Definition defl  Heap_Ptr
 161+ E49B             >
 161+ E49B             >                // dummy db directives used to calculate length of namec
 161+ E49B 44 50       >                db      "DP"
 161+ E49D             >len_NFA         defl    $ - temp_NFA
 161+ E49D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49B             >
 161+ E49B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49E             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49D D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49E             >
 161+ E49E 91 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A0             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A0             >
 161+ E4A0             >mirror_Ptr      defl    $
 161+ E4A0             >
 161+ E4A0 12 6B       >                dw      Dict_Ptr + 2        // xt
 161+ E4A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A2             >
 161+ E4A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A2             >
 161+ E4A2             >//              ______________________________________________________________________
 161+ E4A2             >//              Dictionary part
 161+ E4A2             >
 161+ E4A2             >                org     Dict_Ptr
 161+ 6B10             >
 161+ 6B10 A0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6B12             >
 161+ 6B12             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6B12 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B15             >
 161+ 6B15             >
 161+ 6B15             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B15             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B15             >
 161+ 6B15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B15 12          >                db      18
 162+ 6B16                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B16             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B16             >
 162+ 6B16             >Dict_Ptr        defl    $
 162+ 6B16             >
 162+ 6B16             >//              ______________________________________________________________________
 162+ 6B16             >//              Heap part
 162+ 6B16             >
 162+ 6B16             >
 162+ 6B16             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A2             >
 162+ E4A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A2             >Latest_Definition defl  Heap_Ptr
 162+ E4A2             >
 162+ E4A2             >                // dummy db directives used to calculate length of namec
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >len_NFA         defl    $ - temp_NFA
 162+ E4AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A2             >
 162+ E4A2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A3 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A7 4C 49 4E 4B >
 162+ E4AB             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AA CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AB             >
 162+ E4AB 9B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AD             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AD             >
 162+ E4AD             >mirror_Ptr      defl    $
 162+ E4AD             >
 162+ E4AD 18 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AF             >
 162+ E4AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AF             >
 162+ E4AF             >//              ______________________________________________________________________
 162+ E4AF             >//              Dictionary part
 162+ E4AF             >
 162+ E4AF             >                org     Dict_Ptr
 162+ 6B16             >
 162+ 6B16 AD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B18             >
 162+ 6B18             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B18 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B1B             >
 162+ 6B1B             >
 162+ 6B1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B1B             >
 162+ 6B1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B1B 14          >                db      20
 163+ 6B1C                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B1C             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B1C             >
 163+ 6B1C             >Dict_Ptr        defl    $
 163+ 6B1C             >
 163+ 6B1C             >//              ______________________________________________________________________
 163+ 6B1C             >//              Heap part
 163+ 6B1C             >
 163+ 6B1C             >
 163+ 6B1C             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AF             >
 163+ E4AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AF             >Latest_Definition defl  Heap_Ptr
 163+ E4AF             >
 163+ E4AF             >                // dummy db directives used to calculate length of namec
 163+ E4AF 46 49 52 53 >                db      "FIRST"
 163+ E4B3 54          >
 163+ E4B4             >len_NFA         defl    $ - temp_NFA
 163+ E4B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AF             >
 163+ E4AF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B0 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B4 54          >
 163+ E4B5             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B4 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B5             >
 163+ E4B5 A2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B7             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B7             >
 163+ E4B7             >mirror_Ptr      defl    $
 163+ E4B7             >
 163+ E4B7 1E 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B9             >
 163+ E4B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B9             >
 163+ E4B9             >//              ______________________________________________________________________
 163+ E4B9             >//              Dictionary part
 163+ E4B9             >
 163+ E4B9             >                org     Dict_Ptr
 163+ 6B1C             >
 163+ 6B1C B7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B1E             >
 163+ 6B1E             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B1E CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B21             >
 163+ 6B21             >
 163+ 6B21             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B21             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B21             >
 163+ 6B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B21 16          >                db      22
 164+ 6B22                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B22             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B22             >
 164+ 6B22             >Dict_Ptr        defl    $
 164+ 6B22             >
 164+ 6B22             >//              ______________________________________________________________________
 164+ 6B22             >//              Heap part
 164+ 6B22             >
 164+ 6B22             >
 164+ 6B22             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B9             >
 164+ E4B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B9             >Latest_Definition defl  Heap_Ptr
 164+ E4B9             >
 164+ E4B9             >                // dummy db directives used to calculate length of namec
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BD 54          >
 164+ E4BE             >len_NFA         defl    $ - temp_NFA
 164+ E4BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B9             >
 164+ E4B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BA 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BE 54          >
 164+ E4BF             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BE D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BF             >
 164+ E4BF AF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C1             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C1             >
 164+ E4C1             >mirror_Ptr      defl    $
 164+ E4C1             >
 164+ E4C1 24 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C3             >
 164+ E4C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C3             >
 164+ E4C3             >//              ______________________________________________________________________
 164+ E4C3             >//              Dictionary part
 164+ E4C3             >
 164+ E4C3             >                org     Dict_Ptr
 164+ 6B22             >
 164+ 6B22 C1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B24             >
 164+ 6B24             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B24 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B27             >
 164+ 6B27             >
 164+ 6B27             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B27             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B27             >
 164+ 6B27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B27 18          >                db      24
 165+ 6B28                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B28             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B28             >
 165+ 6B28             >Dict_Ptr        defl    $
 165+ 6B28             >
 165+ 6B28             >//              ______________________________________________________________________
 165+ 6B28             >//              Heap part
 165+ 6B28             >
 165+ 6B28             >
 165+ 6B28             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C3             >
 165+ E4C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C3             >Latest_Definition defl  Heap_Ptr
 165+ E4C3             >
 165+ E4C3             >                // dummy db directives used to calculate length of namec
 165+ E4C3 48 50       >                db      "HP"
 165+ E4C5             >len_NFA         defl    $ - temp_NFA
 165+ E4C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C3             >
 165+ E4C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C4 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C6             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C5 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C6             >
 165+ E4C6 B9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C8             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C8             >
 165+ E4C8             >mirror_Ptr      defl    $
 165+ E4C8             >
 165+ E4C8 2A 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CA             >
 165+ E4CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CA             >
 165+ E4CA             >//              ______________________________________________________________________
 165+ E4CA             >//              Dictionary part
 165+ E4CA             >
 165+ E4CA             >                org     Dict_Ptr
 165+ 6B28             >
 165+ 6B28 C8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B2A             >
 165+ 6B2A             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B2A CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B2D             >
 165+ 6B2D             >
 165+ 6B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B2D             >
 165+ 6B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B2D 1A          >                db      26
 166+ 6B2E                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B2E             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B2E             >
 166+ 6B2E             >Dict_Ptr        defl    $
 166+ 6B2E             >
 166+ 6B2E             >//              ______________________________________________________________________
 166+ 6B2E             >//              Heap part
 166+ 6B2E             >
 166+ 6B2E             >
 166+ 6B2E             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CA             >
 166+ E4CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CA             >Latest_Definition defl  Heap_Ptr
 166+ E4CA             >
 166+ E4CA             >                // dummy db directives used to calculate length of namec
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CE 45          >
 166+ E4CF             >len_NFA         defl    $ - temp_NFA
 166+ E4CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CA             >
 166+ E4CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CB 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CF 45          >
 166+ E4D0             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CF C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D0             >
 166+ E4D0 C3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D2             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D2             >
 166+ E4D2             >mirror_Ptr      defl    $
 166+ E4D2             >
 166+ E4D2 30 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D4             >
 166+ E4D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D4             >
 166+ E4D4             >//              ______________________________________________________________________
 166+ E4D4             >//              Dictionary part
 166+ E4D4             >
 166+ E4D4             >                org     Dict_Ptr
 166+ 6B2E             >
 166+ 6B2E D2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B30             >
 166+ 6B30             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B30 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B33             >
 166+ 6B33             >
 166+ 6B33             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B33             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B33             >
 166+ 6B33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B33 1C          >                db      28
 167+ 6B34                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B34             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B34             >
 167+ 6B34             >Dict_Ptr        defl    $
 167+ 6B34             >
 167+ 6B34             >//              ______________________________________________________________________
 167+ 6B34             >//              Heap part
 167+ 6B34             >
 167+ 6B34             >
 167+ 6B34             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D4             >
 167+ E4D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D4             >Latest_Definition defl  Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >                // dummy db directives used to calculate length of namec
 167+ E4D4 42 4C 4B    >                db      "BLK"
 167+ E4D7             >len_NFA         defl    $ - temp_NFA
 167+ E4D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D4             >
 167+ E4D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D5 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D8             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D7 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D8             >
 167+ E4D8 CA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DA             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DA             >
 167+ E4DA             >mirror_Ptr      defl    $
 167+ E4DA             >
 167+ E4DA 36 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DC             >
 167+ E4DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DC             >
 167+ E4DC             >//              ______________________________________________________________________
 167+ E4DC             >//              Dictionary part
 167+ E4DC             >
 167+ E4DC             >                org     Dict_Ptr
 167+ 6B34             >
 167+ 6B34 DA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B36             >
 167+ 6B36             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B36 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B39             >
 167+ 6B39             >
 167+ 6B39             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B39             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B39             >
 167+ 6B39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B39 1E          >                db      30
 168+ 6B3A                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B3A             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B3A             >
 168+ 6B3A             >Dict_Ptr        defl    $
 168+ 6B3A             >
 168+ 6B3A             >//              ______________________________________________________________________
 168+ 6B3A             >//              Heap part
 168+ 6B3A             >
 168+ 6B3A             >
 168+ 6B3A             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DC             >
 168+ E4DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DC             >Latest_Definition defl  Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >                // dummy db directives used to calculate length of namec
 168+ E4DC 3E 49 4E    >                db      ">IN"
 168+ E4DF             >len_NFA         defl    $ - temp_NFA
 168+ E4DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DC             >
 168+ E4DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E0             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DF CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E0             >
 168+ E4E0 D4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E2             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E2             >
 168+ E4E2             >mirror_Ptr      defl    $
 168+ E4E2             >
 168+ E4E2 3C 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E4             >
 168+ E4E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E4             >
 168+ E4E4             >//              ______________________________________________________________________
 168+ E4E4             >//              Dictionary part
 168+ E4E4             >
 168+ E4E4             >                org     Dict_Ptr
 168+ 6B3A             >
 168+ 6B3A E2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B3C             >
 168+ 6B3C             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B3C CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B3F             >
 168+ 6B3F             >
 168+ 6B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B3F             >
 168+ 6B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B3F 20          >                db      32
 169+ 6B40                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B40             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B40             >
 169+ 6B40             >Dict_Ptr        defl    $
 169+ 6B40             >
 169+ 6B40             >//              ______________________________________________________________________
 169+ 6B40             >//              Heap part
 169+ 6B40             >
 169+ 6B40             >
 169+ 6B40             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E4             >
 169+ E4E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E4             >Latest_Definition defl  Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >                // dummy db directives used to calculate length of namec
 169+ E4E4 4F 55 54    >                db      "OUT"
 169+ E4E7             >len_NFA         defl    $ - temp_NFA
 169+ E4E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E4             >
 169+ E4E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E5 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E8             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E7 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E8             >
 169+ E4E8 DC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EA             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EA             >
 169+ E4EA             >mirror_Ptr      defl    $
 169+ E4EA             >
 169+ E4EA 42 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EC             >
 169+ E4EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EC             >
 169+ E4EC             >//              ______________________________________________________________________
 169+ E4EC             >//              Dictionary part
 169+ E4EC             >
 169+ E4EC             >                org     Dict_Ptr
 169+ 6B40             >
 169+ 6B40 EA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B42             >
 169+ 6B42             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B42 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B45             >
 169+ 6B45             >
 169+ 6B45             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B45             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B45             >
 169+ 6B45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B45 22          >                db      34
 170+ 6B46                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B46             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B46             >
 170+ 6B46             >Dict_Ptr        defl    $
 170+ 6B46             >
 170+ 6B46             >//              ______________________________________________________________________
 170+ 6B46             >//              Heap part
 170+ 6B46             >
 170+ 6B46             >
 170+ 6B46             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EC             >
 170+ E4EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EC             >Latest_Definition defl  Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >                // dummy db directives used to calculate length of namec
 170+ E4EC 53 43 52    >                db      "SCR"
 170+ E4EF             >len_NFA         defl    $ - temp_NFA
 170+ E4EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EC             >
 170+ E4EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4ED 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F0             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EF D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F0             >
 170+ E4F0 E4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F2             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F2             >
 170+ E4F2             >mirror_Ptr      defl    $
 170+ E4F2             >
 170+ E4F2 48 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F4             >
 170+ E4F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F4             >
 170+ E4F4             >//              ______________________________________________________________________
 170+ E4F4             >//              Dictionary part
 170+ E4F4             >
 170+ E4F4             >                org     Dict_Ptr
 170+ 6B46             >
 170+ 6B46 F2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B48             >
 170+ 6B48             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B48 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B4B             >
 170+ 6B4B             >
 170+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B4B             >
 170+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B4B 24          >                db      36
 171+ 6B4C                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B4C             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B4C             >
 171+ 6B4C             >Dict_Ptr        defl    $
 171+ 6B4C             >
 171+ 6B4C             >//              ______________________________________________________________________
 171+ 6B4C             >//              Heap part
 171+ 6B4C             >
 171+ 6B4C             >
 171+ 6B4C             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F4             >
 171+ E4F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F4             >Latest_Definition defl  Heap_Ptr
 171+ E4F4             >
 171+ E4F4             >                // dummy db directives used to calculate length of namec
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"
 171+ E4F8 45 54       >
 171+ E4FA             >len_NFA         defl    $ - temp_NFA
 171+ E4FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F4             >
 171+ E4F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F5 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F9 45 54       >
 171+ E4FB             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FA D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FB             >
 171+ E4FB EC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FD             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FD             >
 171+ E4FD             >mirror_Ptr      defl    $
 171+ E4FD             >
 171+ E4FD 4E 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FF             >
 171+ E4FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FF             >
 171+ E4FF             >//              ______________________________________________________________________
 171+ E4FF             >//              Dictionary part
 171+ E4FF             >
 171+ E4FF             >                org     Dict_Ptr
 171+ 6B4C             >
 171+ 6B4C FD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B4E             >
 171+ 6B4E             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B4E CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B51             >
 171+ 6B51             >
 171+ 6B51             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B51             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B51             >
 171+ 6B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B51 26          >                db      38
 172+ 6B52                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B52             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B52             >
 172+ 6B52             >Dict_Ptr        defl    $
 172+ 6B52             >
 172+ 6B52             >//              ______________________________________________________________________
 172+ 6B52             >//              Heap part
 172+ 6B52             >
 172+ 6B52             >
 172+ 6B52             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FF             >
 172+ E4FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FF             >Latest_Definition defl  Heap_Ptr
 172+ E4FF             >
 172+ E4FF             >                // dummy db directives used to calculate length of namec
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"
 172+ E503 45 58 54    >
 172+ E506             >len_NFA         defl    $ - temp_NFA
 172+ E506             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FF             >
 172+ E4FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E500 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E504 45 58 54    >
 172+ E507             >                org     $-1                 // alter last byte of Name just above to set
 172+ E506 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E507             >
 172+ E507 F4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E509             >Prev_Ptr        defl    Heap_Ptr
 172+ E509             >
 172+ E509             >mirror_Ptr      defl    $
 172+ E509             >
 172+ E509 54 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E50B             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50B             >
 172+ E50B             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50B             >
 172+ E50B             >//              ______________________________________________________________________
 172+ E50B             >//              Dictionary part
 172+ E50B             >
 172+ E50B             >                org     Dict_Ptr
 172+ 6B52             >
 172+ 6B52 09 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B54             >
 172+ 6B54             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B54 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B57             >
 172+ 6B57             >
 172+ 6B57             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B57             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B57             >
 172+ 6B57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B57 28          >                db      40
 173+ 6B58                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B58             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B58             >
 173+ 6B58             >Dict_Ptr        defl    $
 173+ 6B58             >
 173+ 6B58             >//              ______________________________________________________________________
 173+ 6B58             >//              Heap part
 173+ 6B58             >
 173+ 6B58             >
 173+ 6B58             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50B             >
 173+ E50B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50B             >Latest_Definition defl  Heap_Ptr
 173+ E50B             >
 173+ E50B             >                // dummy db directives used to calculate length of namec
 173+ E50B 43 55 52 52 >                db      "CURRENT"
 173+ E50F 45 4E 54    >
 173+ E512             >len_NFA         defl    $ - temp_NFA
 173+ E512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50B             >
 173+ E50B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E510 45 4E 54    >
 173+ E513             >                org     $-1                 // alter last byte of Name just above to set
 173+ E512 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E513             >
 173+ E513 FF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E515             >Prev_Ptr        defl    Heap_Ptr
 173+ E515             >
 173+ E515             >mirror_Ptr      defl    $
 173+ E515             >
 173+ E515 5A 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E517             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E517             >
 173+ E517             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E517             >
 173+ E517             >//              ______________________________________________________________________
 173+ E517             >//              Dictionary part
 173+ E517             >
 173+ E517             >                org     Dict_Ptr
 173+ 6B58             >
 173+ 6B58 15 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B5A             >
 173+ 6B5A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B5A CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B5D             >
 173+ 6B5D             >
 173+ 6B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B5D             >
 173+ 6B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B5D 2A          >                db      42
 174+ 6B5E                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B5E             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B5E             >
 174+ 6B5E             >Dict_Ptr        defl    $
 174+ 6B5E             >
 174+ 6B5E             >//              ______________________________________________________________________
 174+ 6B5E             >//              Heap part
 174+ 6B5E             >
 174+ 6B5E             >
 174+ 6B5E             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E517             >
 174+ E517             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E517             >Latest_Definition defl  Heap_Ptr
 174+ E517             >
 174+ E517             >                // dummy db directives used to calculate length of namec
 174+ E517 53 54 41 54 >                db      "STATE"
 174+ E51B 45          >
 174+ E51C             >len_NFA         defl    $ - temp_NFA
 174+ E51C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E517             >
 174+ E517 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E518 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51C 45          >
 174+ E51D             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51C C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51D             >
 174+ E51D 0B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51F             >Prev_Ptr        defl    Heap_Ptr
 174+ E51F             >
 174+ E51F             >mirror_Ptr      defl    $
 174+ E51F             >
 174+ E51F 60 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E521             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E521             >
 174+ E521             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E521             >
 174+ E521             >//              ______________________________________________________________________
 174+ E521             >//              Dictionary part
 174+ E521             >
 174+ E521             >                org     Dict_Ptr
 174+ 6B5E             >
 174+ 6B5E 1F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B60             >
 174+ 6B60             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B60 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B63             >
 174+ 6B63             >
 174+ 6B63             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B63             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B63             >
 174+ 6B63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B63 2C          >                db      44
 175+ 6B64                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B64             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B64             >
 175+ 6B64             >Dict_Ptr        defl    $
 175+ 6B64             >
 175+ 6B64             >//              ______________________________________________________________________
 175+ 6B64             >//              Heap part
 175+ 6B64             >
 175+ 6B64             >
 175+ 6B64             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E521             >
 175+ E521             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E521             >Latest_Definition defl  Heap_Ptr
 175+ E521             >
 175+ E521             >                // dummy db directives used to calculate length of namec
 175+ E521 42 41 53 45 >                db      "BASE"
 175+ E525             >len_NFA         defl    $ - temp_NFA
 175+ E525             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E521             >
 175+ E521 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E522 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E526             >                org     $-1                 // alter last byte of Name just above to set
 175+ E525 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E526             >
 175+ E526 17 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E528             >Prev_Ptr        defl    Heap_Ptr
 175+ E528             >
 175+ E528             >mirror_Ptr      defl    $
 175+ E528             >
 175+ E528 66 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E52A             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52A             >
 175+ E52A             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52A             >
 175+ E52A             >//              ______________________________________________________________________
 175+ E52A             >//              Dictionary part
 175+ E52A             >
 175+ E52A             >                org     Dict_Ptr
 175+ 6B64             >
 175+ 6B64 28 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B66             >
 175+ 6B66             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B66 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B69             >
 175+ 6B69             >
 175+ 6B69             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B69             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B69             >
 175+ 6B69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B69 2E          >                db      46
 176+ 6B6A                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B6A             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B6A             >
 176+ 6B6A             >Dict_Ptr        defl    $
 176+ 6B6A             >
 176+ 6B6A             >//              ______________________________________________________________________
 176+ 6B6A             >//              Heap part
 176+ 6B6A             >
 176+ 6B6A             >
 176+ 6B6A             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52A             >
 176+ E52A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52A             >Latest_Definition defl  Heap_Ptr
 176+ E52A             >
 176+ E52A             >                // dummy db directives used to calculate length of namec
 176+ E52A 44 50 4C    >                db      "DPL"
 176+ E52D             >len_NFA         defl    $ - temp_NFA
 176+ E52D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52A             >
 176+ E52A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52B 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52E             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52D CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52E             >
 176+ E52E 21 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E530             >Prev_Ptr        defl    Heap_Ptr
 176+ E530             >
 176+ E530             >mirror_Ptr      defl    $
 176+ E530             >
 176+ E530 6C 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E532             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E532             >
 176+ E532             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E532             >
 176+ E532             >//              ______________________________________________________________________
 176+ E532             >//              Dictionary part
 176+ E532             >
 176+ E532             >                org     Dict_Ptr
 176+ 6B6A             >
 176+ 6B6A 30 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B6C             >
 176+ 6B6C             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B6C CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B6F             >
 176+ 6B6F             >
 176+ 6B6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B6F             >
 176+ 6B6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B6F 30          >                db      48
 177+ 6B70                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B70             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B70             >
 177+ 6B70             >Dict_Ptr        defl    $
 177+ 6B70             >
 177+ 6B70             >//              ______________________________________________________________________
 177+ 6B70             >//              Heap part
 177+ 6B70             >
 177+ 6B70             >
 177+ 6B70             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E532             >
 177+ E532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E532             >Latest_Definition defl  Heap_Ptr
 177+ E532             >
 177+ E532             >                // dummy db directives used to calculate length of namec
 177+ E532 46 4C 44    >                db      "FLD"
 177+ E535             >len_NFA         defl    $ - temp_NFA
 177+ E535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E532             >
 177+ E532 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E533 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E536             >                org     $-1                 // alter last byte of Name just above to set
 177+ E535 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E536             >
 177+ E536 2A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E538             >Prev_Ptr        defl    Heap_Ptr
 177+ E538             >
 177+ E538             >mirror_Ptr      defl    $
 177+ E538             >
 177+ E538 72 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E53A             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53A             >
 177+ E53A             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53A             >
 177+ E53A             >//              ______________________________________________________________________
 177+ E53A             >//              Dictionary part
 177+ E53A             >
 177+ E53A             >                org     Dict_Ptr
 177+ 6B70             >
 177+ 6B70 38 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B72             >
 177+ 6B72             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B72 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B75             >
 177+ 6B75             >
 177+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B75             >
 177+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B75 32          >                db      50
 178+ 6B76                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B76             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B76             >
 178+ 6B76             >Dict_Ptr        defl    $
 178+ 6B76             >
 178+ 6B76             >//              ______________________________________________________________________
 178+ 6B76             >//              Heap part
 178+ 6B76             >
 178+ 6B76             >
 178+ 6B76             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53A             >
 178+ E53A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53A             >Latest_Definition defl  Heap_Ptr
 178+ E53A             >
 178+ E53A             >                // dummy db directives used to calculate length of namec
 178+ E53A 43 53 50    >                db      "CSP"
 178+ E53D             >len_NFA         defl    $ - temp_NFA
 178+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53A             >
 178+ E53A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53B 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53D D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53E             >
 178+ E53E 32 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E540             >Prev_Ptr        defl    Heap_Ptr
 178+ E540             >
 178+ E540             >mirror_Ptr      defl    $
 178+ E540             >
 178+ E540 78 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E542             >
 178+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E542             >
 178+ E542             >//              ______________________________________________________________________
 178+ E542             >//              Dictionary part
 178+ E542             >
 178+ E542             >                org     Dict_Ptr
 178+ 6B76             >
 178+ 6B76 40 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B78             >
 178+ 6B78             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B78 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B7B             >
 178+ 6B7B             >
 178+ 6B7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B7B             >
 178+ 6B7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B7B 34          >                db      52
 179+ 6B7C                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B7C             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B7C             >
 179+ 6B7C             >Dict_Ptr        defl    $
 179+ 6B7C             >
 179+ 6B7C             >//              ______________________________________________________________________
 179+ 6B7C             >//              Heap part
 179+ 6B7C             >
 179+ 6B7C             >
 179+ 6B7C             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E542             >
 179+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E542             >Latest_Definition defl  Heap_Ptr
 179+ E542             >
 179+ E542             >                // dummy db directives used to calculate length of namec
 179+ E542 52 23       >                db      "R#"
 179+ E544             >len_NFA         defl    $ - temp_NFA
 179+ E544             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E542             >
 179+ E542 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E543 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E545             >                org     $-1                 // alter last byte of Name just above to set
 179+ E544 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E545             >
 179+ E545 3A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E547             >Prev_Ptr        defl    Heap_Ptr
 179+ E547             >
 179+ E547             >mirror_Ptr      defl    $
 179+ E547             >
 179+ E547 7E 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E549             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E549             >
 179+ E549             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E549             >
 179+ E549             >//              ______________________________________________________________________
 179+ E549             >//              Dictionary part
 179+ E549             >
 179+ E549             >                org     Dict_Ptr
 179+ 6B7C             >
 179+ 6B7C 47 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B7E             >
 179+ 6B7E             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B7E CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B81             >
 179+ 6B81             >
 179+ 6B81             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B81             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B81             >
 179+ 6B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B81 36          >                db      54
 180+ 6B82                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B82             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B82             >
 180+ 6B82             >Dict_Ptr        defl    $
 180+ 6B82             >
 180+ 6B82             >//              ______________________________________________________________________
 180+ 6B82             >//              Heap part
 180+ 6B82             >
 180+ 6B82             >
 180+ 6B82             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E549             >
 180+ E549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E549             >Latest_Definition defl  Heap_Ptr
 180+ E549             >
 180+ E549             >                // dummy db directives used to calculate length of namec
 180+ E549 48 4C 44    >                db      "HLD"
 180+ E54C             >len_NFA         defl    $ - temp_NFA
 180+ E54C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E549             >
 180+ E549 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54D             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54C C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54D             >
 180+ E54D 42 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54F             >Prev_Ptr        defl    Heap_Ptr
 180+ E54F             >
 180+ E54F             >mirror_Ptr      defl    $
 180+ E54F             >
 180+ E54F 84 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E551             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E551             >
 180+ E551             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E551             >
 180+ E551             >//              ______________________________________________________________________
 180+ E551             >//              Dictionary part
 180+ E551             >
 180+ E551             >                org     Dict_Ptr
 180+ 6B82             >
 180+ 6B82 4F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B84             >
 180+ 6B84             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B84 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B87             >
 180+ 6B87             >
 180+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B87             >
 180+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B87 38          >                db      56
 181+ 6B88                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B88             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B88             >
 181+ 6B88             >Dict_Ptr        defl    $
 181+ 6B88             >
 181+ 6B88             >//              ______________________________________________________________________
 181+ 6B88             >//              Heap part
 181+ 6B88             >
 181+ 6B88             >
 181+ 6B88             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E551             >
 181+ E551             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E551             >Latest_Definition defl  Heap_Ptr
 181+ E551             >
 181+ E551             >                // dummy db directives used to calculate length of namec
 181+ E551 55 53 45 44 >                db      "USED"
 181+ E555             >len_NFA         defl    $ - temp_NFA
 181+ E555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E551             >
 181+ E551 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E552 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E556             >                org     $-1                 // alter last byte of Name just above to set
 181+ E555 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E556             >
 181+ E556 49 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E558             >Prev_Ptr        defl    Heap_Ptr
 181+ E558             >
 181+ E558             >mirror_Ptr      defl    $
 181+ E558             >
 181+ E558 8A 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E55A             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55A             >
 181+ E55A             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55A             >
 181+ E55A             >//              ______________________________________________________________________
 181+ E55A             >//              Dictionary part
 181+ E55A             >
 181+ E55A             >                org     Dict_Ptr
 181+ 6B88             >
 181+ 6B88 58 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B8A             >
 181+ 6B8A             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B8A CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B8D             >
 181+ 6B8D             >
 181+ 6B8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B8D             >
 181+ 6B8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B8D 3A          >                db      58
 182+ 6B8E                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B8E             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B8E             >
 182+ 6B8E             >Dict_Ptr        defl    $
 182+ 6B8E             >
 182+ 6B8E             >//              ______________________________________________________________________
 182+ 6B8E             >//              Heap part
 182+ 6B8E             >
 182+ 6B8E             >
 182+ 6B8E             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55A             >
 182+ E55A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55A             >Latest_Definition defl  Heap_Ptr
 182+ E55A             >
 182+ E55A             >                // dummy db directives used to calculate length of namec
 182+ E55A 50 52 45 56 >                db      "PREV"
 182+ E55E             >len_NFA         defl    $ - temp_NFA
 182+ E55E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55A             >
 182+ E55A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55B 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55F             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55E D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55F             >
 182+ E55F 51 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E561             >Prev_Ptr        defl    Heap_Ptr
 182+ E561             >
 182+ E561             >mirror_Ptr      defl    $
 182+ E561             >
 182+ E561 90 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E563             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E563             >
 182+ E563             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E563             >
 182+ E563             >//              ______________________________________________________________________
 182+ E563             >//              Dictionary part
 182+ E563             >
 182+ E563             >                org     Dict_Ptr
 182+ 6B8E             >
 182+ 6B8E 61 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B90             >
 182+ 6B90             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B90 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B93             >
 182+ 6B93             >
 182+ 6B93             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B93             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B93             >
 182+ 6B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B93 3C          >                db      60
 183+ 6B94                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B94             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B94             >
 183+ 6B94             >Dict_Ptr        defl    $
 183+ 6B94             >
 183+ 6B94             >//              ______________________________________________________________________
 183+ 6B94             >//              Heap part
 183+ 6B94             >
 183+ 6B94             >
 183+ 6B94             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E563             >
 183+ E563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E563             >Latest_Definition defl  Heap_Ptr
 183+ E563             >
 183+ E563             >                // dummy db directives used to calculate length of namec
 183+ E563 4C 50       >                db      "LP"
 183+ E565             >len_NFA         defl    $ - temp_NFA
 183+ E565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E563             >
 183+ E563 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E564 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E566             >                org     $-1                 // alter last byte of Name just above to set
 183+ E565 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E566             >
 183+ E566 5A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E568             >Prev_Ptr        defl    Heap_Ptr
 183+ E568             >
 183+ E568             >mirror_Ptr      defl    $
 183+ E568             >
 183+ E568 96 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E56A             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56A             >
 183+ E56A             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56A             >
 183+ E56A             >//              ______________________________________________________________________
 183+ E56A             >//              Dictionary part
 183+ E56A             >
 183+ E56A             >                org     Dict_Ptr
 183+ 6B94             >
 183+ 6B94 68 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B96             >
 183+ 6B96             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B96 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B99             >
 183+ 6B99             >
 183+ 6B99             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B99             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B99             >
 183+ 6B99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B99 3E          >                db      62
 184+ 6B9A                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B9A             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B9A             >
 184+ 6B9A             >Dict_Ptr        defl    $
 184+ 6B9A             >
 184+ 6B9A             >//              ______________________________________________________________________
 184+ 6B9A             >//              Heap part
 184+ 6B9A             >
 184+ 6B9A             >
 184+ 6B9A             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56A             >
 184+ E56A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56A             >Latest_Definition defl  Heap_Ptr
 184+ E56A             >
 184+ E56A             >                // dummy db directives used to calculate length of namec
 184+ E56A 50 4C 41 43 >                db      "PLACE"
 184+ E56E 45          >
 184+ E56F             >len_NFA         defl    $ - temp_NFA
 184+ E56F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56A             >
 184+ E56A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56F 45          >
 184+ E570             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56F C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E570             >
 184+ E570 63 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E572             >Prev_Ptr        defl    Heap_Ptr
 184+ E572             >
 184+ E572             >mirror_Ptr      defl    $
 184+ E572             >
 184+ E572 9C 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E574             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E574             >
 184+ E574             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E574             >
 184+ E574             >//              ______________________________________________________________________
 184+ E574             >//              Dictionary part
 184+ E574             >
 184+ E574             >                org     Dict_Ptr
 184+ 6B9A             >
 184+ 6B9A 72 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B9C             >
 184+ 6B9C             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B9C CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B9F             >
 184+ 6B9F             >
 184+ 6B9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B9F             >
 184+ 6B9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B9F 40          >                db      64
 185+ 6BA0                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6BA0             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6BA0             >
 185+ 6BA0             >Dict_Ptr        defl    $
 185+ 6BA0             >
 185+ 6BA0             >//              ______________________________________________________________________
 185+ 6BA0             >//              Heap part
 185+ 6BA0             >
 185+ 6BA0             >
 185+ 6BA0             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E574             >
 185+ E574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E574             >Latest_Definition defl  Heap_Ptr
 185+ E574             >
 185+ E574             >                // dummy db directives used to calculate length of namec
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >len_NFA         defl    $ - temp_NFA
 185+ E57D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E574             >
 185+ E574 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E575 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E579 43 45 2D 49 >
 185+ E57D 44          >
 185+ E57E             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57D C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57E             >
 185+ E57E 6A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E580             >Prev_Ptr        defl    Heap_Ptr
 185+ E580             >
 185+ E580             >mirror_Ptr      defl    $
 185+ E580             >
 185+ E580 A2 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E582             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E582             >
 185+ E582             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E582             >
 185+ E582             >//              ______________________________________________________________________
 185+ E582             >//              Dictionary part
 185+ E582             >
 185+ E582             >                org     Dict_Ptr
 185+ 6BA0             >
 185+ 6BA0 80 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6BA2             >
 185+ 6BA2             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6BA2 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6BA5             >
 185+ 6BA5             >
 185+ 6BA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6BA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6BA5             >
 185+ 6BA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6BA5 42          >                db      66
 186+ 6BA6                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6BA6             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6BA6             >
 186+ 6BA6             >Dict_Ptr        defl    $
 186+ 6BA6             >
 186+ 6BA6             >//              ______________________________________________________________________
 186+ 6BA6             >//              Heap part
 186+ 6BA6             >
 186+ 6BA6             >
 186+ 6BA6             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E582             >
 186+ E582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E582             >Latest_Definition defl  Heap_Ptr
 186+ E582             >
 186+ E582             >                // dummy db directives used to calculate length of namec
 186+ E582 53 50 41 4E >                db      "SPAN"
 186+ E586             >len_NFA         defl    $ - temp_NFA
 186+ E586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E582             >
 186+ E582 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E583 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E587             >                org     $-1                 // alter last byte of Name just above to set
 186+ E586 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E587             >
 186+ E587 74 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E589             >Prev_Ptr        defl    Heap_Ptr
 186+ E589             >
 186+ E589             >mirror_Ptr      defl    $
 186+ E589             >
 186+ E589 A8 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E58B             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58B             >
 186+ E58B             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58B             >
 186+ E58B             >//              ______________________________________________________________________
 186+ E58B             >//              Dictionary part
 186+ E58B             >
 186+ E58B             >                org     Dict_Ptr
 186+ 6BA6             >
 186+ 6BA6 89 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6BA8             >
 186+ 6BA8             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6BA8 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6BAB             >
 186+ 6BAB             >
 186+ 6BAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6BAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6BAB             >
 186+ 6BAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6BAB 44          >                db      68
 187+ 6BAC                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6BAC             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6BAC             >
 187+ 6BAC             >Dict_Ptr        defl    $
 187+ 6BAC             >
 187+ 6BAC             >//              ______________________________________________________________________
 187+ 6BAC             >//              Heap part
 187+ 6BAC             >
 187+ 6BAC             >
 187+ 6BAC             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58B             >
 187+ E58B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58B             >Latest_Definition defl  Heap_Ptr
 187+ E58B             >
 187+ E58B             >                // dummy db directives used to calculate length of namec
 187+ E58B 48 41 4E 44 >                db      "HANDLER"
 187+ E58F 4C 45 52    >
 187+ E592             >len_NFA         defl    $ - temp_NFA
 187+ E592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58B             >
 187+ E58B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58C 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E590 4C 45 52    >
 187+ E593             >                org     $-1                 // alter last byte of Name just above to set
 187+ E592 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E593             >
 187+ E593 82 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E595             >Prev_Ptr        defl    Heap_Ptr
 187+ E595             >
 187+ E595             >mirror_Ptr      defl    $
 187+ E595             >
 187+ E595 AE 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E597             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E597             >
 187+ E597             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E597             >
 187+ E597             >//              ______________________________________________________________________
 187+ E597             >//              Dictionary part
 187+ E597             >
 187+ E597             >                org     Dict_Ptr
 187+ 6BAC             >
 187+ 6BAC 95 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6BAE             >
 187+ 6BAE             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6BAE CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6BB1             >
 187+ 6BB1             >
 187+ 6BB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6BB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6BB1             >
 187+ 6BB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6BB1 46          >                db      70
 188+ 6BB2                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6BB2             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6BB2             >
 188+ 6BB2             >Dict_Ptr        defl    $
 188+ 6BB2             >
 188+ 6BB2             >//              ______________________________________________________________________
 188+ 6BB2             >//              Heap part
 188+ 6BB2             >
 188+ 6BB2             >
 188+ 6BB2             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E597             >
 188+ E597             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E597             >Latest_Definition defl  Heap_Ptr
 188+ E597             >
 188+ E597             >                // dummy db directives used to calculate length of namec
 188+ E597 45 58 50    >                db      "EXP"
 188+ E59A             >len_NFA         defl    $ - temp_NFA
 188+ E59A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E597             >
 188+ E597 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E598 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59B             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59A D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59B             >
 188+ E59B 8B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59D             >Prev_Ptr        defl    Heap_Ptr
 188+ E59D             >
 188+ E59D             >mirror_Ptr      defl    $
 188+ E59D             >
 188+ E59D B4 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59F             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59F             >
 188+ E59F             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59F             >
 188+ E59F             >//              ______________________________________________________________________
 188+ E59F             >//              Dictionary part
 188+ E59F             >
 188+ E59F             >                org     Dict_Ptr
 188+ 6BB2             >
 188+ 6BB2 9D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BB4             >
 188+ 6BB4             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BB4 CD 89 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BB7             >
 188+ 6BB7             >
 188+ 6BB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BB7             >
 188+ 6BB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BB7 48          >                db      72
 189+ 6BB8
 190+ 6BB8              //  ______________________________________________________________________
 191+ 6BB8              //
 192+ 6BB8              // here         -- a
 193+ 6BB8                              Colon_Def HERE, "HERE", is_normal
 193+ 6BB8             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BB8             >
 193+ 6BB8             >Dict_Ptr        defl    $
 193+ 6BB8             >
 193+ 6BB8             >//              ______________________________________________________________________
 193+ 6BB8             >//              Heap part
 193+ 6BB8             >
 193+ 6BB8             >
 193+ 6BB8             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59F             >
 193+ E59F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59F             >Latest_Definition defl  Heap_Ptr
 193+ E59F             >
 193+ E59F             >                // dummy db directives used to calculate length of namec
 193+ E59F 48 45 52 45 >                db      "HERE"
 193+ E5A3             >len_NFA         defl    $ - temp_NFA
 193+ E5A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59F             >
 193+ E59F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A0 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A4             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A3 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A4             >
 193+ E5A4 97 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A6             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A6             >
 193+ E5A6             >mirror_Ptr      defl    $
 193+ E5A6             >
 193+ E5A6 BA 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A8             >
 193+ E5A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A8             >
 193+ E5A8             >//              ______________________________________________________________________
 193+ E5A8             >//              Dictionary part
 193+ E5A8             >
 193+ E5A8             >                org     Dict_Ptr
 193+ 6BB8             >
 193+ 6BB8 A6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BBA             >
 193+ 6BBA             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BBA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BBD             >
 193+ 6BBD             >
 193+ 6BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BBD             >
 193+ 6BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BBD 12 6B 9D 69                  dw      DP, FETCH               // dp @
 195+ 6BC1 53 68                        dw      EXIT                    // ;
 196+ 6BC3
 197+ 6BC3              //  ______________________________________________________________________
 198+ 6BC3              //
 199+ 6BC3              // allot        n --
 200+ 6BC3                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BC3             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BC3             >
 200+ 6BC3             >Dict_Ptr        defl    $
 200+ 6BC3             >
 200+ 6BC3             >//              ______________________________________________________________________
 200+ 6BC3             >//              Heap part
 200+ 6BC3             >
 200+ 6BC3             >
 200+ 6BC3             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A8             >
 200+ E5A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A8             >Latest_Definition defl  Heap_Ptr
 200+ E5A8             >
 200+ E5A8             >                // dummy db directives used to calculate length of namec
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AC 54          >
 200+ E5AD             >len_NFA         defl    $ - temp_NFA
 200+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A8             >
 200+ E5A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A9 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AD 54          >
 200+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AD D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AE             >
 200+ E5AE 9F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B0             >
 200+ E5B0             >mirror_Ptr      defl    $
 200+ E5B0             >
 200+ E5B0 C5 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B2             >
 200+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B2             >
 200+ E5B2             >//              ______________________________________________________________________
 200+ E5B2             >//              Dictionary part
 200+ E5B2             >
 200+ E5B2             >                org     Dict_Ptr
 200+ 6BC3             >
 200+ 6BC3 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BC5             >
 200+ 6BC5             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BC5 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BC8             >
 200+ 6BC8             >
 200+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BC8             >
 200+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BC8 12 6B 85 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BCC 53 68                        dw      EXIT                    // ;
 203+ 6BCE
 204+ 6BCE              //  ______________________________________________________________________
 205+ 6BCE              //
 206+ 6BCE              // comma        n --
 207+ 6BCE                              Colon_Def COMMA, ",", is_normal
 207+ 6BCE             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BCE             >
 207+ 6BCE             >Dict_Ptr        defl    $
 207+ 6BCE             >
 207+ 6BCE             >//              ______________________________________________________________________
 207+ 6BCE             >//              Heap part
 207+ 6BCE             >
 207+ 6BCE             >
 207+ 6BCE             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B2             >
 207+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B2             >Latest_Definition defl  Heap_Ptr
 207+ E5B2             >
 207+ E5B2             >                // dummy db directives used to calculate length of namec
 207+ E5B2 2C          >                db      ","
 207+ E5B3             >len_NFA         defl    $ - temp_NFA
 207+ E5B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B2             >
 207+ E5B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B3 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B4             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B3 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B4             >
 207+ E5B4 A8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B6             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B6             >
 207+ E5B6             >mirror_Ptr      defl    $
 207+ E5B6             >
 207+ E5B6 D0 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B8             >
 207+ E5B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B8             >
 207+ E5B8             >//              ______________________________________________________________________
 207+ E5B8             >//              Dictionary part
 207+ E5B8             >
 207+ E5B8             >                org     Dict_Ptr
 207+ 6BCE             >
 207+ 6BCE B6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BD0             >
 207+ 6BD0             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BD0 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BD3             >
 207+ 6BD3             >
 207+ 6BD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BD3             >
 207+ 6BD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BD3 BA 6B A7 69                  dw      HERE, STORE             // here !
 209+ 6BD7 A3 6A C5 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BDB 53 68                        dw      EXIT                    // ;
 211+ 6BDD
 212+ 6BDD              //  ______________________________________________________________________
 213+ 6BDD              //
 214+ 6BDD              // ccomma       c --
 215+ 6BDD                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BDD             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BDD             >
 215+ 6BDD             >Dict_Ptr        defl    $
 215+ 6BDD             >
 215+ 6BDD             >//              ______________________________________________________________________
 215+ 6BDD             >//              Heap part
 215+ 6BDD             >
 215+ 6BDD             >
 215+ 6BDD             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B8             >
 215+ E5B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B8             >Latest_Definition defl  Heap_Ptr
 215+ E5B8             >
 215+ E5B8             >                // dummy db directives used to calculate length of namec
 215+ E5B8 43 2C       >                db      "C,"
 215+ E5BA             >len_NFA         defl    $ - temp_NFA
 215+ E5BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B8             >
 215+ E5B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B9 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BB             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BA AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BB             >
 215+ E5BB B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BD             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BD             >
 215+ E5BD             >mirror_Ptr      defl    $
 215+ E5BD             >
 215+ E5BD DF 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BF             >
 215+ E5BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BF             >
 215+ E5BF             >//              ______________________________________________________________________
 215+ E5BF             >//              Dictionary part
 215+ E5BF             >
 215+ E5BF             >                org     Dict_Ptr
 215+ 6BDD             >
 215+ 6BDD BD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BDF             >
 215+ 6BDF             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BDF CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BE2             >
 215+ 6BE2             >
 215+ 6BE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BE2             >
 215+ 6BE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BE2 BA 6B BB 69                  dw      HERE, CSTORE            // here c!
 217+ 6BE6 9C 6A C5 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BEA 53 68                        dw      EXIT                    // ;
 219+ 6BEC
 220+ 6BEC              //  ______________________________________________________________________
 221+ 6BEC              //
 222+ 6BEC              // hpcomma      n --
 223+ 6BEC              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BEC              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BEC              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BEC              //              dw      EXIT                    // ;
 227+ 6BEC
 228+ 6BEC              //  ______________________________________________________________________
 229+ 6BEC              //
 230+ 6BEC              // s>d          n -- d
 231+ 6BEC              // converts a single precision integer in a double precision
 232+ 6BEC                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BEC             >
 232+ 6BEC             >Dict_Ptr        defl    $
 232+ 6BEC             >
 232+ 6BEC             >//              ______________________________________________________________________
 232+ 6BEC             >//              Heap part
 232+ 6BEC             >
 232+ 6BEC             >
 232+ 6BEC             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BF             >
 232+ E5BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BF             >Latest_Definition defl  Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >                // dummy db directives used to calculate length of namec
 232+ E5BF 53 3E 44    >                db      "S>D"
 232+ E5C2             >len_NFA         defl    $ - temp_NFA
 232+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BF             >
 232+ E5BF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C0 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C2 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C3             >
 232+ E5C3 B8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C5             >
 232+ E5C5             >mirror_Ptr      defl    $
 232+ E5C5             >
 232+ E5C5 EE 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C7             >
 232+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C7             >
 232+ E5C7             >//              ______________________________________________________________________
 232+ E5C7             >//              Dictionary part
 232+ E5C7             >
 232+ E5C7             >                org     Dict_Ptr
 232+ 6BEC             >
 232+ 6BEC C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BEE             >
 232+ 6BEE             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BEE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BEE ~           >
 232+ 6BEE ~           >
 232+ 6BEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BEE             >
 232+ 6BEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BEE E1                           pop     hl
 234+ 6BEF 7C                           ld      a, h
 235+ 6BF0 E5                           push    hl
 236+ 6BF1 17                           rla
 237+ 6BF2 ED 62                        sbc     hl, hl
 238+ 6BF4 E5                           push    hl
 239+ 6BF5                              next
 239+ 6BF5 DD E9       >                jp      (ix)
 240+ 6BF7
 241+ 6BF7              //  ______________________________________________________________________
 242+ 6BF7              //
 243+ 6BF7              // -            n1 n2 -- n3
 244+ 6BF7              // subtraction
 245+ 6BF7                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BF7             >
 245+ 6BF7             >Dict_Ptr        defl    $
 245+ 6BF7             >
 245+ 6BF7             >//              ______________________________________________________________________
 245+ 6BF7             >//              Heap part
 245+ 6BF7             >
 245+ 6BF7             >
 245+ 6BF7             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C7             >
 245+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C7             >Latest_Definition defl  Heap_Ptr
 245+ E5C7             >
 245+ E5C7             >                // dummy db directives used to calculate length of namec
 245+ E5C7 2D          >                db      "-"
 245+ E5C8             >len_NFA         defl    $ - temp_NFA
 245+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C7             >
 245+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C8 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C8 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C9             >
 245+ E5C9 BF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CB             >
 245+ E5CB             >mirror_Ptr      defl    $
 245+ E5CB             >
 245+ E5CB F9 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CD             >
 245+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CD             >
 245+ E5CD             >//              ______________________________________________________________________
 245+ E5CD             >//              Dictionary part
 245+ E5CD             >
 245+ E5CD             >                org     Dict_Ptr
 245+ 6BF7             >
 245+ 6BF7 CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BF9             >
 245+ 6BF9             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BF9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BF9 ~           >
 245+ 6BF9 ~           >
 245+ 6BF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BF9             >
 245+ 6BF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BF9 D9                           exx
 247+ 6BFA D1                           pop     de
 248+ 6BFB E1                           pop     hl
 249+ 6BFC A7                           and     a
 250+ 6BFD ED 52                        sbc     hl, de
 251+ 6BFF E5                           push    hl
 252+ 6C00 D9                           exx
 253+ 6C01                              next
 253+ 6C01 DD E9       >                jp      (ix)
 254+ 6C03
 255+ 6C03
 256+ 6C03              //  ______________________________________________________________________
 257+ 6C03              //
 258+ 6C03              // =            n1 n2 -- n3
 259+ 6C03              // equals
 260+ 6C03                              Colon_Def EQUALS, "=", is_normal
 260+ 6C03             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6C03             >
 260+ 6C03             >Dict_Ptr        defl    $
 260+ 6C03             >
 260+ 6C03             >//              ______________________________________________________________________
 260+ 6C03             >//              Heap part
 260+ 6C03             >
 260+ 6C03             >
 260+ 6C03             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CD             >
 260+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CD             >Latest_Definition defl  Heap_Ptr
 260+ E5CD             >
 260+ E5CD             >                // dummy db directives used to calculate length of namec
 260+ E5CD 3D          >                db      "="
 260+ E5CE             >len_NFA         defl    $ - temp_NFA
 260+ E5CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CD             >
 260+ E5CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CE 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CF             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CE BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CF             >
 260+ E5CF C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D1             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D1             >
 260+ E5D1             >mirror_Ptr      defl    $
 260+ E5D1             >
 260+ E5D1 05 6C       >                dw      Dict_Ptr + 2        // xt
 260+ E5D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D3             >
 260+ E5D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D3             >
 260+ E5D3             >//              ______________________________________________________________________
 260+ E5D3             >//              Dictionary part
 260+ E5D3             >
 260+ E5D3             >                org     Dict_Ptr
 260+ 6C03             >
 260+ 6C03 D1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6C05             >
 260+ 6C05             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6C05 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6C08             >
 260+ 6C08             >
 260+ 6C08             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6C08             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6C08             >
 260+ 6C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6C08 F9 6B 78 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6C0C 53 68                        dw      EXIT                    // ;
 263+ 6C0E
 264+ 6C0E              //  ______________________________________________________________________
 265+ 6C0E              //
 266+ 6C0E              // u<           u1 u2 -- u3
 267+ 6C0E              // unsigned less-than
 268+ 6C0E                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6C0E             >
 268+ 6C0E             >Dict_Ptr        defl    $
 268+ 6C0E             >
 268+ 6C0E             >//              ______________________________________________________________________
 268+ 6C0E             >//              Heap part
 268+ 6C0E             >
 268+ 6C0E             >
 268+ 6C0E             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D3             >
 268+ E5D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D3             >Latest_Definition defl  Heap_Ptr
 268+ E5D3             >
 268+ E5D3             >                // dummy db directives used to calculate length of namec
 268+ E5D3 55 3C       >                db      "U<"
 268+ E5D5             >len_NFA         defl    $ - temp_NFA
 268+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D3             >
 268+ E5D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D4 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D6             >
 268+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >mirror_Ptr      defl    $
 268+ E5D8             >
 268+ E5D8 10 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DA             >
 268+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DA             >
 268+ E5DA             >//              ______________________________________________________________________
 268+ E5DA             >//              Dictionary part
 268+ E5DA             >
 268+ E5DA             >                org     Dict_Ptr
 268+ 6C0E             >
 268+ 6C0E D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C10             >
 268+ 6C10             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C10 ~           >
 268+ 6C10 ~           >
 268+ 6C10             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C10             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C10             >
 268+ 6C10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C10 D9                           exx
 270+ 6C11 D1                           pop     de
 271+ 6C12 E1                           pop     hl
 272+ 6C13 A7                           and     a
 273+ 6C14 ED 52                        sbc     hl, de
 274+ 6C16 ED 62                        sbc     hl, hl
 275+ 6C18 E5                           push    hl
 276+ 6C19 D9                           exx
 277+ 6C1A                              next
 277+ 6C1A DD E9       >                jp      (ix)
 278+ 6C1C
 279+ 6C1C              //  ______________________________________________________________________
 280+ 6C1C              //
 281+ 6C1C              // <           n1 n2 -- n3
 282+ 6C1C              // less-than
 283+ 6C1C                              New_Def LESS, "<", is_code, is_normal
 283+ 6C1C             >
 283+ 6C1C             >Dict_Ptr        defl    $
 283+ 6C1C             >
 283+ 6C1C             >//              ______________________________________________________________________
 283+ 6C1C             >//              Heap part
 283+ 6C1C             >
 283+ 6C1C             >
 283+ 6C1C             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5DA             >
 283+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5DA             >Latest_Definition defl  Heap_Ptr
 283+ E5DA             >
 283+ E5DA             >                // dummy db directives used to calculate length of namec
 283+ E5DA 3C          >                db      "<"
 283+ E5DB             >len_NFA         defl    $ - temp_NFA
 283+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5DA             >
 283+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5DB 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5DB BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5DC             >
 283+ E5DC D3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DE             >
 283+ E5DE             >mirror_Ptr      defl    $
 283+ E5DE             >
 283+ E5DE 1E 6C       >                dw      Dict_Ptr + 2        // xt
 283+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5E0             >
 283+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5E0             >
 283+ E5E0             >//              ______________________________________________________________________
 283+ E5E0             >//              Dictionary part
 283+ E5E0             >
 283+ E5E0             >                org     Dict_Ptr
 283+ 6C1C             >
 283+ 6C1C DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 6C1E             >
 283+ 6C1E             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 6C1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 6C1E ~           >
 283+ 6C1E ~           >
 283+ 6C1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 6C1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 6C1E             >
 283+ 6C1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 6C1E D9                           exx
 285+ 6C1F D1                           pop     de
 286+ 6C20 E1                           pop     hl
 287+ 6C21 7C                           ld      a, h
 288+ 6C22 EE 80                        xor     $80
 289+ 6C24 67                           ld      h, a
 290+ 6C25 7A                           ld      a, d
 291+ 6C26 EE 80                        xor     $80
 292+ 6C28 57                           ld      d, a
 293+ 6C29              //              and     a
 294+ 6C29 ED 52                        sbc     hl, de
 295+ 6C2B ED 62                        sbc     hl, hl
 296+ 6C2D E5                           push    hl
 297+ 6C2E D9                           exx
 298+ 6C2F                              next
 298+ 6C2F DD E9       >                jp      (ix)
 299+ 6C31
 300+ 6C31              //  ______________________________________________________________________
 301+ 6C31              //
 302+ 6C31              // >            n1 n2 -- n3
 303+ 6C31              // greater than
 304+ 6C31                              Colon_Def GREATER, ">", is_normal
 304+ 6C31             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C31             >
 304+ 6C31             >Dict_Ptr        defl    $
 304+ 6C31             >
 304+ 6C31             >//              ______________________________________________________________________
 304+ 6C31             >//              Heap part
 304+ 6C31             >
 304+ 6C31             >
 304+ 6C31             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E0             >
 304+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E0             >Latest_Definition defl  Heap_Ptr
 304+ E5E0             >
 304+ E5E0             >                // dummy db directives used to calculate length of namec
 304+ E5E0 3E          >                db      ">"
 304+ E5E1             >len_NFA         defl    $ - temp_NFA
 304+ E5E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E0             >
 304+ E5E0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E1 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E2             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E1 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E2             >
 304+ E5E2 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E4             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E4             >
 304+ E5E4             >mirror_Ptr      defl    $
 304+ E5E4             >
 304+ E5E4 33 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E6             >
 304+ E5E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E6             >
 304+ E5E6             >//              ______________________________________________________________________
 304+ E5E6             >//              Dictionary part
 304+ E5E6             >
 304+ E5E6             >                org     Dict_Ptr
 304+ 6C31             >
 304+ 6C31 E4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C33             >
 304+ 6C33             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C33 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C36             >
 304+ 6C36             >
 304+ 6C36             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C36             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C36             >
 304+ 6C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C36 25 69 1E 6C                  dw      SWAP, LESS              // swap <
 306+ 6C3A 53 68                        dw      EXIT                    // ;
 307+ 6C3C              //  ______________________________________________________________________
 308+ 6C3C              //
 309+ 6C3C              // min          n1 n2 -- n3
 310+ 6C3C              // minimum between n1 and n2
 311+ 6C3C                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C3C             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C3C             >
 311+ 6C3C             >Dict_Ptr        defl    $
 311+ 6C3C             >
 311+ 6C3C             >//              ______________________________________________________________________
 311+ 6C3C             >//              Heap part
 311+ 6C3C             >
 311+ 6C3C             >
 311+ 6C3C             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E6             >
 311+ E5E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E6             >Latest_Definition defl  Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >                // dummy db directives used to calculate length of namec
 311+ E5E6 4D 49 4E    >                db      "MIN"
 311+ E5E9             >len_NFA         defl    $ - temp_NFA
 311+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E6             >
 311+ E5E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E7 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E9 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EA             >
 311+ E5EA E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EC             >
 311+ E5EC             >mirror_Ptr      defl    $
 311+ E5EC             >
 311+ E5EC 3E 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EE             >
 311+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EE             >
 311+ E5EE             >//              ______________________________________________________________________
 311+ E5EE             >//              Dictionary part
 311+ E5EE             >
 311+ E5EE             >                org     Dict_Ptr
 311+ 6C3C             >
 311+ 6C3C EC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C3E             >
 311+ 6C3E             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C3E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C41             >
 311+ 6C41             >
 311+ 6C41             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C41             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C41             >
 311+ 6C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C41 7B 69                        dw      TWO_DUP                 // 2dup
 313+ 6C43 33 6C                        dw      GREATER                 // >
 314+ 6C45 F5 63                        dw      ZBRANCH
 315+ 6C47 04 00                        dw      Min_Skip - $   // if
 316+ 6C49 25 69                        dw          SWAP                //      swap
 317+ 6C4B              Min_Skip:                                       // endif
 318+ 6C4B 11 69                        dw      DROP                    // drop
 319+ 6C4D 53 68                        dw      EXIT                    // ;
 320+ 6C4F
 321+ 6C4F              //  ______________________________________________________________________
 322+ 6C4F              //
 323+ 6C4F              // max          n1 n2 -- n3
 324+ 6C4F              // maximum between n1 and n2
 325+ 6C4F                              Colon_Def MAX, "MAX", is_normal
 325+ 6C4F             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C4F             >
 325+ 6C4F             >Dict_Ptr        defl    $
 325+ 6C4F             >
 325+ 6C4F             >//              ______________________________________________________________________
 325+ 6C4F             >//              Heap part
 325+ 6C4F             >
 325+ 6C4F             >
 325+ 6C4F             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EE             >
 325+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EE             >Latest_Definition defl  Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >                // dummy db directives used to calculate length of namec
 325+ E5EE 4D 41 58    >                db      "MAX"
 325+ E5F1             >len_NFA         defl    $ - temp_NFA
 325+ E5F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EE             >
 325+ E5EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EF 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F2             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F1 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F2             >
 325+ E5F2 E6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F4             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F4             >
 325+ E5F4             >mirror_Ptr      defl    $
 325+ E5F4             >
 325+ E5F4 51 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F6             >
 325+ E5F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F6             >
 325+ E5F6             >//              ______________________________________________________________________
 325+ E5F6             >//              Dictionary part
 325+ E5F6             >
 325+ E5F6             >                org     Dict_Ptr
 325+ 6C4F             >
 325+ 6C4F F4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C51             >
 325+ 6C51             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C51 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C54             >
 325+ 6C54             >
 325+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C54             >
 325+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C54 7B 69                        dw      TWO_DUP                 // 2dup
 327+ 6C56 1E 6C                        dw      LESS                    // <
 328+ 6C58 F5 63                        dw      ZBRANCH
 329+ 6C5A 04 00                        dw      Max_Skip - $   // if
 330+ 6C5C 25 69                        dw          SWAP                //      swap
 331+ 6C5E              Max_Skip:                                       // endif
 332+ 6C5E 11 69                        dw      DROP                    // drop
 333+ 6C60 53 68                        dw      EXIT                    // ;
 334+ 6C62
 335+ 6C62              //  ______________________________________________________________________
 336+ 6C62              //
 337+ 6C62              // ?dup         n -- 0 | n n
 338+ 6C62              // duplicate if not zero
 339+ 6C62                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C62             >
 339+ 6C62             >Dict_Ptr        defl    $
 339+ 6C62             >
 339+ 6C62             >//              ______________________________________________________________________
 339+ 6C62             >//              Heap part
 339+ 6C62             >
 339+ 6C62             >
 339+ 6C62             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F6             >
 339+ E5F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F6             >Latest_Definition defl  Heap_Ptr
 339+ E5F6             >
 339+ E5F6             >                // dummy db directives used to calculate length of namec
 339+ E5F6 3F 44 55 50 >                db      "?DUP"
 339+ E5FA             >len_NFA         defl    $ - temp_NFA
 339+ E5FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F6             >
 339+ E5F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FB             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FA D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FB             >
 339+ E5FB EE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FD             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FD             >
 339+ E5FD             >mirror_Ptr      defl    $
 339+ E5FD             >
 339+ E5FD 64 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FF             >
 339+ E5FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FF             >
 339+ E5FF             >//              ______________________________________________________________________
 339+ E5FF             >//              Dictionary part
 339+ E5FF             >
 339+ E5FF             >                org     Dict_Ptr
 339+ 6C62             >
 339+ 6C62 FD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C64             >
 339+ 6C64             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C64 ~           >
 339+ 6C64 ~           >
 339+ 6C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C64             >
 339+ 6C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C64              QDup_Ptr:
 341+ 6C64 E1                           pop     hl
 342+ 6C65 7C                           ld      a, h
 343+ 6C66 B5                           or      l
 344+ 6C67 28 01                        jr      z, QDup_Skip
 345+ 6C69 E5                               push    hl
 346+ 6C6A              QDup_Skip:
 347+ 6C6A                              psh1
 347+ 6C6A E5          >                push    hl
 347+ 6C6B DD E9       >                jp      (ix)
 348+ 6C6D
 349+ 6C6D              //  ______________________________________________________________________
 350+ 6C6D              //
 351+ 6C6D              // -dup         n -- 0 | n n
 352+ 6C6D              // duplicate if not zero
 353+ 6C6D                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C6D             >
 353+ 6C6D             >Dict_Ptr        defl    $
 353+ 6C6D             >
 353+ 6C6D             >//              ______________________________________________________________________
 353+ 6C6D             >//              Heap part
 353+ 6C6D             >
 353+ 6C6D             >
 353+ 6C6D             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FF             >
 353+ E5FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FF             >Latest_Definition defl  Heap_Ptr
 353+ E5FF             >
 353+ E5FF             >                // dummy db directives used to calculate length of namec
 353+ E5FF 2D 44 55 50 >                db      "-DUP"
 353+ E603             >len_NFA         defl    $ - temp_NFA
 353+ E603             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FF             >
 353+ E5FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E600 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E604             >                org     $-1                 // alter last byte of Name just above to set
 353+ E603 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E604             >
 353+ E604 F6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E606             >Prev_Ptr        defl    Heap_Ptr
 353+ E606             >
 353+ E606             >mirror_Ptr      defl    $
 353+ E606             >
 353+ E606 6F 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E608             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E608             >
 353+ E608             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E608             >
 353+ E608             >//              ______________________________________________________________________
 353+ E608             >//              Dictionary part
 353+ E608             >
 353+ E608             >                org     Dict_Ptr
 353+ 6C6D             >
 353+ 6C6D 06 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C6F             >
 353+ 6C6F             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C6F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C6F ~           >
 353+ 6C6F ~           >
 353+ 6C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C6F             >
 353+ 6C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C6F C3 64 6C                     jp      QDup_Ptr
 355+ 6C72
 356+ 6C72              //  ______________________________________________________________________
 357+ 6C72              //
 358+ 6C72              // emit         c --
 359+ 6C72                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C72             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C72             >
 359+ 6C72             >Dict_Ptr        defl    $
 359+ 6C72             >
 359+ 6C72             >//              ______________________________________________________________________
 359+ 6C72             >//              Heap part
 359+ 6C72             >
 359+ 6C72             >
 359+ 6C72             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E608             >
 359+ E608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E608             >Latest_Definition defl  Heap_Ptr
 359+ E608             >
 359+ E608             >                // dummy db directives used to calculate length of namec
 359+ E608 45 4D 49 54 >                db      "EMIT"
 359+ E60C             >len_NFA         defl    $ - temp_NFA
 359+ E60C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E608             >
 359+ E608 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E609 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60D             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60C D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60D             >
 359+ E60D FF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60F             >Prev_Ptr        defl    Heap_Ptr
 359+ E60F             >
 359+ E60F             >mirror_Ptr      defl    $
 359+ E60F             >
 359+ E60F 74 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E611             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E611             >
 359+ E611             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E611             >
 359+ E611             >//              ______________________________________________________________________
 359+ E611             >//              Dictionary part
 359+ E611             >
 359+ E611             >                org     Dict_Ptr
 359+ 6C72             >
 359+ 6C72 0F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C74             >
 359+ 6C74             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C74 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C77             >
 359+ 6C77             >
 359+ 6C77             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C77             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C77             >
 359+ 6C77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C77 D4 65                        dw      C_EMIT                      // (?emit)
 361+ 6C79 64 6C                        dw      QDUP                        // ?dup
 362+ 6C7B                                                                  // if
 363+ 6C7B F5 63                        dw      ZBRANCH
 364+ 6C7D 0A 00                        dw      Emit_Skip - $
 365+ 6C7F A2 65                        dw          EMITC                   //      emitc
 366+ 6C81 9C 6A                        dw          ONE                     //      1
 367+ 6C83 42 6B 85 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C87              Emit_Skip:                                          // endif
 369+ 6C87 53 68                        dw      EXIT                        // ;
 370+ 6C89
 371+ 6C89              //  ______________________________________________________________________
 372+ 6C89              //
 373+ 6C89              // space        --
 374+ 6C89                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C89             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C89             >
 374+ 6C89             >Dict_Ptr        defl    $
 374+ 6C89             >
 374+ 6C89             >//              ______________________________________________________________________
 374+ 6C89             >//              Heap part
 374+ 6C89             >
 374+ 6C89             >
 374+ 6C89             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E611             >
 374+ E611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E611             >Latest_Definition defl  Heap_Ptr
 374+ E611             >
 374+ E611             >                // dummy db directives used to calculate length of namec
 374+ E611 53 50 41 43 >                db      "SPACE"
 374+ E615 45          >
 374+ E616             >len_NFA         defl    $ - temp_NFA
 374+ E616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E611             >
 374+ E611 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E612 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E616 45          >
 374+ E617             >                org     $-1                 // alter last byte of Name just above to set
 374+ E616 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E617             >
 374+ E617 08 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E619             >Prev_Ptr        defl    Heap_Ptr
 374+ E619             >
 374+ E619             >mirror_Ptr      defl    $
 374+ E619             >
 374+ E619 8B 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E61B             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61B             >
 374+ E61B             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61B             >
 374+ E61B             >//              ______________________________________________________________________
 374+ E61B             >//              Dictionary part
 374+ E61B             >
 374+ E61B             >                org     Dict_Ptr
 374+ 6C89             >
 374+ 6C89 19 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C8B             >
 374+ 6C8B             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C8B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C8E             >
 374+ 6C8E             >
 374+ 6C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C8E             >
 374+ 6C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C8E B8 6A 74 6C                  dw      BL, EMIT                // bl emit
 376+ 6C92 53 68                        dw      EXIT                    // ;
 377+ 6C94
 378+ 6C94              //  ______________________________________________________________________
 379+ 6C94              //
 380+ 6C94              // traverse     a n -- a
 381+ 6C94              // A dictionary entry is structured as follows
 382+ 6C94              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C94              //      +1   word name, last character is toggled with $80
 384+ 6C94              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C94              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C94              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C94              //
 388+ 6C94                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C94             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C94             >
 388+ 6C94             >Dict_Ptr        defl    $
 388+ 6C94             >
 388+ 6C94             >//              ______________________________________________________________________
 388+ 6C94             >//              Heap part
 388+ 6C94             >
 388+ 6C94             >
 388+ 6C94             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61B             >
 388+ E61B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61B             >Latest_Definition defl  Heap_Ptr
 388+ E61B             >
 388+ E61B             >                // dummy db directives used to calculate length of namec
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"
 388+ E61F 45 52 53 45 >
 388+ E623             >len_NFA         defl    $ - temp_NFA
 388+ E623             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61B             >
 388+ E61B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61C 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E620 45 52 53 45 >
 388+ E624             >                org     $-1                 // alter last byte of Name just above to set
 388+ E623 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E624             >
 388+ E624 11 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E626             >Prev_Ptr        defl    Heap_Ptr
 388+ E626             >
 388+ E626             >mirror_Ptr      defl    $
 388+ E626             >
 388+ E626 96 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E628             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E628             >
 388+ E628             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E628             >
 388+ E628             >//              ______________________________________________________________________
 388+ E628             >//              Dictionary part
 388+ E628             >
 388+ E628             >                org     Dict_Ptr
 388+ 6C94             >
 388+ 6C94 26 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C96             >
 388+ 6C96             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C96 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C99             >
 388+ 6C99             >
 388+ 6C99             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C99             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C99             >
 388+ 6C99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C99 25 69                        dw      SWAP                    // swap
 390+ 6C9B              Traverse_Begin:                                 // begin
 391+ 6C9B 08 69 A6 68                  dw          OVER, PLUS          //      over +
 392+ 6C9F A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6CA3 08 69 B2 69                  dw          OVER, CFETCH        //      over @
 394+ 6CA7 1E 6C                        dw          LESS                //      <
 395+ 6CA9                                                              // until
 396+ 6CA9 F5 63                        dw      ZBRANCH
 397+ 6CAB F0 FF                        dw      Traverse_Begin - $
 398+ 6CAD 16 69                        dw      NIP                     //  nip
 399+ 6CAF 53 68                        dw      EXIT                    //  ;
 400+ 6CB1
 401+ 6CB1              //  ______________________________________________________________________
 402+ 6CB1              //
 403+ 6CB1              // mmu7@        -- n
 404+ 6CB1              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6CB1
 406+ 6CB1                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6CB1             >
 406+ 6CB1             >Dict_Ptr        defl    $
 406+ 6CB1             >
 406+ 6CB1             >//              ______________________________________________________________________
 406+ 6CB1             >//              Heap part
 406+ 6CB1             >
 406+ 6CB1             >
 406+ 6CB1             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E628             >
 406+ E628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E628             >Latest_Definition defl  Heap_Ptr
 406+ E628             >
 406+ E628             >                // dummy db directives used to calculate length of namec
 406+ E628 4D 4D 55 37 >                db      "MMU7@"
 406+ E62C 40          >
 406+ E62D             >len_NFA         defl    $ - temp_NFA
 406+ E62D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E628             >
 406+ E628 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E629 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62D 40          >
 406+ E62E             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62D C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62E             >
 406+ E62E 1B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E630             >Prev_Ptr        defl    Heap_Ptr
 406+ E630             >
 406+ E630             >mirror_Ptr      defl    $
 406+ E630             >
 406+ E630 B3 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E632             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E632             >
 406+ E632             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E632             >
 406+ E632             >//              ______________________________________________________________________
 406+ E632             >//              Dictionary part
 406+ E632             >
 406+ E632             >                org     Dict_Ptr
 406+ 6CB1             >
 406+ 6CB1 30 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6CB3             >
 406+ 6CB3             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6CB3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6CB3 ~           >
 406+ 6CB3 ~           >
 406+ 6CB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6CB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6CB3             >
 406+ 6CB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6CB3 D9                           exx
 408+ 6CB4 CD 9F 64                     call    MMU7_read
 409+ 6CB7 D9                           exx
 410+ 6CB8 6F                           ld      l, a
 411+ 6CB9 26 00                        ld      h, 0
 412+ 6CBB E5                           push    hl
 413+ 6CBC                              next
 413+ 6CBC DD E9       >                jp      (ix)
 414+ 6CBE
 415+ 6CBE              //  ______________________________________________________________________
 416+ 6CBE              //
 417+ 6CBE              // mmu7!        n --
 418+ 6CBE              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CBE              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CBE
 421+ 6CBE                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CBE             >
 421+ 6CBE             >Dict_Ptr        defl    $
 421+ 6CBE             >
 421+ 6CBE             >//              ______________________________________________________________________
 421+ 6CBE             >//              Heap part
 421+ 6CBE             >
 421+ 6CBE             >
 421+ 6CBE             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E632             >
 421+ E632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E632             >Latest_Definition defl  Heap_Ptr
 421+ E632             >
 421+ E632             >                // dummy db directives used to calculate length of namec
 421+ E632 4D 4D 55 37 >                db      "MMU7!"
 421+ E636 21          >
 421+ E637             >len_NFA         defl    $ - temp_NFA
 421+ E637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E632             >
 421+ E632 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E633 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E637 21          >
 421+ E638             >                org     $-1                 // alter last byte of Name just above to set
 421+ E637 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E638             >
 421+ E638 28 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E63A             >Prev_Ptr        defl    Heap_Ptr
 421+ E63A             >
 421+ E63A             >mirror_Ptr      defl    $
 421+ E63A             >
 421+ E63A C0 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63C             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63C             >
 421+ E63C             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63C             >
 421+ E63C             >//              ______________________________________________________________________
 421+ E63C             >//              Dictionary part
 421+ E63C             >
 421+ E63C             >                org     Dict_Ptr
 421+ 6CBE             >
 421+ 6CBE 3A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CC0             >
 421+ 6CC0             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CC0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CC0 ~           >
 421+ 6CC0 ~           >
 421+ 6CC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CC0             >
 421+ 6CC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CC0 E1                           pop     hl
 423+ 6CC1 7D                           ld      a, l
 424+ 6CC2 ED 92 57                     nextreg 87, a
 425+ 6CC5
 426+ 6CC5                              next
 426+ 6CC5 DD E9       >                jp      (ix)
 427+ 6CC7
 428+ 6CC7              //  ______________________________________________________________________
 429+ 6CC7              //
 430+ 6CC7              // >far         ha -- a n
 431+ 6CC7              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CC7              // take lower bits of H and L as an offset from E000h
 433+ 6CC7              // then return address  a  between E000h-FFFFh
 434+ 6CC7              // and page number n  between 64-71 (40h-47h)
 435+ 6CC7              // For example, in hex:
 436+ 6CC7              //   0000 >FAR  gives  40.E000
 437+ 6CC7              //   1FFF >FAR  gives  40.FFFF
 438+ 6CC7              //   2000 >FAR  gives  41.E000
 439+ 6CC7              //   3FFF >FAR  gives  41.FFFF
 440+ 6CC7              //   EFFF >FAR  gives  47.EFFF
 441+ 6CC7              //   FFFF >FAR  gives  47.FFFF
 442+ 6CC7                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CC7             >
 442+ 6CC7             >Dict_Ptr        defl    $
 442+ 6CC7             >
 442+ 6CC7             >//              ______________________________________________________________________
 442+ 6CC7             >//              Heap part
 442+ 6CC7             >
 442+ 6CC7             >
 442+ 6CC7             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63C             >
 442+ E63C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63C             >Latest_Definition defl  Heap_Ptr
 442+ E63C             >
 442+ E63C             >                // dummy db directives used to calculate length of namec
 442+ E63C 3E 46 41 52 >                db      ">FAR"
 442+ E640             >len_NFA         defl    $ - temp_NFA
 442+ E640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63C             >
 442+ E63C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E641             >                org     $-1                 // alter last byte of Name just above to set
 442+ E640 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E641             >
 442+ E641 32 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E643             >Prev_Ptr        defl    Heap_Ptr
 442+ E643             >
 442+ E643             >mirror_Ptr      defl    $
 442+ E643             >
 442+ E643 C9 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E645             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E645             >
 442+ E645             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E645             >
 442+ E645             >//              ______________________________________________________________________
 442+ E645             >//              Dictionary part
 442+ E645             >
 442+ E645             >                org     Dict_Ptr
 442+ 6CC7             >
 442+ 6CC7 43 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CC9             >
 442+ 6CC9             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CC9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CC9 ~           >
 442+ 6CC9 ~           >
 442+ 6CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CC9             >
 442+ 6CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CC9 E1                           pop     hl
 444+ 6CCA CD AA 64                     call    TO_FAR_rout
 445+ 6CCD E5                           push    hl
 446+ 6CCE 6F                           ld      l, a
 447+ 6CCF 26 00                        ld      h, 0
 448+ 6CD1 E5                           push    hl
 449+ 6CD2                              next
 449+ 6CD2 DD E9       >                jp      (ix)
 450+ 6CD4
 451+ 6CD4              //  ______________________________________________________________________
 452+ 6CD4              //
 453+ 6CD4              // <far         a n  -- ha
 454+ 6CD4              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CD4              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CD4              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CD4                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CD4             >
 457+ 6CD4             >Dict_Ptr        defl    $
 457+ 6CD4             >
 457+ 6CD4             >//              ______________________________________________________________________
 457+ 6CD4             >//              Heap part
 457+ 6CD4             >
 457+ 6CD4             >
 457+ 6CD4             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E645             >
 457+ E645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E645             >Latest_Definition defl  Heap_Ptr
 457+ E645             >
 457+ E645             >                // dummy db directives used to calculate length of namec
 457+ E645 3C 46 41 52 >                db      "<FAR"
 457+ E649             >len_NFA         defl    $ - temp_NFA
 457+ E649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E645             >
 457+ E645 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E646 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E64A             >                org     $-1                 // alter last byte of Name just above to set
 457+ E649 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E64A             >
 457+ E64A 3C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64C             >Prev_Ptr        defl    Heap_Ptr
 457+ E64C             >
 457+ E64C             >mirror_Ptr      defl    $
 457+ E64C             >
 457+ E64C D6 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64E             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64E             >
 457+ E64E             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64E             >
 457+ E64E             >//              ______________________________________________________________________
 457+ E64E             >//              Dictionary part
 457+ E64E             >
 457+ E64E             >                org     Dict_Ptr
 457+ 6CD4             >
 457+ 6CD4 4C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CD6             >
 457+ 6CD6             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CD6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CD6 ~           >
 457+ 6CD6 ~           >
 457+ 6CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CD6             >
 457+ 6CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CD6 E1                           pop     hl                  // page number in e
 459+ 6CD7 7D                           ld      a, l
 460+ 6CD8 E6 07                        and     07
 461+ 6CDA 0F                           rrca
 462+ 6CDB 0F                           rrca
 463+ 6CDC 0F                           rrca
 464+ 6CDD 08                           ex      af, af
 465+ 6CDE E1                           pop     hl                  // address in hl
 466+ 6CDF 7C                           ld      a, h
 467+ 6CE0 E6 1F                        and     $1F
 468+ 6CE2 67                           ld      h, a
 469+ 6CE3 08                           ex      af, af
 470+ 6CE4 B4                           or      h
 471+ 6CE5 67                           ld      h, a
 472+ 6CE6                              psh1
 472+ 6CE6 E5          >                push    hl
 472+ 6CE7 DD E9       >                jp      (ix)
 473+ 6CE9
 474+ 6CE9              //  ______________________________________________________________________
 475+ 6CE9              //
 476+ 6CE9              // ?IN_MMU7        a -- f
 477+ 6CE9              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 6CE9                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 6CE9             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 6CE9             >
 478+ 6CE9             >Dict_Ptr        defl    $
 478+ 6CE9             >
 478+ 6CE9             >//              ______________________________________________________________________
 478+ 6CE9             >//              Heap part
 478+ 6CE9             >
 478+ 6CE9             >
 478+ 6CE9             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64E             >
 478+ E64E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64E             >Latest_Definition defl  Heap_Ptr
 478+ E64E             >
 478+ E64E             >                // dummy db directives used to calculate length of namec
 478+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E652 4D 4D 55 37 >
 478+ E656             >len_NFA         defl    $ - temp_NFA
 478+ E656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64E             >
 478+ E64E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64F 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E653 4D 4D 55 37 >
 478+ E657             >                org     $-1                 // alter last byte of Name just above to set
 478+ E656 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E657             >
 478+ E657 45 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E659             >Prev_Ptr        defl    Heap_Ptr
 478+ E659             >
 478+ E659             >mirror_Ptr      defl    $
 478+ E659             >
 478+ E659 EB 6C       >                dw      Dict_Ptr + 2        // xt
 478+ E65B             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E65B             >
 478+ E65B             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E65B             >
 478+ E65B             >//              ______________________________________________________________________
 478+ E65B             >//              Dictionary part
 478+ E65B             >
 478+ E65B             >                org     Dict_Ptr
 478+ 6CE9             >
 478+ 6CE9 59 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 6CEB             >
 478+ 6CEB             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 6CEB CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 6CEE             >
 478+ 6CEE             >
 478+ 6CEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 6CEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 6CEE             >
 478+ 6CEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 6CEE 2C 69                        dw      DUP
 480+ 6CF0 A3 63 00 E0                  dw      LIT, $E000
 481+ 6CF4 10 6C                        dw      ULESS
 482+ 6CF6 86 68                        dw      NOT_OP
 483+ 6CF8 53 68                        dw      EXIT
 484+ 6CFA
 485+ 6CFA              //  ______________________________________________________________________
 486+ 6CFA              //
 487+ 6CFA              // far          hp -- ha
 488+ 6CFA              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 6CFA                              Colon_Def FAR, "FAR", is_normal
 489+ 6CFA             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 6CFA             >
 489+ 6CFA             >Dict_Ptr        defl    $
 489+ 6CFA             >
 489+ 6CFA             >//              ______________________________________________________________________
 489+ 6CFA             >//              Heap part
 489+ 6CFA             >
 489+ 6CFA             >
 489+ 6CFA             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E65B             >
 489+ E65B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E65B             >Latest_Definition defl  Heap_Ptr
 489+ E65B             >
 489+ E65B             >                // dummy db directives used to calculate length of namec
 489+ E65B 46 41 52    >                db      "FAR"
 489+ E65E             >len_NFA         defl    $ - temp_NFA
 489+ E65E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E65B             >
 489+ E65B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E65C 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65F             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65E D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65F             >
 489+ E65F 4E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E661             >Prev_Ptr        defl    Heap_Ptr
 489+ E661             >
 489+ E661             >mirror_Ptr      defl    $
 489+ E661             >
 489+ E661 FC 6C       >                dw      Dict_Ptr + 2        // xt
 489+ E663             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E663             >
 489+ E663             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E663             >
 489+ E663             >//              ______________________________________________________________________
 489+ E663             >//              Dictionary part
 489+ E663             >
 489+ E663             >                org     Dict_Ptr
 489+ 6CFA             >
 489+ 6CFA 61 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 6CFC             >
 489+ 6CFC             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 6CFC CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 6CFF             >
 489+ 6CFF             >
 489+ 6CFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 6CFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 6CFF             >
 489+ 6CFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 6CFF C9 6C                        dw      TO_FAR
 491+ 6D01 C0 6C                        dw      MMU7_STORE
 492+ 6D03 53 68                        dw      EXIT
 493+ 6D05
 494+ 6D05              //  ______________________________________________________________________
 495+ 6D05              //
 496+ 6D05              // ?HEAP_PTR       n -- n f
 497+ 6D05              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 6D05                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 6D05             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 6D05             >
 498+ 6D05             >Dict_Ptr        defl    $
 498+ 6D05             >
 498+ 6D05             >//              ______________________________________________________________________
 498+ 6D05             >//              Heap part
 498+ 6D05             >
 498+ 6D05             >
 498+ 6D05             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E663             >
 498+ E663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E663             >Latest_Definition defl  Heap_Ptr
 498+ E663             >
 498+ E663             >                // dummy db directives used to calculate length of namec
 498+ E663 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E667 50 5F 50 54 >
 498+ E66B 52          >
 498+ E66C             >len_NFA         defl    $ - temp_NFA
 498+ E66C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E663             >
 498+ E663 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E664 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E668 50 5F 50 54 >
 498+ E66C 52          >
 498+ E66D             >                org     $-1                 // alter last byte of Name just above to set
 498+ E66C D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66D             >
 498+ E66D 5B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66F             >Prev_Ptr        defl    Heap_Ptr
 498+ E66F             >
 498+ E66F             >mirror_Ptr      defl    $
 498+ E66F             >
 498+ E66F 07 6D       >                dw      Dict_Ptr + 2        // xt
 498+ E671             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E671             >
 498+ E671             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E671             >
 498+ E671             >//              ______________________________________________________________________
 498+ E671             >//              Dictionary part
 498+ E671             >
 498+ E671             >                org     Dict_Ptr
 498+ 6D05             >
 498+ 6D05 6F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 6D07             >
 498+ 6D07             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6D07 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 6D0A             >
 498+ 6D0A             >
 498+ 6D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6D0A             >
 498+ 6D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6D0A 2C 69                        dw      DUP
 500+ 6D0C F5 63                        dw      ZBRANCH
 501+ 6D0E 08 00                        dw      QHeap_Skip - $
 502+ 6D10 A3 63 00 60                  dw          LIT, $6000
 503+ 6D14 10 6C                        dw          ULESS
 504+ 6D16              QHeap_Skip:                                          // endif
 505+ 6D16 53 68                        dw      EXIT                        // ;
 506+ 6D18
 507+ 6D18              //  ______________________________________________________________________
 508+ 6D18              //
 509+ 6D18              // ?>heap       n1 -- n2
 510+ 6D18              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 6D18                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 6D18             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 6D18             >
 511+ 6D18             >Dict_Ptr        defl    $
 511+ 6D18             >
 511+ 6D18             >//              ______________________________________________________________________
 511+ 6D18             >//              Heap part
 511+ 6D18             >
 511+ 6D18             >
 511+ 6D18             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E671             >
 511+ E671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E671             >Latest_Definition defl  Heap_Ptr
 511+ E671             >
 511+ E671             >                // dummy db directives used to calculate length of namec
 511+ E671 3F 3E 48 45 >                db      "?>HEAP"
 511+ E675 41 50       >
 511+ E677             >len_NFA         defl    $ - temp_NFA
 511+ E677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E671             >
 511+ E671 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E672 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E676 41 50       >
 511+ E678             >                org     $-1                 // alter last byte of Name just above to set
 511+ E677 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E678             >
 511+ E678 63 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E67A             >Prev_Ptr        defl    Heap_Ptr
 511+ E67A             >
 511+ E67A             >mirror_Ptr      defl    $
 511+ E67A             >
 511+ E67A 1A 6D       >                dw      Dict_Ptr + 2        // xt
 511+ E67C             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E67C             >
 511+ E67C             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E67C             >
 511+ E67C             >//              ______________________________________________________________________
 511+ E67C             >//              Dictionary part
 511+ E67C             >
 511+ E67C             >                org     Dict_Ptr
 511+ 6D18             >
 511+ 6D18 7A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 6D1A             >
 511+ 6D1A             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 6D1A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 6D1D             >
 511+ 6D1D             >
 511+ 6D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6D1D             >
 511+ 6D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6D1D 2C 69                        dw      DUP
 513+ 6D1F 07 6D                        dw      QHEAPP
 514+ 6D21 F5 63                        dw      ZBRANCH
 515+ 6D23 04 00                        dw      Q2Heap_Skip - $
 516+ 6D25 FC 6C                        dw          FAR
 517+ 6D27              Q2Heap_Skip:                                          // endif
 518+ 6D27 53 68                        dw      EXIT                        // ;
 519+ 6D29
 520+ 6D29              //  ______________________________________________________________________
 521+ 6D29              //
 522+ 6D29              // hp_fetch     -- a
 523+ 6D29                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 6D29             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 6D29             >
 523+ 6D29             >Dict_Ptr        defl    $
 523+ 6D29             >
 523+ 6D29             >//              ______________________________________________________________________
 523+ 6D29             >//              Heap part
 523+ 6D29             >
 523+ 6D29             >
 523+ 6D29             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67C             >
 523+ E67C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67C             >Latest_Definition defl  Heap_Ptr
 523+ E67C             >
 523+ E67C             >                // dummy db directives used to calculate length of namec
 523+ E67C 48 50 40    >                db      "HP@"
 523+ E67F             >len_NFA         defl    $ - temp_NFA
 523+ E67F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67C             >
 523+ E67C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67D 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E680             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67F C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E680             >
 523+ E680 71 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E682             >Prev_Ptr        defl    Heap_Ptr
 523+ E682             >
 523+ E682             >mirror_Ptr      defl    $
 523+ E682             >
 523+ E682 2B 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E684             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E684             >
 523+ E684             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E684             >
 523+ E684             >//              ______________________________________________________________________
 523+ E684             >//              Dictionary part
 523+ E684             >
 523+ E684             >                org     Dict_Ptr
 523+ 6D29             >
 523+ 6D29 82 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D2B             >
 523+ 6D2B             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D2B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D2E             >
 523+ 6D2E             >
 523+ 6D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D2E             >
 523+ 6D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 6D2E 2A 6B 9D 69                  dw      HP, FETCH               // hp @
 525+ 6D32 53 68                        dw      EXIT                    // ;
 526+ 6D34
 527+ 6D34              //  ______________________________________________________________________
 528+ 6D34              //
 529+ 6D34              // page-watermark   -- n
 530+ 6D34              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 6D34                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 6D34             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 6D34             >
 531+ 6D34             >Dict_Ptr        defl    $
 531+ 6D34             >
 531+ 6D34             >//              ______________________________________________________________________
 531+ 6D34             >//              Heap part
 531+ 6D34             >
 531+ 6D34             >
 531+ 6D34             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E684             >
 531+ E684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E684             >Latest_Definition defl  Heap_Ptr
 531+ E684             >
 531+ E684             >                // dummy db directives used to calculate length of namec
 531+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E688 2D 57 41 54 >
 531+ E68C 45 52 4D 41 >
 531+ E690 52 4B       >
 531+ E692             >len_NFA         defl    $ - temp_NFA
 531+ E692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E684             >
 531+ E684 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E685 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E689 2D 57 41 54 >
 531+ E68D 45 52 4D 41 >
 531+ E691 52 4B       >
 531+ E693             >                org     $-1                 // alter last byte of Name just above to set
 531+ E692 CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E693             >
 531+ E693 7C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E695             >Prev_Ptr        defl    Heap_Ptr
 531+ E695             >
 531+ E695             >mirror_Ptr      defl    $
 531+ E695             >
 531+ E695 36 6D       >                dw      Dict_Ptr + 2        // xt
 531+ E697             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E697             >
 531+ E697             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E697             >
 531+ E697             >//              ______________________________________________________________________
 531+ E697             >//              Dictionary part
 531+ E697             >
 531+ E697             >                org     Dict_Ptr
 531+ 6D34             >
 531+ 6D34 95 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 6D36             >
 531+ 6D36             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 6D36 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 6D39             >
 531+ 6D39             >
 531+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 6D39             >
 531+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D39 80 1F       >                dw      $1F80
 532+ 6D3B
 533+ 6D3B              //  ______________________________________________________________________
 534+ 6D3B              //
 535+ 6D3B              // skip-hp-page ha -- a
 536+ 6D3B                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 6D3B             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 6D3B             >
 536+ 6D3B             >Dict_Ptr        defl    $
 536+ 6D3B             >
 536+ 6D3B             >//              ______________________________________________________________________
 536+ 6D3B             >//              Heap part
 536+ 6D3B             >
 536+ 6D3B             >
 536+ 6D3B             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E697             >
 536+ E697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E697             >Latest_Definition defl  Heap_Ptr
 536+ E697             >
 536+ E697             >                // dummy db directives used to calculate length of namec
 536+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E69B 2D 48 50 2D >
 536+ E69F 50 41 47 45 >
 536+ E6A3             >len_NFA         defl    $ - temp_NFA
 536+ E6A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E697             >
 536+ E697 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E698 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E69C 2D 48 50 2D >
 536+ E6A0 50 41 47 45 >
 536+ E6A4             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A3 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A4             >
 536+ E6A4 84 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A6             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A6             >
 536+ E6A6             >mirror_Ptr      defl    $
 536+ E6A6             >
 536+ E6A6 3D 6D       >                dw      Dict_Ptr + 2        // xt
 536+ E6A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A8             >
 536+ E6A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A8             >
 536+ E6A8             >//              ______________________________________________________________________
 536+ E6A8             >//              Dictionary part
 536+ E6A8             >
 536+ E6A8             >                org     Dict_Ptr
 536+ 6D3B             >
 536+ 6D3B A6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 6D3D             >
 536+ 6D3D             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 6D3D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 6D40             >
 536+ 6D40             >
 536+ 6D40             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 6D40             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 6D40             >
 536+ 6D40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 6D40 2B 6D                        dw      HP_FETCH                // hp@
 538+ 6D42 A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 6D46 13 68
 539+ 6D48 A6 68                        dw      PLUS
 540+ 6D4A 36 6D                        dw      PAGE_WATERMARK
 541+ 6D4C 33 6C                        dw      GREATER
 542+ 6D4E F5 63                        dw      ZBRANCH
 543+ 6D50 12 00                        dw      Skip_Skip - $   // if
 544+ 6D52 2B 6D                        dw      HP_FETCH
 545+ 6D54 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 6D58 22 68
 546+ 6D5A BF 68 CD 68                  dw      ONE_PLUS, TWO_PLUS
 547+ 6D5E 2A 6B A7 69                  dw      HP, STORE
 548+ 6D62              Skip_Skip:
 549+ 6D62 53 68                        dw      EXIT                    // ;
 550+ 6D64              //  ______________________________________________________________________
 551+ 6D64              //
 552+ 6D64              // latest       -- nfa
 553+ 6D64                              Colon_Def LATEST, "LATEST", is_normal
 553+ 6D64             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 6D64             >
 553+ 6D64             >Dict_Ptr        defl    $
 553+ 6D64             >
 553+ 6D64             >//              ______________________________________________________________________
 553+ 6D64             >//              Heap part
 553+ 6D64             >
 553+ 6D64             >
 553+ 6D64             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A8             >
 553+ E6A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A8             >Latest_Definition defl  Heap_Ptr
 553+ E6A8             >
 553+ E6A8             >                // dummy db directives used to calculate length of namec
 553+ E6A8 4C 41 54 45 >                db      "LATEST"
 553+ E6AC 53 54       >
 553+ E6AE             >len_NFA         defl    $ - temp_NFA
 553+ E6AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A8             >
 553+ E6A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A9 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AD 53 54       >
 553+ E6AF             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AE D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AF             >
 553+ E6AF 97 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B1             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B1             >
 553+ E6B1             >mirror_Ptr      defl    $
 553+ E6B1             >
 553+ E6B1 66 6D       >                dw      Dict_Ptr + 2        // xt
 553+ E6B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B3             >
 553+ E6B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B3             >
 553+ E6B3             >//              ______________________________________________________________________
 553+ E6B3             >//              Dictionary part
 553+ E6B3             >
 553+ E6B3             >                org     Dict_Ptr
 553+ 6D64             >
 553+ 6D64 B1 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6D66             >
 553+ 6D66             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6D66 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 6D69             >
 553+ 6D69             >
 553+ 6D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6D69             >
 553+ 6D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 6D69 5A 6B                        dw      CURRENT                 // current
 555+ 6D6B 9D 69 9D 69                  dw      FETCH, FETCH            // @ @
 556+ 6D6F FC 6C                        dw      FAR // Q TO HEAP
 557+ 6D71 53 68                        dw      EXIT                    // ;
 558+ 6D73
 559+ 6D73              //  ______________________________________________________________________
 560+ 6D73              //
 561+ 6D73              // >body        cfa -- pfa
 562+ 6D73                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 6D73             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 6D73             >
 562+ 6D73             >Dict_Ptr        defl    $
 562+ 6D73             >
 562+ 6D73             >//              ______________________________________________________________________
 562+ 6D73             >//              Heap part
 562+ 6D73             >
 562+ 6D73             >
 562+ 6D73             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B3             >
 562+ E6B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B3             >Latest_Definition defl  Heap_Ptr
 562+ E6B3             >
 562+ E6B3             >                // dummy db directives used to calculate length of namec
 562+ E6B3 3E 42 4F 44 >                db      ">BODY"
 562+ E6B7 59          >
 562+ E6B8             >len_NFA         defl    $ - temp_NFA
 562+ E6B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B3             >
 562+ E6B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B8 59          >
 562+ E6B9             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B8 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B9             >
 562+ E6B9 A8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6BB             >Prev_Ptr        defl    Heap_Ptr
 562+ E6BB             >
 562+ E6BB             >mirror_Ptr      defl    $
 562+ E6BB             >
 562+ E6BB 75 6D       >                dw      Dict_Ptr + 2        // xt
 562+ E6BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BD             >
 562+ E6BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BD             >
 562+ E6BD             >//              ______________________________________________________________________
 562+ E6BD             >//              Dictionary part
 562+ E6BD             >
 562+ E6BD             >                org     Dict_Ptr
 562+ 6D73             >
 562+ 6D73 BB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 6D75             >
 562+ 6D75             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 6D75 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 6D78             >
 562+ 6D78             >
 562+ 6D78             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 6D78             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 6D78             >
 562+ 6D78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 6D78 AA 6A A6 68                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 6D7C 53 68                        dw      EXIT                    // ;
 565+ 6D7E
 566+ 6D7E              //  ______________________________________________________________________
 567+ 6D7E              //
 568+ 6D7E              // <name        cfa -- nfa
 569+ 6D7E                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 6D7E             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 6D7E             >
 569+ 6D7E             >Dict_Ptr        defl    $
 569+ 6D7E             >
 569+ 6D7E             >//              ______________________________________________________________________
 569+ 6D7E             >//              Heap part
 569+ 6D7E             >
 569+ 6D7E             >
 569+ 6D7E             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BD             >
 569+ E6BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BD             >Latest_Definition defl  Heap_Ptr
 569+ E6BD             >
 569+ E6BD             >                // dummy db directives used to calculate length of namec
 569+ E6BD 3C 4E 41 4D >                db      "<NAME"
 569+ E6C1 45          >
 569+ E6C2             >len_NFA         defl    $ - temp_NFA
 569+ E6C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BD             >
 569+ E6BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BE 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6C2 45          >
 569+ E6C3             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6C2 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C3             >
 569+ E6C3 B3 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C5             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C5             >
 569+ E6C5             >mirror_Ptr      defl    $
 569+ E6C5             >
 569+ E6C5 80 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C7             >
 569+ E6C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C7             >
 569+ E6C7             >//              ______________________________________________________________________
 569+ E6C7             >//              Dictionary part
 569+ E6C7             >
 569+ E6C7             >                org     Dict_Ptr
 569+ 6D7E             >
 569+ 6D7E C5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D80             >
 569+ 6D80             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D80 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D83             >
 569+ 6D83             >
 569+ 6D83             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D83             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D83             >
 569+ 6D83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D83 DA 68                        dw      CELL_MINUS              // cell-
 571+ 6D85 2C 69 9D 69                  dw      DUP, FETCH
 572+ 6D89 07 6D                        dw      QHEAPP
 573+ 6D8B F5 63                        dw      ZBRANCH
 574+ 6D8D 08 00                        dw      ToName_Skip - $
 575+ 6D8F 9D 69 FC 6C                  dw          FETCH, FAR
 576+ 6D93 DA 68                        dw          CELL_MINUS
 577+ 6D95              ToName_Skip:                                    // endif
 578+ 6D95
 579+ 6D95 C6 68                        dw      ONE_SUBTRACT            // 1-
 580+ 6D97 B1 6A                        dw      NEG_ONE                 // -1
 581+ 6D99 96 6C                        dw      TRAVERSE                // traverse
 582+ 6D9B 53 68                        dw      EXIT                    // ;
 583+ 6D9D
 584+ 6D9D              //  ______________________________________________________________________
 585+ 6D9D              //
 586+ 6D9D              // cfa          pfa -- cfa
 587+ 6D9D                              Colon_Def CFA, "CFA", is_normal
 587+ 6D9D             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 6D9D             >
 587+ 6D9D             >Dict_Ptr        defl    $
 587+ 6D9D             >
 587+ 6D9D             >//              ______________________________________________________________________
 587+ 6D9D             >//              Heap part
 587+ 6D9D             >
 587+ 6D9D             >
 587+ 6D9D             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C7             >
 587+ E6C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C7             >Latest_Definition defl  Heap_Ptr
 587+ E6C7             >
 587+ E6C7             >                // dummy db directives used to calculate length of namec
 587+ E6C7 43 46 41    >                db      "CFA"
 587+ E6CA             >len_NFA         defl    $ - temp_NFA
 587+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C7             >
 587+ E6C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C8 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6CA C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6CB             >
 587+ E6CB BD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CD             >
 587+ E6CD             >mirror_Ptr      defl    $
 587+ E6CD             >
 587+ E6CD 9F 6D       >                dw      Dict_Ptr + 2        // xt
 587+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CF             >
 587+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CF             >
 587+ E6CF             >//              ______________________________________________________________________
 587+ E6CF             >//              Dictionary part
 587+ E6CF             >
 587+ E6CF             >                org     Dict_Ptr
 587+ 6D9D             >
 587+ 6D9D CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 6D9F             >
 587+ 6D9F             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6D9F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 6DA2             >
 587+ 6DA2             >
 587+ 6DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6DA2             >
 587+ 6DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6DA2 AA 6A F9 6B                  dw      THREE, SUBTRACT         // 3 -
 589+ 6DA6 53 68                        dw      EXIT                    // ;
 590+ 6DA8
 591+ 6DA8              //  ______________________________________________________________________
 592+ 6DA8              //
 593+ 6DA8              // nfa          pfa -- nfa
 594+ 6DA8                              Colon_Def NFA, "NFA", is_normal
 594+ 6DA8             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 6DA8             >
 594+ 6DA8             >Dict_Ptr        defl    $
 594+ 6DA8             >
 594+ 6DA8             >//              ______________________________________________________________________
 594+ 6DA8             >//              Heap part
 594+ 6DA8             >
 594+ 6DA8             >
 594+ 6DA8             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CF             >
 594+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CF             >Latest_Definition defl  Heap_Ptr
 594+ E6CF             >
 594+ E6CF             >                // dummy db directives used to calculate length of namec
 594+ E6CF 4E 46 41    >                db      "NFA"
 594+ E6D2             >len_NFA         defl    $ - temp_NFA
 594+ E6D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CF             >
 594+ E6CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6D0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D3             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D2 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D3             >
 594+ E6D3 C7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D5             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D5             >
 594+ E6D5             >mirror_Ptr      defl    $
 594+ E6D5             >
 594+ E6D5 AA 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D7             >
 594+ E6D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D7             >
 594+ E6D7             >//              ______________________________________________________________________
 594+ E6D7             >//              Dictionary part
 594+ E6D7             >
 594+ E6D7             >                org     Dict_Ptr
 594+ 6DA8             >
 594+ 6DA8 D5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DAA             >
 594+ 6DAA             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DAA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DAD             >
 594+ 6DAD             >
 594+ 6DAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DAD             >
 594+ 6DAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DAD 9F 6D                        dw      CFA                     // cfa
 596+ 6DAF 80 6D                        dw      TO_NAME                 // traverse
 597+ 6DB1 53 68                        dw      EXIT                    // ;
 598+ 6DB3
 599+ 6DB3              //  ______________________________________________________________________
 600+ 6DB3              //
 601+ 6DB3              // lfa          pfa -- lfa
 602+ 6DB3                              Colon_Def LFA, "LFA", is_normal
 602+ 6DB3             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 6DB3             >
 602+ 6DB3             >Dict_Ptr        defl    $
 602+ 6DB3             >
 602+ 6DB3             >//              ______________________________________________________________________
 602+ 6DB3             >//              Heap part
 602+ 6DB3             >
 602+ 6DB3             >
 602+ 6DB3             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D7             >
 602+ E6D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D7             >Latest_Definition defl  Heap_Ptr
 602+ E6D7             >
 602+ E6D7             >                // dummy db directives used to calculate length of namec
 602+ E6D7 4C 46 41    >                db      "LFA"
 602+ E6DA             >len_NFA         defl    $ - temp_NFA
 602+ E6DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D7             >
 602+ E6D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D8 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6DB             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6DA C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6DB             >
 602+ E6DB CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DD             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DD             >
 602+ E6DD             >mirror_Ptr      defl    $
 602+ E6DD             >
 602+ E6DD B5 6D       >                dw      Dict_Ptr + 2        // xt
 602+ E6DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DF             >
 602+ E6DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DF             >
 602+ E6DF             >//              ______________________________________________________________________
 602+ E6DF             >//              Dictionary part
 602+ E6DF             >
 602+ E6DF             >                org     Dict_Ptr
 602+ 6DB3             >
 602+ 6DB3 DD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 6DB5             >
 602+ 6DB5             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 6DB5 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 6DB8             >
 602+ 6DB8             >
 602+ 6DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 6DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 6DB8             >
 602+ 6DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 6DB8 AA 6D                        dw      NFA                     // nfa
 604+ 6DBA 9C 6A                        dw      ONE                     // 1
 605+ 6DBC 96 6C                        dw      TRAVERSE                // traverse
 606+ 6DBE BF 68                        dw      ONE_PLUS                // 1+
 607+ 6DC0 53 68                        dw      EXIT                    // ;
 608+ 6DC2
 609+ 6DC2              //  ______________________________________________________________________
 610+ 6DC2              //
 611+ 6DC2              // pfa          nfa -- pfa
 612+ 6DC2                              Colon_Def PFA, "PFA", is_normal
 612+ 6DC2             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 6DC2             >
 612+ 6DC2             >Dict_Ptr        defl    $
 612+ 6DC2             >
 612+ 6DC2             >//              ______________________________________________________________________
 612+ 6DC2             >//              Heap part
 612+ 6DC2             >
 612+ 6DC2             >
 612+ 6DC2             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DF             >
 612+ E6DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DF             >Latest_Definition defl  Heap_Ptr
 612+ E6DF             >
 612+ E6DF             >                // dummy db directives used to calculate length of namec
 612+ E6DF 50 46 41    >                db      "PFA"
 612+ E6E2             >len_NFA         defl    $ - temp_NFA
 612+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DF             >
 612+ E6DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6E0 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6E2 C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E3             >
 612+ E6E3 D7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E5             >
 612+ E6E5             >mirror_Ptr      defl    $
 612+ E6E5             >
 612+ E6E5 C4 6D       >                dw      Dict_Ptr + 2        // xt
 612+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E7             >
 612+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E7             >
 612+ E6E7             >//              ______________________________________________________________________
 612+ E6E7             >//              Dictionary part
 612+ E6E7             >
 612+ E6E7             >                org     Dict_Ptr
 612+ 6DC2             >
 612+ 6DC2 E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 6DC4             >
 612+ 6DC4             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 6DC4 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 6DC7             >
 612+ 6DC7             >
 612+ 6DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 6DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 6DC7             >
 612+ 6DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 6DC7 1A 6D                        dw      QTOHEAP
 614+ 6DC9 9C 6A                        dw      ONE                     // 1
 615+ 6DCB 96 6C                        dw      TRAVERSE                // traverse
 616+ 6DCD BF 68                        dw      ONE_PLUS                // 1+
 617+ 6DCF D5 68                        dw      CELL_PLUS               // cell+
 618+ 6DD1 EB 6C                        dw      QMMU7
 619+ 6DD3 F5 63                        dw      ZBRANCH
 620+ 6DD5 0E 00                        dw      PFA_Skip - $
 621+ 6DD7 B3 6C                        dw          MMU7_FETCH
 622+ 6DD9 9C 6A F9 6B                  dw          ONE, SUBTRACT
 623+ 6DDD F5 63                        dw          ZBRANCH
 624+ 6DDF 04 00                        dw          PFA_Skip - $
 625+ 6DE1 9D 69                        dw              FETCH
 626+ 6DE3              PFA_Skip:                                    // endif
 627+ 6DE3 75 6D                        dw      TO_BODY                 // >body
 628+ 6DE5 53 68                        dw      EXIT                    // ;
 629+ 6DE7
 630+ 6DE7              //  ______________________________________________________________________
 631+ 6DE7              //
 632+ 6DE7              // !csp         --
 633+ 6DE7              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 6DE7                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 6DE7             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 6DE7             >
 634+ 6DE7             >Dict_Ptr        defl    $
 634+ 6DE7             >
 634+ 6DE7             >//              ______________________________________________________________________
 634+ 6DE7             >//              Heap part
 634+ 6DE7             >
 634+ 6DE7             >
 634+ 6DE7             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E7             >
 634+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E7             >Latest_Definition defl  Heap_Ptr
 634+ E6E7             >
 634+ E6E7             >                // dummy db directives used to calculate length of namec
 634+ E6E7 21 43 53 50 >                db      "!CSP"
 634+ E6EB             >len_NFA         defl    $ - temp_NFA
 634+ E6EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E7             >
 634+ E6E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E8 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6EC             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6EB D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6EC             >
 634+ E6EC DF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EE             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EE             >
 634+ E6EE             >mirror_Ptr      defl    $
 634+ E6EE             >
 634+ E6EE E9 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6F0             >
 634+ E6F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6F0             >
 634+ E6F0             >//              ______________________________________________________________________
 634+ E6F0             >//              Dictionary part
 634+ E6F0             >
 634+ E6F0             >                org     Dict_Ptr
 634+ 6DE7             >
 634+ 6DE7 EE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6DE9             >
 634+ 6DE9             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6DE9 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6DEC             >
 634+ 6DEC             >
 634+ 6DEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6DEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6DEC             >
 634+ 6DEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6DEC 3A 68                        dw      SPFETCH                 // sp@
 636+ 6DEE 78 6B A7 69                  dw      CSP, STORE              // csp !
 637+ 6DF2 53 68                        dw      EXIT                    // ;
 638+ 6DF4
 639+ 6DF4              //  ______________________________________________________________________
 640+ 6DF4              //
 641+ 6DF4              // ?error       f n --
 642+ 6DF4              // rase error n if flag f it true
 643+ 6DF4                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 6DF4             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 6DF4             >
 643+ 6DF4             >Dict_Ptr        defl    $
 643+ 6DF4             >
 643+ 6DF4             >//              ______________________________________________________________________
 643+ 6DF4             >//              Heap part
 643+ 6DF4             >
 643+ 6DF4             >
 643+ 6DF4             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6F0             >
 643+ E6F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6F0             >Latest_Definition defl  Heap_Ptr
 643+ E6F0             >
 643+ E6F0             >                // dummy db directives used to calculate length of namec
 643+ E6F0 3F 45 52 52 >                db      "?ERROR"
 643+ E6F4 4F 52       >
 643+ E6F6             >len_NFA         defl    $ - temp_NFA
 643+ E6F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6F0             >
 643+ E6F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F5 4F 52       >
 643+ E6F7             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F6 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F7             >
 643+ E6F7 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F9             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F9             >
 643+ E6F9             >mirror_Ptr      defl    $
 643+ E6F9             >
 643+ E6F9 F6 6D       >                dw      Dict_Ptr + 2        // xt
 643+ E6FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6FB             >
 643+ E6FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6FB             >
 643+ E6FB             >//              ______________________________________________________________________
 643+ E6FB             >//              Dictionary part
 643+ E6FB             >
 643+ E6FB             >                org     Dict_Ptr
 643+ 6DF4             >
 643+ 6DF4 F9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 6DF6             >
 643+ 6DF6             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 6DF6 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 6DF9             >
 643+ 6DF9             >
 643+ 6DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 6DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 6DF9             >
 643+ 6DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 6DF9 25 69                        dw      SWAP                    // swap
 645+ 6DFB                                                              // if
 646+ 6DFB F5 63                        dw      ZBRANCH
 647+ 6DFD 08 00                        dw      QError_Else - $
 648+ 6DFF 2E 73                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 6E01                                                              // else
 650+ 6E01 E8 63                        dw      BRANCH
 651+ 6E03 04 00                        dw      QError_Endif - $
 652+ 6E05              QError_Else:
 653+ 6E05 11 69                        dw          DROP                //      drop
 654+ 6E07              QError_Endif:                                   // endif
 655+ 6E07 53 68                        dw      EXIT                    // ;
 656+ 6E09
 657+ 6E09              //  ______________________________________________________________________
 658+ 6E09              //
 659+ 6E09              // ?comp       --
 660+ 6E09              // raise msg #17 if not compiling
 661+ 6E09                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 6E09             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 6E09             >
 661+ 6E09             >Dict_Ptr        defl    $
 661+ 6E09             >
 661+ 6E09             >//              ______________________________________________________________________
 661+ 6E09             >//              Heap part
 661+ 6E09             >
 661+ 6E09             >
 661+ 6E09             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6FB             >
 661+ E6FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6FB             >Latest_Definition defl  Heap_Ptr
 661+ E6FB             >
 661+ E6FB             >                // dummy db directives used to calculate length of namec
 661+ E6FB 3F 43 4F 4D >                db      "?COMP"
 661+ E6FF 50          >
 661+ E700             >len_NFA         defl    $ - temp_NFA
 661+ E700             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6FB             >
 661+ E6FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6FC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E700 50          >
 661+ E701             >                org     $-1                 // alter last byte of Name just above to set
 661+ E700 D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E701             >
 661+ E701 F0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E703             >Prev_Ptr        defl    Heap_Ptr
 661+ E703             >
 661+ E703             >mirror_Ptr      defl    $
 661+ E703             >
 661+ E703 0B 6E       >                dw      Dict_Ptr + 2        // xt
 661+ E705             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E705             >
 661+ E705             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E705             >
 661+ E705             >//              ______________________________________________________________________
 661+ E705             >//              Dictionary part
 661+ E705             >
 661+ E705             >                org     Dict_Ptr
 661+ 6E09             >
 661+ 6E09 03 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 6E0B             >
 661+ 6E0B             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 6E0B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 6E0E             >
 661+ 6E0E             >
 661+ 6E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 6E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 6E0E             >
 661+ 6E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 6E0E 60 6B 9D 69                  dw      STATE, FETCH            // state @
 663+ 6E12 78 68                        dw      ZEQUAL                  // 0=
 664+ 6E14 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 6E18 F6 6D                        dw      QERROR                  // ?error
 666+ 6E1A 53 68                        dw      EXIT                    // ;
 667+ 6E1C
 668+ 6E1C              //  ______________________________________________________________________
 669+ 6E1C              //
 670+ 6E1C              // ?exec       --
 671+ 6E1C              // raise msg #18 if compiling
 672+ 6E1C                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 6E1C             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 6E1C             >
 672+ 6E1C             >Dict_Ptr        defl    $
 672+ 6E1C             >
 672+ 6E1C             >//              ______________________________________________________________________
 672+ 6E1C             >//              Heap part
 672+ 6E1C             >
 672+ 6E1C             >
 672+ 6E1C             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E705             >
 672+ E705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E705             >Latest_Definition defl  Heap_Ptr
 672+ E705             >
 672+ E705             >                // dummy db directives used to calculate length of namec
 672+ E705 3F 45 58 45 >                db      "?EXEC"
 672+ E709 43          >
 672+ E70A             >len_NFA         defl    $ - temp_NFA
 672+ E70A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E705             >
 672+ E705 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E706 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E70A 43          >
 672+ E70B             >                org     $-1                 // alter last byte of Name just above to set
 672+ E70A C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E70B             >
 672+ E70B FB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70D             >Prev_Ptr        defl    Heap_Ptr
 672+ E70D             >
 672+ E70D             >mirror_Ptr      defl    $
 672+ E70D             >
 672+ E70D 1E 6E       >                dw      Dict_Ptr + 2        // xt
 672+ E70F             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70F             >
 672+ E70F             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70F             >
 672+ E70F             >//              ______________________________________________________________________
 672+ E70F             >//              Dictionary part
 672+ E70F             >
 672+ E70F             >                org     Dict_Ptr
 672+ 6E1C             >
 672+ 6E1C 0D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 6E1E             >
 672+ 6E1E             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 6E1E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 6E21             >
 672+ 6E21             >
 672+ 6E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 6E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 6E21             >
 672+ 6E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 6E21 60 6B 9D 69                  dw      STATE, FETCH            // state @
 674+ 6E25 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 6E29 F6 6D                        dw      QERROR                  // ?error
 676+ 6E2B 53 68                        dw      EXIT                    // ;
 677+ 6E2D
 678+ 6E2D              //  ______________________________________________________________________
 679+ 6E2D              //
 680+ 6E2D              // ?pairs       n1 n2 --
 681+ 6E2D              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 6E2D                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 6E2D             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 6E2D             >
 682+ 6E2D             >Dict_Ptr        defl    $
 682+ 6E2D             >
 682+ 6E2D             >//              ______________________________________________________________________
 682+ 6E2D             >//              Heap part
 682+ 6E2D             >
 682+ 6E2D             >
 682+ 6E2D             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70F             >
 682+ E70F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70F             >Latest_Definition defl  Heap_Ptr
 682+ E70F             >
 682+ E70F             >                // dummy db directives used to calculate length of namec
 682+ E70F 3F 50 41 49 >                db      "?PAIRS"
 682+ E713 52 53       >
 682+ E715             >len_NFA         defl    $ - temp_NFA
 682+ E715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70F             >
 682+ E70F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E710 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E714 52 53       >
 682+ E716             >                org     $-1                 // alter last byte of Name just above to set
 682+ E715 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E716             >
 682+ E716 05 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E718             >Prev_Ptr        defl    Heap_Ptr
 682+ E718             >
 682+ E718             >mirror_Ptr      defl    $
 682+ E718             >
 682+ E718 2F 6E       >                dw      Dict_Ptr + 2        // xt
 682+ E71A             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E71A             >
 682+ E71A             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E71A             >
 682+ E71A             >//              ______________________________________________________________________
 682+ E71A             >//              Dictionary part
 682+ E71A             >
 682+ E71A             >                org     Dict_Ptr
 682+ 6E2D             >
 682+ 6E2D 18 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 6E2F             >
 682+ 6E2F             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 6E2F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 6E32             >
 682+ 6E32             >
 682+ 6E32             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 6E32             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 6E32             >
 682+ 6E32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 6E32 F9 6B                        dw      SUBTRACT                // -
 684+ 6E34 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 6E38 F6 6D                        dw      QERROR                  // ?error
 686+ 6E3A 53 68                        dw      EXIT                    // ;
 687+ 6E3C
 688+ 6E3C              //  ______________________________________________________________________
 689+ 6E3C              //
 690+ 6E3C              // ?csp       --
 691+ 6E3C              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 6E3C              // Compiler relies on that for  syntax checking of structures
 693+ 6E3C                              Colon_Def QCSP, "?CSP", is_normal
 693+ 6E3C             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 6E3C             >
 693+ 6E3C             >Dict_Ptr        defl    $
 693+ 6E3C             >
 693+ 6E3C             >//              ______________________________________________________________________
 693+ 6E3C             >//              Heap part
 693+ 6E3C             >
 693+ 6E3C             >
 693+ 6E3C             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E71A             >
 693+ E71A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E71A             >Latest_Definition defl  Heap_Ptr
 693+ E71A             >
 693+ E71A             >                // dummy db directives used to calculate length of namec
 693+ E71A 3F 43 53 50 >                db      "?CSP"
 693+ E71E             >len_NFA         defl    $ - temp_NFA
 693+ E71E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E71A             >
 693+ E71A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E71B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71F             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71E D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71F             >
 693+ E71F 0F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E721             >Prev_Ptr        defl    Heap_Ptr
 693+ E721             >
 693+ E721             >mirror_Ptr      defl    $
 693+ E721             >
 693+ E721 3E 6E       >                dw      Dict_Ptr + 2        // xt
 693+ E723             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E723             >
 693+ E723             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E723             >
 693+ E723             >//              ______________________________________________________________________
 693+ E723             >//              Dictionary part
 693+ E723             >
 693+ E723             >                org     Dict_Ptr
 693+ 6E3C             >
 693+ 6E3C 21 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 6E3E             >
 693+ 6E3E             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6E3E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 6E41             >
 693+ 6E41             >
 693+ 6E41             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6E41             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6E41             >
 693+ 6E41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6E41 3A 68                        dw      SPFETCH                 // sp@
 695+ 6E43 78 6B 9D 69                  dw      CSP, FETCH              // csp @
 696+ 6E47 F9 6B                        dw      SUBTRACT                // -
 697+ 6E49 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 6E4D F6 6D                        dw      QERROR                  // ?error
 699+ 6E4F 53 68                        dw      EXIT                    // ;
 700+ 6E51
 701+ 6E51              //  ______________________________________________________________________
 702+ 6E51              //
 703+ 6E51              // ?loading      --
 704+ 6E51              // raise msg #22 if not loading
 705+ 6E51                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 6E51             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 6E51             >
 705+ 6E51             >Dict_Ptr        defl    $
 705+ 6E51             >
 705+ 6E51             >//              ______________________________________________________________________
 705+ 6E51             >//              Heap part
 705+ 6E51             >
 705+ 6E51             >
 705+ 6E51             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E723             >
 705+ E723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E723             >Latest_Definition defl  Heap_Ptr
 705+ E723             >
 705+ E723             >                // dummy db directives used to calculate length of namec
 705+ E723 3F 4C 4F 41 >                db      "?LOADING"
 705+ E727 44 49 4E 47 >
 705+ E72B             >len_NFA         defl    $ - temp_NFA
 705+ E72B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E723             >
 705+ E723 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E724 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E728 44 49 4E 47 >
 705+ E72C             >                org     $-1                 // alter last byte of Name just above to set
 705+ E72B C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E72C             >
 705+ E72C 1A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72E             >Prev_Ptr        defl    Heap_Ptr
 705+ E72E             >
 705+ E72E             >mirror_Ptr      defl    $
 705+ E72E             >
 705+ E72E 53 6E       >                dw      Dict_Ptr + 2        // xt
 705+ E730             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E730             >
 705+ E730             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E730             >
 705+ E730             >//              ______________________________________________________________________
 705+ E730             >//              Dictionary part
 705+ E730             >
 705+ E730             >                org     Dict_Ptr
 705+ 6E51             >
 705+ 6E51 2E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 6E53             >
 705+ 6E53             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 6E53 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 6E56             >
 705+ 6E56             >
 705+ 6E56             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 6E56             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 6E56             >
 705+ 6E56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 6E56 36 6B 9D 69                  dw      BLK, FETCH              // blk @
 707+ 6E5A 78 68                        dw      ZEQUAL                  // 0=
 708+ 6E5C A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 6E60 F6 6D                        dw      QERROR                  // ?error
 710+ 6E62 53 68                        dw      EXIT                    // ;
 711+ 6E64
 712+ 6E64              //  ______________________________________________________________________
 713+ 6E64              //
 714+ 6E64              // compile      --
 715+ 6E64              // compiles the following word
 716+ 6E64                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 6E64             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 6E64             >
 716+ 6E64             >Dict_Ptr        defl    $
 716+ 6E64             >
 716+ 6E64             >//              ______________________________________________________________________
 716+ 6E64             >//              Heap part
 716+ 6E64             >
 716+ 6E64             >
 716+ 6E64             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E730             >
 716+ E730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E730             >Latest_Definition defl  Heap_Ptr
 716+ E730             >
 716+ E730             >                // dummy db directives used to calculate length of namec
 716+ E730 43 4F 4D 50 >                db      "COMPILE"
 716+ E734 49 4C 45    >
 716+ E737             >len_NFA         defl    $ - temp_NFA
 716+ E737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E730             >
 716+ E730 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E731 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E735 49 4C 45    >
 716+ E738             >                org     $-1                 // alter last byte of Name just above to set
 716+ E737 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E738             >
 716+ E738 23 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E73A             >Prev_Ptr        defl    Heap_Ptr
 716+ E73A             >
 716+ E73A             >mirror_Ptr      defl    $
 716+ E73A             >
 716+ E73A 66 6E       >                dw      Dict_Ptr + 2        // xt
 716+ E73C             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E73C             >
 716+ E73C             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E73C             >
 716+ E73C             >//              ______________________________________________________________________
 716+ E73C             >//              Dictionary part
 716+ E73C             >
 716+ E73C             >                org     Dict_Ptr
 716+ 6E64             >
 716+ 6E64 3A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 6E66             >
 716+ 6E66             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 6E66 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 6E69             >
 716+ 6E69             >
 716+ 6E69             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 6E69             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 6E69             >
 716+ 6E69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 6E69 0B 6E                        dw      QCOMP                   // ?comp
 718+ 6E6B 68 68                        dw      R_TO                    // r>
 719+ 6E6D 2C 69 D5 68                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 6E71 5D 68                        dw      TO_R                    // >r
 721+ 6E73 9D 69 D0 6B                  dw      FETCH, COMMA            // @ ,
 722+ 6E77 53 68                        dw      EXIT                    // ;
 723+ 6E79
 724+ 6E79              //  ______________________________________________________________________
 725+ 6E79              //
 726+ 6E79              // compile,     --
 727+ 6E79              // compiles the following word
 728+ 6E79                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 6E79             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 6E79             >
 728+ 6E79             >Dict_Ptr        defl    $
 728+ 6E79             >
 728+ 6E79             >//              ______________________________________________________________________
 728+ 6E79             >//              Heap part
 728+ 6E79             >
 728+ 6E79             >
 728+ 6E79             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E73C             >
 728+ E73C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E73C             >Latest_Definition defl  Heap_Ptr
 728+ E73C             >
 728+ E73C             >                // dummy db directives used to calculate length of namec
 728+ E73C 43 4F 4D 50 >                db      "COMPILE,"
 728+ E740 49 4C 45 2C >
 728+ E744             >len_NFA         defl    $ - temp_NFA
 728+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E73C             >
 728+ E73C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E741 49 4C 45 2C >
 728+ E745             >                org     $-1                 // alter last byte of Name just above to set
 728+ E744 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E745             >
 728+ E745 30 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E747             >Prev_Ptr        defl    Heap_Ptr
 728+ E747             >
 728+ E747             >mirror_Ptr      defl    $
 728+ E747             >
 728+ E747 7B 6E       >                dw      Dict_Ptr + 2        // xt
 728+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E749             >
 728+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E749             >
 728+ E749             >//              ______________________________________________________________________
 728+ E749             >//              Dictionary part
 728+ E749             >
 728+ E749             >                org     Dict_Ptr
 728+ 6E79             >
 728+ 6E79 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 6E7B             >
 728+ 6E7B             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 6E7B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 6E7E             >
 728+ 6E7E             >
 728+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 6E7E             >
 728+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 6E7E 0B 6E                        dw      QCOMP                   // ?comp
 730+ 6E80 D0 6B                        dw      COMMA                   // ,
 731+ 6E82 53 68                        dw      EXIT                    // ;
 732+ 6E84
 733+ 6E84              //  ______________________________________________________________________
 734+ 6E84              //
 735+ 6E84              // [            --
 736+ 6E84              // stop compilation
 737+ 6E84                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 6E84             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 6E84             >
 737+ 6E84             >Dict_Ptr        defl    $
 737+ 6E84             >
 737+ 6E84             >//              ______________________________________________________________________
 737+ 6E84             >//              Heap part
 737+ 6E84             >
 737+ 6E84             >
 737+ 6E84             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E749             >
 737+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E749             >Latest_Definition defl  Heap_Ptr
 737+ E749             >
 737+ E749             >                // dummy db directives used to calculate length of namec
 737+ E749 5B          >                db      "["
 737+ E74A             >len_NFA         defl    $ - temp_NFA
 737+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E749             >
 737+ E749 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E74A 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 737+ E74A DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E74B             >
 737+ E74B 3C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74D             >Prev_Ptr        defl    Heap_Ptr
 737+ E74D             >
 737+ E74D             >mirror_Ptr      defl    $
 737+ E74D             >
 737+ E74D 86 6E       >                dw      Dict_Ptr + 2        // xt
 737+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74F             >
 737+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74F             >
 737+ E74F             >//              ______________________________________________________________________
 737+ E74F             >//              Dictionary part
 737+ E74F             >
 737+ E74F             >                org     Dict_Ptr
 737+ 6E84             >
 737+ 6E84 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 6E86             >
 737+ 6E86             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 6E86 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 6E89             >
 737+ 6E89             >
 737+ 6E89             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 6E89             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 6E89             >
 737+ 6E89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 6E89 95 6A                        dw      ZERO                    // 0
 739+ 6E8B 60 6B A7 69                  dw      STATE, STORE            // state !
 740+ 6E8F 53 68                        dw      EXIT                    // ; immediate
 741+ 6E91
 742+ 6E91              //  ______________________________________________________________________
 743+ 6E91              //
 744+ 6E91              // ]            --
 745+ 6E91              // start compilation
 746+ 6E91                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 6E91             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 6E91             >
 746+ 6E91             >Dict_Ptr        defl    $
 746+ 6E91             >
 746+ 6E91             >//              ______________________________________________________________________
 746+ 6E91             >//              Heap part
 746+ 6E91             >
 746+ 6E91             >
 746+ 6E91             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74F             >
 746+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74F             >Latest_Definition defl  Heap_Ptr
 746+ E74F             >
 746+ E74F             >                // dummy db directives used to calculate length of namec
 746+ E74F 5D          >                db      "]"
 746+ E750             >len_NFA         defl    $ - temp_NFA
 746+ E750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74F             >
 746+ E74F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E750 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E751             >                org     $-1                 // alter last byte of Name just above to set
 746+ E750 DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E751             >
 746+ E751 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E753             >Prev_Ptr        defl    Heap_Ptr
 746+ E753             >
 746+ E753             >mirror_Ptr      defl    $
 746+ E753             >
 746+ E753 93 6E       >                dw      Dict_Ptr + 2        // xt
 746+ E755             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E755             >
 746+ E755             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E755             >
 746+ E755             >//              ______________________________________________________________________
 746+ E755             >//              Dictionary part
 746+ E755             >
 746+ E755             >                org     Dict_Ptr
 746+ 6E91             >
 746+ 6E91 53 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 6E93             >
 746+ 6E93             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 6E93 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 6E96             >
 746+ 6E96             >
 746+ 6E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 6E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 6E96             >
 746+ 6E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 6E96 A3 63 C0 00                  dw      LIT, $C0                // 192
 748+ 6E9A 60 6B A7 69                  dw      STATE, STORE            // state !
 749+ 6E9E 53 68                        dw      EXIT                    // ;
 750+ 6EA0
 751+ 6EA0              //  ______________________________________________________________________
 752+ 6EA0              //
 753+ 6EA0              // smudge       --
 754+ 6EA0              // toggle smudge bit of latest definition
 755+ 6EA0                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 6EA0             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 6EA0             >
 755+ 6EA0             >Dict_Ptr        defl    $
 755+ 6EA0             >
 755+ 6EA0             >//              ______________________________________________________________________
 755+ 6EA0             >//              Heap part
 755+ 6EA0             >
 755+ 6EA0             >
 755+ 6EA0             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E755             >
 755+ E755             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E755             >Latest_Definition defl  Heap_Ptr
 755+ E755             >
 755+ E755             >                // dummy db directives used to calculate length of namec
 755+ E755 53 4D 55 44 >                db      "SMUDGE"
 755+ E759 47 45       >
 755+ E75B             >len_NFA         defl    $ - temp_NFA
 755+ E75B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E755             >
 755+ E755 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E756 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E75A 47 45       >
 755+ E75C             >                org     $-1                 // alter last byte of Name just above to set
 755+ E75B C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E75C             >
 755+ E75C 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75E             >Prev_Ptr        defl    Heap_Ptr
 755+ E75E             >
 755+ E75E             >mirror_Ptr      defl    $
 755+ E75E             >
 755+ E75E A2 6E       >                dw      Dict_Ptr + 2        // xt
 755+ E760             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E760             >
 755+ E760             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E760             >
 755+ E760             >//              ______________________________________________________________________
 755+ E760             >//              Dictionary part
 755+ E760             >
 755+ E760             >                org     Dict_Ptr
 755+ 6EA0             >
 755+ 6EA0 5E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 6EA2             >
 755+ 6EA2             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 6EA2 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 6EA5             >
 755+ 6EA5             >
 755+ 6EA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 6EA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 6EA5             >
 755+ 6EA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 6EA5 66 6D                        dw      LATEST                  // latest
 757+ 6EA7 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 6EAB 94 69                        dw      TOGGLE                  // toggle
 759+ 6EAD 53 68                        dw      EXIT                    // ;
 760+ 6EAF
 761+ 6EAF              //  ______________________________________________________________________
 762+ 6EAF              //
 763+ 6EAF              // immediate    --
 764+ 6EAF              // make immediate the latest definition
 765+ 6EAF                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 6EAF             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 6EAF             >
 765+ 6EAF             >Dict_Ptr        defl    $
 765+ 6EAF             >
 765+ 6EAF             >//              ______________________________________________________________________
 765+ 6EAF             >//              Heap part
 765+ 6EAF             >
 765+ 6EAF             >
 765+ 6EAF             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E760             >
 765+ E760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E760             >Latest_Definition defl  Heap_Ptr
 765+ E760             >
 765+ E760             >                // dummy db directives used to calculate length of namec
 765+ E760 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E764 44 49 41 54 >
 765+ E768 45          >
 765+ E769             >len_NFA         defl    $ - temp_NFA
 765+ E769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E760             >
 765+ E760 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E761 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E765 44 49 41 54 >
 765+ E769 45          >
 765+ E76A             >                org     $-1                 // alter last byte of Name just above to set
 765+ E769 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E76A             >
 765+ E76A 55 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E76C             >Prev_Ptr        defl    Heap_Ptr
 765+ E76C             >
 765+ E76C             >mirror_Ptr      defl    $
 765+ E76C             >
 765+ E76C B1 6E       >                dw      Dict_Ptr + 2        // xt
 765+ E76E             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76E             >
 765+ E76E             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76E             >
 765+ E76E             >//              ______________________________________________________________________
 765+ E76E             >//              Dictionary part
 765+ E76E             >
 765+ E76E             >                org     Dict_Ptr
 765+ 6EAF             >
 765+ 6EAF 6C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 6EB1             >
 765+ 6EB1             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 6EB1 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 6EB4             >
 765+ 6EB4             >
 765+ 6EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 6EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 6EB4             >
 765+ 6EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 6EB4 66 6D                        dw      LATEST                  // latest
 767+ 6EB6 A3 63 40 00                  dw      LIT, $40                // 64
 768+ 6EBA 94 69                        dw      TOGGLE                  // toggle
 769+ 6EBC 53 68                        dw      EXIT                    // ;
 770+ 6EBE
 771+ 6EBE              //  ______________________________________________________________________
 772+ 6EBE              //
 773+ 6EBE              // hex          --
 774+ 6EBE              // change numeration base
 775+ 6EBE                              Colon_Def HEX, "HEX", is_normal
 775+ 6EBE             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 6EBE             >
 775+ 6EBE             >Dict_Ptr        defl    $
 775+ 6EBE             >
 775+ 6EBE             >//              ______________________________________________________________________
 775+ 6EBE             >//              Heap part
 775+ 6EBE             >
 775+ 6EBE             >
 775+ 6EBE             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76E             >
 775+ E76E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76E             >Latest_Definition defl  Heap_Ptr
 775+ E76E             >
 775+ E76E             >                // dummy db directives used to calculate length of namec
 775+ E76E 48 45 58    >                db      "HEX"
 775+ E771             >len_NFA         defl    $ - temp_NFA
 775+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76E             >
 775+ E76E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E772             >                org     $-1                 // alter last byte of Name just above to set
 775+ E771 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E772             >
 775+ E772 60 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E774             >Prev_Ptr        defl    Heap_Ptr
 775+ E774             >
 775+ E774             >mirror_Ptr      defl    $
 775+ E774             >
 775+ E774 C0 6E       >                dw      Dict_Ptr + 2        // xt
 775+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E776             >
 775+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E776             >
 775+ E776             >//              ______________________________________________________________________
 775+ E776             >//              Dictionary part
 775+ E776             >
 775+ E776             >                org     Dict_Ptr
 775+ 6EBE             >
 775+ 6EBE 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 6EC0             >
 775+ 6EC0             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 6EC0 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 6EC3             >
 775+ 6EC3             >
 775+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 6EC3             >
 775+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 6EC3 A3 63 10 00                  dw      LIT, 16                 // 16
 777+ 6EC7 66 6B A7 69                  dw      BASE, STORE             // base !
 778+ 6ECB 53 68                        dw      EXIT                    // ;
 779+ 6ECD
 780+ 6ECD              //  ______________________________________________________________________
 781+ 6ECD              //
 782+ 6ECD              // decimal      --
 783+ 6ECD              // change numeration base
 784+ 6ECD                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 6ECD             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 6ECD             >
 784+ 6ECD             >Dict_Ptr        defl    $
 784+ 6ECD             >
 784+ 6ECD             >//              ______________________________________________________________________
 784+ 6ECD             >//              Heap part
 784+ 6ECD             >
 784+ 6ECD             >
 784+ 6ECD             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E776             >
 784+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E776             >Latest_Definition defl  Heap_Ptr
 784+ E776             >
 784+ E776             >                // dummy db directives used to calculate length of namec
 784+ E776 44 45 43 49 >                db      "DECIMAL"
 784+ E77A 4D 41 4C    >
 784+ E77D             >len_NFA         defl    $ - temp_NFA
 784+ E77D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E776             >
 784+ E776 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E777 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E77B 4D 41 4C    >
 784+ E77E             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77D CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77E             >
 784+ E77E 6E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E780             >Prev_Ptr        defl    Heap_Ptr
 784+ E780             >
 784+ E780             >mirror_Ptr      defl    $
 784+ E780             >
 784+ E780 CF 6E       >                dw      Dict_Ptr + 2        // xt
 784+ E782             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E782             >
 784+ E782             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E782             >
 784+ E782             >//              ______________________________________________________________________
 784+ E782             >//              Dictionary part
 784+ E782             >
 784+ E782             >                org     Dict_Ptr
 784+ 6ECD             >
 784+ 6ECD 80 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 6ECF             >
 784+ 6ECF             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 6ECF CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 6ED2             >
 784+ 6ED2             >
 784+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 6ED2             >
 784+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 6ED2 A3 63 0A 00                  dw      LIT, 10                 // 10
 786+ 6ED6 66 6B A7 69                  dw      BASE, STORE             // base !
 787+ 6EDA 53 68                        dw      EXIT                    // ;
 788+ 6EDC
 789+ 6EDC              //  ______________________________________________________________________
 790+ 6EDC              //
 791+ 6EDC              // (;code)       --
 792+ 6EDC              // patch to CFA to call/jump to the "following code"
 793+ 6EDC                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 6EDC             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 6EDC             >
 793+ 6EDC             >Dict_Ptr        defl    $
 793+ 6EDC             >
 793+ 6EDC             >//              ______________________________________________________________________
 793+ 6EDC             >//              Heap part
 793+ 6EDC             >
 793+ 6EDC             >
 793+ 6EDC             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E782             >
 793+ E782             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E782             >Latest_Definition defl  Heap_Ptr
 793+ E782             >
 793+ E782             >                // dummy db directives used to calculate length of namec
 793+ E782 28 3B 43 4F >                db      "(;CODE)"
 793+ E786 44 45 29    >
 793+ E789             >len_NFA         defl    $ - temp_NFA
 793+ E789             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E782             >
 793+ E782 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E783 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E787 44 45 29    >
 793+ E78A             >                org     $-1                 // alter last byte of Name just above to set
 793+ E789 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E78A             >
 793+ E78A 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E78C             >Prev_Ptr        defl    Heap_Ptr
 793+ E78C             >
 793+ E78C             >mirror_Ptr      defl    $
 793+ E78C             >
 793+ E78C DE 6E       >                dw      Dict_Ptr + 2        // xt
 793+ E78E             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78E             >
 793+ E78E             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78E             >
 793+ E78E             >//              ______________________________________________________________________
 793+ E78E             >//              Dictionary part
 793+ E78E             >
 793+ E78E             >                org     Dict_Ptr
 793+ 6EDC             >
 793+ 6EDC 8C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 6EDE             >
 793+ 6EDE             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 6EDE CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 6EE1             >
 793+ 6EE1             >
 793+ 6EE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 6EE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 6EE1             >
 793+ 6EE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 6EE1 68 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 6EE3 66 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 6EE5 C4 6D 9F 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 6EE9
 798+ 6EE9 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 6EED 08 69 BB 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 6EF1 BF 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 6EF3
 802+ 6EF3 A7 69                        dw      STORE                   // !
 803+ 6EF5 53 68                        dw      EXIT                    // ;
 804+ 6EF7
 805+ 6EF7              //  ______________________________________________________________________
 806+ 6EF7              //
 807+ 6EF7              // ;code        --
 808+ 6EF7                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 6EF7             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 6EF7             >
 808+ 6EF7             >Dict_Ptr        defl    $
 808+ 6EF7             >
 808+ 6EF7             >//              ______________________________________________________________________
 808+ 6EF7             >//              Heap part
 808+ 6EF7             >
 808+ 6EF7             >
 808+ 6EF7             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78E             >
 808+ E78E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78E             >Latest_Definition defl  Heap_Ptr
 808+ E78E             >
 808+ E78E             >                // dummy db directives used to calculate length of namec
 808+ E78E 3B 43 4F 44 >                db      ";CODE"
 808+ E792 45          >
 808+ E793             >len_NFA         defl    $ - temp_NFA
 808+ E793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78E             >
 808+ E78E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78F 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E793 45          >
 808+ E794             >                org     $-1                 // alter last byte of Name just above to set
 808+ E793 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E794             >
 808+ E794 82 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E796             >Prev_Ptr        defl    Heap_Ptr
 808+ E796             >
 808+ E796             >mirror_Ptr      defl    $
 808+ E796             >
 808+ E796 F9 6E       >                dw      Dict_Ptr + 2        // xt
 808+ E798             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E798             >
 808+ E798             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E798             >
 808+ E798             >//              ______________________________________________________________________
 808+ E798             >//              Dictionary part
 808+ E798             >
 808+ E798             >                org     Dict_Ptr
 808+ 6EF7             >
 808+ 6EF7 96 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 6EF9             >
 808+ 6EF9             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 6EF9 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 6EFC             >
 808+ 6EFC             >
 808+ 6EFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 6EFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 6EFC             >
 808+ 6EFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 6EFC 3E 6E                        dw      QCSP                    // ?csp
 810+ 6EFE 66 6E                        dw      COMPILE                 // compile
 811+ 6F00 DE 6E                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 6F02 86 6E                        dw      SQUARED_OPEN            // [
 813+ 6F04 5C 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 6F06 53 68                        dw      EXIT                    // ; immediate
 815+ 6F08
 816+ 6F08              //  ______________________________________________________________________
 817+ 6F08              //
 818+ 6F08              // <builds      --
 819+ 6F08                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 6F08             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 6F08             >
 819+ 6F08             >Dict_Ptr        defl    $
 819+ 6F08             >
 819+ 6F08             >//              ______________________________________________________________________
 819+ 6F08             >//              Heap part
 819+ 6F08             >
 819+ 6F08             >
 819+ 6F08             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E798             >
 819+ E798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E798             >Latest_Definition defl  Heap_Ptr
 819+ E798             >
 819+ E798             >                // dummy db directives used to calculate length of namec
 819+ E798 3C 42 55 49 >                db      "<BUILDS"
 819+ E79C 4C 44 53    >
 819+ E79F             >len_NFA         defl    $ - temp_NFA
 819+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E798             >
 819+ E798 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E799 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79D 4C 44 53    >
 819+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79F D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E7A0             >
 819+ E7A0 8E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7A2             >Prev_Ptr        defl    Heap_Ptr
 819+ E7A2             >
 819+ E7A2             >mirror_Ptr      defl    $
 819+ E7A2             >
 819+ E7A2 0A 6F       >                dw      Dict_Ptr + 2        // xt
 819+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A4             >
 819+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A4             >
 819+ E7A4             >//              ______________________________________________________________________
 819+ E7A4             >//              Dictionary part
 819+ E7A4             >
 819+ E7A4             >                org     Dict_Ptr
 819+ 6F08             >
 819+ 6F08 A2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 6F0A             >
 819+ 6F0A             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 6F0A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 6F0D             >
 819+ 6F0D             >
 819+ 6F0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 6F0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 6F0D             >
 819+ 6F0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 6F0D 95 6A                        dw      ZERO                    // 0
 821+ 6F0F 60 6A                        dw      CONSTANT                // constant
 822+ 6F11 53 68                        dw      EXIT                    // ;
 823+ 6F13
 824+ 6F13              //  ______________________________________________________________________
 825+ 6F13              //
 826+ 6F13              // recurse      --
 827+ 6F13              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 6F13              //              dw      QCOMP                   // ?comp
 829+ 6F13              //              dw      LATEST                  // latest
 830+ 6F13              //              dw      PFA, CFA                // pfa cfa
 831+ 6F13              //              dw      COMMA                   // ,
 832+ 6F13              //              dw      EXIT                    // ; immediate
 833+ 6F13
 834+ 6F13              //  ______________________________________________________________________
 835+ 6F13              //
 836+ 6F13              // does>     --
 837+ 6F13                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 6F13             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 6F13             >
 837+ 6F13             >Dict_Ptr        defl    $
 837+ 6F13             >
 837+ 6F13             >//              ______________________________________________________________________
 837+ 6F13             >//              Heap part
 837+ 6F13             >
 837+ 6F13             >
 837+ 6F13             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A4             >
 837+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A4             >Latest_Definition defl  Heap_Ptr
 837+ E7A4             >
 837+ E7A4             >                // dummy db directives used to calculate length of namec
 837+ E7A4 44 4F 45 53 >                db      "DOES>"
 837+ E7A8 3E          >
 837+ E7A9             >len_NFA         defl    $ - temp_NFA
 837+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A4             >
 837+ E7A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A5 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A9 3E          >
 837+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A9 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7AA             >
 837+ E7AA 98 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 837+ E7AC             >
 837+ E7AC             >mirror_Ptr      defl    $
 837+ E7AC             >
 837+ E7AC 15 6F       >                dw      Dict_Ptr + 2        // xt
 837+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AE             >
 837+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AE             >
 837+ E7AE             >//              ______________________________________________________________________
 837+ E7AE             >//              Dictionary part
 837+ E7AE             >
 837+ E7AE             >                org     Dict_Ptr
 837+ 6F13             >
 837+ 6F13 AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 6F15             >
 837+ 6F15             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 6F15 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 6F18             >
 837+ 6F18             >
 837+ 6F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 6F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 6F18             >
 837+ 6F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 6F18 68 68                        dw      R_TO                    // r>
 839+ 6F1A 66 6D                        dw      LATEST                  // latest
 840+ 6F1C C4 6D                        dw      PFA                     // pfa
 841+ 6F1E A7 69                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 6F20              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 6F20 DE 6E                        dw      C_SEMICOLON_CODE        // ;code
 844+ 6F22              Does_Ptr:
 845+ 6F22                              // via call coded in CFA
 846+ 6F22 EB                           ex      de, hl //**
 847+ 6F23                              // *** ldhlrp
 848+ 6F23 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 6F24 70                           ld      (hl), b
 850+ 6F25 2B                           dec     hl
 851+ 6F26 71                           ld      (hl), c
 852+ 6F27                              // *** ldrphl
 853+ 6F27 EB                           ex      de, hl //**
 854+ 6F28 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 6F29
 856+ 6F29 4E                           ld      c, (hl)
 857+ 6F2A 23                           inc     hl
 858+ 6F2B 46                           ld      b, (hl)
 859+ 6F2C 23                           inc     hl
 860+ 6F2D
 861+ 6F2D                              psh1
 861+ 6F2D E5          >                push    hl
 861+ 6F2E DD E9       >                jp      (ix)
 862+ 6F30                              // SMUDGE !
 863+ 6F30
 864+ 6F30              //  ______________________________________________________________________
 865+ 6F30              //
 866+ 6F30              // count        a -- a2 n
 867+ 6F30              // expects a counted string at address a, returns string address and counter
 868+ 6F30                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 6F30             >
 868+ 6F30             >Dict_Ptr        defl    $
 868+ 6F30             >
 868+ 6F30             >//              ______________________________________________________________________
 868+ 6F30             >//              Heap part
 868+ 6F30             >
 868+ 6F30             >
 868+ 6F30             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AE             >
 868+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AE             >Latest_Definition defl  Heap_Ptr
 868+ E7AE             >
 868+ E7AE             >                // dummy db directives used to calculate length of namec
 868+ E7AE 43 4F 55 4E >                db      "COUNT"
 868+ E7B2 54          >
 868+ E7B3             >len_NFA         defl    $ - temp_NFA
 868+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AE             >
 868+ E7AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B3 54          >
 868+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B3 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B4             >
 868+ E7B4 A4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B6             >
 868+ E7B6             >mirror_Ptr      defl    $
 868+ E7B6             >
 868+ E7B6 32 6F       >                dw      Dict_Ptr + 2        // xt
 868+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B8             >
 868+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B8             >
 868+ E7B8             >//              ______________________________________________________________________
 868+ E7B8             >//              Dictionary part
 868+ E7B8             >
 868+ E7B8             >                org     Dict_Ptr
 868+ 6F30             >
 868+ 6F30 B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 6F32             >
 868+ 6F32             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 6F32 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 6F32 ~           >
 868+ 6F32 ~           >
 868+ 6F32             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 6F32             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 6F32             >
 868+ 6F32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 6F32 D9                           exx
 870+ 6F33 E1                           pop     hl
 871+ 6F34 5E                           ld      e, (hl)
 872+ 6F35 16 00                        ld      d, 0
 873+ 6F37 23                           inc     hl
 874+ 6F38              Count_Here:
 875+ 6F38 E5                           push    hl
 876+ 6F39 D5                           push    de
 877+ 6F3A D9                           exx
 878+ 6F3B                              next
 878+ 6F3B DD E9       >                jp      (ix)
 879+ 6F3D              //                pop     hl
 880+ 6F3D              //                ld      a, (hl)
 881+ 6F3D              //                inc     hl
 882+ 6F3D              //                push    hl
 883+ 6F3D              //                ld      h, 0
 884+ 6F3D              //                ld      l, a
 885+ 6F3D              //                push    hl
 886+ 6F3D              //                next
 887+ 6F3D
 888+ 6F3D              //  ______________________________________________________________________
 889+ 6F3D              //
 890+ 6F3D              // bounds       a n -- a+n n
 891+ 6F3D              // given an address and a length ( a n ) calculate the bound addresses
 892+ 6F3D              // suitable for DO-LOOP
 893+ 6F3D                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 6F3D             >
 893+ 6F3D             >Dict_Ptr        defl    $
 893+ 6F3D             >
 893+ 6F3D             >//              ______________________________________________________________________
 893+ 6F3D             >//              Heap part
 893+ 6F3D             >
 893+ 6F3D             >
 893+ 6F3D             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B8             >
 893+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B8             >Latest_Definition defl  Heap_Ptr
 893+ E7B8             >
 893+ E7B8             >                // dummy db directives used to calculate length of namec
 893+ E7B8 42 4F 55 4E >                db      "BOUNDS"
 893+ E7BC 44 53       >
 893+ E7BE             >len_NFA         defl    $ - temp_NFA
 893+ E7BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B8             >
 893+ E7B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B9 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BD 44 53       >
 893+ E7BF             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BE D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BF             >
 893+ E7BF AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7C1             >Prev_Ptr        defl    Heap_Ptr
 893+ E7C1             >
 893+ E7C1             >mirror_Ptr      defl    $
 893+ E7C1             >
 893+ E7C1 3F 6F       >                dw      Dict_Ptr + 2        // xt
 893+ E7C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C3             >
 893+ E7C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C3             >
 893+ E7C3             >//              ______________________________________________________________________
 893+ E7C3             >//              Dictionary part
 893+ E7C3             >
 893+ E7C3             >                org     Dict_Ptr
 893+ 6F3D             >
 893+ 6F3D C1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 6F3F             >
 893+ 6F3F             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 6F3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 6F3F ~           >
 893+ 6F3F ~           >
 893+ 6F3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 6F3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 6F3F             >
 893+ 6F3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 6F3F D9                           exx
 895+ 6F40 E1                           pop     hl
 896+ 6F41 D1                           pop     de
 897+ 6F42 19                           add     hl, de
 898+ 6F43 18 F3                        jr      Count_Here
 899+ 6F45                              // push    hl
 900+ 6F45                              // push    de
 901+ 6F45                              // exx
 902+ 6F45                              // next
 903+ 6F45
 904+ 6F45              //  ______________________________________________________________________
 905+ 6F45              //
 906+ 6F45              // leave        --
 907+ 6F45              // Compile (leave) to leave current LOOP and jump just after it
 908+ 6F45                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 6F45             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 6F45             >
 908+ 6F45             >Dict_Ptr        defl    $
 908+ 6F45             >
 908+ 6F45             >//              ______________________________________________________________________
 908+ 6F45             >//              Heap part
 908+ 6F45             >
 908+ 6F45             >
 908+ 6F45             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C3             >
 908+ E7C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C3             >Latest_Definition defl  Heap_Ptr
 908+ E7C3             >
 908+ E7C3             >                // dummy db directives used to calculate length of namec
 908+ E7C3 4C 45 41 56 >                db      "LEAVE"
 908+ E7C7 45          >
 908+ E7C8             >len_NFA         defl    $ - temp_NFA
 908+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C3             >
 908+ E7C3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C8 45          >
 908+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C8 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C9             >
 908+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 908+ E7CB             >
 908+ E7CB             >mirror_Ptr      defl    $
 908+ E7CB             >
 908+ E7CB 47 6F       >                dw      Dict_Ptr + 2        // xt
 908+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CD             >
 908+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CD             >
 908+ E7CD             >//              ______________________________________________________________________
 908+ E7CD             >//              Dictionary part
 908+ E7CD             >
 908+ E7CD             >                org     Dict_Ptr
 908+ 6F45             >
 908+ 6F45 CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 6F47             >
 908+ 6F47             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 6F47 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 6F4A             >
 908+ 6F4A             >
 908+ 6F4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 6F4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 6F4A             >
 908+ 6F4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 6F4A 66 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 6F4E BA 6B 5D 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 6F52 95 6A D0 6B
 911+ 6F56 95 6A 95 6A                  dw      ZERO, ZERO
 912+ 6F5A 3A 68 2C 69                  dw      SPFETCH, DUP
 913+ 6F5E D5 68 D5 68                  dw      CELL_PLUS, CELL_PLUS
 914+ 6F62 1C 69                        dw      TUCK
 915+ 6F64 78 6B 9D 69                  dw      CSP, FETCH
 916+ 6F68 25 69 F9 6B                  dw      SWAP, SUBTRACT
 917+ 6F6C 94 67                        dw      CMOVE
 918+ 6F6E 78 6B 9D 69                  dw      CSP, FETCH, CELL_MINUS
 918+ 6F72 DA 68
 919+ 6F74 68 68 08 69                  dw      R_TO, OVER, STORE
 919+ 6F78 A7 69
 920+ 6F7A DA 68 95 6A                  dw      CELL_MINUS, ZERO
 921+ 6F7E 25 69 A7 69                  dw      SWAP, STORE
 922+ 6F82 53 68                        dw      EXIT                    // ;
 923+ 6F84
 924+ 6F84              //  ______________________________________________________________________
 925+ 6F84              //
 926+ 6F84              // type         a n --
 927+ 6F84              // Sends to current output channel n characters starting at address a.
 928+ 6F84                              Colon_Def TYPE, "TYPE", is_normal
 928+ 6F84             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 6F84             >
 928+ 6F84             >Dict_Ptr        defl    $
 928+ 6F84             >
 928+ 6F84             >//              ______________________________________________________________________
 928+ 6F84             >//              Heap part
 928+ 6F84             >
 928+ 6F84             >
 928+ 6F84             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CD             >
 928+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CD             >Latest_Definition defl  Heap_Ptr
 928+ E7CD             >
 928+ E7CD             >                // dummy db directives used to calculate length of namec
 928+ E7CD 54 59 50 45 >                db      "TYPE"
 928+ E7D1             >len_NFA         defl    $ - temp_NFA
 928+ E7D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CD             >
 928+ E7CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CE 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7D2             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7D1 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7D2             >
 928+ E7D2 C3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D4             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D4             >
 928+ E7D4             >mirror_Ptr      defl    $
 928+ E7D4             >
 928+ E7D4 86 6F       >                dw      Dict_Ptr + 2        // xt
 928+ E7D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D6             >
 928+ E7D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D6             >
 928+ E7D6             >//              ______________________________________________________________________
 928+ E7D6             >//              Dictionary part
 928+ E7D6             >
 928+ E7D6             >                org     Dict_Ptr
 928+ 6F84             >
 928+ 6F84 D4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 6F86             >
 928+ 6F86             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 6F86 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 6F89             >
 928+ 6F89             >
 928+ 6F89             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 6F89             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 6F89             >
 928+ 6F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 6F89 3F 6F                        dw      BOUNDS                  // bounds
 930+ 6F8B 0C 64                        dw      C_Q_DO                  // ?do
 931+ 6F8D 0C 00                        dw      Type_Skip - $
 932+ 6F8F              Type_Loop:
 933+ 6F8F 3A 64 B2 69                  dw          I, CFETCH           //      i c@
 934+ 6F93 74 6C                        dw          EMIT                //      emit
 935+ 6F95 E0 63                        dw      C_LOOP                  // loop
 936+ 6F97 F8 FF                        dw      Type_Loop - $
 937+ 6F99              Type_Skip:
 938+ 6F99 53 68                        dw      EXIT                    // ;
 939+ 6F9B
 940+ 6F9B              //  ______________________________________________________________________
 941+ 6F9B              //
 942+ 6F9B              // -trailing    a n1 -- a n2
 943+ 6F9B              // Assumes that an n1 bytes-long string is stored at address a
 944+ 6F9B              // and the string contains a space delimited word,
 945+ 6F9B              // Finds n2 as the position of the first character after the word.
 946+ 6F9B                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 6F9B             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 6F9B             >
 946+ 6F9B             >Dict_Ptr        defl    $
 946+ 6F9B             >
 946+ 6F9B             >//              ______________________________________________________________________
 946+ 6F9B             >//              Heap part
 946+ 6F9B             >
 946+ 6F9B             >
 946+ 6F9B             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D6             >
 946+ E7D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D6             >Latest_Definition defl  Heap_Ptr
 946+ E7D6             >
 946+ E7D6             >                // dummy db directives used to calculate length of namec
 946+ E7D6 2D 54 52 41 >                db      "-TRAILING"
 946+ E7DA 49 4C 49 4E >
 946+ E7DE 47          >
 946+ E7DF             >len_NFA         defl    $ - temp_NFA
 946+ E7DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D6             >
 946+ E7D6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D7 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7DB 49 4C 49 4E >
 946+ E7DF 47          >
 946+ E7E0             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DF C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7E0             >
 946+ E7E0 CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7E2             >Prev_Ptr        defl    Heap_Ptr
 946+ E7E2             >
 946+ E7E2             >mirror_Ptr      defl    $
 946+ E7E2             >
 946+ E7E2 9D 6F       >                dw      Dict_Ptr + 2        // xt
 946+ E7E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E4             >
 946+ E7E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E4             >
 946+ E7E4             >//              ______________________________________________________________________
 946+ E7E4             >//              Dictionary part
 946+ E7E4             >
 946+ E7E4             >                org     Dict_Ptr
 946+ 6F9B             >
 946+ 6F9B E2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 6F9D             >
 946+ 6F9D             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 6F9D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 6FA0             >
 946+ 6FA0             >
 946+ 6FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 6FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 6FA0             >
 946+ 6FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 6FA0 2C 69 95 6A                  dw      DUP, ZERO               // dup 0
 948+ 6FA4                                                              // do
 949+ 6FA4 0C 64                        dw      C_Q_DO
 950+ 6FA6 20 00                        dw      LTrailing_Leave - $
 951+ 6FA8              LTrailing_Loop:
 952+ 6FA8 7B 69 A6 68                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 6FAC C6 68                        dw          ONE_SUBTRACT        //      1-
 954+ 6FAE B2 69                        dw          CFETCH              //      c@
 955+ 6FB0 B8 6A F9 6B                  dw          BL, SUBTRACT        //      bl -
 956+ 6FB4                                                              //      if
 957+ 6FB4 F5 63                        dw          ZBRANCH
 958+ 6FB6 0A 00                        dw          LTrailing_Else - $
 959+ 6FB8 00 64                        dw              C_LEAVE         //          leave
 960+ 6FBA 0C 00                        dw              LTrailing_Leave - $
 961+ 6FBC E8 63                        dw          BRANCH              //      else
 962+ 6FBE 04 00                        dw          LTrailing_Endif - $
 963+ 6FC0              LTrailing_Else:
 964+ 6FC0 C6 68                        dw              ONE_SUBTRACT    //          1-
 965+ 6FC2              LTrailing_Endif:                                //      endif
 966+ 6FC2                                                              // loop
 967+ 6FC2 E0 63                        dw      C_LOOP
 968+ 6FC4 E4 FF                        dw      LTrailing_Loop - $
 969+ 6FC6              LTrailing_Leave:
 970+ 6FC6 53 68                        dw      EXIT                    // ;
 971+ 6FC8
 972+ 6FC8              //  ______________________________________________________________________
 973+ 6FC8              //
 974+ 6FC8              // accept       a n1 -- n2
 975+ 6FC8              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 6FC8              // CR stops input. A 'nul' is added as trailer.
 977+ 6FC8              // n2 is the string length. n2 is kept in span user variable also.
 978+ 6FC8                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 6FC8             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 6FC8             >
 978+ 6FC8             >Dict_Ptr        defl    $
 978+ 6FC8             >
 978+ 6FC8             >//              ______________________________________________________________________
 978+ 6FC8             >//              Heap part
 978+ 6FC8             >
 978+ 6FC8             >
 978+ 6FC8             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E4             >
 978+ E7E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E4             >Latest_Definition defl  Heap_Ptr
 978+ E7E4             >
 978+ E7E4             >                // dummy db directives used to calculate length of namec
 978+ E7E4 41 43 43 45 >                db      "ACCEPT"
 978+ E7E8 50 54       >
 978+ E7EA             >len_NFA         defl    $ - temp_NFA
 978+ E7EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E4             >
 978+ E7E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E5 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E9 50 54       >
 978+ E7EB             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7EA D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7EB             >
 978+ E7EB D6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7ED             >Prev_Ptr        defl    Heap_Ptr
 978+ E7ED             >
 978+ E7ED             >mirror_Ptr      defl    $
 978+ E7ED             >
 978+ E7ED CA 6F       >                dw      Dict_Ptr + 2        // xt
 978+ E7EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EF             >
 978+ E7EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EF             >
 978+ E7EF             >//              ______________________________________________________________________
 978+ E7EF             >//              Dictionary part
 978+ E7EF             >
 978+ E7EF             >                org     Dict_Ptr
 978+ 6FC8             >
 978+ 6FC8 ED 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 6FCA             >
 978+ 6FCA             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6FCA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 6FCD             >
 978+ 6FCD             >
 978+ 6FCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6FCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6FCD             >
 978+ 6FCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6FCD 08 69 A6 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 6FD1 08 69
 980+ 6FD3 95 6A 3E 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 6FD7                                                              // do
 982+ 6FD7 0C 64                        dw      C_Q_DO
 983+ 6FD9 8C 00                        dw      Accept_Leave - $
 984+ 6FDB              Accept_Loop:
 985+ 6FDB 32 66                        dw          CUR
 986+ 6FDD 11 69 7A 66                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 6FE1 2C 69                        dw          DUP                 //      dup             ( a  c  c )
 988+ 6FE3 A3 63 0E 00                  dw          LIT, $0E            //      0E
 989+ 6FE7 DB 6A                        dw          PLUS_ORIGIN         //      +origin
 990+ 6FE9 9D 69                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 6FEB 05 6C                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 6FED                                                              //      if
 993+ 6FED F5 63                        dw          ZBRANCH
 994+ 6FEF 2C 00                        dw          Accept_Else_0 - $
 995+ 6FF1 11 69                        dw              DROP            //          drop        ( a  )
 996+ 6FF3 2C 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 6FF7 05 6C
 997+ 6FF9 9C 6A 13 68                  dw              ONE, AND_OP     //          1 and
 998+ 6FFD 2C 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 6FFF 68 68                        dw              R_TO            //          r> 2 - + r>
1000+ 7001 E2 68 A6 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 7005 5D 68                        dw              TO_R            //
1002+ 7007                                                              //          if
1003+ 7007 F5 63                        dw              ZBRANCH
1004+ 7009 0A 00                        dw              Accept_Else_1 - $
1005+ 700B A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 700F                                                              //          else
1007+ 700F E8 63                        dw              BRANCH
1008+ 7011 06 00                        dw              Accept_Endif_1 - $
1009+ 7013              Accept_Else_1:
1010+ 7013 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 7017              Accept_Endif_1:                                 //          endif
1012+ 7017 E8 63                        dw          BRANCH
1013+ 7019 2E 00                        dw          Accept_Endif_0 - $
1014+ 701B              Accept_Else_0:                                  //      else
1015+ 701B 2C 69                        dw              DUP             //          dup         ( a  c  c )
1016+ 701D A3 63 0D 00                  dw              LIT, 13         //          13
1017+ 7021 05 6C                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 7023                                                              //          if
1019+ 7023 F5 63                        dw              ZBRANCH
1020+ 7025 0C 00                        dw              Accept_Else_2 - $
1021+ 7027 11 69 B8 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 702B 95 6A                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 702D                                                              //          else
1024+ 702D E8 63                        dw              BRANCH
1025+ 702F 04 00                        dw              Accept_Endif_2 - $
1026+ 7031              Accept_Else_2:
1027+ 7031 2C 69                        dw                  DUP         //              dup     ( a  c  c )
1028+ 7033                                                              //          endif
1029+ 7033              Accept_Endif_2:
1030+ 7033 3A 64 BB 69                  dw              I, CSTORE       //          i           ( a  c )
1031+ 7037 2C 69 B8 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 703B 1E 6C
1032+ 703D                                                              //          if
1033+ 703D F5 63                        dw              ZBRANCH
1034+ 703F 08 00                        dw              Accept_Endif_3 - $
1035+ 7041 68 68                        dw                  R_TO        //              r>
1036+ 7043 C6 68                        dw                  ONE_SUBTRACT//              1-
1037+ 7045 5D 68                        dw                  TO_R        //              >r
1038+ 7047                                                              //          endif
1039+ 7047              Accept_Endif_3:
1040+ 7047              Accept_Endif_0:                                 //      endif
1041+ 7047 74 6C                        dw          EMIT                //      emit
1042+ 7049
1043+ 7049 95 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 704D BF 68
1044+ 704F A7 69                        dw          STORE               //          ( zero pad )
1045+ 7051 3A 64                        dw          I                   //      i
1046+ 7053 3A 64 B2 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 7057 78 68
1047+ 7059 F5 63                        dw          ZBRANCH             //
1048+ 705B 06 00                        dw              Accept_Endif_4 - $
1049+ 705D 00 64                        dw                  C_LEAVE     //              leave
1050+ 705F 06 00                        dw                  Accept_Leave - $
1051+ 7061              Accept_Endif_4:                                 //      endif
1052+ 7061                                                              // loop
1053+ 7061 E0 63                        dw      C_LOOP
1054+ 7063 78 FF                        dw      Accept_Loop - $
1055+ 7065              Accept_Leave:
1056+ 7065 25 69 F9 6B                  dw      SWAP, SUBTRACT          // swap -
1057+ 7069 BF 68                        dw      ONE_PLUS                // 1+
1058+ 706B 2C 69 A8 6B                  dw      DUP, SPAN, STORE        // dup span !
1058+ 706F A7 69
1059+ 7071 53 68                        dw      EXIT                    // ;
1060+ 7073
1061+ 7073              //  ______________________________________________________________________
1062+ 7073              //
1063+ 7073              // expect      a n --
1064+ 7073              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 7073              // CR stops input. A 'nul' is added as trailer.
1066+ 7073              // n2 is the string length. n2 is kept in span user variable also.
1067+ 7073              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 7073              //              dw      ACCEPT, DROP            // accept drop
1069+ 7073              //              dw      EXIT                    // ;
1070+ 7073
1071+ 7073              //  ______________________________________________________________________
1072+ 7073              //
1073+ 7073              // query        --
1074+ 7073              // Accept at most 80 character from console. CR stops.
1075+ 7073              // Text is stored in TIB. Variable IN is zeroed.
1076+ 7073                              Colon_Def QUERY, "QUERY", is_normal
1076+ 7073             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 7073             >
1076+ 7073             >Dict_Ptr        defl    $
1076+ 7073             >
1076+ 7073             >//              ______________________________________________________________________
1076+ 7073             >//              Heap part
1076+ 7073             >
1076+ 7073             >
1076+ 7073             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EF             >
1076+ E7EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EF             >Latest_Definition defl  Heap_Ptr
1076+ E7EF             >
1076+ E7EF             >                // dummy db directives used to calculate length of namec
1076+ E7EF 51 55 45 52 >                db      "QUERY"
1076+ E7F3 59          >
1076+ E7F4             >len_NFA         defl    $ - temp_NFA
1076+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EF             >
1076+ E7EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7F0 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F4 59          >
1076+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F4 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F5             >
1076+ E7F5 E4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F7             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F7             >
1076+ E7F7             >mirror_Ptr      defl    $
1076+ E7F7             >
1076+ E7F7 75 70       >                dw      Dict_Ptr + 2        // xt
1076+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F9             >
1076+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F9             >
1076+ E7F9             >//              ______________________________________________________________________
1076+ E7F9             >//              Dictionary part
1076+ E7F9             >
1076+ E7F9             >                org     Dict_Ptr
1076+ 7073             >
1076+ 7073 F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 7075             >
1076+ 7075             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 7075 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 7078             >
1076+ 7078             >
1076+ 7078             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 7078             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 7078             >
1076+ 7078             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 7078 FA 6A 9D 69                  dw      TIB, FETCH              // tib @
1078+ 707C A3 63 50 00                  dw      LIT, 80                 // 80
1079+ 7080 CA 6F 11 69                  dw      ACCEPT, DROP            // accept drop
1080+ 7084 95 6A 3C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 7088 A7 69
1081+ 708A 53 68                        dw      EXIT                    // ;
1082+ 708C
1083+ 708C              //  ______________________________________________________________________
1084+ 708C              //
1085+ 708C              // fill        a n c --
1086+ 708C              // If n > 0, fills n locations starting from address a with the value c.
1087+ 708C                              New_Def FILL, "FILL", is_code, is_normal
1087+ 708C             >
1087+ 708C             >Dict_Ptr        defl    $
1087+ 708C             >
1087+ 708C             >//              ______________________________________________________________________
1087+ 708C             >//              Heap part
1087+ 708C             >
1087+ 708C             >
1087+ 708C             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F9             >
1087+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F9             >Latest_Definition defl  Heap_Ptr
1087+ E7F9             >
1087+ E7F9             >                // dummy db directives used to calculate length of namec
1087+ E7F9 46 49 4C 4C >                db      "FILL"
1087+ E7FD             >len_NFA         defl    $ - temp_NFA
1087+ E7FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F9             >
1087+ E7F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7FA 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FE             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FD CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FE             >
1087+ E7FE EF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E800             >Prev_Ptr        defl    Heap_Ptr
1087+ E800             >
1087+ E800             >mirror_Ptr      defl    $
1087+ E800             >
1087+ E800 8E 70       >                dw      Dict_Ptr + 2        // xt
1087+ E802             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E802             >
1087+ E802             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E802             >
1087+ E802             >//              ______________________________________________________________________
1087+ E802             >//              Dictionary part
1087+ E802             >
1087+ E802             >                org     Dict_Ptr
1087+ 708C             >
1087+ 708C 00 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 708E             >
1087+ 708E             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 708E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 708E ~           >
1087+ 708E ~           >
1087+ 708E             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 708E             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 708E             >
1087+ 708E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 708E D9                           exx
1089+ 708F D1                           pop     de                  // de has character
1090+ 7090 C1                           pop     bc                  // bc has counter
1091+ 7091 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 7092              Fill_Loop:
1093+ 7092 78                               ld      a, b
1094+ 7093 B1                               or      c
1095+ 7094 28 05                        jr      z, Fill_While_End
1096+ 7096 73                               ld      (hl), e
1097+ 7097 0B                               dec     bc
1098+ 7098 23                               inc     hl
1099+ 7099 18 F7                        jr      Fill_Loop
1100+ 709B              Fill_While_End:
1101+ 709B D9                           exx
1102+ 709C                              next
1102+ 709C DD E9       >                jp      (ix)
1103+ 709E
1104+ 709E              //  ______________________________________________________________________
1105+ 709E              //
1106+ 709E              // erase        a n --
1107+ 709E              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 709E                              Colon_Def ERASE, "ERASE", is_normal
1108+ 709E             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 709E             >
1108+ 709E             >Dict_Ptr        defl    $
1108+ 709E             >
1108+ 709E             >//              ______________________________________________________________________
1108+ 709E             >//              Heap part
1108+ 709E             >
1108+ 709E             >
1108+ 709E             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E802             >
1108+ E802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E802             >Latest_Definition defl  Heap_Ptr
1108+ E802             >
1108+ E802             >                // dummy db directives used to calculate length of namec
1108+ E802 45 52 41 53 >                db      "ERASE"
1108+ E806 45          >
1108+ E807             >len_NFA         defl    $ - temp_NFA
1108+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E802             >
1108+ E802 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E803 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E807 45          >
1108+ E808             >                org     $-1                 // alter last byte of Name just above to set
1108+ E807 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E808             >
1108+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E80A             >Prev_Ptr        defl    Heap_Ptr
1108+ E80A             >
1108+ E80A             >mirror_Ptr      defl    $
1108+ E80A             >
1108+ E80A A0 70       >                dw      Dict_Ptr + 2        // xt
1108+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E80C             >
1108+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E80C             >
1108+ E80C             >//              ______________________________________________________________________
1108+ E80C             >//              Dictionary part
1108+ E80C             >
1108+ E80C             >                org     Dict_Ptr
1108+ 709E             >
1108+ 709E 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 70A0             >
1108+ 70A0             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 70A0 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 70A3             >
1108+ 70A3             >
1108+ 70A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 70A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 70A3             >
1108+ 70A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 70A3 95 6A 8E 70                  dw      ZERO, FILL              // 0 fill
1110+ 70A7 53 68                        dw      EXIT                    // ;
1111+ 70A9
1112+ 70A9              //  ______________________________________________________________________
1113+ 70A9              //
1114+ 70A9              // blank        a n --
1115+ 70A9              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 70A9                              Colon_Def BLANK, "BLANK", is_normal
1116+ 70A9             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 70A9             >
1116+ 70A9             >Dict_Ptr        defl    $
1116+ 70A9             >
1116+ 70A9             >//              ______________________________________________________________________
1116+ 70A9             >//              Heap part
1116+ 70A9             >
1116+ 70A9             >
1116+ 70A9             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E80C             >
1116+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E80C             >Latest_Definition defl  Heap_Ptr
1116+ E80C             >
1116+ E80C             >                // dummy db directives used to calculate length of namec
1116+ E80C 42 4C 41 4E >                db      "BLANK"
1116+ E810 4B          >
1116+ E811             >len_NFA         defl    $ - temp_NFA
1116+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E80C             >
1116+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80D 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E811 4B          >
1116+ E812             >                org     $-1                 // alter last byte of Name just above to set
1116+ E811 CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E812             >
1116+ E812 02 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E814             >Prev_Ptr        defl    Heap_Ptr
1116+ E814             >
1116+ E814             >mirror_Ptr      defl    $
1116+ E814             >
1116+ E814 AB 70       >                dw      Dict_Ptr + 2        // xt
1116+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E816             >
1116+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E816             >
1116+ E816             >//              ______________________________________________________________________
1116+ E816             >//              Dictionary part
1116+ E816             >
1116+ E816             >                org     Dict_Ptr
1116+ 70A9             >
1116+ 70A9 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 70AB             >
1116+ 70AB             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 70AB CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 70AE             >
1116+ 70AE             >
1116+ 70AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 70AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 70AE             >
1116+ 70AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 70AE B8 6A 8E 70                  dw      BL, FILL                // bl fill
1118+ 70B2 53 68                        dw      EXIT                    // ;
1119+ 70B4
1120+ 70B4              //  ______________________________________________________________________
1121+ 70B4              //
1122+ 70B4              // hold         c --
1123+ 70B4              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 70B4                              Colon_Def HOLD, "HOLD", is_normal
1124+ 70B4             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 70B4             >
1124+ 70B4             >Dict_Ptr        defl    $
1124+ 70B4             >
1124+ 70B4             >//              ______________________________________________________________________
1124+ 70B4             >//              Heap part
1124+ 70B4             >
1124+ 70B4             >
1124+ 70B4             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E816             >
1124+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E816             >Latest_Definition defl  Heap_Ptr
1124+ E816             >
1124+ E816             >                // dummy db directives used to calculate length of namec
1124+ E816 48 4F 4C 44 >                db      "HOLD"
1124+ E81A             >len_NFA         defl    $ - temp_NFA
1124+ E81A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E816             >
1124+ E816 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E817 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E81B             >                org     $-1                 // alter last byte of Name just above to set
1124+ E81A C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E81B             >
1124+ E81B 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81D             >Prev_Ptr        defl    Heap_Ptr
1124+ E81D             >
1124+ E81D             >mirror_Ptr      defl    $
1124+ E81D             >
1124+ E81D B6 70       >                dw      Dict_Ptr + 2        // xt
1124+ E81F             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81F             >
1124+ E81F             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81F             >
1124+ E81F             >//              ______________________________________________________________________
1124+ E81F             >//              Dictionary part
1124+ E81F             >
1124+ E81F             >                org     Dict_Ptr
1124+ 70B4             >
1124+ 70B4 1D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 70B6             >
1124+ 70B6             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 70B6 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 70B9             >
1124+ 70B9             >
1124+ 70B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 70B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 70B9             >
1124+ 70B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 70B9 B1 6A                        dw      NEG_ONE                 // -1
1126+ 70BB 84 6B 85 69                  dw      HLD, PLUSSTORE          // hld +!
1127+ 70BF 84 6B 9D 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 70C3 BB 69
1128+ 70C5 53 68                        dw      EXIT                    // ;
1129+ 70C7
1130+ 70C7              //  ______________________________________________________________________
1131+ 70C7              //
1132+ 70C7              // pad         -- a
1133+ 70C7              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 70C7                              Colon_Def PAD, "PAD", is_normal
1134+ 70C7             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 70C7             >
1134+ 70C7             >Dict_Ptr        defl    $
1134+ 70C7             >
1134+ 70C7             >//              ______________________________________________________________________
1134+ 70C7             >//              Heap part
1134+ 70C7             >
1134+ 70C7             >
1134+ 70C7             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81F             >
1134+ E81F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81F             >Latest_Definition defl  Heap_Ptr
1134+ E81F             >
1134+ E81F             >                // dummy db directives used to calculate length of namec
1134+ E81F 50 41 44    >                db      "PAD"
1134+ E822             >len_NFA         defl    $ - temp_NFA
1134+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81F             >
1134+ E81F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E820 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E823             >                org     $-1                 // alter last byte of Name just above to set
1134+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E823             >
1134+ E823 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E825             >Prev_Ptr        defl    Heap_Ptr
1134+ E825             >
1134+ E825             >mirror_Ptr      defl    $
1134+ E825             >
1134+ E825 C9 70       >                dw      Dict_Ptr + 2        // xt
1134+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E827             >
1134+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E827             >
1134+ E827             >//              ______________________________________________________________________
1134+ E827             >//              Dictionary part
1134+ E827             >
1134+ E827             >                org     Dict_Ptr
1134+ 70C7             >
1134+ 70C7 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 70C9             >
1134+ 70C9             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 70C9 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 70CC             >
1134+ 70CC             >
1134+ 70CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 70CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 70CC             >
1134+ 70CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 70CC BA 6B                        dw      HERE                    // here
1136+ 70CE A3 63 44 00                  dw      LIT, 68                 // 68
1137+ 70D2 A6 68                        dw      PLUS                    // +
1138+ 70D4 53 68                        dw      EXIT                    // ;
1139+ 70D6
1140+ 70D6              //  ______________________________________________________________________
1141+ 70D6              //
1142+ 70D6              // word         c -- a
1143+ 70D6              // reads characters from input streams until it encouners a c delimiter.
1144+ 70D6              // Stores that packet so it starts from HERE
1145+ 70D6              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 70D6              // Other occurrences of c are ignored.
1147+ 70D6              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 70D6              // Otherwise text is taken from the disk-block given by BLK.
1149+ 70D6              // "in" variable is incremented of the number of character read.
1150+ 70D6              // The number of characters read is given by ENCLOSE.
1151+ 70D6                              Colon_Def WORD, "WORD", is_normal
1151+ 70D6             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 70D6             >
1151+ 70D6             >Dict_Ptr        defl    $
1151+ 70D6             >
1151+ 70D6             >//              ______________________________________________________________________
1151+ 70D6             >//              Heap part
1151+ 70D6             >
1151+ 70D6             >
1151+ 70D6             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E827             >
1151+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E827             >Latest_Definition defl  Heap_Ptr
1151+ E827             >
1151+ E827             >                // dummy db directives used to calculate length of namec
1151+ E827 57 4F 52 44 >                db      "WORD"
1151+ E82B             >len_NFA         defl    $ - temp_NFA
1151+ E82B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E827             >
1151+ E827 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E828 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E82C             >                org     $-1                 // alter last byte of Name just above to set
1151+ E82B C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E82C             >
1151+ E82C 1F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82E             >Prev_Ptr        defl    Heap_Ptr
1151+ E82E             >
1151+ E82E             >mirror_Ptr      defl    $
1151+ E82E             >
1151+ E82E D8 70       >                dw      Dict_Ptr + 2        // xt
1151+ E830             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E830             >
1151+ E830             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E830             >
1151+ E830             >//              ______________________________________________________________________
1151+ E830             >//              Dictionary part
1151+ E830             >
1151+ E830             >                org     Dict_Ptr
1151+ 70D6             >
1151+ 70D6 2E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 70D8             >
1151+ 70D8             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 70D8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 70DB             >
1151+ 70DB             >
1151+ 70DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 70DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 70DB             >
1151+ 70DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 70DB 36 6B 9D 69                  dw      BLK, FETCH              // blk @
1153+ 70DF                                                              // if
1154+ 70DF F5 63                        dw      ZBRANCH
1155+ 70E1 0C 00                        dw      Word_Else - $
1156+ 70E3 36 6B 9D 69                  dw          BLK, FETCH          //      blk @
1157+ 70E7 90 79                        dw          BLOCK               //      block ( forward )
1158+ 70E9                                                              // else
1159+ 70E9 E8 63                        dw      BRANCH
1160+ 70EB 06 00                        dw      Word_Endif - $
1161+ 70ED              Word_Else:
1162+ 70ED FA 6A 9D 69                  dw         TIB, FETCH           //      tib @
1163+ 70F1              Word_Endif:                                     // endif
1164+ 70F1 3C 6B 9D 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 70F5 A6 68
1165+ 70F7 25 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 70FB BA 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 70FF 22 00 AB 70
1167+ 7103 3C 6B 85 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 7107 08 69 F9 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 710B 5D 68
1169+ 710D 73 68 BA 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 7111 BB 69
1170+ 7113 A6 68                        dw      PLUS                    // +
1171+ 7115 BA 6B BF 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 7119 68 68
1172+ 711B 94 67                        dw      CMOVE                   // cmove
1173+ 711D BA 6B                        dw      HERE                    // here
1174+ 711F 53 68                        dw      EXIT                    // ;
1175+ 7121
1176+ 7121              //  ______________________________________________________________________
1177+ 7121              //
1178+ 7121              // (.")         --
1179+ 7121              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 7121                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 7121             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 7121             >
1180+ 7121             >Dict_Ptr        defl    $
1180+ 7121             >
1180+ 7121             >//              ______________________________________________________________________
1180+ 7121             >//              Heap part
1180+ 7121             >
1180+ 7121             >
1180+ 7121             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E830             >
1180+ E830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E830             >Latest_Definition defl  Heap_Ptr
1180+ E830             >
1180+ E830             >                // dummy db directives used to calculate length of namec
1180+ E830 28 2E 22 29 >                db      '(.")'
1180+ E834             >len_NFA         defl    $ - temp_NFA
1180+ E834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E830             >
1180+ E830 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E831 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E835             >                org     $-1                 // alter last byte of Name just above to set
1180+ E834 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E835             >
1180+ E835 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E837             >Prev_Ptr        defl    Heap_Ptr
1180+ E837             >
1180+ E837             >mirror_Ptr      defl    $
1180+ E837             >
1180+ E837 23 71       >                dw      Dict_Ptr + 2        // xt
1180+ E839             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E839             >
1180+ E839             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E839             >
1180+ E839             >//              ______________________________________________________________________
1180+ E839             >//              Dictionary part
1180+ E839             >
1180+ E839             >                org     Dict_Ptr
1180+ 7121             >
1180+ 7121 37 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 7123             >
1180+ 7123             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 7123 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 7126             >
1180+ 7126             >
1180+ 7126             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 7126             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 7126             >
1180+ 7126             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 7126 73 68 32 6F                  dw      R_OP, COUNT             // r count
1182+ 712A 2C 69 BF 68                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 712E 68 68 A6 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 7132 5D 68
1184+ 7134 86 6F                        dw      TYPE                    // type
1185+ 7136 53 68                        dw      EXIT                    // ;
1186+ 7138
1187+ 7138              //  ______________________________________________________________________
1188+ 7138              //
1189+ 7138              // char         -- c
1190+ 7138              // get first character from next input word
1191+ 7138                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 7138             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 7138             >
1191+ 7138             >Dict_Ptr        defl    $
1191+ 7138             >
1191+ 7138             >//              ______________________________________________________________________
1191+ 7138             >//              Heap part
1191+ 7138             >
1191+ 7138             >
1191+ 7138             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E839             >
1191+ E839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E839             >Latest_Definition defl  Heap_Ptr
1191+ E839             >
1191+ E839             >                // dummy db directives used to calculate length of namec
1191+ E839 43 48 41 52 >                db      "CHAR"
1191+ E83D             >len_NFA         defl    $ - temp_NFA
1191+ E83D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E839             >
1191+ E839 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E83A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83E             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83D D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83E             >
1191+ E83E 30 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E840             >Prev_Ptr        defl    Heap_Ptr
1191+ E840             >
1191+ E840             >mirror_Ptr      defl    $
1191+ E840             >
1191+ E840 3A 71       >                dw      Dict_Ptr + 2        // xt
1191+ E842             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E842             >
1191+ E842             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E842             >
1191+ E842             >//              ______________________________________________________________________
1191+ E842             >//              Dictionary part
1191+ E842             >
1191+ E842             >                org     Dict_Ptr
1191+ 7138             >
1191+ 7138 40 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 713A             >
1191+ 713A             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 713A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 713D             >
1191+ 713D             >
1191+ 713D             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 713D             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 713D             >
1191+ 713D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 713D B8 6A D8 70                  dw      BL, WORD                // bl word
1193+ 7141 BF 68 B2 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 7145 53 68                        dw      EXIT                    // ;
1195+ 7147
1196+ 7147              //  ______________________________________________________________________
1197+ 7147              //
1198+ 7147              // ,"           --
1199+ 7147              // compiles a string terminated by " as a counted string from next input stream
1200+ 7147                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 7147             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 7147             >
1200+ 7147             >Dict_Ptr        defl    $
1200+ 7147             >
1200+ 7147             >//              ______________________________________________________________________
1200+ 7147             >//              Heap part
1200+ 7147             >
1200+ 7147             >
1200+ 7147             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E842             >
1200+ E842             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E842             >Latest_Definition defl  Heap_Ptr
1200+ E842             >
1200+ E842             >                // dummy db directives used to calculate length of namec
1200+ E842 2C 22       >                db      ',"'
1200+ E844             >len_NFA         defl    $ - temp_NFA
1200+ E844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E842             >
1200+ E842 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E843 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E845             >                org     $-1                 // alter last byte of Name just above to set
1200+ E844 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E845             >
1200+ E845 39 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E847             >Prev_Ptr        defl    Heap_Ptr
1200+ E847             >
1200+ E847             >mirror_Ptr      defl    $
1200+ E847             >
1200+ E847 49 71       >                dw      Dict_Ptr + 2        // xt
1200+ E849             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E849             >
1200+ E849             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E849             >
1200+ E849             >//              ______________________________________________________________________
1200+ E849             >//              Dictionary part
1200+ E849             >
1200+ E849             >                org     Dict_Ptr
1200+ 7147             >
1200+ 7147 47 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 7149             >
1200+ 7149             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7149 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 714C             >
1200+ 714C             >
1200+ 714C             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 714C             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 714C             >
1200+ 714C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 714C A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 7150 D8 70                        dw      WORD                    // word
1203+ 7152 B2 69 BF 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 7156 C5 6B                        dw      ALLOT                   // allot
1205+ 7158 95 6A DF 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 715C 53 68                        dw      EXIT
1207+ 715E
1208+ 715E              //  ______________________________________________________________________
1209+ 715E              //
1210+ 715E              // .c           c --
1211+ 715E              // intermediate general purpose string builder, used by ." and .(
1212+ 715E                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 715E             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 715E             >
1212+ 715E             >Dict_Ptr        defl    $
1212+ 715E             >
1212+ 715E             >//              ______________________________________________________________________
1212+ 715E             >//              Heap part
1212+ 715E             >
1212+ 715E             >
1212+ 715E             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E849             >
1212+ E849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E849             >Latest_Definition defl  Heap_Ptr
1212+ E849             >
1212+ E849             >                // dummy db directives used to calculate length of namec
1212+ E849 2E 43       >                db      ".C"
1212+ E84B             >len_NFA         defl    $ - temp_NFA
1212+ E84B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E849             >
1212+ E849 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E84A 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E84C             >                org     $-1                 // alter last byte of Name just above to set
1212+ E84B C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E84C             >
1212+ E84C 42 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84E             >Prev_Ptr        defl    Heap_Ptr
1212+ E84E             >
1212+ E84E             >mirror_Ptr      defl    $
1212+ E84E             >
1212+ E84E 60 71       >                dw      Dict_Ptr + 2        // xt
1212+ E850             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E850             >
1212+ E850             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E850             >
1212+ E850             >//              ______________________________________________________________________
1212+ E850             >//              Dictionary part
1212+ E850             >
1212+ E850             >                org     Dict_Ptr
1212+ 715E             >
1212+ 715E 4E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 7160             >
1212+ 7160             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 7160 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 7163             >
1212+ 7163             >
1212+ 7163             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 7163             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 7163             >
1212+ 7163             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 7163 60 6B 9D 69                  dw      STATE, FETCH            // state @
1214+ 7167                                                              // if
1215+ 7167 F5 63                        dw      ZBRANCH
1216+ 7169 12 00                        dw      Dot_C_Else - $
1217+ 716B 66 6E 23 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 716F D8 70 B2 69                  dw          WORD, CFETCH        //      word c@
1219+ 7173 BF 68 C5 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 7177                                                              // else
1221+ 7177 E8 63                        dw      BRANCH
1222+ 7179 08 00                        dw      Dot_C_Endif - $
1223+ 717B              Dot_C_Else:
1224+ 717B D8 70 32 6F                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 717F 86 6F
1225+ 7181              Dot_C_Endif:                                    // endif
1226+ 7181 53 68                        dw      EXIT                    ;
1227+ 7183
1228+ 7183              //  ______________________________________________________________________
1229+ 7183              //
1230+ 7183              // ."           c --
1231+ 7183                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 7183             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 7183             >
1231+ 7183             >Dict_Ptr        defl    $
1231+ 7183             >
1231+ 7183             >//              ______________________________________________________________________
1231+ 7183             >//              Heap part
1231+ 7183             >
1231+ 7183             >
1231+ 7183             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E850             >
1231+ E850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E850             >Latest_Definition defl  Heap_Ptr
1231+ E850             >
1231+ E850             >                // dummy db directives used to calculate length of namec
1231+ E850 2E 22       >                db      '."'
1231+ E852             >len_NFA         defl    $ - temp_NFA
1231+ E852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E850             >
1231+ E850 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E851 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E853             >                org     $-1                 // alter last byte of Name just above to set
1231+ E852 A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E853             >
1231+ E853 49 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E855             >Prev_Ptr        defl    Heap_Ptr
1231+ E855             >
1231+ E855             >mirror_Ptr      defl    $
1231+ E855             >
1231+ E855 85 71       >                dw      Dict_Ptr + 2        // xt
1231+ E857             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E857             >
1231+ E857             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E857             >
1231+ E857             >//              ______________________________________________________________________
1231+ E857             >//              Dictionary part
1231+ E857             >
1231+ E857             >                org     Dict_Ptr
1231+ 7183             >
1231+ 7183 55 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 7185             >
1231+ 7185             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 7185 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 7188             >
1231+ 7188             >
1231+ 7188             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 7188             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 7188             >
1231+ 7188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 7188 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 718C 60 71                        dw      DOT_C                   // [compile] .c
1234+ 718E 53 68                        dw      EXIT                    // ; immediate
1235+ 7190
1236+ 7190              //  ______________________________________________________________________
1237+ 7190              //
1238+ 7190              // .(           c --
1239+ 7190                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 7190             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 7190             >
1239+ 7190             >Dict_Ptr        defl    $
1239+ 7190             >
1239+ 7190             >//              ______________________________________________________________________
1239+ 7190             >//              Heap part
1239+ 7190             >
1239+ 7190             >
1239+ 7190             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E857             >
1239+ E857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E857             >Latest_Definition defl  Heap_Ptr
1239+ E857             >
1239+ E857             >                // dummy db directives used to calculate length of namec
1239+ E857 2E 28       >                db      ".("
1239+ E859             >len_NFA         defl    $ - temp_NFA
1239+ E859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E857             >
1239+ E857 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E858 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E85A             >                org     $-1                 // alter last byte of Name just above to set
1239+ E859 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E85A             >
1239+ E85A 50 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E85C             >Prev_Ptr        defl    Heap_Ptr
1239+ E85C             >
1239+ E85C             >mirror_Ptr      defl    $
1239+ E85C             >
1239+ E85C 92 71       >                dw      Dict_Ptr + 2        // xt
1239+ E85E             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85E             >
1239+ E85E             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85E             >
1239+ E85E             >//              ______________________________________________________________________
1239+ E85E             >//              Dictionary part
1239+ E85E             >
1239+ E85E             >                org     Dict_Ptr
1239+ 7190             >
1239+ 7190 5C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 7192             >
1239+ 7192             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 7192 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 7195             >
1239+ 7195             >
1239+ 7195             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 7195             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 7195             >
1239+ 7195             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 7195 A3 63 29 00                  dw      LIT, ")"                // [char] )
1241+ 7199 60 71                        dw      DOT_C                   // [compile] .c
1242+ 719B 53 68                        dw      EXIT                    // ; immediate
1243+ 719D
1244+ 719D              //  ______________________________________________________________________
1245+ 719D              //
1246+ 719D              // (sgn)        a -- a f
1247+ 719D              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 719D              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 719D              // called by NUMBER and (EXP)
1250+ 719D                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 719D             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 719D             >
1250+ 719D             >Dict_Ptr        defl    $
1250+ 719D             >
1250+ 719D             >//              ______________________________________________________________________
1250+ 719D             >//              Heap part
1250+ 719D             >
1250+ 719D             >
1250+ 719D             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85E             >
1250+ E85E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85E             >Latest_Definition defl  Heap_Ptr
1250+ E85E             >
1250+ E85E             >                // dummy db directives used to calculate length of namec
1250+ E85E 28 53 47 4E >                db      "(SGN)"
1250+ E862 29          >
1250+ E863             >len_NFA         defl    $ - temp_NFA
1250+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85E             >
1250+ E85E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85F 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E863 29          >
1250+ E864             >                org     $-1                 // alter last byte of Name just above to set
1250+ E863 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E864             >
1250+ E864 57 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E866             >Prev_Ptr        defl    Heap_Ptr
1250+ E866             >
1250+ E866             >mirror_Ptr      defl    $
1250+ E866             >
1250+ E866 9F 71       >                dw      Dict_Ptr + 2        // xt
1250+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E868             >
1250+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E868             >
1250+ E868             >//              ______________________________________________________________________
1250+ E868             >//              Dictionary part
1250+ E868             >
1250+ E868             >                org     Dict_Ptr
1250+ 719D             >
1250+ 719D 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 719F             >
1250+ 719F             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 719F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 71A2             >
1250+ 71A2             >
1250+ 71A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 71A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 71A2             >
1250+ 71A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 71A2 2C 69 BF 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 71A6 B2 69
1252+ 71A8 2C 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 71AC 2D 00 05 6C
1253+ 71B0                                                              // if
1254+ 71B0 F5 63                        dw      ZBRANCH
1255+ 71B2 12 00                        dw      CSgn_Else_0 - $
1256+ 71B4 11 69                        dw          DROP                //      drop
1257+ 71B6 BF 68                        dw          ONE_PLUS            //      1+
1258+ 71B8 9C 6A 6C 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 71BC 85 69
1259+ 71BE 9C 6A                        dw          ONE                 //      1
1260+ 71C0                                                              // else
1261+ 71C0 E8 63                        dw      BRANCH
1262+ 71C2 16 00                        dw      CSgn_Endif_0 - $
1263+ 71C4              CSgn_Else_0:
1264+ 71C4 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 71C8 05 6C
1265+ 71CA                                                              //      if
1266+ 71CA F5 63                        dw          ZBRANCH
1267+ 71CC 0A 00                        dw          CSgn_Endif_1 - $
1268+ 71CE BF 68                        dw              ONE_PLUS        //          1+
1269+ 71D0 9C 6A 6C 6B                  dw              ONE, DPL        //          1 dpl
1270+ 71D4 85 69                        dw              PLUSSTORE       //          +!
1271+ 71D6              CSgn_Endif_1                                    //      endif
1272+ 71D6 95 6A                        dw          ZERO                //      0
1273+ 71D8              CSgn_Endif_0:                                   // endif
1274+ 71D8 53 68                        dw      EXIT
1275+ 71DA
1276+ 71DA              //  ______________________________________________________________________
1277+ 71DA              //
1278+ 71DA              // (number)     d a -- d1 a1
1279+ 71DA              // using the current BASE parse characters stored in address a
1280+ 71DA              // accumulating a double precision integer d
1281+ 71DA              // the process stops at the first not-convertible character
1282+ 71DA              // A double-number is kept in CPU registers as HLDE.
1283+ 71DA              // On the stack a double number is treated as two single numbers
1284+ 71DA              // where HL is on the top of the stack and DE is the second from top,
1285+ 71DA              // so in the stack memory it appears as LHED.
1286+ 71DA              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 71DA                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 71DA             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 71DA             >
1287+ 71DA             >Dict_Ptr        defl    $
1287+ 71DA             >
1287+ 71DA             >//              ______________________________________________________________________
1287+ 71DA             >//              Heap part
1287+ 71DA             >
1287+ 71DA             >
1287+ 71DA             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E868             >
1287+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E868             >Latest_Definition defl  Heap_Ptr
1287+ E868             >
1287+ E868             >                // dummy db directives used to calculate length of namec
1287+ E868 28 4E 55 4D >                db      "(NUMBER)"
1287+ E86C 42 45 52 29 >
1287+ E870             >len_NFA         defl    $ - temp_NFA
1287+ E870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E868             >
1287+ E868 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E869 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86D 42 45 52 29 >
1287+ E871             >                org     $-1                 // alter last byte of Name just above to set
1287+ E870 A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E871             >
1287+ E871 5E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E873             >Prev_Ptr        defl    Heap_Ptr
1287+ E873             >
1287+ E873             >mirror_Ptr      defl    $
1287+ E873             >
1287+ E873 DC 71       >                dw      Dict_Ptr + 2        // xt
1287+ E875             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E875             >
1287+ E875             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E875             >
1287+ E875             >//              ______________________________________________________________________
1287+ E875             >//              Dictionary part
1287+ E875             >
1287+ E875             >                org     Dict_Ptr
1287+ 71DA             >
1287+ 71DA 73 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 71DC             >
1287+ 71DC             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 71DC CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 71DF             >
1287+ 71DF             >
1287+ 71DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 71DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 71DF             >
1287+ 71DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 71DF                                                              // begin
1289+ 71DF              CNumber_Begin:
1290+ 71DF BF 68                        dw          ONE_PLUS            //      1+
1291+ 71E1 2C 69 5D 68                  dw          DUP, TO_R           //      dup >r
1292+ 71E5 B2 69                        dw          CFETCH              //      @
1293+ 71E7 66 6B 9D 69                  dw          BASE, FETCH         //      base @
1294+ 71EB 4D 64                        dw          DIGIT               //      digit
1295+ 71ED                                                              // while
1296+ 71ED F5 63                        dw      ZBRANCH
1297+ 71EF 2C 00                        dw      CNumber_While_end - $
1298+ 71F1 25 69                        dw          SWAP                //      swap
1299+ 71F3 66 6B 9D 69                  dw          BASE, FETCH         //      base @
1300+ 71F7 B8 67                        dw          UM_MUL              //      um*
1301+ 71F9 11 69 33 69                  dw          DROP, ROT           //      drop rot
1302+ 71FD 66 6B 9D 69                  dw          BASE, FETCH         //      base @
1303+ 7201 B8 67                        dw          UM_MUL              //      um*
1304+ 7203 B0 68                        dw          DPLUS               //      d+
1305+ 7205 6C 6B 9D 69                  dw          DPL, FETCH          //      dpl @
1306+ 7209 BF 68                        dw          ONE_PLUS            //      1+
1307+ 720B                                                              //      if
1308+ 720B F5 63                        dw          ZBRANCH
1309+ 720D 08 00                        dw          CNumber_Endif - $
1310+ 720F 9C 6A 6C 6B                  dw              ONE, DPL        //          1 dpl
1311+ 7213 85 69                        dw              PLUSSTORE       //          +!
1312+ 7215              CNumber_Endif:                                  //      endif
1313+ 7215 68 68                        dw             R_TO             //      r>  ( balance rp )
1314+ 7217 E8 63                        dw      BRANCH
1315+ 7219 C6 FF                        dw      CNumber_Begin - $
1316+ 721B              CNumber_While_end:                              // repeat
1317+ 721B 68 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 721D 53 68                        dw      EXIT                    // ;
1319+ 721F
1320+ 721F              //  ______________________________________________________________________
1321+ 721F              //
1322+ 721F              // (prefix)
1323+ 721F                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 721F             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 721F             >
1323+ 721F             >Dict_Ptr        defl    $
1323+ 721F             >
1323+ 721F             >//              ______________________________________________________________________
1323+ 721F             >//              Heap part
1323+ 721F             >
1323+ 721F             >
1323+ 721F             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E875             >
1323+ E875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E875             >Latest_Definition defl  Heap_Ptr
1323+ E875             >
1323+ E875             >                // dummy db directives used to calculate length of namec
1323+ E875 28 50 52 45 >                db      "(PREFIX)"
1323+ E879 46 49 58 29 >
1323+ E87D             >len_NFA         defl    $ - temp_NFA
1323+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E875             >
1323+ E875 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E876 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E87A 46 49 58 29 >
1323+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87D A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87E             >
1323+ E87E 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E880             >Prev_Ptr        defl    Heap_Ptr
1323+ E880             >
1323+ E880             >mirror_Ptr      defl    $
1323+ E880             >
1323+ E880 21 72       >                dw      Dict_Ptr + 2        // xt
1323+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E882             >
1323+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E882             >
1323+ E882             >//              ______________________________________________________________________
1323+ E882             >//              Dictionary part
1323+ E882             >
1323+ E882             >                org     Dict_Ptr
1323+ 721F             >
1323+ 721F 80 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 7221             >
1323+ 7221             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 7221 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 7224             >
1323+ 7224             >
1323+ 7224             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 7224             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 7224             >
1323+ 7224             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 7224 2C 69 BF 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 7228 B2 69
1325+ 722A 2C 69 5D 68                  dw      DUP, TO_R               // dup >r
1326+ 722E A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 7232 05 6C
1327+ 7234                                                              // if
1328+ 7234 F5 63                        dw      ZBRANCH
1329+ 7236 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 7238 BF 68                        dw          ONE_PLUS            //      1+
1331+ 723A A3 63 10 00                  dw          LIT, 16
1332+ 723E 66 6B A7 69                  dw          BASE, STORE         //      16 base !
1333+ 7242              CPrefix_Endif_0:                                // endif
1334+ 7242 68 68                        dw      R_TO                    // r>
1335+ 7244 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 7248 05 6C
1336+ 724A                                                              // if
1337+ 724A F5 63                        dw      ZBRANCH
1338+ 724C 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 724E BF 68                        dw          ONE_PLUS            //      1+
1340+ 7250 A3 6A                        dw          TWO
1341+ 7252 66 6B A7 69                  dw          BASE, STORE         //      2 base !
1342+ 7256              CPrefix_Endif_1:                                // endif
1343+ 7256 53 68                        dw      EXIT
1344+ 7258
1345+ 7258              //  ______________________________________________________________________
1346+ 7258
1347+ 7258                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 7258             >
1347+ 7258             >Dict_Ptr        defl    $
1347+ 7258             >
1347+ 7258             >//              ______________________________________________________________________
1347+ 7258             >//              Heap part
1347+ 7258             >
1347+ 7258             >
1347+ 7258             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E882             >
1347+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E882             >Latest_Definition defl  Heap_Ptr
1347+ E882             >
1347+ E882             >                // dummy db directives used to calculate length of namec
1347+ E882 50 44 4F 4D >                db      "PDOM"
1347+ E886             >len_NFA         defl    $ - temp_NFA
1347+ E886             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E882             >
1347+ E882 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E883 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E887             >                org     $-1                 // alter last byte of Name just above to set
1347+ E886 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E887             >
1347+ E887 75 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E889             >Prev_Ptr        defl    Heap_Ptr
1347+ E889             >
1347+ E889             >mirror_Ptr      defl    $
1347+ E889             >
1347+ E889 5A 72       >                dw      Dict_Ptr + 2        // xt
1347+ E88B             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E88B             >
1347+ E88B             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E88B             >
1347+ E88B             >//              ______________________________________________________________________
1347+ E88B             >//              Dictionary part
1347+ E88B             >
1347+ E88B             >                org     Dict_Ptr
1347+ 7258             >
1347+ 7258 89 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 725A             >
1347+ 725A             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 725A CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 725D             >
1347+ 725D             >
1347+ 725D             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 725D             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 725D             >
1347+ 725D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 725D 2C 2F 2D 3A                  db ',/-:'
1349+ 7261
1350+ 7261                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 7261             >
1350+ 7261             >Dict_Ptr        defl    $
1350+ 7261             >
1350+ 7261             >//              ______________________________________________________________________
1350+ 7261             >//              Heap part
1350+ 7261             >
1350+ 7261             >
1350+ 7261             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E88B             >
1350+ E88B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E88B             >Latest_Definition defl  Heap_Ptr
1350+ E88B             >
1350+ E88B             >                // dummy db directives used to calculate length of namec
1350+ E88B 50 43 44 4D >                db      "PCDM"
1350+ E88F             >len_NFA         defl    $ - temp_NFA
1350+ E88F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E88B             >
1350+ E88B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E88C 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E890             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88F CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E890             >
1350+ E890 82 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E892             >Prev_Ptr        defl    Heap_Ptr
1350+ E892             >
1350+ E892             >mirror_Ptr      defl    $
1350+ E892             >
1350+ E892 63 72       >                dw      Dict_Ptr + 2        // xt
1350+ E894             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E894             >
1350+ E894             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E894             >
1350+ E894             >//              ______________________________________________________________________
1350+ E894             >//              Dictionary part
1350+ E894             >
1350+ E894             >                org     Dict_Ptr
1350+ 7261             >
1350+ 7261 92 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 7263             >
1350+ 7263             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 7263 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 7266             >
1350+ 7266             >
1350+ 7266             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 7266             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 7266             >
1350+ 7266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 7266 2E 2E 2E 2E                  db '....'
1352+ 726A
1353+ 726A              //  ______________________________________________________________________
1354+ 726A              //
1355+ 726A              // number       a -- d
1356+ 726A                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 726A             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 726A             >
1356+ 726A             >Dict_Ptr        defl    $
1356+ 726A             >
1356+ 726A             >//              ______________________________________________________________________
1356+ 726A             >//              Heap part
1356+ 726A             >
1356+ 726A             >
1356+ 726A             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E894             >
1356+ E894             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E894             >Latest_Definition defl  Heap_Ptr
1356+ E894             >
1356+ E894             >                // dummy db directives used to calculate length of namec
1356+ E894 4E 55 4D 42 >                db      "NUMBER"
1356+ E898 45 52       >
1356+ E89A             >len_NFA         defl    $ - temp_NFA
1356+ E89A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E894             >
1356+ E894 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E895 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E899 45 52       >
1356+ E89B             >                org     $-1                 // alter last byte of Name just above to set
1356+ E89A D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E89B             >
1356+ E89B 8B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89D             >Prev_Ptr        defl    Heap_Ptr
1356+ E89D             >
1356+ E89D             >mirror_Ptr      defl    $
1356+ E89D             >
1356+ E89D 6C 72       >                dw      Dict_Ptr + 2        // xt
1356+ E89F             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89F             >
1356+ E89F             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89F             >
1356+ E89F             >//              ______________________________________________________________________
1356+ E89F             >//              Dictionary part
1356+ E89F             >
1356+ E89F             >                org     Dict_Ptr
1356+ 726A             >
1356+ 726A 9D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 726C             >
1356+ 726C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 726C CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 726F             >
1356+ 726F             >
1356+ 726F             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 726F             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 726F             >
1356+ 726F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 726F 95 6A 95 6A                  dw      ZERO, ZERO              // 0 0
1358+ 7273 33 69                        dw      ROT                     // rot
1359+ 7275 9F 71 5D 68                  dw      CSGN, TO_R              // (sgn) >r
1360+ 7279 66 6B 9D 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 727D 5D 68
1361+ 727F 21 72                        dw      CPREFIX                 // (prefix)   // ***
1362+ 7281 B1 6A 6C 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 7285 A7 69
1363+ 7287 DC 71                        dw      CNUMBER                 // (number)
1364+ 7289              Number_Begin:                                   // begin
1365+ 7289 2C 69 B2 69                  dw        DUP, CFETCH             // dup c@
1366+ 728D 5D 68                        dw        TO_R                    // >r
1367+ 728F 63 72 5A 72                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 7293 A3 63 04 00
1368+ 7297 68 68                        dw        R_TO                    // r>
1369+ 7299 5B 65                        dw        C_MAP                   // (map)
1370+ 729B 95 6A 25 69                  dw        ZERO, SWAP              // 0 swap
1371+ 729F A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 72A3 05 6C
1372+ 72A5
1373+ 72A5 F5 63                        dw        ZBRANCH                 // if
1374+ 72A7 0A 00                        dw        Number_Endif_1 - $
1375+ 72A9 95 6A 6C 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 72AD A7 69
1376+ 72AF BF 68                        dw          ONE_PLUS                //      1+
1377+ 72B1              Number_Endif_1:                                   // endif
1378+ 72B1
1379+ 72B1 F5 63                        dw      ZBRANCH                // while
1380+ 72B3 08 00                        dw      Number_While_end - $
1381+ 72B5 DC 71                        dw        CNUMBER                 // (number)
1382+ 72B7 E8 63                        dw      BRANCH
1383+ 72B9 D0 FF                        dw      Number_Begin - $
1384+ 72BB              Number_While_end:                               // repeat
1385+ 72BB
1386+ 72BB B2 69 B8 6A                  dw      CFETCH, BL              // c@ bl
1387+ 72BF F9 6B 95 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 72C3 F6 6D
1388+ 72C5 68 68 66 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 72C9 A7 69
1389+ 72CB 68 68                        dw      R_TO                    // r>
1390+ 72CD                                                              // if
1391+ 72CD F5 63                        dw      ZBRANCH
1392+ 72CF 04 00                        dw      Number_Endif_2 - $
1393+ 72D1 F5 68                        dw          DMINUS              //      dminus
1394+ 72D3              Number_Endif_2:                                 // endif
1395+ 72D3 53 68                        dw      EXIT                    // ;
1396+ 72D5
1397+ 72D5              //  ______________________________________________________________________
1398+ 72D5              //
1399+ 72D5              // twofind      a -- d
1400+ 72D5                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 72D5             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 72D5             >
1400+ 72D5             >Dict_Ptr        defl    $
1400+ 72D5             >
1400+ 72D5             >//              ______________________________________________________________________
1400+ 72D5             >//              Heap part
1400+ 72D5             >
1400+ 72D5             >
1400+ 72D5             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89F             >
1400+ E89F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89F             >Latest_Definition defl  Heap_Ptr
1400+ E89F             >
1400+ E89F             >                // dummy db directives used to calculate length of namec
1400+ E89F 32 46 49 4E >                db      "2FIND"
1400+ E8A3 44          >
1400+ E8A4             >len_NFA         defl    $ - temp_NFA
1400+ E8A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89F             >
1400+ E89F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E8A0 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A4 44          >
1400+ E8A5             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A4 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A5             >
1400+ E8A5 94 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A7             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A7             >
1400+ E8A7             >mirror_Ptr      defl    $
1400+ E8A7             >
1400+ E8A7 D7 72       >                dw      Dict_Ptr + 2        // xt
1400+ E8A9             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A9             >
1400+ E8A9             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A9             >
1400+ E8A9             >//              ______________________________________________________________________
1400+ E8A9             >//              Dictionary part
1400+ E8A9             >
1400+ E8A9             >                org     Dict_Ptr
1400+ 72D5             >
1400+ 72D5 A7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 72D7             >
1400+ 72D7             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 72D7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 72DA             >
1400+ 72DA             >
1400+ 72DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 72DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 72DA             >
1400+ 72DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 72DA 5D 68 73 68                  dw      TO_R, R_OP              // >r r@
1402+ 72DE 54 6B 9D 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 72E2 9D 69
1403+ 72E4 BB 64                        dw      C_FIND                  // (find)
1404+ 72E6 64 6C                        dw      QDUP                    // ?dup
1405+ 72E8 78 68                        dw      ZEQUAL                  // 0=
1406+ 72EA                                                              // if
1407+ 72EA F5 63                        dw      ZBRANCH
1408+ 72EC 24 00                        dw      LFind_Endif - $
1409+ 72EE 73 68                        dw          R_OP                //      r@
1410+ 72F0                              // dw          LATEST               //      latest
1411+ 72F0 5A 6B 9D 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 72F4 9D 69
1412+ 72F6 BB 64                        dw          C_FIND              //      (find)
1413+ 72F8
1414+ 72F8 64 6C                            dw      QDUP                    // ?dup
1415+ 72FA 78 68                            dw      ZEQUAL                  // 0=
1416+ 72FC                                                                  // if
1417+ 72FC F5 63                            dw      ZBRANCH
1418+ 72FE 12 00                            dw      LFind_Endif2 - $
1419+ 7300 73 68                            dw          R_OP                //      r@
1420+ 7302 A3 63 51 75                      dw          LIT, FORTH, TO_BODY
1420+ 7306 75 6D
1421+ 7308 D5 68 D5 68                      dw          CELL_PLUS, CELL_PLUS
1422+ 730C 9D 69                            dw          FETCH
1423+ 730E BB 64                            dw          C_FIND              //      (find)
1424+ 7310              LFind_Endif2:                                    // endif
1425+ 7310
1426+ 7310
1427+ 7310              LFind_Endif:                                    // endif
1428+ 7310 68 68 11 69                  dw      R_TO, DROP              // r> drop
1429+ 7314 53 68                        dw      EXIT                    // ;
1430+ 7316
1431+ 7316              //  ______________________________________________________________________
1432+ 7316              //
1433+ 7316              // -find        a -- d
1434+ 7316                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 7316             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 7316             >
1434+ 7316             >Dict_Ptr        defl    $
1434+ 7316             >
1434+ 7316             >//              ______________________________________________________________________
1434+ 7316             >//              Heap part
1434+ 7316             >
1434+ 7316             >
1434+ 7316             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A9             >
1434+ E8A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A9             >Latest_Definition defl  Heap_Ptr
1434+ E8A9             >
1434+ E8A9             >                // dummy db directives used to calculate length of namec
1434+ E8A9 2D 46 49 4E >                db      "-FIND"
1434+ E8AD 44          >
1434+ E8AE             >len_NFA         defl    $ - temp_NFA
1434+ E8AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A9             >
1434+ E8A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8AA 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AE 44          >
1434+ E8AF             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AE C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AF             >
1434+ E8AF 9F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8B1             >Prev_Ptr        defl    Heap_Ptr
1434+ E8B1             >
1434+ E8B1             >mirror_Ptr      defl    $
1434+ E8B1             >
1434+ E8B1 18 73       >                dw      Dict_Ptr + 2        // xt
1434+ E8B3             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B3             >
1434+ E8B3             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B3             >
1434+ E8B3             >//              ______________________________________________________________________
1434+ E8B3             >//              Dictionary part
1434+ E8B3             >
1434+ E8B3             >                org     Dict_Ptr
1434+ 7316             >
1434+ 7316 B1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 7318             >
1434+ 7318             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 7318 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 731B             >
1434+ 731B             >
1434+ 731B             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 731B             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 731B             >
1434+ 731B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 731B B8 6A D8 70                  dw      BL, WORD                // bl word
1436+ 731F D7 72                        dw      TWOFIND                 // 2find
1437+ 7321 53 68                        dw      EXIT                    // ;
1438+ 7323
1439+ 7323              //  ______________________________________________________________________
1440+ 7323              //
1441+ 7323              // (abort)      --
1442+ 7323                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 7323             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 7323             >
1442+ 7323             >Dict_Ptr        defl    $
1442+ 7323             >
1442+ 7323             >//              ______________________________________________________________________
1442+ 7323             >//              Heap part
1442+ 7323             >
1442+ 7323             >
1442+ 7323             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B3             >
1442+ E8B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B3             >Latest_Definition defl  Heap_Ptr
1442+ E8B3             >
1442+ E8B3             >                // dummy db directives used to calculate length of namec
1442+ E8B3 28 41 42 4F >                db      "(ABORT)"
1442+ E8B7 52 54 29    >
1442+ E8BA             >len_NFA         defl    $ - temp_NFA
1442+ E8BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B3             >
1442+ E8B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B4 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B8 52 54 29    >
1442+ E8BB             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8BA A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8BB             >
1442+ E8BB A9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BD             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BD             >
1442+ E8BD             >mirror_Ptr      defl    $
1442+ E8BD             >
1442+ E8BD 25 73       >                dw      Dict_Ptr + 2        // xt
1442+ E8BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BF             >
1442+ E8BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BF             >
1442+ E8BF             >//              ______________________________________________________________________
1442+ E8BF             >//              Dictionary part
1442+ E8BF             >
1442+ E8BF             >                org     Dict_Ptr
1442+ 7323             >
1442+ 7323 BD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 7325             >
1442+ 7325             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 7325 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 7328             >
1442+ 7328             >
1442+ 7328             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 7328             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 7328             >
1442+ 7328             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 7328 B8 75                        dw      ABORT                   // abort
1444+ 732A 53 68                        dw      EXIT                    // ;
1445+ 732C
1446+ 732C              //  ______________________________________________________________________
1447+ 732C              //
1448+ 732C              // error        n --
1449+ 732C              // raise an error
1450+ 732C              // if WARNING is 0, prints "MSG#n".
1451+ 732C              // if WARNING is 1, prints line n of screen 4.
1452+ 732C              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 732C              // value can be negative or beyond block 4.
1454+ 732C                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 732C             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 732C             >
1454+ 732C             >Dict_Ptr        defl    $
1454+ 732C             >
1454+ 732C             >//              ______________________________________________________________________
1454+ 732C             >//              Heap part
1454+ 732C             >
1454+ 732C             >
1454+ 732C             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BF             >
1454+ E8BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BF             >Latest_Definition defl  Heap_Ptr
1454+ E8BF             >
1454+ E8BF             >                // dummy db directives used to calculate length of namec
1454+ E8BF 45 52 52 4F >                db      "ERROR"
1454+ E8C3 52          >
1454+ E8C4             >len_NFA         defl    $ - temp_NFA
1454+ E8C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BF             >
1454+ E8BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8C0 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C4 52          >
1454+ E8C5             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C4 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C5             >
1454+ E8C5 B3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C7             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C7             >
1454+ E8C7             >mirror_Ptr      defl    $
1454+ E8C7             >
1454+ E8C7 2E 73       >                dw      Dict_Ptr + 2        // xt
1454+ E8C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C9             >
1454+ E8C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C9             >
1454+ E8C9             >//              ______________________________________________________________________
1454+ E8C9             >//              Dictionary part
1454+ E8C9             >
1454+ E8C9             >                org     Dict_Ptr
1454+ 732C             >
1454+ 732C C7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 732E             >
1454+ 732E             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 732E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 7331             >
1454+ 7331             >
1454+ 7331             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 7331             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 7331             >
1454+ 7331             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 7331 06 6B 9D 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 7335 8B 68
1456+ 7337                                                              // if
1457+ 7337 F5 63                        dw      ZBRANCH
1458+ 7339 04 00                        dw      Error_Endif_1 - $
1459+ 733B 25 73                        dw          CABORT              //      (abort)
1460+ 733D              Error_Endif_1:                                  // endif
1461+ 733D BA 6B 32 6F                  dw      HERE, COUNT, TYPE       // here count type
1461+ 7341 86 6F
1462+ 7343 23 71                        dw      C_DOT_QUOTE             // .( ? )
1463+ 7345 02 3F 20                     db      2, "? "
1464+ 7348 A7 77                        dw      MESSAGE                 // message  ( forward )
1465+ 734A EE 6A 9D 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 734E 43 68
1466+ 7350 36 6B 9D 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 7354 64 6C
1467+ 7356                                                              // if
1468+ 7356 F5 63                        dw      ZBRANCH
1469+ 7358 08 00                        dw      Error_Endif_2 - $
1470+ 735A 3C 6B 9D 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 735E 25 69
1471+ 7360              Error_Endif_2:                                  // endif
1472+ 7360 7C 75                        dw      QUIT                    // quit ( forward )
1473+ 7362 53 68                        dw      EXIT                    // ;
1474+ 7364              //  ______________________________________________________________________
1475+ 7364              //
1476+ 7364              // id.          nfa --
1477+ 7364                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 7364             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 7364             >
1477+ 7364             >Dict_Ptr        defl    $
1477+ 7364             >
1477+ 7364             >//              ______________________________________________________________________
1477+ 7364             >//              Heap part
1477+ 7364             >
1477+ 7364             >
1477+ 7364             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C9             >
1477+ E8C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C9             >Latest_Definition defl  Heap_Ptr
1477+ E8C9             >
1477+ E8C9             >                // dummy db directives used to calculate length of namec
1477+ E8C9 49 44 2E    >                db      "ID."
1477+ E8CC             >len_NFA         defl    $ - temp_NFA
1477+ E8CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C9             >
1477+ E8C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8CA 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CD             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8CC AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CD             >
1477+ E8CD BF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CF             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CF             >
1477+ E8CF             >mirror_Ptr      defl    $
1477+ E8CF             >
1477+ E8CF 66 73       >                dw      Dict_Ptr + 2        // xt
1477+ E8D1             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8D1             >
1477+ E8D1             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8D1             >
1477+ E8D1             >//              ______________________________________________________________________
1477+ E8D1             >//              Dictionary part
1477+ E8D1             >
1477+ E8D1             >                org     Dict_Ptr
1477+ 7364             >
1477+ 7364 CF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 7366             >
1477+ 7366             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 7366 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 7369             >
1477+ 7369             >
1477+ 7369             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 7369             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 7369             >
1477+ 7369             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 7369 1A 6D                        dw      QTOHEAP
1479+ 736B 2C 69 9C 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 736F 96 6C
1480+ 7371 BF 68                        dw      ONE_PLUS                // 1+
1481+ 7373 08 69 F9 6B                  dw      OVER, SUBTRACT          // over -
1482+ 7377 2C 69 5D 68                  dw      DUP, TO_R               // >r
1483+ 737B C9 70 25 69                  dw      PAD, SWAP               // pad swap
1484+ 737F 94 67                        dw      CMOVE                   // cmove
1485+ 7381 C9 70 BF 68                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 7385 68 68 C6 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 7389 86 6F 8B 6C                  dw      TYPE, SPACE             // type
1488+ 738D 53 68                        dw      EXIT                    // ;
1489+ 738F
1490+ 738F              //  ______________________________________________________________________
1491+ 738F              //
1492+ 738F              // code         -- cccc
1493+ 738F                              Colon_Def CODE,  "CODE", is_normal
1493+ 738F             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 738F             >
1493+ 738F             >Dict_Ptr        defl    $
1493+ 738F             >
1493+ 738F             >//              ______________________________________________________________________
1493+ 738F             >//              Heap part
1493+ 738F             >
1493+ 738F             >
1493+ 738F             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8D1             >
1493+ E8D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8D1             >Latest_Definition defl  Heap_Ptr
1493+ E8D1             >
1493+ E8D1             >                // dummy db directives used to calculate length of namec
1493+ E8D1 43 4F 44 45 >                db      "CODE"
1493+ E8D5             >len_NFA         defl    $ - temp_NFA
1493+ E8D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8D1             >
1493+ E8D1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8D2 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D6             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D5 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D6             >
1493+ E8D6 C9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D8             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D8             >
1493+ E8D8             >mirror_Ptr      defl    $
1493+ E8D8             >
1493+ E8D8 91 73       >                dw      Dict_Ptr + 2        // xt
1493+ E8DA             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8DA             >
1493+ E8DA             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8DA             >
1493+ E8DA             >//              ______________________________________________________________________
1493+ E8DA             >//              Dictionary part
1493+ E8DA             >
1493+ E8DA             >                org     Dict_Ptr
1493+ 738F             >
1493+ 738F D8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 7391             >
1493+ 7391             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 7391 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 7394             >
1493+ 7394             >
1493+ 7394             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 7394             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 7394             >
1493+ 7394             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 7394 18 73                        dw      LFIND                   // -find
1495+ 7396                                                              // if
1496+ 7396 F5 63                        dw      ZBRANCH
1497+ 7398 10 00                        dw      Code_Endif - $
1498+ 739A 11 69                        dw          DROP                //      drop
1499+ 739C 80 6D 66 73                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 73A0 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 73A4 A7 77
1501+ 73A6 8B 6C                        dw          SPACE               //      space
1502+ 73A8              Code_Endif:                                     // endif
1503+ 73A8 BA 6B                        dw      HERE                    // here
1504+ 73AA                                                              // ( ---- here begins NFA ---- )
1505+ 73AA 2C 69 B2 69                  dw      DUP, CFETCH             // dup c@
1506+ 73AE 00 6B 9D 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 73B2 3E 6C
1507+ 73B4 BF 68                        dw      ONE_PLUS                // 1+
1508+ 73B6 2C 69 C5 6B                  dw      DUP, ALLOT              // dup allot
1509+ 73BA D5 68 D5 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 73BE 5D 68                        dw      TO_R                    // >r
1511+ 73C0 2C 69                        dw      DUP                     // dup
1512+ 73C2 A3 63                        dw      LIT
1513+ 73C4 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 73C6 94 69                        dw      TOGGLE                  // toggle
1515+ 73C8 BA 6B C6 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 73CC A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 73D0 94 69
1517+ 73D2                                                              // ( ---- here is LFA ---- )
1518+ 73D2 5A 6B 9D 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 73D6 9D 69
1519+ 73D8 D0 6B                        dw      COMMA
1520+ 73DA 2C 69 D5 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 73DE D0 6B
1521+ 73E0 2B 6D                        dw      HP_FETCH                // hp@
1522+ 73E2 5A 6B 9D 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 73E6 A7 69
1523+ 73E8 2B 6D FC 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 73EC 73 68 94 67                  dw      R_OP, CMOVE
1525+ 73F0 73 68 E7 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 73F4 C5 6B
1526+ 73F6 68 68 2A 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 73FA 85 69
1527+ 73FC 2B 6D DA 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 7400 D0 6B                        dw      COMMA
1529+ 7402 95 6A 3D 6D                  dw      ZERO, SKIP_HP_PAGE
1530+ 7406                                                              // ( ---- here is LFA ---- )
1531+ 7406 53 68                        dw      EXIT                    // ;
1532+ 7408
1533+ 7408              //  ______________________________________________________________________
1534+ 7408              //
1535+ 7408              // create       -- cccc     ( compile time )
1536+ 7408              //              -- a        ( run time )
1537+ 7408                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 7408             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 7408             >
1537+ 7408             >Dict_Ptr        defl    $
1537+ 7408             >
1537+ 7408             >//              ______________________________________________________________________
1537+ 7408             >//              Heap part
1537+ 7408             >
1537+ 7408             >
1537+ 7408             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8DA             >
1537+ E8DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8DA             >Latest_Definition defl  Heap_Ptr
1537+ E8DA             >
1537+ E8DA             >                // dummy db directives used to calculate length of namec
1537+ E8DA 43 52 45 41 >                db      "CREATE"
1537+ E8DE 54 45       >
1537+ E8E0             >len_NFA         defl    $ - temp_NFA
1537+ E8E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8DA             >
1537+ E8DA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8DB 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DF 54 45       >
1537+ E8E1             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8E0 C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8E1             >
1537+ E8E1 D1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E3             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E3             >
1537+ E8E3             >mirror_Ptr      defl    $
1537+ E8E3             >
1537+ E8E3 0A 74       >                dw      Dict_Ptr + 2        // xt
1537+ E8E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E5             >
1537+ E8E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E5             >
1537+ E8E5             >//              ______________________________________________________________________
1537+ E8E5             >//              Dictionary part
1537+ E8E5             >
1537+ E8E5             >                org     Dict_Ptr
1537+ 7408             >
1537+ 7408 E3 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 740A             >
1537+ 740A             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 740A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 740D             >
1537+ 740D             >
1537+ 740D             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 740D             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 740D             >
1537+ 740D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 740D 91 73 A2 6E                  dw      CODE, SMUDGE            // code smudge
1539+ 7411 A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 7415 DF 6B
1540+ 7417 A3 63 7C 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 741B D0 6B
1541+ 741D DE 6E                        dw      C_SEMICOLON_CODE
1542+ 741F                              // this routine is called from the call coded in CFA
1543+ 741F              Create_Ptr:
1544+ 741F
1545+ 741F
1546+ 741F
1547+ 741F                              next
1547+ 741F DD E9       >                jp      (ix)
1548+ 7421
1549+ 7421              //  ______________________________________________________________________
1550+ 7421              //
1551+ 7421              // [compile]    -- cccc     ( compile time )
1552+ 7421                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 7421             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 7421             >
1552+ 7421             >Dict_Ptr        defl    $
1552+ 7421             >
1552+ 7421             >//              ______________________________________________________________________
1552+ 7421             >//              Heap part
1552+ 7421             >
1552+ 7421             >
1552+ 7421             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E5             >
1552+ E8E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E5             >Latest_Definition defl  Heap_Ptr
1552+ E8E5             >
1552+ E8E5             >                // dummy db directives used to calculate length of namec
1552+ E8E5 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E9 50 49 4C 45 >
1552+ E8ED 5D          >
1552+ E8EE             >len_NFA         defl    $ - temp_NFA
1552+ E8EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E5             >
1552+ E8E5 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E6 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8EA 50 49 4C 45 >
1552+ E8EE 5D          >
1552+ E8EF             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8EE DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EF             >
1552+ E8EF DA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8F1             >Prev_Ptr        defl    Heap_Ptr
1552+ E8F1             >
1552+ E8F1             >mirror_Ptr      defl    $
1552+ E8F1             >
1552+ E8F1 23 74       >                dw      Dict_Ptr + 2        // xt
1552+ E8F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F3             >
1552+ E8F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F3             >
1552+ E8F3             >//              ______________________________________________________________________
1552+ E8F3             >//              Dictionary part
1552+ E8F3             >
1552+ E8F3             >                org     Dict_Ptr
1552+ 7421             >
1552+ 7421 F1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 7423             >
1552+ 7423             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 7423 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 7426             >
1552+ 7426             >
1552+ 7426             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 7426             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 7426             >
1552+ 7426             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 7426 18 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 7428 78 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 742A 95 6A F6 6D                  dw      ZERO, QERROR            // 0 ?error
1556+ 742E 11 69                        dw      DROP                    // drop       (  cfa  )
1557+ 7430 D0 6B                        dw      COMMA                   // ,
1558+ 7432 53 68                        dw      EXIT                    // ; immediate
1559+ 7434
1560+ 7434              //  ______________________________________________________________________
1561+ 7434              //
1562+ 7434              // literal      n --      ( compile time )
1563+ 7434                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 7434             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 7434             >
1563+ 7434             >Dict_Ptr        defl    $
1563+ 7434             >
1563+ 7434             >//              ______________________________________________________________________
1563+ 7434             >//              Heap part
1563+ 7434             >
1563+ 7434             >
1563+ 7434             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F3             >
1563+ E8F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F3             >Latest_Definition defl  Heap_Ptr
1563+ E8F3             >
1563+ E8F3             >                // dummy db directives used to calculate length of namec
1563+ E8F3 4C 49 54 45 >                db      "LITERAL"
1563+ E8F7 52 41 4C    >
1563+ E8FA             >len_NFA         defl    $ - temp_NFA
1563+ E8FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F3             >
1563+ E8F3 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F4 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F8 52 41 4C    >
1563+ E8FB             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8FA CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8FB             >
1563+ E8FB E5 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FD             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FD             >
1563+ E8FD             >mirror_Ptr      defl    $
1563+ E8FD             >
1563+ E8FD 36 74       >                dw      Dict_Ptr + 2        // xt
1563+ E8FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FF             >
1563+ E8FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FF             >
1563+ E8FF             >//              ______________________________________________________________________
1563+ E8FF             >//              Dictionary part
1563+ E8FF             >
1563+ E8FF             >                org     Dict_Ptr
1563+ 7434             >
1563+ 7434 FD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 7436             >
1563+ 7436             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 7436 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 7439             >
1563+ 7439             >
1563+ 7439             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 7439             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 7439             >
1563+ 7439             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 7439 60 6B 9D 69                  dw      STATE, FETCH            // state @
1565+ 743D                                                              // if
1566+ 743D F5 63                        dw      ZBRANCH
1567+ 743F 08 00                        dw      Literal_Endif - $
1568+ 7441 66 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1569+ 7445 D0 6B                        dw          COMMA               //      ,
1570+ 7447              Literal_Endif:                                  // endif
1571+ 7447 53 68                        dw      EXIT                    // ; immediate
1572+ 7449
1573+ 7449              //  ______________________________________________________________________
1574+ 7449              //
1575+ 7449              // dliteral     n --      ( compile time )
1576+ 7449                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 7449             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 7449             >
1576+ 7449             >Dict_Ptr        defl    $
1576+ 7449             >
1576+ 7449             >//              ______________________________________________________________________
1576+ 7449             >//              Heap part
1576+ 7449             >
1576+ 7449             >
1576+ 7449             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FF             >
1576+ E8FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FF             >Latest_Definition defl  Heap_Ptr
1576+ E8FF             >
1576+ E8FF             >                // dummy db directives used to calculate length of namec
1576+ E8FF 44 4C 49 54 >                db      "DLITERAL"
1576+ E903 45 52 41 4C >
1576+ E907             >len_NFA         defl    $ - temp_NFA
1576+ E907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FF             >
1576+ E8FF C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E900 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E904 45 52 41 4C >
1576+ E908             >                org     $-1                 // alter last byte of Name just above to set
1576+ E907 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E908             >
1576+ E908 F3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E90A             >Prev_Ptr        defl    Heap_Ptr
1576+ E90A             >
1576+ E90A             >mirror_Ptr      defl    $
1576+ E90A             >
1576+ E90A 4B 74       >                dw      Dict_Ptr + 2        // xt
1576+ E90C             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E90C             >
1576+ E90C             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E90C             >
1576+ E90C             >//              ______________________________________________________________________
1576+ E90C             >//              Dictionary part
1576+ E90C             >
1576+ E90C             >                org     Dict_Ptr
1576+ 7449             >
1576+ 7449 0A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 744B             >
1576+ 744B             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 744B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 744E             >
1576+ 744E             >
1576+ 744E             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 744E             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 744E             >
1576+ 744E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 744E 60 6B 9D 69                  dw      STATE, FETCH            // state @
1578+ 7452                                                              // if
1579+ 7452 F5 63                        dw      ZBRANCH
1580+ 7454 08 00                        dw      DLiteral_Endif - $
1581+ 7456 25 69                        dw          SWAP                //      swap
1582+ 7458 36 74 36 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 745C              DLiteral_Endif:                                 // endif
1584+ 745C 53 68                        dw      EXIT                    // ; immediate
1585+ 745E
1586+ 745E              //  ______________________________________________________________________
1587+ 745E              //
1588+ 745E              // [char]       n --      ( compile time )
1589+ 745E              // inside colon definition, gets first character from next input word
1590+ 745E              // and compiles it as literal.
1591+ 745E                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 745E             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 745E             >
1591+ 745E             >Dict_Ptr        defl    $
1591+ 745E             >
1591+ 745E             >//              ______________________________________________________________________
1591+ 745E             >//              Heap part
1591+ 745E             >
1591+ 745E             >
1591+ 745E             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E90C             >
1591+ E90C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E90C             >Latest_Definition defl  Heap_Ptr
1591+ E90C             >
1591+ E90C             >                // dummy db directives used to calculate length of namec
1591+ E90C 5B 43 48 41 >                db      "[CHAR]"
1591+ E910 52 5D       >
1591+ E912             >len_NFA         defl    $ - temp_NFA
1591+ E912             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E90C             >
1591+ E90C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90D 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E911 52 5D       >
1591+ E913             >                org     $-1                 // alter last byte of Name just above to set
1591+ E912 DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E913             >
1591+ E913 FF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E915             >Prev_Ptr        defl    Heap_Ptr
1591+ E915             >
1591+ E915             >mirror_Ptr      defl    $
1591+ E915             >
1591+ E915 60 74       >                dw      Dict_Ptr + 2        // xt
1591+ E917             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E917             >
1591+ E917             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E917             >
1591+ E917             >//              ______________________________________________________________________
1591+ E917             >//              Dictionary part
1591+ E917             >
1591+ E917             >                org     Dict_Ptr
1591+ 745E             >
1591+ 745E 15 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 7460             >
1591+ 7460             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 7460 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 7463             >
1591+ 7463             >
1591+ 7463             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 7463             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 7463             >
1591+ 7463             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 7463 3A 71 36 74                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 7467 53 68                        dw      EXIT                    // ; immediate
1594+ 7469
1595+ 7469              //  ______________________________________________________________________
1596+ 7469              //
1597+ 7469              // 0x00         n --      ( compile time )
1598+ 7469                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 7469             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 7469             >
1598+ 7469             >Dict_Ptr        defl    $
1598+ 7469             >
1598+ 7469             >//              ______________________________________________________________________
1598+ 7469             >//              Heap part
1598+ 7469             >
1598+ 7469             >
1598+ 7469             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E917             >
1598+ E917             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E917             >Latest_Definition defl  Heap_Ptr
1598+ E917             >
1598+ E917             >                // dummy db directives used to calculate length of namec
1598+ E917 00          >                db      $00
1598+ E918             >len_NFA         defl    $ - temp_NFA
1598+ E918             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E917             >
1598+ E917 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E918 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E919             >                org     $-1                 // alter last byte of Name just above to set
1598+ E918 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E919             >
1598+ E919 0C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E91B             >Prev_Ptr        defl    Heap_Ptr
1598+ E91B             >
1598+ E91B             >mirror_Ptr      defl    $
1598+ E91B             >
1598+ E91B 6B 74       >                dw      Dict_Ptr + 2        // xt
1598+ E91D             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91D             >
1598+ E91D             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91D             >
1598+ E91D             >//              ______________________________________________________________________
1598+ E91D             >//              Dictionary part
1598+ E91D             >
1598+ E91D             >                org     Dict_Ptr
1598+ 7469             >
1598+ 7469 1B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 746B             >
1598+ 746B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 746B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 746E             >
1598+ 746E             >
1598+ 746E             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 746E             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 746E             >
1598+ 746E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 746E 36 6B 9D 69                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 7472 9C 6A
1600+ 7474 33 6C                        dw      GREATER                 // > if
1601+ 7476                                                              // if
1602+ 7476 F5 63                        dw      ZBRANCH
1603+ 7478 28 00                        dw      Nul_Else_1 - $
1604+ 747A 9C 6A 36 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 747E 85 69
1605+ 7480 95 6A 3C 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 7484 A7 69
1606+ 7486 36 6B 9D 69                  dw          BLK, FETCH          //      blk @
1607+ 748A CD 6A                        dw          BSCR                //      b/scr
1608+ 748C C6 68                        dw          ONE_SUBTRACT        //      1 -
1609+ 748E 13 68                        dw          AND_OP              //      and  ( this is tricky )
1610+ 7490 78 68                        dw          ZEQUAL              //      0=
1611+ 7492                                                              //      if
1612+ 7492 F5 63                        dw          ZBRANCH
1613+ 7494 08 00                        dw          Nul_Endif_2 - $
1614+ 7496 1E 6E                        dw              QEXEC           //          ?exec
1615+ 7498 68 68 11 69                  dw              R_TO, DROP      //          r> drop
1616+ 749C              Nul_Endif_2:                                    //      endif
1617+ 749C E8 63                        dw      BRANCH
1618+ 749E 06 00                        dw      Nul_Endif_1 - $
1619+ 74A0              Nul_Else_1:                                     // else
1620+ 74A0 68 68 11 69                  dw          R_TO, DROP          //      r> drop
1621+ 74A4              Nul_Endif_1:                                    // endif
1622+ 74A4 53 68                        dw      EXIT                    // ;
1623+ 74A6
1624+ 74A6              //  ______________________________________________________________________
1625+ 74A6              //
1626+ 74A6              // ?stack       --
1627+ 74A6              // Raise error #1 if stack is empty and you pop it
1628+ 74A6              // Raise error #7 if stack is full.
1629+ 74A6              // This means SP must always stay between HERE and FFFF
1630+ 74A6              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 74A6              // for Next 8K MMU paging this is $DOE8
1632+ 74A6                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 74A6             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 74A6             >
1632+ 74A6             >Dict_Ptr        defl    $
1632+ 74A6             >
1632+ 74A6             >//              ______________________________________________________________________
1632+ 74A6             >//              Heap part
1632+ 74A6             >
1632+ 74A6             >
1632+ 74A6             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91D             >
1632+ E91D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91D             >Latest_Definition defl  Heap_Ptr
1632+ E91D             >
1632+ E91D             >                // dummy db directives used to calculate length of namec
1632+ E91D 3F 53 54 41 >                db      "?STACK"
1632+ E921 43 4B       >
1632+ E923             >len_NFA         defl    $ - temp_NFA
1632+ E923             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91D             >
1632+ E91D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91E 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E922 43 4B       >
1632+ E924             >                org     $-1                 // alter last byte of Name just above to set
1632+ E923 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E924             >
1632+ E924 17 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E926             >Prev_Ptr        defl    Heap_Ptr
1632+ E926             >
1632+ E926             >mirror_Ptr      defl    $
1632+ E926             >
1632+ E926 A8 74       >                dw      Dict_Ptr + 2        // xt
1632+ E928             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E928             >
1632+ E928             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E928             >
1632+ E928             >//              ______________________________________________________________________
1632+ E928             >//              Dictionary part
1632+ E928             >
1632+ E928             >                org     Dict_Ptr
1632+ 74A6             >
1632+ 74A6 26 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 74A8             >
1632+ 74A8             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 74A8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 74AB             >
1632+ 74AB             >
1632+ 74AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 74AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 74AB             >
1632+ 74AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 74AB 3A 68                        dw      SPFETCH                 // sp@
1634+ 74AD EE 6A 9D 69                  dw      S0, FETCH               // s0 @
1635+ 74B1 25 69 10 6C                  dw      SWAP, ULESS             // swap u<
1636+ 74B5 9C 6A F6 6D                  dw      ONE, QERROR             // 1 ?error
1637+ 74B9 BA 6B                        dw      HERE                    // here
1638+ 74BB EE 6A 9D 69                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 74BF 1E 6C
1639+ 74C1                                                              // if
1640+ 74C1 F5 63                        dw      ZBRANCH
1641+ 74C3 14 00                        dw      QStack_Endif - $
1642+ 74C5 3A 68                        dw          SPFETCH             //      sp@
1643+ 74C7 BA 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1643+ 74CB 80 00
1644+ 74CD A6 68 10 6C                  dw          PLUS, ULESS         //      plus u<
1645+ 74D1 A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 74D5 F6 6D
1646+ 74D7              QStack_Endif:                                   // endif
1647+ 74D7 53 68                        dw      EXIT                    // ;
1648+ 74D9
1649+ 74D9
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  74D9                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74D9              //  ______________________________________________________________________
   2+ 74D9              //
   3+ 74D9              //  L2.asm
   4+ 74D9              //
   5+ 74D9              //  Level-2 3dos
   6+ 74D9              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74D9              //  ______________________________________________________________________
   8+ 74D9
   9+ 74D9
  10+ 74D9              //  ______________________________________________________________________
  11+ 74D9              //
  12+ 74D9              // interpret    --
  13+ 74D9              // This is the text interpreter.
  14+ 74D9              // It executes or compiles, depending on STATE, the text coming from
  15+ 74D9              // current input stream.
  16+ 74D9              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74D9              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74D9              // leaving on top of stack a single or double precision number, depending
  19+ 74D9              // on the presence of a decimal point.
  20+ 74D9              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74D9              // by the offending word.
  22+ 74D9                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74D9             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74D9             >
  22+ 74D9             >Dict_Ptr        defl    $
  22+ 74D9             >
  22+ 74D9             >//              ______________________________________________________________________
  22+ 74D9             >//              Heap part
  22+ 74D9             >
  22+ 74D9             >
  22+ 74D9             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E928             >
  22+ E928             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E928             >Latest_Definition defl  Heap_Ptr
  22+ E928             >
  22+ E928             >                // dummy db directives used to calculate length of namec
  22+ E928 49 4E 54 45 >                db      "INTERPRET"
  22+ E92C 52 50 52 45 >
  22+ E930 54          >
  22+ E931             >len_NFA         defl    $ - temp_NFA
  22+ E931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E928             >
  22+ E928 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E929 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92D 52 50 52 45 >
  22+ E931 54          >
  22+ E932             >                org     $-1                 // alter last byte of Name just above to set
  22+ E931 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E932             >
  22+ E932 1D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E934             >Prev_Ptr        defl    Heap_Ptr
  22+ E934             >
  22+ E934             >mirror_Ptr      defl    $
  22+ E934             >
  22+ E934 DB 74       >                dw      Dict_Ptr + 2        // xt
  22+ E936             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E936             >
  22+ E936             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E936             >
  22+ E936             >//              ______________________________________________________________________
  22+ E936             >//              Dictionary part
  22+ E936             >
  22+ E936             >                org     Dict_Ptr
  22+ 74D9             >
  22+ 74D9 34 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74DB             >
  22+ 74DB             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74DB CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74DE             >
  22+ 74DE             >
  22+ 74DE             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74DE             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74DE             >
  22+ 74DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74DE
  24+ 74DE              Interpret_Begin:                                        // begin
  25+ 74DE 18 73                        dw          LFIND                       //      -find
  26+ 74E0                                                                      //      if
  27+ 74E0 F5 63                        dw          ZBRANCH
  28+ 74E2 1A 00                        dw          Interpret_Else_1 - $
  29+ 74E4 60 6B 9D 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74E8 1E 6C
  30+ 74EA                                                                      //          if
  31+ 74EA F5 63                        dw              ZBRANCH
  32+ 74EC 08 00                        dw              Interpret_Else_2 - $
  33+ 74EE 7B 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74F0                                                                      //          else
  35+ 74F0 E8 63                        dw              BRANCH
  36+ 74F2 06 00                        dw              Interpret_Endif_2 - $
  37+ 74F4              Interpret_Else_2:
  38+ 74F4 AE 63 5C 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74F8              Interpret_Endif_2:                                      //          endif
  40+ 74F8                                                                      //      else
  41+ 74F8 E8 63                        dw          BRANCH
  42+ 74FA 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74FC              Interpret_Else_1:
  44+ 74FC BA 6B 6C 72                  dw              HERE, NUMBER            //          here number
  45+ 7500 6C 6B 9D 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7504 BF 68
  46+ 7506                                                                      //          if
  47+ 7506 F5 63                        dw              ZBRANCH
  48+ 7508 08 00                        dw              Interpret_Else_3 - $
  49+ 750A              //              dw                  NMODE, FETCH        //              nmode @
  50+ 750A              //                                                      //              if
  51+ 750A              //              dw                  ZBRANCH
  52+ 750A              //              dw                  Interpret_Endif_4 - $
  53+ 750A              //              dw                      ONE, ZERO       //                  1 0
  54+ 750A              //              dw                      TWO_DROP        //                  2drop
  55+ 750A              //Interpret_Endif_4:                                      //              endif
  56+ 750A 4B 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 750C                                                                      //          else
  58+ 750C E8 63                        dw              BRANCH
  59+ 750E 06 00                        dw              Interpret_Endif_3 - $
  60+ 7510              Interpret_Else_3:
  61+ 7510 11 69                        dw                  DROP                //              drop
  62+ 7512 36 74                        dw                  LITERAL             //              [compile]  literal
  63+ 7514              Interpret_Endif_3:                                      //          endif
  64+ 7514              Interpret_Endif_1:                                      //      endif
  65+ 7514 A8 74                        dw          QSTACK                      //      ?stack
  66+ 7516 AD 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7518                                                                      //      if
  68+ 7518 F5 63                        dw          ZBRANCH
  69+ 751A 04 00                        dw          Interpret_Endif_5 - $
  70+ 751C 7C 75                        dw              QUIT                    //          quit
  71+ 751E              Interpret_Endif_5:                                      //      endif
  72+ 751E E8 63                        dw      BRANCH
  73+ 7520 BE FF                        dw      Interpret_Begin - $
  74+ 7522 53 68                        dw      EXIT                            // ;
  75+ 7524
  76+ 7524              //  ______________________________________________________________________
  77+ 7524              //
  78+ 7524              // vocabulary   -- cccc     ( compile time )
  79+ 7524              // Defining word used in the form   VOCABULARY cccc
  80+ 7524              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7524              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7524              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7524              // so new definitions can be inserted in that vocabulary.
  84+ 7524                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7524             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7524             >
  84+ 7524             >Dict_Ptr        defl    $
  84+ 7524             >
  84+ 7524             >//              ______________________________________________________________________
  84+ 7524             >//              Heap part
  84+ 7524             >
  84+ 7524             >
  84+ 7524             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E936             >
  84+ E936             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E936             >Latest_Definition defl  Heap_Ptr
  84+ E936             >
  84+ E936             >                // dummy db directives used to calculate length of namec
  84+ E936 56 4F 43 41 >                db      "VOCABULARY"
  84+ E93A 42 55 4C 41 >
  84+ E93E 52 59       >
  84+ E940             >len_NFA         defl    $ - temp_NFA
  84+ E940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E936             >
  84+ E936 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E937 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E93B 42 55 4C 41 >
  84+ E93F 52 59       >
  84+ E941             >                org     $-1                 // alter last byte of Name just above to set
  84+ E940 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E941             >
  84+ E941 28 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E943             >Prev_Ptr        defl    Heap_Ptr
  84+ E943             >
  84+ E943             >mirror_Ptr      defl    $
  84+ E943             >
  84+ E943 26 75       >                dw      Dict_Ptr + 2        // xt
  84+ E945             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E945             >
  84+ E945             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E945             >
  84+ E945             >//              ______________________________________________________________________
  84+ E945             >//              Dictionary part
  84+ E945             >
  84+ E945             >                org     Dict_Ptr
  84+ 7524             >
  84+ 7524 43 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 7526             >
  84+ 7526             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7526 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7529             >
  84+ 7529             >
  84+ 7529             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7529             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7529             >
  84+ 7529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7529
  86+ 7529 0A 6F                        dw      CBUILDS
  87+ 752B
  88+ 752B                              // dummy word + link part
  89+ 752B A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 752F D0 6B
  90+ 7531 5A 6B 9D 69                  dw      CURRENT, FETCH          // current @
  91+ 7535 9D 69                        dw      FETCH                   // @
  92+ 7537                          //  dw      CELL_MINUS              // cell-
  93+ 7537 D0 6B                        dw      COMMA                   // ,
  94+ 7539
  95+ 7539                              // voc-link part
  96+ 7539 BA 6B                        dw      HERE                    // here
  97+ 753B 18 6B 9D 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 753F D0 6B                        dw      COMMA                   // ,
  99+ 7541 18 6B A7 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 7545                              // DOES part
 101+ 7545 15 6F                        dw      DOES_TO                 // does>
 102+ 7547              Vocabulary_Does:
 103+ 7547 D5 68                        dw      CELL_PLUS               // cell+
 104+ 7549 54 6B A7 69                  dw      CONTEXT, STORE          // context !
 105+ 754D 53 68                        dw      EXIT                    // ;
 106+ 754F
 107+ 754F              //  ______________________________________________________________________
 108+ 754F              //
 109+ 754F              // forth        --
 110+ 754F              // Name of the first vocabulary.
 111+ 754F              // It makes FORTH the CONTEXT vocabulary.
 112+ 754F              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 754F              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 754F              // of a colon definition to be able to select the vocabulary.
 115+ 754F
 116+ 754F                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 754F             >
 116+ 754F             >Dict_Ptr        defl    $
 116+ 754F             >
 116+ 754F             >//              ______________________________________________________________________
 116+ 754F             >//              Heap part
 116+ 754F             >
 116+ 754F             >
 116+ 754F             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E945             >
 116+ E945             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E945             >Latest_Definition defl  Heap_Ptr
 116+ E945             >
 116+ E945             >                // dummy db directives used to calculate length of namec
 116+ E945 46 4F 52 54 >                db      "FORTH"
 116+ E949 48          >
 116+ E94A             >len_NFA         defl    $ - temp_NFA
 116+ E94A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E945             >
 116+ E945 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E946 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E94A 48          >
 116+ E94B             >                org     $-1                 // alter last byte of Name just above to set
 116+ E94A C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E94B             >
 116+ E94B 36 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94D             >Prev_Ptr        defl    Heap_Ptr
 116+ E94D             >
 116+ E94D             >mirror_Ptr      defl    $
 116+ E94D             >
 116+ E94D 51 75       >                dw      Dict_Ptr + 2        // xt
 116+ E94F             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94F             >
 116+ E94F             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94F             >
 116+ E94F             >//              ______________________________________________________________________
 116+ E94F             >//              Dictionary part
 116+ E94F             >
 116+ E94F             >                org     Dict_Ptr
 116+ 754F             >
 116+ 754F 4D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 7551             >
 116+ 7551             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 7551 CD 22 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 7554             >
 116+ 7554             >
 116+ 7554             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7554             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7554             >
 116+ 7554             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 7554 47 75                        dw      Vocabulary_Does
 118+ 7556
 119+ 7556 81 A0                        db      $81, $A0
 120+ 7558              Forth_Latest_Ptr:
 121+ 7558 45 09                        dw      Latest_Definition
 122+ 755A              Voclink_Ptr:
 123+ 755A 00 00                        dw      0
 124+ 755C
 125+ 755C              // ____
 126+ 755C              // temp_VOC        defl    $                   // save this address
 127+ 755C              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 755C              //              db      $81, $A0
 129+ 755C              // Forth_Latest_Ptr_HEAP:
 130+ 755C              //                 dw      Latest_Definition
 131+ 755C              // Voclink_Ptr_HEAP:
 132+ 755C              //                 dw      0
 133+ 755C              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 755C              //                 org     temp_VOC
 135+ 755C              // ____
 136+ 755C
 137+ 755C              // Any new vocabulary is structured as follow:
 138+ 755C              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 755C              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 755C              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 755C              //       at creations it points to the null-word of its parent vocabulary
 142+ 755C              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 755C              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 755C              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 755C              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 755C              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 755C              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 755C
 149+ 755C              //  ______________________________________________________________________
 150+ 755C              //
 151+ 755C              // definitions  --
 152+ 755C              // Used in the form  cccc DEFINITIONS
 153+ 755C              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 755C              // vocabulary cccc.
 155+ 755C                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 755C             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 755C             >
 155+ 755C             >Dict_Ptr        defl    $
 155+ 755C             >
 155+ 755C             >//              ______________________________________________________________________
 155+ 755C             >//              Heap part
 155+ 755C             >
 155+ 755C             >
 155+ 755C             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94F             >
 155+ E94F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94F             >Latest_Definition defl  Heap_Ptr
 155+ E94F             >
 155+ E94F             >                // dummy db directives used to calculate length of namec
 155+ E94F 44 45 46 49 >                db      "DEFINITIONS"
 155+ E953 4E 49 54 49 >
 155+ E957 4F 4E 53    >
 155+ E95A             >len_NFA         defl    $ - temp_NFA
 155+ E95A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94F             >
 155+ E94F 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E950 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E954 4E 49 54 49 >
 155+ E958 4F 4E 53    >
 155+ E95B             >                org     $-1                 // alter last byte of Name just above to set
 155+ E95A D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E95B             >
 155+ E95B 45 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95D             >Prev_Ptr        defl    Heap_Ptr
 155+ E95D             >
 155+ E95D             >mirror_Ptr      defl    $
 155+ E95D             >
 155+ E95D 5E 75       >                dw      Dict_Ptr + 2        // xt
 155+ E95F             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95F             >
 155+ E95F             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95F             >
 155+ E95F             >//              ______________________________________________________________________
 155+ E95F             >//              Dictionary part
 155+ E95F             >
 155+ E95F             >                org     Dict_Ptr
 155+ 755C             >
 155+ 755C 5D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 755E             >
 155+ 755E             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 755E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 7561             >
 155+ 7561             >
 155+ 7561             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 7561             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 7561             >
 155+ 7561             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 7561 54 6B 9D 69                  dw      CONTEXT, FETCH          // context @
 157+ 7565 5A 6B A7 69                  dw      CURRENT, STORE          // current !
 158+ 7569 53 68                        dw      EXIT                    // ;
 159+ 756B
 160+ 756B              //  ______________________________________________________________________
 161+ 756B              //
 162+ 756B              // (            -- cccc )
 163+ 756B              // the following text is interpreted as a comment until a closing )
 164+ 756B                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 756B             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 756B             >
 164+ 756B             >Dict_Ptr        defl    $
 164+ 756B             >
 164+ 756B             >//              ______________________________________________________________________
 164+ 756B             >//              Heap part
 164+ 756B             >
 164+ 756B             >
 164+ 756B             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95F             >
 164+ E95F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95F             >Latest_Definition defl  Heap_Ptr
 164+ E95F             >
 164+ E95F             >                // dummy db directives used to calculate length of namec
 164+ E95F 28          >                db      "("
 164+ E960             >len_NFA         defl    $ - temp_NFA
 164+ E960             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95F             >
 164+ E95F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E960 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E961             >                org     $-1                 // alter last byte of Name just above to set
 164+ E960 A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E961             >
 164+ E961 4F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E963             >Prev_Ptr        defl    Heap_Ptr
 164+ E963             >
 164+ E963             >mirror_Ptr      defl    $
 164+ E963             >
 164+ E963 6D 75       >                dw      Dict_Ptr + 2        // xt
 164+ E965             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E965             >
 164+ E965             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E965             >
 164+ E965             >//              ______________________________________________________________________
 164+ E965             >//              Dictionary part
 164+ E965             >
 164+ E965             >                org     Dict_Ptr
 164+ 756B             >
 164+ 756B 63 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 756D             >
 164+ 756D             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 756D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 7570             >
 164+ 7570             >
 164+ 7570             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7570             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7570             >
 164+ 7570             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7570 A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 7574 D8 70 11 69                  dw      WORD, DROP              // word drop
 167+ 7578 53 68                        dw      EXIT                    // ;
 168+ 757A
 169+ 757A              //  ______________________________________________________________________
 170+ 757A              //
 171+ 757A              // quit         --
 172+ 757A              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 757A                              Colon_Def QUIT, "QUIT", is_normal
 173+ 757A             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 757A             >
 173+ 757A             >Dict_Ptr        defl    $
 173+ 757A             >
 173+ 757A             >//              ______________________________________________________________________
 173+ 757A             >//              Heap part
 173+ 757A             >
 173+ 757A             >
 173+ 757A             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E965             >
 173+ E965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E965             >Latest_Definition defl  Heap_Ptr
 173+ E965             >
 173+ E965             >                // dummy db directives used to calculate length of namec
 173+ E965 51 55 49 54 >                db      "QUIT"
 173+ E969             >len_NFA         defl    $ - temp_NFA
 173+ E969             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E965             >
 173+ E965 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E966 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E96A             >                org     $-1                 // alter last byte of Name just above to set
 173+ E969 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E96A             >
 173+ E96A 5F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E96C             >Prev_Ptr        defl    Heap_Ptr
 173+ E96C             >
 173+ E96C             >mirror_Ptr      defl    $
 173+ E96C             >
 173+ E96C 7C 75       >                dw      Dict_Ptr + 2        // xt
 173+ E96E             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96E             >
 173+ E96E             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96E             >
 173+ E96E             >//              ______________________________________________________________________
 173+ E96E             >//              Dictionary part
 173+ E96E             >
 173+ E96E             >                org     Dict_Ptr
 173+ 757A             >
 173+ 757A 6C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 757C             >
 173+ 757C             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 757C CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 757F             >
 173+ 757F             >
 173+ 757F             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 757F             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 757F             >
 173+ 757F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 757F
 175+ 757F A2 6B 9D 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 7583 FB 66 11 69                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7587 95 6A A2 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 758B A7 69
 178+ 758D 95 6A 36 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 7591 A7 69
 179+ 7593 86 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 7595                                                              // begin
 181+ 7595              Quit_Begin:
 182+ 7595 F4 6A 9D 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7599 4E 68
 183+ 759B B6 65                        dw      CR                      //      cr
 184+ 759D 75 70                        dw      QUERY                   //      query
 185+ 759F              Next_Breakpoint_1:
 186+ 759F DB 74                        dw      INTERPRET               //      interpret
 187+ 75A1 60 6B 9D 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 75A5 78 68
 188+ 75A7                                                              //      if
 189+ 75A7 F5 63                        dw      ZBRANCH
 190+ 75A9 07 00                        dw      Quit_Endif - $
 191+ 75AB 23 71                        dw          C_DOT_QUOTE
 192+ 75AD 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 75B0              Quit_Endif:                                     //      else
 194+ 75B0                                                              // again
 195+ 75B0 E8 63                        dw      BRANCH
 196+ 75B2 E3 FF                        dw      Quit_Begin - $
 197+ 75B4 53 68                        dw      EXIT                    // ;
 198+ 75B6
 199+ 75B6              //  ______________________________________________________________________
 200+ 75B6              //
 201+ 75B6              // abort        --
 202+ 75B6                              Colon_Def ABORT, "ABORT", is_normal
 202+ 75B6             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 75B6             >
 202+ 75B6             >Dict_Ptr        defl    $
 202+ 75B6             >
 202+ 75B6             >//              ______________________________________________________________________
 202+ 75B6             >//              Heap part
 202+ 75B6             >
 202+ 75B6             >
 202+ 75B6             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96E             >
 202+ E96E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96E             >Latest_Definition defl  Heap_Ptr
 202+ E96E             >
 202+ E96E             >                // dummy db directives used to calculate length of namec
 202+ E96E 41 42 4F 52 >                db      "ABORT"
 202+ E972 54          >
 202+ E973             >len_NFA         defl    $ - temp_NFA
 202+ E973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96E             >
 202+ E96E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96F 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E973 54          >
 202+ E974             >                org     $-1                 // alter last byte of Name just above to set
 202+ E973 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E974             >
 202+ E974 65 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E976             >Prev_Ptr        defl    Heap_Ptr
 202+ E976             >
 202+ E976             >mirror_Ptr      defl    $
 202+ E976             >
 202+ E976 B8 75       >                dw      Dict_Ptr + 2        // xt
 202+ E978             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E978             >
 202+ E978             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E978             >
 202+ E978             >//              ______________________________________________________________________
 202+ E978             >//              Dictionary part
 202+ E978             >
 202+ E978             >                org     Dict_Ptr
 202+ 75B6             >
 202+ 75B6 76 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 75B8             >
 202+ 75B8             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 75B8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 75BB             >
 202+ 75BB             >
 202+ 75BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 75BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 75BB             >
 202+ 75BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 75BB EE 6A 9D 69                  dw      S0, FETCH               // s0 @
 204+ 75BF B8 6A                        dw      BL                      // bl
 205+ 75C1 08 69 A7 69                  dw      OVER, STORE             // over !
 206+ 75C5 43 68                        dw      SPSTORE                 // sp!
 207+ 75C7 CF 6E                        dw      DECIMAL                 // decimal
 208+ 75C9 51 75                        dw      FORTH                   // [compile] forth
 209+ 75CB 5E 75                        dw      DEFINITIONS             // definitions
 210+ 75CD
 211+ 75CD 86 6E                        dw      SQUARED_OPEN            // [compile] [
 212+ 75CF F4 6A 9D 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 75D3 4E 68
 213+ 75D5
 214+ 75D5              Autoexec_Ptr:
 215+ 75D5 F8 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 75D7 7C 75                        dw      QUIT                    // quit
 217+ 75D9 53 68                        dw      EXIT                    // ;
 218+ 75DB
 219+ 75DB              //  ______________________________________________________________________
 220+ 75DB              //
 221+ 75DB              // warm         --
 222+ 75DB                              Colon_Def WARM, "WARM", is_normal
 222+ 75DB             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 75DB             >
 222+ 75DB             >Dict_Ptr        defl    $
 222+ 75DB             >
 222+ 75DB             >//              ______________________________________________________________________
 222+ 75DB             >//              Heap part
 222+ 75DB             >
 222+ 75DB             >
 222+ 75DB             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E978             >
 222+ E978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E978             >Latest_Definition defl  Heap_Ptr
 222+ E978             >
 222+ E978             >                // dummy db directives used to calculate length of namec
 222+ E978 57 41 52 4D >                db      "WARM"
 222+ E97C             >len_NFA         defl    $ - temp_NFA
 222+ E97C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E978             >
 222+ E978 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E979 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E97D             >                org     $-1                 // alter last byte of Name just above to set
 222+ E97C CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E97D             >
 222+ E97D 6E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E97F             >Prev_Ptr        defl    Heap_Ptr
 222+ E97F             >
 222+ E97F             >mirror_Ptr      defl    $
 222+ E97F             >
 222+ E97F DD 75       >                dw      Dict_Ptr + 2        // xt
 222+ E981             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E981             >
 222+ E981             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E981             >
 222+ E981             >//              ______________________________________________________________________
 222+ E981             >//              Dictionary part
 222+ E981             >
 222+ E981             >                org     Dict_Ptr
 222+ 75DB             >
 222+ 75DB 7F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 75DD             >
 222+ 75DD             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 75DD CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 75E0             >
 222+ 75E0             >
 222+ 75E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 75E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 75E0             >
 222+ 75E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 75E0 A1 78                        dw      BLK_INIT                // blk-init
 224+ 75E2 D4 7F                        dw      SPLASH                  // splash
 225+ 75E4                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 75E4 B8 75                        dw      ABORT                   // abort
 227+ 75E6 53 68                        dw      EXIT                    // exit
 228+ 75E8
 229+ 75E8              //  ______________________________________________________________________
 230+ 75E8              //
 231+ 75E8              // cold         --
 232+ 75E8                              Colon_Def COLD, "COLD", is_normal
 232+ 75E8             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 75E8             >
 232+ 75E8             >Dict_Ptr        defl    $
 232+ 75E8             >
 232+ 75E8             >//              ______________________________________________________________________
 232+ 75E8             >//              Heap part
 232+ 75E8             >
 232+ 75E8             >
 232+ 75E8             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E981             >
 232+ E981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E981             >Latest_Definition defl  Heap_Ptr
 232+ E981             >
 232+ E981             >                // dummy db directives used to calculate length of namec
 232+ E981 43 4F 4C 44 >                db      "COLD"
 232+ E985             >len_NFA         defl    $ - temp_NFA
 232+ E985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E981             >
 232+ E981 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E982 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E986             >                org     $-1                 // alter last byte of Name just above to set
 232+ E985 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E986             >
 232+ E986 78 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E988             >Prev_Ptr        defl    Heap_Ptr
 232+ E988             >
 232+ E988             >mirror_Ptr      defl    $
 232+ E988             >
 232+ E988 EA 75       >                dw      Dict_Ptr + 2        // xt
 232+ E98A             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E98A             >
 232+ E98A             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E98A             >
 232+ E98A             >//              ______________________________________________________________________
 232+ E98A             >//              Dictionary part
 232+ E98A             >
 232+ E98A             >                org     Dict_Ptr
 232+ 75E8             >
 232+ 75E8 88 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 75EA             >
 232+ 75EA             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 75EA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 75ED             >
 232+ 75ED             >
 232+ 75ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 75ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 75ED             >
 232+ 75ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 75ED 5C 6A 5C 6A                  dw      NOOP, NOOP
 234+ 75F1 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 75F5 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 75F9 9D 69                        dw      FETCH                   // @
 237+ 75FB A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 75FF A6 68
 238+ 7601 A3 63 16 00                  dw      LIT, 22                 // 22
 239+ 7605 94 67                        dw      CMOVE
 240+ 7607 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 760B 9D 69                        dw      FETCH                   // @
 242+ 760D A3 63 58 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 7611 A7 69                        dw      STORE                   // !
 244+ 7613 95 6A 30 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 7617 A7 69
 245+ 7619 1E 6B 9D 69                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 761D 2C 69
 246+ 761F 8A 6B A7 69                  dw      USED, STORE             // used !
 247+ 7623 90 6B A7 69                  dw      PREV, STORE             // prev !
 248+ 7627 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 762B 9C 6B A7 69
 249+ 762F              //              dw      LIT, 8
 250+ 762F              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 762F 38 79                        dw      EMPTY_BUFFERS
 252+ 7631 95 6A 36 6B                  dw      ZERO, BLK, STORE
 252+ 7635 A7 69
 253+ 7637 95 6A A2 6B                  dw      ZERO, SOURCE_ID, STORE
 253+ 763B A7 69
 254+ 763D
 255+ 763D DD 75        Warm_Start:     dw      WARM
 256+ 763F EA 75        Cold_Start:     dw      COLD
 257+ 7641 53 68                        dw      EXIT
 258+ 7643
 259+ 7643              //  ______________________________________________________________________
 260+ 7643              WarmRoutine:
 261+ 7643              ColdRoutine:
 262+ 7643 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 263+ 7647
 264+ 7647 D9                           exx
 265+ 7648 E5                           push    hl                      // save Basic's return address
 266+ 7649 D9                           exx
 267+ 764A ED 73 6E 63                  ld      (SP_Basic), sp
 268+ 764E
 269+ 764E                              // pre-set the four main 16-bit registers
 270+ 764E ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 271+ 7652 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 272+ 7655                              // ld      de, (R0_origin)         // Return Stack Pointer
 273+ 7655                              ldrphl
 273+ 7655 22 96 63    >                ld      (RP_Pointer),hl
 274+ 7658 EB                           ex      de, hl
 275+ 7659 01 3D 76                     ld      bc, Warm_Start          // Instruction Pointer
 276+ 765C
 277+ 765C 38 02                        jr      c, Warm_Skip
 278+ 765E 03                           inc     bc
 279+ 765F 03                           inc     bc
 280+ 7660              Warm_Skip:
 281+ 7660                              next
 281+ 7660 DD E9       >                jp      (ix)
 282+ 7662
 283+ 7662              //  ______________________________________________________________________
 284+ 7662              //
 285+ 7662              // basic        --
 286+ 7662                              New_Def BASIC, "BASIC", is_code, is_normal
 286+ 7662             >
 286+ 7662             >Dict_Ptr        defl    $
 286+ 7662             >
 286+ 7662             >//              ______________________________________________________________________
 286+ 7662             >//              Heap part
 286+ 7662             >
 286+ 7662             >
 286+ 7662             >                org     (Heap_Ptr & $1FFF) + $E000
 286+ E98A             >
 286+ E98A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ E98A             >Latest_Definition defl  Heap_Ptr
 286+ E98A             >
 286+ E98A             >                // dummy db directives used to calculate length of namec
 286+ E98A 42 41 53 49 >                db      "BASIC"
 286+ E98E 43          >
 286+ E98F             >len_NFA         defl    $ - temp_NFA
 286+ E98F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ E98A             >
 286+ E98A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ E98B 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 286+ E98F 43          >
 286+ E990             >                org     $-1                 // alter last byte of Name just above to set
 286+ E98F C3          >                db      {b $} | END_BIT     // msb as name end
 286+ E990             >
 286+ E990 81 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 286+ E992             >Prev_Ptr        defl    Heap_Ptr
 286+ E992             >
 286+ E992             >mirror_Ptr      defl    $
 286+ E992             >
 286+ E992 64 76       >                dw      Dict_Ptr + 2        // xt
 286+ E994             >Heap_Ptr        defl    $ - $E000           // save current HP
 286+ E994             >
 286+ E994             >Current_HP      defl  $ - $E000             // used to set HP once!
 286+ E994             >
 286+ E994             >//              ______________________________________________________________________
 286+ E994             >//              Dictionary part
 286+ E994             >
 286+ E994             >                org     Dict_Ptr
 286+ 7662             >
 286+ 7662 92 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 286+ 7664             >
 286+ 7664             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 7664 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 286+ 7664 ~           >
 286+ 7664 ~           >
 286+ 7664             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 7664             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 7664             >
 286+ 7664             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 7664 C1                           pop     bc                      // return  TOS  value to Basic
 288+ 7665 21 00 00                     ld      hl, 0
 289+ 7668 39                           add     hl, sp
 290+ 7669 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 291+ 766D              //              nop
 292+ 766D 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 293+ 7670 D9                           exx
 294+ 7671 E1                           pop     hl                      // restore h'l'
 295+ 7672 D9                           exx
 296+ 7673 C9                           ret                             // to where USR Basic was left
 297+ 7674
 298+ 7674              //  ______________________________________________________________________
 299+ 7674              //
 300+ 7674              // +-           n1 n2 -- n3
 301+ 7674              // leaves n1 with the sign of n2 as n3.
 302+ 7674                              Colon_Def PLUS_MINUS, "+-", is_normal
 302+ 7674             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 302+ 7674             >
 302+ 7674             >Dict_Ptr        defl    $
 302+ 7674             >
 302+ 7674             >//              ______________________________________________________________________
 302+ 7674             >//              Heap part
 302+ 7674             >
 302+ 7674             >
 302+ 7674             >                org     (Heap_Ptr & $1FFF) + $E000
 302+ E994             >
 302+ E994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ E994             >Latest_Definition defl  Heap_Ptr
 302+ E994             >
 302+ E994             >                // dummy db directives used to calculate length of namec
 302+ E994 2B 2D       >                db      "+-"
 302+ E996             >len_NFA         defl    $ - temp_NFA
 302+ E996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ E994             >
 302+ E994 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ E995 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 302+ E997             >                org     $-1                 // alter last byte of Name just above to set
 302+ E996 AD          >                db      {b $} | END_BIT     // msb as name end
 302+ E997             >
 302+ E997 8A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 302+ E999             >Prev_Ptr        defl    Heap_Ptr
 302+ E999             >
 302+ E999             >mirror_Ptr      defl    $
 302+ E999             >
 302+ E999 76 76       >                dw      Dict_Ptr + 2        // xt
 302+ E99B             >Heap_Ptr        defl    $ - $E000           // save current HP
 302+ E99B             >
 302+ E99B             >Current_HP      defl  $ - $E000             // used to set HP once!
 302+ E99B             >
 302+ E99B             >//              ______________________________________________________________________
 302+ E99B             >//              Dictionary part
 302+ E99B             >
 302+ E99B             >                org     Dict_Ptr
 302+ 7674             >
 302+ 7674 99 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 302+ 7676             >
 302+ 7676             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 7676 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 302+ 7679             >
 302+ 7679             >
 302+ 7679             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 7679             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 7679             >
 302+ 7679             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 7679 8B 68                        dw      ZLESS                   // 0<
 304+ 767B                                                              // if
 305+ 767B F5 63                        dw      ZBRANCH
 306+ 767D 04 00                        dw      Plus_Minus_Endif - $
 307+ 767F E7 68                        dw          MINUS               //      minus
 308+ 7681              Plus_Minus_Endif:                               // endif
 309+ 7681 53 68                        dw      EXIT                    // ;
 310+ 7683
 311+ 7683              //  ______________________________________________________________________
 312+ 7683              //
 313+ 7683              // d+-          d1 n -- d2
 314+ 7683              // leaves d1 with the sign of n as d2.
 315+ 7683                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 315+ 7683             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 315+ 7683             >
 315+ 7683             >Dict_Ptr        defl    $
 315+ 7683             >
 315+ 7683             >//              ______________________________________________________________________
 315+ 7683             >//              Heap part
 315+ 7683             >
 315+ 7683             >
 315+ 7683             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ E99B             >
 315+ E99B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ E99B             >Latest_Definition defl  Heap_Ptr
 315+ E99B             >
 315+ E99B             >                // dummy db directives used to calculate length of namec
 315+ E99B 44 2B 2D    >                db      "D+-"
 315+ E99E             >len_NFA         defl    $ - temp_NFA
 315+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ E99B             >
 315+ E99B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ E99C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 315+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 315+ E99E AD          >                db      {b $} | END_BIT     // msb as name end
 315+ E99F             >
 315+ E99F 94 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 315+ E9A1             >
 315+ E9A1             >mirror_Ptr      defl    $
 315+ E9A1             >
 315+ E9A1 85 76       >                dw      Dict_Ptr + 2        // xt
 315+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ E9A3             >
 315+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ E9A3             >
 315+ E9A3             >//              ______________________________________________________________________
 315+ E9A3             >//              Dictionary part
 315+ E9A3             >
 315+ E9A3             >                org     Dict_Ptr
 315+ 7683             >
 315+ 7683 A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 7685             >
 315+ 7685             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 7685 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 7688             >
 315+ 7688             >
 315+ 7688             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 7688             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 7688             >
 315+ 7688             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 7688 8B 68                        dw      ZLESS                   // 0<
 317+ 768A                                                              // if
 318+ 768A F5 63                        dw      ZBRANCH
 319+ 768C 04 00                        dw      DPlus_Minus_Endif - $
 320+ 768E F5 68                        dw          DMINUS              //      dminus
 321+ 7690              DPlus_Minus_Endif:                              // endif
 322+ 7690 53 68                        dw      EXIT                    // ;
 323+ 7692
 324+ 7692              //  ______________________________________________________________________
 325+ 7692              //
 326+ 7692              // abs          n1 -- n2
 327+ 7692                              Colon_Def ABS_OP, "ABS", is_normal
 327+ 7692             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 327+ 7692             >
 327+ 7692             >Dict_Ptr        defl    $
 327+ 7692             >
 327+ 7692             >//              ______________________________________________________________________
 327+ 7692             >//              Heap part
 327+ 7692             >
 327+ 7692             >
 327+ 7692             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E9A3             >
 327+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E9A3             >Latest_Definition defl  Heap_Ptr
 327+ E9A3             >
 327+ E9A3             >                // dummy db directives used to calculate length of namec
 327+ E9A3 41 42 53    >                db      "ABS"
 327+ E9A6             >len_NFA         defl    $ - temp_NFA
 327+ E9A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E9A3             >
 327+ E9A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E9A4 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 327+ E9A7             >                org     $-1                 // alter last byte of Name just above to set
 327+ E9A6 D3          >                db      {b $} | END_BIT     // msb as name end
 327+ E9A7             >
 327+ E9A7 9B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E9A9             >Prev_Ptr        defl    Heap_Ptr
 327+ E9A9             >
 327+ E9A9             >mirror_Ptr      defl    $
 327+ E9A9             >
 327+ E9A9 94 76       >                dw      Dict_Ptr + 2        // xt
 327+ E9AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E9AB             >
 327+ E9AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E9AB             >
 327+ E9AB             >//              ______________________________________________________________________
 327+ E9AB             >//              Dictionary part
 327+ E9AB             >
 327+ E9AB             >                org     Dict_Ptr
 327+ 7692             >
 327+ 7692 A9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 7694             >
 327+ 7694             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 7694 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 327+ 7697             >
 327+ 7697             >
 327+ 7697             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 7697             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 7697             >
 327+ 7697             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 7697 2C 69                        dw      DUP                     // dup
 329+ 7699 76 76                        dw      PLUS_MINUS              // +-
 330+ 769B 53 68                        dw      EXIT                    // ;
 331+ 769D
 332+ 769D              //  ______________________________________________________________________
 333+ 769D              //
 334+ 769D              // dabs         d1 -- d2
 335+ 769D                              Colon_Def DABS, "DABS", is_normal
 335+ 769D             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 335+ 769D             >
 335+ 769D             >Dict_Ptr        defl    $
 335+ 769D             >
 335+ 769D             >//              ______________________________________________________________________
 335+ 769D             >//              Heap part
 335+ 769D             >
 335+ 769D             >
 335+ 769D             >                org     (Heap_Ptr & $1FFF) + $E000
 335+ E9AB             >
 335+ E9AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ E9AB             >Latest_Definition defl  Heap_Ptr
 335+ E9AB             >
 335+ E9AB             >                // dummy db directives used to calculate length of namec
 335+ E9AB 44 41 42 53 >                db      "DABS"
 335+ E9AF             >len_NFA         defl    $ - temp_NFA
 335+ E9AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ E9AB             >
 335+ E9AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ E9AC 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 335+ E9B0             >                org     $-1                 // alter last byte of Name just above to set
 335+ E9AF D3          >                db      {b $} | END_BIT     // msb as name end
 335+ E9B0             >
 335+ E9B0 A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 335+ E9B2             >Prev_Ptr        defl    Heap_Ptr
 335+ E9B2             >
 335+ E9B2             >mirror_Ptr      defl    $
 335+ E9B2             >
 335+ E9B2 9F 76       >                dw      Dict_Ptr + 2        // xt
 335+ E9B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 335+ E9B4             >
 335+ E9B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 335+ E9B4             >
 335+ E9B4             >//              ______________________________________________________________________
 335+ E9B4             >//              Dictionary part
 335+ E9B4             >
 335+ E9B4             >                org     Dict_Ptr
 335+ 769D             >
 335+ 769D B2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 335+ 769F             >
 335+ 769F             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 769F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 335+ 76A2             >
 335+ 76A2             >
 335+ 76A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 76A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 76A2             >
 335+ 76A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 76A2 2C 69                        dw      DUP                     // dup
 337+ 76A4 85 76                        dw      DPLUS_MINUS             // d+-
 338+ 76A6 53 68                        dw      EXIT                    // ;
 339+ 76A8
 340+ 76A8              //  ______________________________________________________________________
 341+ 76A8              //
 342+ 76A8              // m*           n1 n2 -- d
 343+ 76A8              // multiply two integer giving a double
 344+ 76A8                              Colon_Def MMUL, "M*", is_normal
 344+ 76A8             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 344+ 76A8             >
 344+ 76A8             >Dict_Ptr        defl    $
 344+ 76A8             >
 344+ 76A8             >//              ______________________________________________________________________
 344+ 76A8             >//              Heap part
 344+ 76A8             >
 344+ 76A8             >
 344+ 76A8             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ E9B4             >
 344+ E9B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ E9B4             >Latest_Definition defl  Heap_Ptr
 344+ E9B4             >
 344+ E9B4             >                // dummy db directives used to calculate length of namec
 344+ E9B4 4D 2A       >                db      "M*"
 344+ E9B6             >len_NFA         defl    $ - temp_NFA
 344+ E9B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ E9B4             >
 344+ E9B4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ E9B5 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 344+ E9B7             >                org     $-1                 // alter last byte of Name just above to set
 344+ E9B6 AA          >                db      {b $} | END_BIT     // msb as name end
 344+ E9B7             >
 344+ E9B7 AB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ E9B9             >Prev_Ptr        defl    Heap_Ptr
 344+ E9B9             >
 344+ E9B9             >mirror_Ptr      defl    $
 344+ E9B9             >
 344+ E9B9 AA 76       >                dw      Dict_Ptr + 2        // xt
 344+ E9BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ E9BB             >
 344+ E9BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ E9BB             >
 344+ E9BB             >//              ______________________________________________________________________
 344+ E9BB             >//              Dictionary part
 344+ E9BB             >
 344+ E9BB             >                org     Dict_Ptr
 344+ 76A8             >
 344+ 76A8 B9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 76AA             >
 344+ 76AA             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 76AA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 76AD             >
 344+ 76AD             >
 344+ 76AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 76AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 76AD             >
 344+ 76AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 76AD 7B 69 2E 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 345+ 76B1 5D 68
 346+ 76B3 94 76 25 69                  dw      ABS_OP, SWAP            // abs swap
 347+ 76B7 94 76 B8 67                  dw      ABS_OP, UM_MUL          // abs um*
 348+ 76BB 68 68 85 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 349+ 76BF 53 68                        dw      EXIT                    // ;
 350+ 76C1
 351+ 76C1              //  ______________________________________________________________________
 352+ 76C1              //
 353+ 76C1              // sm/rem       d n -- q r
 354+ 76C1              // Symmetric division: divides a double into n giving quotient q and remainder r
 355+ 76C1              // the remainder has the sign of d.
 356+ 76C1                              Colon_Def SMDIVM, "SM/REM", is_normal
 356+ 76C1             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 356+ 76C1             >
 356+ 76C1             >Dict_Ptr        defl    $
 356+ 76C1             >
 356+ 76C1             >//              ______________________________________________________________________
 356+ 76C1             >//              Heap part
 356+ 76C1             >
 356+ 76C1             >
 356+ 76C1             >                org     (Heap_Ptr & $1FFF) + $E000
 356+ E9BB             >
 356+ E9BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ E9BB             >Latest_Definition defl  Heap_Ptr
 356+ E9BB             >
 356+ E9BB             >                // dummy db directives used to calculate length of namec
 356+ E9BB 53 4D 2F 52 >                db      "SM/REM"
 356+ E9BF 45 4D       >
 356+ E9C1             >len_NFA         defl    $ - temp_NFA
 356+ E9C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ E9BB             >
 356+ E9BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ E9BC 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 356+ E9C0 45 4D       >
 356+ E9C2             >                org     $-1                 // alter last byte of Name just above to set
 356+ E9C1 CD          >                db      {b $} | END_BIT     // msb as name end
 356+ E9C2             >
 356+ E9C2 B4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 356+ E9C4             >Prev_Ptr        defl    Heap_Ptr
 356+ E9C4             >
 356+ E9C4             >mirror_Ptr      defl    $
 356+ E9C4             >
 356+ E9C4 C3 76       >                dw      Dict_Ptr + 2        // xt
 356+ E9C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 356+ E9C6             >
 356+ E9C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 356+ E9C6             >
 356+ E9C6             >//              ______________________________________________________________________
 356+ E9C6             >//              Dictionary part
 356+ E9C6             >
 356+ E9C6             >                org     Dict_Ptr
 356+ 76C1             >
 356+ 76C1 C4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 356+ 76C3             >
 356+ 76C3             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 76C3 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 356+ 76C6             >
 356+ 76C6             >
 356+ 76C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 76C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 76C6             >
 356+ 76C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 76C6 08 69 5D 68                  dw      OVER, TO_R, TO_R        // over >r >r
 357+ 76CA 5D 68
 358+ 76CC 9F 76 73 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 358+ 76D0 94 76
 359+ 76D2 E0 67                        dw      UMDIVMOD                // um/mod
 360+ 76D4 68 68                        dw      R_TO                    // r>
 361+ 76D6 73 68 2E 68                  dw      R_OP, XOR_OP            // r xor
 362+ 76DA 76 76 25 69                  dw      PLUS_MINUS, SWAP        // +- swap
 363+ 76DE 68 68                        dw      R_TO                    // r>
 364+ 76E0 76 76 25 69                  dw      PLUS_MINUS, SWAP        // +- swap
 365+ 76E4 53 68                        dw      EXIT                    // ;
 366+ 76E6
 367+ 76E6              //  ______________________________________________________________________
 368+ 76E6              //
 369+ 76E6              // fm/mod       d n -- q r
 370+ 76E6              // Floored division: divides a double into n giving quotient q and remainder r
 371+ 76E6              // the remainder has the sign of d.
 372+ 76E6                              Colon_Def FMDIVM, "FM/MOD", is_normal
 372+ 76E6             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 372+ 76E6             >
 372+ 76E6             >Dict_Ptr        defl    $
 372+ 76E6             >
 372+ 76E6             >//              ______________________________________________________________________
 372+ 76E6             >//              Heap part
 372+ 76E6             >
 372+ 76E6             >
 372+ 76E6             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E9C6             >
 372+ E9C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E9C6             >Latest_Definition defl  Heap_Ptr
 372+ E9C6             >
 372+ E9C6             >                // dummy db directives used to calculate length of namec
 372+ E9C6 46 4D 2F 4D >                db      "FM/MOD"
 372+ E9CA 4F 44       >
 372+ E9CC             >len_NFA         defl    $ - temp_NFA
 372+ E9CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E9C6             >
 372+ E9C6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E9C7 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 372+ E9CB 4F 44       >
 372+ E9CD             >                org     $-1                 // alter last byte of Name just above to set
 372+ E9CC C4          >                db      {b $} | END_BIT     // msb as name end
 372+ E9CD             >
 372+ E9CD BB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E9CF             >Prev_Ptr        defl    Heap_Ptr
 372+ E9CF             >
 372+ E9CF             >mirror_Ptr      defl    $
 372+ E9CF             >
 372+ E9CF E8 76       >                dw      Dict_Ptr + 2        // xt
 372+ E9D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E9D1             >
 372+ E9D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E9D1             >
 372+ E9D1             >//              ______________________________________________________________________
 372+ E9D1             >//              Dictionary part
 372+ E9D1             >
 372+ E9D1             >                org     Dict_Ptr
 372+ 76E6             >
 372+ 76E6 CF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 76E8             >
 372+ 76E8             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 76E8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 372+ 76EB             >
 372+ 76EB             >
 372+ 76EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 76EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 76EB             >
 372+ 76EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 76EB 2C 69 5D 68                  dw      DUP, TO_R               // dup >r
 374+ 76EF C3 76                        dw      SMDIVM
 375+ 76F1 08 69 2C 69                  dw      OVER, DUP
 376+ 76F5 78 68 78 68                  dw      ZEQUAL, ZEQUAL
 377+ 76F9 25 69 8B 68                  dw      SWAP, ZLESS
 378+ 76FD 73 68 8B 68                  dw      R_OP, ZLESS
 379+ 7701 2E 68 13 68                  dw      XOR_OP, AND_OP
 380+ 7705 F5 63                        dw      ZBRANCH
 381+ 7707 10 00                        dw      Fm_Mod_Else - $
 382+ 7709 C6 68                        dw          ONE_SUBTRACT
 383+ 770B 25 69 68 68                  dw          SWAP, R_TO
 384+ 770F A6 68 25 69                  dw          PLUS, SWAP
 385+ 7713 E8 63                        dw      BRANCH
 386+ 7715 06 00                        dw      Fm_Mod_Endif - $
 387+ 7717              Fm_Mod_Else:
 388+ 7717 68 68 11 69                  dw          R_TO, DROP
 389+ 771B              Fm_Mod_Endif:
 390+ 771B 53 68                        dw      EXIT
 391+ 771D              //              dw      TWO_DUP                 // 2dup
 392+ 771D              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 393+ 771D              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 394+ 771D              //              dw      UMDIVMOD                // um/mod
 395+ 771D              //              dw      SWAP                    // swap
 396+ 771D              //              dw      II, ZLESS               // i'
 397+ 771D              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 398+ 771D              //              dw      R_TO                    // r>
 399+ 771D              //              dw      PLUS_MINUS, SWAP        // +- swap
 400+ 771D              //              dw      R_OP                    // r@
 401+ 771D              //              dw      ZLESS                   // i'
 402+ 771D              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 403+ 771D              //              dw      R_TO                    // r>
 404+ 771D              //              dw      PLUS_MINUS              // +- swap
 405+ 771D              //              dw      EXIT                    // ;
 406+ 771D
 407+ 771D              //  ______________________________________________________________________
 408+ 771D              //
 409+ 771D              // m/mod        d n -- q r
 410+ 771D              // multiply two integer giving a double
 411+ 771D                              Colon_Def MDIVM, "M/MOD", is_normal
 411+ 771D             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 411+ 771D             >
 411+ 771D             >Dict_Ptr        defl    $
 411+ 771D             >
 411+ 771D             >//              ______________________________________________________________________
 411+ 771D             >//              Heap part
 411+ 771D             >
 411+ 771D             >
 411+ 771D             >                org     (Heap_Ptr & $1FFF) + $E000
 411+ E9D1             >
 411+ E9D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ E9D1             >Latest_Definition defl  Heap_Ptr
 411+ E9D1             >
 411+ E9D1             >                // dummy db directives used to calculate length of namec
 411+ E9D1 4D 2F 4D 4F >                db      "M/MOD"
 411+ E9D5 44          >
 411+ E9D6             >len_NFA         defl    $ - temp_NFA
 411+ E9D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ E9D1             >
 411+ E9D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ E9D2 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 411+ E9D6 44          >
 411+ E9D7             >                org     $-1                 // alter last byte of Name just above to set
 411+ E9D6 C4          >                db      {b $} | END_BIT     // msb as name end
 411+ E9D7             >
 411+ E9D7 C6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 411+ E9D9             >Prev_Ptr        defl    Heap_Ptr
 411+ E9D9             >
 411+ E9D9             >mirror_Ptr      defl    $
 411+ E9D9             >
 411+ E9D9 1F 77       >                dw      Dict_Ptr + 2        // xt
 411+ E9DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 411+ E9DB             >
 411+ E9DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 411+ E9DB             >
 411+ E9DB             >//              ______________________________________________________________________
 411+ E9DB             >//              Dictionary part
 411+ E9DB             >
 411+ E9DB             >                org     Dict_Ptr
 411+ 771D             >
 411+ 771D D9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 411+ 771F             >
 411+ 771F             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 771F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7722             >
 411+ 7722             >
 411+ 7722             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7722             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7722             >
 411+ 7722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7722 C3 76                        dw      SMDIVM
 413+ 7724 53 68                        dw      EXIT                    // ;
 414+ 7726
 415+ 7726              //  ______________________________________________________________________
 416+ 7726              //
 417+ 7726              // m/           d n -- q
 418+ 7726              // multiply two integer giving a double
 419+ 7726                              Colon_Def MDIV, "M/", is_normal
 419+ 7726             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 419+ 7726             >
 419+ 7726             >Dict_Ptr        defl    $
 419+ 7726             >
 419+ 7726             >//              ______________________________________________________________________
 419+ 7726             >//              Heap part
 419+ 7726             >
 419+ 7726             >
 419+ 7726             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ E9DB             >
 419+ E9DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ E9DB             >Latest_Definition defl  Heap_Ptr
 419+ E9DB             >
 419+ E9DB             >                // dummy db directives used to calculate length of namec
 419+ E9DB 4D 2F       >                db      "M/"
 419+ E9DD             >len_NFA         defl    $ - temp_NFA
 419+ E9DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ E9DB             >
 419+ E9DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ E9DC 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 419+ E9DE             >                org     $-1                 // alter last byte of Name just above to set
 419+ E9DD AF          >                db      {b $} | END_BIT     // msb as name end
 419+ E9DE             >
 419+ E9DE D1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ E9E0             >Prev_Ptr        defl    Heap_Ptr
 419+ E9E0             >
 419+ E9E0             >mirror_Ptr      defl    $
 419+ E9E0             >
 419+ E9E0 28 77       >                dw      Dict_Ptr + 2        // xt
 419+ E9E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ E9E2             >
 419+ E9E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ E9E2             >
 419+ E9E2             >//              ______________________________________________________________________
 419+ E9E2             >//              Dictionary part
 419+ E9E2             >
 419+ E9E2             >                org     Dict_Ptr
 419+ 7726             >
 419+ 7726 E0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7728             >
 419+ 7728             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7728 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 772B             >
 419+ 772B             >
 419+ 772B             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 772B             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 772B             >
 419+ 772B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 772B 1F 77 16 69                  dw      MDIVM, NIP
 421+ 772F 53 68                        dw      EXIT                    // ;
 422+ 7731
 423+ 7731              //  ______________________________________________________________________
 424+ 7731              //
 425+ 7731              // *            n1 n2 -- n3
 426+ 7731              // multiply two integer
 427+ 7731                              Colon_Def MUL, "*", is_normal
 427+ 7731             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 427+ 7731             >
 427+ 7731             >Dict_Ptr        defl    $
 427+ 7731             >
 427+ 7731             >//              ______________________________________________________________________
 427+ 7731             >//              Heap part
 427+ 7731             >
 427+ 7731             >
 427+ 7731             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E9E2             >
 427+ E9E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E9E2             >Latest_Definition defl  Heap_Ptr
 427+ E9E2             >
 427+ E9E2             >                // dummy db directives used to calculate length of namec
 427+ E9E2 2A          >                db      "*"
 427+ E9E3             >len_NFA         defl    $ - temp_NFA
 427+ E9E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E9E2             >
 427+ E9E2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E9E3 2A          >                db      "*"               // name string in 7-bit ascii, but
 427+ E9E4             >                org     $-1                 // alter last byte of Name just above to set
 427+ E9E3 AA          >                db      {b $} | END_BIT     // msb as name end
 427+ E9E4             >
 427+ E9E4 DB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E9E6             >Prev_Ptr        defl    Heap_Ptr
 427+ E9E6             >
 427+ E9E6             >mirror_Ptr      defl    $
 427+ E9E6             >
 427+ E9E6 33 77       >                dw      Dict_Ptr + 2        // xt
 427+ E9E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E9E8             >
 427+ E9E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E9E8             >
 427+ E9E8             >//              ______________________________________________________________________
 427+ E9E8             >//              Dictionary part
 427+ E9E8             >
 427+ E9E8             >                org     Dict_Ptr
 427+ 7731             >
 427+ 7731 E6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 7733             >
 427+ 7733             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 7733 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 7736             >
 427+ 7736             >
 427+ 7736             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 7736             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 7736             >
 427+ 7736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 7736 AA 76 11 69                  dw      MMUL, DROP              // m* drop
 429+ 773A 53 68                        dw      EXIT                    // ;
 430+ 773C
 431+ 773C              //  ______________________________________________________________________
 432+ 773C              //
 433+ 773C              // /mod         n1 n2 -- n3 n4
 434+ 773C              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 435+ 773C              // The remainder has the sign of n1
 436+ 773C                              Colon_Def DIVMOD, "/MOD", is_normal
 436+ 773C             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 436+ 773C             >
 436+ 773C             >Dict_Ptr        defl    $
 436+ 773C             >
 436+ 773C             >//              ______________________________________________________________________
 436+ 773C             >//              Heap part
 436+ 773C             >
 436+ 773C             >
 436+ 773C             >                org     (Heap_Ptr & $1FFF) + $E000
 436+ E9E8             >
 436+ E9E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ E9E8             >Latest_Definition defl  Heap_Ptr
 436+ E9E8             >
 436+ E9E8             >                // dummy db directives used to calculate length of namec
 436+ E9E8 2F 4D 4F 44 >                db      "/MOD"
 436+ E9EC             >len_NFA         defl    $ - temp_NFA
 436+ E9EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ E9E8             >
 436+ E9E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ E9E9 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 436+ E9ED             >                org     $-1                 // alter last byte of Name just above to set
 436+ E9EC C4          >                db      {b $} | END_BIT     // msb as name end
 436+ E9ED             >
 436+ E9ED E2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 436+ E9EF             >Prev_Ptr        defl    Heap_Ptr
 436+ E9EF             >
 436+ E9EF             >mirror_Ptr      defl    $
 436+ E9EF             >
 436+ E9EF 3E 77       >                dw      Dict_Ptr + 2        // xt
 436+ E9F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 436+ E9F1             >
 436+ E9F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 436+ E9F1             >
 436+ E9F1             >//              ______________________________________________________________________
 436+ E9F1             >//              Dictionary part
 436+ E9F1             >
 436+ E9F1             >                org     Dict_Ptr
 436+ 773C             >
 436+ 773C EF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 436+ 773E             >
 436+ 773E             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 773E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 7741             >
 436+ 7741             >
 436+ 7741             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 7741             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 7741             >
 436+ 7741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 7741 5D 68 EE 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 437+ 7745 68 68
 438+ 7747 1F 77                        dw      MDIVM                   // m/mod
 439+ 7749 53 68                        dw      EXIT                    // ;
 440+ 774B
 441+ 774B              //  ______________________________________________________________________
 442+ 774B              //
 443+ 774B              // /            n1 n2 -- n3
 444+ 774B              // division
 445+ 774B                              Colon_Def DIV, "/", is_normal
 445+ 774B             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 445+ 774B             >
 445+ 774B             >Dict_Ptr        defl    $
 445+ 774B             >
 445+ 774B             >//              ______________________________________________________________________
 445+ 774B             >//              Heap part
 445+ 774B             >
 445+ 774B             >
 445+ 774B             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ E9F1             >
 445+ E9F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ E9F1             >Latest_Definition defl  Heap_Ptr
 445+ E9F1             >
 445+ E9F1             >                // dummy db directives used to calculate length of namec
 445+ E9F1 2F          >                db      "/"
 445+ E9F2             >len_NFA         defl    $ - temp_NFA
 445+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ E9F1             >
 445+ E9F1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ E9F2 2F          >                db      "/"               // name string in 7-bit ascii, but
 445+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 445+ E9F2 AF          >                db      {b $} | END_BIT     // msb as name end
 445+ E9F3             >
 445+ E9F3 E8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 445+ E9F5             >
 445+ E9F5             >mirror_Ptr      defl    $
 445+ E9F5             >
 445+ E9F5 4D 77       >                dw      Dict_Ptr + 2        // xt
 445+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ E9F7             >
 445+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ E9F7             >
 445+ E9F7             >//              ______________________________________________________________________
 445+ E9F7             >//              Dictionary part
 445+ E9F7             >
 445+ E9F7             >                org     Dict_Ptr
 445+ 774B             >
 445+ 774B F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 774D             >
 445+ 774D             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 774D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 7750             >
 445+ 7750             >
 445+ 7750             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 7750             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 7750             >
 445+ 7750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 7750 3E 77 16 69                  dw      DIVMOD, NIP             // /mod nip
 447+ 7754 53 68                        dw      EXIT                    // ;
 448+ 7756
 449+ 7756              //  ______________________________________________________________________
 450+ 7756              //
 451+ 7756              // mod          n1 n2 -- n3
 452+ 7756                              Colon_Def MOD, "MOD", is_normal
 452+ 7756             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 452+ 7756             >
 452+ 7756             >Dict_Ptr        defl    $
 452+ 7756             >
 452+ 7756             >//              ______________________________________________________________________
 452+ 7756             >//              Heap part
 452+ 7756             >
 452+ 7756             >
 452+ 7756             >                org     (Heap_Ptr & $1FFF) + $E000
 452+ E9F7             >
 452+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 452+ E9F7             >Latest_Definition defl  Heap_Ptr
 452+ E9F7             >
 452+ E9F7             >                // dummy db directives used to calculate length of namec
 452+ E9F7 4D 4F 44    >                db      "MOD"
 452+ E9FA             >len_NFA         defl    $ - temp_NFA
 452+ E9FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 452+ E9F7             >
 452+ E9F7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 452+ E9F8 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 452+ E9FB             >                org     $-1                 // alter last byte of Name just above to set
 452+ E9FA C4          >                db      {b $} | END_BIT     // msb as name end
 452+ E9FB             >
 452+ E9FB F1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 452+ E9FD             >Prev_Ptr        defl    Heap_Ptr
 452+ E9FD             >
 452+ E9FD             >mirror_Ptr      defl    $
 452+ E9FD             >
 452+ E9FD 58 77       >                dw      Dict_Ptr + 2        // xt
 452+ E9FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 452+ E9FF             >
 452+ E9FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 452+ E9FF             >
 452+ E9FF             >//              ______________________________________________________________________
 452+ E9FF             >//              Dictionary part
 452+ E9FF             >
 452+ E9FF             >                org     Dict_Ptr
 452+ 7756             >
 452+ 7756 FD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 452+ 7758             >
 452+ 7758             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 452+ 7758 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 452+ 775B             >
 452+ 775B             >
 452+ 775B             >                endif           ; ok        // for other definitions it "points" the correct handler
 452+ 775B             >                // Use of "; ok" to suppress "warning[fwdref]"
 452+ 775B             >
 452+ 775B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 453+ 775B 3E 77 11 69                  dw      DIVMOD, DROP            // /mod drop
 454+ 775F 53 68                        dw      EXIT                    // ;
 455+ 7761
 456+ 7761              //  ______________________________________________________________________
 457+ 7761              //
 458+ 7761              // */mod        n1 n2 n3 -- n4 n5
 459+ 7761              // leaves the quotient n5 and the remainder n4 of the operation
 460+ 7761              // (n1 * n2) / n3. The intermediate passage through a double number
 461+ 7761              // avoids loss of precision
 462+ 7761                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 462+ 7761             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 462+ 7761             >
 462+ 7761             >Dict_Ptr        defl    $
 462+ 7761             >
 462+ 7761             >//              ______________________________________________________________________
 462+ 7761             >//              Heap part
 462+ 7761             >
 462+ 7761             >
 462+ 7761             >                org     (Heap_Ptr & $1FFF) + $E000
 462+ E9FF             >
 462+ E9FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 462+ E9FF             >Latest_Definition defl  Heap_Ptr
 462+ E9FF             >
 462+ E9FF             >                // dummy db directives used to calculate length of namec
 462+ E9FF 2A 2F 4D 4F >                db      "*/MOD"
 462+ EA03 44          >
 462+ EA04             >len_NFA         defl    $ - temp_NFA
 462+ EA04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 462+ E9FF             >
 462+ E9FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 462+ EA00 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 462+ EA04 44          >
 462+ EA05             >                org     $-1                 // alter last byte of Name just above to set
 462+ EA04 C4          >                db      {b $} | END_BIT     // msb as name end
 462+ EA05             >
 462+ EA05 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 462+ EA07             >Prev_Ptr        defl    Heap_Ptr
 462+ EA07             >
 462+ EA07             >mirror_Ptr      defl    $
 462+ EA07             >
 462+ EA07 63 77       >                dw      Dict_Ptr + 2        // xt
 462+ EA09             >Heap_Ptr        defl    $ - $E000           // save current HP
 462+ EA09             >
 462+ EA09             >Current_HP      defl  $ - $E000             // used to set HP once!
 462+ EA09             >
 462+ EA09             >//              ______________________________________________________________________
 462+ EA09             >//              Dictionary part
 462+ EA09             >
 462+ EA09             >                org     Dict_Ptr
 462+ 7761             >
 462+ 7761 07 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 462+ 7763             >
 462+ 7763             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 462+ 7763 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 462+ 7766             >
 462+ 7766             >
 462+ 7766             >                endif           ; ok        // for other definitions it "points" the correct handler
 462+ 7766             >                // Use of "; ok" to suppress "warning[fwdref]"
 462+ 7766             >
 462+ 7766             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 463+ 7766 5D 68 AA 76                  dw      TO_R, MMUL              // >r  m*
 464+ 776A 68 68 1F 77                  dw      R_TO, MDIVM             // r>  m/mod
 465+ 776E 53 68                        dw      EXIT                    // ;
 466+ 7770
 467+ 7770              //  ______________________________________________________________________
 468+ 7770              //
 469+ 7770              // */          n1 n2 n3 -- n4
 470+ 7770              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 471+ 7770                              Colon_Def MUL_DIV, "*/", is_normal
 471+ 7770             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 471+ 7770             >
 471+ 7770             >Dict_Ptr        defl    $
 471+ 7770             >
 471+ 7770             >//              ______________________________________________________________________
 471+ 7770             >//              Heap part
 471+ 7770             >
 471+ 7770             >
 471+ 7770             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EA09             >
 471+ EA09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EA09             >Latest_Definition defl  Heap_Ptr
 471+ EA09             >
 471+ EA09             >                // dummy db directives used to calculate length of namec
 471+ EA09 2A 2F       >                db      "*/"
 471+ EA0B             >len_NFA         defl    $ - temp_NFA
 471+ EA0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EA09             >
 471+ EA09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EA0A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 471+ EA0C             >                org     $-1                 // alter last byte of Name just above to set
 471+ EA0B AF          >                db      {b $} | END_BIT     // msb as name end
 471+ EA0C             >
 471+ EA0C FF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EA0E             >Prev_Ptr        defl    Heap_Ptr
 471+ EA0E             >
 471+ EA0E             >mirror_Ptr      defl    $
 471+ EA0E             >
 471+ EA0E 72 77       >                dw      Dict_Ptr + 2        // xt
 471+ EA10             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EA10             >
 471+ EA10             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EA10             >
 471+ EA10             >//              ______________________________________________________________________
 471+ EA10             >//              Dictionary part
 471+ EA10             >
 471+ EA10             >                org     Dict_Ptr
 471+ 7770             >
 471+ 7770 0E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 7772             >
 471+ 7772             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7772 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7775             >
 471+ 7775             >
 471+ 7775             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7775             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7775             >
 471+ 7775             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7775 63 77                        dw     MUL_DIV_MOD              // */mod
 473+ 7777 16 69                        dw     NIP                      // nip
 474+ 7779 53 68                        dw     EXIT                     // ;
 475+ 777B
 476+ 777B
 477+ 777B              //  ______________________________________________________________________
 478+ 777B              //
 479+ 777B              // m/mod        ud1 u2 -- u3 ud4
 480+ 777B              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 481+ 777B              // All terms are unsigned.
 482+ 777B              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 483+ 777B              //              dw      TO_R                    // >r           ( ud1 )
 484+ 777B              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 485+ 777B              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 486+ 777B              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 487+ 777B              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 488+ 777B              //              dw      EXIT                    // ;
 489+ 777B
 490+ 777B              //  ______________________________________________________________________
 491+ 777B              //
 492+ 777B              // (line)       n1 n2 -- a b
 493+ 777B              // sends the line n1 of block n2 to the disk buffer.
 494+ 777B              // it returns the address a and ca counter b = C/L meaning a whole line.
 495+ 777B                              Colon_Def CLINE, "(LINE)", is_normal
 495+ 777B             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 495+ 777B             >
 495+ 777B             >Dict_Ptr        defl    $
 495+ 777B             >
 495+ 777B             >//              ______________________________________________________________________
 495+ 777B             >//              Heap part
 495+ 777B             >
 495+ 777B             >
 495+ 777B             >                org     (Heap_Ptr & $1FFF) + $E000
 495+ EA10             >
 495+ EA10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ EA10             >Latest_Definition defl  Heap_Ptr
 495+ EA10             >
 495+ EA10             >                // dummy db directives used to calculate length of namec
 495+ EA10 28 4C 49 4E >                db      "(LINE)"
 495+ EA14 45 29       >
 495+ EA16             >len_NFA         defl    $ - temp_NFA
 495+ EA16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ EA10             >
 495+ EA10 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ EA11 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 495+ EA15 45 29       >
 495+ EA17             >                org     $-1                 // alter last byte of Name just above to set
 495+ EA16 A9          >                db      {b $} | END_BIT     // msb as name end
 495+ EA17             >
 495+ EA17 09 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 495+ EA19             >Prev_Ptr        defl    Heap_Ptr
 495+ EA19             >
 495+ EA19             >mirror_Ptr      defl    $
 495+ EA19             >
 495+ EA19 7D 77       >                dw      Dict_Ptr + 2        // xt
 495+ EA1B             >Heap_Ptr        defl    $ - $E000           // save current HP
 495+ EA1B             >
 495+ EA1B             >Current_HP      defl  $ - $E000             // used to set HP once!
 495+ EA1B             >
 495+ EA1B             >//              ______________________________________________________________________
 495+ EA1B             >//              Dictionary part
 495+ EA1B             >
 495+ EA1B             >                org     Dict_Ptr
 495+ 777B             >
 495+ 777B 19 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 495+ 777D             >
 495+ 777D             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 777D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 7780             >
 495+ 7780             >
 495+ 7780             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 7780             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 7780             >
 495+ 7780             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 7780 5D 68                        dw      TO_R                    // >r
 497+ 7782 BF 6A                        dw      CL                      // c/l
 498+ 7784 C6 6A 63 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 499+ 7788 68 68                        dw      R_TO                    // r>
 500+ 778A CD 6A 33 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 500+ 778E A6 68
 501+ 7790 90 79                        dw      BLOCK                   // block   ( forward )
 502+ 7792 A6 68                        dw      PLUS                    // +
 503+ 7794 BF 6A                        dw      CL                      // c/l
 504+ 7796 53 68                        dw      EXIT                    // ;
 505+ 7798
 506+ 7798              //  ______________________________________________________________________
 507+ 7798              //
 508+ 7798              // .line        n1 n2 --
 509+ 7798              // Sends to output line  n1  of screen n2.
 510+ 7798                              Colon_Def DOT_LINE, ".LINE", is_normal
 510+ 7798             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 510+ 7798             >
 510+ 7798             >Dict_Ptr        defl    $
 510+ 7798             >
 510+ 7798             >//              ______________________________________________________________________
 510+ 7798             >//              Heap part
 510+ 7798             >
 510+ 7798             >
 510+ 7798             >                org     (Heap_Ptr & $1FFF) + $E000
 510+ EA1B             >
 510+ EA1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ EA1B             >Latest_Definition defl  Heap_Ptr
 510+ EA1B             >
 510+ EA1B             >                // dummy db directives used to calculate length of namec
 510+ EA1B 2E 4C 49 4E >                db      ".LINE"
 510+ EA1F 45          >
 510+ EA20             >len_NFA         defl    $ - temp_NFA
 510+ EA20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ EA1B             >
 510+ EA1B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ EA1C 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 510+ EA20 45          >
 510+ EA21             >                org     $-1                 // alter last byte of Name just above to set
 510+ EA20 C5          >                db      {b $} | END_BIT     // msb as name end
 510+ EA21             >
 510+ EA21 10 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 510+ EA23             >Prev_Ptr        defl    Heap_Ptr
 510+ EA23             >
 510+ EA23             >mirror_Ptr      defl    $
 510+ EA23             >
 510+ EA23 9A 77       >                dw      Dict_Ptr + 2        // xt
 510+ EA25             >Heap_Ptr        defl    $ - $E000           // save current HP
 510+ EA25             >
 510+ EA25             >Current_HP      defl  $ - $E000             // used to set HP once!
 510+ EA25             >
 510+ EA25             >//              ______________________________________________________________________
 510+ EA25             >//              Dictionary part
 510+ EA25             >
 510+ EA25             >                org     Dict_Ptr
 510+ 7798             >
 510+ 7798 23 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 510+ 779A             >
 510+ 779A             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 779A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 779D             >
 510+ 779D             >
 510+ 779D             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 779D             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 779D             >
 510+ 779D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 779D 7D 77 9D 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 511+ 77A1 86 6F
 512+ 77A3 53 68                        dw      EXIT                    // ;
 513+ 77A5
 514+ 77A5              //  ______________________________________________________________________
 515+ 77A5              //
 516+ 77A5              // message       n1 n2 --
 517+ 77A5              // prints error message to current channel.
 518+ 77A5              // if WARNING is 0, prints "MSG#n".
 519+ 77A5              // if WARNING is 1, prints line n of screen 4.
 520+ 77A5              // if WARNING is -1, see ERROR
 521+ 77A5              // value can be negative or beyond block 4.
 522+ 77A5                              Colon_Def MESSAGE, "MESSAGE", is_normal
 522+ 77A5             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 522+ 77A5             >
 522+ 77A5             >Dict_Ptr        defl    $
 522+ 77A5             >
 522+ 77A5             >//              ______________________________________________________________________
 522+ 77A5             >//              Heap part
 522+ 77A5             >
 522+ 77A5             >
 522+ 77A5             >                org     (Heap_Ptr & $1FFF) + $E000
 522+ EA25             >
 522+ EA25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ EA25             >Latest_Definition defl  Heap_Ptr
 522+ EA25             >
 522+ EA25             >                // dummy db directives used to calculate length of namec
 522+ EA25 4D 45 53 53 >                db      "MESSAGE"
 522+ EA29 41 47 45    >
 522+ EA2C             >len_NFA         defl    $ - temp_NFA
 522+ EA2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ EA25             >
 522+ EA25 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ EA26 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 522+ EA2A 41 47 45    >
 522+ EA2D             >                org     $-1                 // alter last byte of Name just above to set
 522+ EA2C C5          >                db      {b $} | END_BIT     // msb as name end
 522+ EA2D             >
 522+ EA2D 1B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 522+ EA2F             >Prev_Ptr        defl    Heap_Ptr
 522+ EA2F             >
 522+ EA2F             >mirror_Ptr      defl    $
 522+ EA2F             >
 522+ EA2F A7 77       >                dw      Dict_Ptr + 2        // xt
 522+ EA31             >Heap_Ptr        defl    $ - $E000           // save current HP
 522+ EA31             >
 522+ EA31             >Current_HP      defl  $ - $E000             // used to set HP once!
 522+ EA31             >
 522+ EA31             >//              ______________________________________________________________________
 522+ EA31             >//              Dictionary part
 522+ EA31             >
 522+ EA31             >                org     Dict_Ptr
 522+ 77A5             >
 522+ 77A5 2F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 522+ 77A7             >
 522+ 77A7             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 77A7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 77AA             >
 522+ 77AA             >
 522+ 77AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 77AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 77AA             >
 522+ 77AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 77AA 06 6B 9D 69                  dw      WARNING, FETCH          // warning @
 524+ 77AE                                                              // if
 525+ 77AE F5 63                        dw      ZBRANCH
 526+ 77B0 12 00                        dw      Message_Else - $
 527+ 77B2 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 527+ 77B6 A6 68
 528+ 77B8 A3 6A                        dw          TWO                 //      2
 529+ 77BA 9A 77                        dw          DOT_LINE            //      .line
 530+ 77BC 8B 6C                        dw          SPACE               //      space
 531+ 77BE                                                              // else
 532+ 77BE
 533+ 77BE E8 63                        dw      BRANCH
 534+ 77C0 0B 00                        dw      Message_ENdif - $
 535+ 77C2              Message_Else:
 536+ 77C2 23 71                        dw          C_DOT_QUOTE         //      .( msg#)
 537+ 77C4 04 6D 73 67                  db          4, "msg#"
 537+ 77C8 23
 538+ 77C9 E3 7E                        dw          DOT                 //      .  ( forward )
 539+ 77CB              Message_ENdif:                                  // endif
 540+ 77CB 53 68                        dw      EXIT                    // ;
 541+ 77CD
 542+ 77CD
 543+ 77CD              //  ______________________________________________________________________
 544+ 77CD              //
 545+ 77CD              // device
 546+ 77CD                              Variable_Def DEVICE,   "DEVICE",   2
 546+ 77CD             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 546+ 77CD             >
 546+ 77CD             >Dict_Ptr        defl    $
 546+ 77CD             >
 546+ 77CD             >//              ______________________________________________________________________
 546+ 77CD             >//              Heap part
 546+ 77CD             >
 546+ 77CD             >
 546+ 77CD             >                org     (Heap_Ptr & $1FFF) + $E000
 546+ EA31             >
 546+ EA31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ EA31             >Latest_Definition defl  Heap_Ptr
 546+ EA31             >
 546+ EA31             >                // dummy db directives used to calculate length of namec
 546+ EA31 44 45 56 49 >                db      "DEVICE"
 546+ EA35 43 45       >
 546+ EA37             >len_NFA         defl    $ - temp_NFA
 546+ EA37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ EA31             >
 546+ EA31 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ EA32 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 546+ EA36 43 45       >
 546+ EA38             >                org     $-1                 // alter last byte of Name just above to set
 546+ EA37 C5          >                db      {b $} | END_BIT     // msb as name end
 546+ EA38             >
 546+ EA38 25 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 546+ EA3A             >Prev_Ptr        defl    Heap_Ptr
 546+ EA3A             >
 546+ EA3A             >mirror_Ptr      defl    $
 546+ EA3A             >
 546+ EA3A CF 77       >                dw      Dict_Ptr + 2        // xt
 546+ EA3C             >Heap_Ptr        defl    $ - $E000           // save current HP
 546+ EA3C             >
 546+ EA3C             >Current_HP      defl  $ - $E000             // used to set HP once!
 546+ EA3C             >
 546+ EA3C             >//              ______________________________________________________________________
 546+ EA3C             >//              Dictionary part
 546+ EA3C             >
 546+ EA3C             >                org     Dict_Ptr
 546+ 77CD             >
 546+ 77CD 3A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 546+ 77CF             >
 546+ 77CF             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 77CF CD 7C 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 546+ 77D2             >
 546+ 77D2             >
 546+ 77D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 77D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 77D2             >
 546+ 77D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 77D2 02 00       >                dw      2 // ?
 547+ 77D4
 548+ 77D4              //  ______________________________________________________________________
 549+ 77D4
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  77D4                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77D4              //  ______________________________________________________________________
   2+ 77D4              //
   3+ 77D4              //  next-opt.asm
   4+ 77D4              //
   5+ 77D4              //  ZX Spectrum Next - peculiar definitions
   6+ 77D4              //  ______________________________________________________________________
   7+ 77D4
   8+ 77D4              //  ______________________________________________________________________
   9+ 77D4              //
  10+ 77D4              // reg@         n -- b
  11+ 77D4              // read Next REGister n giving byte b
  12+ 77D4              //
  13+ 77D4              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77D4              //              dw      LIT, $243B
  15+ 77D4              //              dw      PSTORE
  16+ 77D4              //              dw      LIT, $253B
  17+ 77D4              //              dw      PFETCH
  18+ 77D4              //              dw      EXIT
  19+ 77D4                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77D4             >
  19+ 77D4             >Dict_Ptr        defl    $
  19+ 77D4             >
  19+ 77D4             >//              ______________________________________________________________________
  19+ 77D4             >//              Heap part
  19+ 77D4             >
  19+ 77D4             >
  19+ 77D4             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA3C             >
  19+ EA3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA3C             >Latest_Definition defl  Heap_Ptr
  19+ EA3C             >
  19+ EA3C             >                // dummy db directives used to calculate length of namec
  19+ EA3C 52 45 47 40 >                db      "REG@"
  19+ EA40             >len_NFA         defl    $ - temp_NFA
  19+ EA40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA3C             >
  19+ EA3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3D 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA41             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA40 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA41             >
  19+ EA41 31 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA43             >Prev_Ptr        defl    Heap_Ptr
  19+ EA43             >
  19+ EA43             >mirror_Ptr      defl    $
  19+ EA43             >
  19+ EA43 D6 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA45             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA45             >
  19+ EA45             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA45             >
  19+ EA45             >//              ______________________________________________________________________
  19+ EA45             >//              Dictionary part
  19+ EA45             >
  19+ EA45             >                org     Dict_Ptr
  19+ 77D4             >
  19+ 77D4 43 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77D6             >
  19+ 77D6             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77D6 ~           >
  19+ 77D6 ~           >
  19+ 77D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77D6             >
  19+ 77D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77D6 D9                           exx
  21+ 77D7 01 3B 24                     ld      bc, $243B
  22+ 77DA E1                           pop     hl
  23+ 77DB ED 69                        out     (c), l
  24+ 77DD 04                           inc     b
  25+ 77DE ED 68                        in      l, (c)
  26+ 77E0 E5                           push    hl
  27+ 77E1 D9                           exx
  28+ 77E2                              next
  28+ 77E2 DD E9       >                jp      (ix)
  29+ 77E4
  30+ 77E4
  31+ 77E4              //  ______________________________________________________________________
  32+ 77E4              //
  33+ 77E4              // reg!         b n --
  34+ 77E4              // write value b to Next REGister n
  35+ 77E4              //
  36+ 77E4              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77E4              //              dw      LIT, $243B
  38+ 77E4              //              dw      PSTORE
  39+ 77E4              //              dw      LIT, $253B
  40+ 77E4              //              dw      PSTORE
  41+ 77E4              //              dw      EXIT
  42+ 77E4                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77E4             >
  42+ 77E4             >Dict_Ptr        defl    $
  42+ 77E4             >
  42+ 77E4             >//              ______________________________________________________________________
  42+ 77E4             >//              Heap part
  42+ 77E4             >
  42+ 77E4             >
  42+ 77E4             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA45             >
  42+ EA45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA45             >Latest_Definition defl  Heap_Ptr
  42+ EA45             >
  42+ EA45             >                // dummy db directives used to calculate length of namec
  42+ EA45 52 45 47 21 >                db      "REG!"
  42+ EA49             >len_NFA         defl    $ - temp_NFA
  42+ EA49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA45             >
  42+ EA45 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA46 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA4A             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA49 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA4A             >
  42+ EA4A 3C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA4C             >Prev_Ptr        defl    Heap_Ptr
  42+ EA4C             >
  42+ EA4C             >mirror_Ptr      defl    $
  42+ EA4C             >
  42+ EA4C E6 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA4E             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4E             >
  42+ EA4E             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4E             >
  42+ EA4E             >//              ______________________________________________________________________
  42+ EA4E             >//              Dictionary part
  42+ EA4E             >
  42+ EA4E             >                org     Dict_Ptr
  42+ 77E4             >
  42+ 77E4 4C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77E6             >
  42+ 77E6             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77E6 ~           >
  42+ 77E6 ~           >
  42+ 77E6             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77E6             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77E6             >
  42+ 77E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77E6 D9                           exx
  44+ 77E7 01 3B 24                     ld      bc, $243B
  45+ 77EA E1                           pop     hl
  46+ 77EB ED 69                        out     (c), l
  47+ 77ED 04                           inc     b
  48+ 77EE E1                           pop     hl
  49+ 77EF ED 69                        out     (c), l
  50+ 77F1 D9                           exx
  51+ 77F2                              next
  51+ 77F2 DD E9       >                jp      (ix)
  52+ 77F4
  53+ 77F4
  54+ 77F4              //  ______________________________________________________________________
  55+ 77F4              //
  56+ 77F4              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77F4              // NextZXOS call wrapper.
  58+ 77F4              //  n1 = hl register parameter value
  59+ 77F4              //  n2 = de register parameter value
  60+ 77F4              //  n3 = bc register parameter value
  61+ 77F4              //  n4 =  a register parameter value
  62+ 77F4              //   a = routine address in ROM 3
  63+ 77F4              // ----
  64+ 77F4              //  n5 = hl returned value
  65+ 77F4              //  n6 = de returned value
  66+ 77F4              //  n7 = bc returned value
  67+ 77F4              //  n8 =  a returned value
  68+ 77F4              //   f
  69+ 77F4                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77F4             >
  69+ 77F4             >Dict_Ptr        defl    $
  69+ 77F4             >
  69+ 77F4             >//              ______________________________________________________________________
  69+ 77F4             >//              Heap part
  69+ 77F4             >
  69+ 77F4             >
  69+ 77F4             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4E             >
  69+ EA4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4E             >Latest_Definition defl  Heap_Ptr
  69+ EA4E             >
  69+ EA4E             >                // dummy db directives used to calculate length of namec
  69+ EA4E 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA52 44 4F 53    >
  69+ EA55             >len_NFA         defl    $ - temp_NFA
  69+ EA55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4E             >
  69+ EA4E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4F 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA53 44 4F 53    >
  69+ EA56             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA55 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA56             >
  69+ EA56 45 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA58             >Prev_Ptr        defl    Heap_Ptr
  69+ EA58             >
  69+ EA58             >mirror_Ptr      defl    $
  69+ EA58             >
  69+ EA58 F6 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA5A             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA5A             >
  69+ EA5A             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA5A             >
  69+ EA5A             >//              ______________________________________________________________________
  69+ EA5A             >//              Dictionary part
  69+ EA5A             >
  69+ EA5A             >                org     Dict_Ptr
  69+ 77F4             >
  69+ 77F4 58 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77F6             >
  69+ 77F6             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77F6 ~           >
  69+ 77F6 ~           >
  69+ 77F6             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77F6             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77F6             >
  69+ 77F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77F6 D9                            exx
  71+ 77F7 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77F8 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77F9 7B                            ld      a, e
  74+ 77FA C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77FB D1                            pop     de                  // de' argument              //  n1
  76+ 77FC E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77FD D9                           exx
  78+ 77FE E1                           pop     hl                  // entry address a
  79+ 77FF DD E5                        push    ix
  80+ 7801 D5                           push    de
  81+ 7802 C5                           push    bc
  82+ 7803 EB                           ex      de, hl              // de is entry address
  83+ 7804              //              ld      (SP_Saved), sp
  84+ 7804              //              ld      sp, Cold_origin - 5
  85+ 7804 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 7806 F3                           di
  87+ 7807 CF                           rst     08
  88+ 7808 94                           db      $94
  89+ 7809 FB                           ei
  90+ 780A              //              ld      sp, (SP_Saved)
  91+ 780A              //              push    ix
  92+ 780A              //              pop     hl
  93+ 780A              //              ld      (IX_Echo), hl
  94+ 780A DD 22 98 63                  ld      (IX_Echo), ix
  95+ 780E
  96+ 780E D9                           exx
  97+ 780F C1                           pop     bc
  98+ 7810 D1                           pop     de
  99+ 7811 DD E1                        pop     ix
 100+ 7813 D9                            exx
 101+ 7814 E5                            push    hl
 102+ 7815 D5                            push    de
 103+ 7816 C5                            push    bc
 104+ 7817 26 00                         ld      h, 0
 105+ 7819 6F                            ld      l, a
 106+ 781A E5                            push    hl
 107+ 781B D9                           exx
 108+ 781C ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 781E 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 781F E5                           push    hl
 111+ 7820                              next
 111+ 7820 DD E9       >                jp      (ix)
 112+ 7822
 113+ 7822              //  ______________________________________________________________________
 114+ 7822              //
 115+ 7822              // blk-fh
 116+ 7822                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 7822             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 7822             >
 116+ 7822             >Dict_Ptr        defl    $
 116+ 7822             >
 116+ 7822             >//              ______________________________________________________________________
 116+ 7822             >//              Heap part
 116+ 7822             >
 116+ 7822             >
 116+ 7822             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA5A             >
 116+ EA5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA5A             >Latest_Definition defl  Heap_Ptr
 116+ EA5A             >
 116+ EA5A             >                // dummy db directives used to calculate length of namec
 116+ EA5A 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA5E 46 48       >
 116+ EA60             >len_NFA         defl    $ - temp_NFA
 116+ EA60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA5A             >
 116+ EA5A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA5B 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA5F 46 48       >
 116+ EA61             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA60 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA61             >
 116+ EA61 4E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA63             >Prev_Ptr        defl    Heap_Ptr
 116+ EA63             >
 116+ EA63             >mirror_Ptr      defl    $
 116+ EA63             >
 116+ EA63 24 78       >                dw      Dict_Ptr + 2        // xt
 116+ EA65             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA65             >
 116+ EA65             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA65             >
 116+ EA65             >//              ______________________________________________________________________
 116+ EA65             >//              Dictionary part
 116+ EA65             >
 116+ EA65             >                org     Dict_Ptr
 116+ 7822             >
 116+ 7822 63 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 7824             >
 116+ 7824             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 7824 CD 7C 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 7827             >
 116+ 7827             >
 116+ 7827             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7827             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7827             >
 116+ 7827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 7827 01 00       >                dw      1 // ?
 117+ 7829
 118+ 7829                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 7829             >
 118+ 7829             >Dict_Ptr        defl    $
 118+ 7829             >
 118+ 7829             >//              ______________________________________________________________________
 118+ 7829             >//              Heap part
 118+ 7829             >
 118+ 7829             >
 118+ 7829             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA65             >
 118+ EA65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA65             >Latest_Definition defl  Heap_Ptr
 118+ EA65             >
 118+ EA65             >                // dummy db directives used to calculate length of namec
 118+ EA65 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA69 46 4E 41 4D >
 118+ EA6D 45          >
 118+ EA6E             >len_NFA         defl    $ - temp_NFA
 118+ EA6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA65             >
 118+ EA65 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA66 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA6A 46 4E 41 4D >
 118+ EA6E 45          >
 118+ EA6F             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA6E C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA6F             >
 118+ EA6F 5A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA71             >Prev_Ptr        defl    Heap_Ptr
 118+ EA71             >
 118+ EA71             >mirror_Ptr      defl    $
 118+ EA71             >
 118+ EA71 2B 78       >                dw      Dict_Ptr + 2        // xt
 118+ EA73             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA73             >
 118+ EA73             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA73             >
 118+ EA73             >//              ______________________________________________________________________
 118+ EA73             >//              Dictionary part
 118+ EA73             >
 118+ EA73             >                org     Dict_Ptr
 118+ 7829             >
 118+ 7829 71 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 782B             >
 118+ 782B             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 782B CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 782E             >
 118+ 782E             >
 118+ 782E             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 782E             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 782E             >
 118+ 782E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 782E 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 7832 6F 63 6B 73
 119+ 7836 2D 36 34 2E
 119+ 783A 62 69 6E 00
 120+ 783E 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 121+ 7856
 122+ 7856              //  ______________________________________________________________________
 123+ 7856              //
 124+ 7856              // blk-seek     n --
 125+ 7856              // seek block n  within blocks!.bin  file
 126+ 7856                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 7856             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 7856             >
 126+ 7856             >Dict_Ptr        defl    $
 126+ 7856             >
 126+ 7856             >//              ______________________________________________________________________
 126+ 7856             >//              Heap part
 126+ 7856             >
 126+ 7856             >
 126+ 7856             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA73             >
 126+ EA73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA73             >Latest_Definition defl  Heap_Ptr
 126+ EA73             >
 126+ EA73             >                // dummy db directives used to calculate length of namec
 126+ EA73 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA77 53 45 45 4B >
 126+ EA7B             >len_NFA         defl    $ - temp_NFA
 126+ EA7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA73             >
 126+ EA73 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA74 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA78 53 45 45 4B >
 126+ EA7C             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA7B CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA7C             >
 126+ EA7C 65 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA7E             >Prev_Ptr        defl    Heap_Ptr
 126+ EA7E             >
 126+ EA7E             >mirror_Ptr      defl    $
 126+ EA7E             >
 126+ EA7E 58 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA80             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA80             >
 126+ EA80             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA80             >
 126+ EA80             >//              ______________________________________________________________________
 126+ EA80             >//              Dictionary part
 126+ EA80             >
 126+ EA80             >                org     Dict_Ptr
 126+ 7856             >
 126+ 7856 7E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 7858             >
 126+ 7858             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 7858 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 785B             >
 126+ 785B             >
 126+ 785B             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 785B             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 785B             >
 126+ 785B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 785B C6 6A AA 76                  dw  BBUF, MMUL
 128+ 785F 24 78 9D 69                  dw  BLK_FH, FETCH
 129+ 7863 DD 66                        dw  F_SEEK
 130+ 7865 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 7869 F6 6D
 131+ 786B 53 68                        dw  EXIT
 132+ 786D
 133+ 786D              //  ______________________________________________________________________
 134+ 786D              //
 135+ 786D              // blk-read     n --
 136+ 786D              // seek block n  within blocks!.bin  file
 137+ 786D                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 786D             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 786D             >
 137+ 786D             >Dict_Ptr        defl    $
 137+ 786D             >
 137+ 786D             >//              ______________________________________________________________________
 137+ 786D             >//              Heap part
 137+ 786D             >
 137+ 786D             >
 137+ 786D             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA80             >
 137+ EA80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA80             >Latest_Definition defl  Heap_Ptr
 137+ EA80             >
 137+ EA80             >                // dummy db directives used to calculate length of namec
 137+ EA80 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA84 52 45 41 44 >
 137+ EA88             >len_NFA         defl    $ - temp_NFA
 137+ EA88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA80             >
 137+ EA80 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA81 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA85 52 45 41 44 >
 137+ EA89             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA88 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA89             >
 137+ EA89 73 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA8B             >Prev_Ptr        defl    Heap_Ptr
 137+ EA8B             >
 137+ EA8B             >mirror_Ptr      defl    $
 137+ EA8B             >
 137+ EA8B 6F 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA8D             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA8D             >
 137+ EA8D             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA8D             >
 137+ EA8D             >//              ______________________________________________________________________
 137+ EA8D             >//              Dictionary part
 137+ EA8D             >
 137+ EA8D             >                org     Dict_Ptr
 137+ 786D             >
 137+ 786D 8B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 786F             >
 137+ 786F             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 786F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 7872             >
 137+ 7872             >
 137+ 7872             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 7872             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 7872             >
 137+ 7872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 7872 58 78                        dw  BLK_SEEK
 139+ 7874 C6 6A                        dw  BBUF
 140+ 7876 24 78 9D 69                  dw  BLK_FH, FETCH
 141+ 787A 2F 67                        dw  F_READ
 142+ 787C A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7880 F6 6D
 143+ 7882 11 69                        dw  DROP
 144+ 7884 53 68                        dw  EXIT
 145+ 7886
 146+ 7886              //  ______________________________________________________________________
 147+ 7886              //
 148+ 7886              // blk-write     n --
 149+ 7886              // seek block n  within blocks!.bin  file
 150+ 7886                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7886             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7886             >
 150+ 7886             >Dict_Ptr        defl    $
 150+ 7886             >
 150+ 7886             >//              ______________________________________________________________________
 150+ 7886             >//              Heap part
 150+ 7886             >
 150+ 7886             >
 150+ 7886             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA8D             >
 150+ EA8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA8D             >Latest_Definition defl  Heap_Ptr
 150+ EA8D             >
 150+ EA8D             >                // dummy db directives used to calculate length of namec
 150+ EA8D 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA91 57 52 49 54 >
 150+ EA95 45          >
 150+ EA96             >len_NFA         defl    $ - temp_NFA
 150+ EA96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA8D             >
 150+ EA8D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA8E 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA92 57 52 49 54 >
 150+ EA96 45          >
 150+ EA97             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA96 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA97             >
 150+ EA97 80 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA99             >Prev_Ptr        defl    Heap_Ptr
 150+ EA99             >
 150+ EA99             >mirror_Ptr      defl    $
 150+ EA99             >
 150+ EA99 88 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA9B             >
 150+ EA9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA9B             >
 150+ EA9B             >//              ______________________________________________________________________
 150+ EA9B             >//              Dictionary part
 150+ EA9B             >
 150+ EA9B             >                org     Dict_Ptr
 150+ 7886             >
 150+ 7886 99 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 7888             >
 150+ 7888             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7888 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 788B             >
 150+ 788B             >
 150+ 788B             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 788B             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 788B             >
 150+ 788B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 788B 58 78                        dw  BLK_SEEK
 152+ 788D C6 6A                        dw  BBUF
 153+ 788F 24 78 9D 69                  dw  BLK_FH, FETCH
 154+ 7893 4C 67                        dw  F_WRITE
 155+ 7895 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 7899 F6 6D
 156+ 789B 11 69                        dw  DROP
 157+ 789D 53 68                        dw  EXIT
 158+ 789F
 159+ 789F              //  ______________________________________________________________________
 160+ 789F              //
 161+ 789F              // blk-init     n --
 162+ 789F              // seek block n  within blocks!.bin  file
 163+ 789F                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 789F             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 789F             >
 163+ 789F             >Dict_Ptr        defl    $
 163+ 789F             >
 163+ 789F             >//              ______________________________________________________________________
 163+ 789F             >//              Heap part
 163+ 789F             >
 163+ 789F             >
 163+ 789F             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA9B             >
 163+ EA9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA9B             >Latest_Definition defl  Heap_Ptr
 163+ EA9B             >
 163+ EA9B             >                // dummy db directives used to calculate length of namec
 163+ EA9B 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA9F 49 4E 49 54 >
 163+ EAA3             >len_NFA         defl    $ - temp_NFA
 163+ EAA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA9B             >
 163+ EA9B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA9C 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EAA0 49 4E 49 54 >
 163+ EAA4             >                org     $-1                 // alter last byte of Name just above to set
 163+ EAA3 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EAA4             >
 163+ EAA4 8D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EAA6             >Prev_Ptr        defl    Heap_Ptr
 163+ EAA6             >
 163+ EAA6             >mirror_Ptr      defl    $
 163+ EAA6             >
 163+ EAA6 A1 78       >                dw      Dict_Ptr + 2        // xt
 163+ EAA8             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EAA8             >
 163+ EAA8             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EAA8             >
 163+ EAA8             >//              ______________________________________________________________________
 163+ EAA8             >//              Dictionary part
 163+ EAA8             >
 163+ EAA8             >                org     Dict_Ptr
 163+ 789F             >
 163+ 789F A6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 78A1             >
 163+ 78A1             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 78A1 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 78A4             >
 163+ 78A4             >
 163+ 78A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 78A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 78A4             >
 163+ 78A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 78A4 24 78 9D 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 78A8 FB 66 11 69
 165+ 78AC 2B 78 BF 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 78B0 BA 6B AA 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 78B4 5D 67
 167+ 78B6 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 78BA F6 6D
 168+ 78BC 24 78 A7 69                  dw  BLK_FH, STORE
 169+ 78C0 53 68                        dw  EXIT
 170+ 78C2
 171+ 78C2              //  ______________________________________________________________________
 172+ 78C2              //
 173+ 78C2              // #sec
 174+ 78C2              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 78C2              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 78C2
 177+ 78C2                              Constant_Def NSEC , "#SEC", 32767
 177+ 78C2             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 78C2             >
 177+ 78C2             >Dict_Ptr        defl    $
 177+ 78C2             >
 177+ 78C2             >//              ______________________________________________________________________
 177+ 78C2             >//              Heap part
 177+ 78C2             >
 177+ 78C2             >
 177+ 78C2             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EAA8             >
 177+ EAA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EAA8             >Latest_Definition defl  Heap_Ptr
 177+ EAA8             >
 177+ EAA8             >                // dummy db directives used to calculate length of namec
 177+ EAA8 23 53 45 43 >                db      "#SEC"
 177+ EAAC             >len_NFA         defl    $ - temp_NFA
 177+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EAA8             >
 177+ EAA8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EAA9 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
 177+ EAAC C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EAAD             >
 177+ EAAD 9B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EAAF             >Prev_Ptr        defl    Heap_Ptr
 177+ EAAF             >
 177+ EAAF             >mirror_Ptr      defl    $
 177+ EAAF             >
 177+ EAAF C4 78       >                dw      Dict_Ptr + 2        // xt
 177+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EAB1             >
 177+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EAB1             >
 177+ EAB1             >//              ______________________________________________________________________
 177+ EAB1             >//              Dictionary part
 177+ EAB1             >
 177+ EAB1             >                org     Dict_Ptr
 177+ 78C2             >
 177+ 78C2 AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 78C4             >
 177+ 78C4             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 78C4 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 78C7             >
 177+ 78C7             >
 177+ 78C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 78C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 78C7             >
 177+ 78C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 78C7 FF 7F       >                dw      32767
 178+ 78C9
 179+ 78C9              //  ______________________________________________________________________
 180+ 78C9
 181+ 78C9
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  78C9                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78C9              //  ______________________________________________________________________
   2+ 78C9              //
   3+ 78C9              //  L3.asm
   4+ 78C9              //
   5+ 78C9              //  Continuation of L2.asm
   6+ 78C9              //  I/O Block definitions
   7+ 78C9              //  ______________________________________________________________________
   8+ 78C9
   9+ 78C9
  10+ 78C9              //  ______________________________________________________________________
  11+ 78C9              //
  12+ 78C9              // r/w          a n f --
  13+ 78C9              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78C9                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78C9             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78C9             >
  14+ 78C9             >Dict_Ptr        defl    $
  14+ 78C9             >
  14+ 78C9             >//              ______________________________________________________________________
  14+ 78C9             >//              Heap part
  14+ 78C9             >
  14+ 78C9             >
  14+ 78C9             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAB1             >
  14+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAB1             >Latest_Definition defl  Heap_Ptr
  14+ EAB1             >
  14+ EAB1             >                // dummy db directives used to calculate length of namec
  14+ EAB1 52 2F 57    >                db      "R/W"
  14+ EAB4             >len_NFA         defl    $ - temp_NFA
  14+ EAB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAB1             >
  14+ EAB1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAB2 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAB5             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAB4 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAB5             >
  14+ EAB5 A8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAB7             >Prev_Ptr        defl    Heap_Ptr
  14+ EAB7             >
  14+ EAB7             >mirror_Ptr      defl    $
  14+ EAB7             >
  14+ EAB7 CB 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB9             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB9             >
  14+ EAB9             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB9             >
  14+ EAB9             >//              ______________________________________________________________________
  14+ EAB9             >//              Dictionary part
  14+ EAB9             >
  14+ EAB9             >                org     Dict_Ptr
  14+ 78C9             >
  14+ 78C9 B7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78CB             >
  14+ 78CB             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78CB CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78CE             >
  14+ 78CE             >
  14+ 78CE             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78CE             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78CE             >
  14+ 78CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78CE 5D 68                        dw      TO_R                    // >r
  16+ 78D0 C6 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78D2 2C 69 8B 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78D6 08 69 C4 78                  dw      OVER, NSEC              // over #sec
  19+ 78DA C6 68 33 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78DE 22 68                        dw      OR_OP                   // or
  21+ 78E0 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78E4 F6 6D
  22+ 78E6 68 68                        dw      R_TO                    // r>
  23+ 78E8                                                              // if
  24+ 78E8 F5 63                        dw      ZBRANCH
  25+ 78EA 08 00                        dw      Read_Write_Else - $
  26+ 78EC 6F 78                        dw          BLK_READ            //      blk-read
  27+ 78EE E8 63                        dw      BRANCH
  28+ 78F0 04 00                        dw      Read_Write_Endif - $
  29+ 78F2              Read_Write_Else:                                // else
  30+ 78F2 88 78                        dw          BLK_WRITE           //      blk-write
  31+ 78F4              Read_Write_Endif:                               // endif
  32+ 78F4 53 68                        dw      EXIT                    // ;
  33+ 78F6
  34+ 78F6
  35+ 78F6              //  ______________________________________________________________________
  36+ 78F6              //
  37+ 78F6              // +buf        a1 -- a2 f
  38+ 78F6              // advences to next buffer, cyclically rotating along them
  39+ 78F6                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78F6             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78F6             >
  39+ 78F6             >Dict_Ptr        defl    $
  39+ 78F6             >
  39+ 78F6             >//              ______________________________________________________________________
  39+ 78F6             >//              Heap part
  39+ 78F6             >
  39+ 78F6             >
  39+ 78F6             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB9             >
  39+ EAB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB9             >Latest_Definition defl  Heap_Ptr
  39+ EAB9             >
  39+ EAB9             >                // dummy db directives used to calculate length of namec
  39+ EAB9 2B 42 55 46 >                db      "+BUF"
  39+ EABD             >len_NFA         defl    $ - temp_NFA
  39+ EABD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB9             >
  39+ EAB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EABA 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EABE             >                org     $-1                 // alter last byte of Name just above to set
  39+ EABD C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EABE             >
  39+ EABE B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAC0             >Prev_Ptr        defl    Heap_Ptr
  39+ EAC0             >
  39+ EAC0             >mirror_Ptr      defl    $
  39+ EAC0             >
  39+ EAC0 F8 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAC2             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAC2             >
  39+ EAC2             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAC2             >
  39+ EAC2             >//              ______________________________________________________________________
  39+ EAC2             >//              Dictionary part
  39+ EAC2             >
  39+ EAC2             >                org     Dict_Ptr
  39+ 78F6             >
  39+ 78F6 C0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78F8             >
  39+ 78F8             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78F8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78FB             >
  39+ 78FB             >
  39+ 78FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78FB             >
  39+ 78FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78FB A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78FF A6 68
  41+ 7901 2C 69 24 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7905 9D 69
  42+ 7907 05 6C                        dw      EQUALS                  // =
  43+ 7909                                                              // if
  44+ 7909 F5 63                        dw      ZBRANCH
  45+ 790B 08 00                        dw      PBuf_Endif - $
  46+ 790D 11 69                        dw          DROP                //      drop
  47+ 790F 1E 6B 9D 69                  dw          FIRST, FETCH        //      first @
  48+ 7913              PBuf_Endif:                                     // endif
  49+ 7913 2C 69 90 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7917 9D 69
  50+ 7919 F9 6B                        dw      SUBTRACT                // -
  51+ 791B 53 68                        dw      EXIT                    // ;
  52+ 791D
  53+ 791D              //  ______________________________________________________________________
  54+ 791D              //
  55+ 791D              // update       --
  56+ 791D              // mark the last used block to be written to disk
  57+ 791D                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 791D             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 791D             >
  57+ 791D             >Dict_Ptr        defl    $
  57+ 791D             >
  57+ 791D             >//              ______________________________________________________________________
  57+ 791D             >//              Heap part
  57+ 791D             >
  57+ 791D             >
  57+ 791D             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAC2             >
  57+ EAC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAC2             >Latest_Definition defl  Heap_Ptr
  57+ EAC2             >
  57+ EAC2             >                // dummy db directives used to calculate length of namec
  57+ EAC2 55 50 44 41 >                db      "UPDATE"
  57+ EAC6 54 45       >
  57+ EAC8             >len_NFA         defl    $ - temp_NFA
  57+ EAC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAC2             >
  57+ EAC2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAC3 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAC7 54 45       >
  57+ EAC9             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC8 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC9             >
  57+ EAC9 B9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EACB             >Prev_Ptr        defl    Heap_Ptr
  57+ EACB             >
  57+ EACB             >mirror_Ptr      defl    $
  57+ EACB             >
  57+ EACB 1F 79       >                dw      Dict_Ptr + 2        // xt
  57+ EACD             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EACD             >
  57+ EACD             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EACD             >
  57+ EACD             >//              ______________________________________________________________________
  57+ EACD             >//              Dictionary part
  57+ EACD             >
  57+ EACD             >                org     Dict_Ptr
  57+ 791D             >
  57+ 791D CB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 791F             >
  57+ 791F             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 791F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7922             >
  57+ 7922             >
  57+ 7922             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7922             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7922             >
  57+ 7922             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7922 90 6B 9D 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7926 9D 69
  59+ 7928 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 792C 22 68
  60+ 792E 90 6B 9D 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7932 A7 69
  61+ 7934 53 68                        dw      EXIT                    // ;
  62+ 7936
  63+ 7936
  64+ 7936              //  ______________________________________________________________________
  65+ 7936              //
  66+ 7936              // empty-buffers --
  67+ 7936                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7936             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7936             >
  67+ 7936             >Dict_Ptr        defl    $
  67+ 7936             >
  67+ 7936             >//              ______________________________________________________________________
  67+ 7936             >//              Heap part
  67+ 7936             >
  67+ 7936             >
  67+ 7936             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EACD             >
  67+ EACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EACD             >Latest_Definition defl  Heap_Ptr
  67+ EACD             >
  67+ EACD             >                // dummy db directives used to calculate length of namec
  67+ EACD 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAD1 59 2D 42 55 >
  67+ EAD5 46 46 45 52 >
  67+ EAD9 53          >
  67+ EADA             >len_NFA         defl    $ - temp_NFA
  67+ EADA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EACD             >
  67+ EACD 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EACE 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAD2 59 2D 42 55 >
  67+ EAD6 46 46 45 52 >
  67+ EADA 53          >
  67+ EADB             >                org     $-1                 // alter last byte of Name just above to set
  67+ EADA D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EADB             >
  67+ EADB C2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EADD             >Prev_Ptr        defl    Heap_Ptr
  67+ EADD             >
  67+ EADD             >mirror_Ptr      defl    $
  67+ EADD             >
  67+ EADD 38 79       >                dw      Dict_Ptr + 2        // xt
  67+ EADF             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EADF             >
  67+ EADF             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EADF             >
  67+ EADF             >//              ______________________________________________________________________
  67+ EADF             >//              Dictionary part
  67+ EADF             >
  67+ EADF             >                org     Dict_Ptr
  67+ 7936             >
  67+ 7936 DD 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7938             >
  67+ 7938             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7938 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 793B             >
  67+ 793B             >
  67+ 793B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 793B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 793B             >
  67+ 793B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 793B 1E 6B 9D 69                  dw      FIRST, FETCH            // first @
  69+ 793F 24 6B 9D 69                  dw      LIMIT, FETCH            // limit @
  70+ 7943 08 69 F9 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7947 A0 70
  71+ 7949 53 68                        dw      EXIT                    // ;
  72+ 794B
  73+ 794B              //  ______________________________________________________________________
  74+ 794B              //
  75+ 794B              // buffer       n -- a
  76+ 794B              // read block n and gives the address to a buffer
  77+ 794B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 794B              // disk before reading the block n.
  79+ 794B
  80+ 794B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 794B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 794B             >
  80+ 794B             >Dict_Ptr        defl    $
  80+ 794B             >
  80+ 794B             >//              ______________________________________________________________________
  80+ 794B             >//              Heap part
  80+ 794B             >
  80+ 794B             >
  80+ 794B             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EADF             >
  80+ EADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EADF             >Latest_Definition defl  Heap_Ptr
  80+ EADF             >
  80+ EADF             >                // dummy db directives used to calculate length of namec
  80+ EADF 42 55 46 46 >                db      "BUFFER"
  80+ EAE3 45 52       >
  80+ EAE5             >len_NFA         defl    $ - temp_NFA
  80+ EAE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EADF             >
  80+ EADF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAE0 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAE4 45 52       >
  80+ EAE6             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAE5 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAE6             >
  80+ EAE6 CD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE8             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE8             >
  80+ EAE8             >mirror_Ptr      defl    $
  80+ EAE8             >
  80+ EAE8 4D 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAEA             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAEA             >
  80+ EAEA             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAEA             >
  80+ EAEA             >//              ______________________________________________________________________
  80+ EAEA             >//              Dictionary part
  80+ EAEA             >
  80+ EAEA             >                org     Dict_Ptr
  80+ 794B             >
  80+ 794B E8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 794D             >
  80+ 794D             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 794D CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7950             >
  80+ 7950             >
  80+ 7950             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7950             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7950             >
  80+ 7950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7950 8A 6B 9D 69                  dw      USED, FETCH             // used @
  82+ 7954 2C 69 5D 68                  dw      DUP, TO_R               // dup >r
  83+ 7958                                                              // begin
  84+ 7958              Buffer_Begin:
  85+ 7958 F8 78                        dw          PBUF                //      +buf
  86+ 795A                                                              // until
  87+ 795A F5 63                        dw      ZBRANCH
  88+ 795C FC FF                        dw      Buffer_Begin - $
  89+ 795E 8A 6B A7 69                  dw      USED, STORE             // used !
  90+ 7962 73 68 9D 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7966 8B 68
  91+ 7968                                                              // if
  92+ 7968 F5 63                        dw      ZBRANCH
  93+ 796A 14 00                        dw      Buffer_Endif - $
  94+ 796C 73 68 D5 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7970 73 68 9D 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7974 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7978 13 68                        dw          AND_OP              //      and
  98+ 797A 95 6A CB 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 797E              Buffer_Endif:                                   // endif
 100+ 797E 73 68 A7 69                  dw      R_OP, STORE             // r !
 101+ 7982 73 68 90 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7986 A7 69
 102+ 7988 68 68 D5 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 798C 53 68                        dw      EXIT                    // ;
 104+ 798E
 105+ 798E              //  ______________________________________________________________________
 106+ 798E              //
 107+ 798E              // block        n -- a
 108+ 798E              // Leaves the buffer address that contains the block n.
 109+ 798E              // If the block is not already present, it will be loaded from disk
 110+ 798E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 798E              // disk before reading the block n.
 112+ 798E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 798E
 114+ 798E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 798E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 798E             >
 114+ 798E             >Dict_Ptr        defl    $
 114+ 798E             >
 114+ 798E             >//              ______________________________________________________________________
 114+ 798E             >//              Heap part
 114+ 798E             >
 114+ 798E             >
 114+ 798E             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAEA             >
 114+ EAEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAEA             >Latest_Definition defl  Heap_Ptr
 114+ EAEA             >
 114+ EAEA             >                // dummy db directives used to calculate length of namec
 114+ EAEA 42 4C 4F 43 >                db      "BLOCK"
 114+ EAEE 4B          >
 114+ EAEF             >len_NFA         defl    $ - temp_NFA
 114+ EAEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAEA             >
 114+ EAEA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAEB 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAEF 4B          >
 114+ EAF0             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAEF CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAF0             >
 114+ EAF0 DF 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAF2             >Prev_Ptr        defl    Heap_Ptr
 114+ EAF2             >
 114+ EAF2             >mirror_Ptr      defl    $
 114+ EAF2             >
 114+ EAF2 90 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAF4             >
 114+ EAF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAF4             >
 114+ EAF4             >//              ______________________________________________________________________
 114+ EAF4             >//              Dictionary part
 114+ EAF4             >
 114+ EAF4             >                org     Dict_Ptr
 114+ 798E             >
 114+ 798E F2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7990             >
 114+ 7990             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7990 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7993             >
 114+ 7993             >
 114+ 7993             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7993             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7993             >
 114+ 7993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7993                          //  dw      OFFSET, FETCH           // offset @
 116+ 7993                          //  dw      PLUS
 117+ 7993 5D 68                        dw      TO_R                    // + >r
 118+ 7995 90 6B 9D 69                  dw      PREV, FETCH             // prev @
 119+ 7999 2C 69 9D 69                  dw      DUP, FETCH              // dup @
 120+ 799D 73 68 F9 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 79A1 2C 69 A6 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 79A5                                                              // if
 123+ 79A5 F5 63                        dw        ZBRANCH
 124+ 79A7 32 00                        dw        Block_Endif_1 - $
 125+ 79A9              Block_Begin:                                    //      begin
 126+ 79A9 F8 78 78 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 79AD                                                              //          if
 128+ 79AD F5 63                        dw          ZBRANCH
 129+ 79AF 12 00                        dw          Block_Endif_2 - $
 130+ 79B1 11 69                        dw              DROP            //              drop
 131+ 79B3 73 68 4D 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 79B7 2C 69                        dw              DUP             //              dup
 133+ 79B9 73 68 9C 6A                  dw              R_OP, ONE       //              r 1
 134+ 79BD CB 78                        dw              READ_WRITE      //              r/w
 135+ 79BF E2 68                        dw              TWO_MINUS       //              2-
 136+ 79C1              Block_Endif_2:                                  //          endif
 137+ 79C1 2C 69 9D 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79C5 73 68
 138+ 79C7 F9 6B 2C 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79CB A6 68 78 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79CF                                                              //      until
 141+ 79CF F5 63                        dw        ZBRANCH
 142+ 79D1 D8 FF                        dw        Block_Begin - $
 143+ 79D3 2C 69 90 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79D7 A7 69
 144+ 79D9              Block_Endif_1:                                  // endif
 145+ 79D9 68 68 11 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79DD D5 68
 146+ 79DF 53 68                        dw      EXIT                    // ;
 147+ 79E1
 148+ 79E1              //  ______________________________________________________________________
 149+ 79E1              //
 150+ 79E1              // #buff        -- n
 151+ 79E1              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79E1                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79E1             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79E1             >
 152+ 79E1             >Dict_Ptr        defl    $
 152+ 79E1             >
 152+ 79E1             >//              ______________________________________________________________________
 152+ 79E1             >//              Heap part
 152+ 79E1             >
 152+ 79E1             >
 152+ 79E1             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAF4             >
 152+ EAF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAF4             >Latest_Definition defl  Heap_Ptr
 152+ EAF4             >
 152+ EAF4             >                // dummy db directives used to calculate length of namec
 152+ EAF4 23 42 55 46 >                db      "#BUFF"
 152+ EAF8 46          >
 152+ EAF9             >len_NFA         defl    $ - temp_NFA
 152+ EAF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAF4             >
 152+ EAF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAF5 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF9 46          >
 152+ EAFA             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF9 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAFA             >
 152+ EAFA EA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAFC             >Prev_Ptr        defl    Heap_Ptr
 152+ EAFC             >
 152+ EAFC             >mirror_Ptr      defl    $
 152+ EAFC             >
 152+ EAFC E3 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAFE             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAFE             >
 152+ EAFE             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAFE             >
 152+ EAFE             >//              ______________________________________________________________________
 152+ EAFE             >//              Dictionary part
 152+ EAFE             >
 152+ EAFE             >                org     Dict_Ptr
 152+ 79E1             >
 152+ 79E1 FC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79E3             >
 152+ 79E3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79E3 CD 69 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79E6             >
 152+ 79E6             >
 152+ 79E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79E6             >
 152+ 79E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79E6 07 00       >                dw      7
 153+ 79E8
 154+ 79E8              //  ______________________________________________________________________
 155+ 79E8              //
 156+ 79E8              // flush        --
 157+ 79E8                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79E8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79E8             >
 157+ 79E8             >Dict_Ptr        defl    $
 157+ 79E8             >
 157+ 79E8             >//              ______________________________________________________________________
 157+ 79E8             >//              Heap part
 157+ 79E8             >
 157+ 79E8             >
 157+ 79E8             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAFE             >
 157+ EAFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAFE             >Latest_Definition defl  Heap_Ptr
 157+ EAFE             >
 157+ EAFE             >                // dummy db directives used to calculate length of namec
 157+ EAFE 46 4C 55 53 >                db      "FLUSH"
 157+ EB02 48          >
 157+ EB03             >len_NFA         defl    $ - temp_NFA
 157+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAFE             >
 157+ EAFE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAFF 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB03 48          >
 157+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB03 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB04             >
 157+ EB04 F4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB06             >Prev_Ptr        defl    Heap_Ptr
 157+ EB06             >
 157+ EB06             >mirror_Ptr      defl    $
 157+ EB06             >
 157+ EB06 EA 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB08             >
 157+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB08             >
 157+ EB08             >//              ______________________________________________________________________
 157+ EB08             >//              Dictionary part
 157+ EB08             >
 157+ EB08             >                org     Dict_Ptr
 157+ 79E8             >
 157+ 79E8 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79EA             >
 157+ 79EA             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79EA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79ED             >
 157+ 79ED             >
 157+ 79ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79ED             >
 157+ 79ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79ED E3 79 BF 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79F1 95 6A
 159+ 79F3              Flush_Do:                                       // do
 160+ 79F3 34 64                        dw      C_DO
 161+ 79F5 95 6A 4D 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79F9 11 69
 162+ 79FB                                                              // loop
 163+ 79FB E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79FF 24 78 9D 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 7A03 08 67 11 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 7A07 53 68                        dw      EXIT                    // exit
 167+ 7A09
 168+ 7A09              //  ______________________________________________________________________
 169+ 7A09              //
 170+ 7A09              // f_getline    a m fh -- n
 171+ 7A09              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 7A09              // Address a is left for subsequent processing
 173+ 7A09              // and n as the actual number of byte read, that is the length of line
 174+ 7A09                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 7A09             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 7A09             >
 174+ 7A09             >Dict_Ptr        defl    $
 174+ 7A09             >
 174+ 7A09             >//              ______________________________________________________________________
 174+ 7A09             >//              Heap part
 174+ 7A09             >
 174+ 7A09             >
 174+ 7A09             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB08             >
 174+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB08             >Latest_Definition defl  Heap_Ptr
 174+ EB08             >
 174+ EB08             >                // dummy db directives used to calculate length of namec
 174+ EB08 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB0C 54 4C 49 4E >
 174+ EB10 45          >
 174+ EB11             >len_NFA         defl    $ - temp_NFA
 174+ EB11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB08             >
 174+ EB08 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB09 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB0D 54 4C 49 4E >
 174+ EB11 45          >
 174+ EB12             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB11 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB12             >
 174+ EB12 FE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB14             >Prev_Ptr        defl    Heap_Ptr
 174+ EB14             >
 174+ EB14             >mirror_Ptr      defl    $
 174+ EB14             >
 174+ EB14 0B 7A       >                dw      Dict_Ptr + 2        // xt
 174+ EB16             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB16             >
 174+ EB16             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB16             >
 174+ EB16             >//              ______________________________________________________________________
 174+ EB16             >//              Dictionary part
 174+ EB16             >
 174+ EB16             >                org     Dict_Ptr
 174+ 7A09             >
 174+ 7A09 14 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 7A0B             >
 174+ 7A0B             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7A0B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7A0E             >
 174+ 7A0E             >
 174+ 7A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7A0E             >
 174+ 7A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7A0E 5D 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 7A10 1C 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 7A12 73 68 15 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 7A16 A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 7A1A F6 6D
 179+ 7A1C
 180+ 7A1C 6E 69 08 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A20 BF 68 25 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A24
 183+ 7A24 73 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A28 A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 7A2C F6 6D
 185+ 7A2E                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A2E F5 63                        dw      ZBRANCH
 187+ 7A30 3C 00                        dw      FGetline_Else - $
 188+ 7A32 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A36 29 65
 189+ 7A38 11 69 16 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A3C 25 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A3E A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A42 29 65
 192+ 7A44 11 69 16 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A48 33 69 3E 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A4C 2C 69 A8 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A50 A7 69
 195+ 7A52 2C 69 5D 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A56 6E 69 68 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A5A 95 6A B0 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A5E 68 68 DD 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A62 A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 7A66 F6 6D
 200+ 7A68                                                              // else
 201+ 7A68 E8 63                        dw      BRANCH
 202+ 7A6A 0C 00                        dw      FGetline_Endif - $
 203+ 7A6C              FGetline_Else:
 204+ 7A6C 68 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A6E 6E 69 68 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A72 11 69 95 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A76              FGetline_Endif:                                 // endif
 208+ 7A76 5D 68 2C 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A7A 2C 69
 209+ 7A7C BF 68 25 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A80 73 68 94 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A84 7B 69 A6 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A88 95 6A 25 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A8C DA 68 A7 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A90 73 68 A6 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A94 C6 68
 215+ 7A96 25 69 73 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A9A F9 6B
 216+ 7A9C AB 70                        dw      BLANK                   // blank
 217+ 7A9E 68 68                        dw      R_TO                    // r>                   ( n )
 218+ 7AA0 53 68                        dw      EXIT                    // ;
 219+ 7AA2
 220+ 7AA2              //  ______________________________________________________________________
 221+ 7AA2              //
 222+ 7AA2              // f_include    fh --
 223+ 7AA2              // Given a filehandle includes the source from file
 224+ 7AA2                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7AA2             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7AA2             >
 224+ 7AA2             >Dict_Ptr        defl    $
 224+ 7AA2             >
 224+ 7AA2             >//              ______________________________________________________________________
 224+ 7AA2             >//              Heap part
 224+ 7AA2             >
 224+ 7AA2             >
 224+ 7AA2             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB16             >
 224+ EB16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB16             >Latest_Definition defl  Heap_Ptr
 224+ EB16             >
 224+ EB16             >                // dummy db directives used to calculate length of namec
 224+ EB16 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB1A 43 4C 55 44 >
 224+ EB1E 45          >
 224+ EB1F             >len_NFA         defl    $ - temp_NFA
 224+ EB1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB16             >
 224+ EB16 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB17 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB1B 43 4C 55 44 >
 224+ EB1F 45          >
 224+ EB20             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB1F C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB20             >
 224+ EB20 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB22             >Prev_Ptr        defl    Heap_Ptr
 224+ EB22             >
 224+ EB22             >mirror_Ptr      defl    $
 224+ EB22             >
 224+ EB22 A4 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB24             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB24             >
 224+ EB24             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB24             >
 224+ EB24             >//              ______________________________________________________________________
 224+ EB24             >//              Dictionary part
 224+ EB24             >
 224+ EB24             >                org     Dict_Ptr
 224+ 7AA2             >
 224+ 7AA2 22 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7AA4             >
 224+ 7AA4             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7AA4 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7AA7             >
 224+ 7AA7             >
 224+ 7AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7AA7             >
 224+ 7AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7AA7 36 6B 9D 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7AAB 5D 68
 226+ 7AAD 3C 6B 9D 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7AB1 5D 68
 227+ 7AB3 A2 6B 9D 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7AB7 5D 68
 228+ 7AB9 73 68                        dw      R_OP                    // r
 229+ 7ABB                                                              // if
 230+ 7ABB F5 63                        dw      ZBRANCH
 231+ 7ABD 20 00                        dw      FInclude_Else_1 - $
 232+ 7ABF 73 68 15 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 7AC3 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 7AC7 F6 6D
 234+ 7AC9 3C 6B 9D 69                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 7ACD E2 68                        dw          TWO_MINUS
 236+ 7ACF A8 6B 9D 69                  dw          SPAN, FETCH         //      span @ -
 237+ 7AD3 F9 6B                        dw          SUBTRACT
 238+ 7AD5 EE 6B B0 68                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 7AD9                                                              // else
 240+ 7AD9 E8 63                        dw      BRANCH
 241+ 7ADB 06 00                        dw      FInclude_Endif_1 - $
 242+ 7ADD              FInclude_Else_1:
 243+ 7ADD 95 6A 95 6A                  dw          ZERO, ZERO          //      0 0
 244+ 7AE1                                                              // endif
 245+ 7AE1              FInclude_Endif_1:
 246+ 7AE1 5D 68 5D 68                  dw      TO_R, TO_R              // >r >r
 247+ 7AE5 A2 6B A7 69                  dw      SOURCE_ID, STORE        // source-id !
 248+ 7AE9              FInclude_Begin:                                 // begin
 249+ 7AE9 9C 6A 90 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 7AED C6 6A
 250+ 7AEF 7B 69 AB 70                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 7AF3 25 69 BF 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 7AF7 25 69 DA 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 7AFB A2 6B 9D 69                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 7AFF 0B 7A                        dw          F_GETLINE           //      f_getline
 255+ 7B01                                                              // while
 256+ 7B01 F5 63                        dw      ZBRANCH
 257+ 7B03 14 00                        dw      FInclude_Repeat - $
 258+ 7B05 9C 6A 36 6B                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 7B09 A7 69
 259+ 7B0B 95 6A 3C 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 7B0F A7 69
 260+ 7B11 DB 74                        dw          INTERPRET           //      interpret
 261+ 7B13 E8 63                        dw      BRANCH
 262+ 7B15 D4 FF                        dw      FInclude_Begin - $
 263+ 7B17              FInclude_Repeat:                                // repeat
 264+ 7B17 A2 6B 9D 69                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 7B1B 95 6A A2 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 7B1F A7 69
 266+ 7B21 FB 66                        dw      F_CLOSE                 // f_close
 267+ 7B23 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 7B27 F6 6D
 268+ 7B29 68 68 68 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 7B2D 68 68
 269+ 7B2F 2C 69 A2 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 7B33 A7 69
 270+ 7B35                                                              // if
 271+ 7B35 F5 63                        dw      ZBRANCH
 272+ 7B37 12 00                        dw      FInclude_Else_2 - $
 273+ 7B39 A2 6B 9D 69                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 7B3D DD 66                        dw          F_SEEK              //      f_seek
 275+ 7B3F A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 7B43 F6 6D
 276+ 7B45                                                              // else
 277+ 7B45 E8 63                        dw      BRANCH
 278+ 7B47 04 00                        dw      FInclude_Endif_2 - $
 279+ 7B49              FInclude_Else_2:
 280+ 7B49 68 69                        dw          TWO_DROP            //      2drop
 281+ 7B4B              FInclude_Endif_2:                               // endif
 282+ 7B4B 68 68 3C 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 7B4F A7 69
 283+ 7B51 68 68 36 6B                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 7B55 A7 69
 284+ 7B57 53 68                        dw      EXIT                    // ;
 285+ 7B59
 286+ 7B59              //  ______________________________________________________________________
 287+ 7B59              //
 288+ 7B59              // open<         -- fh
 289+ 7B59              // Open the following filename and return it file-handle
 290+ 7B59              // Used in the form OPEN CCCC
 291+ 7B59                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 7B59             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 7B59             >
 291+ 7B59             >Dict_Ptr        defl    $
 291+ 7B59             >
 291+ 7B59             >//              ______________________________________________________________________
 291+ 7B59             >//              Heap part
 291+ 7B59             >
 291+ 7B59             >
 291+ 7B59             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB24             >
 291+ EB24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB24             >Latest_Definition defl  Heap_Ptr
 291+ EB24             >
 291+ EB24             >                // dummy db directives used to calculate length of namec
 291+ EB24 4F 50 45 4E >                db      "OPEN<"
 291+ EB28 3C          >
 291+ EB29             >len_NFA         defl    $ - temp_NFA
 291+ EB29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB24             >
 291+ EB24 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB25 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB29 3C          >
 291+ EB2A             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB29 BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB2A             >
 291+ EB2A 16 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB2C             >Prev_Ptr        defl    Heap_Ptr
 291+ EB2C             >
 291+ EB2C             >mirror_Ptr      defl    $
 291+ EB2C             >
 291+ EB2C 5B 7B       >                dw      Dict_Ptr + 2        // xt
 291+ EB2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB2E             >
 291+ EB2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB2E             >
 291+ EB2E             >//              ______________________________________________________________________
 291+ EB2E             >//              Dictionary part
 291+ EB2E             >
 291+ EB2E             >                org     Dict_Ptr
 291+ 7B59             >
 291+ 7B59 2C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 7B5B             >
 291+ 7B5B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7B5B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7B5E             >
 291+ 7B5E             >
 291+ 7B5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7B5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7B5E             >
 291+ 7B5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7B5E B8 6A                        dw      BL
 293+ 7B60 D8 70 32 6F                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 7B64 08 69
 294+ 7B66 A6 68 95 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 7B6A 25 69 A7 69
 295+ 7B6E C9 70 9C 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 7B72 5D 67
 296+ 7B74 A3 63 2B 00                  dw      LIT, 43                 // 43
 297+ 7B78 F6 6D                        dw      QERROR                  // ?error
 298+ 7B7A 53 68                        dw      EXIT                    // ;
 299+ 7B7C
 300+ 7B7C              //  ______________________________________________________________________
 301+ 7B7C              //
 302+ 7B7C              // use          -- cccc
 303+ 7B7C              // Include the following filename
 304+ 7B7C                              Colon_Def USE, "USE", is_normal
 304+ 7B7C             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 7B7C             >
 304+ 7B7C             >Dict_Ptr        defl    $
 304+ 7B7C             >
 304+ 7B7C             >//              ______________________________________________________________________
 304+ 7B7C             >//              Heap part
 304+ 7B7C             >
 304+ 7B7C             >
 304+ 7B7C             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB2E             >
 304+ EB2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB2E             >Latest_Definition defl  Heap_Ptr
 304+ EB2E             >
 304+ EB2E             >                // dummy db directives used to calculate length of namec
 304+ EB2E 55 53 45    >                db      "USE"
 304+ EB31             >len_NFA         defl    $ - temp_NFA
 304+ EB31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB2E             >
 304+ EB2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB2F 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB32             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB31 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB32             >
 304+ EB32 24 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB34             >Prev_Ptr        defl    Heap_Ptr
 304+ EB34             >
 304+ EB34             >mirror_Ptr      defl    $
 304+ EB34             >
 304+ EB34 7E 7B       >                dw      Dict_Ptr + 2        // xt
 304+ EB36             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB36             >
 304+ EB36             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB36             >
 304+ EB36             >//              ______________________________________________________________________
 304+ EB36             >//              Dictionary part
 304+ EB36             >
 304+ EB36             >                org     Dict_Ptr
 304+ 7B7C             >
 304+ 7B7C 34 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7B7E             >
 304+ 7B7E             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7B7E CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7B81             >
 304+ 7B81             >
 304+ 7B81             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7B81             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7B81             >
 304+ 7B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7B81 5B 7B                        dw      OPEN_FH                 // open<
 306+ 7B83 24 78 9D 69                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 7B87 FB 66 11 69                  dw      F_CLOSE, DROP           // f_close drop
 308+ 7B8B 24 78 A7 69                  dw      BLK_FH, STORE           // blk-fh !
 309+ 7B8F 53 68                        dw      EXIT                    // ;
 310+ 7B91
 311+ 7B91              //  ______________________________________________________________________
 312+ 7B91              //
 313+ 7B91              // include      -- cccc
 314+ 7B91              // Include the following filename
 315+ 7B91                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 7B91             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 7B91             >
 315+ 7B91             >Dict_Ptr        defl    $
 315+ 7B91             >
 315+ 7B91             >//              ______________________________________________________________________
 315+ 7B91             >//              Heap part
 315+ 7B91             >
 315+ 7B91             >
 315+ 7B91             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB36             >
 315+ EB36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB36             >Latest_Definition defl  Heap_Ptr
 315+ EB36             >
 315+ EB36             >                // dummy db directives used to calculate length of namec
 315+ EB36 49 4E 43 4C >                db      "INCLUDE"
 315+ EB3A 55 44 45    >
 315+ EB3D             >len_NFA         defl    $ - temp_NFA
 315+ EB3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB36             >
 315+ EB36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB37 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB3B 55 44 45    >
 315+ EB3E             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB3D C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB3E             >
 315+ EB3E 2E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB40             >Prev_Ptr        defl    Heap_Ptr
 315+ EB40             >
 315+ EB40             >mirror_Ptr      defl    $
 315+ EB40             >
 315+ EB40 93 7B       >                dw      Dict_Ptr + 2        // xt
 315+ EB42             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB42             >
 315+ EB42             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB42             >
 315+ EB42             >//              ______________________________________________________________________
 315+ EB42             >//              Dictionary part
 315+ EB42             >
 315+ EB42             >                org     Dict_Ptr
 315+ 7B91             >
 315+ 7B91 40 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 7B93             >
 315+ 7B93             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 7B93 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 7B96             >
 315+ 7B96             >
 315+ 7B96             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 7B96             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 7B96             >
 315+ 7B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 7B96 5B 7B                        dw      OPEN_FH                 // open
 317+ 7B98 2C 69 A4 7A                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 7B9C FB 66 11 69                  dw      F_CLOSE, DROP           // f_close drop
 319+ 7BA0 53 68                        dw      EXIT                    // ;
 320+ 7BA2
 321+ 7BA2              //  ______________________________________________________________________
 322+ 7BA2              //
 323+ 7BA2              // needs
 324+ 7BA2              // check for cccc exists in vocabulary
 325+ 7BA2              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 7BA2
 327+ 7BA2              // temp filename cccc.f as counted string zero-padded
 328+ 7BA2                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 7BA2             >
 328+ 7BA2             >Dict_Ptr        defl    $
 328+ 7BA2             >
 328+ 7BA2             >//              ______________________________________________________________________
 328+ 7BA2             >//              Heap part
 328+ 7BA2             >
 328+ 7BA2             >
 328+ 7BA2             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB42             >
 328+ EB42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB42             >Latest_Definition defl  Heap_Ptr
 328+ EB42             >
 328+ EB42             >                // dummy db directives used to calculate length of namec
 328+ EB42 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB46 53 2D 57    >
 328+ EB49             >len_NFA         defl    $ - temp_NFA
 328+ EB49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB42             >
 328+ EB42 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB43 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB47 53 2D 57    >
 328+ EB4A             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB49 D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB4A             >
 328+ EB4A 36 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB4C             >Prev_Ptr        defl    Heap_Ptr
 328+ EB4C             >
 328+ EB4C             >mirror_Ptr      defl    $
 328+ EB4C             >
 328+ EB4C A4 7B       >                dw      Dict_Ptr + 2        // xt
 328+ EB4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB4E             >
 328+ EB4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB4E             >
 328+ EB4E             >//              ______________________________________________________________________
 328+ EB4E             >//              Dictionary part
 328+ EB4E             >
 328+ EB4E             >                org     Dict_Ptr
 328+ 7BA2             >
 328+ 7BA2 4C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 7BA4             >
 328+ 7BA4             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 7BA4 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 7BA7             >
 328+ 7BA7             >
 328+ 7BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 7BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 7BA7             >
 328+ 7BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 7BA7 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 7BCA              // temp complete path+filename
 331+ 7BCA                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 7BCA             >
 331+ 7BCA             >Dict_Ptr        defl    $
 331+ 7BCA             >
 331+ 7BCA             >//              ______________________________________________________________________
 331+ 7BCA             >//              Heap part
 331+ 7BCA             >
 331+ 7BCA             >
 331+ 7BCA             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB4E             >
 331+ EB4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB4E             >Latest_Definition defl  Heap_Ptr
 331+ EB4E             >
 331+ EB4E             >                // dummy db directives used to calculate length of namec
 331+ EB4E 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB52 53 2D 46 4E >
 331+ EB56             >len_NFA         defl    $ - temp_NFA
 331+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB4E             >
 331+ EB4E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB4F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB53 53 2D 46 4E >
 331+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB56 CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB57             >
 331+ EB57 42 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB59             >Prev_Ptr        defl    Heap_Ptr
 331+ EB59             >
 331+ EB59             >mirror_Ptr      defl    $
 331+ EB59             >
 331+ EB59 CC 7B       >                dw      Dict_Ptr + 2        // xt
 331+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB5B             >
 331+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB5B             >
 331+ EB5B             >//              ______________________________________________________________________
 331+ EB5B             >//              Dictionary part
 331+ EB5B             >
 331+ EB5B             >                org     Dict_Ptr
 331+ 7BCA             >
 331+ 7BCA 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 7BCC             >
 331+ 7BCC             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 7BCC CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 7BCF             >
 331+ 7BCF             >
 331+ 7BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 7BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 7BCF             >
 331+ 7BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 7BCF 00 00 00...                  ds      40
 333+ 7BF7              // constant path
 334+ 7BF7                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 7BF7             >
 334+ 7BF7             >Dict_Ptr        defl    $
 334+ 7BF7             >
 334+ 7BF7             >//              ______________________________________________________________________
 334+ 7BF7             >//              Heap part
 334+ 7BF7             >
 334+ 7BF7             >
 334+ 7BF7             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB5B             >
 334+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB5B             >Latest_Definition defl  Heap_Ptr
 334+ EB5B             >
 334+ EB5B             >                // dummy db directives used to calculate length of namec
 334+ EB5B 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB5F 53 2D 49 4E >
 334+ EB63 43          >
 334+ EB64             >len_NFA         defl    $ - temp_NFA
 334+ EB64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB5B             >
 334+ EB5B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB5C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB60 53 2D 49 4E >
 334+ EB64 43          >
 334+ EB65             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB64 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB65             >
 334+ EB65 4E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB67             >Prev_Ptr        defl    Heap_Ptr
 334+ EB67             >
 334+ EB67             >mirror_Ptr      defl    $
 334+ EB67             >
 334+ EB67 F9 7B       >                dw      Dict_Ptr + 2        // xt
 334+ EB69             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB69             >
 334+ EB69             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB69             >
 334+ EB69             >//              ______________________________________________________________________
 334+ EB69             >//              Dictionary part
 334+ EB69             >
 334+ EB69             >                org     Dict_Ptr
 334+ 7BF7             >
 334+ 7BF7 67 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 7BF9             >
 334+ 7BF9             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 7BF9 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 7BFC             >
 334+ 7BFC             >
 334+ 7BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 7BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 7BFC             >
 334+ 7BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 7BFC 04 69 6E 63                  db      4, "inc/", 0
 335+ 7C00 2F 00
 336+ 7C02                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 7C02             >
 336+ 7C02             >Dict_Ptr        defl    $
 336+ 7C02             >
 336+ 7C02             >//              ______________________________________________________________________
 336+ 7C02             >//              Heap part
 336+ 7C02             >
 336+ 7C02             >
 336+ 7C02             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB69             >
 336+ EB69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB69             >Latest_Definition defl  Heap_Ptr
 336+ EB69             >
 336+ EB69             >                // dummy db directives used to calculate length of namec
 336+ EB69 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB6D 53 2D 4C 49 >
 336+ EB71 42          >
 336+ EB72             >len_NFA         defl    $ - temp_NFA
 336+ EB72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB69             >
 336+ EB69 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB6A 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB6E 53 2D 4C 49 >
 336+ EB72 42          >
 336+ EB73             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB72 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB73             >
 336+ EB73 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB75             >Prev_Ptr        defl    Heap_Ptr
 336+ EB75             >
 336+ EB75             >mirror_Ptr      defl    $
 336+ EB75             >
 336+ EB75 04 7C       >                dw      Dict_Ptr + 2        // xt
 336+ EB77             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB77             >
 336+ EB77             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB77             >
 336+ EB77             >//              ______________________________________________________________________
 336+ EB77             >//              Dictionary part
 336+ EB77             >
 336+ EB77             >                org     Dict_Ptr
 336+ 7C02             >
 336+ 7C02 75 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 7C04             >
 336+ 7C04             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7C04 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 7C07             >
 336+ 7C07             >
 336+ 7C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7C07             >
 336+ 7C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7C07 04 6C 69 62                  db      4, "lib/", 0
 337+ 7C0B 2F 00
 338+ 7C0D
 339+ 7C0D              // Concatenate path at a and filename and include it
 340+ 7C0D              // No error is issued if filename doesn't exist.
 341+ 7C0D                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 7C0D             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 7C0D             >
 341+ 7C0D             >Dict_Ptr        defl    $
 341+ 7C0D             >
 341+ 7C0D             >//              ______________________________________________________________________
 341+ 7C0D             >//              Heap part
 341+ 7C0D             >
 341+ 7C0D             >
 341+ 7C0D             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB77             >
 341+ EB77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB77             >Latest_Definition defl  Heap_Ptr
 341+ EB77             >
 341+ EB77             >                // dummy db directives used to calculate length of namec
 341+ EB77 4E 45 45 44 >                db      "NEEDS/"
 341+ EB7B 53 2F       >
 341+ EB7D             >len_NFA         defl    $ - temp_NFA
 341+ EB7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB77             >
 341+ EB77 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB78 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB7C 53 2F       >
 341+ EB7E             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB7D AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB7E             >
 341+ EB7E 69 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB80             >Prev_Ptr        defl    Heap_Ptr
 341+ EB80             >
 341+ EB80             >mirror_Ptr      defl    $
 341+ EB80             >
 341+ EB80 0F 7C       >                dw      Dict_Ptr + 2        // xt
 341+ EB82             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB82             >
 341+ EB82             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB82             >
 341+ EB82             >//              ______________________________________________________________________
 341+ EB82             >//              Dictionary part
 341+ EB82             >
 341+ EB82             >                org     Dict_Ptr
 341+ 7C0D             >
 341+ 7C0D 80 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 7C0F             >
 341+ 7C0F             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 7C0F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 7C12             >
 341+ 7C12             >
 341+ 7C12             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 7C12             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 7C12             >
 341+ 7C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 7C12 32 6F 1C 69                  dw      COUNT, TUCK             // n a n
 343+ 7C16 CC 7B 25 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 7C1A 94 67
 344+ 7C1C CC 7B A6 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 7C20 A4 7B BF 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 7C24 25 69
 346+ 7C26 A3 63 23 00                  dw      LIT, 35
 347+ 7C2A 94 67                        dw      CMOVE
 348+ 7C2C CC 7B                        dw      NEEDS_FN
 349+ 7C2E C9 70 9C 6A                  dw      PAD, ONE, F_OPEN
 349+ 7C32 5D 67
 350+ 7C34 78 68                        dw      ZEQUAL
 351+ 7C36 F5 63                        dw      ZBRANCH
 352+ 7C38 08 00                        dw      Needs_1 - $
 353+ 7C3A A4 7A                        dw          F_INCLUDE
 354+ 7C3C E8 63                        dw      BRANCH
 355+ 7C3E 04 00                        dw      Needs_2 - $
 356+ 7C40              Needs_1:
 357+ 7C40              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 7C40              //              dw          LIT, 43, MESSAGE
 359+ 7C40 11 69                        dw          DROP
 360+ 7C42              Needs_2:
 361+ 7C42 53 68                        dw      EXIT                    // ;
 362+ 7C44
 363+ 7C44
 364+ 7C44                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 7C44             >
 364+ 7C44             >Dict_Ptr        defl    $
 364+ 7C44             >
 364+ 7C44             >//              ______________________________________________________________________
 364+ 7C44             >//              Heap part
 364+ 7C44             >
 364+ 7C44             >
 364+ 7C44             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB82             >
 364+ EB82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB82             >Latest_Definition defl  Heap_Ptr
 364+ EB82             >
 364+ EB82             >                // dummy db directives used to calculate length of namec
 364+ EB82 4E 44 4F 4D >                db      "NDOM"
 364+ EB86             >len_NFA         defl    $ - temp_NFA
 364+ EB86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB82             >
 364+ EB82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB83 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB87             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB86 CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB87             >
 364+ EB87 77 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB89             >Prev_Ptr        defl    Heap_Ptr
 364+ EB89             >
 364+ EB89             >mirror_Ptr      defl    $
 364+ EB89             >
 364+ EB89 46 7C       >                dw      Dict_Ptr + 2        // xt
 364+ EB8B             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB8B             >
 364+ EB8B             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB8B             >
 364+ EB8B             >//              ______________________________________________________________________
 364+ EB8B             >//              Dictionary part
 364+ EB8B             >
 364+ EB8B             >                org     Dict_Ptr
 364+ 7C44             >
 364+ 7C44 89 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 7C46             >
 364+ 7C46             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7C46 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 7C49             >
 364+ 7C49             >
 364+ 7C49             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 7C49             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 7C49             >
 364+ 7C49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 7C49              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 7C49 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 7C4D 7C 5C 3C 3E
 366+ 7C51 22
 367+ 7C52 00                           db 0
 368+ 7C53
 369+ 7C53                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 7C53             >
 369+ 7C53             >Dict_Ptr        defl    $
 369+ 7C53             >
 369+ 7C53             >//              ______________________________________________________________________
 369+ 7C53             >//              Heap part
 369+ 7C53             >
 369+ 7C53             >
 369+ 7C53             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB8B             >
 369+ EB8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB8B             >Latest_Definition defl  Heap_Ptr
 369+ EB8B             >
 369+ EB8B             >                // dummy db directives used to calculate length of namec
 369+ EB8B 4E 43 44 4D >                db      "NCDM"
 369+ EB8F             >len_NFA         defl    $ - temp_NFA
 369+ EB8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB8B             >
 369+ EB8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB8C 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB90             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB8F CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB90             >
 369+ EB90 82 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB92             >Prev_Ptr        defl    Heap_Ptr
 369+ EB92             >
 369+ EB92             >mirror_Ptr      defl    $
 369+ EB92             >
 369+ EB92 55 7C       >                dw      Dict_Ptr + 2        // xt
 369+ EB94             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB94             >
 369+ EB94             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB94             >
 369+ EB94             >//              ______________________________________________________________________
 369+ EB94             >//              Dictionary part
 369+ EB94             >
 369+ EB94             >                org     Dict_Ptr
 369+ 7C53             >
 369+ 7C53 92 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 7C55             >
 369+ 7C55             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7C55 CD 1F 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 7C58             >
 369+ 7C58             >
 369+ 7C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7C58             >
 369+ 7C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7C58              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 7C58 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 7C5C 24 5F 7B 7D
 371+ 7C60 7E
 372+ 7C61 00                           db 0
 373+ 7C62
 374+ 7C62              // Replace illegal character in filename using the map here above
 375+ 7C62              // at the moment we need only  "
 376+ 7C62                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 7C62             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 7C62             >
 376+ 7C62             >Dict_Ptr        defl    $
 376+ 7C62             >
 376+ 7C62             >//              ______________________________________________________________________
 376+ 7C62             >//              Heap part
 376+ 7C62             >
 376+ 7C62             >
 376+ 7C62             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB94             >
 376+ EB94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB94             >Latest_Definition defl  Heap_Ptr
 376+ EB94             >
 376+ EB94             >                // dummy db directives used to calculate length of namec
 376+ EB94 4D 41 50 2D >                db      "MAP-FN"
 376+ EB98 46 4E       >
 376+ EB9A             >len_NFA         defl    $ - temp_NFA
 376+ EB9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB94             >
 376+ EB94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB95 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB99 46 4E       >
 376+ EB9B             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB9A CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB9B             >
 376+ EB9B 8B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB9D             >Prev_Ptr        defl    Heap_Ptr
 376+ EB9D             >
 376+ EB9D             >mirror_Ptr      defl    $
 376+ EB9D             >
 376+ EB9D 64 7C       >                dw      Dict_Ptr + 2        // xt
 376+ EB9F             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB9F             >
 376+ EB9F             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB9F             >
 376+ EB9F             >//              ______________________________________________________________________
 376+ EB9F             >//              Dictionary part
 376+ EB9F             >
 376+ EB9F             >                org     Dict_Ptr
 376+ 7C62             >
 376+ 7C62 9D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 7C64             >
 376+ 7C64             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 7C64 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 7C67             >
 376+ 7C67             >
 376+ 7C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 7C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 7C67             >
 376+ 7C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 7C67 32 6F 3F 6F                  dw      COUNT, BOUNDS
 378+ 7C6B 34 64                        dw      C_DO
 379+ 7C6D              Needs_3:
 380+ 7C6D 55 7C 46 7C                  dw          NCDM, NDOM, LIT, 10
 380+ 7C71 A3 63 0A 00
 381+ 7C75 3A 64 B2 69                  dw          I, CFETCH
 382+ 7C79 5B 65                        dw          C_MAP
 383+ 7C7B 3A 64 BB 69                  dw          I, CSTORE
 384+ 7C7F              Needs_4:
 385+ 7C7F E0 63                        dw      C_LOOP
 386+ 7C81 EC FF                        dw      Needs_3 - $
 387+ 7C83 53 68                        dw      EXIT
 388+ 7C85
 389+ 7C85
 390+ 7C85              // include  "path/cccc.f" if cccc is not defined
 391+ 7C85              // filename cccc.f is temporary stored at NEEDS-W
 392+ 7C85                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 7C85             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 7C85             >
 392+ 7C85             >Dict_Ptr        defl    $
 392+ 7C85             >
 392+ 7C85             >//              ______________________________________________________________________
 392+ 7C85             >//              Heap part
 392+ 7C85             >
 392+ 7C85             >
 392+ 7C85             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB9F             >
 392+ EB9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB9F             >Latest_Definition defl  Heap_Ptr
 392+ EB9F             >
 392+ EB9F             >                // dummy db directives used to calculate length of namec
 392+ EB9F 4E 45 45 44 >                db      "NEEDS-F"
 392+ EBA3 53 2D 46    >
 392+ EBA6             >len_NFA         defl    $ - temp_NFA
 392+ EBA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB9F             >
 392+ EB9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EBA0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EBA4 53 2D 46    >
 392+ EBA7             >                org     $-1                 // alter last byte of Name just above to set
 392+ EBA6 C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EBA7             >
 392+ EBA7 94 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EBA9             >Prev_Ptr        defl    Heap_Ptr
 392+ EBA9             >
 392+ EBA9             >mirror_Ptr      defl    $
 392+ EBA9             >
 392+ EBA9 87 7C       >                dw      Dict_Ptr + 2        // xt
 392+ EBAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EBAB             >
 392+ EBAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EBAB             >
 392+ EBAB             >//              ______________________________________________________________________
 392+ EBAB             >//              Dictionary part
 392+ EBAB             >
 392+ EBAB             >                org     Dict_Ptr
 392+ 7C85             >
 392+ 7C85 A9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 7C87             >
 392+ 7C87             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 7C87 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 7C8A             >
 392+ 7C8A             >
 392+ 7C8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 7C8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 7C8A             >
 392+ 7C8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 7C8A 18 73                        dw      LFIND
 394+ 7C8C F5 63                        dw      ZBRANCH
 395+ 7C8E 0A 00                        dw      Needs_5 - $
 396+ 7C90
 397+ 7C90 11 69 68 69                  dw          DROP, TWO_DROP
 398+ 7C94 E8 63                        dw      BRANCH
 399+ 7C96 2C 00                        dw      Needs_6 - $
 400+ 7C98              Needs_5:
 401+ 7C98 A4 7B                        dw          NEEDS_W
 402+ 7C9A A3 63 23 00                  dw          LIT, 35
 403+ 7C9E A0 70                        dw          ERASE                   // a
 404+ 7CA0 BA 6B B2 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 7CA4 BF 68
 405+ 7CA6 BA 6B 08 69                  dw          HERE, OVER              // a n here n
 406+ 7CAA A4 7B 25 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 7CAE 94 67
 407+ 7CB0 A4 7B 64 7C                  dw          NEEDS_W, NEEDS_CHECK
 408+ 7CB4 A4 7B A6 68                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 7CB8 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 7CBC 25 69 A7 69                  dw          SWAP, STORE             // a
 411+ 7CC0 0F 7C                        dw          NEEDS_SLASH
 412+ 7CC2              Needs_6:
 413+ 7CC2 53 68                        dw      EXIT
 414+ 7CC4
 415+ 7CC4
 416+ 7CC4              // check for cccc exists in vocabulary
 417+ 7CC4              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 7CC4              // search in inc subdirectory
 419+ 7CC4                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 7CC4             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 7CC4             >
 419+ 7CC4             >Dict_Ptr        defl    $
 419+ 7CC4             >
 419+ 7CC4             >//              ______________________________________________________________________
 419+ 7CC4             >//              Heap part
 419+ 7CC4             >
 419+ 7CC4             >
 419+ 7CC4             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EBAB             >
 419+ EBAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EBAB             >Latest_Definition defl  Heap_Ptr
 419+ EBAB             >
 419+ EBAB             >                // dummy db directives used to calculate length of namec
 419+ EBAB 4E 45 45 44 >                db      "NEEDS"
 419+ EBAF 53          >
 419+ EBB0             >len_NFA         defl    $ - temp_NFA
 419+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EBAB             >
 419+ EBAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EBAC 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EBB0 53          >
 419+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 419+ EBB0 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EBB1             >
 419+ EBB1 9F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 419+ EBB3             >
 419+ EBB3             >mirror_Ptr      defl    $
 419+ EBB3             >
 419+ EBB3 C6 7C       >                dw      Dict_Ptr + 2        // xt
 419+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EBB5             >
 419+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EBB5             >
 419+ EBB5             >//              ______________________________________________________________________
 419+ EBB5             >//              Dictionary part
 419+ EBB5             >
 419+ EBB5             >                org     Dict_Ptr
 419+ 7CC4             >
 419+ 7CC4 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7CC6             >
 419+ 7CC6             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7CC6 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 7CC9             >
 419+ 7CC9             >
 419+ 7CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 7CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 7CC9             >
 419+ 7CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 7CC9 3C 6B 9D 69                  dw      TO_IN, FETCH
 421+ 7CCD 2C 69                        dw      DUP
 422+ 7CCF F9 7B 87 7C                  dw      NEEDS_INC, NEEDS_PATH
 423+ 7CD3 3C 6B A7 69                  dw      TO_IN, STORE
 424+ 7CD7 04 7C 87 7C                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 7CDB 3C 6B A7 69                  dw      TO_IN, STORE
 426+ 7CDF 18 73                        dw      LFIND
 427+ 7CE1 F5 63                        dw      ZBRANCH
 428+ 7CE3 08 00                        dw      Needs_10 - $
 429+ 7CE5 68 69                        dw          TWO_DROP
 430+ 7CE7 E8 63                        dw      BRANCH
 431+ 7CE9 10 00                        dw      Needs_11 - $
 432+ 7CEB              Needs_10:
 433+ 7CEB A4 7B 32 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 7CEF 86 6F 8B 6C
 434+ 7CF3 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 434+ 7CF7 A7 77
 435+ 7CF9              Needs_11:
 436+ 7CF9 53 68                        dw      EXIT
 437+ 7CFB
 438+ 7CFB
 439+ 7CFB              //  ______________________________________________________________________
 440+ 7CFB              //
 441+ 7CFB              // load         n --
 442+ 7CFB                              Colon_Def LOAD, "LOAD", is_normal
 442+ 7CFB             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 7CFB             >
 442+ 7CFB             >Dict_Ptr        defl    $
 442+ 7CFB             >
 442+ 7CFB             >//              ______________________________________________________________________
 442+ 7CFB             >//              Heap part
 442+ 7CFB             >
 442+ 7CFB             >
 442+ 7CFB             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EBB5             >
 442+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EBB5             >Latest_Definition defl  Heap_Ptr
 442+ EBB5             >
 442+ EBB5             >                // dummy db directives used to calculate length of namec
 442+ EBB5 4C 4F 41 44 >                db      "LOAD"
 442+ EBB9             >len_NFA         defl    $ - temp_NFA
 442+ EBB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EBB5             >
 442+ EBB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EBB6 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EBBA             >                org     $-1                 // alter last byte of Name just above to set
 442+ EBB9 C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EBBA             >
 442+ EBBA AB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBBC             >Prev_Ptr        defl    Heap_Ptr
 442+ EBBC             >
 442+ EBBC             >mirror_Ptr      defl    $
 442+ EBBC             >
 442+ EBBC FD 7C       >                dw      Dict_Ptr + 2        // xt
 442+ EBBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBBE             >
 442+ EBBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBBE             >
 442+ EBBE             >//              ______________________________________________________________________
 442+ EBBE             >//              Dictionary part
 442+ EBBE             >
 442+ EBBE             >                org     Dict_Ptr
 442+ 7CFB             >
 442+ 7CFB BC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 7CFD             >
 442+ 7CFD             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7CFD CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 7D00             >
 442+ 7D00             >
 442+ 7D00             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 7D00             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 7D00             >
 442+ 7D00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 7D00 36 6B 9D 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 7D04 5D 68
 444+ 7D06 3C 6B 9D 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 7D0A 5D 68
 445+ 7D0C
 446+ 7D0C 95 6A 3C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 7D10 A7 69
 447+ 7D12 CD 6A 33 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 7D16 36 6B A7 69
 448+ 7D1A DB 74                        dw      INTERPRET               // interpret
 449+ 7D1C
 450+ 7D1C 68 68 3C 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 7D20 A7 69
 451+ 7D22 68 68 36 6B                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 7D26 A7 69
 452+ 7D28 53 68                        dw      EXIT                    // ;
 453+ 7D2A
 454+ 7D2A              //  ______________________________________________________________________
 455+ 7D2A              //
 456+ 7D2A              // -->          --
 457+ 7D2A                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 7D2A             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 7D2A             >
 457+ 7D2A             >Dict_Ptr        defl    $
 457+ 7D2A             >
 457+ 7D2A             >//              ______________________________________________________________________
 457+ 7D2A             >//              Heap part
 457+ 7D2A             >
 457+ 7D2A             >
 457+ 7D2A             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBBE             >
 457+ EBBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBBE             >Latest_Definition defl  Heap_Ptr
 457+ EBBE             >
 457+ EBBE             >                // dummy db directives used to calculate length of namec
 457+ EBBE 2D 2D 3E    >                db      "-->"
 457+ EBC1             >len_NFA         defl    $ - temp_NFA
 457+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBBE             >
 457+ EBBE C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBBF 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBC1 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBC2             >
 457+ EBC2 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 457+ EBC4             >
 457+ EBC4             >mirror_Ptr      defl    $
 457+ EBC4             >
 457+ EBC4 2C 7D       >                dw      Dict_Ptr + 2        // xt
 457+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBC6             >
 457+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBC6             >
 457+ EBC6             >//              ______________________________________________________________________
 457+ EBC6             >//              Dictionary part
 457+ EBC6             >
 457+ EBC6             >                org     Dict_Ptr
 457+ 7D2A             >
 457+ 7D2A C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 7D2C             >
 457+ 7D2C             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 7D2C CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 7D2F             >
 457+ 7D2F             >
 457+ 7D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 7D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 7D2F             >
 457+ 7D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7D2F 53 6E                        dw      QLOADING                // ?loading
 459+ 7D31 95 6A 3C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 7D35 A7 69
 460+ 7D37 CD 6A                        dw      BSCR                    // b/scr
 461+ 7D39 36 6B 9D 69                  dw      BLK, FETCH              // blk @
 462+ 7D3D 08 69                        dw      OVER                    // over
 463+ 7D3F 58 77                        dw      MOD                     // mod
 464+ 7D41 F9 6B                        dw      SUBTRACT                // -
 465+ 7D43 36 6B 85 69                  dw      BLK, PLUSSTORE          // +!
 466+ 7D47 53 68                        dw      EXIT                    // ;
 467+ 7D49
 468+ 7D49              //  ______________________________________________________________________
 469+ 7D49              //
 470+ 7D49              // '            -- xt
 471+ 7D49                              Colon_Def TICK, "'", is_normal
 471+ 7D49             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 7D49             >
 471+ 7D49             >Dict_Ptr        defl    $
 471+ 7D49             >
 471+ 7D49             >//              ______________________________________________________________________
 471+ 7D49             >//              Heap part
 471+ 7D49             >
 471+ 7D49             >
 471+ 7D49             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBC6             >
 471+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBC6             >Latest_Definition defl  Heap_Ptr
 471+ EBC6             >
 471+ EBC6             >                // dummy db directives used to calculate length of namec
 471+ EBC6 27          >                db      "'"
 471+ EBC7             >len_NFA         defl    $ - temp_NFA
 471+ EBC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBC6             >
 471+ EBC6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBC7 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBC8             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBC7 A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBC8             >
 471+ EBC8 BE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBCA             >Prev_Ptr        defl    Heap_Ptr
 471+ EBCA             >
 471+ EBCA             >mirror_Ptr      defl    $
 471+ EBCA             >
 471+ EBCA 4B 7D       >                dw      Dict_Ptr + 2        // xt
 471+ EBCC             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBCC             >
 471+ EBCC             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBCC             >
 471+ EBCC             >//              ______________________________________________________________________
 471+ EBCC             >//              Dictionary part
 471+ EBCC             >
 471+ EBCC             >                org     Dict_Ptr
 471+ 7D49             >
 471+ 7D49 CA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 7D4B             >
 471+ 7D4B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7D4B CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7D4E             >
 471+ 7D4E             >
 471+ 7D4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7D4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7D4E             >
 471+ 7D4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7D4E 18 73                        dw      LFIND                   // -find
 473+ 7D50 78 68                        dw      ZEQUAL                  // 0=
 474+ 7D52 95 6A F6 6D                  dw      ZERO, QERROR            // 0 ?error
 475+ 7D56 11 69                        dw      DROP                    // drop
 476+ 7D58 53 68                        dw      EXIT                    // ;
 477+ 7D5A
 478+ 7D5A              //  ______________________________________________________________________
 479+ 7D5A              //
 480+ 7D5A              // forget       -- cccc
 481+ 7D5A                              Colon_Def FORGET, "FORGET", is_normal
 481+ 7D5A             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 7D5A             >
 481+ 7D5A             >Dict_Ptr        defl    $
 481+ 7D5A             >
 481+ 7D5A             >//              ______________________________________________________________________
 481+ 7D5A             >//              Heap part
 481+ 7D5A             >
 481+ 7D5A             >
 481+ 7D5A             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBCC             >
 481+ EBCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBCC             >Latest_Definition defl  Heap_Ptr
 481+ EBCC             >
 481+ EBCC             >                // dummy db directives used to calculate length of namec
 481+ EBCC 46 4F 52 47 >                db      "FORGET"
 481+ EBD0 45 54       >
 481+ EBD2             >len_NFA         defl    $ - temp_NFA
 481+ EBD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBCC             >
 481+ EBCC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBCD 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBD1 45 54       >
 481+ EBD3             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBD2 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBD3             >
 481+ EBD3 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBD5             >Prev_Ptr        defl    Heap_Ptr
 481+ EBD5             >
 481+ EBD5             >mirror_Ptr      defl    $
 481+ EBD5             >
 481+ EBD5 5C 7D       >                dw      Dict_Ptr + 2        // xt
 481+ EBD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBD7             >
 481+ EBD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBD7             >
 481+ EBD7             >//              ______________________________________________________________________
 481+ EBD7             >//              Dictionary part
 481+ EBD7             >
 481+ EBD7             >                org     Dict_Ptr
 481+ 7D5A             >
 481+ 7D5A D5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 7D5C             >
 481+ 7D5C             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7D5C CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7D5F             >
 481+ 7D5F             >
 481+ 7D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7D5F             >
 481+ 7D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7D5F 5A 6B 9D 69                  dw      CURRENT, FETCH          // current @
 483+ 7D63 54 6B 9D 69                  dw      CONTEXT, FETCH          // context @
 484+ 7D67 F9 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 7D6B 17 00 F6 6D
 485+ 7D6F 4B 7D 75 6D                  dw      TICK, TO_BODY           // ' >body
 486+ 7D73 2C 69 0C 6B                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 7D77 9D 69
 487+ 7D79 10 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 7D7D 15 00 F6 6D
 488+ 7D81 2C 69 AA 6D                  dw      DUP, NFA                // dup nfa
 489+ 7D85
 490+ 7D85                          //  dw      DUP
 491+ 7D85                          //  dw      LIT, $E000, LESS
 492+ 7D85                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 7D85                          //  dw      OR_OP, NOT_OP
 494+ 7D85                          //  dw      ZBRANCH
 495+ 7D85                          //  dw      Forget_then - $
 496+ 7D85
 497+ 7D85 B3 6C D6 6C                  dw      MMU7_FETCH, FROM_FAR
 498+ 7D89 2A 6B A7 69                  dw      HP, STORE
 499+ 7D8D 2C 69 9F 6D                  dw      DUP, CFA, CELL_MINUS
 499+ 7D91 DA 68
 500+ 7D93              // Forget_then:
 501+ 7D93 12 6B A7 69                  dw      DP, STORE               // dp !
 502+ 7D97 B5 6D 9D 69                  dw      LFA, FETCH              // lfa @
 503+ 7D9B 54 6B 9D 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 7D9F A7 69
 504+ 7DA1 53 68                        dw      EXIT                    // ;
 505+ 7DA3
 506+ 7DA3              //  ______________________________________________________________________
 507+ 7DA3              //
 508+ 7DA3              // marker       -- cccc
 509+ 7DA3                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 7DA3             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 7DA3             >
 509+ 7DA3             >Dict_Ptr        defl    $
 509+ 7DA3             >
 509+ 7DA3             >//              ______________________________________________________________________
 509+ 7DA3             >//              Heap part
 509+ 7DA3             >
 509+ 7DA3             >
 509+ 7DA3             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBD7             >
 509+ EBD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBD7             >Latest_Definition defl  Heap_Ptr
 509+ EBD7             >
 509+ EBD7             >                // dummy db directives used to calculate length of namec
 509+ EBD7 4D 41 52 4B >                db      "MARKER"
 509+ EBDB 45 52       >
 509+ EBDD             >len_NFA         defl    $ - temp_NFA
 509+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBD7             >
 509+ EBD7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBD8 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBDC 45 52       >
 509+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBDD D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBDE             >
 509+ EBDE CC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 509+ EBE0             >
 509+ EBE0             >mirror_Ptr      defl    $
 509+ EBE0             >
 509+ EBE0 A5 7D       >                dw      Dict_Ptr + 2        // xt
 509+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBE2             >
 509+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBE2             >
 509+ EBE2             >//              ______________________________________________________________________
 509+ EBE2             >//              Dictionary part
 509+ EBE2             >
 509+ EBE2             >                org     Dict_Ptr
 509+ 7DA3             >
 509+ 7DA3 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 7DA5             >
 509+ 7DA5             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 7DA5 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 7DA8             >
 509+ 7DA8             >
 509+ 7DA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 7DA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 7DA8             >
 509+ 7DA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 7DA8 0A 6F                        dw      CBUILDS
 511+ 7DAA 18 6B 9D 69                  dw      VOC_LINK, FETCH, COMMA
 511+ 7DAE D0 6B
 512+ 7DB0 5A 6B 9D 69                  dw      CURRENT, FETCH, COMMA
 512+ 7DB4 D0 6B
 513+ 7DB6 54 6B 9D 69                  dw      CONTEXT, FETCH, COMMA
 513+ 7DBA D0 6B
 514+ 7DBC 5A 6B 9D 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 7DC0 9D 69 D0 6B
 515+ 7DC4 66 6D C4 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 7DC8 B5 6D 9D 69
 515+ 7DCC D0 6B
 516+ 7DCE 15 6F                        dw      DOES_TO
 517+ 7DD0 2C 69 9D 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 7DD4 18 6B A7 69
 517+ 7DD8 D5 68
 518+ 7DDA 2C 69 9D 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 7DDE 5A 6B A7 69
 518+ 7DE2 D5 68
 519+ 7DE4 2C 69 9D 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 7DE8 54 6B A7 69
 519+ 7DEC D5 68
 520+ 7DEE 2C 69 9D 69                  dw      DUP, FETCH
 521+ 7DF2                          //  dw      DUP, QHEAPP
 522+ 7DF2                          //  dw      ZBRANCH
 523+ 7DF2                          //  dw      Marker_then - $
 524+ 7DF2 2C 69 2A 6B                  dw          DUP, HP, STORE
 524+ 7DF6 A7 69
 525+ 7DF8 C4 6D 9F 6D                  dw          PFA, CFA, CELL_MINUS
 525+ 7DFC DA 68
 526+ 7DFE              // Marker_then:
 527+ 7DFE 12 6B A7 69                  dw      DP, STORE, CELL_PLUS
 527+ 7E02 D5 68
 528+ 7E04 9D 69 5A 6B                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 7E08 9D 69 A7 69
 529+ 7E0C 53 68                        dw      EXIT
 530+ 7E0E
 531+ 7E0E              //  ______________________________________________________________________
 532+ 7E0E              //
 533+ 7E0E              // spaces       n --
 534+ 7E0E                              Colon_Def SPACES, "SPACES", is_normal
 534+ 7E0E             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 7E0E             >
 534+ 7E0E             >Dict_Ptr        defl    $
 534+ 7E0E             >
 534+ 7E0E             >//              ______________________________________________________________________
 534+ 7E0E             >//              Heap part
 534+ 7E0E             >
 534+ 7E0E             >
 534+ 7E0E             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBE2             >
 534+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBE2             >Latest_Definition defl  Heap_Ptr
 534+ EBE2             >
 534+ EBE2             >                // dummy db directives used to calculate length of namec
 534+ EBE2 53 50 41 43 >                db      "SPACES"
 534+ EBE6 45 53       >
 534+ EBE8             >len_NFA         defl    $ - temp_NFA
 534+ EBE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBE2             >
 534+ EBE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBE3 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBE7 45 53       >
 534+ EBE9             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBE8 D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBE9             >
 534+ EBE9 D7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBEB             >Prev_Ptr        defl    Heap_Ptr
 534+ EBEB             >
 534+ EBEB             >mirror_Ptr      defl    $
 534+ EBEB             >
 534+ EBEB 10 7E       >                dw      Dict_Ptr + 2        // xt
 534+ EBED             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBED             >
 534+ EBED             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBED             >
 534+ EBED             >//              ______________________________________________________________________
 534+ EBED             >//              Dictionary part
 534+ EBED             >
 534+ EBED             >                org     Dict_Ptr
 534+ 7E0E             >
 534+ 7E0E EB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 7E10             >
 534+ 7E10             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 7E10 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 7E13             >
 534+ 7E13             >
 534+ 7E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 7E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 7E13             >
 534+ 7E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 7E13 95 6A 51 6C                  dw      ZERO, MAX
 536+ 7E17 95 6A 0C 64                  dw      ZERO, C_Q_DO
 537+ 7E1B 08 00                        dw      Spaces_Leave - $
 538+ 7E1D              Spaces_Loop:
 539+ 7E1D 8B 6C                        dw          SPACE
 540+ 7E1F E0 63                        dw      C_LOOP
 541+ 7E21 FC FF                        dw      Spaces_Loop - $
 542+ 7E23              Spaces_Leave:
 543+ 7E23 53 68                        dw      EXIT                    // ;
 544+ 7E25
 545+ 7E25              //  ______________________________________________________________________
 546+ 7E25              //
 547+ 7E25              // <#           --
 548+ 7E25                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 7E25             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 7E25             >
 548+ 7E25             >Dict_Ptr        defl    $
 548+ 7E25             >
 548+ 7E25             >//              ______________________________________________________________________
 548+ 7E25             >//              Heap part
 548+ 7E25             >
 548+ 7E25             >
 548+ 7E25             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBED             >
 548+ EBED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBED             >Latest_Definition defl  Heap_Ptr
 548+ EBED             >
 548+ EBED             >                // dummy db directives used to calculate length of namec
 548+ EBED 3C 23       >                db      "<#"
 548+ EBEF             >len_NFA         defl    $ - temp_NFA
 548+ EBEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBED             >
 548+ EBED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBEE 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBF0             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBEF A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBF0             >
 548+ EBF0 E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBF2             >Prev_Ptr        defl    Heap_Ptr
 548+ EBF2             >
 548+ EBF2             >mirror_Ptr      defl    $
 548+ EBF2             >
 548+ EBF2 27 7E       >                dw      Dict_Ptr + 2        // xt
 548+ EBF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBF4             >
 548+ EBF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBF4             >
 548+ EBF4             >//              ______________________________________________________________________
 548+ EBF4             >//              Dictionary part
 548+ EBF4             >
 548+ EBF4             >                org     Dict_Ptr
 548+ 7E25             >
 548+ 7E25 F2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 7E27             >
 548+ 7E27             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 7E27 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 7E2A             >
 548+ 7E2A             >
 548+ 7E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 7E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 7E2A             >
 548+ 7E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 7E2A C9 70 84 6B                  dw      PAD, HLD, STORE
 549+ 7E2E A7 69
 550+ 7E30 53 68                        dw      EXIT
 551+ 7E32
 552+ 7E32              //  ______________________________________________________________________
 553+ 7E32              //
 554+ 7E32              // #>           --
 555+ 7E32                              Colon_Def DASH_END, "#>", is_normal
 555+ 7E32             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 7E32             >
 555+ 7E32             >Dict_Ptr        defl    $
 555+ 7E32             >
 555+ 7E32             >//              ______________________________________________________________________
 555+ 7E32             >//              Heap part
 555+ 7E32             >
 555+ 7E32             >
 555+ 7E32             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBF4             >
 555+ EBF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBF4             >Latest_Definition defl  Heap_Ptr
 555+ EBF4             >
 555+ EBF4             >                // dummy db directives used to calculate length of namec
 555+ EBF4 23 3E       >                db      "#>"
 555+ EBF6             >len_NFA         defl    $ - temp_NFA
 555+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBF4             >
 555+ EBF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBF5 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBF6 BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBF7             >
 555+ EBF7 ED 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 555+ EBF9             >
 555+ EBF9             >mirror_Ptr      defl    $
 555+ EBF9             >
 555+ EBF9 34 7E       >                dw      Dict_Ptr + 2        // xt
 555+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBFB             >
 555+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBFB             >
 555+ EBFB             >//              ______________________________________________________________________
 555+ EBFB             >//              Dictionary part
 555+ EBFB             >
 555+ EBFB             >                org     Dict_Ptr
 555+ 7E32             >
 555+ 7E32 F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 7E34             >
 555+ 7E34             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7E34 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7E37             >
 555+ 7E37             >
 555+ 7E37             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7E37             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7E37             >
 555+ 7E37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7E37 68 69                        dw      TWO_DROP
 557+ 7E39 84 6B 9D 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 7E3D C9 70 08 69
 557+ 7E41 F9 6B
 558+ 7E43 53 68                        dw      EXIT
 559+ 7E45
 560+ 7E45              //  ______________________________________________________________________
 561+ 7E45              //
 562+ 7E45              // sign         n d -- d
 563+ 7E45                              Colon_Def SIGN, "SIGN", is_normal
 563+ 7E45             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 7E45             >
 563+ 7E45             >Dict_Ptr        defl    $
 563+ 7E45             >
 563+ 7E45             >//              ______________________________________________________________________
 563+ 7E45             >//              Heap part
 563+ 7E45             >
 563+ 7E45             >
 563+ 7E45             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBFB             >
 563+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBFB             >Latest_Definition defl  Heap_Ptr
 563+ EBFB             >
 563+ EBFB             >                // dummy db directives used to calculate length of namec
 563+ EBFB 53 49 47 4E >                db      "SIGN"
 563+ EBFF             >len_NFA         defl    $ - temp_NFA
 563+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBFB             >
 563+ EBFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBFC 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBFF CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EC00             >
 563+ EC00 F4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EC02             >Prev_Ptr        defl    Heap_Ptr
 563+ EC02             >
 563+ EC02             >mirror_Ptr      defl    $
 563+ EC02             >
 563+ EC02 47 7E       >                dw      Dict_Ptr + 2        // xt
 563+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EC04             >
 563+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EC04             >
 563+ EC04             >//              ______________________________________________________________________
 563+ EC04             >//              Dictionary part
 563+ EC04             >
 563+ EC04             >                org     Dict_Ptr
 563+ 7E45             >
 563+ 7E45 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 7E47             >
 563+ 7E47             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7E47 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7E4A             >
 563+ 7E4A             >
 563+ 7E4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7E4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7E4A             >
 563+ 7E4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7E4A 8B 68                        dw      ZLESS
 565+ 7E4C F5 63                        dw      ZBRANCH
 566+ 7E4E 08 00                        dw      Sign_Endif - $
 567+ 7E50 A3 63 2D 00                  dw          LIT, 45, HOLD
 567+ 7E54 B6 70
 568+ 7E56              Sign_Endif:
 569+ 7E56 53 68                        dw      EXIT
 570+ 7E58
 571+ 7E58              //  ______________________________________________________________________
 572+ 7E58              //
 573+ 7E58              // #           d1 -- d2
 574+ 7E58                              Colon_Def DASH, "#", is_normal
 574+ 7E58             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 7E58             >
 574+ 7E58             >Dict_Ptr        defl    $
 574+ 7E58             >
 574+ 7E58             >//              ______________________________________________________________________
 574+ 7E58             >//              Heap part
 574+ 7E58             >
 574+ 7E58             >
 574+ 7E58             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EC04             >
 574+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EC04             >Latest_Definition defl  Heap_Ptr
 574+ EC04             >
 574+ EC04             >                // dummy db directives used to calculate length of namec
 574+ EC04 23          >                db      "#"
 574+ EC05             >len_NFA         defl    $ - temp_NFA
 574+ EC05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EC04             >
 574+ EC04 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EC05 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EC06             >                org     $-1                 // alter last byte of Name just above to set
 574+ EC05 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EC06             >
 574+ EC06 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EC08             >Prev_Ptr        defl    Heap_Ptr
 574+ EC08             >
 574+ EC08             >mirror_Ptr      defl    $
 574+ EC08             >
 574+ EC08 5A 7E       >                dw      Dict_Ptr + 2        // xt
 574+ EC0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EC0A             >
 574+ EC0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EC0A             >
 574+ EC0A             >//              ______________________________________________________________________
 574+ EC0A             >//              Dictionary part
 574+ EC0A             >
 574+ EC0A             >                org     Dict_Ptr
 574+ 7E58             >
 574+ 7E58 08 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 7E5A             >
 574+ 7E5A             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 7E5A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 7E5D             >
 574+ 7E5D             >
 574+ 7E5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 7E5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 7E5D             >
 574+ 7E5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 7E5D 66 6B 9D 69                  dw      BASE, FETCH
 576+ 7E61
 577+ 7E61 5D 68                        dw      TO_R                    // >r           ( ud1 )
 578+ 7E63 95 6A 73 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 7E67 E0 67
 579+ 7E69 68 68 25 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 7E6D 5D 68
 580+ 7E6F E0 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 7E71 68 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 7E73
 583+ 7E73 33 69                        dw      ROT
 584+ 7E75 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 584+ 7E79 08 69 1E 6C
 585+ 7E7D F5 63                        dw      ZBRANCH
 586+ 7E7F 08 00                        dw      Dash_Endif - $
 587+ 7E81 A3 63 07 00                  dw          LIT, 7, PLUS
 587+ 7E85 A6 68
 588+ 7E87              Dash_Endif:
 589+ 7E87
 590+ 7E87 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 7E8B A6 68 B6 70
 591+ 7E8F 53 68                        dw      EXIT
 592+ 7E91
 593+ 7E91              //  ______________________________________________________________________
 594+ 7E91              //
 595+ 7E91              // #s           d1 -- d2
 596+ 7E91                              Colon_Def DASHES, "#S", is_normal
 596+ 7E91             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 7E91             >
 596+ 7E91             >Dict_Ptr        defl    $
 596+ 7E91             >
 596+ 7E91             >//              ______________________________________________________________________
 596+ 7E91             >//              Heap part
 596+ 7E91             >
 596+ 7E91             >
 596+ 7E91             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EC0A             >
 596+ EC0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EC0A             >Latest_Definition defl  Heap_Ptr
 596+ EC0A             >
 596+ EC0A             >                // dummy db directives used to calculate length of namec
 596+ EC0A 23 53       >                db      "#S"
 596+ EC0C             >len_NFA         defl    $ - temp_NFA
 596+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EC0A             >
 596+ EC0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EC0B 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 596+ EC0C D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EC0D             >
 596+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 596+ EC0F             >
 596+ EC0F             >mirror_Ptr      defl    $
 596+ EC0F             >
 596+ EC0F 93 7E       >                dw      Dict_Ptr + 2        // xt
 596+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EC11             >
 596+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EC11             >
 596+ EC11             >//              ______________________________________________________________________
 596+ EC11             >//              Dictionary part
 596+ EC11             >
 596+ EC11             >                org     Dict_Ptr
 596+ 7E91             >
 596+ 7E91 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 7E93             >
 596+ 7E93             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7E93 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7E96             >
 596+ 7E96             >
 596+ 7E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7E96             >
 596+ 7E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7E96              Dashes_Begin:
 598+ 7E96 5A 7E 7B 69                  dw      DASH, TWO_DUP
 599+ 7E9A 22 68 78 68                  dw          OR_OP, ZEQUAL
 600+ 7E9E F5 63                        dw      ZBRANCH
 601+ 7EA0 F6 FF                        dw      Dashes_Begin - $
 602+ 7EA2 53 68                        dw      EXIT
 603+ 7EA4
 604+ 7EA4              //  ______________________________________________________________________
 605+ 7EA4              //
 606+ 7EA4              // d.r          d n --
 607+ 7EA4                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 7EA4             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 7EA4             >
 607+ 7EA4             >Dict_Ptr        defl    $
 607+ 7EA4             >
 607+ 7EA4             >//              ______________________________________________________________________
 607+ 7EA4             >//              Heap part
 607+ 7EA4             >
 607+ 7EA4             >
 607+ 7EA4             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EC11             >
 607+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EC11             >Latest_Definition defl  Heap_Ptr
 607+ EC11             >
 607+ EC11             >                // dummy db directives used to calculate length of namec
 607+ EC11 44 2E 52    >                db      "D.R"
 607+ EC14             >len_NFA         defl    $ - temp_NFA
 607+ EC14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EC11             >
 607+ EC11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EC12 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EC15             >                org     $-1                 // alter last byte of Name just above to set
 607+ EC14 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EC15             >
 607+ EC15 0A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EC17             >Prev_Ptr        defl    Heap_Ptr
 607+ EC17             >
 607+ EC17             >mirror_Ptr      defl    $
 607+ EC17             >
 607+ EC17 A6 7E       >                dw      Dict_Ptr + 2        // xt
 607+ EC19             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EC19             >
 607+ EC19             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EC19             >
 607+ EC19             >//              ______________________________________________________________________
 607+ EC19             >//              Dictionary part
 607+ EC19             >
 607+ EC19             >                org     Dict_Ptr
 607+ 7EA4             >
 607+ 7EA4 17 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 7EA6             >
 607+ 7EA6             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7EA6 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7EA9             >
 607+ 7EA9             >
 607+ 7EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7EA9             >
 607+ 7EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7EA9 5D 68                        dw      TO_R
 609+ 7EAB 1C 69 9F 76                  dw      TUCK, DABS
 610+ 7EAF 27 7E 93 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 7EB3 33 69 47 7E
 610+ 7EB7 34 7E
 611+ 7EB9 68 68                        dw      R_TO
 612+ 7EBB 08 69 F9 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 7EBF 10 7E 86 6F
 613+ 7EC3 53 68                        dw      EXIT
 614+ 7EC5
 615+ 7EC5              //  ______________________________________________________________________
 616+ 7EC5              //
 617+ 7EC5              // .r           n1 n2 --
 618+ 7EC5                              Colon_Def DOT_R, ".R", is_normal
 618+ 7EC5             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 7EC5             >
 618+ 7EC5             >Dict_Ptr        defl    $
 618+ 7EC5             >
 618+ 7EC5             >//              ______________________________________________________________________
 618+ 7EC5             >//              Heap part
 618+ 7EC5             >
 618+ 7EC5             >
 618+ 7EC5             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EC19             >
 618+ EC19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EC19             >Latest_Definition defl  Heap_Ptr
 618+ EC19             >
 618+ EC19             >                // dummy db directives used to calculate length of namec
 618+ EC19 2E 52       >                db      ".R"
 618+ EC1B             >len_NFA         defl    $ - temp_NFA
 618+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EC19             >
 618+ EC19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EC1A 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 618+ EC1B D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC1C             >
 618+ EC1C 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 618+ EC1E             >
 618+ EC1E             >mirror_Ptr      defl    $
 618+ EC1E             >
 618+ EC1E C7 7E       >                dw      Dict_Ptr + 2        // xt
 618+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC20             >
 618+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC20             >
 618+ EC20             >//              ______________________________________________________________________
 618+ EC20             >//              Dictionary part
 618+ EC20             >
 618+ EC20             >                org     Dict_Ptr
 618+ 7EC5             >
 618+ 7EC5 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 7EC7             >
 618+ 7EC7             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 7EC7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 7ECA             >
 618+ 7ECA             >
 618+ 7ECA             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 7ECA             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 7ECA             >
 618+ 7ECA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 7ECA 5D 68                        dw      TO_R
 620+ 7ECC EE 6B 68 68                  dw      S_TO_D, R_TO
 621+ 7ED0 A6 7E                        dw      D_DOT_R
 622+ 7ED2 53 68                        dw      EXIT
 623+ 7ED4
 624+ 7ED4              //  ______________________________________________________________________
 625+ 7ED4              //
 626+ 7ED4              // d.           d --
 627+ 7ED4                              Colon_Def D_DOT, "D.", is_normal
 627+ 7ED4             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 7ED4             >
 627+ 7ED4             >Dict_Ptr        defl    $
 627+ 7ED4             >
 627+ 7ED4             >//              ______________________________________________________________________
 627+ 7ED4             >//              Heap part
 627+ 7ED4             >
 627+ 7ED4             >
 627+ 7ED4             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC20             >
 627+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC20             >Latest_Definition defl  Heap_Ptr
 627+ EC20             >
 627+ EC20             >                // dummy db directives used to calculate length of namec
 627+ EC20 44 2E       >                db      "D."
 627+ EC22             >len_NFA         defl    $ - temp_NFA
 627+ EC22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC20             >
 627+ EC20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC21 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC23             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC22 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC23             >
 627+ EC23 19 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC25             >Prev_Ptr        defl    Heap_Ptr
 627+ EC25             >
 627+ EC25             >mirror_Ptr      defl    $
 627+ EC25             >
 627+ EC25 D6 7E       >                dw      Dict_Ptr + 2        // xt
 627+ EC27             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC27             >
 627+ EC27             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC27             >
 627+ EC27             >//              ______________________________________________________________________
 627+ EC27             >//              Dictionary part
 627+ EC27             >
 627+ EC27             >                org     Dict_Ptr
 627+ 7ED4             >
 627+ 7ED4 25 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 7ED6             >
 627+ 7ED6             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 7ED6 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 7ED9             >
 627+ 7ED9             >
 627+ 7ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 7ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 7ED9             >
 627+ 7ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 7ED9 95 6A A6 7E                  dw      ZERO, D_DOT_R, SPACE
 628+ 7EDD 8B 6C
 629+ 7EDF 53 68                        dw      EXIT
 630+ 7EE1
 631+ 7EE1              //  ______________________________________________________________________
 632+ 7EE1              //
 633+ 7EE1              // .            n --
 634+ 7EE1                              Colon_Def DOT, ".", is_normal
 634+ 7EE1             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 7EE1             >
 634+ 7EE1             >Dict_Ptr        defl    $
 634+ 7EE1             >
 634+ 7EE1             >//              ______________________________________________________________________
 634+ 7EE1             >//              Heap part
 634+ 7EE1             >
 634+ 7EE1             >
 634+ 7EE1             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC27             >
 634+ EC27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC27             >Latest_Definition defl  Heap_Ptr
 634+ EC27             >
 634+ EC27             >                // dummy db directives used to calculate length of namec
 634+ EC27 2E          >                db      "."
 634+ EC28             >len_NFA         defl    $ - temp_NFA
 634+ EC28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC27             >
 634+ EC27 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC28 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC29             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC28 AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC29             >
 634+ EC29 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC2B             >Prev_Ptr        defl    Heap_Ptr
 634+ EC2B             >
 634+ EC2B             >mirror_Ptr      defl    $
 634+ EC2B             >
 634+ EC2B E3 7E       >                dw      Dict_Ptr + 2        // xt
 634+ EC2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC2D             >
 634+ EC2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC2D             >
 634+ EC2D             >//              ______________________________________________________________________
 634+ EC2D             >//              Dictionary part
 634+ EC2D             >
 634+ EC2D             >                org     Dict_Ptr
 634+ 7EE1             >
 634+ 7EE1 2B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 7EE3             >
 634+ 7EE3             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 7EE3 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 7EE6             >
 634+ 7EE6             >
 634+ 7EE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 7EE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 7EE6             >
 634+ 7EE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 7EE6 EE 6B D6 7E                  dw      S_TO_D, D_DOT
 636+ 7EEA 53 68                        dw      EXIT
 637+ 7EEC
 638+ 7EEC              //  ______________________________________________________________________
 639+ 7EEC              //
 640+ 7EEC              // ?            n --
 641+ 7EEC                              Colon_Def QUESTION, "?", is_normal
 641+ 7EEC             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 7EEC             >
 641+ 7EEC             >Dict_Ptr        defl    $
 641+ 7EEC             >
 641+ 7EEC             >//              ______________________________________________________________________
 641+ 7EEC             >//              Heap part
 641+ 7EEC             >
 641+ 7EEC             >
 641+ 7EEC             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC2D             >
 641+ EC2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC2D             >Latest_Definition defl  Heap_Ptr
 641+ EC2D             >
 641+ EC2D             >                // dummy db directives used to calculate length of namec
 641+ EC2D 3F          >                db      "?"
 641+ EC2E             >len_NFA         defl    $ - temp_NFA
 641+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC2D             >
 641+ EC2D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC2E 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC2E BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC2F             >
 641+ EC2F 27 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC31             >Prev_Ptr        defl    Heap_Ptr
 641+ EC31             >
 641+ EC31             >mirror_Ptr      defl    $
 641+ EC31             >
 641+ EC31 EE 7E       >                dw      Dict_Ptr + 2        // xt
 641+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC33             >
 641+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC33             >
 641+ EC33             >//              ______________________________________________________________________
 641+ EC33             >//              Dictionary part
 641+ EC33             >
 641+ EC33             >                org     Dict_Ptr
 641+ 7EEC             >
 641+ 7EEC 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 7EEE             >
 641+ 7EEE             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 7EEE CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 7EF1             >
 641+ 7EF1             >
 641+ 7EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 7EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 7EF1             >
 641+ 7EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 7EF1 9D 69 E3 7E                  dw      FETCH, DOT
 643+ 7EF5 53 68                        dw      EXIT
 644+ 7EF7
 645+ 7EF7              //  ______________________________________________________________________
 646+ 7EF7              //
 647+ 7EF7              // u.           u --
 648+ 7EF7                              Colon_Def U_DOT, "U.", is_normal
 648+ 7EF7             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 7EF7             >
 648+ 7EF7             >Dict_Ptr        defl    $
 648+ 7EF7             >
 648+ 7EF7             >//              ______________________________________________________________________
 648+ 7EF7             >//              Heap part
 648+ 7EF7             >
 648+ 7EF7             >
 648+ 7EF7             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC33             >
 648+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC33             >Latest_Definition defl  Heap_Ptr
 648+ EC33             >
 648+ EC33             >                // dummy db directives used to calculate length of namec
 648+ EC33 55 2E       >                db      "U."
 648+ EC35             >len_NFA         defl    $ - temp_NFA
 648+ EC35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC33             >
 648+ EC33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC34 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC36             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC35 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC36             >
 648+ EC36 2D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC38             >Prev_Ptr        defl    Heap_Ptr
 648+ EC38             >
 648+ EC38             >mirror_Ptr      defl    $
 648+ EC38             >
 648+ EC38 F9 7E       >                dw      Dict_Ptr + 2        // xt
 648+ EC3A             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC3A             >
 648+ EC3A             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC3A             >
 648+ EC3A             >//              ______________________________________________________________________
 648+ EC3A             >//              Dictionary part
 648+ EC3A             >
 648+ EC3A             >                org     Dict_Ptr
 648+ 7EF7             >
 648+ 7EF7 38 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 7EF9             >
 648+ 7EF9             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 7EF9 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 7EFC             >
 648+ 7EFC             >
 648+ 7EFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 7EFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 7EFC             >
 648+ 7EFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 7EFC 95 6A D6 7E                  dw      ZERO, D_DOT
 650+ 7F00 53 68                        dw      EXIT
 651+ 7F02
 652+ 7F02              //  ______________________________________________________________________
 653+ 7F02              //
 654+ 7F02              // words        --
 655+ 7F02                              Colon_Def WORDS, "WORDS", is_normal
 655+ 7F02             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 7F02             >
 655+ 7F02             >Dict_Ptr        defl    $
 655+ 7F02             >
 655+ 7F02             >//              ______________________________________________________________________
 655+ 7F02             >//              Heap part
 655+ 7F02             >
 655+ 7F02             >
 655+ 7F02             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC3A             >
 655+ EC3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC3A             >Latest_Definition defl  Heap_Ptr
 655+ EC3A             >
 655+ EC3A             >                // dummy db directives used to calculate length of namec
 655+ EC3A 57 4F 52 44 >                db      "WORDS"
 655+ EC3E 53          >
 655+ EC3F             >len_NFA         defl    $ - temp_NFA
 655+ EC3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC3A             >
 655+ EC3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC3B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC3F 53          >
 655+ EC40             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC3F D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC40             >
 655+ EC40 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC42             >Prev_Ptr        defl    Heap_Ptr
 655+ EC42             >
 655+ EC42             >mirror_Ptr      defl    $
 655+ EC42             >
 655+ EC42 04 7F       >                dw      Dict_Ptr + 2        // xt
 655+ EC44             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC44             >
 655+ EC44             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC44             >
 655+ EC44             >//              ______________________________________________________________________
 655+ EC44             >//              Dictionary part
 655+ EC44             >
 655+ EC44             >                org     Dict_Ptr
 655+ 7F02             >
 655+ 7F02 42 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 7F04             >
 655+ 7F04             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 7F04 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 7F07             >
 655+ 7F07             >
 655+ 7F07             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 7F07             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 7F07             >
 655+ 7F07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 7F07 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 656+ 7F0B 42 6B A7 69
 657+ 7F0F 54 6B 9D 69                  dw      CONTEXT, FETCH, FETCH
 657+ 7F13 9D 69
 658+ 7F15              Words_Begin:
 659+ 7F15 FC 6C                        dw          FAR // Q TO HEAP
 660+ 7F17 2C 69 B2 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 7F1B A3 63 1F 00
 660+ 7F1F 13 68
 661+ 7F21 42 6B 9D 69                  dw          OUT, FETCH, PLUS
 661+ 7F25 A6 68
 662+ 7F27 BF 6A 1E 6C                  dw          CL, LESS, ZEQUAL
 662+ 7F2B 78 68
 663+ 7F2D F5 63                        dw          ZBRANCH
 664+ 7F2F 0A 00                        dw          Words_Endif - $
 665+ 7F31 B6 65 95 6A                  dw              CR, ZERO, OUT, STORE
 665+ 7F35 42 6B A7 69
 666+ 7F39              Words_Endif:
 667+ 7F39 2C 69 66 73                  dw          DUP, ID_DOT
 668+ 7F3D 9C 6A 96 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 7F41 BF 68 9D 69
 669+ 7F45 2C 69 78 68                  dw          DUP, ZEQUAL
 670+ 7F49 AD 66 22 68                  dw          QTERMINAL, OR_OP
 671+ 7F4D F5 63                        dw      ZBRANCH
 672+ 7F4F C6 FF                        dw      Words_Begin - $
 673+ 7F51 11 69                        dw      DROP
 674+ 7F53 53 68                        dw      EXIT
 675+ 7F55
 676+ 7F55              //  ______________________________________________________________________
 677+ 7F55              //
 678+ 7F55              // list         n --
 679+ 7F55                              Colon_Def LIST, "LIST", is_normal
 679+ 7F55             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 7F55             >
 679+ 7F55             >Dict_Ptr        defl    $
 679+ 7F55             >
 679+ 7F55             >//              ______________________________________________________________________
 679+ 7F55             >//              Heap part
 679+ 7F55             >
 679+ 7F55             >
 679+ 7F55             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC44             >
 679+ EC44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC44             >Latest_Definition defl  Heap_Ptr
 679+ EC44             >
 679+ EC44             >                // dummy db directives used to calculate length of namec
 679+ EC44 4C 49 53 54 >                db      "LIST"
 679+ EC48             >len_NFA         defl    $ - temp_NFA
 679+ EC48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC44             >
 679+ EC44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC45 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC49             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC48 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC49             >
 679+ EC49 3A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC4B             >Prev_Ptr        defl    Heap_Ptr
 679+ EC4B             >
 679+ EC4B             >mirror_Ptr      defl    $
 679+ EC4B             >
 679+ EC4B 57 7F       >                dw      Dict_Ptr + 2        // xt
 679+ EC4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC4D             >
 679+ EC4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC4D             >
 679+ EC4D             >//              ______________________________________________________________________
 679+ EC4D             >//              Dictionary part
 679+ EC4D             >
 679+ EC4D             >                org     Dict_Ptr
 679+ 7F55             >
 679+ 7F55 4B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 7F57             >
 679+ 7F57             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7F57 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 7F5A             >
 679+ 7F5A             >
 679+ 7F5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 7F5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 7F5A             >
 679+ 7F5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 7F5A CF 6E B6 65                  dw      DECIMAL, CR
 681+ 7F5E 2C 69 48 6B                  dw      DUP, SCR, STORE
 681+ 7F62 A7 69
 682+ 7F64 23 71                        dw      C_DOT_QUOTE
 683+ 7F66 05 53 63 72                  db      5, "Scr# "
 683+ 7F6A 23 20
 684+ 7F6C E3 7E                        dw      DOT
 685+ 7F6E D4 6A 95 6A                  dw      LSCR, ZERO, C_DO
 685+ 7F72 34 64
 686+ 7F74              List_Loop:
 687+ 7F74 B6 65                        dw          CR
 688+ 7F76 3A 64 AA 6A                  dw          I, THREE
 689+ 7F7A C7 7E 8B 6C                  dw          DOT_R, SPACE
 690+ 7F7E 3A 64 48 6B                  dw          I, SCR, FETCH, DOT_LINE
 690+ 7F82 9D 69 9A 77
 691+ 7F86 AD 66                        dw          QTERMINAL
 692+ 7F88 F5 63                        dw          ZBRANCH
 693+ 7F8A 06 00                        dw          List_Endif - $
 694+ 7F8C 00 64                        dw              C_LEAVE
 695+ 7F8E 06 00                        dw              List_Leave - $
 696+ 7F90              List_Endif:
 697+ 7F90 E0 63                        dw      C_LOOP
 698+ 7F92 E2 FF                        dw      List_Loop - $
 699+ 7F94              List_Leave:
 700+ 7F94 B6 65                        dw      CR
 701+ 7F96 53 68                        dw      EXIT
 702+ 7F98
 703+ 7F98              //  ______________________________________________________________________
 704+ 7F98              //
 705+ 7F98              // index        n1 n2 --
 706+ 7F98                              Colon_Def INDEX, "INDEX", is_normal
 706+ 7F98             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 7F98             >
 706+ 7F98             >Dict_Ptr        defl    $
 706+ 7F98             >
 706+ 7F98             >//              ______________________________________________________________________
 706+ 7F98             >//              Heap part
 706+ 7F98             >
 706+ 7F98             >
 706+ 7F98             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC4D             >
 706+ EC4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC4D             >Latest_Definition defl  Heap_Ptr
 706+ EC4D             >
 706+ EC4D             >                // dummy db directives used to calculate length of namec
 706+ EC4D 49 4E 44 45 >                db      "INDEX"
 706+ EC51 58          >
 706+ EC52             >len_NFA         defl    $ - temp_NFA
 706+ EC52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC4D             >
 706+ EC4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC4E 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC52 58          >
 706+ EC53             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC52 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC53             >
 706+ EC53 44 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC55             >Prev_Ptr        defl    Heap_Ptr
 706+ EC55             >
 706+ EC55             >mirror_Ptr      defl    $
 706+ EC55             >
 706+ EC55 9A 7F       >                dw      Dict_Ptr + 2        // xt
 706+ EC57             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC57             >
 706+ EC57             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC57             >
 706+ EC57             >//              ______________________________________________________________________
 706+ EC57             >//              Dictionary part
 706+ EC57             >
 706+ EC57             >                org     Dict_Ptr
 706+ 7F98             >
 706+ 7F98 55 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 7F9A             >
 706+ 7F9A             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 7F9A CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 7F9D             >
 706+ 7F9D             >
 706+ 7F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 7F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 7F9D             >
 706+ 7F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 7F9D BF 68 25 69                  dw      ONE_PLUS, SWAP, C_DO
 707+ 7FA1 34 64
 708+ 7FA3              Index_Loop:
 709+ 7FA3 B6 65 3A 64                  dw          CR, I, THREE
 709+ 7FA7 AA 6A
 710+ 7FA9 C7 7E 8B 6C                  dw          DOT_R, SPACE
 711+ 7FAD 95 6A 3A 64                  dw          ZERO, I, DOT_LINE
 711+ 7FB1 9A 77
 712+ 7FB3 AD 66                        dw          QTERMINAL
 713+ 7FB5 F5 63                        dw          ZBRANCH
 714+ 7FB7 06 00                        dw          Index_Endif - $
 715+ 7FB9 00 64                        dw              C_LEAVE
 716+ 7FBB 06 00                        dw              Index_Leave - $
 717+ 7FBD              Index_Endif:
 718+ 7FBD E0 63                        dw      C_LOOP
 719+ 7FBF E4 FF                        dw      Index_Loop - $
 720+ 7FC1              Index_Leave:
 721+ 7FC1 B6 65                        dw      CR
 722+ 7FC3 53 68                        dw      EXIT
 723+ 7FC5
 724+ 7FC5              //  ______________________________________________________________________
 725+ 7FC5              //
 726+ 7FC5              // cls          --
 727+ 7FC5                              Colon_Def CLS, "CLS", is_normal
 727+ 7FC5             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 7FC5             >
 727+ 7FC5             >Dict_Ptr        defl    $
 727+ 7FC5             >
 727+ 7FC5             >//              ______________________________________________________________________
 727+ 7FC5             >//              Heap part
 727+ 7FC5             >
 727+ 7FC5             >
 727+ 7FC5             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC57             >
 727+ EC57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC57             >Latest_Definition defl  Heap_Ptr
 727+ EC57             >
 727+ EC57             >                // dummy db directives used to calculate length of namec
 727+ EC57 43 4C 53    >                db      "CLS"
 727+ EC5A             >len_NFA         defl    $ - temp_NFA
 727+ EC5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC57             >
 727+ EC57 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC58 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC5B             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC5A D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC5B             >
 727+ EC5B 4D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC5D             >Prev_Ptr        defl    Heap_Ptr
 727+ EC5D             >
 727+ EC5D             >mirror_Ptr      defl    $
 727+ EC5D             >
 727+ EC5D C7 7F       >                dw      Dict_Ptr + 2        // xt
 727+ EC5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC5F             >
 727+ EC5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC5F             >
 727+ EC5F             >//              ______________________________________________________________________
 727+ EC5F             >//              Dictionary part
 727+ EC5F             >
 727+ EC5F             >                org     Dict_Ptr
 727+ 7FC5             >
 727+ 7FC5 5D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 7FC7             >
 727+ 7FC7             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 7FC7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 7FCA             >
 727+ 7FCA             >
 727+ 7FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 7FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 7FCA             >
 727+ 7FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 7FCA A3 63 0E 00                  dw      LIT, $0E, EMITC
 728+ 7FCE A2 65
 729+ 7FD0 53 68                        dw      EXIT
 730+ 7FD2
 731+ 7FD2              //  ______________________________________________________________________
 732+ 7FD2              //
 733+ 7FD2              // splash       --
 734+ 7FD2              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 7FD2              //              dw      CLS
 736+ 7FD2              //              dw      C_DOT_QUOTE
 737+ 7FD2              //              db      87
 738+ 7FD2              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 7FD2              //              db      "Heap Vocabulary - build 20231112", 13  // 33
 740+ 7FD2              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 7FD2              //              dw      EXIT
 742+ 7FD2
 743+ 7FD2              //  ______________________________________________________________________
 744+ 7FD2              //
 745+ 7FD2              // splash       --
 746+ 7FD2                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 7FD2             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 7FD2             >
 746+ 7FD2             >Dict_Ptr        defl    $
 746+ 7FD2             >
 746+ 7FD2             >//              ______________________________________________________________________
 746+ 7FD2             >//              Heap part
 746+ 7FD2             >
 746+ 7FD2             >
 746+ 7FD2             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC5F             >
 746+ EC5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC5F             >Latest_Definition defl  Heap_Ptr
 746+ EC5F             >
 746+ EC5F             >                // dummy db directives used to calculate length of namec
 746+ EC5F 53 50 4C 41 >                db      "SPLASH"
 746+ EC63 53 48       >
 746+ EC65             >len_NFA         defl    $ - temp_NFA
 746+ EC65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC5F             >
 746+ EC5F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC60 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC64 53 48       >
 746+ EC66             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC65 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC66             >
 746+ EC66 57 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC68             >Prev_Ptr        defl    Heap_Ptr
 746+ EC68             >
 746+ EC68             >mirror_Ptr      defl    $
 746+ EC68             >
 746+ EC68 D4 7F       >                dw      Dict_Ptr + 2        // xt
 746+ EC6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC6A             >
 746+ EC6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC6A             >
 746+ EC6A             >//              ______________________________________________________________________
 746+ EC6A             >//              Dictionary part
 746+ EC6A             >
 746+ EC6A             >                org     Dict_Ptr
 746+ 7FD2             >
 746+ 7FD2 68 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 7FD4             >
 746+ 7FD4             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 7FD4 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 7FD7             >
 746+ 7FD7             >
 746+ 7FD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 7FD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 7FD7             >
 746+ 7FD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 7FD7 C7 7F                        dw      CLS
 748+ 7FD9 A3 63 02 00                  dw      LIT, Splash_Ptr
 749+ 7FDD FC 6C                        dw      FAR
 750+ 7FDF 32 6F 86 6F                  dw      COUNT, TYPE
 751+ 7FE3 53 68                        dw      EXIT
 752+ 7FE5
 753+ 7FE5              //  ______________________________________________________________________
 754+ 7FE5              //
 755+ 7FE5              // video        --
 756+ 7FE5                              Colon_Def VIDEO, "VIDEO", is_normal
 756+ 7FE5             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 756+ 7FE5             >
 756+ 7FE5             >Dict_Ptr        defl    $
 756+ 7FE5             >
 756+ 7FE5             >//              ______________________________________________________________________
 756+ 7FE5             >//              Heap part
 756+ 7FE5             >
 756+ 7FE5             >
 756+ 7FE5             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ EC6A             >
 756+ EC6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ EC6A             >Latest_Definition defl  Heap_Ptr
 756+ EC6A             >
 756+ EC6A             >                // dummy db directives used to calculate length of namec
 756+ EC6A 56 49 44 45 >                db      "VIDEO"
 756+ EC6E 4F          >
 756+ EC6F             >len_NFA         defl    $ - temp_NFA
 756+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ EC6A             >
 756+ EC6A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ EC6B 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 756+ EC6F 4F          >
 756+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 756+ EC6F CF          >                db      {b $} | END_BIT     // msb as name end
 756+ EC70             >
 756+ EC70 5F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ EC72             >Prev_Ptr        defl    Heap_Ptr
 756+ EC72             >
 756+ EC72             >mirror_Ptr      defl    $
 756+ EC72             >
 756+ EC72 E7 7F       >                dw      Dict_Ptr + 2        // xt
 756+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ EC74             >
 756+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ EC74             >
 756+ EC74             >//              ______________________________________________________________________
 756+ EC74             >//              Dictionary part
 756+ EC74             >
 756+ EC74             >                org     Dict_Ptr
 756+ 7FE5             >
 756+ 7FE5 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 7FE7             >
 756+ 7FE7             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 7FE7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 7FEA             >
 756+ 7FEA             >
 756+ 7FEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 7FEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 7FEA             >
 756+ 7FEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 7FEA A3 6A 2C 69                  dw      TWO, DUP, DEVICE, STORE
 757+ 7FEE CF 77 A7 69
 758+ 7FF2 C1 66                        dw      SELECT
 759+ 7FF4 53 68                        dw      EXIT
 760+ 7FF6
 761+ 7FF6              //  ______________________________________________________________________
 762+ 7FF6              //
 763+ 7FF6              // autoexec     --
 764+ 7FF6              // this word is called the first time the Forth system boot to
 765+ 7FF6              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 766+ 7FF6                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 766+ 7FF6             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 766+ 7FF6             >
 766+ 7FF6             >Dict_Ptr        defl    $
 766+ 7FF6             >
 766+ 7FF6             >//              ______________________________________________________________________
 766+ 7FF6             >//              Heap part
 766+ 7FF6             >
 766+ 7FF6             >
 766+ 7FF6             >                org     (Heap_Ptr & $1FFF) + $E000
 766+ EC74             >
 766+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ EC74             >Latest_Definition defl  Heap_Ptr
 766+ EC74             >
 766+ EC74             >                // dummy db directives used to calculate length of namec
 766+ EC74 41 55 54 4F >                db      "AUTOEXEC"
 766+ EC78 45 58 45 43 >
 766+ EC7C             >len_NFA         defl    $ - temp_NFA
 766+ EC7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ EC74             >
 766+ EC74 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ EC75 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 766+ EC79 45 58 45 43 >
 766+ EC7D             >                org     $-1                 // alter last byte of Name just above to set
 766+ EC7C C3          >                db      {b $} | END_BIT     // msb as name end
 766+ EC7D             >
 766+ EC7D 6A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 766+ EC7F             >Prev_Ptr        defl    Heap_Ptr
 766+ EC7F             >
 766+ EC7F             >mirror_Ptr      defl    $
 766+ EC7F             >
 766+ EC7F F8 7F       >                dw      Dict_Ptr + 2        // xt
 766+ EC81             >Heap_Ptr        defl    $ - $E000           // save current HP
 766+ EC81             >
 766+ EC81             >Current_HP      defl  $ - $E000             // used to set HP once!
 766+ EC81             >
 766+ EC81             >//              ______________________________________________________________________
 766+ EC81             >//              Dictionary part
 766+ EC81             >
 766+ EC81             >                org     Dict_Ptr
 766+ 7FF6             >
 766+ 7FF6 7F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 766+ 7FF8             >
 766+ 7FF8             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 7FF8 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 7FFB             >
 766+ 7FFB             >
 766+ 7FFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 7FFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 7FFB             >
 766+ 7FFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 7FFB A3 63 0B 00                  dw      LIT, 11
 768+ 7FFF A3 63 5C 6A                  dw      LIT, NOOP
 769+ 8003 A3 63 D5 75                  dw      LIT, Autoexec_Ptr
 770+ 8007 A7 69                        dw      STORE
 771+ 8009 FD 7C                        dw      LOAD
 772+ 800B 7C 75                        dw      QUIT
 773+ 800D 53 68                        dw      EXIT
 774+ 800F
 775+ 800F
 776+ 800F              //  ______________________________________________________________________
 777+ 800F              //
 778+ 800F              // bye     --
 779+ 800F              //
 780+ 800F                              Colon_Def BYE, "BYE", is_normal
 780+ 800F             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 780+ 800F             >
 780+ 800F             >Dict_Ptr        defl    $
 780+ 800F             >
 780+ 800F             >//              ______________________________________________________________________
 780+ 800F             >//              Heap part
 780+ 800F             >
 780+ 800F             >
 780+ 800F             >                org     (Heap_Ptr & $1FFF) + $E000
 780+ EC81             >
 780+ EC81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ EC81             >Latest_Definition defl  Heap_Ptr
 780+ EC81             >
 780+ EC81             >                // dummy db directives used to calculate length of namec
 780+ EC81 42 59 45    >                db      "BYE"
 780+ EC84             >len_NFA         defl    $ - temp_NFA
 780+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ EC81             >
 780+ EC81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ EC82 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 780+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 780+ EC84 C5          >                db      {b $} | END_BIT     // msb as name end
 780+ EC85             >
 780+ EC85 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 780+ EC87             >Prev_Ptr        defl    Heap_Ptr
 780+ EC87             >
 780+ EC87             >mirror_Ptr      defl    $
 780+ EC87             >
 780+ EC87 11 80       >                dw      Dict_Ptr + 2        // xt
 780+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 780+ EC89             >
 780+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 780+ EC89             >
 780+ EC89             >//              ______________________________________________________________________
 780+ EC89             >//              Dictionary part
 780+ EC89             >
 780+ EC89             >                org     Dict_Ptr
 780+ 800F             >
 780+ 800F 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 780+ 8011             >
 780+ 8011             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ 8011 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ 8014             >
 780+ 8014             >
 780+ 8014             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ 8014             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ 8014             >
 780+ 8014             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ 8014 EA 79                        dw      FLUSH
 782+ 8016 38 79                        dw      EMPTY_BUFFERS
 783+ 8018 24 78 9D 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 783+ 801C FB 66 11 69
 784+ 8020 95 6A DB 6A                  dw      ZERO, PLUS_ORIGIN
 785+ 8024 64 76                        dw      BASIC
 786+ 8026
 787+ 8026              //  ______________________________________________________________________
 788+ 8026              //
 789+ 8026              // invv     --
 790+ 8026              //
 791+ 8026              //              Colon_Def INVV, "INVV", is_normal
 792+ 8026              //              dw      LIT, 20, EMITC, ONE, EMITC
 793+ 8026              //              dw      EXIT
 794+ 8026
 795+ 8026              //  ______________________________________________________________________
 796+ 8026              //
 797+ 8026              // truv     --
 798+ 8026              //
 799+ 8026              //              Colon_Def TRUV, "TRUV", is_normal
 800+ 8026              //              dw      LIT, 20, EMITC, ZERO, EMITC
 801+ 8026              //              dw      EXIT
 802+ 8026
 803+ 8026              //  ______________________________________________________________________
 804+ 8026              //
 805+ 8026              // mark     --
 806+ 8026              //
 807+ 8026              //              Colon_Def MARK, "MARK", is_normal
 808+ 8026              //              dw      INVV, TYPE, TRUV
 809+ 8026              //              dw      EXIT
 810+ 8026
 811+ 8026              //  ______________________________________________________________________
 812+ 8026              //
 813+ 8026              // back     --
 814+ 8026              //
 815+ 8026                              Colon_Def BACK, "BACK", is_normal
 815+ 8026             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 815+ 8026             >
 815+ 8026             >Dict_Ptr        defl    $
 815+ 8026             >
 815+ 8026             >//              ______________________________________________________________________
 815+ 8026             >//              Heap part
 815+ 8026             >
 815+ 8026             >
 815+ 8026             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ EC89             >
 815+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ EC89             >Latest_Definition defl  Heap_Ptr
 815+ EC89             >
 815+ EC89             >                // dummy db directives used to calculate length of namec
 815+ EC89 42 41 43 4B >                db      "BACK"
 815+ EC8D             >len_NFA         defl    $ - temp_NFA
 815+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ EC89             >
 815+ EC89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ EC8A 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 815+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 815+ EC8D CB          >                db      {b $} | END_BIT     // msb as name end
 815+ EC8E             >
 815+ EC8E 81 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ EC90             >Prev_Ptr        defl    Heap_Ptr
 815+ EC90             >
 815+ EC90             >mirror_Ptr      defl    $
 815+ EC90             >
 815+ EC90 28 80       >                dw      Dict_Ptr + 2        // xt
 815+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ EC92             >
 815+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ EC92             >
 815+ EC92             >//              ______________________________________________________________________
 815+ EC92             >//              Dictionary part
 815+ EC92             >
 815+ EC92             >                org     Dict_Ptr
 815+ 8026             >
 815+ 8026 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 8028             >
 815+ 8028             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 8028 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 802B             >
 815+ 802B             >
 815+ 802B             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 802B             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 802B             >
 815+ 802B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 802B BA 6B F9 6B                  dw      HERE, SUBTRACT, COMMA
 816+ 802F D0 6B
 817+ 8031 53 68                        dw      EXIT
 818+ 8033
 819+ 8033              //  ______________________________________________________________________
 820+ 8033              //
 821+ 8033              // if          ( -- a 2 ) \ compile-time
 822+ 8033              // IF ... THEN
 823+ 8033              // IF ... ELSE ... ENDIF
 824+ 8033                              Colon_Def IF, "IF", is_immediate
 824+ 8033             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 824+ 8033             >
 824+ 8033             >Dict_Ptr        defl    $
 824+ 8033             >
 824+ 8033             >//              ______________________________________________________________________
 824+ 8033             >//              Heap part
 824+ 8033             >
 824+ 8033             >
 824+ 8033             >                org     (Heap_Ptr & $1FFF) + $E000
 824+ EC92             >
 824+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ EC92             >Latest_Definition defl  Heap_Ptr
 824+ EC92             >
 824+ EC92             >                // dummy db directives used to calculate length of namec
 824+ EC92 49 46       >                db      "IF"
 824+ EC94             >len_NFA         defl    $ - temp_NFA
 824+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ EC92             >
 824+ EC92 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ EC93 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 824+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 824+ EC94 C6          >                db      {b $} | END_BIT     // msb as name end
 824+ EC95             >
 824+ EC95 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 824+ EC97             >Prev_Ptr        defl    Heap_Ptr
 824+ EC97             >
 824+ EC97             >mirror_Ptr      defl    $
 824+ EC97             >
 824+ EC97 35 80       >                dw      Dict_Ptr + 2        // xt
 824+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 824+ EC99             >
 824+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 824+ EC99             >
 824+ EC99             >//              ______________________________________________________________________
 824+ EC99             >//              Dictionary part
 824+ EC99             >
 824+ EC99             >                org     Dict_Ptr
 824+ 8033             >
 824+ 8033 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 824+ 8035             >
 824+ 8035             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 8035 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 824+ 8038             >
 824+ 8038             >
 824+ 8038             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 8038             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 8038             >
 824+ 8038             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 8038 66 6E F5 63                  dw      COMPILE, ZBRANCH
 826+ 803C BA 6B 95 6A                  dw      HERE, ZERO, COMMA
 826+ 8040 D0 6B
 827+ 8042 A3 6A                        dw      TWO
 828+ 8044 53 68                        dw      EXIT
 829+ 8046
 830+ 8046              //  ______________________________________________________________________
 831+ 8046              //
 832+ 8046              // then        ( a 2 -- ) \ compile-time
 833+ 8046              //
 834+ 8046                              Colon_Def THEN, "THEN", is_immediate
 834+ 8046             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 834+ 8046             >
 834+ 8046             >Dict_Ptr        defl    $
 834+ 8046             >
 834+ 8046             >//              ______________________________________________________________________
 834+ 8046             >//              Heap part
 834+ 8046             >
 834+ 8046             >
 834+ 8046             >                org     (Heap_Ptr & $1FFF) + $E000
 834+ EC99             >
 834+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ EC99             >Latest_Definition defl  Heap_Ptr
 834+ EC99             >
 834+ EC99             >                // dummy db directives used to calculate length of namec
 834+ EC99 54 48 45 4E >                db      "THEN"
 834+ EC9D             >len_NFA         defl    $ - temp_NFA
 834+ EC9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ EC99             >
 834+ EC99 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ EC9A 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 834+ EC9E             >                org     $-1                 // alter last byte of Name just above to set
 834+ EC9D CE          >                db      {b $} | END_BIT     // msb as name end
 834+ EC9E             >
 834+ EC9E 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 834+ ECA0             >Prev_Ptr        defl    Heap_Ptr
 834+ ECA0             >
 834+ ECA0             >mirror_Ptr      defl    $
 834+ ECA0             >
 834+ ECA0 48 80       >                dw      Dict_Ptr + 2        // xt
 834+ ECA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 834+ ECA2             >
 834+ ECA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 834+ ECA2             >
 834+ ECA2             >//              ______________________________________________________________________
 834+ ECA2             >//              Dictionary part
 834+ ECA2             >
 834+ ECA2             >                org     Dict_Ptr
 834+ 8046             >
 834+ 8046 A0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 834+ 8048             >
 834+ 8048             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 8048 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 834+ 804B             >
 834+ 804B             >
 834+ 804B             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 804B             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 804B             >
 834+ 804B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 804B 0B 6E                        dw      QCOMP
 836+ 804D A3 6A 2F 6E                  dw      TWO, QPAIRS
 837+ 8051 BA 6B 08 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 837+ 8055 F9 6B 25 69
 837+ 8059 A7 69
 838+ 805B 53 68                        dw      EXIT
 839+ 805D
 840+ 805D              //  ______________________________________________________________________
 841+ 805D              //
 842+ 805D              // endif       ( a 2 -- ) \ compile-time
 843+ 805D              //
 844+ 805D                              Colon_Def ENDIF, "ENDIF", is_immediate
 844+ 805D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 844+ 805D             >
 844+ 805D             >Dict_Ptr        defl    $
 844+ 805D             >
 844+ 805D             >//              ______________________________________________________________________
 844+ 805D             >//              Heap part
 844+ 805D             >
 844+ 805D             >
 844+ 805D             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ ECA2             >
 844+ ECA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ ECA2             >Latest_Definition defl  Heap_Ptr
 844+ ECA2             >
 844+ ECA2             >                // dummy db directives used to calculate length of namec
 844+ ECA2 45 4E 44 49 >                db      "ENDIF"
 844+ ECA6 46          >
 844+ ECA7             >len_NFA         defl    $ - temp_NFA
 844+ ECA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ ECA2             >
 844+ ECA2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ ECA3 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 844+ ECA7 46          >
 844+ ECA8             >                org     $-1                 // alter last byte of Name just above to set
 844+ ECA7 C6          >                db      {b $} | END_BIT     // msb as name end
 844+ ECA8             >
 844+ ECA8 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ ECAA             >Prev_Ptr        defl    Heap_Ptr
 844+ ECAA             >
 844+ ECAA             >mirror_Ptr      defl    $
 844+ ECAA             >
 844+ ECAA 5F 80       >                dw      Dict_Ptr + 2        // xt
 844+ ECAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ ECAC             >
 844+ ECAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ ECAC             >
 844+ ECAC             >//              ______________________________________________________________________
 844+ ECAC             >//              Dictionary part
 844+ ECAC             >
 844+ ECAC             >                org     Dict_Ptr
 844+ 805D             >
 844+ 805D AA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 805F             >
 844+ 805F             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 805F CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 8062             >
 844+ 8062             >
 844+ 8062             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 8062             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 8062             >
 844+ 8062             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 8062 48 80                        dw      THEN
 846+ 8064 53 68                        dw      EXIT
 847+ 8066
 848+ 8066              //  ______________________________________________________________________
 849+ 8066              //
 850+ 8066              // else        ( a1 2 -- a2 2 ) \ compile-time
 851+ 8066              //
 852+ 8066                              Colon_Def ELSE, "ELSE", is_immediate
 852+ 8066             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 852+ 8066             >
 852+ 8066             >Dict_Ptr        defl    $
 852+ 8066             >
 852+ 8066             >//              ______________________________________________________________________
 852+ 8066             >//              Heap part
 852+ 8066             >
 852+ 8066             >
 852+ 8066             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ ECAC             >
 852+ ECAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ ECAC             >Latest_Definition defl  Heap_Ptr
 852+ ECAC             >
 852+ ECAC             >                // dummy db directives used to calculate length of namec
 852+ ECAC 45 4C 53 45 >                db      "ELSE"
 852+ ECB0             >len_NFA         defl    $ - temp_NFA
 852+ ECB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ ECAC             >
 852+ ECAC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ ECAD 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 852+ ECB1             >                org     $-1                 // alter last byte of Name just above to set
 852+ ECB0 C5          >                db      {b $} | END_BIT     // msb as name end
 852+ ECB1             >
 852+ ECB1 A2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ ECB3             >Prev_Ptr        defl    Heap_Ptr
 852+ ECB3             >
 852+ ECB3             >mirror_Ptr      defl    $
 852+ ECB3             >
 852+ ECB3 68 80       >                dw      Dict_Ptr + 2        // xt
 852+ ECB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ ECB5             >
 852+ ECB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ ECB5             >
 852+ ECB5             >//              ______________________________________________________________________
 852+ ECB5             >//              Dictionary part
 852+ ECB5             >
 852+ ECB5             >                org     Dict_Ptr
 852+ 8066             >
 852+ 8066 B3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 8068             >
 852+ 8068             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 8068 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 806B             >
 852+ 806B             >
 852+ 806B             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 806B             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 806B             >
 852+ 806B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 806B 0B 6E                        dw      QCOMP
 854+ 806D A3 6A 2F 6E                  dw      TWO, QPAIRS
 855+ 8071 66 6E E8 63                  dw      COMPILE, BRANCH
 856+ 8075 BA 6B 95 6A                  dw      HERE, ZERO, COMMA
 856+ 8079 D0 6B
 857+ 807B 25 69 A3 6A                  dw      SWAP, TWO, THEN
 857+ 807F 48 80
 858+ 8081 A3 6A                        dw      TWO
 859+ 8083 53 68                        dw      EXIT
 860+ 8085
 861+ 8085              //  ______________________________________________________________________
 862+ 8085              //
 863+ 8085              // begin        ( -- a 1 ) \ compile-time
 864+ 8085              // BEGIN ... AGAIN
 865+ 8085              // BEGIN ... f UNTIL
 866+ 8085              // BEGIN ... f WHILE ... REPEAT
 867+ 8085                              Colon_Def BEGIN, "BEGIN", is_immediate
 867+ 8085             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 867+ 8085             >
 867+ 8085             >Dict_Ptr        defl    $
 867+ 8085             >
 867+ 8085             >//              ______________________________________________________________________
 867+ 8085             >//              Heap part
 867+ 8085             >
 867+ 8085             >
 867+ 8085             >                org     (Heap_Ptr & $1FFF) + $E000
 867+ ECB5             >
 867+ ECB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ ECB5             >Latest_Definition defl  Heap_Ptr
 867+ ECB5             >
 867+ ECB5             >                // dummy db directives used to calculate length of namec
 867+ ECB5 42 45 47 49 >                db      "BEGIN"
 867+ ECB9 4E          >
 867+ ECBA             >len_NFA         defl    $ - temp_NFA
 867+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ ECB5             >
 867+ ECB5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ ECB6 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 867+ ECBA 4E          >
 867+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 867+ ECBA CE          >                db      {b $} | END_BIT     // msb as name end
 867+ ECBB             >
 867+ ECBB AC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 867+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 867+ ECBD             >
 867+ ECBD             >mirror_Ptr      defl    $
 867+ ECBD             >
 867+ ECBD 87 80       >                dw      Dict_Ptr + 2        // xt
 867+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 867+ ECBF             >
 867+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 867+ ECBF             >
 867+ ECBF             >//              ______________________________________________________________________
 867+ ECBF             >//              Dictionary part
 867+ ECBF             >
 867+ ECBF             >                org     Dict_Ptr
 867+ 8085             >
 867+ 8085 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 867+ 8087             >
 867+ 8087             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 8087 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 808A             >
 867+ 808A             >
 867+ 808A             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 808A             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 808A             >
 867+ 808A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 808A 0B 6E                        dw      QCOMP
 869+ 808C BA 6B                        dw      HERE
 870+ 808E A3 6A                        dw      TWO
 871+ 8090 53 68                        dw      EXIT
 872+ 8092
 873+ 8092              //  ______________________________________________________________________
 874+ 8092              //
 875+ 8092              // again        ( a 1 -- ) \ compile-time
 876+ 8092                              Colon_Def AGAIN, "AGAIN", is_immediate
 876+ 8092             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 876+ 8092             >
 876+ 8092             >Dict_Ptr        defl    $
 876+ 8092             >
 876+ 8092             >//              ______________________________________________________________________
 876+ 8092             >//              Heap part
 876+ 8092             >
 876+ 8092             >
 876+ 8092             >                org     (Heap_Ptr & $1FFF) + $E000
 876+ ECBF             >
 876+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 876+ ECBF             >Latest_Definition defl  Heap_Ptr
 876+ ECBF             >
 876+ ECBF             >                // dummy db directives used to calculate length of namec
 876+ ECBF 41 47 41 49 >                db      "AGAIN"
 876+ ECC3 4E          >
 876+ ECC4             >len_NFA         defl    $ - temp_NFA
 876+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 876+ ECBF             >
 876+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 876+ ECC0 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 876+ ECC4 4E          >
 876+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 876+ ECC4 CE          >                db      {b $} | END_BIT     // msb as name end
 876+ ECC5             >
 876+ ECC5 B5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 876+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 876+ ECC7             >
 876+ ECC7             >mirror_Ptr      defl    $
 876+ ECC7             >
 876+ ECC7 94 80       >                dw      Dict_Ptr + 2        // xt
 876+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 876+ ECC9             >
 876+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 876+ ECC9             >
 876+ ECC9             >//              ______________________________________________________________________
 876+ ECC9             >//              Dictionary part
 876+ ECC9             >
 876+ ECC9             >                org     Dict_Ptr
 876+ 8092             >
 876+ 8092 C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 876+ 8094             >
 876+ 8094             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 876+ 8094 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 876+ 8097             >
 876+ 8097             >
 876+ 8097             >                endif           ; ok        // for other definitions it "points" the correct handler
 876+ 8097             >                // Use of "; ok" to suppress "warning[fwdref]"
 876+ 8097             >
 876+ 8097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 877+ 8097 0B 6E                        dw      QCOMP
 878+ 8099 A3 6A 2F 6E                  dw      TWO, QPAIRS
 879+ 809D 66 6E E8 63                  dw      COMPILE, BRANCH
 880+ 80A1 28 80                        dw      BACK
 881+ 80A3 53 68                        dw      EXIT
 882+ 80A5
 883+ 80A5              //  ______________________________________________________________________
 884+ 80A5              //
 885+ 80A5              // until        ( a 1 -- ) \ compile-time
 886+ 80A5                              Colon_Def UNTIL, "UNTIL", is_immediate
 886+ 80A5             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 886+ 80A5             >
 886+ 80A5             >Dict_Ptr        defl    $
 886+ 80A5             >
 886+ 80A5             >//              ______________________________________________________________________
 886+ 80A5             >//              Heap part
 886+ 80A5             >
 886+ 80A5             >
 886+ 80A5             >                org     (Heap_Ptr & $1FFF) + $E000
 886+ ECC9             >
 886+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ ECC9             >Latest_Definition defl  Heap_Ptr
 886+ ECC9             >
 886+ ECC9             >                // dummy db directives used to calculate length of namec
 886+ ECC9 55 4E 54 49 >                db      "UNTIL"
 886+ ECCD 4C          >
 886+ ECCE             >len_NFA         defl    $ - temp_NFA
 886+ ECCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ ECC9             >
 886+ ECC9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ ECCA 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 886+ ECCE 4C          >
 886+ ECCF             >                org     $-1                 // alter last byte of Name just above to set
 886+ ECCE CC          >                db      {b $} | END_BIT     // msb as name end
 886+ ECCF             >
 886+ ECCF BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 886+ ECD1             >Prev_Ptr        defl    Heap_Ptr
 886+ ECD1             >
 886+ ECD1             >mirror_Ptr      defl    $
 886+ ECD1             >
 886+ ECD1 A7 80       >                dw      Dict_Ptr + 2        // xt
 886+ ECD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 886+ ECD3             >
 886+ ECD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 886+ ECD3             >
 886+ ECD3             >//              ______________________________________________________________________
 886+ ECD3             >//              Dictionary part
 886+ ECD3             >
 886+ ECD3             >                org     Dict_Ptr
 886+ 80A5             >
 886+ 80A5 D1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 886+ 80A7             >
 886+ 80A7             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 80A7 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 886+ 80AA             >
 886+ 80AA             >
 886+ 80AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 80AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 80AA             >
 886+ 80AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 80AA 0B 6E                        dw      QCOMP
 888+ 80AC A3 6A 2F 6E                  dw      TWO, QPAIRS
 889+ 80B0 66 6E F5 63                  dw      COMPILE, ZBRANCH
 890+ 80B4 28 80                        dw      BACK
 891+ 80B6 53 68                        dw      EXIT
 892+ 80B8
 893+ 80B8              //  ______________________________________________________________________
 894+ 80B8              //
 895+ 80B8              // end          ( a 1 -- ) \ compile-time
 896+ 80B8                              Colon_Def END, "END", is_immediate
 896+ 80B8             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 896+ 80B8             >
 896+ 80B8             >Dict_Ptr        defl    $
 896+ 80B8             >
 896+ 80B8             >//              ______________________________________________________________________
 896+ 80B8             >//              Heap part
 896+ 80B8             >
 896+ 80B8             >
 896+ 80B8             >                org     (Heap_Ptr & $1FFF) + $E000
 896+ ECD3             >
 896+ ECD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ ECD3             >Latest_Definition defl  Heap_Ptr
 896+ ECD3             >
 896+ ECD3             >                // dummy db directives used to calculate length of namec
 896+ ECD3 45 4E 44    >                db      "END"
 896+ ECD6             >len_NFA         defl    $ - temp_NFA
 896+ ECD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ ECD3             >
 896+ ECD3 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ ECD4 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 896+ ECD7             >                org     $-1                 // alter last byte of Name just above to set
 896+ ECD6 C4          >                db      {b $} | END_BIT     // msb as name end
 896+ ECD7             >
 896+ ECD7 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 896+ ECD9             >Prev_Ptr        defl    Heap_Ptr
 896+ ECD9             >
 896+ ECD9             >mirror_Ptr      defl    $
 896+ ECD9             >
 896+ ECD9 BA 80       >                dw      Dict_Ptr + 2        // xt
 896+ ECDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 896+ ECDB             >
 896+ ECDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 896+ ECDB             >
 896+ ECDB             >//              ______________________________________________________________________
 896+ ECDB             >//              Dictionary part
 896+ ECDB             >
 896+ ECDB             >                org     Dict_Ptr
 896+ 80B8             >
 896+ 80B8 D9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 896+ 80BA             >
 896+ 80BA             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 80BA CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 896+ 80BD             >
 896+ 80BD             >
 896+ 80BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 80BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 80BD             >
 896+ 80BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 80BD A7 80                        dw      UNTIL
 898+ 80BF 53 68                        dw      EXIT
 899+ 80C1
 900+ 80C1              //  ______________________________________________________________________
 901+ 80C1              //
 902+ 80C1              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 903+ 80C1                              Colon_Def WHILE, "WHILE", is_immediate
 903+ 80C1             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 903+ 80C1             >
 903+ 80C1             >Dict_Ptr        defl    $
 903+ 80C1             >
 903+ 80C1             >//              ______________________________________________________________________
 903+ 80C1             >//              Heap part
 903+ 80C1             >
 903+ 80C1             >
 903+ 80C1             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECDB             >
 903+ ECDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECDB             >Latest_Definition defl  Heap_Ptr
 903+ ECDB             >
 903+ ECDB             >                // dummy db directives used to calculate length of namec
 903+ ECDB 57 48 49 4C >                db      "WHILE"
 903+ ECDF 45          >
 903+ ECE0             >len_NFA         defl    $ - temp_NFA
 903+ ECE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECDB             >
 903+ ECDB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECDC 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 903+ ECE0 45          >
 903+ ECE1             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECE0 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ ECE1             >
 903+ ECE1 D3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECE3             >Prev_Ptr        defl    Heap_Ptr
 903+ ECE3             >
 903+ ECE3             >mirror_Ptr      defl    $
 903+ ECE3             >
 903+ ECE3 C3 80       >                dw      Dict_Ptr + 2        // xt
 903+ ECE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECE5             >
 903+ ECE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECE5             >
 903+ ECE5             >//              ______________________________________________________________________
 903+ ECE5             >//              Dictionary part
 903+ ECE5             >
 903+ ECE5             >                org     Dict_Ptr
 903+ 80C1             >
 903+ 80C1 E3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 80C3             >
 903+ 80C3             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 80C3 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 80C6             >
 903+ 80C6             >
 903+ 80C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 80C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 80C6             >
 903+ 80C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 80C6 35 80                        dw      IF
 905+ 80C8              //              dw      TWO_PLUS // ( that is 4 )
 906+ 80C8 6E 69                        dw      TWO_SWAP
 907+ 80CA 53 68                        dw      EXIT
 908+ 80CC
 909+ 80CC              //  ______________________________________________________________________
 910+ 80CC              //
 911+ 80CC              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 912+ 80CC                              Colon_Def REPEAT, "REPEAT", is_immediate
 912+ 80CC             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 912+ 80CC             >
 912+ 80CC             >Dict_Ptr        defl    $
 912+ 80CC             >
 912+ 80CC             >//              ______________________________________________________________________
 912+ 80CC             >//              Heap part
 912+ 80CC             >
 912+ 80CC             >
 912+ 80CC             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ ECE5             >
 912+ ECE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ ECE5             >Latest_Definition defl  Heap_Ptr
 912+ ECE5             >
 912+ ECE5             >                // dummy db directives used to calculate length of namec
 912+ ECE5 52 45 50 45 >                db      "REPEAT"
 912+ ECE9 41 54       >
 912+ ECEB             >len_NFA         defl    $ - temp_NFA
 912+ ECEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ ECE5             >
 912+ ECE5 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ ECE6 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 912+ ECEA 41 54       >
 912+ ECEC             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECEB D4          >                db      {b $} | END_BIT     // msb as name end
 912+ ECEC             >
 912+ ECEC DB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECEE             >Prev_Ptr        defl    Heap_Ptr
 912+ ECEE             >
 912+ ECEE             >mirror_Ptr      defl    $
 912+ ECEE             >
 912+ ECEE CE 80       >                dw      Dict_Ptr + 2        // xt
 912+ ECF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECF0             >
 912+ ECF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECF0             >
 912+ ECF0             >//              ______________________________________________________________________
 912+ ECF0             >//              Dictionary part
 912+ ECF0             >
 912+ ECF0             >                org     Dict_Ptr
 912+ 80CC             >
 912+ 80CC EE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 80CE             >
 912+ 80CE             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 80CE CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 80D1             >
 912+ 80D1             >
 912+ 80D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 80D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 80D1             >
 912+ 80D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 80D1 94 80                        dw      AGAIN
 914+ 80D3              //              dw      TWO_MINUS
 915+ 80D3 48 80                        dw      THEN
 916+ 80D5 53 68                        dw      EXIT
 917+ 80D7
 918+ 80D7              //  ______________________________________________________________________
 919+ 80D7              //
 920+ 80D7              // ?do-
 921+ 80D7              // special version of "BACK" used by ?DO and LOOP
 922+ 80D7                              Colon_Def C_DO_BACK, "?DO-", is_normal
 922+ 80D7             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 922+ 80D7             >
 922+ 80D7             >Dict_Ptr        defl    $
 922+ 80D7             >
 922+ 80D7             >//              ______________________________________________________________________
 922+ 80D7             >//              Heap part
 922+ 80D7             >
 922+ 80D7             >
 922+ 80D7             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECF0             >
 922+ ECF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECF0             >Latest_Definition defl  Heap_Ptr
 922+ ECF0             >
 922+ ECF0             >                // dummy db directives used to calculate length of namec
 922+ ECF0 3F 44 4F 2D >                db      "?DO-"
 922+ ECF4             >len_NFA         defl    $ - temp_NFA
 922+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECF0             >
 922+ ECF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECF1 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 922+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECF4 AD          >                db      {b $} | END_BIT     // msb as name end
 922+ ECF5             >
 922+ ECF5 E5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECF7             >Prev_Ptr        defl    Heap_Ptr
 922+ ECF7             >
 922+ ECF7             >mirror_Ptr      defl    $
 922+ ECF7             >
 922+ ECF7 D9 80       >                dw      Dict_Ptr + 2        // xt
 922+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECF9             >
 922+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECF9             >
 922+ ECF9             >//              ______________________________________________________________________
 922+ ECF9             >//              Dictionary part
 922+ ECF9             >
 922+ ECF9             >                org     Dict_Ptr
 922+ 80D7             >
 922+ 80D7 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 80D9             >
 922+ 80D9             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 80D9 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 80DC             >
 922+ 80DC             >
 922+ 80DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 80DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 80DC             >
 922+ 80DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 80DC 28 80                        dw      BACK
 924+ 80DE              CDoBack_Begin:
 925+ 80DE 3A 68 78 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 925+ 80E2 9D 69 F9 6B
 926+ 80E6 F5 63                        dw      ZBRANCH
 927+ 80E8 0A 00                        dw      CDoBack_While - $
 928+ 80EA CD 68 48 80                  dw          TWO_PLUS, THEN
 929+ 80EE E8 63                        dw      BRANCH
 930+ 80F0 EE FF                        dw      CDoBack_Begin - $
 931+ 80F2              CDoBack_While:
 932+ 80F2 3E 6E 78 6B                  dw      QCSP, CSP, STORE
 932+ 80F6 A7 69
 933+ 80F8 53 68                        dw      EXIT
 934+ 80FA
 935+ 80FA              //  ______________________________________________________________________
 936+ 80FA              //
 937+ 80FA              // do
 938+ 80FA              // DO  ... LOOP
 939+ 80FA              // DO  ... n +LOOP
 940+ 80FA              // ?DO ... LOOP
 941+ 80FA              // ?DO ... n +LOOP
 942+ 80FA                              Colon_Def DO, "DO", is_immediate
 942+ 80FA             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 942+ 80FA             >
 942+ 80FA             >Dict_Ptr        defl    $
 942+ 80FA             >
 942+ 80FA             >//              ______________________________________________________________________
 942+ 80FA             >//              Heap part
 942+ 80FA             >
 942+ 80FA             >
 942+ 80FA             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ ECF9             >
 942+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ ECF9             >Latest_Definition defl  Heap_Ptr
 942+ ECF9             >
 942+ ECF9             >                // dummy db directives used to calculate length of namec
 942+ ECF9 44 4F       >                db      "DO"
 942+ ECFB             >len_NFA         defl    $ - temp_NFA
 942+ ECFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ ECF9             >
 942+ ECF9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ ECFA 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 942+ ECFC             >                org     $-1                 // alter last byte of Name just above to set
 942+ ECFB CF          >                db      {b $} | END_BIT     // msb as name end
 942+ ECFC             >
 942+ ECFC F0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ ECFE             >Prev_Ptr        defl    Heap_Ptr
 942+ ECFE             >
 942+ ECFE             >mirror_Ptr      defl    $
 942+ ECFE             >
 942+ ECFE FC 80       >                dw      Dict_Ptr + 2        // xt
 942+ ED00             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ ED00             >
 942+ ED00             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ ED00             >
 942+ ED00             >//              ______________________________________________________________________
 942+ ED00             >//              Dictionary part
 942+ ED00             >
 942+ ED00             >                org     Dict_Ptr
 942+ 80FA             >
 942+ 80FA FE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 80FC             >
 942+ 80FC             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 80FC CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 80FF             >
 942+ 80FF             >
 942+ 80FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 80FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 80FF             >
 942+ 80FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 80FF 66 6E 34 64                  dw      COMPILE, C_DO
 944+ 8103 78 6B 9D 69                  dw      CSP, FETCH, STORE_CSP
 944+ 8107 E9 6D
 945+ 8109 BA 6B AA 6A                  dw      HERE, THREE
 946+ 810D 53 68                        dw      EXIT
 947+ 810F
 948+ 810F              //  ______________________________________________________________________
 949+ 810F              //
 950+ 810F              // loop
 951+ 810F                              Colon_Def LOOP, "LOOP", is_immediate
 951+ 810F             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 951+ 810F             >
 951+ 810F             >Dict_Ptr        defl    $
 951+ 810F             >
 951+ 810F             >//              ______________________________________________________________________
 951+ 810F             >//              Heap part
 951+ 810F             >
 951+ 810F             >
 951+ 810F             >                org     (Heap_Ptr & $1FFF) + $E000
 951+ ED00             >
 951+ ED00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ ED00             >Latest_Definition defl  Heap_Ptr
 951+ ED00             >
 951+ ED00             >                // dummy db directives used to calculate length of namec
 951+ ED00 4C 4F 4F 50 >                db      "LOOP"
 951+ ED04             >len_NFA         defl    $ - temp_NFA
 951+ ED04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ ED00             >
 951+ ED00 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ ED01 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 951+ ED05             >                org     $-1                 // alter last byte of Name just above to set
 951+ ED04 D0          >                db      {b $} | END_BIT     // msb as name end
 951+ ED05             >
 951+ ED05 F9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 951+ ED07             >Prev_Ptr        defl    Heap_Ptr
 951+ ED07             >
 951+ ED07             >mirror_Ptr      defl    $
 951+ ED07             >
 951+ ED07 11 81       >                dw      Dict_Ptr + 2        // xt
 951+ ED09             >Heap_Ptr        defl    $ - $E000           // save current HP
 951+ ED09             >
 951+ ED09             >Current_HP      defl  $ - $E000             // used to set HP once!
 951+ ED09             >
 951+ ED09             >//              ______________________________________________________________________
 951+ ED09             >//              Dictionary part
 951+ ED09             >
 951+ ED09             >                org     Dict_Ptr
 951+ 810F             >
 951+ 810F 07 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 951+ 8111             >
 951+ 8111             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 8111 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 8114             >
 951+ 8114             >
 951+ 8114             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 8114             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 8114             >
 951+ 8114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 8114 AA 6A 2F 6E                  dw      THREE, QPAIRS
 953+ 8118 66 6E E0 63                  dw      COMPILE, C_LOOP
 954+ 811C D9 80                        dw      C_DO_BACK
 955+ 811E 53 68                        dw      EXIT
 956+ 8120
 957+ 8120              //  ______________________________________________________________________
 958+ 8120              //
 959+ 8120              // +loop
 960+ 8120                              Colon_Def PLOOP, "+LOOP", is_immediate
 960+ 8120             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 960+ 8120             >
 960+ 8120             >Dict_Ptr        defl    $
 960+ 8120             >
 960+ 8120             >//              ______________________________________________________________________
 960+ 8120             >//              Heap part
 960+ 8120             >
 960+ 8120             >
 960+ 8120             >                org     (Heap_Ptr & $1FFF) + $E000
 960+ ED09             >
 960+ ED09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ ED09             >Latest_Definition defl  Heap_Ptr
 960+ ED09             >
 960+ ED09             >                // dummy db directives used to calculate length of namec
 960+ ED09 2B 4C 4F 4F >                db      "+LOOP"
 960+ ED0D 50          >
 960+ ED0E             >len_NFA         defl    $ - temp_NFA
 960+ ED0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ ED09             >
 960+ ED09 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ ED0A 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 960+ ED0E 50          >
 960+ ED0F             >                org     $-1                 // alter last byte of Name just above to set
 960+ ED0E D0          >                db      {b $} | END_BIT     // msb as name end
 960+ ED0F             >
 960+ ED0F 00 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 960+ ED11             >Prev_Ptr        defl    Heap_Ptr
 960+ ED11             >
 960+ ED11             >mirror_Ptr      defl    $
 960+ ED11             >
 960+ ED11 22 81       >                dw      Dict_Ptr + 2        // xt
 960+ ED13             >Heap_Ptr        defl    $ - $E000           // save current HP
 960+ ED13             >
 960+ ED13             >Current_HP      defl  $ - $E000             // used to set HP once!
 960+ ED13             >
 960+ ED13             >//              ______________________________________________________________________
 960+ ED13             >//              Dictionary part
 960+ ED13             >
 960+ ED13             >                org     Dict_Ptr
 960+ 8120             >
 960+ 8120 11 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 960+ 8122             >
 960+ 8122             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 8122 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 960+ 8125             >
 960+ 8125             >
 960+ 8125             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 8125             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 8125             >
 960+ 8125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 8125 AA 6A 2F 6E                  dw      THREE, QPAIRS
 962+ 8129 66 6E B1 63                  dw      COMPILE, C_PLOOP
 963+ 812D D9 80                        dw      C_DO_BACK
 964+ 812F 53 68                        dw      EXIT
 965+ 8131
 966+ 8131              //  ______________________________________________________________________
 967+ 8131              //
 968+ 8131              // ?do
 969+ 8131                              Colon_Def QDO, "?DO", is_immediate
 969+ 8131             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 969+ 8131             >
 969+ 8131             >Dict_Ptr        defl    $
 969+ 8131             >
 969+ 8131             >//              ______________________________________________________________________
 969+ 8131             >//              Heap part
 969+ 8131             >
 969+ 8131             >
 969+ 8131             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ ED13             >
 969+ ED13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ ED13             >Latest_Definition defl  Heap_Ptr
 969+ ED13             >
 969+ ED13             >                // dummy db directives used to calculate length of namec
 969+ ED13 3F 44 4F    >                db      "?DO"
 969+ ED16             >len_NFA         defl    $ - temp_NFA
 969+ ED16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ ED13             >
 969+ ED13 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ ED14 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 969+ ED17             >                org     $-1                 // alter last byte of Name just above to set
 969+ ED16 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ ED17             >
 969+ ED17 09 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ ED19             >Prev_Ptr        defl    Heap_Ptr
 969+ ED19             >
 969+ ED19             >mirror_Ptr      defl    $
 969+ ED19             >
 969+ ED19 33 81       >                dw      Dict_Ptr + 2        // xt
 969+ ED1B             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ ED1B             >
 969+ ED1B             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ ED1B             >
 969+ ED1B             >//              ______________________________________________________________________
 969+ ED1B             >//              Dictionary part
 969+ ED1B             >
 969+ ED1B             >                org     Dict_Ptr
 969+ 8131             >
 969+ 8131 19 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 8133             >
 969+ 8133             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 8133 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 8136             >
 969+ 8136             >
 969+ 8136             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 8136             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 8136             >
 969+ 8136             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 8136 66 6E 0C 64                  dw      COMPILE, C_Q_DO
 971+ 813A 78 6B 9D 69                  dw      CSP, FETCH, STORE_CSP
 971+ 813E E9 6D
 972+ 8140 BA 6B 95 6A                  dw      HERE, ZERO, COMMA, ZERO
 972+ 8144 D0 6B 95 6A
 973+ 8148 BA 6B AA 6A                  dw      HERE, THREE
 974+ 814C 53 68                        dw      EXIT
 975+ 814E
 976+ 814E              //  ______________________________________________________________________
 977+ 814E              //
 978+ 814E              // \
 979+ 814E                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 979+ 814E             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 979+ 814E             >
 979+ 814E             >Dict_Ptr        defl    $
 979+ 814E             >
 979+ 814E             >//              ______________________________________________________________________
 979+ 814E             >//              Heap part
 979+ 814E             >
 979+ 814E             >
 979+ 814E             >                org     (Heap_Ptr & $1FFF) + $E000
 979+ ED1B             >
 979+ ED1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ ED1B             >Latest_Definition defl  Heap_Ptr
 979+ ED1B             >
 979+ ED1B             >                // dummy db directives used to calculate length of namec
 979+ ED1B 5C          >                db      "\\"
 979+ ED1C             >len_NFA         defl    $ - temp_NFA
 979+ ED1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ ED1B             >
 979+ ED1B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ ED1C 5C          >                db      "\\"               // name string in 7-bit ascii, but
 979+ ED1D             >                org     $-1                 // alter last byte of Name just above to set
 979+ ED1C DC          >                db      {b $} | END_BIT     // msb as name end
 979+ ED1D             >
 979+ ED1D 13 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 979+ ED1F             >Prev_Ptr        defl    Heap_Ptr
 979+ ED1F             >
 979+ ED1F             >mirror_Ptr      defl    $
 979+ ED1F             >
 979+ ED1F 50 81       >                dw      Dict_Ptr + 2        // xt
 979+ ED21             >Heap_Ptr        defl    $ - $E000           // save current HP
 979+ ED21             >
 979+ ED21             >Current_HP      defl  $ - $E000             // used to set HP once!
 979+ ED21             >
 979+ ED21             >//              ______________________________________________________________________
 979+ ED21             >//              Dictionary part
 979+ ED21             >
 979+ ED21             >                org     Dict_Ptr
 979+ 814E             >
 979+ 814E 1F 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 979+ 8150             >
 979+ 8150             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 8150 CD 40 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 979+ 8153             >
 979+ 8153             >
 979+ 8153             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 8153             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 8153             >
 979+ 8153             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 8153 36 6B 9D 69                  dw      BLK, FETCH
 981+ 8157 F5 63                        dw      ZBRANCH
 982+ 8159 30 00                        dw      Backslash_Else_1 - $
 983+ 815B 36 6B 9D 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 983+ 815F 9C 6A 33 6C
 984+ 8163 F5 63                        dw          ZBRANCH
 985+ 8165 18 00                        dw          Backslash_Else_2 - $
 986+ 8167 3C 6B 9D 69                  dw              TO_IN, FETCH, CL, MOD, CL
 986+ 816B BF 6A 58 77
 986+ 816F BF 6A
 987+ 8171 25 69 F9 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 987+ 8175 3C 6B 85 69
 988+ 8179 E8 63                        dw          BRANCH
 989+ 817B 0A 00                        dw          Backslash_Endif_2 - $
 990+ 817D              Backslash_Else_2:
 991+ 817D C6 6A DA 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 991+ 8181 3C 6B A7 69
 992+ 8185              Backslash_Endif_2:
 993+ 8185 E8 63                        dw      BRANCH
 994+ 8187 10 00                        dw      Backslash_Endif_1 - $
 995+ 8189              Backslash_Else_1:
 996+ 8189 95 6A FA 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 996+ 818D 9D 69 3C 6B
 996+ 8191 9D 69 A6 68
 996+ 8195 A7 69
 997+ 8197              Backslash_Endif_1:
 998+ 8197 53 68                        dw      EXIT
 999+ 8199
1000+ 8199              Fence_Word:
1001+ 8199              //  ______________________________________________________________________
1002+ 8199              //
1003+ 8199
1004+ 8199 00           Here_Dictionary db      0
1005+ 819A
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  819A
 126  819A              // now we save the compiled file so we can either run it or debug it
 127  819A                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  819A                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  819A                              SAVENEX CFG  0
 130  819A                              SAVENEX BANK 2, 0
 131  819A                              SAVENEX AUTO
 132  819A                              SAVENEX CLOSE
 133  819A
 134  819A              //              PAGE 7 ;set 7 page to current slot
 135  819A              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  819A              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  819A
 138  819A                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  819A                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  819A
 141  819A                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  819A                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  819A
 144  819A                              // To load on ZX Spectrum Next you have to type
 145  819A                              //      LOAD "ram7.bin" BANK 16
 146  819A                              //      LOAD "forth17d.bin" CODE
 147  819A
 148  819A                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
