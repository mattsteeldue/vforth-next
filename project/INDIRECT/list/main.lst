# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220508
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 4E 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 4E 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 2F 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 75 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 75 87        DP_origin       dw      Fence_Word
  39+ 6386 5C 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- addr 0 | cfa b 1
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 01 00                             ld      hl, 1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // key          -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def KEY, "KEY", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 4B 45 59    >                db      "KEY"
 778+ 66B5             >len_NFA         defl    $ - temp_NFA
 778+ 66B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 778+ 66B6             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B5 D9          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B6             >
 778+ 66B6 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B8             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B8             >                else
 778+ 66B8 BA 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BA             >
 778+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BA
 780+ 66BA C5                           push    bc                  // save Instruction Pointer
 781+ 66BB DD E5                        push    ix
 782+ 66BD
 783+ 66BD ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C8
 787+ 66C8              Key_Wait:
 788+ 66C8 76                               halt
 789+ 66C9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CE
 792+ 66CE                                  // software-flash: flips face every 320 ms
 793+ 66CE 3E 10                            ld      a, $10              // Timing based
 794+ 66D0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D3
 796+ 66D3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D6 20 0C                            jr      nz, Key_Cursor
 798+ 66D8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66DF 28 03                                jr      z, Key_Cursor
 801+ 66E1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E4              Key_Cursor:
 803+ 66E4 D7                               rst     $10
 804+ 66E5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E7 D7                               rst     $10
 806+ 66E8
 807+ 66E8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66EC 28 DA                        jr      z, Key_Wait
 809+ 66EE
 810+ 66EE 76                           halt    // this is to sync flashing cursor.
 811+ 66EF
 812+ 66EF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F1 D7                           rst     $10
 814+ 66F2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F4 D7                           rst     $10
 816+ 66F5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 817+ 66F8
 818+ 66F8                              // decode character from above table
 819+ 66F8 21 9C 66                     ld      hl, Key_Table
 820+ 66FB 01 0B 00                     ld      bc, $000B
 821+ 66FE ED B1                        cpir
 822+ 6700 20 05                        jr      nz, Key_DontMap
 823+ 6702 21 A7 66                         ld      hl, Key_MapTo
 824+ 6705 09                               add     hl, bc
 825+ 6706 7E                               ld      a, (hl)
 826+ 6707 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 827+ 6709 20 09                        jr      nz, Key_NoCapsLock
 828+ 670B 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 829+ 670E 7E                               ld      a, (hl)
 830+ 670F EE 08                            xor     $08
 831+ 6711 77                               ld      (hl), a
 832+ 6712 3E 00                            ld      a, NUL_CHAR
 833+ 6714 6F           Key_NoCapsLock: ld      l, a
 834+ 6715 26 00                        ld      h, 0                // Prepare TOS
 835+ 6717
 836+ 6717 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 837+ 671A 1F                           rra
 838+ 671B 1F                           rra
 839+ 671C 1F                           rra
 840+ 671D F6 18                        or      $18                 // quick'n'dirty click
 841+ 671F D3 FE                        out     ($fe), a
 842+ 6721 06 00                        ld      b, 0
 843+ 6723 10 FE                        djnz    $                   // wait loop
 844+ 6725 EE 18                        xor     $18
 845+ 6727 D3 FE                        out     ($fe), a
 846+ 6729
 847+ 6729 ED 7B 92 63                  ld      sp, (SP_Saved)
 848+ 672D
 849+ 672D DD E1                        pop     ix
 850+ 672F C1                           pop     bc                  // Restore Instruction Pointer
 851+ 6730
 852+ 6730                              psh1
 852+ 6730 E5          >                push    hl
 852+ 6731 DD E9       >                jp      (ix)
 853+ 6733
 854+ 6733              //  ______________________________________________________________________
 855+ 6733              //
 856+ 6733              // ?terminal    -- FALSE | TRUE
 857+ 6733              // test for BREAK keypress
 858+ 6733                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 858+ 6733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 6733             >
 858+ 6733             >                // dummy db directives used to calculate length of namec
 858+ 6733 3F 54 45 52 >                db      "?TERMINAL"
 858+ 6737 4D 49 4E 41 >
 858+ 673B 4C          >
 858+ 673C             >len_NFA         defl    $ - temp_NFA
 858+ 673C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 6733             >
 858+ 6733 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 6734 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 858+ 6738 4D 49 4E 41 >
 858+ 673C 4C          >
 858+ 673D             >                org     $-1                 // alter last byte of Name just above to set
 858+ 673C CC          >                db      {b $} | END_BIT     // msb as name end
 858+ 673D             >
 858+ 673D B2 66       >                dw      last_NFA            // Link to previous definition Name
 858+ 673F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 673F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 858+ 673F             >                else
 858+ 673F 41 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 6741             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6741             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6741             >
 858+ 6741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6741 21 00 00                     ld      hl, 0
 860+ 6744 ED 73 92 63                  ld      (SP_Saved), sp
 861+ 6748 31 61 63                     ld      sp, Cold_origin - 5
 862+ 674B CD 54 1F                     call    $1F54
 863+ 674E ED 7B 92 63                  ld      sp, (SP_Saved)
 864+ 6752
 865+ 6752 38 01                        jr      c, QTerminal_NoBreak
 866+ 6754 2B                               dec     hl                  // quick TRUE_FLAG
 867+ 6755              QTerminal_NoBreak:
 868+ 6755
 869+ 6755                              psh1
 869+ 6755 E5          >                push    hl
 869+ 6756 DD E9       >                jp      (ix)
 870+ 6758
 871+ 6758
 872+ 6758              //  ______________________________________________________________________
 873+ 6758              //
 874+ 6758              // inkey        -- c | 0
 875+ 6758              // call ROM inkey$ routine, returns c or "zero".
 876+ 6758
 877+ 6758                              New_Def INKEY, "INKEY", is_code, is_normal
 877+ 6758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 6758             >
 877+ 6758             >                // dummy db directives used to calculate length of namec
 877+ 6758 49 4E 4B 45 >                db      "INKEY"
 877+ 675C 59          >
 877+ 675D             >len_NFA         defl    $ - temp_NFA
 877+ 675D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 6758             >
 877+ 6758 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 6759 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 877+ 675D 59          >
 877+ 675E             >                org     $-1                 // alter last byte of Name just above to set
 877+ 675D D9          >                db      {b $} | END_BIT     // msb as name end
 877+ 675E             >
 877+ 675E 33 67       >                dw      last_NFA            // Link to previous definition Name
 877+ 6760             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 6760 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 6760             >                else
 877+ 6760 62 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 6762             >
 877+ 6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 6762
 879+ 6762 C5                           push    bc
 880+ 6763 ED 73 92 63                  ld      (SP_Saved), sp
 881+ 6767 31 61 63                     ld      sp, Cold_origin - 5
 882+ 676A DD E5                        push    ix
 883+ 676C CD E6 15                     call    $15E6                   // instead of 15E9
 884+ 676F DD E1                        pop     ix
 885+ 6771 ED 7B 92 63                  ld      sp, (SP_Saved)
 886+ 6775 6F                           ld      l, a
 887+ 6776 26 00                        ld      h, 0
 888+ 6778 C1                           pop     bc
 889+ 6779                              psh1
 889+ 6779 E5          >                push    hl
 889+ 677A DD E9       >                jp      (ix)
 890+ 677C
 891+ 677C              //  ______________________________________________________________________
 892+ 677C              //
 893+ 677C              // select      n --
 894+ 677C              // selects the given channel number
 895+ 677C
 896+ 677C                              New_Def SELECT, "SELECT", is_code, is_normal
 896+ 677C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ 677C             >
 896+ 677C             >                // dummy db directives used to calculate length of namec
 896+ 677C 53 45 4C 45 >                db      "SELECT"
 896+ 6780 43 54       >
 896+ 6782             >len_NFA         defl    $ - temp_NFA
 896+ 6782             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ 677C             >
 896+ 677C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ 677D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 896+ 6781 43 54       >
 896+ 6783             >                org     $-1                 // alter last byte of Name just above to set
 896+ 6782 D4          >                db      {b $} | END_BIT     // msb as name end
 896+ 6783             >
 896+ 6783 58 67       >                dw      last_NFA            // Link to previous definition Name
 896+ 6785             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 6785 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 896+ 6785             >                else
 896+ 6785 87 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 896+ 6787             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 6787             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 6787             >
 896+ 6787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 6787 E1                           pop     hl
 898+ 6788 C5                           push    bc
 899+ 6789 7D                           ld      a, l
 900+ 678A ED 73 92 63                  ld      (SP_Saved), sp
 901+ 678E 31 61 63                     ld      sp, Cold_origin - 5
 902+ 6791 DD E5                        push    ix
 903+ 6793 CD 01 16                     call    $1601
 904+ 6796 DD E1                        pop     ix
 905+ 6798 ED 7B 92 63                  ld      sp, (SP_Saved)
 906+ 679C C1                           pop     bc
 907+ 679D
 908+ 679D                              next
 908+ 679D DD E9       >                jp      (ix)
 909+ 679F
 910+ 679F              //  ______________________________________________________________________
 911+ 679F              //
 912+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 913+ 679F              // this include is "here" for backward compatibility
 914+ 679F
 915+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9              F_Seek_Exit:
  26++67B9 C1                           pop     bc                  // restore Instruction Pointer
  27++67BA DD E1                        pop     ix
  28++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67BE
  30++67BE                              psh1
  30++67BE E5          >                push    hl
  30++67BF DD E9       >                jp      (ix)
  31++67C1
  32++67C1              //  ______________________________________________________________________
  33++67C1              //
  34++67C1              // f_close      u -- f
  35++67C1              // Close file-handle u.
  36++67C1              // Return 0 on success, True flag on error
  37++67C1
  38++67C1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C1             >
  38++67C1             >                // dummy db directives used to calculate length of namec
  38++67C1 46 5F 43 4C >                db      "F_CLOSE"
  38++67C5 4F 53 45    >
  38++67C8             >len_NFA         defl    $ - temp_NFA
  38++67C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C1             >
  38++67C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C6 4F 53 45    >
  38++67C9             >                org     $-1                 // alter last byte of Name just above to set
  38++67C8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C9             >
  38++67C9 9F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CB             >                else
  38++67CB CD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67CD             >
  38++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67CD
  40++67CD E1                           pop     hl
  41++67CE 7D                           ld      a, l                // file-handle
  42++67CF DD E5                        push    ix
  43++67D1 C5                           push    bc                  // Save Instruction pointer
  44++67D2 CF                           rst     $08
  45++67D3 9B                           db      $9B
  46++67D4 18 E3                        jr      F_Seek_Exit
  47++67D6              //              pop     bc
  48++67D6              //              pop     ix
  49++67D6              //              sbc     hl, hl
  50++67D6              //              psh1
  51++67D6
  52++67D6              //  ______________________________________________________________________
  53++67D6              //
  54++67D6              // f_sync      u -- f
  55++67D6              // Close file-handle u.
  56++67D6              // Return 0 on success, True flag on error
  57++67D6
  58++67D6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D6             >
  58++67D6             >                // dummy db directives used to calculate length of namec
  58++67D6 46 5F 53 59 >                db      "F_SYNC"
  58++67DA 4E 43       >
  58++67DC             >len_NFA         defl    $ - temp_NFA
  58++67DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D6             >
  58++67D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DB 4E 43       >
  58++67DD             >                org     $-1                 // alter last byte of Name just above to set
  58++67DC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67DD             >
  58++67DD C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DF             >                else
  58++67DF E1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E1             >
  58++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E1 E1                           pop     hl
  60++67E2 7D                           ld      a, l                // file-handle
  61++67E3 DD E5                        push    ix
  62++67E5 C5                           push    bc
  63++67E6 CF                           rst     $08
  64++67E7 9C                           db      $9C
  65++67E8 18 CF                        jr      F_Seek_Exit
  66++67EA              //              pop     bc
  67++67EA              //              pop     ix
  68++67EA              //              sbc     hl, hl
  69++67EA              //              psh1
  70++67EA
  71++67EA              //  ______________________________________________________________________
  72++67EA              //
  73++67EA              // f_fgetpos    u -- d f
  74++67EA              // Seek to position d in file-handle u.
  75++67EA              // Return a false-flag 0 on success, True flag on error
  76++67EA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67EA             >
  76++67EA             >                // dummy db directives used to calculate length of namec
  76++67EA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67EE 45 54 50 4F >
  76++67F2 53          >
  76++67F3             >len_NFA         defl    $ - temp_NFA
  76++67F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67EA             >
  76++67EA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EF 45 54 50 4F >
  76++67F3 53          >
  76++67F4             >                org     $-1                 // alter last byte of Name just above to set
  76++67F3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F4             >
  76++67F4 D6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F6             >                else
  76++67F6 F8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F8             >
  76++67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F8 E1                           pop     hl
  78++67F9 7D                           ld      a, l                // file-handle
  79++67FA DD E5                        push    ix
  80++67FC C5                           push    bc
  81++67FD CF                           rst     $08
  82++67FE A0                           db      $A0
  83++67FF E1                           pop     hl                  // restore Instruction Pointer
  84++6800 DD E1                        pop     ix
  85++6802 D5                           push    de
  86++6803 C5                           push    bc
  87++6804 44                           ld      b, h                // restore Instruction Pointer
  88++6805 4D                           ld      c, l
  89++6806 ED 62                        sbc     hl, hl
  90++6808
  91++6808                              psh1
  91++6808 E5          >                push    hl
  91++6809 DD E9       >                jp      (ix)
  92++680B
  93++680B              //  ______________________________________________________________________
  94++680B              //
  95++680B              // f_read       a b u -- n f
  96++680B              // Read b bytes from file-handle u to address a
  97++680B              // Return the actual number n of bytes read
  98++680B              // Return 0 on success, True flag on error
  99++680B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680B             >
  99++680B             >                // dummy db directives used to calculate length of namec
  99++680B 46 5F 52 45 >                db      "F_READ"
  99++680F 41 44       >
  99++6811             >len_NFA         defl    $ - temp_NFA
  99++6811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680B             >
  99++680B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6810 41 44       >
  99++6812             >                org     $-1                 // alter last byte of Name just above to set
  99++6811 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6812             >
  99++6812 EA 67       >                dw      last_NFA            // Link to previous definition Name
  99++6814             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6814 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6814             >                else
  99++6814 16 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6816             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6816             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6816             >
  99++6816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6816
 101++6816 50                           ld      d, b
 102++6817 59                           ld      e, c
 103++6818 E1                           pop     hl
 104++6819 7D                           ld      a, l                // file-handle
 105++681A C1                           pop     bc                  // bc has bytes to read
 106++681B DD E3                        ex      (sp), ix            // ix has address
 107++681D D5                           push    de                  // Save Instruction pointer
 108++681E CF                           rst     $08
 109++681F 9D                           db      $9D
 110++6820              F_Read_Exit:
 111++6820 C1                           pop     bc                  // Restore Instruction pointer
 112++6821 DD E1                        pop     ix                  // Restore ix
 113++6823 D5                           push    de                  // bytes written
 114++6824 ED 62                        sbc     hl, hl
 115++6826
 116++6826                              psh1
 116++6826 E5          >                push    hl
 116++6827 DD E9       >                jp      (ix)
 117++6829
 118++6829              //  ______________________________________________________________________
 119++6829              //
 120++6829              // f_write      a b u -- n f
 121++6829              // Write bytes currently stored at address a to file-handle u.
 122++6829              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6829                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6829             >
 123++6829             >                // dummy db directives used to calculate length of namec
 123++6829 46 5F 57 52 >                db      "F_WRITE"
 123++682D 49 54 45    >
 123++6830             >len_NFA         defl    $ - temp_NFA
 123++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6829             >
 123++6829 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++682E 49 54 45    >
 123++6831             >                org     $-1                 // alter last byte of Name just above to set
 123++6830 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6831             >
 123++6831 0B 68       >                dw      last_NFA            // Link to previous definition Name
 123++6833             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6833             >                else
 123++6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6835             >
 123++6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6835
 125++6835 50                           ld      d, b
 126++6836 59                           ld      e, c
 127++6837 E1                           pop     hl
 128++6838 7D                           ld      a, l                // file-handle
 129++6839 C1                           pop     bc                  // bc has bytes to read
 130++683A DD E3                        ex      (sp), ix            // ix has address
 131++683C D5                           push    de                  // Save Instruction pointer
 132++683D CF                           rst     $08
 133++683E 9E                           db      $9E
 134++683F 18 DF                        jr F_Read_Exit
 135++6841              //              pop     bc                  // Restore Instruction pointer
 136++6841              //              pop     ix                  // Restore ix
 137++6841              //              push    de                  // bytes written
 138++6841              //              sbc     hl, hl
 139++6841              //
 140++6841              //              psh1
 141++6841
 142++6841              //  ______________________________________________________________________
 143++6841              //
 144++6841              // f_open       a1 a2 b -- u f
 145++6841              // open a file
 146++6841              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6841              // a2 is address to an 8-byte header data used in some cases.
 148++6841              // b is access mode-byte, that is a combination of:
 149++6841              // any/all of:
 150++6841              //   esx_mode_read          $01 request read access
 151++6841              //   esx_mode_write         $02 request write access
 152++6841              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6841              // plus one of:
 154++6841              //   esx_mode_open_exist    $00 only open existing file
 155++6841              //   esx_mode_open_creat    $08 open existing or create file
 156++6841              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6841              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6841              // Return file-handle u and 0 on success, True flag on error
 159++6841                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6841             >
 159++6841             >                // dummy db directives used to calculate length of namec
 159++6841 46 5F 4F 50 >                db      "F_OPEN"
 159++6845 45 4E       >
 159++6847             >len_NFA         defl    $ - temp_NFA
 159++6847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6841             >
 159++6841 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6842 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6846 45 4E       >
 159++6848             >                org     $-1                 // alter last byte of Name just above to set
 159++6847 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6848             >
 159++6848 29 68       >                dw      last_NFA            // Link to previous definition Name
 159++684A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684A             >                else
 159++684A 4C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684C             >
 159++684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684C 60                           ld      h, b                // Save Instruction pointer
 161++684D 69                           ld      l, c
 162++684E C1                           pop     bc                  // file-mode
 163++684F 41                           ld      b, c                // file-mode
 164++6850 D1                           pop     de                  // 8-bytes buffer if any
 165++6851 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6853 E5                           push    hl                  // Save Instruction pointer
 167++6854 3E 2A                        ld      a, "*"
 168++6856 CF                           rst     $08
 169++6857 9A                           db      $9A
 170++6858              F_Open_Exit:
 171++6858 C1                           pop     bc
 172++6859 DD E1                        pop     ix
 173++685B ED 62                        sbc     hl, hl
 174++685D 5F                           ld      e, a
 175++685E 16 00                        ld      d, 0
 176++6860
 177++6860
 178++6860                              psh2
 178++6860 D5          >                push    de
 178++6861 E5          >                push    hl
 178++6862 DD E9       >                jp      (ix)
 179++6864
 180++6864              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++6864              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++6864              //   \ DROP
 183++6864              //   \ F_CLOSE
 184++6864
 185++6864
 186++6864              //  ______________________________________________________________________
 187++6864              //
 188++6864              // f_opendir    a1 a2 b -- u f
 189++6864              // open a file
 190++6864                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++6864             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++6864             >
 190++6864             >                // dummy db directives used to calculate length of namec
 190++6864 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6868 45 4E 44 49 >
 190++686C 52          >
 190++686D             >len_NFA         defl    $ - temp_NFA
 190++686D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++6864             >
 190++6864 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6865 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6869 45 4E 44 49 >
 190++686D 52          >
 190++686E             >                org     $-1                 // alter last byte of Name just above to set
 190++686D D2          >                db      {b $} | END_BIT     // msb as name end
 190++686E             >
 190++686E 41 68       >                dw      last_NFA            // Link to previous definition Name
 190++6870             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6870 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++6870             >                else
 190++6870 72 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++6872             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6872             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6872             >
 190++6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6872 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++6874 C5                           push    bc                  // Save Instruction pointer
 193++6875 06 10                        ld      b, $10              // file-mode
 194++6877 3E 43                        ld      a, "C"
 195++6879 CF                           rst     $08
 196++687A A3                           db      $A3
 197++687B 18 DB                        jr      F_Open_Exit
 198++687D
 199++687D
 200++687D              //  ______________________________________________________________________
 201++687D              //
 202++687D              // f_readdir    a1 a2 b -- u f
 203++687D              // open a file
 204++687D                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++687D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++687D             >
 204++687D             >                // dummy db directives used to calculate length of namec
 204++687D 46 5F 52 45 >                db      "F_READDIR"
 204++6881 41 44 44 49 >
 204++6885 52          >
 204++6886             >len_NFA         defl    $ - temp_NFA
 204++6886             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++687D             >
 204++687D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++687E 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6882 41 44 44 49 >
 204++6886 52          >
 204++6887             >                org     $-1                 // alter last byte of Name just above to set
 204++6886 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6887             >
 204++6887 64 68       >                dw      last_NFA            // Link to previous definition Name
 204++6889             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6889 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++6889             >                else
 204++6889 8B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++688B             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++688B             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++688B             >
 204++688B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++688B E1                           pop     hl
 206++688C 7D                           ld      a, l
 207++688D D1                           pop     de
 208++688E DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6890 C5                           push    bc                  // Save Instruction pointer
 210++6891 CF                           rst     $08
 211++6892 A4                           db      $A4
 212++6893 18 C3                        jr      F_Open_Exit
 213++6895
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 916+ 6895
 917+ 6895
 918+ 6895              //  ______________________________________________________________________
 919+ 6895              //
 920+ 6895              // cmove    a1 a2 u --
 921+ 6895              // If u > 0, moves memory content starting at address a1 for n bytes long
 922+ 6895              // storing then starting at address addr2.
 923+ 6895              // The content of a1 is moved first. See CMOVE> also.
 924+ 6895                              New_Def CMOVE, "CMOVE", is_code, is_normal
 924+ 6895             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ 6895             >
 924+ 6895             >                // dummy db directives used to calculate length of namec
 924+ 6895 43 4D 4F 56 >                db      "CMOVE"
 924+ 6899 45          >
 924+ 689A             >len_NFA         defl    $ - temp_NFA
 924+ 689A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ 6895             >
 924+ 6895 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ 6896 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 924+ 689A 45          >
 924+ 689B             >                org     $-1                 // alter last byte of Name just above to set
 924+ 689A C5          >                db      {b $} | END_BIT     // msb as name end
 924+ 689B             >
 924+ 689B 7D 68       >                dw      last_NFA            // Link to previous definition Name
 924+ 689D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 689D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 924+ 689D             >                else
 924+ 689D 9F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 924+ 689F             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 689F             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 689F             >
 924+ 689F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 689F D9                           exx
 926+ 68A0 C1                           pop     bc                  // bc has counter
 927+ 68A1 D1                           pop     de                  // de now has dest
 928+ 68A2 E1                           pop     hl                  // hl has source, save Instruction Pointer
 929+ 68A3 78                           ld      a, b
 930+ 68A4 B1                           or      c
 931+ 68A5 28 02                        jr      z, Cmove_NoMove
 932+ 68A7 ED B0                            ldir
 933+ 68A9              Cmove_NoMove:
 934+ 68A9 D9                           exx
 935+ 68AA                              next
 935+ 68AA DD E9       >                jp      (ix)
 936+ 68AC
 937+ 68AC              //  ______________________________________________________________________
 938+ 68AC              //
 939+ 68AC              // cmove>    a1 a2 u --
 940+ 68AC              // If u > 0, moves memory content starting at address a1 for n bytes long
 941+ 68AC              // storing then starting at address addr2.
 942+ 68AC              // The content of a1 is moved last. See cmove.
 943+ 68AC                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 943+ 68AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 68AC             >
 943+ 68AC             >                // dummy db directives used to calculate length of namec
 943+ 68AC 43 4D 4F 56 >                db      "CMOVE>"
 943+ 68B0 45 3E       >
 943+ 68B2             >len_NFA         defl    $ - temp_NFA
 943+ 68B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 68AC             >
 943+ 68AC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 68AD 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 943+ 68B1 45 3E       >
 943+ 68B3             >                org     $-1                 // alter last byte of Name just above to set
 943+ 68B2 BE          >                db      {b $} | END_BIT     // msb as name end
 943+ 68B3             >
 943+ 68B3 95 68       >                dw      last_NFA            // Link to previous definition Name
 943+ 68B5             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 68B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 943+ 68B5             >                else
 943+ 68B5 B7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 943+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 68B7             >
 943+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 68B7 D9                           exx
 945+ 68B8 C1                           pop     bc                  // bc has counter
 946+ 68B9 D1                           pop     de                  // de has dest
 947+ 68BA E1                           pop     hl                  // hl has source, save Instruction Pointer
 948+ 68BB 78                           ld      a, b
 949+ 68BC B1                           or      c
 950+ 68BD 28 08                        jr      z, CmoveV_NoMove
 951+ 68BF EB                               ex      de, hl              // compute address to
 952+ 68C0 09                               add     hl, bc              // operate backward
 953+ 68C1 2B                               dec     hl
 954+ 68C2 EB                               ex      de, hl
 955+ 68C3 09                               add     hl, bc
 956+ 68C4 2B                               dec     hl
 957+ 68C5 ED B8                            lddr                        // backward
 958+ 68C7              CmoveV_NoMove:
 959+ 68C7 D9                           exx
 960+ 68C8                              next
 960+ 68C8 DD E9       >                jp      (ix)
 961+ 68CA
 962+ 68CA              //  ______________________________________________________________________
 963+ 68CA              //
 964+ 68CA              // um*      u1 u2 -- ud
 965+ 68CA              // Unsigned multiplication
 966+ 68CA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 967+ 68CA              // On the stack a double number is treated as two single numbers
 968+ 68CA              // where DE is on the top of the stack and HL is the second from top,
 969+ 68CA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 970+ 68CA              // this definition could use "MUL" Z80N new op-code.
 971+ 68CA                              New_Def UM_MUL, "UM*", is_code, is_normal
 971+ 68CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 971+ 68CA             >
 971+ 68CA             >                // dummy db directives used to calculate length of namec
 971+ 68CA 55 4D 2A    >                db      "UM*"
 971+ 68CD             >len_NFA         defl    $ - temp_NFA
 971+ 68CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 971+ 68CA             >
 971+ 68CA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 971+ 68CB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 971+ 68CE             >                org     $-1                 // alter last byte of Name just above to set
 971+ 68CD AA          >                db      {b $} | END_BIT     // msb as name end
 971+ 68CE             >
 971+ 68CE AC 68       >                dw      last_NFA            // Link to previous definition Name
 971+ 68D0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 971+ 68D0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 971+ 68D0             >                else
 971+ 68D0 D2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 971+ 68D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 971+ 68D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 971+ 68D2             >
 971+ 68D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 972+ 68D2 D9                           exx
 973+ 68D3 D1                           pop     de                    // de has u2 operand
 974+ 68D4 E1                           pop     hl                    // hl has u1 operand
 975+ 68D5 45                           ld      b, l
 976+ 68D6 4B                           ld      c, e
 977+ 68D7 5D                           ld      e, l
 978+ 68D8 6A                           ld      l, d
 979+ 68D9 E5                           push    hl
 980+ 68DA 69                           ld      l, c
 981+ 68DB ED 30                        mul
 982+ 68DD EB                           ex      de, hl
 983+ 68DE ED 30                        mul
 984+ 68E0 AF                           xor     a
 985+ 68E1 19                           add     hl, de
 986+ 68E2 8F                           adc     a
 987+ 68E3 59                           ld      e, c
 988+ 68E4 50                           ld      d, b
 989+ 68E5 ED 30                        mul
 990+ 68E7 47                           ld      b, a
 991+ 68E8 4C                           ld      c, h
 992+ 68E9 7A                           ld      a, d
 993+ 68EA 85                           add     l
 994+ 68EB 67                           ld      h, a
 995+ 68EC 6B                           ld      l, e
 996+ 68ED D1                           pop     de
 997+ 68EE ED 30                        mul
 998+ 68F0 EB                           ex      de, hl
 999+ 68F1 ED 4A                        adc     hl, bc
1000+ 68F3 D5                           push    de
1001+ 68F4 E5                           push    hl
1002+ 68F5 D9                           exx
1003+ 68F6                              next
1003+ 68F6 DD E9       >                jp      (ix)
1004+ 68F8
1005+ 68F8              //  ______________________________________________________________________
1006+ 68F8              //
1007+ 68F8              // um/mod      ud u1 -- q r
1008+ 68F8              // divides ud into u1 giving quotient q and remainder r
1009+ 68F8              // algorithm takes 16 bit at a time starting from msb
1010+ 68F8              // DE grows from lsb upward with quotient result
1011+ 68F8              // HL keeps the remainder at each stage of division
1012+ 68F8              // each loop 'lowers' the next binary digit to form the current dividend
1013+ 68F8                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1013+ 68F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ 68F8             >
1013+ 68F8             >                // dummy db directives used to calculate length of namec
1013+ 68F8 55 4D 2F 4D >                db      "UM/MOD"
1013+ 68FC 4F 44       >
1013+ 68FE             >len_NFA         defl    $ - temp_NFA
1013+ 68FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ 68F8             >
1013+ 68F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ 68F9 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1013+ 68FD 4F 44       >
1013+ 68FF             >                org     $-1                 // alter last byte of Name just above to set
1013+ 68FE C4          >                db      {b $} | END_BIT     // msb as name end
1013+ 68FF             >
1013+ 68FF CA 68       >                dw      last_NFA            // Link to previous definition Name
1013+ 6901             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 6901 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1013+ 6901             >                else
1013+ 6901 03 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1013+ 6903             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 6903             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 6903             >
1013+ 6903             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 6903 D9                           exx
1015+ 6904 C1                           pop     bc                      // divisor
1016+ 6905
1017+ 6905 E1                           pop     hl                      // < high part
1018+ 6906 D1                           pop     de                      // < low part and
1019+ 6907
1020+ 6907 7D                           ld      a, l                    // check without changing arguments
1021+ 6908 91                           sub     c                       // if divisor is greater than high part
1022+ 6909 7C                           ld      a, h                    // so quotient will be in range
1023+ 690A 98                           sbc     a, b
1024+ 690B 30 20                        jr      nc, Um_DivMod_OutOfRange
1025+ 690D 3E 10                            ld      a, 16
1026+ 690F              Um_DivMod_Loop:
1027+ 690F CB 23                                sla     e
1028+ 6911 CB 12                                rl      d
1029+ 6913 ED 6A                                adc     hl, hl
1030+ 6915 30 05                                jr      nc, Um_DivMod_Carry
1031+ 6917 A7                                       and     a
1032+ 6918 ED 42                                    sbc     hl, bc
1033+ 691A 18 07                                jr      Um_DivMod_Endif    // else
1034+ 691C              Um_DivMod_Carry:
1035+ 691C A7                                       and     a
1036+ 691D ED 42                                    sbc     hl, bc
1037+ 691F 30 02                                    jr      nc, Um_DivMod_Endif
1038+ 6921 09                                           add     hl, bc
1039+ 6922 1B                                           dec     de
1040+ 6923              Um_DivMod_Endif:                                   // endif
1041+ 6923 13                                   inc     de
1042+ 6924 3D                                   dec     a
1043+ 6925 20 E8                            jr      nz, Um_DivMod_Loop
1044+ 6927 EB                               ex      de, hl
1045+ 6928              Um_DivMod_Bailout:
1046+ 6928 D5                               push    de                  // de := remanider
1047+ 6929 E5                               push    hl                  // hl := quotient
1048+ 692A D9                               exx
1049+ 692B                                  next
1049+ 692B DD E9       >                jp      (ix)
1050+ 692D
1051+ 692D              Um_DivMod_OutOfRange:
1052+ 692D 21 FF FF                     ld      hl, -1
1053+ 6930 54                           ld      d, h
1054+ 6931 5D                           ld      e, l
1055+ 6932 18 F4                        jr      Um_DivMod_Bailout
1056+ 6934
1057+ 6934              //  ______________________________________________________________________
1058+ 6934              //
1059+ 6934              // and          n1 n2 -- n3
1060+ 6934              // bit logical AND. Returns n3 as n1 & n2
1061+ 6934                              New_Def AND_OP, "AND", is_code, is_normal
1061+ 6934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1061+ 6934             >
1061+ 6934             >                // dummy db directives used to calculate length of namec
1061+ 6934 41 4E 44    >                db      "AND"
1061+ 6937             >len_NFA         defl    $ - temp_NFA
1061+ 6937             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1061+ 6934             >
1061+ 6934 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1061+ 6935 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1061+ 6938             >                org     $-1                 // alter last byte of Name just above to set
1061+ 6937 C4          >                db      {b $} | END_BIT     // msb as name end
1061+ 6938             >
1061+ 6938 F8 68       >                dw      last_NFA            // Link to previous definition Name
1061+ 693A             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1061+ 693A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1061+ 693A             >                else
1061+ 693A 3C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1061+ 693C             >                endif           ; ok        // for other definitions it "points" the correct handler
1061+ 693C             >                // Use of "; ok" to suppress "warning[fwdref]"
1061+ 693C             >
1061+ 693C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1062+ 693C D1                           pop     de
1063+ 693D E1                           pop     hl
1064+ 693E 7B                           ld      a, e
1065+ 693F A5                           and     l
1066+ 6940 6F                           ld      l, a
1067+ 6941 7A                           ld      a, d
1068+ 6942 A4                           and     h
1069+ 6943 67                           ld      h, a
1070+ 6944
1071+ 6944                              psh1
1071+ 6944 E5          >                push    hl
1071+ 6945 DD E9       >                jp      (ix)
1072+ 6947
1073+ 6947              //  ______________________________________________________________________
1074+ 6947              //
1075+ 6947              // or           n1 n2 -- n3
1076+ 6947              // bit logical OR. Returns n3 as n1 | n2
1077+ 6947                              New_Def OR_OP, "OR", is_code, is_normal
1077+ 6947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1077+ 6947             >
1077+ 6947             >                // dummy db directives used to calculate length of namec
1077+ 6947 4F 52       >                db      "OR"
1077+ 6949             >len_NFA         defl    $ - temp_NFA
1077+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1077+ 6947             >
1077+ 6947 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1077+ 6948 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1077+ 694A             >                org     $-1                 // alter last byte of Name just above to set
1077+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
1077+ 694A             >
1077+ 694A 34 69       >                dw      last_NFA            // Link to previous definition Name
1077+ 694C             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1077+ 694C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1077+ 694C             >                else
1077+ 694C 4E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1077+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
1077+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
1077+ 694E             >
1077+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1078+ 694E D1                           pop     de
1079+ 694F E1                           pop     hl
1080+ 6950 7B                           ld      a, e
1081+ 6951 B5                           or      l
1082+ 6952 6F                           ld      l, a
1083+ 6953 7A                           ld      a, d
1084+ 6954 B4                           or      h
1085+ 6955 67                           ld      h, a
1086+ 6956
1087+ 6956                              psh1
1087+ 6956 E5          >                push    hl
1087+ 6957 DD E9       >                jp      (ix)
1088+ 6959
1089+ 6959              //  ______________________________________________________________________
1090+ 6959              //
1091+ 6959              // xor          n1 n2 -- n3
1092+ 6959              // bit logical OR. Returns n3 as n1 ^ n2
1093+ 6959                              New_Def XOR_OP, "XOR", is_code, is_normal
1093+ 6959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1093+ 6959             >
1093+ 6959             >                // dummy db directives used to calculate length of namec
1093+ 6959 58 4F 52    >                db      "XOR"
1093+ 695C             >len_NFA         defl    $ - temp_NFA
1093+ 695C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1093+ 6959             >
1093+ 6959 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1093+ 695A 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1093+ 695D             >                org     $-1                 // alter last byte of Name just above to set
1093+ 695C D2          >                db      {b $} | END_BIT     // msb as name end
1093+ 695D             >
1093+ 695D 47 69       >                dw      last_NFA            // Link to previous definition Name
1093+ 695F             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1093+ 695F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1093+ 695F             >                else
1093+ 695F 61 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1093+ 6961             >                endif           ; ok        // for other definitions it "points" the correct handler
1093+ 6961             >                // Use of "; ok" to suppress "warning[fwdref]"
1093+ 6961             >
1093+ 6961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1094+ 6961 D1                           pop     de
1095+ 6962 E1                           pop     hl
1096+ 6963 7B                           ld      a, e
1097+ 6964 AD                           xor     l
1098+ 6965 6F                           ld      l, a
1099+ 6966 7A                           ld      a, d
1100+ 6967 AC                           xor     h
1101+ 6968 67                           ld      h, a
1102+ 6969
1103+ 6969                              psh1
1103+ 6969 E5          >                push    hl
1103+ 696A DD E9       >                jp      (ix)
1104+ 696C
1105+ 696C              //  ______________________________________________________________________
1106+ 696C              //
1107+ 696C              // sp@      -- a
1108+ 696C              // returns on top of stack the value of SP before execution
1109+ 696C                              New_Def SPFETCH, "SP@", is_code, is_normal
1109+ 696C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1109+ 696C             >
1109+ 696C             >                // dummy db directives used to calculate length of namec
1109+ 696C 53 50 40    >                db      "SP@"
1109+ 696F             >len_NFA         defl    $ - temp_NFA
1109+ 696F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1109+ 696C             >
1109+ 696C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1109+ 696D 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1109+ 6970             >                org     $-1                 // alter last byte of Name just above to set
1109+ 696F C0          >                db      {b $} | END_BIT     // msb as name end
1109+ 6970             >
1109+ 6970 59 69       >                dw      last_NFA            // Link to previous definition Name
1109+ 6972             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1109+ 6972 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1109+ 6972             >                else
1109+ 6972 74 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1109+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1109+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1109+ 6974             >
1109+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1110+ 6974
1111+ 6974 21 00 00                     ld      hl, 0
1112+ 6977 39                           add     hl, sp
1113+ 6978
1114+ 6978                              psh1
1114+ 6978 E5          >                push    hl
1114+ 6979 DD E9       >                jp      (ix)
1115+ 697B
1116+ 697B              //  ______________________________________________________________________
1117+ 697B              //
1118+ 697B              // sp!      a --
1119+ 697B              // restore SP to the initial value passed
1120+ 697B              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1121+ 697B                              New_Def SPSTORE, "SP!", is_code, is_normal
1121+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1121+ 697B             >
1121+ 697B             >                // dummy db directives used to calculate length of namec
1121+ 697B 53 50 21    >                db      "SP!"
1121+ 697E             >len_NFA         defl    $ - temp_NFA
1121+ 697E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1121+ 697B             >
1121+ 697B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1121+ 697C 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1121+ 697F             >                org     $-1                 // alter last byte of Name just above to set
1121+ 697E A1          >                db      {b $} | END_BIT     // msb as name end
1121+ 697F             >
1121+ 697F 6C 69       >                dw      last_NFA            // Link to previous definition Name
1121+ 6981             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1121+ 6981 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1121+ 6981             >                else
1121+ 6981 83 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1121+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1121+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1121+ 6983             >
1121+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1122+ 6983 E1                           pop     hl
1123+ 6984 F9                           ld      sp, hl
1124+ 6985
1125+ 6985                              next
1125+ 6985 DD E9       >                jp      (ix)
1126+ 6987
1127+ 6987              //  ______________________________________________________________________
1128+ 6987              //
1129+ 6987              // rp@      -- a
1130+ 6987              // returns on top of stack the value of Return-Pointer
1131+ 6987                              New_Def RPFETCH, "RP@", is_code, is_normal
1131+ 6987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ 6987             >
1131+ 6987             >                // dummy db directives used to calculate length of namec
1131+ 6987 52 50 40    >                db      "RP@"
1131+ 698A             >len_NFA         defl    $ - temp_NFA
1131+ 698A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ 6987             >
1131+ 6987 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ 6988 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1131+ 698B             >                org     $-1                 // alter last byte of Name just above to set
1131+ 698A C0          >                db      {b $} | END_BIT     // msb as name end
1131+ 698B             >
1131+ 698B 7B 69       >                dw      last_NFA            // Link to previous definition Name
1131+ 698D             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 698D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1131+ 698D             >                else
1131+ 698D 8F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1131+ 698F             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 698F             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 698F             >
1131+ 698F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 698F
1133+ 698F                              ldhlrp
1133+ 698F 2A 96 63    >                ld      hl,(RP_Pointer)
1134+ 6992
1135+ 6992                              psh1
1135+ 6992 E5          >                push    hl
1135+ 6993 DD E9       >                jp      (ix)
1136+ 6995
1137+ 6995              //  ______________________________________________________________________
1138+ 6995              //
1139+ 6995              // rp!      a --
1140+ 6995              // restore RP to the initial value passed
1141+ 6995              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1142+ 6995                              New_Def RPSTORE, "RP!", is_code, is_normal
1142+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 6995             >
1142+ 6995             >                // dummy db directives used to calculate length of namec
1142+ 6995 52 50 21    >                db      "RP!"
1142+ 6998             >len_NFA         defl    $ - temp_NFA
1142+ 6998             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 6995             >
1142+ 6995 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 6996 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1142+ 6999             >                org     $-1                 // alter last byte of Name just above to set
1142+ 6998 A1          >                db      {b $} | END_BIT     // msb as name end
1142+ 6999             >
1142+ 6999 87 69       >                dw      last_NFA            // Link to previous definition Name
1142+ 699B             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 699B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1142+ 699B             >                else
1142+ 699B 9D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 699D             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 699D             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 699D             >
1142+ 699D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 699D E1                           pop     hl
1144+ 699E                              ldrphl
1144+ 699E 22 96 63    >                ld      (RP_Pointer),hl
1145+ 69A1
1146+ 69A1                              next
1146+ 69A1 DD E9       >                jp      (ix)
1147+ 69A3
1148+ 69A3              //  ______________________________________________________________________
1149+ 69A3              //
1150+ 69A3              // exit      --
1151+ 69A3              // exits back to the caller word
1152+ 69A3                              New_Def EXIT, "EXIT", is_code, is_normal
1152+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1152+ 69A3             >
1152+ 69A3             >                // dummy db directives used to calculate length of namec
1152+ 69A3 45 58 49 54 >                db      "EXIT"
1152+ 69A7             >len_NFA         defl    $ - temp_NFA
1152+ 69A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1152+ 69A3             >
1152+ 69A3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1152+ 69A4 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1152+ 69A8             >                org     $-1                 // alter last byte of Name just above to set
1152+ 69A7 D4          >                db      {b $} | END_BIT     // msb as name end
1152+ 69A8             >
1152+ 69A8 95 69       >                dw      last_NFA            // Link to previous definition Name
1152+ 69AA             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1152+ 69AA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1152+ 69AA             >                else
1152+ 69AA AC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1152+ 69AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1152+ 69AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1152+ 69AC             >
1152+ 69AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1153+ 69AC                              ldhlrp                      // Get Return Stack Pointer
1153+ 69AC 2A 96 63    >                ld      hl,(RP_Pointer)
1154+ 69AF 4E                           ld      c, (hl)             // pop Instruction Pointer
1155+ 69B0 23                           inc     hl                  // from Return Stack
1156+ 69B1 46                           ld      b, (hl)
1157+ 69B2 23                           inc     hl
1158+ 69B3                              ldrphl                      // Set Return Stack Pointer
1158+ 69B3 22 96 63    >                ld      (RP_Pointer),hl
1159+ 69B6                              next
1159+ 69B6 DD E9       >                jp      (ix)
1160+ 69B8
1161+ 69B8              //  ______________________________________________________________________
1162+ 69B8              //
1163+ 69B8              // lastl      --
1164+ 69B8              // exits back to the caller word
1165+ 69B8              //              New_Def EXIT, "LASTL", is_code, is_normal
1166+ 69B8              //              ldhlrp                      // Get Return Stack Pointer
1167+ 69B8              //              ld      e, (hl)             // pop Instruction Pointer
1168+ 69B8              //              inc     hl                  // from Return Stack
1169+ 69B8              //              ld      d, (hl)
1170+ 69B8              //              inc     hl
1171+ 69B8              //              ld      (hl), e
1172+ 69B8              //              inc     hl
1173+ 69B8              //              ld      (hl), d
1174+ 69B8              //              next
1175+ 69B8
1176+ 69B8              //  ______________________________________________________________________
1177+ 69B8              //
1178+ 69B8              // >r      n --
1179+ 69B8              // pop from calculator-stack and push into return-stack
1180+ 69B8                              New_Def TO_R, ">R", is_code, is_normal
1180+ 69B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ 69B8             >
1180+ 69B8             >                // dummy db directives used to calculate length of namec
1180+ 69B8 3E 52       >                db      ">R"
1180+ 69BA             >len_NFA         defl    $ - temp_NFA
1180+ 69BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ 69B8             >
1180+ 69B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ 69B9 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1180+ 69BB             >                org     $-1                 // alter last byte of Name just above to set
1180+ 69BA D2          >                db      {b $} | END_BIT     // msb as name end
1180+ 69BB             >
1180+ 69BB A3 69       >                dw      last_NFA            // Link to previous definition Name
1180+ 69BD             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 69BD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1180+ 69BD             >                else
1180+ 69BD BF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1180+ 69BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 69BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 69BF             >
1180+ 69BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 69BF D1                           pop     de
1182+ 69C0                              ldhlrp
1182+ 69C0 2A 96 63    >                ld      hl,(RP_Pointer)
1183+ 69C3 2B                           dec     hl
1184+ 69C4 72                           ld      (hl), d             // store current TOS
1185+ 69C5 2B                           dec     hl                  // to Return Stack
1186+ 69C6 73                           ld      (hl), e
1187+ 69C7                              ldrphl
1187+ 69C7 22 96 63    >                ld      (RP_Pointer),hl
1188+ 69CA
1189+ 69CA                              next
1189+ 69CA DD E9       >                jp      (ix)
1190+ 69CC
1191+ 69CC              //  ______________________________________________________________________
1192+ 69CC              //
1193+ 69CC              // r>      -- n
1194+ 69CC              // pop from return-stack and push into calculator-stack
1195+ 69CC                              New_Def R_TO, "R>", is_code, is_normal
1195+ 69CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1195+ 69CC             >
1195+ 69CC             >                // dummy db directives used to calculate length of namec
1195+ 69CC 52 3E       >                db      "R>"
1195+ 69CE             >len_NFA         defl    $ - temp_NFA
1195+ 69CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1195+ 69CC             >
1195+ 69CC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1195+ 69CD 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1195+ 69CF             >                org     $-1                 // alter last byte of Name just above to set
1195+ 69CE BE          >                db      {b $} | END_BIT     // msb as name end
1195+ 69CF             >
1195+ 69CF B8 69       >                dw      last_NFA            // Link to previous definition Name
1195+ 69D1             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1195+ 69D1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1195+ 69D1             >                else
1195+ 69D1 D3 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1195+ 69D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1195+ 69D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1195+ 69D3             >
1195+ 69D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1196+ 69D3
1197+ 69D3                              ldhlrp
1197+ 69D3 2A 96 63    >                ld      hl,(RP_Pointer)
1198+ 69D6 5E                           ld      e, (hl)             // retrieve from Return Stack
1199+ 69D7 23                           inc     hl
1200+ 69D8 56                           ld      d, (hl)
1201+ 69D9 23                           inc     hl
1202+ 69DA                              ldrphl
1202+ 69DA 22 96 63    >                ld      (RP_Pointer),hl
1203+ 69DD D5                           push    de
1204+ 69DE                              next
1204+ 69DE DD E9       >                jp      (ix)
1205+ 69E0
1206+ 69E0              //  ______________________________________________________________________
1207+ 69E0              //
1208+ 69E0              // r@            -- n
1209+ 69E0              // return on top of stack the value of top of return-stack
1210+ 69E0              // Since this is the same as I, we alter R's CFA to jump there
1211+ 69E0                              New_Def R_OP, "R@", I_Ptr, is_normal
1211+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 69E0             >
1211+ 69E0             >                // dummy db directives used to calculate length of namec
1211+ 69E0 52 40       >                db      "R@"
1211+ 69E2             >len_NFA         defl    $ - temp_NFA
1211+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 69E0             >
1211+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 69E1 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1211+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1211+ 69E2 C0          >                db      {b $} | END_BIT     // msb as name end
1211+ 69E3             >
1211+ 69E3 CC 69       >                dw      last_NFA            // Link to previous definition Name
1211+ 69E5             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 69E5 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1211+ 69E7             >                else
1211+ 69E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1211+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 69E7             >
1211+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 69E7
1213+ 69E7              //  ______________________________________________________________________
1214+ 69E7              //
1215+ 69E7              // r            -- n
1216+ 69E7              // return on top of stack the value of top of return-stack
1217+ 69E7              // Since this is the same as I, we alter R's CFA to jump there
1218+ 69E7              //              New_Def R_OLD, "R", I_Ptr, is_normal
1219+ 69E7
1220+ 69E7              //  ______________________________________________________________________
1221+ 69E7              //
1222+ 69E7              // 0=           n -- f
1223+ 69E7              // true (non zero) if n is zero, false (0) elsewere
1224+ 69E7                              New_Def ZEQUAL, "0=", is_code, is_normal
1224+ 69E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1224+ 69E7             >
1224+ 69E7             >                // dummy db directives used to calculate length of namec
1224+ 69E7 30 3D       >                db      "0="
1224+ 69E9             >len_NFA         defl    $ - temp_NFA
1224+ 69E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1224+ 69E7             >
1224+ 69E7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1224+ 69E8 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1224+ 69EA             >                org     $-1                 // alter last byte of Name just above to set
1224+ 69E9 BD          >                db      {b $} | END_BIT     // msb as name end
1224+ 69EA             >
1224+ 69EA E0 69       >                dw      last_NFA            // Link to previous definition Name
1224+ 69EC             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1224+ 69EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1224+ 69EC             >                else
1224+ 69EC EE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1224+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1224+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1224+ 69EE             >
1224+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1225+ 69EE              Zero_Equal:
1226+ 69EE E1                           pop     hl
1227+ 69EF 7D                           ld      a, l
1228+ 69F0 B4                           or      h
1229+ 69F1 21 00 00                     ld      hl, FALSE_FLAG
1230+ 69F4 20 01                        jr      nz, ZEqual_Skip
1231+ 69F6 2B                               dec     hl
1232+ 69F7              ZEqual_Skip:
1233+ 69F7                              psh1
1233+ 69F7 E5          >                push    hl
1233+ 69F8 DD E9       >                jp      (ix)
1234+ 69FA
1235+ 69FA              //  ______________________________________________________________________
1236+ 69FA              //
1237+ 69FA              // not         a1 -- a2
1238+ 69FA              // increment by 2 top of stack
1239+ 69FA                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1239+ 69FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ 69FA             >
1239+ 69FA             >                // dummy db directives used to calculate length of namec
1239+ 69FA 4E 4F 54    >                db      "NOT"
1239+ 69FD             >len_NFA         defl    $ - temp_NFA
1239+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ 69FA             >
1239+ 69FA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ 69FB 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1239+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1239+ 69FD D4          >                db      {b $} | END_BIT     // msb as name end
1239+ 69FE             >
1239+ 69FE E7 69       >                dw      last_NFA            // Link to previous definition Name
1239+ 6A00             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 6A00 EE 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1239+ 6A02             >                else
1239+ 6A02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1239+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 6A02             >
1239+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 6A02
1241+ 6A02              //  ______________________________________________________________________
1242+ 6A02              //
1243+ 6A02              // 0<           n -- f
1244+ 6A02              // true (non zero) if n is less than zero, false (0) elsewere
1245+ 6A02                              New_Def ZLESS, "0<", is_code, is_normal
1245+ 6A02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 6A02             >
1245+ 6A02             >                // dummy db directives used to calculate length of namec
1245+ 6A02 30 3C       >                db      "0<"
1245+ 6A04             >len_NFA         defl    $ - temp_NFA
1245+ 6A04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 6A02             >
1245+ 6A02 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 6A03 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1245+ 6A05             >                org     $-1                 // alter last byte of Name just above to set
1245+ 6A04 BC          >                db      {b $} | END_BIT     // msb as name end
1245+ 6A05             >
1245+ 6A05 FA 69       >                dw      last_NFA            // Link to previous definition Name
1245+ 6A07             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 6A07 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1245+ 6A07             >                else
1245+ 6A07 09 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1245+ 6A09             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 6A09             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 6A09             >
1245+ 6A09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 6A09 E1                           pop     hl
1247+ 6A0A 29                           add     hl, hl
1248+ 6A0B 21 00 00                     ld      hl, 0
1249+ 6A0E 30 01                        jr      nc, ZLess_Skip
1250+ 6A10 2B                               dec     hl
1251+ 6A11              ZLess_Skip:
1252+ 6A11                              psh1
1252+ 6A11 E5          >                push    hl
1252+ 6A12 DD E9       >                jp      (ix)
1253+ 6A14
1254+ 6A14              //  ______________________________________________________________________
1255+ 6A14              //
1256+ 6A14              // 0>           n -- f
1257+ 6A14              // true (non zero) if n is less than zero, false (0) elsewere
1258+ 6A14                              New_Def ZGREATER, "0>", is_code, is_normal
1258+ 6A14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1258+ 6A14             >
1258+ 6A14             >                // dummy db directives used to calculate length of namec
1258+ 6A14 30 3E       >                db      "0>"
1258+ 6A16             >len_NFA         defl    $ - temp_NFA
1258+ 6A16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1258+ 6A14             >
1258+ 6A14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1258+ 6A15 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1258+ 6A17             >                org     $-1                 // alter last byte of Name just above to set
1258+ 6A16 BE          >                db      {b $} | END_BIT     // msb as name end
1258+ 6A17             >
1258+ 6A17 02 6A       >                dw      last_NFA            // Link to previous definition Name
1258+ 6A19             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1258+ 6A19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1258+ 6A19             >                else
1258+ 6A19 1B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1258+ 6A1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1258+ 6A1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1258+ 6A1B             >
1258+ 6A1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1259+ 6A1B E1                           pop     hl
1260+ 6A1C 7D                           ld      a, l
1261+ 6A1D B4                           or      h
1262+ 6A1E 29                           add     hl, hl
1263+ 6A1F 21 00 00                     ld      hl, FALSE_FLAG
1264+ 6A22 38 04                        jr      c, ZGreater_Skip
1265+ 6A24 A7                               and     a
1266+ 6A25 28 01                            jr      z, ZGreater_Skip
1267+ 6A27 2B                                   dec     hl
1268+ 6A28              ZGreater_Skip:
1269+ 6A28                              psh1
1269+ 6A28 E5          >                push    hl
1269+ 6A29 DD E9       >                jp      (ix)
1270+ 6A2B
1271+ 6A2B              //  ______________________________________________________________________
1272+ 6A2B              //
1273+ 6A2B              // +            n1 n2 -- n3
1274+ 6A2B              // returns the unsigned sum of two top values
1275+ 6A2B                              New_Def PLUS, "+", is_code, is_normal
1275+ 6A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1275+ 6A2B             >
1275+ 6A2B             >                // dummy db directives used to calculate length of namec
1275+ 6A2B 2B          >                db      "+"
1275+ 6A2C             >len_NFA         defl    $ - temp_NFA
1275+ 6A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1275+ 6A2B             >
1275+ 6A2B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1275+ 6A2C 2B          >                db      "+"               // name string in 7-bit ascii, but
1275+ 6A2D             >                org     $-1                 // alter last byte of Name just above to set
1275+ 6A2C AB          >                db      {b $} | END_BIT     // msb as name end
1275+ 6A2D             >
1275+ 6A2D 14 6A       >                dw      last_NFA            // Link to previous definition Name
1275+ 6A2F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1275+ 6A2F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1275+ 6A2F             >                else
1275+ 6A2F 31 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1275+ 6A31             >                endif           ; ok        // for other definitions it "points" the correct handler
1275+ 6A31             >                // Use of "; ok" to suppress "warning[fwdref]"
1275+ 6A31             >
1275+ 6A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1276+ 6A31 E1                           pop     hl
1277+ 6A32 D1                           pop     de
1278+ 6A33 19                           add     hl, de
1279+ 6A34
1280+ 6A34                              psh1
1280+ 6A34 E5          >                push    hl
1280+ 6A35 DD E9       >                jp      (ix)
1281+ 6A37
1282+ 6A37
1283+ 6A37              //  ______________________________________________________________________
1284+ 6A37              //
1285+ 6A37              // d+           d1 d2 -- d3
1286+ 6A37              // returns the unsigned sum of two top double-numbers
1287+ 6A37              //      d2  d1
1288+ 6A37              //      h l h l
1289+ 6A37              // SP   LHEDLHED
1290+ 6A37              // SP  +01234567
1291+ 6A37                              New_Def DPLUS, "D+", is_code, is_normal
1291+ 6A37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1291+ 6A37             >
1291+ 6A37             >                // dummy db directives used to calculate length of namec
1291+ 6A37 44 2B       >                db      "D+"
1291+ 6A39             >len_NFA         defl    $ - temp_NFA
1291+ 6A39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1291+ 6A37             >
1291+ 6A37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1291+ 6A38 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1291+ 6A3A             >                org     $-1                 // alter last byte of Name just above to set
1291+ 6A39 AB          >                db      {b $} | END_BIT     // msb as name end
1291+ 6A3A             >
1291+ 6A3A 2B 6A       >                dw      last_NFA            // Link to previous definition Name
1291+ 6A3C             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1291+ 6A3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1291+ 6A3C             >                else
1291+ 6A3C 3E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1291+ 6A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1291+ 6A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1291+ 6A3E             >
1291+ 6A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1292+ 6A3E
1293+ 6A3E D9                           exx
1294+ 6A3F C1                           pop     bc                  // bc := d2.H
1295+ 6A40 D1                           pop     de                  // hl := d2.L
1296+ 6A41 E1                           pop     hl                  // d1.H
1297+ 6A42 E3                           ex      (sp), hl            // d1.L
1298+ 6A43 19                           add     hl, de              // hl := d2.L + d1.L
1299+ 6A44 E3                           ex      (sp), hl            // d1.H
1300+ 6A45 ED 4A                        adc     hl, bc              // d1.H + d2.H
1301+ 6A47 E5                           push    hl
1302+ 6A48 D9                           exx
1303+ 6A49                              next
1303+ 6A49 DD E9       >                jp      (ix)
1304+ 6A4B
1305+ 6A4B              //  ______________________________________________________________________
1306+ 6A4B              //
1307+ 6A4B              // 1+           n1 -- n2
1308+ 6A4B              // increment by 1 top of stack
1309+ 6A4B                              New_Def ONE_PLUS, "1+", is_code, is_normal
1309+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ 6A4B             >
1309+ 6A4B             >                // dummy db directives used to calculate length of namec
1309+ 6A4B 31 2B       >                db      "1+"
1309+ 6A4D             >len_NFA         defl    $ - temp_NFA
1309+ 6A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ 6A4B             >
1309+ 6A4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ 6A4C 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1309+ 6A4E             >                org     $-1                 // alter last byte of Name just above to set
1309+ 6A4D AB          >                db      {b $} | END_BIT     // msb as name end
1309+ 6A4E             >
1309+ 6A4E 37 6A       >                dw      last_NFA            // Link to previous definition Name
1309+ 6A50             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 6A50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1309+ 6A50             >                else
1309+ 6A50 52 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1309+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 6A52             >
1309+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 6A52 E1                           pop     hl
1311+ 6A53 23                           inc     hl
1312+ 6A54
1313+ 6A54                              psh1
1313+ 6A54 E5          >                push    hl
1313+ 6A55 DD E9       >                jp      (ix)
1314+ 6A57
1315+ 6A57              //  ______________________________________________________________________
1316+ 6A57              //
1317+ 6A57              // 1-           n1 -- n2
1318+ 6A57              // decrement by 1 top of stack
1319+ 6A57                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1319+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ 6A57             >
1319+ 6A57             >                // dummy db directives used to calculate length of namec
1319+ 6A57 31 2D       >                db      "1-"
1319+ 6A59             >len_NFA         defl    $ - temp_NFA
1319+ 6A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ 6A57             >
1319+ 6A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ 6A58 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1319+ 6A5A             >                org     $-1                 // alter last byte of Name just above to set
1319+ 6A59 AD          >                db      {b $} | END_BIT     // msb as name end
1319+ 6A5A             >
1319+ 6A5A 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1319+ 6A5C             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 6A5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1319+ 6A5C             >                else
1319+ 6A5C 5E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1319+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 6A5E             >
1319+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 6A5E E1                           pop     hl
1321+ 6A5F 2B                           dec     hl
1322+ 6A60
1323+ 6A60                              psh1
1323+ 6A60 E5          >                push    hl
1323+ 6A61 DD E9       >                jp      (ix)
1324+ 6A63
1325+ 6A63              //  ______________________________________________________________________
1326+ 6A63              //
1327+ 6A63              // 2+           n1 -- n2
1328+ 6A63              // increment by 2 top of stack
1329+ 6A63                              New_Def TWO_PLUS, "2+", is_code, is_normal
1329+ 6A63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1329+ 6A63             >
1329+ 6A63             >                // dummy db directives used to calculate length of namec
1329+ 6A63 32 2B       >                db      "2+"
1329+ 6A65             >len_NFA         defl    $ - temp_NFA
1329+ 6A65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1329+ 6A63             >
1329+ 6A63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1329+ 6A64 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1329+ 6A66             >                org     $-1                 // alter last byte of Name just above to set
1329+ 6A65 AB          >                db      {b $} | END_BIT     // msb as name end
1329+ 6A66             >
1329+ 6A66 57 6A       >                dw      last_NFA            // Link to previous definition Name
1329+ 6A68             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1329+ 6A68 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1329+ 6A68             >                else
1329+ 6A68 6A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1329+ 6A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1329+ 6A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1329+ 6A6A             >
1329+ 6A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1330+ 6A6A              Two_Plus:
1331+ 6A6A E1                           pop     hl
1332+ 6A6B 23                           inc     hl
1333+ 6A6C 23                           inc     hl
1334+ 6A6D
1335+ 6A6D                              psh1
1335+ 6A6D E5          >                push    hl
1335+ 6A6E DD E9       >                jp      (ix)
1336+ 6A70
1337+ 6A70              //  ______________________________________________________________________
1338+ 6A70              //
1339+ 6A70              // cell+        a1 -- a2
1340+ 6A70              // increment by 2 top of stack
1341+ 6A70                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1341+ 6A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 6A70             >
1341+ 6A70             >                // dummy db directives used to calculate length of namec
1341+ 6A70 43 45 4C 4C >                db      "CELL+"
1341+ 6A74 2B          >
1341+ 6A75             >len_NFA         defl    $ - temp_NFA
1341+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 6A70             >
1341+ 6A70 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 6A71 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1341+ 6A75 2B          >
1341+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1341+ 6A75 AB          >                db      {b $} | END_BIT     // msb as name end
1341+ 6A76             >
1341+ 6A76 63 6A       >                dw      last_NFA            // Link to previous definition Name
1341+ 6A78             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 6A78 6A 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1341+ 6A7A             >                else
1341+ 6A7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1341+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 6A7A             >
1341+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 6A7A
1343+ 6A7A              //  ______________________________________________________________________
1344+ 6A7A              //
1345+ 6A7A              // align        a1 -- a2
1346+ 6A7A              // align memory : not used
1347+ 6A7A              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1348+ 6A7A              //            next
1349+ 6A7A
1350+ 6A7A              //  ______________________________________________________________________
1351+ 6A7A              //
1352+ 6A7A              // cell-        a1 -- a2
1353+ 6A7A              // decrement by 2 top of stack
1354+ 6A7A                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1354+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1354+ 6A7A             >
1354+ 6A7A             >                // dummy db directives used to calculate length of namec
1354+ 6A7A 43 45 4C 4C >                db      "CELL-"
1354+ 6A7E 2D          >
1354+ 6A7F             >len_NFA         defl    $ - temp_NFA
1354+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1354+ 6A7A             >
1354+ 6A7A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1354+ 6A7B 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1354+ 6A7F 2D          >
1354+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1354+ 6A7F AD          >                db      {b $} | END_BIT     // msb as name end
1354+ 6A80             >
1354+ 6A80 70 6A       >                dw      last_NFA            // Link to previous definition Name
1354+ 6A82             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1354+ 6A82 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1354+ 6A82             >                else
1354+ 6A82 84 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1354+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1354+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1354+ 6A84             >
1354+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1355+ 6A84              CellMinus:
1356+ 6A84 E1                           pop     hl
1357+ 6A85 2B                           dec     hl
1358+ 6A86 2B                           dec     hl
1359+ 6A87 E5                           push    hl
1360+ 6A88                              next
1360+ 6A88 DD E9       >                jp      (ix)
1361+ 6A8A
1362+ 6A8A              //  ______________________________________________________________________
1363+ 6A8A              //
1364+ 6A8A              // 2-           a1 -- a2
1365+ 6A8A              // decrement by 2 top of stack
1366+ 6A8A                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1366+ 6A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1366+ 6A8A             >
1366+ 6A8A             >                // dummy db directives used to calculate length of namec
1366+ 6A8A 32 2D       >                db      "2-"
1366+ 6A8C             >len_NFA         defl    $ - temp_NFA
1366+ 6A8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1366+ 6A8A             >
1366+ 6A8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1366+ 6A8B 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1366+ 6A8D             >                org     $-1                 // alter last byte of Name just above to set
1366+ 6A8C AD          >                db      {b $} | END_BIT     // msb as name end
1366+ 6A8D             >
1366+ 6A8D 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1366+ 6A8F             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1366+ 6A8F 84 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1366+ 6A91             >                else
1366+ 6A91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1366+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
1366+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
1366+ 6A91             >
1366+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1367+ 6A91
1368+ 6A91              //  ______________________________________________________________________
1369+ 6A91              //
1370+ 6A91              // negate        n1 -- n2
1371+ 6A91              // change the sign of number
1372+ 6A91                              New_Def MINUS, "NEGATE", is_code, is_normal
1372+ 6A91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1372+ 6A91             >
1372+ 6A91             >                // dummy db directives used to calculate length of namec
1372+ 6A91 4E 45 47 41 >                db      "NEGATE"
1372+ 6A95 54 45       >
1372+ 6A97             >len_NFA         defl    $ - temp_NFA
1372+ 6A97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1372+ 6A91             >
1372+ 6A91 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1372+ 6A92 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1372+ 6A96 54 45       >
1372+ 6A98             >                org     $-1                 // alter last byte of Name just above to set
1372+ 6A97 C5          >                db      {b $} | END_BIT     // msb as name end
1372+ 6A98             >
1372+ 6A98 8A 6A       >                dw      last_NFA            // Link to previous definition Name
1372+ 6A9A             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1372+ 6A9A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1372+ 6A9A             >                else
1372+ 6A9A 9C 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1372+ 6A9C             >                endif           ; ok        // for other definitions it "points" the correct handler
1372+ 6A9C             >                // Use of "; ok" to suppress "warning[fwdref]"
1372+ 6A9C             >
1372+ 6A9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1373+ 6A9C 21 00 00                     ld      hl, 0               // subtract from 0
1374+ 6A9F D1                           pop     de
1375+ 6AA0 B7                           or      a
1376+ 6AA1 ED 52                        sbc     hl, de
1377+ 6AA3
1378+ 6AA3                              psh1
1378+ 6AA3 E5          >                push    hl
1378+ 6AA4 DD E9       >                jp      (ix)
1379+ 6AA6
1380+ 6AA6              //  ______________________________________________________________________
1381+ 6AA6              //
1382+ 6AA6              // dnegate      d1 -- d2
1383+ 6AA6              // change the sign of a double number
1384+ 6AA6                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1384+ 6AA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1384+ 6AA6             >
1384+ 6AA6             >                // dummy db directives used to calculate length of namec
1384+ 6AA6 44 4E 45 47 >                db      "DNEGATE"
1384+ 6AAA 41 54 45    >
1384+ 6AAD             >len_NFA         defl    $ - temp_NFA
1384+ 6AAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1384+ 6AA6             >
1384+ 6AA6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1384+ 6AA7 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1384+ 6AAB 41 54 45    >
1384+ 6AAE             >                org     $-1                 // alter last byte of Name just above to set
1384+ 6AAD C5          >                db      {b $} | END_BIT     // msb as name end
1384+ 6AAE             >
1384+ 6AAE 91 6A       >                dw      last_NFA            // Link to previous definition Name
1384+ 6AB0             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1384+ 6AB0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1384+ 6AB0             >                else
1384+ 6AB0 B2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1384+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
1384+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
1384+ 6AB2             >
1384+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1385+ 6AB2 D9                           exx
1386+ 6AB3 C1                           pop     bc                  // d1.H
1387+ 6AB4 D1                           pop     de                  // d1.L
1388+ 6AB5 AF                           xor     a
1389+ 6AB6 67                           ld      h, a
1390+ 6AB7 6F                           ld      l, a
1391+ 6AB8 ED 52                        sbc     hl, de              // subtact from zero
1392+ 6ABA E5                           push    hl                  // > d2-L
1393+ 6ABB 67                           ld      h, a
1394+ 6ABC 6F                           ld      l, a
1395+ 6ABD ED 42                        sbc     hl, bc              // subtract from zero with carry
1396+ 6ABF                                                          // > d2-H
1397+ 6ABF E5                           push    hl
1398+ 6AC0 D9                           exx
1399+ 6AC1                              next
1399+ 6AC1 DD E9       >                jp      (ix)
1400+ 6AC3
1401+ 6AC3              //  ______________________________________________________________________
1402+ 6AC3              //
1403+ 6AC3              // over         n1 n2 -- n1 n2 n1
1404+ 6AC3              // copy the second value of stack and put it on top.
1405+ 6AC3                              New_Def OVER, "OVER", is_code, is_normal
1405+ 6AC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1405+ 6AC3             >
1405+ 6AC3             >                // dummy db directives used to calculate length of namec
1405+ 6AC3 4F 56 45 52 >                db      "OVER"
1405+ 6AC7             >len_NFA         defl    $ - temp_NFA
1405+ 6AC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1405+ 6AC3             >
1405+ 6AC3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1405+ 6AC4 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1405+ 6AC8             >                org     $-1                 // alter last byte of Name just above to set
1405+ 6AC7 D2          >                db      {b $} | END_BIT     // msb as name end
1405+ 6AC8             >
1405+ 6AC8 A6 6A       >                dw      last_NFA            // Link to previous definition Name
1405+ 6ACA             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1405+ 6ACA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1405+ 6ACA             >                else
1405+ 6ACA CC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1405+ 6ACC             >                endif           ; ok        // for other definitions it "points" the correct handler
1405+ 6ACC             >                // Use of "; ok" to suppress "warning[fwdref]"
1405+ 6ACC             >
1405+ 6ACC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1406+ 6ACC D1                           pop     de                  //   n2
1407+ 6ACD E1                           pop     hl                  // < n1
1408+ 6ACE E5                           push    hl                  // > n1
1409+ 6ACF D5                           push    de                  // > n2
1410+ 6AD0 E5                           push    hl                  // > n1
1411+ 6AD1                              next
1411+ 6AD1 DD E9       >                jp      (ix)
1412+ 6AD3
1413+ 6AD3              //  ______________________________________________________________________
1414+ 6AD3              //
1415+ 6AD3              // drop         n1 --
1416+ 6AD3              // drops the top of stack
1417+ 6AD3                              New_Def DROP, "DROP", is_code, is_normal
1417+ 6AD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ 6AD3             >
1417+ 6AD3             >                // dummy db directives used to calculate length of namec
1417+ 6AD3 44 52 4F 50 >                db      "DROP"
1417+ 6AD7             >len_NFA         defl    $ - temp_NFA
1417+ 6AD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ 6AD3             >
1417+ 6AD3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ 6AD4 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1417+ 6AD8             >                org     $-1                 // alter last byte of Name just above to set
1417+ 6AD7 D0          >                db      {b $} | END_BIT     // msb as name end
1417+ 6AD8             >
1417+ 6AD8 C3 6A       >                dw      last_NFA            // Link to previous definition Name
1417+ 6ADA             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6ADA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1417+ 6ADA             >                else
1417+ 6ADA DC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1417+ 6ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6ADC             >
1417+ 6ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6ADC E1                           pop     hl                  // < n1 and discard previous TOS
1419+ 6ADD                              next
1419+ 6ADD DD E9       >                jp      (ix)
1420+ 6ADF
1421+ 6ADF              //  ______________________________________________________________________
1422+ 6ADF              //
1423+ 6ADF              // nip          n1 n2 -- n2
1424+ 6ADF              // drops the second elemento on the stack
1425+ 6ADF                              New_Def NIP, "NIP", is_code, is_normal
1425+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1425+ 6ADF             >
1425+ 6ADF             >                // dummy db directives used to calculate length of namec
1425+ 6ADF 4E 49 50    >                db      "NIP"
1425+ 6AE2             >len_NFA         defl    $ - temp_NFA
1425+ 6AE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1425+ 6ADF             >
1425+ 6ADF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1425+ 6AE0 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1425+ 6AE3             >                org     $-1                 // alter last byte of Name just above to set
1425+ 6AE2 D0          >                db      {b $} | END_BIT     // msb as name end
1425+ 6AE3             >
1425+ 6AE3 D3 6A       >                dw      last_NFA            // Link to previous definition Name
1425+ 6AE5             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1425+ 6AE5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1425+ 6AE5             >                else
1425+ 6AE5 E7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1425+ 6AE7             >                endif           ; ok        // for other definitions it "points" the correct handler
1425+ 6AE7             >                // Use of "; ok" to suppress "warning[fwdref]"
1425+ 6AE7             >
1425+ 6AE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1426+ 6AE7
1427+ 6AE7 E1                           pop     hl                  // < n1 discarded
1428+ 6AE8 E3                           ex      (sp), hl
1429+ 6AE9                              next
1429+ 6AE9 DD E9       >                jp      (ix)
1430+ 6AEB
1431+ 6AEB              //  ______________________________________________________________________
1432+ 6AEB              //
1433+ 6AEB              // tuck         n1 n2 -- n2 n1 n2
1434+ 6AEB              // copy the top element after the second.
1435+ 6AEB                              New_Def TUCK, "TUCK", is_code, is_normal
1435+ 6AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1435+ 6AEB             >
1435+ 6AEB             >                // dummy db directives used to calculate length of namec
1435+ 6AEB 54 55 43 4B >                db      "TUCK"
1435+ 6AEF             >len_NFA         defl    $ - temp_NFA
1435+ 6AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1435+ 6AEB             >
1435+ 6AEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1435+ 6AEC 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1435+ 6AF0             >                org     $-1                 // alter last byte of Name just above to set
1435+ 6AEF CB          >                db      {b $} | END_BIT     // msb as name end
1435+ 6AF0             >
1435+ 6AF0 DF 6A       >                dw      last_NFA            // Link to previous definition Name
1435+ 6AF2             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1435+ 6AF2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1435+ 6AF2             >                else
1435+ 6AF2 F4 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1435+ 6AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1435+ 6AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1435+ 6AF4             >
1435+ 6AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1436+ 6AF4 E1                           pop     hl
1437+ 6AF5 D1                           pop     de                  // < n1
1438+ 6AF6 E5                           push    hl                  // > n2  and TOS
1439+ 6AF7 D5                           push    de                  // > n1
1440+ 6AF8 E5                           push    hl
1441+ 6AF9                              next
1441+ 6AF9 DD E9       >                jp      (ix)
1442+ 6AFB
1443+ 6AFB              //  ______________________________________________________________________
1444+ 6AFB              //
1445+ 6AFB              // swap         n1 n2 -- n2 n1
1446+ 6AFB              // swaps the two values on top of stack
1447+ 6AFB                              New_Def SWAP, "SWAP", is_code, is_normal
1447+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ 6AFB             >
1447+ 6AFB             >                // dummy db directives used to calculate length of namec
1447+ 6AFB 53 57 41 50 >                db      "SWAP"
1447+ 6AFF             >len_NFA         defl    $ - temp_NFA
1447+ 6AFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ 6AFB             >
1447+ 6AFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ 6AFC 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1447+ 6B00             >                org     $-1                 // alter last byte of Name just above to set
1447+ 6AFF D0          >                db      {b $} | END_BIT     // msb as name end
1447+ 6B00             >
1447+ 6B00 EB 6A       >                dw      last_NFA            // Link to previous definition Name
1447+ 6B02             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 6B02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1447+ 6B02             >                else
1447+ 6B02 04 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1447+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 6B04             >
1447+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 6B04 E1                           pop     hl                  // < n1
1449+ 6B05 E3                           ex      (sp),hl             // > n2
1450+ 6B06 E5                           push    hl                  // copy n1 to TOS
1451+ 6B07                              next
1451+ 6B07 DD E9       >                jp      (ix)
1452+ 6B09
1453+ 6B09              //  ______________________________________________________________________
1454+ 6B09              //
1455+ 6B09              // dup         n -- n n
1456+ 6B09              // duplicates the top value of stack
1457+ 6B09                              New_Def DUP, "DUP", is_code, is_normal
1457+ 6B09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ 6B09             >
1457+ 6B09             >                // dummy db directives used to calculate length of namec
1457+ 6B09 44 55 50    >                db      "DUP"
1457+ 6B0C             >len_NFA         defl    $ - temp_NFA
1457+ 6B0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ 6B09             >
1457+ 6B09 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ 6B0A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1457+ 6B0D             >                org     $-1                 // alter last byte of Name just above to set
1457+ 6B0C D0          >                db      {b $} | END_BIT     // msb as name end
1457+ 6B0D             >
1457+ 6B0D FB 6A       >                dw      last_NFA            // Link to previous definition Name
1457+ 6B0F             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 6B0F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1457+ 6B0F             >                else
1457+ 6B0F 11 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1457+ 6B11             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 6B11             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 6B11             >
1457+ 6B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 6B11 E1                           pop     hl
1459+ 6B12 E5                           push    hl                  // > n duplicate TOS
1460+ 6B13 E5                           push    hl
1461+ 6B14                              next
1461+ 6B14 DD E9       >                jp      (ix)
1462+ 6B16
1463+ 6B16              //  ______________________________________________________________________
1464+ 6B16              //
1465+ 6B16              // rot         n1 n2 n3 -- n2 n3 n1
1466+ 6B16              // Rotates the 3 top values of stack by picking the 3rd in access-order
1467+ 6B16              // and putting it on top. The other two are shifted down one place.
1468+ 6B16                              New_Def ROT, "ROT", is_code, is_normal
1468+ 6B16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1468+ 6B16             >
1468+ 6B16             >                // dummy db directives used to calculate length of namec
1468+ 6B16 52 4F 54    >                db      "ROT"
1468+ 6B19             >len_NFA         defl    $ - temp_NFA
1468+ 6B19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1468+ 6B16             >
1468+ 6B16 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1468+ 6B17 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1468+ 6B1A             >                org     $-1                 // alter last byte of Name just above to set
1468+ 6B19 D4          >                db      {b $} | END_BIT     // msb as name end
1468+ 6B1A             >
1468+ 6B1A 09 6B       >                dw      last_NFA            // Link to previous definition Name
1468+ 6B1C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1468+ 6B1C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1468+ 6B1C             >                else
1468+ 6B1C 1E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1468+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1468+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1468+ 6B1E             >
1468+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1469+ 6B1E D1                           pop     de                  // < n3
1470+ 6B1F E1                           pop     hl                  // < n2
1471+ 6B20 E3                           ex      (sp),hl             // > n2 < n1
1472+ 6B21 D5                           push    de                  // > n3
1473+ 6B22 E5                           push    hl                  // copy n1 to TOS
1474+ 6B23                              next
1474+ 6B23 DD E9       >                jp      (ix)
1475+ 6B25
1476+ 6B25              //  ______________________________________________________________________
1477+ 6B25              //
1478+ 6B25              // -rot         n1 n2 n3 -- n3 n1 n2
1479+ 6B25              // Rotates the 3 top values of stack by picking the 1st in access-order
1480+ 6B25              // and putting back to 3rd place. The other two are shifted down one place.
1481+ 6B25                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1481+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6B25             >
1481+ 6B25             >                // dummy db directives used to calculate length of namec
1481+ 6B25 2D 52 4F 54 >                db      "-ROT"
1481+ 6B29             >len_NFA         defl    $ - temp_NFA
1481+ 6B29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6B25             >
1481+ 6B25 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6B26 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1481+ 6B2A             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6B29 D4          >                db      {b $} | END_BIT     // msb as name end
1481+ 6B2A             >
1481+ 6B2A 16 6B       >                dw      last_NFA            // Link to previous definition Name
1481+ 6B2C             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6B2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1481+ 6B2C             >                else
1481+ 6B2C 2E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1481+ 6B2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6B2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6B2E             >
1481+ 6B2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6B2E E1                           pop     hl                  // < n3
1483+ 6B2F D1                           pop     de                  // < n2
1484+ 6B30 E3                           ex      (sp),hl             // > n3 < n1
1485+ 6B31 E5                           push    hl                  // > n1
1486+ 6B32 D5                           push    de                  // copy n3 to TOS
1487+ 6B33                              next
1487+ 6B33 DD E9       >                jp      (ix)
1488+ 6B35
1489+ 6B35              //  ______________________________________________________________________
1490+ 6B35              //
1491+ 6B35              // pick        n1 -- nx
1492+ 6B35              // picks the nth element from TOS
1493+ 6B35                              New_Def PICK, "PICK", is_code, is_normal
1493+ 6B35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ 6B35             >
1493+ 6B35             >                // dummy db directives used to calculate length of namec
1493+ 6B35 50 49 43 4B >                db      "PICK"
1493+ 6B39             >len_NFA         defl    $ - temp_NFA
1493+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ 6B35             >
1493+ 6B35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ 6B36 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1493+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1493+ 6B39 CB          >                db      {b $} | END_BIT     // msb as name end
1493+ 6B3A             >
1493+ 6B3A 25 6B       >                dw      last_NFA            // Link to previous definition Name
1493+ 6B3C             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 6B3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1493+ 6B3C             >                else
1493+ 6B3C 3E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1493+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 6B3E             >
1493+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 6B3E E1                           pop     hl                  // take TOS as index
1495+ 6B3F 29                           add     hl, hl              // as cells
1496+ 6B40 39                           add     hl, sp              // from Stack Pointer
1497+ 6B41 7E                           ld      a, (hl)             // replace TOS
1498+ 6B42 23                           inc     hl
1499+ 6B43 66                           ld      h, (hl)
1500+ 6B44 6F                           ld      l, a
1501+ 6B45
1502+ 6B45                              psh1
1502+ 6B45 E5          >                push    hl
1502+ 6B46 DD E9       >                jp      (ix)
1503+ 6B48
1504+ 6B48
1505+ 6B48              //  ______________________________________________________________________
1506+ 6B48              //
1507+ 6B48              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1508+ 6B48              // picks the nth element from TOS
1509+ 6B48              //              New_Def ROLL, "ROLL", is_code, is_normal
1510+ 6B48              //              exx                     // we need all registers free
1511+ 6B48              //              pop     hl              // number of cells to roll
1512+ 6B48              //              ld      a, h
1513+ 6B48              //              or       l
1514+ 6B48              //              jr      z, Roll_Zero
1515+ 6B48              //                  add     hl, hl              // number of bytes to move
1516+ 6B48              //                  ld      b, h
1517+ 6B48              //                  ld      c, l
1518+ 6B48              //                  add     hl, sp          // address of n1
1519+ 6B48              //                  ld      a, (hl)         // take n1 into a and a,
1520+ 6B48              //                  inc     hl
1521+ 6B48              //                  ex      af, af'
1522+ 6B48              //                  ld      a, (hl)         // take n1 into a and a,
1523+ 6B48              //                  ld      d, h
1524+ 6B48              //                  ld      e, l
1525+ 6B48              //                  dec     hl
1526+ 6B48              //                  dec     hl
1527+ 6B48              //                  lddr
1528+ 6B48              //                  ex      de, hl
1529+ 6B48              //                  ld      (hl), a
1530+ 6B48              //                  dec     hl
1531+ 6B48              //                  ex      af, af'
1532+ 6B48              //                  ld      (hl), a
1533+ 6B48              //Roll_Zero:
1534+ 6B48              //              exx
1535+ 6B48              //              next
1536+ 6B48
1537+ 6B48
1538+ 6B48              //  ______________________________________________________________________
1539+ 6B48              //
1540+ 6B48              // 2over        d1 d2 -- d1 d2 d1
1541+ 6B48              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1542+ 6B48              // copy the second double of stack and put on top.
1543+ 6B48              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1544+ 6B48              //
1545+ 6B48              //              ld      hl, 7
1546+ 6B48              //              add     hl, sp
1547+ 6B48              //              ld      d, (hl)
1548+ 6B48              //              dec     hl
1549+ 6B48              //              ld      e, (hl)             // d1-L
1550+ 6B48              //              push    de
1551+ 6B48              //              dec     hl
1552+ 6B48              //              ld      d, (hl)
1553+ 6B48              //              dec     hl
1554+ 6B48              //              ld      e, (hl)             // d1-H
1555+ 6B48              //              push    de
1556+ 6B48              //              next
1557+ 6B48
1558+ 6B48              //  ______________________________________________________________________
1559+ 6B48              //
1560+ 6B48              // 2drop        d --
1561+ 6B48              //              n1 n2 --
1562+ 6B48              // drops the top double from stack
1563+ 6B48                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1563+ 6B48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ 6B48             >
1563+ 6B48             >                // dummy db directives used to calculate length of namec
1563+ 6B48 32 44 52 4F >                db      "2DROP"
1563+ 6B4C 50          >
1563+ 6B4D             >len_NFA         defl    $ - temp_NFA
1563+ 6B4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ 6B48             >
1563+ 6B48 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ 6B49 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1563+ 6B4D 50          >
1563+ 6B4E             >                org     $-1                 // alter last byte of Name just above to set
1563+ 6B4D D0          >                db      {b $} | END_BIT     // msb as name end
1563+ 6B4E             >
1563+ 6B4E 35 6B       >                dw      last_NFA            // Link to previous definition Name
1563+ 6B50             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 6B50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1563+ 6B50             >                else
1563+ 6B50 52 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1563+ 6B52             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 6B52             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 6B52             >
1563+ 6B52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 6B52 E1                           pop     hl
1565+ 6B53 E1                           pop     hl
1566+ 6B54                              next
1566+ 6B54 DD E9       >                jp      (ix)
1567+ 6B56
1568+ 6B56              //  ______________________________________________________________________
1569+ 6B56              //
1570+ 6B56              // 2nip         d1 d2 -- d2
1571+ 6B56              //              n1 n2 n3 n4 -- n3 n4
1572+ 6B56              // drops the second double on the stack
1573+ 6B56              //              New_Def TWO_NIP, 4, "2nip"
1574+ 6B56              //              ...
1575+ 6B56
1576+ 6B56              //  ______________________________________________________________________
1577+ 6B56              //
1578+ 6B56              // 2tuck         d1 d2 -- d2 d1 d2
1579+ 6B56              // copy the top element after the second.
1580+ 6B56              //              New_Def TWO_TUCK, 5, "2tuck"
1581+ 6B56              //              ...
1582+ 6B56
1583+ 6B56              //  ______________________________________________________________________
1584+ 6B56              //
1585+ 6B56              // 2swap         d1 d2 -- d2 d1
1586+ 6B56              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1587+ 6B56              // swaps the two doubles on top of stack
1588+ 6B56                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1588+ 6B56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1588+ 6B56             >
1588+ 6B56             >                // dummy db directives used to calculate length of namec
1588+ 6B56 32 53 57 41 >                db      "2SWAP"
1588+ 6B5A 50          >
1588+ 6B5B             >len_NFA         defl    $ - temp_NFA
1588+ 6B5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1588+ 6B56             >
1588+ 6B56 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1588+ 6B57 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1588+ 6B5B 50          >
1588+ 6B5C             >                org     $-1                 // alter last byte of Name just above to set
1588+ 6B5B D0          >                db      {b $} | END_BIT     // msb as name end
1588+ 6B5C             >
1588+ 6B5C 48 6B       >                dw      last_NFA            // Link to previous definition Name
1588+ 6B5E             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1588+ 6B5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1588+ 6B5E             >                else
1588+ 6B5E 60 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1588+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
1588+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
1588+ 6B60             >
1588+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1589+ 6B60 F1                           pop     af                  //   d2-H
1590+ 6B61 E1                           pop     hl                  // < d2-L
1591+ 6B62 D1                           pop     de                  // < d1-H
1592+ 6B63 E3                           ex      (sp), hl            // < d1-L > d2-L
1593+ 6B64 F5                           push    af                  // > d2-H
1594+ 6B65 E5                           push    hl                  // > d1-L
1595+ 6B66 D5                           push    de
1596+ 6B67
1597+ 6B67                              next
1597+ 6B67 DD E9       >                jp      (ix)
1598+ 6B69
1599+ 6B69              //  ______________________________________________________________________
1600+ 6B69              //
1601+ 6B69              // 2dup         d -- d d
1602+ 6B69              //              n1 n2 -- n1 n2 n1 n2
1603+ 6B69              // duplicates the top double of stack
1604+ 6B69                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1604+ 6B69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1604+ 6B69             >
1604+ 6B69             >                // dummy db directives used to calculate length of namec
1604+ 6B69 32 44 55 50 >                db      "2DUP"
1604+ 6B6D             >len_NFA         defl    $ - temp_NFA
1604+ 6B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1604+ 6B69             >
1604+ 6B69 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1604+ 6B6A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1604+ 6B6E             >                org     $-1                 // alter last byte of Name just above to set
1604+ 6B6D D0          >                db      {b $} | END_BIT     // msb as name end
1604+ 6B6E             >
1604+ 6B6E 56 6B       >                dw      last_NFA            // Link to previous definition Name
1604+ 6B70             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1604+ 6B70 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1604+ 6B70             >                else
1604+ 6B70 72 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1604+ 6B72             >                endif           ; ok        // for other definitions it "points" the correct handler
1604+ 6B72             >                // Use of "; ok" to suppress "warning[fwdref]"
1604+ 6B72             >
1604+ 6B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1605+ 6B72 E1                           pop     hl                  // < d-H
1606+ 6B73 D1                           pop     de                  // < d-L
1607+ 6B74 D5                           push    de                  // < d-L
1608+ 6B75 E5                           push    hl                  // > d-H
1609+ 6B76 D5                           push    de                  // > d-L
1610+ 6B77 E5                           push    hl                  // > d-H
1611+ 6B78                              next
1611+ 6B78 DD E9       >                jp      (ix)
1612+ 6B7A
1613+ 6B7A              //  ______________________________________________________________________
1614+ 6B7A              //
1615+ 6B7A              // 2rot         d1 d2 d3 -- d2 d3 d1
1616+ 6B7A              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1617+ 6B7A              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1618+ 6B7A              // and putting it on top. The other two are shifted down one place.
1619+ 6B7A              //              New_Def TWO?ROT, 4, "2rot"
1620+ 6B7A              //              ...
1621+ 6B7A              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1622+ 6B7A              //
1623+ 6B7A              //      d3  |d2  |d1  |
1624+ 6B7A              //      h l |h l |h l |
1625+ 6B7A              // SP   LHED|LHED|LHED|
1626+ 6B7A              // SP  +0123|4567|89ab|
1627+ 6B7A              //              ld      hl, $000B
1628+ 6B7A              //              add     hl, sp
1629+ 6B7A              //              ld      d, (hl)
1630+ 6B7A              //              dec     hl
1631+ 6B7A              //              ld      e, (hl)
1632+ 6B7A              //              dec     hl
1633+ 6B7A              //              push    de
1634+ 6B7A              //              ld      d, (hl)
1635+ 6B7A              //              dec     hl
1636+ 6B7A              //              ld      e, (hl)
1637+ 6B7A              //              dec     hl
1638+ 6B7A              //              push    de
1639+ 6B7A
1640+ 6B7A              //      d1  |d3  |d2  |d1  |
1641+ 6B7A              //      h l |h l |h l |h l |
1642+ 6B7A              // SP   LHED|LHED|LHED|LHED|
1643+ 6B7A              // SP       +0123|4567|89ab|
1644+ 6B7A
1645+ 6B7A              //              ld      d, h
1646+ 6B7A              //              ld      e, l
1647+ 6B7A              //              inc     de
1648+ 6B7A              //              inc     de
1649+ 6B7A              //              inc     de
1650+ 6B7A              //              inc     de
1651+ 6B7A              //              push    bc
1652+ 6B7A              //              ld      bc, $000C
1653+ 6B7A              //              lddr
1654+ 6B7A              //              pop     bc
1655+ 6B7A              //              pop     de
1656+ 6B7A              //              pop     de
1657+ 6B7A              //
1658+ 6B7A              //              next
1659+ 6B7A
1660+ 6B7A
1661+ 6B7A              //  ______________________________________________________________________
1662+ 6B7A              //
1663+ 6B7A              // +!           n a --
1664+ 6B7A              // Sums to the content of address a the number n.
1665+ 6B7A              // It is the same of  a @ n + a !
1666+ 6B7A                              New_Def PLUSSTORE, "+!", is_code, is_normal
1666+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1666+ 6B7A             >
1666+ 6B7A             >                // dummy db directives used to calculate length of namec
1666+ 6B7A 2B 21       >                db      "+!"
1666+ 6B7C             >len_NFA         defl    $ - temp_NFA
1666+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1666+ 6B7A             >
1666+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1666+ 6B7B 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1666+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1666+ 6B7C A1          >                db      {b $} | END_BIT     // msb as name end
1666+ 6B7D             >
1666+ 6B7D 69 6B       >                dw      last_NFA            // Link to previous definition Name
1666+ 6B7F             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1666+ 6B7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1666+ 6B7F             >                else
1666+ 6B7F 81 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1666+ 6B81             >                endif           ; ok        // for other definitions it "points" the correct handler
1666+ 6B81             >                // Use of "; ok" to suppress "warning[fwdref]"
1666+ 6B81             >
1666+ 6B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1667+ 6B81 E1                           pop     hl                  // hl is the address
1668+ 6B82 D1                           pop     de                  // de is the number
1669+ 6B83 7E                           ld      a, (hl)
1670+ 6B84 83                           add     e
1671+ 6B85 77                           ld      (hl), a
1672+ 6B86 23                           inc     hl
1673+ 6B87 7E                           ld      a, (hl)
1674+ 6B88 8A                           adc     d
1675+ 6B89 77                           ld      (hl), a
1676+ 6B8A
1677+ 6B8A                              next
1677+ 6B8A DD E9       >                jp      (ix)
1678+ 6B8C
1679+ 6B8C              //  ______________________________________________________________________
1680+ 6B8C              //
1681+ 6B8C              // toggle       a n --
1682+ 6B8C              // Complements (xor) the byte at addrress  a  with the model n.
1683+ 6B8C                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1683+ 6B8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ 6B8C             >
1683+ 6B8C             >                // dummy db directives used to calculate length of namec
1683+ 6B8C 54 4F 47 47 >                db      "TOGGLE"
1683+ 6B90 4C 45       >
1683+ 6B92             >len_NFA         defl    $ - temp_NFA
1683+ 6B92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ 6B8C             >
1683+ 6B8C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ 6B8D 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1683+ 6B91 4C 45       >
1683+ 6B93             >                org     $-1                 // alter last byte of Name just above to set
1683+ 6B92 C5          >                db      {b $} | END_BIT     // msb as name end
1683+ 6B93             >
1683+ 6B93 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1683+ 6B95             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6B95 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1683+ 6B95             >                else
1683+ 6B95 97 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1683+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6B97             >
1683+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6B97 D1                           pop     de
1685+ 6B98 E1                           pop     hl
1686+ 6B99 7E                           ld      a, (hl)
1687+ 6B9A AB                           xor     e
1688+ 6B9B 77                           ld      (hl), a
1689+ 6B9C
1690+ 6B9C                              next
1690+ 6B9C DD E9       >                jp      (ix)
1691+ 6B9E
1692+ 6B9E              //  ______________________________________________________________________
1693+ 6B9E              //
1694+ 6B9E              // @            a -- n
1695+ 6B9E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1696+ 6B9E                              New_Def FETCH, "@", is_code, is_normal
1696+ 6B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6B9E             >
1696+ 6B9E             >                // dummy db directives used to calculate length of namec
1696+ 6B9E 40          >                db      "@"
1696+ 6B9F             >len_NFA         defl    $ - temp_NFA
1696+ 6B9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6B9E             >
1696+ 6B9E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6B9F 40          >                db      "@"               // name string in 7-bit ascii, but
1696+ 6BA0             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6B9F C0          >                db      {b $} | END_BIT     // msb as name end
1696+ 6BA0             >
1696+ 6BA0 8C 6B       >                dw      last_NFA            // Link to previous definition Name
1696+ 6BA2             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6BA2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1696+ 6BA2             >                else
1696+ 6BA2 A4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1696+ 6BA4             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6BA4             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6BA4             >
1696+ 6BA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6BA4 E1                           pop     hl
1698+ 6BA5 5E                           ld      e, (hl)             // low-byte
1699+ 6BA6 23                           inc     hl
1700+ 6BA7 56                           ld      d, (hl)             // high-byte
1701+ 6BA8 D5                           push    de
1702+ 6BA9                              next
1702+ 6BA9 DD E9       >                jp      (ix)
1703+ 6BAB
1704+ 6BAB              //  ______________________________________________________________________
1705+ 6BAB              //
1706+ 6BAB              // !            n a --
1707+ 6BAB              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1708+ 6BAB                              New_Def STORE, "!", is_code, is_normal
1708+ 6BAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1708+ 6BAB             >
1708+ 6BAB             >                // dummy db directives used to calculate length of namec
1708+ 6BAB 21          >                db      "!"
1708+ 6BAC             >len_NFA         defl    $ - temp_NFA
1708+ 6BAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1708+ 6BAB             >
1708+ 6BAB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1708+ 6BAC 21          >                db      "!"               // name string in 7-bit ascii, but
1708+ 6BAD             >                org     $-1                 // alter last byte of Name just above to set
1708+ 6BAC A1          >                db      {b $} | END_BIT     // msb as name end
1708+ 6BAD             >
1708+ 6BAD 9E 6B       >                dw      last_NFA            // Link to previous definition Name
1708+ 6BAF             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1708+ 6BAF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1708+ 6BAF             >                else
1708+ 6BAF B1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1708+ 6BB1             >                endif           ; ok        // for other definitions it "points" the correct handler
1708+ 6BB1             >                // Use of "; ok" to suppress "warning[fwdref]"
1708+ 6BB1             >
1708+ 6BB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1709+ 6BB1 E1                           pop     hl                  // address
1710+ 6BB2 D1                           pop     de                  // < n
1711+ 6BB3 73                           ld      (hl), e             // low-byte
1712+ 6BB4 23                           inc     hl
1713+ 6BB5 72                           ld      (hl), d             // high-byte
1714+ 6BB6
1715+ 6BB6                              next
1715+ 6BB6 DD E9       >                jp      (ix)
1716+ 6BB8
1717+ 6BB8              //  ______________________________________________________________________
1718+ 6BB8              //
1719+ 6BB8              // c@           a -- c
1720+ 6BB8              // fetch a character n from address a
1721+ 6BB8                              New_Def CFETCH, "C@", is_code, is_normal
1721+ 6BB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1721+ 6BB8             >
1721+ 6BB8             >                // dummy db directives used to calculate length of namec
1721+ 6BB8 43 40       >                db      "C@"
1721+ 6BBA             >len_NFA         defl    $ - temp_NFA
1721+ 6BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1721+ 6BB8             >
1721+ 6BB8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1721+ 6BB9 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1721+ 6BBB             >                org     $-1                 // alter last byte of Name just above to set
1721+ 6BBA C0          >                db      {b $} | END_BIT     // msb as name end
1721+ 6BBB             >
1721+ 6BBB AB 6B       >                dw      last_NFA            // Link to previous definition Name
1721+ 6BBD             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1721+ 6BBD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1721+ 6BBD             >                else
1721+ 6BBD BF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1721+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
1721+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
1721+ 6BBF             >
1721+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1722+ 6BBF E1                           pop     hl
1723+ 6BC0 6E                           ld      l, (hl)             // low-byte
1724+ 6BC1 26 00                        ld      h, 0
1725+ 6BC3
1726+ 6BC3                              psh1
1726+ 6BC3 E5          >                push    hl
1726+ 6BC4 DD E9       >                jp      (ix)
1727+ 6BC6
1728+ 6BC6              //  ______________________________________________________________________
1729+ 6BC6              //
1730+ 6BC6              // c!           c a --
1731+ 6BC6              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1732+ 6BC6                              New_Def CSTORE, "C!", is_code, is_normal
1732+ 6BC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1732+ 6BC6             >
1732+ 6BC6             >                // dummy db directives used to calculate length of namec
1732+ 6BC6 43 21       >                db      "C!"
1732+ 6BC8             >len_NFA         defl    $ - temp_NFA
1732+ 6BC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1732+ 6BC6             >
1732+ 6BC6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1732+ 6BC7 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1732+ 6BC9             >                org     $-1                 // alter last byte of Name just above to set
1732+ 6BC8 A1          >                db      {b $} | END_BIT     // msb as name end
1732+ 6BC9             >
1732+ 6BC9 B8 6B       >                dw      last_NFA            // Link to previous definition Name
1732+ 6BCB             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1732+ 6BCB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1732+ 6BCB             >                else
1732+ 6BCB CD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1732+ 6BCD             >                endif           ; ok        // for other definitions it "points" the correct handler
1732+ 6BCD             >                // Use of "; ok" to suppress "warning[fwdref]"
1732+ 6BCD             >
1732+ 6BCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1733+ 6BCD E1                           pop     hl                  // < address
1734+ 6BCE D1                           pop     de
1735+ 6BCF 73                           ld      (hl), e             // low-byte
1736+ 6BD0
1737+ 6BD0                              next
1737+ 6BD0 DD E9       >                jp      (ix)
1738+ 6BD2
1739+ 6BD2              //  ______________________________________________________________________
1740+ 6BD2              //
1741+ 6BD2              // 2@           a -- d
1742+ 6BD2              // fetch a 32 bits number d from address a and leaves it on top of the
1743+ 6BD2              // stack as two single numbers, high part as top of the stack.
1744+ 6BD2              // A double number is normally kept in CPU registers as HLDE.
1745+ 6BD2              // On stack a double number is treated as two single numbers
1746+ 6BD2              // where BC is on the top of the stack and HL is the second from top,
1747+ 6BD2              // so the sign of the number can be checked on top of stack
1748+ 6BD2              // and in the stack memory it appears as LHED.
1749+ 6BD2                              New_Def TWO_FETCH, "2@", is_code, is_normal
1749+ 6BD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1749+ 6BD2             >
1749+ 6BD2             >                // dummy db directives used to calculate length of namec
1749+ 6BD2 32 40       >                db      "2@"
1749+ 6BD4             >len_NFA         defl    $ - temp_NFA
1749+ 6BD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1749+ 6BD2             >
1749+ 6BD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1749+ 6BD3 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1749+ 6BD5             >                org     $-1                 // alter last byte of Name just above to set
1749+ 6BD4 C0          >                db      {b $} | END_BIT     // msb as name end
1749+ 6BD5             >
1749+ 6BD5 C6 6B       >                dw      last_NFA            // Link to previous definition Name
1749+ 6BD7             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1749+ 6BD7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1749+ 6BD7             >                else
1749+ 6BD7 D9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1749+ 6BD9             >                endif           ; ok        // for other definitions it "points" the correct handler
1749+ 6BD9             >                // Use of "; ok" to suppress "warning[fwdref]"
1749+ 6BD9             >
1749+ 6BD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1750+ 6BD9 E1                           pop     hl                  // address
1751+ 6BDA 5E                           ld      e, (hl)             // low-byte
1752+ 6BDB 23                           inc     hl
1753+ 6BDC 56                           ld      d, (hl)             // high-byte
1754+ 6BDD
1755+ 6BDD 23                           inc     hl
1756+ 6BDE 7E                           ld      a, (hl)             // low-byte
1757+ 6BDF 23                           inc     hl
1758+ 6BE0 66                           ld      h, (hl)             // high-byte
1759+ 6BE1 6F                           ld      l, a
1760+ 6BE2 E5                           push    hl
1761+ 6BE3 D5                           push    de
1762+ 6BE4                              next
1762+ 6BE4 DD E9       >                jp      (ix)
1763+ 6BE6
1764+ 6BE6              //  ______________________________________________________________________
1765+ 6BE6              //
1766+ 6BE6              // 2!           d a --
1767+ 6BE6              // stores a 32 bits number d from address a and leaves it on top of the
1768+ 6BE6              // stack as two single numbers, high part as top of the stack.
1769+ 6BE6              // A double number is normally kept in CPU registers as HLDE.
1770+ 6BE6              // On stack a double number is treated as two single numbers
1771+ 6BE6              // where BC is on the top of the stack and HL is the second from top,
1772+ 6BE6              // so the sign of the number can be checked on top of stack
1773+ 6BE6              // and in the stack memory it appears as LHED.
1774+ 6BE6                              New_Def TWO_STORE, "2!", is_code, is_normal
1774+ 6BE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1774+ 6BE6             >
1774+ 6BE6             >                // dummy db directives used to calculate length of namec
1774+ 6BE6 32 21       >                db      "2!"
1774+ 6BE8             >len_NFA         defl    $ - temp_NFA
1774+ 6BE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1774+ 6BE6             >
1774+ 6BE6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1774+ 6BE7 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1774+ 6BE9             >                org     $-1                 // alter last byte of Name just above to set
1774+ 6BE8 A1          >                db      {b $} | END_BIT     // msb as name end
1774+ 6BE9             >
1774+ 6BE9 D2 6B       >                dw      last_NFA            // Link to previous definition Name
1774+ 6BEB             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1774+ 6BEB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1774+ 6BEB             >                else
1774+ 6BEB ED 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1774+ 6BED             >                endif           ; ok        // for other definitions it "points" the correct handler
1774+ 6BED             >                // Use of "; ok" to suppress "warning[fwdref]"
1774+ 6BED             >
1774+ 6BED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1775+ 6BED D9                           exx
1776+ 6BEE E1                           pop     hl                  // address
1777+ 6BEF C1                           pop     bc                  // < high-part
1778+ 6BF0 D1                           pop     de                  // < low-part > Instruction Pointer
1779+ 6BF1 71                           ld      (hl), c
1780+ 6BF2 23                           inc     hl
1781+ 6BF3 70                           ld      (hl), b
1782+ 6BF4 23                           inc     hl
1783+ 6BF5 73                           ld      (hl), e
1784+ 6BF6 23                           inc     hl
1785+ 6BF7 72                           ld      (hl), d
1786+ 6BF8 D9                           exx
1787+ 6BF9                              next
1787+ 6BF9 DD E9       >                jp      (ix)
1788+ 6BFB
1789+ 6BFB              //  ______________________________________________________________________
1790+ 6BFB              //
1791+ 6BFB              // p@           a -- c
1792+ 6BFB              // Read one byte from port a and leave the result on top of stack
1793+ 6BFB                              New_Def PFETCH, "P@", is_code, is_normal
1793+ 6BFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6BFB             >
1793+ 6BFB             >                // dummy db directives used to calculate length of namec
1793+ 6BFB 50 40       >                db      "P@"
1793+ 6BFD             >len_NFA         defl    $ - temp_NFA
1793+ 6BFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6BFB             >
1793+ 6BFB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6BFC 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1793+ 6BFE             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6BFD C0          >                db      {b $} | END_BIT     // msb as name end
1793+ 6BFE             >
1793+ 6BFE E6 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6C00             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6C00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1793+ 6C00             >                else
1793+ 6C00 02 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1793+ 6C02             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6C02             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6C02             >
1793+ 6C02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6C02 D9                           exx
1795+ 6C03 C1                           pop     bc
1796+ 6C04 26 00                        ld      h, 0
1797+ 6C06 ED 68                        in      l, (c)
1798+ 6C08 E5                           push    hl
1799+ 6C09 D9                           exx
1800+ 6C0A                              next
1800+ 6C0A DD E9       >                jp      (ix)
1801+ 6C0C
1802+ 6C0C              //  ______________________________________________________________________
1803+ 6C0C              //
1804+ 6C0C              // p!           c a --
1805+ 6C0C              // Send one byte (top of stack) to port a
1806+ 6C0C                              New_Def PSTORE, "P!", is_code, is_normal
1806+ 6C0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1806+ 6C0C             >
1806+ 6C0C             >                // dummy db directives used to calculate length of namec
1806+ 6C0C 50 21       >                db      "P!"
1806+ 6C0E             >len_NFA         defl    $ - temp_NFA
1806+ 6C0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1806+ 6C0C             >
1806+ 6C0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1806+ 6C0D 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1806+ 6C0F             >                org     $-1                 // alter last byte of Name just above to set
1806+ 6C0E A1          >                db      {b $} | END_BIT     // msb as name end
1806+ 6C0F             >
1806+ 6C0F FB 6B       >                dw      last_NFA            // Link to previous definition Name
1806+ 6C11             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1806+ 6C11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1806+ 6C11             >                else
1806+ 6C11 13 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1806+ 6C13             >                endif           ; ok        // for other definitions it "points" the correct handler
1806+ 6C13             >                // Use of "; ok" to suppress "warning[fwdref]"
1806+ 6C13             >
1806+ 6C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1807+ 6C13 D9                           exx
1808+ 6C14 C1                           pop     bc
1809+ 6C15 E1                           pop     hl                  // < c
1810+ 6C16 ED 69                        out     (c), l              // low-byte
1811+ 6C18 D9                           exx
1812+ 6C19                              next
1812+ 6C19 DD E9       >                jp      (ix)
1813+ 6C1B
1814+ 6C1B
1815+ 6C1B              //  ______________________________________________________________________
1816+ 6C1B              //
1817+ 6C1B              // 2*           n1 -- n2
1818+ 6C1B              // doubles the number at top of stack
1819+ 6C1B                              New_Def TWO_MUL, "2*", is_code, is_normal
1819+ 6C1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1819+ 6C1B             >
1819+ 6C1B             >                // dummy db directives used to calculate length of namec
1819+ 6C1B 32 2A       >                db      "2*"
1819+ 6C1D             >len_NFA         defl    $ - temp_NFA
1819+ 6C1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1819+ 6C1B             >
1819+ 6C1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1819+ 6C1C 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1819+ 6C1E             >                org     $-1                 // alter last byte of Name just above to set
1819+ 6C1D AA          >                db      {b $} | END_BIT     // msb as name end
1819+ 6C1E             >
1819+ 6C1E 0C 6C       >                dw      last_NFA            // Link to previous definition Name
1819+ 6C20             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1819+ 6C20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1819+ 6C20             >                else
1819+ 6C20 22 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1819+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
1819+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
1819+ 6C22             >
1819+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1820+ 6C22              Two_Mul_Ptr:
1821+ 6C22 E1                           pop     hl
1822+ 6C23 29                           add     hl, hl
1823+ 6C24
1824+ 6C24                              psh1
1824+ 6C24 E5          >                push    hl
1824+ 6C25 DD E9       >                jp      (ix)
1825+ 6C27
1826+ 6C27              //  ______________________________________________________________________
1827+ 6C27              //
1828+ 6C27              // 2/           n1 -- n2
1829+ 6C27              // halves the top of stack, sign is unchanged
1830+ 6C27                              New_Def TWO_DIV, "2/", is_code, is_normal
1830+ 6C27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1830+ 6C27             >
1830+ 6C27             >                // dummy db directives used to calculate length of namec
1830+ 6C27 32 2F       >                db      "2/"
1830+ 6C29             >len_NFA         defl    $ - temp_NFA
1830+ 6C29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1830+ 6C27             >
1830+ 6C27 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1830+ 6C28 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1830+ 6C2A             >                org     $-1                 // alter last byte of Name just above to set
1830+ 6C29 AF          >                db      {b $} | END_BIT     // msb as name end
1830+ 6C2A             >
1830+ 6C2A 1B 6C       >                dw      last_NFA            // Link to previous definition Name
1830+ 6C2C             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1830+ 6C2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1830+ 6C2C             >                else
1830+ 6C2C 2E 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1830+ 6C2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1830+ 6C2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1830+ 6C2E             >
1830+ 6C2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1831+ 6C2E E1                           pop     hl
1832+ 6C2F CB 2C                        sra     h
1833+ 6C31 CB 1D                        rr      l
1834+ 6C33
1835+ 6C33                              psh1
1835+ 6C33 E5          >                push    hl
1835+ 6C34 DD E9       >                jp      (ix)
1836+ 6C36
1837+ 6C36              //  ______________________________________________________________________
1838+ 6C36              //
1839+ 6C36              // lshift       n1 u -- n2
1840+ 6C36              // bit left shift of u bits
1841+ 6C36                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1841+ 6C36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1841+ 6C36             >
1841+ 6C36             >                // dummy db directives used to calculate length of namec
1841+ 6C36 4C 53 48 49 >                db      "LSHIFT"
1841+ 6C3A 46 54       >
1841+ 6C3C             >len_NFA         defl    $ - temp_NFA
1841+ 6C3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1841+ 6C36             >
1841+ 6C36 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1841+ 6C37 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1841+ 6C3B 46 54       >
1841+ 6C3D             >                org     $-1                 // alter last byte of Name just above to set
1841+ 6C3C D4          >                db      {b $} | END_BIT     // msb as name end
1841+ 6C3D             >
1841+ 6C3D 27 6C       >                dw      last_NFA            // Link to previous definition Name
1841+ 6C3F             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1841+ 6C3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1841+ 6C3F             >                else
1841+ 6C3F 41 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1841+ 6C41             >                endif           ; ok        // for other definitions it "points" the correct handler
1841+ 6C41             >                // Use of "; ok" to suppress "warning[fwdref]"
1841+ 6C41             >
1841+ 6C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1842+ 6C41 D1                           pop     de
1843+ 6C42
1844+ 6C42 E1                           pop     hl
1845+ 6C43 7B                           ld      a, e
1846+ 6C44 B7                           or      a
1847+ 6C45 28 04                        jr      z, Lshift_Zero
1848+ 6C47              Lshift_Loop:
1849+ 6C47 29                                   add     hl, hl
1850+ 6C48 3D                                   dec     a
1851+ 6C49 20 FC                            jr      nz, Lshift_Loop
1852+ 6C4B              Lshift_Zero:
1853+ 6C4B
1854+ 6C4B
1855+ 6C4B                              psh1
1855+ 6C4B E5          >                push    hl
1855+ 6C4C DD E9       >                jp      (ix)
1856+ 6C4E
1857+ 6C4E              //  ______________________________________________________________________
1858+ 6C4E              //
1859+ 6C4E              // rshift       n1 u -- n2
1860+ 6C4E              // bit right shift of u bits
1861+ 6C4E                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1861+ 6C4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1861+ 6C4E             >
1861+ 6C4E             >                // dummy db directives used to calculate length of namec
1861+ 6C4E 52 53 48 49 >                db      "RSHIFT"
1861+ 6C52 46 54       >
1861+ 6C54             >len_NFA         defl    $ - temp_NFA
1861+ 6C54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1861+ 6C4E             >
1861+ 6C4E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1861+ 6C4F 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1861+ 6C53 46 54       >
1861+ 6C55             >                org     $-1                 // alter last byte of Name just above to set
1861+ 6C54 D4          >                db      {b $} | END_BIT     // msb as name end
1861+ 6C55             >
1861+ 6C55 36 6C       >                dw      last_NFA            // Link to previous definition Name
1861+ 6C57             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1861+ 6C57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1861+ 6C57             >                else
1861+ 6C57 59 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1861+ 6C59             >                endif           ; ok        // for other definitions it "points" the correct handler
1861+ 6C59             >                // Use of "; ok" to suppress "warning[fwdref]"
1861+ 6C59             >
1861+ 6C59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1862+ 6C59 D1                           pop     de
1863+ 6C5A
1864+ 6C5A E1                           pop     hl
1865+ 6C5B 7B                           ld      a, e
1866+ 6C5C B7                           or      a
1867+ 6C5D 28 07                        jr      z, Rshift_Zero
1868+ 6C5F              Rshift_Loop:
1869+ 6C5F CB 3C                                srl     h
1870+ 6C61 CB 1D                                rr      l
1871+ 6C63 3D                                   dec     a
1872+ 6C64 20 F9                            jr      nz, Rshift_Loop
1873+ 6C66              Rshift_Zero:
1874+ 6C66
1875+ 6C66
1876+ 6C66                              psh1
1876+ 6C66 E5          >                push    hl
1876+ 6C67 DD E9       >                jp      (ix)
1877+ 6C69
1878+ 6C69              //  ______________________________________________________________________
1879+ 6C69              //
1880+ 6C69              // cells        n1 -- n2
1881+ 6C69              // decrement by 2 top of stack
1882+ 6C69                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1882+ 6C69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1882+ 6C69             >
1882+ 6C69             >                // dummy db directives used to calculate length of namec
1882+ 6C69 43 45 4C 4C >                db      "CELLS"
1882+ 6C6D 53          >
1882+ 6C6E             >len_NFA         defl    $ - temp_NFA
1882+ 6C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1882+ 6C69             >
1882+ 6C69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1882+ 6C6A 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1882+ 6C6E 53          >
1882+ 6C6F             >                org     $-1                 // alter last byte of Name just above to set
1882+ 6C6E D3          >                db      {b $} | END_BIT     // msb as name end
1882+ 6C6F             >
1882+ 6C6F 4E 6C       >                dw      last_NFA            // Link to previous definition Name
1882+ 6C71             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1882+ 6C71 22 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1882+ 6C73             >                else
1882+ 6C73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1882+ 6C73             >                endif           ; ok        // for other definitions it "points" the correct handler
1882+ 6C73             >                // Use of "; ok" to suppress "warning[fwdref]"
1882+ 6C73             >
1882+ 6C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1883+ 6C73
1884+ 6C73
1885+ 6C73              //  ______________________________________________________________________
1886+ 6C73
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C73                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C73              //  ______________________________________________________________________
   2+ 6C73              //
   3+ 6C73              //  L1.asm
   4+ 6C73              //
   5+ 6C73              //  Level-1 definitions and derivate
   6+ 6C73              //  ______________________________________________________________________
   7+ 6C73
   8+ 6C73              //  ______________________________________________________________________
   9+ 6C73              //
  10+ 6C73              // :            -- cccc     ( compile time )
  11+ 6C73              //              i*x -- j*x  ( run time )
  12+ 6C73              // Colon Definition
  13+ 6C73                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C73             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C73             >
  13+ 6C73             >                // dummy db directives used to calculate length of namec
  13+ 6C73 3A          >                db      ":"
  13+ 6C74             >len_NFA         defl    $ - temp_NFA
  13+ 6C74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C73             >
  13+ 6C73 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C74 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C75             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C74 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C75             >
  13+ 6C75 69 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C77             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C77 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C79             >                else
  13+ 6C79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C79             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C79             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C79             >
  13+ 6C79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C79
  15+ 6C79 E0 70                        dw      QEXEC                   // ?exec
  16+ 6C7B 9B 70                        dw      STORE_CSP               // !csp
  17+ 6C7D 4A 6E A2 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C81 3D 6E AF 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C85 DA 76                        dw      CREATE                  // create  ( forward )
  20+ 6C87 8D 71                        dw      SMUDGE                  // dmudge
  21+ 6C89 78 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C8B E3 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C8D                                                              // ... immediate
  24+ 6C8D              Enter_Ptr:
  25+ 6C8D                              // via call coded in CFA
  26+ 6C8D                              ldhlrp
  26+ 6C8D 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C90 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C91 70                           ld      (hl), b
  29+ 6C92 2B                           dec     hl
  30+ 6C93 71                           ld      (hl), c
  31+ 6C94                              ldrphl
  31+ 6C94 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C97 13                           inc     de
  33+ 6C98 4B                           ld      c, e
  34+ 6C99 42                           ld      b, d
  35+ 6C9A                              next
  35+ 6C9A DD E9       >                jp      (ix)
  36+ 6C9C
  37+ 6C9C              //  ______________________________________________________________________
  38+ 6C9C              //
  39+ 6C9C              // ;            --
  40+ 6C9C              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C9C                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C9C             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C9C             >
  41+ 6C9C             >                // dummy db directives used to calculate length of namec
  41+ 6C9C 3B          >                db      ";"
  41+ 6C9D             >len_NFA         defl    $ - temp_NFA
  41+ 6C9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C9C             >
  41+ 6C9C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C9D 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C9E             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C9D BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C9E             >
  41+ 6C9E 73 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CA0             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CA0 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CA2             >                else
  41+ 6CA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CA2             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CA2             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CA2             >
  41+ 6CA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CA2
  43+ 6CA2 0A 71                        dw      QCSP                    // ?csp
  44+ 6CA4 41 71 AA 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CA8 8D 71                        dw      SMUDGE                  // smudge
  46+ 6CAA 6A 71                        dw      SQUARED_OPEN            // [
  47+ 6CAC AA 69                        dw      EXIT                    // ; immediate
  48+ 6CAE
  49+ 6CAE              //  ______________________________________________________________________
  50+ 6CAE              //
  51+ 6CAE              // noop         --
  52+ 6CAE                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6CAE             >
  52+ 6CAE             >                // dummy db directives used to calculate length of namec
  52+ 6CAE 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CB2             >len_NFA         defl    $ - temp_NFA
  52+ 6CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6CAE             >
  52+ 6CAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6CAF 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CB3             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CB2 D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CB3             >
  52+ 6CB3 9C 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CB5             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CB5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CB5             >                else
  52+ 6CB5 B7 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CB7             >
  52+ 6CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CB7                              next
  53+ 6CB7 DD E9       >                jp      (ix)
  54+ 6CB9
  55+ 6CB9              //  ______________________________________________________________________
  56+ 6CB9              //
  57+ 6CB9              // constant     n -- cccc     ( compile time )
  58+ 6CB9              //              -- n          ( run time )
  59+ 6CB9              // Constant definition.
  60+ 6CB9                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CB9             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CB9             >
  60+ 6CB9             >                // dummy db directives used to calculate length of namec
  60+ 6CB9 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CBD 54 41 4E 54 >
  60+ 6CC1             >len_NFA         defl    $ - temp_NFA
  60+ 6CC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CB9             >
  60+ 6CB9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CBA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CBE 54 41 4E 54 >
  60+ 6CC2             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CC1 D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CC2             >
  60+ 6CC2 AE 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CC4             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CC4 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CC6             >                else
  60+ 6CC6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CC6             >
  60+ 6CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CC6
  62+ 6CC6 DA 76                        dw      CREATE                  // create
  63+ 6CC8 05 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CCA E3 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CCC              Constant_Ptr:
  66+ 6CCC
  67+ 6CCC 13                           inc     de
  68+ 6CCD EB                           ex      de, hl
  69+ 6CCE
  70+ 6CCE 5E                           ld      e, (hl)
  71+ 6CCF 23                           inc     hl
  72+ 6CD0 56                           ld      d, (hl)
  73+ 6CD1 D5                           push    de
  74+ 6CD2                              next
  74+ 6CD2 DD E9       >                jp      (ix)
  75+ 6CD4
  76+ 6CD4              //  ______________________________________________________________________
  77+ 6CD4              //
  78+ 6CD4              // variable     n -- cccc     ( compile time )
  79+ 6CD4              //              -- a          ( run time )
  80+ 6CD4              // Variable definition, n is the initial value.
  81+ 6CD4                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CD4             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CD4             >
  81+ 6CD4             >                // dummy db directives used to calculate length of namec
  81+ 6CD4 56 41 52 49 >                db      "VARIABLE"
  81+ 6CD8 41 42 4C 45 >
  81+ 6CDC             >len_NFA         defl    $ - temp_NFA
  81+ 6CDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CD4             >
  81+ 6CD4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CD5 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CD9 41 42 4C 45 >
  81+ 6CDD             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CDC C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CDD             >
  81+ 6CDD B9 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CDF             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CDF 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CE1             >                else
  81+ 6CE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CE1             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CE1             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CE1             >
  81+ 6CE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CE1
  83+ 6CE1 0A 6D                        dw      ZERO
  84+ 6CE3 C4 6C                        dw      CONSTANT                // constant
  85+ 6CE5 E3 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CE7              Variable_Ptr:
  87+ 6CE7
  88+ 6CE7 13                           inc     de
  89+ 6CE8 D5                           push    de                  // balance TOS before overwrite it
  90+ 6CE9
  91+ 6CE9                              next
  91+ 6CE9 DD E9       >                jp      (ix)
  92+ 6CEB
  93+ 6CEB              //  ______________________________________________________________________
  94+ 6CEB              //
  95+ 6CEB              // user         b -- cccc     ( compile time )
  96+ 6CEB              //              -- a          ( run time )
  97+ 6CEB              // User variable definition
  98+ 6CEB                              Colon_Def USER, "USER", is_normal
  98+ 6CEB             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CEB             >
  98+ 6CEB             >                // dummy db directives used to calculate length of namec
  98+ 6CEB 55 53 45 52 >                db      "USER"
  98+ 6CEF             >len_NFA         defl    $ - temp_NFA
  98+ 6CEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CEB             >
  98+ 6CEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CEC 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CF0             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CEF D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CF0             >
  98+ 6CF0 D4 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CF2             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CF2 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CF4             >                else
  98+ 6CF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CF4             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CF4             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CF4             >
  98+ 6CF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CF4
 100+ 6CF4 DA 76                        dw      CREATE                  // create
 101+ 6CF6 16 6F                        dw      CCOMMA                  // c,
 102+ 6CF8 E3 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CFA
 104+ 6CFA
 105+ 6CFA              User_Ptr:
 106+ 6CFA                              // via call coded in CFA
 107+ 6CFA 13                           inc     de
 108+ 6CFB EB                           ex      de, hl
 109+ 6CFC 5E                           ld      e, (hl)
 110+ 6CFD 16 00                        ld      d, 0
 111+ 6CFF 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6D02 19                           add     hl, de
 113+ 6D03
 114+ 6D03                              psh1
 114+ 6D03 E5          >                push    hl
 114+ 6D04 DD E9       >                jp      (ix)
 115+ 6D06
 116+ 6D06              //  ______________________________________________________________________
 117+ 6D06              //
 118+ 6D06                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D06             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D06             >
 118+ 6D06             >                // dummy db directives used to calculate length of namec
 118+ 6D06 30          >                db      "0"
 118+ 6D07             >len_NFA         defl    $ - temp_NFA
 118+ 6D07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D06             >
 118+ 6D06 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D07 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D08             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D07 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D08             >
 118+ 6D08 EB 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D0A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D0A CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D0C             >                else
 118+ 6D0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D0C             >
 118+ 6D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D0C 00 00       >                dw      0
 119+ 6D0E                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D0E             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D0E             >
 119+ 6D0E             >                // dummy db directives used to calculate length of namec
 119+ 6D0E 31          >                db      "1"
 119+ 6D0F             >len_NFA         defl    $ - temp_NFA
 119+ 6D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D0E             >
 119+ 6D0E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D0F 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D10             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D0F B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D10             >
 119+ 6D10 06 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D12             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D12 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D14             >                else
 119+ 6D14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D14             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D14             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D14             >
 119+ 6D14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D14 01 00       >                dw      1
 120+ 6D16                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D16             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D16             >
 120+ 6D16             >                // dummy db directives used to calculate length of namec
 120+ 6D16 32          >                db      "2"
 120+ 6D17             >len_NFA         defl    $ - temp_NFA
 120+ 6D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D16             >
 120+ 6D16 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D17 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D18             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D17 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D18             >
 120+ 6D18 0E 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D1A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D1A CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D1C             >                else
 120+ 6D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D1C             >
 120+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D1C 02 00       >                dw      2
 121+ 6D1E                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D1E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D1E             >
 121+ 6D1E             >                // dummy db directives used to calculate length of namec
 121+ 6D1E 33          >                db      "3"
 121+ 6D1F             >len_NFA         defl    $ - temp_NFA
 121+ 6D1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D1E             >
 121+ 6D1E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D1F 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D20             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D1F B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D20             >
 121+ 6D20 16 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D22             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D22 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D24             >                else
 121+ 6D24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D24             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D24             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D24             >
 121+ 6D24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D24 03 00       >                dw      3
 122+ 6D26                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D26             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D26             >
 122+ 6D26             >                // dummy db directives used to calculate length of namec
 122+ 6D26 2D 31       >                db      "-1"
 122+ 6D28             >len_NFA         defl    $ - temp_NFA
 122+ 6D28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D26             >
 122+ 6D26 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D27 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D29             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D28 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D29             >
 122+ 6D29 1E 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D2B             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D2B CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D2D             >                else
 122+ 6D2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D2D             >
 122+ 6D2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D2D FF FF       >                dw      -1
 123+ 6D2F                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D2F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D2F             >
 123+ 6D2F             >                // dummy db directives used to calculate length of namec
 123+ 6D2F 42 4C       >                db      "BL"
 123+ 6D31             >len_NFA         defl    $ - temp_NFA
 123+ 6D31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D2F             >
 123+ 6D2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D30 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D32             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D31 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D32             >
 123+ 6D32 26 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D34             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D34 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D36             >                else
 123+ 6D36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D36             >
 123+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D36 20 00       >                dw      $20
 124+ 6D38                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D38             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D38             >
 124+ 6D38             >                // dummy db directives used to calculate length of namec
 124+ 6D38 43 2F 4C    >                db      "C/L"
 124+ 6D3B             >len_NFA         defl    $ - temp_NFA
 124+ 6D3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D38             >
 124+ 6D38 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D39 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D3C             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D3B CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D3C             >
 124+ 6D3C 2F 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D3E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D3E CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D40             >                else
 124+ 6D40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D40             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D40             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D40             >
 124+ 6D40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D40 40 00       >                dw      64
 125+ 6D42                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D42             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D42             >
 125+ 6D42             >                // dummy db directives used to calculate length of namec
 125+ 6D42 42 2F 42 55 >                db      "B/BUF"
 125+ 6D46 46          >
 125+ 6D47             >len_NFA         defl    $ - temp_NFA
 125+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D42             >
 125+ 6D42 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D43 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D47 46          >
 125+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D47 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D48             >
 125+ 6D48 38 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D4A             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D4A CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D4C             >                else
 125+ 6D4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D4C             >
 125+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D4C 00 02       >                dw      512
 126+ 6D4E                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D4E             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D4E             >
 126+ 6D4E             >                // dummy db directives used to calculate length of namec
 126+ 6D4E 42 2F 53 43 >                db      "B/SCR"
 126+ 6D52 52          >
 126+ 6D53             >len_NFA         defl    $ - temp_NFA
 126+ 6D53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D4E             >
 126+ 6D4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D4F 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D53 52          >
 126+ 6D54             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D53 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D54             >
 126+ 6D54 42 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D56             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D56 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D58             >                else
 126+ 6D58 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D58             >
 126+ 6D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D58 02 00       >                dw      2
 127+ 6D5A                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D5A             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D5A             >
 127+ 6D5A             >                // dummy db directives used to calculate length of namec
 127+ 6D5A 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D5E 52          >
 127+ 6D5F             >len_NFA         defl    $ - temp_NFA
 127+ 6D5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D5A             >
 127+ 6D5A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D5B 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D5F 52          >
 127+ 6D60             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D5F D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D60             >
 127+ 6D60 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D62             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D62 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D64             >                else
 127+ 6D64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D64             >
 127+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D64 10 00       >                dw      16
 128+ 6D66
 129+ 6D66              //  ______________________________________________________________________
 130+ 6D66              //
 131+ 6D66              // +origin         --
 132+ 6D66              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D66              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D66              //              dw      PLUS                    // +
 135+ 6D66              //              dw      EXIT                    // ;
 136+ 6D66                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D66             >
 136+ 6D66             >                // dummy db directives used to calculate length of namec
 136+ 6D66 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D6A 47 49 4E    >
 136+ 6D6D             >len_NFA         defl    $ - temp_NFA
 136+ 6D6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D66             >
 136+ 6D66 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D67 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D6B 47 49 4E    >
 136+ 6D6E             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D6D CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D6E             >
 136+ 6D6E 5A 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D70             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D70 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D70             >                else
 136+ 6D70 72 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D72             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D72             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D72             >
 136+ 6D72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D72 E1                           pop     hl
 138+ 6D73 11 66 63                     ld      de,  Cold_origin
 139+ 6D76 19                           add     hl, de
 140+ 6D77 E5                           push    hl
 141+ 6D78                              next
 141+ 6D78 DD E9       >                jp      (ix)
 142+ 6D7A
 143+ 6D7A
 144+ 6D7A              //  ______________________________________________________________________
 145+ 6D7A              //
 146+ 6D7A                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D7A             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D7A             >
 146+ 6D7A             >                // dummy db directives used to calculate length of namec
 146+ 6D7A 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D7E 54 29       >
 146+ 6D80             >len_NFA         defl    $ - temp_NFA
 146+ 6D80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D7A             >
 146+ 6D7A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D7B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D7F 54 29       >
 146+ 6D81             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D80 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D81             >
 146+ 6D81 66 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D83             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D83 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D85             >                else
 146+ 6D85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D85             >
 146+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D85 98 63       >                dw      Next_Ptr
 147+ 6D87
 148+ 6D87              //  ______________________________________________________________________
 149+ 6D87              //
 150+ 6D87
 151+ 6D87                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D87             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D87             >
 151+ 6D87             >                // dummy db directives used to calculate length of namec
 151+ 6D87 53 30       >                db      "S0"
 151+ 6D89             >len_NFA         defl    $ - temp_NFA
 151+ 6D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D87             >
 151+ 6D87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D88 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D8A             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D89 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D8A             >
 151+ 6D8A 7A 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D8C             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D8C FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D8E             >                else
 151+ 6D8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D8E             >
 151+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D8E 06          >                db      06
 152+ 6D8F                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D8F             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D8F             >
 152+ 6D8F             >                // dummy db directives used to calculate length of namec
 152+ 6D8F 52 30       >                db      "R0"
 152+ 6D91             >len_NFA         defl    $ - temp_NFA
 152+ 6D91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D8F             >
 152+ 6D8F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D90 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D92             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D91 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D92             >
 152+ 6D92 87 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D94             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D94 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D96             >                else
 152+ 6D96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D96             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D96             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D96             >
 152+ 6D96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D96 08          >                db      08
 153+ 6D97                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D97             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D97             >
 153+ 6D97             >                // dummy db directives used to calculate length of namec
 153+ 6D97 54 49 42    >                db      "TIB"
 153+ 6D9A             >len_NFA         defl    $ - temp_NFA
 153+ 6D9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D97             >
 153+ 6D97 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D98 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D9B             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D9A C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D9B             >
 153+ 6D9B 8F 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D9D             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D9D FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D9F             >                else
 153+ 6D9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D9F             >
 153+ 6D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D9F 0A          >                db      10
 154+ 6DA0                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6DA0             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6DA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6DA0             >
 154+ 6DA0             >                // dummy db directives used to calculate length of namec
 154+ 6DA0 57 49 44 54 >                db      "WIDTH"
 154+ 6DA4 48          >
 154+ 6DA5             >len_NFA         defl    $ - temp_NFA
 154+ 6DA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6DA0             >
 154+ 6DA0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6DA1 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6DA5 48          >
 154+ 6DA6             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6DA5 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6DA6             >
 154+ 6DA6 97 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DA8             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DA8 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DAA             >                else
 154+ 6DAA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DAA             >
 154+ 6DAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DAA 0C          >                db      12
 155+ 6DAB                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6DAB             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6DAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DAB             >
 155+ 6DAB             >                // dummy db directives used to calculate length of namec
 155+ 6DAB 57 41 52 4E >                db      "WARNING"
 155+ 6DAF 49 4E 47    >
 155+ 6DB2             >len_NFA         defl    $ - temp_NFA
 155+ 6DB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DAB             >
 155+ 6DAB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DAC 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6DB0 49 4E 47    >
 155+ 6DB3             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DB2 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DB3             >
 155+ 6DB3 A0 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DB5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DB5 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DB7             >                else
 155+ 6DB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DB7             >
 155+ 6DB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DB7 0E          >                db      14
 156+ 6DB8                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6DB8             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6DB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DB8             >
 156+ 6DB8             >                // dummy db directives used to calculate length of namec
 156+ 6DB8 46 45 4E 43 >                db      "FENCE"
 156+ 6DBC 45          >
 156+ 6DBD             >len_NFA         defl    $ - temp_NFA
 156+ 6DBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DB8             >
 156+ 6DB8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DB9 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6DBD 45          >
 156+ 6DBE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DBD C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DBE             >
 156+ 6DBE AB 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DC0             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DC0 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DC2             >                else
 156+ 6DC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DC2             >
 156+ 6DC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DC2 10          >                db      16
 157+ 6DC3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6DC3             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DC3             >
 157+ 6DC3             >                // dummy db directives used to calculate length of namec
 157+ 6DC3 44 50       >                db      "DP"
 157+ 6DC5             >len_NFA         defl    $ - temp_NFA
 157+ 6DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DC3             >
 157+ 6DC3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DC4 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6DC6             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DC5 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DC6             >
 157+ 6DC6 B8 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DC8             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DC8 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DCA             >                else
 157+ 6DCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DCA             >
 157+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DCA 12          >                db      18
 158+ 6DCB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6DCB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DCB             >
 158+ 6DCB             >                // dummy db directives used to calculate length of namec
 158+ 6DCB 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6DCF 4C 49 4E 4B >
 158+ 6DD3             >len_NFA         defl    $ - temp_NFA
 158+ 6DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DCB             >
 158+ 6DCB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DCC 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6DD0 4C 49 4E 4B >
 158+ 6DD4             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DD3 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DD4             >
 158+ 6DD4 C3 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DD6             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DD6 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DD8             >                else
 158+ 6DD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DD8             >
 158+ 6DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DD8 14          >                db      20
 159+ 6DD9                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DD9             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DD9             >
 159+ 6DD9             >                // dummy db directives used to calculate length of namec
 159+ 6DD9 46 49 52 53 >                db      "FIRST"
 159+ 6DDD 54          >
 159+ 6DDE             >len_NFA         defl    $ - temp_NFA
 159+ 6DDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DD9             >
 159+ 6DD9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DDA 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DDE 54          >
 159+ 6DDF             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DDE D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DDF             >
 159+ 6DDF CB 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DE1             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DE1 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DE3             >                else
 159+ 6DE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DE3             >
 159+ 6DE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DE3 16          >                db      22
 160+ 6DE4                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DE4             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DE4             >
 160+ 6DE4             >                // dummy db directives used to calculate length of namec
 160+ 6DE4 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DE8 54          >
 160+ 6DE9             >len_NFA         defl    $ - temp_NFA
 160+ 6DE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DE4             >
 160+ 6DE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DE5 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DE9 54          >
 160+ 6DEA             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DE9 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DEA             >
 160+ 6DEA D9 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DEC             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DEC FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DEE             >                else
 160+ 6DEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DEE             >
 160+ 6DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DEE 18          >                db      24
 161+ 6DEF                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DEF             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DEF             >
 161+ 6DEF             >                // dummy db directives used to calculate length of namec
 161+ 6DEF 45 58 50    >                db      "EXP"
 161+ 6DF2             >len_NFA         defl    $ - temp_NFA
 161+ 6DF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DEF             >
 161+ 6DEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DF0 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DF3             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DF2 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DF3             >
 161+ 6DF3 E4 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DF5             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DF5 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DF7             >                else
 161+ 6DF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DF7             >
 161+ 6DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DF7 1A          >                db      26
 162+ 6DF8                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DF8             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DF8             >
 162+ 6DF8             >                // dummy db directives used to calculate length of namec
 162+ 6DF8 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DFC 45          >
 162+ 6DFD             >len_NFA         defl    $ - temp_NFA
 162+ 6DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DF8             >
 162+ 6DF8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DF9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DFD 45          >
 162+ 6DFE             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DFD C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DFE             >
 162+ 6DFE EF 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E00             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E00 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E02             >                else
 162+ 6E02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E02             >
 162+ 6E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E02 1C          >                db      28
 163+ 6E03                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6E03             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6E03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E03             >
 163+ 6E03             >                // dummy db directives used to calculate length of namec
 163+ 6E03 42 4C 4B    >                db      "BLK"
 163+ 6E06             >len_NFA         defl    $ - temp_NFA
 163+ 6E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E03             >
 163+ 6E03 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E04 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6E07             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E06 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E07             >
 163+ 6E07 F8 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E09             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E09 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E0B             >                else
 163+ 6E0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E0B             >
 163+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E0B 1E          >                db      30
 164+ 6E0C                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6E0C             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6E0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E0C             >
 164+ 6E0C             >                // dummy db directives used to calculate length of namec
 164+ 6E0C 3E 49 4E    >                db      ">IN"
 164+ 6E0F             >len_NFA         defl    $ - temp_NFA
 164+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E0C             >
 164+ 6E0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E0D 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E0F CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E10             >
 164+ 6E10 03 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E12             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E12 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E14             >                else
 164+ 6E14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E14             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E14             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E14             >
 164+ 6E14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E14 20          >                db      32
 165+ 6E15                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6E15             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6E15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E15             >
 165+ 6E15             >                // dummy db directives used to calculate length of namec
 165+ 6E15 4F 55 54    >                db      "OUT"
 165+ 6E18             >len_NFA         defl    $ - temp_NFA
 165+ 6E18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E15             >
 165+ 6E15 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E16 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6E19             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E18 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E19             >
 165+ 6E19 0C 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E1B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E1B FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E1D             >                else
 165+ 6E1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E1D             >
 165+ 6E1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E1D 22          >                db      34
 166+ 6E1E                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6E1E             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6E1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E1E             >
 166+ 6E1E             >                // dummy db directives used to calculate length of namec
 166+ 6E1E 53 43 52    >                db      "SCR"
 166+ 6E21             >len_NFA         defl    $ - temp_NFA
 166+ 6E21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E1E             >
 166+ 6E1E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E1F 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6E22             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E21 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E22             >
 166+ 6E22 15 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E24             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E24 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E26             >                else
 166+ 6E26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E26             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E26             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E26             >
 166+ 6E26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E26 24          >                db      36
 167+ 6E27                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6E27             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6E27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E27             >
 167+ 6E27             >                // dummy db directives used to calculate length of namec
 167+ 6E27 4F 46 46 53 >                db      "OFFSET"
 167+ 6E2B 45 54       >
 167+ 6E2D             >len_NFA         defl    $ - temp_NFA
 167+ 6E2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E27             >
 167+ 6E27 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E28 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6E2C 45 54       >
 167+ 6E2E             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E2D D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E2E             >
 167+ 6E2E 1E 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E30             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E30 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E32             >                else
 167+ 6E32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E32             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E32             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E32             >
 167+ 6E32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E32 26          >                db      38
 168+ 6E33                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6E33             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6E33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E33             >
 168+ 6E33             >                // dummy db directives used to calculate length of namec
 168+ 6E33 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6E37 45 58 54    >
 168+ 6E3A             >len_NFA         defl    $ - temp_NFA
 168+ 6E3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E33             >
 168+ 6E33 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E34 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6E38 45 58 54    >
 168+ 6E3B             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E3A D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E3B             >
 168+ 6E3B 27 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E3D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E3D FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E3F             >                else
 168+ 6E3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E3F             >
 168+ 6E3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E3F 28          >                db      40
 169+ 6E40                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E40             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E40             >
 169+ 6E40             >                // dummy db directives used to calculate length of namec
 169+ 6E40 43 55 52 52 >                db      "CURRENT"
 169+ 6E44 45 4E 54    >
 169+ 6E47             >len_NFA         defl    $ - temp_NFA
 169+ 6E47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E40             >
 169+ 6E40 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E41 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E45 45 4E 54    >
 169+ 6E48             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E47 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E48             >
 169+ 6E48 33 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E4A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E4A FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E4C             >                else
 169+ 6E4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E4C             >
 169+ 6E4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E4C 2A          >                db      42
 170+ 6E4D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E4D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E4D             >
 170+ 6E4D             >                // dummy db directives used to calculate length of namec
 170+ 6E4D 53 54 41 54 >                db      "STATE"
 170+ 6E51 45          >
 170+ 6E52             >len_NFA         defl    $ - temp_NFA
 170+ 6E52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E4D             >
 170+ 6E4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E4E 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E52 45          >
 170+ 6E53             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E52 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E53             >
 170+ 6E53 40 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E55             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E55 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E57             >                else
 170+ 6E57 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E57             >
 170+ 6E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E57 2C          >                db      44
 171+ 6E58                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E58             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E58             >
 171+ 6E58             >                // dummy db directives used to calculate length of namec
 171+ 6E58 42 41 53 45 >                db      "BASE"
 171+ 6E5C             >len_NFA         defl    $ - temp_NFA
 171+ 6E5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E58             >
 171+ 6E58 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E59 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E5D             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E5C C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E5D             >
 171+ 6E5D 4D 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E5F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E5F FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E61             >                else
 171+ 6E61 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E61             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E61             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E61             >
 171+ 6E61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E61 2E          >                db      46
 172+ 6E62                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E62             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E62             >
 172+ 6E62             >                // dummy db directives used to calculate length of namec
 172+ 6E62 44 50 4C    >                db      "DPL"
 172+ 6E65             >len_NFA         defl    $ - temp_NFA
 172+ 6E65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E62             >
 172+ 6E62 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E63 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E66             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E65 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E66             >
 172+ 6E66 58 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E68             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E68 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E6A             >                else
 172+ 6E6A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E6A             >
 172+ 6E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E6A 30          >                db      48
 173+ 6E6B                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E6B             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E6B             >
 173+ 6E6B             >                // dummy db directives used to calculate length of namec
 173+ 6E6B 46 4C 44    >                db      "FLD"
 173+ 6E6E             >len_NFA         defl    $ - temp_NFA
 173+ 6E6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E6B             >
 173+ 6E6B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E6C 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E6F             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E6E C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E6F             >
 173+ 6E6F 62 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E71             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E71 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E73             >                else
 173+ 6E73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E73             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E73             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E73             >
 173+ 6E73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E73 32          >                db      50
 174+ 6E74                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E74             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E74             >
 174+ 6E74             >                // dummy db directives used to calculate length of namec
 174+ 6E74 43 53 50    >                db      "CSP"
 174+ 6E77             >len_NFA         defl    $ - temp_NFA
 174+ 6E77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E74             >
 174+ 6E74 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E75 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E78             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E77 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E78             >
 174+ 6E78 6B 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E7A             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E7A FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E7C             >                else
 174+ 6E7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E7C             >
 174+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E7C 34          >                db      52
 175+ 6E7D                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E7D             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E7D             >
 175+ 6E7D             >                // dummy db directives used to calculate length of namec
 175+ 6E7D 52 23       >                db      "R#"
 175+ 6E7F             >len_NFA         defl    $ - temp_NFA
 175+ 6E7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E7D             >
 175+ 6E7D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E7E 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E80             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E7F A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E80             >
 175+ 6E80 74 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E82             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E82 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E84             >                else
 175+ 6E84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E84             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E84             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E84             >
 175+ 6E84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E84 36          >                db      54
 176+ 6E85                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E85             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E85             >
 176+ 6E85             >                // dummy db directives used to calculate length of namec
 176+ 6E85 48 4C 44    >                db      "HLD"
 176+ 6E88             >len_NFA         defl    $ - temp_NFA
 176+ 6E88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E85             >
 176+ 6E85 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E86 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E89             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E88 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E89             >
 176+ 6E89 7D 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E8B             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E8B FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E8D             >                else
 176+ 6E8D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E8D             >
 176+ 6E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E8D 38          >                db      56
 177+ 6E8E                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E8E             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E8E             >
 177+ 6E8E             >                // dummy db directives used to calculate length of namec
 177+ 6E8E 55 53 45    >                db      "USE"
 177+ 6E91             >len_NFA         defl    $ - temp_NFA
 177+ 6E91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E8E             >
 177+ 6E8E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E8F 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E92             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E91 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E92             >
 177+ 6E92 85 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E94             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E94 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E96             >                else
 177+ 6E96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E96             >
 177+ 6E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E96 3A          >                db      58
 178+ 6E97                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E97             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E97             >
 178+ 6E97             >                // dummy db directives used to calculate length of namec
 178+ 6E97 50 52 45 56 >                db      "PREV"
 178+ 6E9B             >len_NFA         defl    $ - temp_NFA
 178+ 6E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E97             >
 178+ 6E97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E98 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E9C             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E9B D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E9C             >
 178+ 6E9C 8E 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E9E             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E9E FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6EA0             >                else
 178+ 6EA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6EA0             >
 178+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6EA0 3C          >                db      60
 179+ 6EA1                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6EA1             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6EA1             >
 179+ 6EA1             >                // dummy db directives used to calculate length of namec
 179+ 6EA1 4C 50       >                db      "LP"
 179+ 6EA3             >len_NFA         defl    $ - temp_NFA
 179+ 6EA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6EA1             >
 179+ 6EA1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6EA2 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6EA4             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6EA3 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6EA4             >
 179+ 6EA4 97 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EA6             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EA6 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EA8             >                else
 179+ 6EA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EA8             >
 179+ 6EA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EA8 3E          >                db      62
 180+ 6EA9                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6EA9             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EA9             >
 180+ 6EA9             >                // dummy db directives used to calculate length of namec
 180+ 6EA9 50 4C 41 43 >                db      "PLACE"
 180+ 6EAD 45          >
 180+ 6EAE             >len_NFA         defl    $ - temp_NFA
 180+ 6EAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EA9             >
 180+ 6EA9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EAA 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6EAE 45          >
 180+ 6EAF             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EAE C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EAF             >
 180+ 6EAF A1 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EB1             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EB1 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EB3             >                else
 180+ 6EB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EB3             >
 180+ 6EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EB3 40          >                db      64
 181+ 6EB4                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6EB4             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6EB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EB4             >
 181+ 6EB4             >                // dummy db directives used to calculate length of namec
 181+ 6EB4 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6EB8 43 45 2D 49 >
 181+ 6EBC 44          >
 181+ 6EBD             >len_NFA         defl    $ - temp_NFA
 181+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EB4             >
 181+ 6EB4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EB5 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6EB9 43 45 2D 49 >
 181+ 6EBD 44          >
 181+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EBD C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EBE             >
 181+ 6EBE A9 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EC0             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EC0 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EC2             >                else
 181+ 6EC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EC2             >
 181+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EC2 42          >                db      66
 182+ 6EC3                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6EC3             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6EC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EC3             >
 182+ 6EC3             >                // dummy db directives used to calculate length of namec
 182+ 6EC3 53 50 41 4E >                db      "SPAN"
 182+ 6EC7             >len_NFA         defl    $ - temp_NFA
 182+ 6EC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EC3             >
 182+ 6EC3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EC4 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6EC8             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EC7 CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EC8             >
 182+ 6EC8 B4 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6ECA             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6ECA FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6ECC             >                else
 182+ 6ECC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6ECC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6ECC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6ECC             >
 182+ 6ECC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6ECC 44          >                db      68
 183+ 6ECD                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6ECD             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6ECD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6ECD             >
 183+ 6ECD             >                // dummy db directives used to calculate length of namec
 183+ 6ECD 48 41 4E 44 >                db      "HANDLER"
 183+ 6ED1 4C 45 52    >
 183+ 6ED4             >len_NFA         defl    $ - temp_NFA
 183+ 6ED4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6ECD             >
 183+ 6ECD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6ECE 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6ED2 4C 45 52    >
 183+ 6ED5             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6ED4 D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6ED5             >
 183+ 6ED5 C3 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6ED7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6ED7 FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6ED9             >                else
 183+ 6ED9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6ED9             >
 183+ 6ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6ED9 46          >                db      70
 184+ 6EDA                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6EDA             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6EDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6EDA             >
 184+ 6EDA             >                // dummy db directives used to calculate length of namec
 184+ 6EDA 48 50       >                db      "HP"
 184+ 6EDC             >len_NFA         defl    $ - temp_NFA
 184+ 6EDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6EDA             >
 184+ 6EDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6EDB 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6EDD             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6EDC D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6EDD             >
 184+ 6EDD CD 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EDF             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EDF FA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EE1             >                else
 184+ 6EE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EE1             >
 184+ 6EE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EE1 48          >                db      72
 185+ 6EE2
 186+ 6EE2              //  ______________________________________________________________________
 187+ 6EE2              //
 188+ 6EE2              // here         -- a
 189+ 6EE2                              Colon_Def HERE, "HERE", is_normal
 189+ 6EE2             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6EE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6EE2             >
 189+ 6EE2             >                // dummy db directives used to calculate length of namec
 189+ 6EE2 48 45 52 45 >                db      "HERE"
 189+ 6EE6             >len_NFA         defl    $ - temp_NFA
 189+ 6EE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6EE2             >
 189+ 6EE2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6EE3 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EE7             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EE6 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EE7             >
 189+ 6EE7 DA 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EE9             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EE9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EEB             >                else
 189+ 6EEB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EEB             >
 189+ 6EEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EEB C8 6D A2 6B                  dw      DP, FETCH               // dp @
 191+ 6EEF AA 69                        dw      EXIT                    // ;
 192+ 6EF1
 193+ 6EF1              //  ______________________________________________________________________
 194+ 6EF1              //
 195+ 6EF1              // allot        n --
 196+ 6EF1                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EF1             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EF1             >
 196+ 6EF1             >                // dummy db directives used to calculate length of namec
 196+ 6EF1 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EF5 54          >
 196+ 6EF6             >len_NFA         defl    $ - temp_NFA
 196+ 6EF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EF1             >
 196+ 6EF1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EF2 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EF6 54          >
 196+ 6EF7             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EF6 D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EF7             >
 196+ 6EF7 E2 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EF9             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EF9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EFB             >                else
 196+ 6EFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EFB             >
 196+ 6EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EFB C8 6D 7F 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EFF AA 69                        dw      EXIT                    // ;
 199+ 6F01
 200+ 6F01              //  ______________________________________________________________________
 201+ 6F01              //
 202+ 6F01              // comma        n --
 203+ 6F01                              Colon_Def COMMA, ",", is_normal
 203+ 6F01             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6F01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F01             >
 203+ 6F01             >                // dummy db directives used to calculate length of namec
 203+ 6F01 2C          >                db      ","
 203+ 6F02             >len_NFA         defl    $ - temp_NFA
 203+ 6F02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F01             >
 203+ 6F01 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F02 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6F03             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F02 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F03             >
 203+ 6F03 F1 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F05             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F05 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F07             >                else
 203+ 6F07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F07             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F07             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F07             >
 203+ 6F07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F07 E9 6E AF 6B                  dw      HERE, STORE             // here !
 205+ 6F0B 1A 6D F9 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6F0F AA 69                        dw      EXIT                    // ;
 207+ 6F11
 208+ 6F11              //  ______________________________________________________________________
 209+ 6F11              //
 210+ 6F11              // ccomma       c --
 211+ 6F11                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6F11             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6F11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6F11             >
 211+ 6F11             >                // dummy db directives used to calculate length of namec
 211+ 6F11 43 2C       >                db      "C,"
 211+ 6F13             >len_NFA         defl    $ - temp_NFA
 211+ 6F13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6F11             >
 211+ 6F11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6F12 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6F14             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6F13 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6F14             >
 211+ 6F14 01 6F       >                dw      last_NFA            // Link to previous definition Name
 211+ 6F16             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6F16 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6F18             >                else
 211+ 6F18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6F18             >
 211+ 6F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6F18 E9 6E CB 6B                  dw      HERE, CSTORE            // here c!
 213+ 6F1C 12 6D F9 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6F20 AA 69                        dw      EXIT                    // ;
 215+ 6F22
 216+ 6F22              //  ______________________________________________________________________
 217+ 6F22              //
 218+ 6F22              // s>d          n -- d
 219+ 6F22              // converts a single precision integer in a double precision
 220+ 6F22                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6F22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6F22             >
 220+ 6F22             >                // dummy db directives used to calculate length of namec
 220+ 6F22 53 3E 44    >                db      "S>D"
 220+ 6F25             >len_NFA         defl    $ - temp_NFA
 220+ 6F25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6F22             >
 220+ 6F22 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6F23 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6F26             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6F25 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6F26             >
 220+ 6F26 11 6F       >                dw      last_NFA            // Link to previous definition Name
 220+ 6F28             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6F28 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6F28             >                else
 220+ 6F28 2A 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6F2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6F2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6F2A             >
 220+ 6F2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6F2A D1                           pop     de
 222+ 6F2B 21 00 00                     ld      hl, 0
 223+ 6F2E 7A                           ld      a, d
 224+ 6F2F E6 80                        and     $80
 225+ 6F31 28 01                        jr      z, S_to_D_Skip
 226+ 6F33 2B                           dec     hl                  // $FFFF
 227+ 6F34              S_to_D_Skip:
 228+ 6F34 D5                           push    de
 229+ 6F35 E5                           push    hl
 230+ 6F36                              next
 230+ 6F36 DD E9       >                jp      (ix)
 231+ 6F38
 232+ 6F38              //  ______________________________________________________________________
 233+ 6F38              //
 234+ 6F38              // -            n1 n2 -- n3
 235+ 6F38              // subtraction
 236+ 6F38                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6F38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6F38             >
 236+ 6F38             >                // dummy db directives used to calculate length of namec
 236+ 6F38 2D          >                db      "-"
 236+ 6F39             >len_NFA         defl    $ - temp_NFA
 236+ 6F39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6F38             >
 236+ 6F38 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F39 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F3A             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F39 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F3A             >
 236+ 6F3A 22 6F       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F3C             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F3C             >                else
 236+ 6F3C 3E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F3E             >
 236+ 6F3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F3E D1                           pop     de
 238+ 6F3F E1                           pop     hl
 239+ 6F40 A7                           and     a
 240+ 6F41 ED 52                        sbc     hl, de
 241+ 6F43
 242+ 6F43                              psh1
 242+ 6F43 E5          >                push    hl
 242+ 6F44 DD E9       >                jp      (ix)
 243+ 6F46
 244+ 6F46              //  ______________________________________________________________________
 245+ 6F46              //
 246+ 6F46              // =            n1 n2 -- n3
 247+ 6F46              // equals
 248+ 6F46                              Colon_Def EQUALS, "=", is_normal
 248+ 6F46             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F46             >
 248+ 6F46             >                // dummy db directives used to calculate length of namec
 248+ 6F46 3D          >                db      "="
 248+ 6F47             >len_NFA         defl    $ - temp_NFA
 248+ 6F47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F46             >
 248+ 6F46 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F47 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F48             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F47 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F48             >
 248+ 6F48 38 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F4A             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F4A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F4C             >                else
 248+ 6F4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F4C             >
 248+ 6F4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F4C 3C 6F EC 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F50 AA 69                        dw      EXIT                    // ;
 251+ 6F52
 252+ 6F52              //  ______________________________________________________________________
 253+ 6F52              //
 254+ 6F52              // u<           u1 u2 -- u3
 255+ 6F52              // unsigned less-than
 256+ 6F52                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F52             >
 256+ 6F52             >                // dummy db directives used to calculate length of namec
 256+ 6F52 55 3C       >                db      "U<"
 256+ 6F54             >len_NFA         defl    $ - temp_NFA
 256+ 6F54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F52             >
 256+ 6F52 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F53 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F55             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F54 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F55             >
 256+ 6F55 46 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F57             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F57             >                else
 256+ 6F57 59 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F59             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F59             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F59             >
 256+ 6F59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F59 D1                           pop     de
 258+ 6F5A E1                           pop     hl
 259+ 6F5B A7                           and     a
 260+ 6F5C ED 52                        sbc     hl, de
 261+ 6F5E 21 FF FF                     ld      hl, -1
 262+ 6F61 38 01                        jr      c, ULess_Skip
 263+ 6F63 23                               inc     hl
 264+ 6F64              ULess_Skip:
 265+ 6F64
 266+ 6F64                              psh1
 266+ 6F64 E5          >                push    hl
 266+ 6F65 DD E9       >                jp      (ix)
 267+ 6F67
 268+ 6F67              //  ______________________________________________________________________
 269+ 6F67              //
 270+ 6F67              // <           n1 n2 -- n3
 271+ 6F67              // less-than
 272+ 6F67                              New_Def LESS, "<", is_code, is_normal
 272+ 6F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F67             >
 272+ 6F67             >                // dummy db directives used to calculate length of namec
 272+ 6F67 3C          >                db      "<"
 272+ 6F68             >len_NFA         defl    $ - temp_NFA
 272+ 6F68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F67             >
 272+ 6F67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F68 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F69             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F68 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F69             >
 272+ 6F69 52 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F6B             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F6B             >                else
 272+ 6F6B 6D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F6D             >
 272+ 6F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F6D D1                           pop     de
 274+ 6F6E E1                           pop     hl
 275+ 6F6F 7C                           ld      a, h
 276+ 6F70 EE 80                        xor     $80
 277+ 6F72 67                           ld      h, a
 278+ 6F73 7A                           ld      a, d
 279+ 6F74 EE 80                        xor     $80
 280+ 6F76 57                           ld      d, a
 281+ 6F77              //              and     a
 282+ 6F77 ED 52                        sbc     hl, de
 283+ 6F79 ED 62                        sbc     hl, hl
 284+ 6F7B                              psh1
 284+ 6F7B E5          >                push    hl
 284+ 6F7C DD E9       >                jp      (ix)
 285+ 6F7E
 286+ 6F7E              //  ______________________________________________________________________
 287+ 6F7E              //
 288+ 6F7E              // >            n1 n2 -- n3
 289+ 6F7E              // greater than
 290+ 6F7E                              Colon_Def GREATER, ">", is_normal
 290+ 6F7E             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 290+ 6F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6F7E             >
 290+ 6F7E             >                // dummy db directives used to calculate length of namec
 290+ 6F7E 3E          >                db      ">"
 290+ 6F7F             >len_NFA         defl    $ - temp_NFA
 290+ 6F7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6F7E             >
 290+ 6F7E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6F7F 3E          >                db      ">"               // name string in 7-bit ascii, but
 290+ 6F80             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6F7F BE          >                db      {b $} | END_BIT     // msb as name end
 290+ 6F80             >
 290+ 6F80 67 6F       >                dw      last_NFA            // Link to previous definition Name
 290+ 6F82             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6F82 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 6F84             >                else
 290+ 6F84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6F84             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6F84             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6F84             >
 290+ 6F84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6F84 02 6B 6B 6F                  dw      SWAP, LESS              // swap <
 292+ 6F88 AA 69                        dw      EXIT                    // ;
 293+ 6F8A              //  ______________________________________________________________________
 294+ 6F8A              //
 295+ 6F8A              // min          n1 n2 -- n3
 296+ 6F8A              // minimum between n1 and n2
 297+ 6F8A                              Colon_Def MIN, "MIN" , is_normal
 297+ 6F8A             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 297+ 6F8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6F8A             >
 297+ 6F8A             >                // dummy db directives used to calculate length of namec
 297+ 6F8A 4D 49 4E    >                db      "MIN"
 297+ 6F8D             >len_NFA         defl    $ - temp_NFA
 297+ 6F8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6F8A             >
 297+ 6F8A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6F8B 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 297+ 6F8E             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6F8D CE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6F8E             >
 297+ 6F8E 7E 6F       >                dw      last_NFA            // Link to previous definition Name
 297+ 6F90             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6F90 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6F92             >                else
 297+ 6F92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 6F92             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6F92             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6F92             >
 297+ 6F92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6F92 70 6B                        dw      TWO_DUP                 // 2dup
 299+ 6F94 82 6F                        dw      GREATER                 // >
 300+ 6F96 2C 64                        dw      ZBRANCH
 301+ 6F98 04 00                        dw      Min_Skip - $   // if
 302+ 6F9A 02 6B                        dw          SWAP                //      swap
 303+ 6F9C              Min_Skip:                                       // endif
 304+ 6F9C DA 6A                        dw      DROP                    // drop
 305+ 6F9E AA 69                        dw      EXIT                    // ;
 306+ 6FA0
 307+ 6FA0              //  ______________________________________________________________________
 308+ 6FA0              //
 309+ 6FA0              // max          n1 n2 -- n3
 310+ 6FA0              // maximum between n1 and n2
 311+ 6FA0                              Colon_Def MAX, "MAX", is_normal
 311+ 6FA0             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 311+ 6FA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ 6FA0             >
 311+ 6FA0             >                // dummy db directives used to calculate length of namec
 311+ 6FA0 4D 41 58    >                db      "MAX"
 311+ 6FA3             >len_NFA         defl    $ - temp_NFA
 311+ 6FA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ 6FA0             >
 311+ 6FA0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ 6FA1 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 311+ 6FA4             >                org     $-1                 // alter last byte of Name just above to set
 311+ 6FA3 D8          >                db      {b $} | END_BIT     // msb as name end
 311+ 6FA4             >
 311+ 6FA4 8A 6F       >                dw      last_NFA            // Link to previous definition Name
 311+ 6FA6             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6FA6 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6FA8             >                else
 311+ 6FA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 311+ 6FA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6FA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6FA8             >
 311+ 6FA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6FA8 70 6B                        dw      TWO_DUP                 // 2dup
 313+ 6FAA 6B 6F                        dw      LESS                    // <
 314+ 6FAC 2C 64                        dw      ZBRANCH
 315+ 6FAE 04 00                        dw      Max_Skip - $   // if
 316+ 6FB0 02 6B                        dw          SWAP                //      swap
 317+ 6FB2              Max_Skip:                                       // endif
 318+ 6FB2 DA 6A                        dw      DROP                    // drop
 319+ 6FB4 AA 69                        dw      EXIT                    // ;
 320+ 6FB6
 321+ 6FB6              //  ______________________________________________________________________
 322+ 6FB6              //
 323+ 6FB6              // ?dup         n -- 0 | n n
 324+ 6FB6              // duplicate if not zero
 325+ 6FB6                              New_Def QDUP, "?DUP", is_code, is_normal
 325+ 6FB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 6FB6             >
 325+ 6FB6             >                // dummy db directives used to calculate length of namec
 325+ 6FB6 3F 44 55 50 >                db      "?DUP"
 325+ 6FBA             >len_NFA         defl    $ - temp_NFA
 325+ 6FBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 6FB6             >
 325+ 6FB6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 6FB7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 325+ 6FBB             >                org     $-1                 // alter last byte of Name just above to set
 325+ 6FBA D0          >                db      {b $} | END_BIT     // msb as name end
 325+ 6FBB             >
 325+ 6FBB A0 6F       >                dw      last_NFA            // Link to previous definition Name
 325+ 6FBD             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6FBD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 325+ 6FBD             >                else
 325+ 6FBD BF 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 325+ 6FBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6FBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6FBF             >
 325+ 6FBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6FBF              QDup_Ptr:
 327+ 6FBF E1                           pop     hl
 328+ 6FC0 7C                           ld      a, h
 329+ 6FC1 B5                           or      l
 330+ 6FC2 28 01                        jr      z, QDup_Skip
 331+ 6FC4 E5                               push    hl
 332+ 6FC5              QDup_Skip:
 333+ 6FC5                              psh1
 333+ 6FC5 E5          >                push    hl
 333+ 6FC6 DD E9       >                jp      (ix)
 334+ 6FC8
 335+ 6FC8              //  ______________________________________________________________________
 336+ 6FC8              //
 337+ 6FC8              // -dup         n -- 0 | n n
 338+ 6FC8              // duplicate if not zero
 339+ 6FC8                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 339+ 6FC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 6FC8             >
 339+ 6FC8             >                // dummy db directives used to calculate length of namec
 339+ 6FC8 2D 44 55 50 >                db      "-DUP"
 339+ 6FCC             >len_NFA         defl    $ - temp_NFA
 339+ 6FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 6FC8             >
 339+ 6FC8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 6FC9 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 339+ 6FCD             >                org     $-1                 // alter last byte of Name just above to set
 339+ 6FCC D0          >                db      {b $} | END_BIT     // msb as name end
 339+ 6FCD             >
 339+ 6FCD B6 6F       >                dw      last_NFA            // Link to previous definition Name
 339+ 6FCF             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6FCF BF 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 339+ 6FD1             >                else
 339+ 6FD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 6FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6FD1             >
 339+ 6FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6FD1
 341+ 6FD1              //  ______________________________________________________________________
 342+ 6FD1              //
 343+ 6FD1              // emit         c --
 344+ 6FD1                              Colon_Def EMIT, "EMIT", is_normal
 344+ 6FD1             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 344+ 6FD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FD1             >
 344+ 6FD1             >                // dummy db directives used to calculate length of namec
 344+ 6FD1 45 4D 49 54 >                db      "EMIT"
 344+ 6FD5             >len_NFA         defl    $ - temp_NFA
 344+ 6FD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FD1             >
 344+ 6FD1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FD2 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 344+ 6FD6             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FD5 D4          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FD6             >
 344+ 6FD6 C8 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FD8             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FD8 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FDA             >                else
 344+ 6FDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FDA             >
 344+ 6FDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FDA 52 66                        dw      C_EMIT                      // (?emit)
 346+ 6FDC BD 6F                        dw      QDUP                        // ?dup
 347+ 6FDE                                                                  // if
 348+ 6FDE 2C 64                        dw      ZBRANCH
 349+ 6FE0 0A 00                        dw      Emit_Skip - $
 350+ 6FE2 13 66                        dw          EMITC                   //      emitc
 351+ 6FE4 12 6D                        dw          ONE                     //      1
 352+ 6FE6 1B 6E 7F 6B                  dw          OUT, PLUSSTORE        //      out +!
 353+ 6FEA              Emit_Skip:                                          // endif
 354+ 6FEA AA 69                        dw      EXIT                        // ;
 355+ 6FEC
 356+ 6FEC              //  ______________________________________________________________________
 357+ 6FEC              //
 358+ 6FEC              // space        --
 359+ 6FEC                              Colon_Def SPACE, "SPACE", is_normal
 359+ 6FEC             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 359+ 6FEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 6FEC             >
 359+ 6FEC             >                // dummy db directives used to calculate length of namec
 359+ 6FEC 53 50 41 43 >                db      "SPACE"
 359+ 6FF0 45          >
 359+ 6FF1             >len_NFA         defl    $ - temp_NFA
 359+ 6FF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 6FEC             >
 359+ 6FEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 6FED 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 359+ 6FF1 45          >
 359+ 6FF2             >                org     $-1                 // alter last byte of Name just above to set
 359+ 6FF1 C5          >                db      {b $} | END_BIT     // msb as name end
 359+ 6FF2             >
 359+ 6FF2 D1 6F       >                dw      last_NFA            // Link to previous definition Name
 359+ 6FF4             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6FF4 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6FF6             >                else
 359+ 6FF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 6FF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6FF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6FF6             >
 359+ 6FF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6FF6 34 6D D8 6F                  dw      BL, EMIT                // bl emit
 361+ 6FFA AA 69                        dw      EXIT                    // ;
 362+ 6FFC
 363+ 6FFC              //  ______________________________________________________________________
 364+ 6FFC              //
 365+ 6FFC              // traverse     a n -- a
 366+ 6FFC              // A dictionary entry is structured as follows
 367+ 6FFC              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 368+ 6FFC              //      +1   word name, last character is toggled with $80
 369+ 6FFC              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 370+ 6FFC              // CFA: +3+n routine address. Colon definitions here have pointer to code
 371+ 6FFC              // PFA: +5+n "is_code", definitions have no PFA.
 372+ 6FFC              //
 373+ 6FFC                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 373+ 6FFC             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 373+ 6FFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ 6FFC             >
 373+ 6FFC             >                // dummy db directives used to calculate length of namec
 373+ 6FFC 54 52 41 56 >                db      "TRAVERSE"
 373+ 7000 45 52 53 45 >
 373+ 7004             >len_NFA         defl    $ - temp_NFA
 373+ 7004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ 6FFC             >
 373+ 6FFC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ 6FFD 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 373+ 7001 45 52 53 45 >
 373+ 7005             >                org     $-1                 // alter last byte of Name just above to set
 373+ 7004 C5          >                db      {b $} | END_BIT     // msb as name end
 373+ 7005             >
 373+ 7005 EC 6F       >                dw      last_NFA            // Link to previous definition Name
 373+ 7007             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 7007 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 7009             >                else
 373+ 7009 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 373+ 7009             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 7009             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 7009             >
 373+ 7009             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 7009 02 6B                        dw      SWAP                    // swap
 375+ 700B              Traverse_Begin:                                 // begin
 376+ 700B CA 6A 2F 6A                  dw          OVER, PLUS          //      over +
 377+ 700F A9 63 7F 00                  dw          LIT, 127            //      127
 378+ 7013 CA 6A BD 6B                  dw          OVER, CFETCH        //      over @
 379+ 7017 6B 6F                        dw          LESS                //      <
 380+ 7019                                                              // until
 381+ 7019 2C 64                        dw      ZBRANCH
 382+ 701B F0 FF                        dw      Traverse_Begin - $
 383+ 701D E5 6A                        dw      NIP                     //  nip
 384+ 701F AA 69                        dw      EXIT                    //  ;
 385+ 7021
 386+ 7021              //  ______________________________________________________________________
 387+ 7021              //
 388+ 7021              // latest       -- nfa
 389+ 7021                              Colon_Def LATEST, "LATEST", is_normal
 389+ 7021             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 389+ 7021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 7021             >
 389+ 7021             >                // dummy db directives used to calculate length of namec
 389+ 7021 4C 41 54 45 >                db      "LATEST"
 389+ 7025 53 54       >
 389+ 7027             >len_NFA         defl    $ - temp_NFA
 389+ 7027             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 7021             >
 389+ 7021 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 7022 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 389+ 7026 53 54       >
 389+ 7028             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7027 D4          >                db      {b $} | END_BIT     // msb as name end
 389+ 7028             >
 389+ 7028 FC 6F       >                dw      last_NFA            // Link to previous definition Name
 389+ 702A             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 702A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 702C             >                else
 389+ 702C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 702C             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 702C             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 702C             >
 389+ 702C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 702C 4A 6E                        dw      CURRENT                 // current
 391+ 702E A2 6B A2 6B                  dw      FETCH, FETCH            // @ @
 392+ 7032 AA 69                        dw      EXIT                    // ;
 393+ 7034
 394+ 7034              //  ______________________________________________________________________
 395+ 7034              //
 396+ 7034              // lfa          pfa -- lfa
 397+ 7034                              Colon_Def LFA, "LFA", is_normal
 397+ 7034             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 397+ 7034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 7034             >
 397+ 7034             >                // dummy db directives used to calculate length of namec
 397+ 7034 4C 46 41    >                db      "LFA"
 397+ 7037             >len_NFA         defl    $ - temp_NFA
 397+ 7037             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 7034             >
 397+ 7034 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 7035 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 397+ 7038             >                org     $-1                 // alter last byte of Name just above to set
 397+ 7037 C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 7038             >
 397+ 7038 21 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 703A             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 703A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 703C             >                else
 397+ 703C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 703C             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 703C             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 703C             >
 397+ 703C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 703C 82 6A                        dw      CELL_MINUS              // cell-
 399+ 703E 82 6A                        dw      CELL_MINUS              // cell-
 400+ 7040 AA 69                        dw      EXIT                    // ;
 401+ 7042
 402+ 7042              //  ______________________________________________________________________
 403+ 7042              //
 404+ 7042              // cfa          pfa -- cfa
 405+ 7042                              Colon_Def CFA, "CFA", is_normal
 405+ 7042             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 405+ 7042             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 7042             >
 405+ 7042             >                // dummy db directives used to calculate length of namec
 405+ 7042 43 46 41    >                db      "CFA"
 405+ 7045             >len_NFA         defl    $ - temp_NFA
 405+ 7045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 7042             >
 405+ 7042 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 7043 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 405+ 7046             >                org     $-1                 // alter last byte of Name just above to set
 405+ 7045 C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 7046             >
 405+ 7046 34 70       >                dw      last_NFA            // Link to previous definition Name
 405+ 7048             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7048 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 704A             >                else
 405+ 704A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 704A             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 704A             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 704A             >
 405+ 704A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 704A 82 6A                        dw      CELL_MINUS              // cell-
 407+ 704C AA 69                        dw      EXIT                    // ;
 408+ 704E
 409+ 704E              //  ______________________________________________________________________
 410+ 704E              //
 411+ 704E              // nfa          pfa -- nfa
 412+ 704E                              Colon_Def NFA, "NFA", is_normal
 412+ 704E             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 704E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 704E             >
 412+ 704E             >                // dummy db directives used to calculate length of namec
 412+ 704E 4E 46 41    >                db      "NFA"
 412+ 7051             >len_NFA         defl    $ - temp_NFA
 412+ 7051             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 704E             >
 412+ 704E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 704F 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 7052             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7051 C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 7052             >
 412+ 7052 42 70       >                dw      last_NFA            // Link to previous definition Name
 412+ 7054             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7054 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7056             >                else
 412+ 7056 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7056             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7056             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7056             >
 412+ 7056             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7056 A9 63 05 00                  dw      LIT, 5                  // 5
 414+ 705A 3C 6F                        dw      SUBTRACT                // -
 415+ 705C 2B 6D                        dw      NEG_ONE                 // -1
 416+ 705E 07 70                        dw      TRAVERSE                // traverse
 417+ 7060 AA 69                        dw      EXIT                    // ;
 418+ 7062
 419+ 7062              //  ______________________________________________________________________
 420+ 7062              //
 421+ 7062              // pfa          nfa -- pfa
 422+ 7062                              Colon_Def PFA, "PFA", is_normal
 422+ 7062             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 7062             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 7062             >
 422+ 7062             >                // dummy db directives used to calculate length of namec
 422+ 7062 50 46 41    >                db      "PFA"
 422+ 7065             >len_NFA         defl    $ - temp_NFA
 422+ 7065             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 7062             >
 422+ 7062 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 7063 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 7066             >                org     $-1                 // alter last byte of Name just above to set
 422+ 7065 C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 7066             >
 422+ 7066 4E 70       >                dw      last_NFA            // Link to previous definition Name
 422+ 7068             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 7068 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 706A             >                else
 422+ 706A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 706A             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 706A             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 706A             >
 422+ 706A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 706A 12 6D                        dw      ONE                     // 1
 424+ 706C 07 70                        dw      TRAVERSE                // traverse
 425+ 706E A9 63 05 00                  dw      LIT, 5                  // 6
 426+ 7072 2F 6A                        dw      PLUS                    // +
 427+ 7074 AA 69                        dw      EXIT                    // ;
 428+ 7076
 429+ 7076              //  ______________________________________________________________________
 430+ 7076              //
 431+ 7076              // >body        cfa -- pfa
 432+ 7076                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 7076             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 7076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 7076             >
 432+ 7076             >                // dummy db directives used to calculate length of namec
 432+ 7076 3E 42 4F 44 >                db      ">BODY"
 432+ 707A 59          >
 432+ 707B             >len_NFA         defl    $ - temp_NFA
 432+ 707B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 7076             >
 432+ 7076 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 7077 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 707B 59          >
 432+ 707C             >                org     $-1                 // alter last byte of Name just above to set
 432+ 707B D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 707C             >
 432+ 707C 62 70       >                dw      last_NFA            // Link to previous definition Name
 432+ 707E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 707E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 7080             >                else
 432+ 7080 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 432+ 7080             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 7080             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 7080             >
 432+ 7080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 7080 78 6A                        dw      CELL_PLUS               // cell+
 434+ 7082 AA 69                        dw      EXIT                    // ;
 435+ 7084
 436+ 7084              //  ______________________________________________________________________
 437+ 7084              //
 438+ 7084              // <name        cfa -- nfa
 439+ 7084                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 7084             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 7084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 7084             >
 439+ 7084             >                // dummy db directives used to calculate length of namec
 439+ 7084 3C 4E 41 4D >                db      "<NAME"
 439+ 7088 45          >
 439+ 7089             >len_NFA         defl    $ - temp_NFA
 439+ 7089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 7084             >
 439+ 7084 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 7085 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 7089 45          >
 439+ 708A             >                org     $-1                 // alter last byte of Name just above to set
 439+ 7089 C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 708A             >
 439+ 708A 76 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 708C             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 708C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 708E             >                else
 439+ 708E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 708E             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 708E             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 708E             >
 439+ 708E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 708E 7E 70                        dw      TO_BODY                 // >body
 441+ 7090 54 70                        dw      NFA                     // nfa
 442+ 7092 AA 69                        dw      EXIT                    // ;
 443+ 7094
 444+ 7094              //  ______________________________________________________________________
 445+ 7094              //
 446+ 7094              // !csp         --
 447+ 7094              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 7094                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 7094             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 7094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 7094             >
 448+ 7094             >                // dummy db directives used to calculate length of namec
 448+ 7094 21 43 53 50 >                db      "!CSP"
 448+ 7098             >len_NFA         defl    $ - temp_NFA
 448+ 7098             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 7094             >
 448+ 7094 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 7095 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 7099             >                org     $-1                 // alter last byte of Name just above to set
 448+ 7098 D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 7099             >
 448+ 7099 84 70       >                dw      last_NFA            // Link to previous definition Name
 448+ 709B             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 709B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 709D             >                else
 448+ 709D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 709D             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 709D             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 709D             >
 448+ 709D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 709D 72 69                        dw      SPFETCH                 // sp@
 450+ 709F 7A 6E AF 6B                  dw      CSP, STORE              // csp !
 451+ 70A3 AA 69                        dw      EXIT                    // ;
 452+ 70A5
 453+ 70A5              //  ______________________________________________________________________
 454+ 70A5              //
 455+ 70A5              // ?error       f n --
 456+ 70A5              // rase error n if flag f it true
 457+ 70A5                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 70A5             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 70A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 70A5             >
 457+ 70A5             >                // dummy db directives used to calculate length of namec
 457+ 70A5 3F 45 52 52 >                db      "?ERROR"
 457+ 70A9 4F 52       >
 457+ 70AB             >len_NFA         defl    $ - temp_NFA
 457+ 70AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 70A5             >
 457+ 70A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 70A6 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 70AA 4F 52       >
 457+ 70AC             >                org     $-1                 // alter last byte of Name just above to set
 457+ 70AB D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 70AC             >
 457+ 70AC 94 70       >                dw      last_NFA            // Link to previous definition Name
 457+ 70AE             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 70AE 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 70B0             >                else
 457+ 70B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 70B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 70B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 70B0             >
 457+ 70B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 70B0 02 6B                        dw      SWAP                    // swap
 459+ 70B2                                                              // if
 460+ 70B2 2C 64                        dw      ZBRANCH
 461+ 70B4 08 00                        dw      QError_Else - $
 462+ 70B6 17 76                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 70B8                                                              // else
 464+ 70B8 15 64                        dw      BRANCH
 465+ 70BA 04 00                        dw      QError_Endif - $
 466+ 70BC              QError_Else:
 467+ 70BC DA 6A                        dw          DROP                //      drop
 468+ 70BE              QError_Endif:                                   // endif
 469+ 70BE AA 69                        dw      EXIT                    // ;
 470+ 70C0
 471+ 70C0              //  ______________________________________________________________________
 472+ 70C0              //
 473+ 70C0              // ?comp       --
 474+ 70C0              // raise msg #17 if not compiling
 475+ 70C0                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 70C0             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 70C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 70C0             >
 475+ 70C0             >                // dummy db directives used to calculate length of namec
 475+ 70C0 3F 43 4F 4D >                db      "?COMP"
 475+ 70C4 50          >
 475+ 70C5             >len_NFA         defl    $ - temp_NFA
 475+ 70C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 70C0             >
 475+ 70C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 70C1 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 70C5 50          >
 475+ 70C6             >                org     $-1                 // alter last byte of Name just above to set
 475+ 70C5 D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 70C6             >
 475+ 70C6 A5 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 70C8             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 70C8 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 70CA             >                else
 475+ 70CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 70CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 70CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 70CA             >
 475+ 70CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 70CA 55 6E A2 6B                  dw      STATE, FETCH            // state @
 477+ 70CE EC 69                        dw      ZEQUAL                  // 0=
 478+ 70D0 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 70D4 AE 70                        dw      QERROR                  // ?error
 480+ 70D6 AA 69                        dw      EXIT                    // ;
 481+ 70D8
 482+ 70D8              //  ______________________________________________________________________
 483+ 70D8              //
 484+ 70D8              // ?exec       --
 485+ 70D8              // raise msg #18 if compiling
 486+ 70D8                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 70D8             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 70D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 70D8             >
 486+ 70D8             >                // dummy db directives used to calculate length of namec
 486+ 70D8 3F 45 58 45 >                db      "?EXEC"
 486+ 70DC 43          >
 486+ 70DD             >len_NFA         defl    $ - temp_NFA
 486+ 70DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 70D8             >
 486+ 70D8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 70D9 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 70DD 43          >
 486+ 70DE             >                org     $-1                 // alter last byte of Name just above to set
 486+ 70DD C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 70DE             >
 486+ 70DE C0 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 70E0             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 70E0 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 70E2             >                else
 486+ 70E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 70E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 70E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 70E2             >
 486+ 70E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 70E2 55 6E A2 6B                  dw      STATE, FETCH            // state @
 488+ 70E6 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 70EA AE 70                        dw      QERROR                  // ?error
 490+ 70EC AA 69                        dw      EXIT                    // ;
 491+ 70EE
 492+ 70EE              //  ______________________________________________________________________
 493+ 70EE              //
 494+ 70EE              // ?pairs       n1 n2 --
 495+ 70EE              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 70EE                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 70EE             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 70EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 70EE             >
 496+ 70EE             >                // dummy db directives used to calculate length of namec
 496+ 70EE 3F 50 41 49 >                db      "?PAIRS"
 496+ 70F2 52 53       >
 496+ 70F4             >len_NFA         defl    $ - temp_NFA
 496+ 70F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 70EE             >
 496+ 70EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 70EF 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 70F3 52 53       >
 496+ 70F5             >                org     $-1                 // alter last byte of Name just above to set
 496+ 70F4 D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 70F5             >
 496+ 70F5 D8 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 70F7             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 70F7 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 70F9             >                else
 496+ 70F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 70F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 70F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 70F9             >
 496+ 70F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 70F9 3C 6F                        dw      SUBTRACT                // -
 498+ 70FB A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 70FF AE 70                        dw      QERROR                  // ?error
 500+ 7101 AA 69                        dw      EXIT                    // ;
 501+ 7103
 502+ 7103              //  ______________________________________________________________________
 503+ 7103              //
 504+ 7103              // ?csp       --
 505+ 7103              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 7103              // Compiler relies on that for  syntax checking of structures
 507+ 7103                              Colon_Def QCSP, "?CSP", is_normal
 507+ 7103             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 7103             >
 507+ 7103             >                // dummy db directives used to calculate length of namec
 507+ 7103 3F 43 53 50 >                db      "?CSP"
 507+ 7107             >len_NFA         defl    $ - temp_NFA
 507+ 7107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 7103             >
 507+ 7103 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 7104 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 7108             >                org     $-1                 // alter last byte of Name just above to set
 507+ 7107 D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 7108             >
 507+ 7108 EE 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 710A             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 710A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 710C             >                else
 507+ 710C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 710C             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 710C             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 710C             >
 507+ 710C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 710C 72 69                        dw      SPFETCH                 // sp@
 509+ 710E 7A 6E A2 6B                  dw      CSP, FETCH              // csp @
 510+ 7112 3C 6F                        dw      SUBTRACT                // -
 511+ 7114 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 7118 AE 70                        dw      QERROR                  // ?error
 513+ 711A AA 69                        dw      EXIT                    // ;
 514+ 711C
 515+ 711C              //  ______________________________________________________________________
 516+ 711C              //
 517+ 711C              // ?loading      --
 518+ 711C              // raise msg #22 if not loading
 519+ 711C                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 711C             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 711C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 711C             >
 519+ 711C             >                // dummy db directives used to calculate length of namec
 519+ 711C 3F 4C 4F 41 >                db      "?LOADING"
 519+ 7120 44 49 4E 47 >
 519+ 7124             >len_NFA         defl    $ - temp_NFA
 519+ 7124             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 711C             >
 519+ 711C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 711D 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 7121 44 49 4E 47 >
 519+ 7125             >                org     $-1                 // alter last byte of Name just above to set
 519+ 7124 C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 7125             >
 519+ 7125 03 71       >                dw      last_NFA            // Link to previous definition Name
 519+ 7127             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 7127 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 7129             >                else
 519+ 7129 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 7129             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 7129             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 7129             >
 519+ 7129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 7129 09 6E A2 6B                  dw      BLK, FETCH              // blk @
 521+ 712D EC 69                        dw      ZEQUAL                  // 0=
 522+ 712F A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 7133 AE 70                        dw      QERROR                  // ?error
 524+ 7135 AA 69                        dw      EXIT                    // ;
 525+ 7137
 526+ 7137              //  ______________________________________________________________________
 527+ 7137              //
 528+ 7137              // compile      --
 529+ 7137              // compiles the following word
 530+ 7137                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 7137             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 7137             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 7137             >
 530+ 7137             >                // dummy db directives used to calculate length of namec
 530+ 7137 43 4F 4D 50 >                db      "COMPILE"
 530+ 713B 49 4C 45    >
 530+ 713E             >len_NFA         defl    $ - temp_NFA
 530+ 713E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 7137             >
 530+ 7137 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 7138 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 713C 49 4C 45    >
 530+ 713F             >                org     $-1                 // alter last byte of Name just above to set
 530+ 713E C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 713F             >
 530+ 713F 1C 71       >                dw      last_NFA            // Link to previous definition Name
 530+ 7141             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 7141 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 7143             >                else
 530+ 7143 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 7143             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 7143             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 7143             >
 530+ 7143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 7143 C8 70                        dw      QCOMP                   // ?comp
 532+ 7145 D1 69                        dw      R_TO                    // r>
 533+ 7147 0F 6B 78 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 714B BD 69                        dw      TO_R                    // >r
 535+ 714D A2 6B 05 6F                  dw      FETCH, COMMA            // @ ,
 536+ 7151 AA 69                        dw      EXIT                    // ;
 537+ 7153
 538+ 7153              //  ______________________________________________________________________
 539+ 7153              //
 540+ 7153              // compile,     --
 541+ 7153              // compiles the following word
 542+ 7153                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 7153             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 7153             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 7153             >
 542+ 7153             >                // dummy db directives used to calculate length of namec
 542+ 7153 43 4F 4D 50 >                db      "COMPILE,"
 542+ 7157 49 4C 45 2C >
 542+ 715B             >len_NFA         defl    $ - temp_NFA
 542+ 715B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 7153             >
 542+ 7153 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 7154 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 7158 49 4C 45 2C >
 542+ 715C             >                org     $-1                 // alter last byte of Name just above to set
 542+ 715B AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 715C             >
 542+ 715C 37 71       >                dw      last_NFA            // Link to previous definition Name
 542+ 715E             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 715E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 7160             >                else
 542+ 7160 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 7160             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 7160             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 7160             >
 542+ 7160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 7160 C8 70                        dw      QCOMP                   // ?comp
 544+ 7162 05 6F                        dw      COMMA                   // ,
 545+ 7164 AA 69                        dw      EXIT                    // ;
 546+ 7166
 547+ 7166              //  ______________________________________________________________________
 548+ 7166              //
 549+ 7166              // [            --
 550+ 7166              // stop compilation
 551+ 7166                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 7166             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 7166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 7166             >
 551+ 7166             >                // dummy db directives used to calculate length of namec
 551+ 7166 5B          >                db      "["
 551+ 7167             >len_NFA         defl    $ - temp_NFA
 551+ 7167             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 7166             >
 551+ 7166 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 7167 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 7168             >                org     $-1                 // alter last byte of Name just above to set
 551+ 7167 DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 7168             >
 551+ 7168 53 71       >                dw      last_NFA            // Link to previous definition Name
 551+ 716A             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 716A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 716C             >                else
 551+ 716C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 551+ 716C             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 716C             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 716C             >
 551+ 716C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 716C 0A 6D                        dw      ZERO                    // 0
 553+ 716E 55 6E AF 6B                  dw      STATE, STORE            // state !
 554+ 7172 AA 69                        dw      EXIT                    // ; immediate
 555+ 7174
 556+ 7174              //  ______________________________________________________________________
 557+ 7174              //
 558+ 7174              // ]            --
 559+ 7174              // start compilation
 560+ 7174                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 7174             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 7174             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 7174             >
 560+ 7174             >                // dummy db directives used to calculate length of namec
 560+ 7174 5D          >                db      "]"
 560+ 7175             >len_NFA         defl    $ - temp_NFA
 560+ 7175             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 7174             >
 560+ 7174 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 7175 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 7176             >                org     $-1                 // alter last byte of Name just above to set
 560+ 7175 DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 7176             >
 560+ 7176 66 71       >                dw      last_NFA            // Link to previous definition Name
 560+ 7178             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 7178 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 717A             >                else
 560+ 717A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 717A             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 717A             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 717A             >
 560+ 717A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 717A A9 63 C0 00                  dw      LIT, $C0                // 192
 562+ 717E 55 6E AF 6B                  dw      STATE, STORE            // state !
 563+ 7182 AA 69                        dw      EXIT                    // ;
 564+ 7184
 565+ 7184              //  ______________________________________________________________________
 566+ 7184              //
 567+ 7184              // smudge       --
 568+ 7184              // toggle smudge bit of latest definition
 569+ 7184                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 7184             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 7184             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 7184             >
 569+ 7184             >                // dummy db directives used to calculate length of namec
 569+ 7184 53 4D 55 44 >                db      "SMUDGE"
 569+ 7188 47 45       >
 569+ 718A             >len_NFA         defl    $ - temp_NFA
 569+ 718A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 7184             >
 569+ 7184 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 7185 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 7189 47 45       >
 569+ 718B             >                org     $-1                 // alter last byte of Name just above to set
 569+ 718A C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 718B             >
 569+ 718B 74 71       >                dw      last_NFA            // Link to previous definition Name
 569+ 718D             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 718D 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 718F             >                else
 569+ 718F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 718F             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 718F             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 718F             >
 569+ 718F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 718F 2A 70                        dw      LATEST                  // latest
 571+ 7191 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 7195 95 6B                        dw      TOGGLE                  // toggle
 573+ 7197 AA 69                        dw      EXIT                    // ;
 574+ 7199
 575+ 7199              //  ______________________________________________________________________
 576+ 7199              //
 577+ 7199              // immediate    --
 578+ 7199              // make immediate the latest definition
 579+ 7199                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 7199             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 7199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 7199             >
 579+ 7199             >                // dummy db directives used to calculate length of namec
 579+ 7199 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 719D 44 49 41 54 >
 579+ 71A1 45          >
 579+ 71A2             >len_NFA         defl    $ - temp_NFA
 579+ 71A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 7199             >
 579+ 7199 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 719A 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 719E 44 49 41 54 >
 579+ 71A2 45          >
 579+ 71A3             >                org     $-1                 // alter last byte of Name just above to set
 579+ 71A2 C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 71A3             >
 579+ 71A3 84 71       >                dw      last_NFA            // Link to previous definition Name
 579+ 71A5             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 71A5 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 71A7             >                else
 579+ 71A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 71A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 71A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 71A7             >
 579+ 71A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 71A7 2A 70                        dw      LATEST                  // latest
 581+ 71A9 A9 63 40 00                  dw      LIT, $40                // 64
 582+ 71AD 95 6B                        dw      TOGGLE                  // toggle
 583+ 71AF AA 69                        dw      EXIT                    // ;
 584+ 71B1
 585+ 71B1              //  ______________________________________________________________________
 586+ 71B1              //
 587+ 71B1              // hex          --
 588+ 71B1              // change numeration base
 589+ 71B1                              Colon_Def HEX, "HEX", is_normal
 589+ 71B1             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 71B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 71B1             >
 589+ 71B1             >                // dummy db directives used to calculate length of namec
 589+ 71B1 48 45 58    >                db      "HEX"
 589+ 71B4             >len_NFA         defl    $ - temp_NFA
 589+ 71B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 71B1             >
 589+ 71B1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 71B2 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 71B5             >                org     $-1                 // alter last byte of Name just above to set
 589+ 71B4 D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 71B5             >
 589+ 71B5 99 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 71B7             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 71B7 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 71B9             >                else
 589+ 71B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 589+ 71B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 71B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 71B9             >
 589+ 71B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 71B9 A9 63 10 00                  dw      LIT, 16                 // 16
 591+ 71BD 5F 6E AF 6B                  dw      BASE, STORE             // base !
 592+ 71C1 AA 69                        dw      EXIT                    // ;
 593+ 71C3
 594+ 71C3              //  ______________________________________________________________________
 595+ 71C3              //
 596+ 71C3              // decimal      --
 597+ 71C3              // change numeration base
 598+ 71C3                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 71C3             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 71C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 71C3             >
 598+ 71C3             >                // dummy db directives used to calculate length of namec
 598+ 71C3 44 45 43 49 >                db      "DECIMAL"
 598+ 71C7 4D 41 4C    >
 598+ 71CA             >len_NFA         defl    $ - temp_NFA
 598+ 71CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 71C3             >
 598+ 71C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 71C4 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 71C8 4D 41 4C    >
 598+ 71CB             >                org     $-1                 // alter last byte of Name just above to set
 598+ 71CA CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 71CB             >
 598+ 71CB B1 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 71CD             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 71CD 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 71CF             >                else
 598+ 71CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 71CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 71CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 71CF             >
 598+ 71CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 71CF A9 63 0A 00                  dw      LIT, 10                 // 10
 600+ 71D3 5F 6E AF 6B                  dw      BASE, STORE             // base !
 601+ 71D7 AA 69                        dw      EXIT                    // ;
 602+ 71D9
 603+ 71D9              //  ______________________________________________________________________
 604+ 71D9              //
 605+ 71D9              // (;code)       --
 606+ 71D9              // patch to CFA to call/jump to the "following code"
 607+ 71D9                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 71D9             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 71D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 71D9             >
 607+ 71D9             >                // dummy db directives used to calculate length of namec
 607+ 71D9 28 3B 43 4F >                db      "(;CODE)"
 607+ 71DD 44 45 29    >
 607+ 71E0             >len_NFA         defl    $ - temp_NFA
 607+ 71E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 71D9             >
 607+ 71D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 71DA 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 71DE 44 45 29    >
 607+ 71E1             >                org     $-1                 // alter last byte of Name just above to set
 607+ 71E0 A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 71E1             >
 607+ 71E1 C3 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 71E3             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 71E3 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 71E5             >                else
 607+ 71E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 71E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 71E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 71E5             >
 607+ 71E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 71E5 D1 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 71E7 2A 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 71E9 68 70 48 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 71ED
 612+ 71ED
 613+ 71ED
 614+ 71ED
 615+ 71ED
 616+ 71ED AF 6B                        dw      STORE                   // !
 617+ 71EF AA 69                        dw      EXIT                    // ;
 618+ 71F1
 619+ 71F1              //  ______________________________________________________________________
 620+ 71F1              //
 621+ 71F1              // ;code        --
 622+ 71F1                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 71F1             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 71F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 71F1             >
 622+ 71F1             >                // dummy db directives used to calculate length of namec
 622+ 71F1 3B 43 4F 44 >                db      ";CODE"
 622+ 71F5 45          >
 622+ 71F6             >len_NFA         defl    $ - temp_NFA
 622+ 71F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 71F1             >
 622+ 71F1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 71F2 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 71F6 45          >
 622+ 71F7             >                org     $-1                 // alter last byte of Name just above to set
 622+ 71F6 C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 71F7             >
 622+ 71F7 D9 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 71F9             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 71F9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 71FB             >                else
 622+ 71FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 622+ 71FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 71FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 71FB             >
 622+ 71FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 71FB 0A 71                        dw      QCSP                    // ?csp
 624+ 71FD 41 71                        dw      COMPILE                 // compile
 625+ 71FF E3 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 7201 6A 71                        dw      SQUARED_OPEN            // [
 627+ 7203 B5 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 7205 AA 69                        dw      EXIT                    // ; immediate
 629+ 7207
 630+ 7207              //  ______________________________________________________________________
 631+ 7207              //
 632+ 7207              // <builds      --
 633+ 7207                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 7207             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 7207             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 7207             >
 633+ 7207             >                // dummy db directives used to calculate length of namec
 633+ 7207 3C 42 55 49 >                db      "<BUILDS"
 633+ 720B 4C 44 53    >
 633+ 720E             >len_NFA         defl    $ - temp_NFA
 633+ 720E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 7207             >
 633+ 7207 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 7208 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 720C 4C 44 53    >
 633+ 720F             >                org     $-1                 // alter last byte of Name just above to set
 633+ 720E D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 720F             >
 633+ 720F F1 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 7211             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 7211 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 7213             >                else
 633+ 7213 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 7213             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 7213             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 7213             >
 633+ 7213             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 7213 0A 6D                        dw      ZERO                    // 0
 635+ 7215 C4 6C                        dw      CONSTANT                // constant
 636+ 7217 AA 69                        dw      EXIT                    // ;
 637+ 7219
 638+ 7219              //  ______________________________________________________________________
 639+ 7219              //
 640+ 7219              // recurse      --
 641+ 7219              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 7219              //              dw      QCOMP                   // ?comp
 643+ 7219              //              dw      LATEST                  // latest
 644+ 7219              //              dw      PFA, CFA                // pfa cfa
 645+ 7219              //              dw      COMMA                   // ,
 646+ 7219              //              dw      EXIT                    // ; immediate
 647+ 7219
 648+ 7219              //  ______________________________________________________________________
 649+ 7219              //
 650+ 7219              // does>     --
 651+ 7219                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 7219             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 7219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 7219             >
 651+ 7219             >                // dummy db directives used to calculate length of namec
 651+ 7219 44 4F 45 53 >                db      "DOES>"
 651+ 721D 3E          >
 651+ 721E             >len_NFA         defl    $ - temp_NFA
 651+ 721E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 7219             >
 651+ 7219 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 721A 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 721E 3E          >
 651+ 721F             >                org     $-1                 // alter last byte of Name just above to set
 651+ 721E BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 721F             >
 651+ 721F 07 72       >                dw      last_NFA            // Link to previous definition Name
 651+ 7221             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 7221 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 7223             >                else
 651+ 7223 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 651+ 7223             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 7223             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 7223             >
 651+ 7223             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 7223 D1 69                        dw      R_TO                    // r>
 653+ 7225 2A 70                        dw      LATEST                  // latest
 654+ 7227 68 70                        dw      PFA                     // pfa
 655+ 7229 AF 6B                        dw      STORE                   // !
 656+ 722B E3 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 722D              Does_Ptr:
 658+ 722D                              // via call coded in CFA
 659+ 722D                              ldhlrp
 659+ 722D 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 7230 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 7231 70                           ld      (hl), b
 662+ 7232 2B                           dec     hl
 663+ 7233 71                           ld      (hl), c
 664+ 7234                              ldrphl
 664+ 7234 22 96 63    >                ld      (RP_Pointer),hl
 665+ 7237 13                           inc     de
 666+ 7238 EB                           ex      de, hl
 667+ 7239 4E                           ld      c, (hl)
 668+ 723A 23                           inc     hl
 669+ 723B 46                           ld      b, (hl)
 670+ 723C 23                           inc     hl
 671+ 723D
 672+ 723D                              psh1
 672+ 723D E5          >                push    hl
 672+ 723E DD E9       >                jp      (ix)
 673+ 7240                              // SMUDGE !
 674+ 7240
 675+ 7240              //  ______________________________________________________________________
 676+ 7240              //
 677+ 7240              // count        a -- a2 n
 678+ 7240              // expects a counted string at address a, returns string address and counter
 679+ 7240                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 7240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 7240             >
 679+ 7240             >                // dummy db directives used to calculate length of namec
 679+ 7240 43 4F 55 4E >                db      "COUNT"
 679+ 7244 54          >
 679+ 7245             >len_NFA         defl    $ - temp_NFA
 679+ 7245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 7240             >
 679+ 7240 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 7241 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 7245 54          >
 679+ 7246             >                org     $-1                 // alter last byte of Name just above to set
 679+ 7245 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 7246             >
 679+ 7246 19 72       >                dw      last_NFA            // Link to previous definition Name
 679+ 7248             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7248 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 679+ 7248             >                else
 679+ 7248 4A 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 679+ 724A             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 724A             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 724A             >
 679+ 724A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 724A E1                           pop     hl
 681+ 724B 5E                           ld      e, (hl)
 682+ 724C 16 00                        ld      d, 0
 683+ 724E 23                           inc     hl
 684+ 724F              Count_Ptr:
 685+ 724F E5                           push    hl
 686+ 7250 D5                           push    de
 687+ 7251                              next
 687+ 7251 DD E9       >                jp      (ix)
 688+ 7253
 689+ 7253
 690+ 7253              //  ______________________________________________________________________
 691+ 7253              //
 692+ 7253              // bounds       a n -- a+n n
 693+ 7253              // given an address and a length ( a n ) calculate the bound addresses
 694+ 7253              // suitable for DO-LOOP
 695+ 7253                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 695+ 7253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 7253             >
 695+ 7253             >                // dummy db directives used to calculate length of namec
 695+ 7253 42 4F 55 4E >                db      "BOUNDS"
 695+ 7257 44 53       >
 695+ 7259             >len_NFA         defl    $ - temp_NFA
 695+ 7259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 7253             >
 695+ 7253 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 7254 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 7258 44 53       >
 695+ 725A             >                org     $-1                 // alter last byte of Name just above to set
 695+ 7259 D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 725A             >
 695+ 725A 40 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 725C             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 725C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 725C             >                else
 695+ 725C 5E 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 725E             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 725E             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 725E             >
 695+ 725E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 725E E1                           pop     hl
 697+ 725F D1                           pop     de
 698+ 7260 19                           add     hl, de
 699+ 7261 18 EC                        jr      Count_Ptr
 700+ 7263
 701+ 7263              //  ______________________________________________________________________
 702+ 7263              //
 703+ 7263              // type         a n --
 704+ 7263              // Sends to current output channel n characters starting at address a.
 705+ 7263                              Colon_Def TYPE, "TYPE", is_normal
 705+ 7263             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 705+ 7263             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 7263             >
 705+ 7263             >                // dummy db directives used to calculate length of namec
 705+ 7263 54 59 50 45 >                db      "TYPE"
 705+ 7267             >len_NFA         defl    $ - temp_NFA
 705+ 7267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 7263             >
 705+ 7263 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 7264 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 705+ 7268             >                org     $-1                 // alter last byte of Name just above to set
 705+ 7267 C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 7268             >
 705+ 7268 53 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 726A             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 726A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 726C             >                else
 705+ 726C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 705+ 726C             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 726C             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 726C             >
 705+ 726C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 726C 5C 72                        dw      BOUNDS                  // bounds
 707+ 726E 59 64                        dw      C_Q_DO                  // ?do
 708+ 7270 0C 00                        dw      Type_Skip - $
 709+ 7272              Type_Loop:
 710+ 7272 90 64 BD 6B                  dw          I, CFETCH           //      i c@
 711+ 7276 D8 6F                        dw          EMIT                //      emit
 712+ 7278 04 64                        dw      C_LOOP                  // loop
 713+ 727A F8 FF                        dw      Type_Loop - $
 714+ 727C              Type_Skip:
 715+ 727C AA 69                        dw      EXIT                    // ;
 716+ 727E
 717+ 727E              //  ______________________________________________________________________
 718+ 727E              //
 719+ 727E              // leave        --
 720+ 727E              // Compile (leave) to leave current LOOP and jump just after it
 721+ 727E                              Colon_Def LEAVE, "LEAVE", is_immediate
 721+ 727E             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 721+ 727E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 727E             >
 721+ 727E             >                // dummy db directives used to calculate length of namec
 721+ 727E 4C 45 41 56 >                db      "LEAVE"
 721+ 7282 45          >
 721+ 7283             >len_NFA         defl    $ - temp_NFA
 721+ 7283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 727E             >
 721+ 727E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 727F 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 721+ 7283 45          >
 721+ 7284             >                org     $-1                 // alter last byte of Name just above to set
 721+ 7283 C5          >                db      {b $} | END_BIT     // msb as name end
 721+ 7284             >
 721+ 7284 63 72       >                dw      last_NFA            // Link to previous definition Name
 721+ 7286             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 7286 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 7288             >                else
 721+ 7288 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 7288             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 7288             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 7288             >
 721+ 7288             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 7288 41 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 723+ 728C E9 6E BD 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 723+ 7290 0A 6D 05 6F
 724+ 7294 0A 6D 0A 6D                  dw      ZERO, ZERO
 725+ 7298 72 69 0F 6B                  dw      SPFETCH, DUP
 726+ 729C 78 6A 78 6A                  dw      CELL_PLUS, CELL_PLUS
 727+ 72A0 F2 6A                        dw      TUCK
 728+ 72A2 7A 6E A2 6B                  dw      CSP, FETCH
 729+ 72A6 02 6B 3C 6F                  dw      SWAP, SUBTRACT
 730+ 72AA 9D 68                        dw      CMOVE
 731+ 72AC 7A 6E A2 6B                  dw      CSP, FETCH, CELL_MINUS
 731+ 72B0 82 6A
 732+ 72B2 D1 69 CA 6A                  dw      R_TO, OVER, STORE
 732+ 72B6 AF 6B
 733+ 72B8 82 6A 0A 6D                  dw      CELL_MINUS, ZERO
 734+ 72BC 02 6B AF 6B                  dw      SWAP, STORE
 735+ 72C0 AA 69                        dw      EXIT                    // ;
 736+ 72C2
 737+ 72C2              //  ______________________________________________________________________
 738+ 72C2              //
 739+ 72C2              // -trailing    a n1 -- a n2
 740+ 72C2              // Assumes that an n1 bytes-long string is stored at address a
 741+ 72C2              // and the string contains a space delimited word,
 742+ 72C2              // Finds n2 as the position of the first character after the word.
 743+ 72C2                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 72C2             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 72C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 72C2             >
 743+ 72C2             >                // dummy db directives used to calculate length of namec
 743+ 72C2 2D 54 52 41 >                db      "-TRAILING"
 743+ 72C6 49 4C 49 4E >
 743+ 72CA 47          >
 743+ 72CB             >len_NFA         defl    $ - temp_NFA
 743+ 72CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 72C2             >
 743+ 72C2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 72C3 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 72C7 49 4C 49 4E >
 743+ 72CB 47          >
 743+ 72CC             >                org     $-1                 // alter last byte of Name just above to set
 743+ 72CB C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 72CC             >
 743+ 72CC 7E 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 72CE             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 72CE 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 72D0             >                else
 743+ 72D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 743+ 72D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 72D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 72D0             >
 743+ 72D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 72D0 0F 6B 0A 6D                  dw      DUP, ZERO               // dup 0
 745+ 72D4                                                              // do
 746+ 72D4 59 64                        dw      C_Q_DO
 747+ 72D6 20 00                        dw      LTrailing_Leave - $
 748+ 72D8              LTrailing_Loop:
 749+ 72D8 70 6B 2F 6A                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72DC 5C 6A                        dw          ONE_SUBTRACT        //      1-
 751+ 72DE BD 6B                        dw          CFETCH              //      c@
 752+ 72E0 34 6D 3C 6F                  dw          BL, SUBTRACT        //      bl -
 753+ 72E4                                                              //      if
 754+ 72E4 2C 64                        dw          ZBRANCH
 755+ 72E6 0A 00                        dw          LTrailing_Else - $
 756+ 72E8 41 64                        dw              C_LEAVE         //          leave
 757+ 72EA 0C 00                        dw              LTrailing_Leave - $
 758+ 72EC 15 64                        dw          BRANCH              //      else
 759+ 72EE 04 00                        dw          LTrailing_Endif - $
 760+ 72F0              LTrailing_Else:
 761+ 72F0 5C 6A                        dw              ONE_SUBTRACT    //          1-
 762+ 72F2              LTrailing_Endif:                                //      endif
 763+ 72F2                                                              // loop
 764+ 72F2 04 64                        dw      C_LOOP
 765+ 72F4 E4 FF                        dw      LTrailing_Loop - $
 766+ 72F6              LTrailing_Leave:
 767+ 72F6 AA 69                        dw      EXIT                    // ;
 768+ 72F8
 769+ 72F8              //  ______________________________________________________________________
 770+ 72F8              //
 771+ 72F8              // accept       a n1 -- n2
 772+ 72F8              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72F8              // CR stops input. A 'nul' is added as trailer.
 774+ 72F8              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72F8                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72F8             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72F8             >
 775+ 72F8             >                // dummy db directives used to calculate length of namec
 775+ 72F8 41 43 43 45 >                db      "ACCEPT"
 775+ 72FC 50 54       >
 775+ 72FE             >len_NFA         defl    $ - temp_NFA
 775+ 72FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72F8             >
 775+ 72F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72F9 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72FD 50 54       >
 775+ 72FF             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72FE D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72FF             >
 775+ 72FF C2 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 7301             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 7301 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 7303             >                else
 775+ 7303 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 775+ 7303             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 7303             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 7303             >
 775+ 7303             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 7303 CA 6A 2F 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 7307 CA 6A
 777+ 7309 0A 6D 2C 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 730D                                                              // do
 779+ 730D 59 64                        dw      C_Q_DO
 780+ 730F 8A 00                        dw      Accept_Leave - $
 781+ 7311              Accept_Loop:
 782+ 7311 DA 6A B8 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 7315 0F 6B                        dw          DUP                 //      dup             ( a  c  c )
 784+ 7317 A9 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 731B 70 6D                        dw          PLUS_ORIGIN         //      +origin
 786+ 731D A2 6B                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 731F 4A 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 7321                                                              //      if
 789+ 7321 2C 64                        dw          ZBRANCH
 790+ 7323 2C 00                        dw          Accept_Else_0 - $
 791+ 7325 DA 6A                        dw              DROP            //          drop        ( a  )
 792+ 7327 0F 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 732B 4A 6F
 793+ 732D 12 6D 3A 69                  dw              ONE, AND_OP     //          1 and
 794+ 7331 0F 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 7333 D1 69                        dw              R_TO            //          r> 2 - + r>
 796+ 7335 8F 6A 2F 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 7339 BD 69                        dw              TO_R            //
 798+ 733B                                                              //          if
 799+ 733B 2C 64                        dw              ZBRANCH
 800+ 733D 0A 00                        dw              Accept_Else_1 - $
 801+ 733F A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 7343                                                              //          else
 803+ 7343 15 64                        dw              BRANCH
 804+ 7345 06 00                        dw              Accept_Endif_1 - $
 805+ 7347              Accept_Else_1:
 806+ 7347 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 734B              Accept_Endif_1:                                 //          endif
 808+ 734B 15 64                        dw          BRANCH
 809+ 734D 2E 00                        dw          Accept_Endif_0 - $
 810+ 734F              Accept_Else_0:                                  //      else
 811+ 734F 0F 6B                        dw              DUP             //          dup         ( a  c  c )
 812+ 7351 A9 63 0D 00                  dw              LIT, 13         //          13
 813+ 7355 4A 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 7357                                                              //          if
 815+ 7357 2C 64                        dw              ZBRANCH
 816+ 7359 0C 00                        dw              Accept_Else_2 - $
 817+ 735B DA 6A 34 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 735F 0A 6D                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 7361                                                              //          else
 820+ 7361 15 64                        dw              BRANCH
 821+ 7363 04 00                        dw              Accept_Endif_2 - $
 822+ 7365              Accept_Else_2:
 823+ 7365 0F 6B                        dw                  DUP         //              dup     ( a  c  c )
 824+ 7367                                                              //          endif
 825+ 7367              Accept_Endif_2:
 826+ 7367 90 64 CB 6B                  dw              I, CSTORE       //          i           ( a  c )
 827+ 736B 0F 6B 34 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 736F 6B 6F
 828+ 7371                                                              //          if
 829+ 7371 2C 64                        dw              ZBRANCH
 830+ 7373 08 00                        dw              Accept_Endif_3 - $
 831+ 7375 D1 69                        dw                  R_TO        //              r>
 832+ 7377 5C 6A                        dw                  ONE_SUBTRACT//              1-
 833+ 7379 BD 69                        dw                  TO_R        //              >r
 834+ 737B                                                              //          endif
 835+ 737B              Accept_Endif_3:
 836+ 737B              Accept_Endif_0:                                 //      endif
 837+ 737B D8 6F                        dw          EMIT                //      emit
 838+ 737D 0A 6D 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 7381 50 6A
 839+ 7383 AF 6B                        dw          STORE               //          ( zero pad )
 840+ 7385 90 64                        dw          I                   //      i
 841+ 7387 90 64 BD 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 738B EC 69
 842+ 738D 2C 64                        dw          ZBRANCH             //
 843+ 738F 06 00                        dw              Accept_Endif_4 - $
 844+ 7391 41 64                        dw                  C_LEAVE     //              leave
 845+ 7393 06 00                        dw                  Accept_Leave - $
 846+ 7395              Accept_Endif_4:                                 //      endif
 847+ 7395                                                              // loop
 848+ 7395 04 64                        dw      C_LOOP
 849+ 7397 7A FF                        dw      Accept_Loop - $
 850+ 7399              Accept_Leave:
 851+ 7399 02 6B 3C 6F                  dw      SWAP, SUBTRACT          // swap -
 852+ 739D 50 6A                        dw      ONE_PLUS                // 1+
 853+ 739F 0F 6B CA 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 73A3 AF 6B
 854+ 73A5 AA 69                        dw      EXIT                    // ;
 855+ 73A7
 856+ 73A7              //  ______________________________________________________________________
 857+ 73A7              //
 858+ 73A7              // expect      a n --
 859+ 73A7              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 73A7              // CR stops input. A 'nul' is added as trailer.
 861+ 73A7              // n2 is the string length. n2 is kept in span user variable also.
 862+ 73A7              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 73A7              //              dw      ACCEPT, DROP            // accept drop
 864+ 73A7              //              dw      EXIT                    // ;
 865+ 73A7
 866+ 73A7              //  ______________________________________________________________________
 867+ 73A7              //
 868+ 73A7              // query        --
 869+ 73A7              // Accept at most 80 character from console. CR stops.
 870+ 73A7              // Text is stored in TIB. Variable IN is zeroed.
 871+ 73A7                              Colon_Def QUERY, "QUERY", is_normal
 871+ 73A7             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 73A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 73A7             >
 871+ 73A7             >                // dummy db directives used to calculate length of namec
 871+ 73A7 51 55 45 52 >                db      "QUERY"
 871+ 73AB 59          >
 871+ 73AC             >len_NFA         defl    $ - temp_NFA
 871+ 73AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 73A7             >
 871+ 73A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 73A8 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 73AC 59          >
 871+ 73AD             >                org     $-1                 // alter last byte of Name just above to set
 871+ 73AC D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 73AD             >
 871+ 73AD F8 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 73AF             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 73AF 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 73B1             >                else
 871+ 73B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 871+ 73B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 73B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 73B1             >
 871+ 73B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 73B1 9D 6D A2 6B                  dw      TIB, FETCH              // tib @
 873+ 73B5 A9 63 50 00                  dw      LIT, 80                 // 80
 874+ 73B9 01 73 DA 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 73BD 0A 6D 12 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 73C1 AF 6B
 876+ 73C3 AA 69                        dw      EXIT                    // ;
 877+ 73C5
 878+ 73C5              //  ______________________________________________________________________
 879+ 73C5              //
 880+ 73C5              // fill        a n c --
 881+ 73C5              // If n > 0, fills n locations starting from address a with the value c.
 882+ 73C5                              New_Def FILL, "FILL", is_code, is_normal
 882+ 73C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 73C5             >
 882+ 73C5             >                // dummy db directives used to calculate length of namec
 882+ 73C5 46 49 4C 4C >                db      "FILL"
 882+ 73C9             >len_NFA         defl    $ - temp_NFA
 882+ 73C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 73C5             >
 882+ 73C5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 73C6 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 73CA             >                org     $-1                 // alter last byte of Name just above to set
 882+ 73C9 CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 73CA             >
 882+ 73CA A7 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 73CC             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 73CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 882+ 73CC             >                else
 882+ 73CC CE 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 882+ 73CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 73CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 73CE             >
 882+ 73CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 73CE D9                           exx
 884+ 73CF D1                           pop     de                  // de has character
 885+ 73D0 C1                           pop     bc                  // bc has counter
 886+ 73D1 E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 73D2              Fill_Loop:
 888+ 73D2 78                               ld      a, b
 889+ 73D3 B1                               or      c
 890+ 73D4 28 05                        jr      z, Fill_While_End
 891+ 73D6 73                               ld      (hl), e
 892+ 73D7 0B                               dec     bc
 893+ 73D8 23                               inc     hl
 894+ 73D9 18 F7                        jr      Fill_Loop
 895+ 73DB              Fill_While_End:
 896+ 73DB D9                           exx
 897+ 73DC
 898+ 73DC                              next
 898+ 73DC DD E9       >                jp      (ix)
 899+ 73DE
 900+ 73DE              //  ______________________________________________________________________
 901+ 73DE              //
 902+ 73DE              // erase        a n --
 903+ 73DE              // If n > 0, fills n locations starting from address a with 'nul' characters.
 904+ 73DE                              Colon_Def ERASE, "ERASE", is_normal
 904+ 73DE             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 904+ 73DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ 73DE             >
 904+ 73DE             >                // dummy db directives used to calculate length of namec
 904+ 73DE 45 52 41 53 >                db      "ERASE"
 904+ 73E2 45          >
 904+ 73E3             >len_NFA         defl    $ - temp_NFA
 904+ 73E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ 73DE             >
 904+ 73DE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ 73DF 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 904+ 73E3 45          >
 904+ 73E4             >                org     $-1                 // alter last byte of Name just above to set
 904+ 73E3 C5          >                db      {b $} | END_BIT     // msb as name end
 904+ 73E4             >
 904+ 73E4 C5 73       >                dw      last_NFA            // Link to previous definition Name
 904+ 73E6             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 73E6 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 73E8             >                else
 904+ 73E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 904+ 73E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 73E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 73E8             >
 904+ 73E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 73E8 0A 6D CC 73                  dw      ZERO, FILL              // 0 fill
 906+ 73EC AA 69                        dw      EXIT                    // ;
 907+ 73EE
 908+ 73EE              //  ______________________________________________________________________
 909+ 73EE              //
 910+ 73EE              // blanks       a n --
 911+ 73EE              // If n > 0, fills n locations starting from address a with 'nul' characters.
 912+ 73EE                              Colon_Def BLANKS, "BLANKS", is_normal
 912+ 73EE             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 912+ 73EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 73EE             >
 912+ 73EE             >                // dummy db directives used to calculate length of namec
 912+ 73EE 42 4C 41 4E >                db      "BLANKS"
 912+ 73F2 4B 53       >
 912+ 73F4             >len_NFA         defl    $ - temp_NFA
 912+ 73F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 73EE             >
 912+ 73EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 73EF 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 912+ 73F3 4B 53       >
 912+ 73F5             >                org     $-1                 // alter last byte of Name just above to set
 912+ 73F4 D3          >                db      {b $} | END_BIT     // msb as name end
 912+ 73F5             >
 912+ 73F5 DE 73       >                dw      last_NFA            // Link to previous definition Name
 912+ 73F7             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 73F7 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 73F9             >                else
 912+ 73F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 73F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 73F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 73F9             >
 912+ 73F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 73F9 34 6D CC 73                  dw      BL, FILL                // bl fill
 914+ 73FD AA 69                        dw      EXIT                    // ;
 915+ 73FF
 916+ 73FF              //  ______________________________________________________________________
 917+ 73FF              //
 918+ 73FF              // hold         c --
 919+ 73FF              // Used between <# and #> to insert a character c in numeric formatting.
 920+ 73FF                              Colon_Def HOLD, "HOLD", is_normal
 920+ 73FF             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 920+ 73FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ 73FF             >
 920+ 73FF             >                // dummy db directives used to calculate length of namec
 920+ 73FF 48 4F 4C 44 >                db      "HOLD"
 920+ 7403             >len_NFA         defl    $ - temp_NFA
 920+ 7403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ 73FF             >
 920+ 73FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ 7400 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 920+ 7404             >                org     $-1                 // alter last byte of Name just above to set
 920+ 7403 C4          >                db      {b $} | END_BIT     // msb as name end
 920+ 7404             >
 920+ 7404 EE 73       >                dw      last_NFA            // Link to previous definition Name
 920+ 7406             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 7406 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 7408             >                else
 920+ 7408 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 920+ 7408             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 7408             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 7408             >
 920+ 7408             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 7408 2B 6D                        dw      NEG_ONE                 // -1
 922+ 740A 8B 6E 7F 6B                  dw      HLD, PLUSSTORE          // hld +!
 923+ 740E 8B 6E A2 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 923+ 7412 CB 6B
 924+ 7414 AA 69                        dw      EXIT                    // ;
 925+ 7416
 926+ 7416              //  ______________________________________________________________________
 927+ 7416              //
 928+ 7416              // pad         -- a
 929+ 7416              // leaves the buffer text address. This is at a fixed distance over HERE.
 930+ 7416                              Colon_Def PAD, "PAD", is_normal
 930+ 7416             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 930+ 7416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 7416             >
 930+ 7416             >                // dummy db directives used to calculate length of namec
 930+ 7416 50 41 44    >                db      "PAD"
 930+ 7419             >len_NFA         defl    $ - temp_NFA
 930+ 7419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 7416             >
 930+ 7416 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 7417 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 930+ 741A             >                org     $-1                 // alter last byte of Name just above to set
 930+ 7419 C4          >                db      {b $} | END_BIT     // msb as name end
 930+ 741A             >
 930+ 741A FF 73       >                dw      last_NFA            // Link to previous definition Name
 930+ 741C             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 741C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 741E             >                else
 930+ 741E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 741E             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 741E             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 741E             >
 930+ 741E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 741E E9 6E                        dw      HERE                    // here
 932+ 7420 A9 63 44 00                  dw      LIT, 68                 // 68
 933+ 7424 2F 6A                        dw      PLUS                    // +
 934+ 7426 AA 69                        dw      EXIT                    // ;
 935+ 7428
 936+ 7428              //  ______________________________________________________________________
 937+ 7428              //
 938+ 7428              // word         c -- a
 939+ 7428              // reads characters from input streams until it encouners a c delimiter.
 940+ 7428              // Stores that packet so it starts from HERE
 941+ 7428              // WORD leaves a counter as first byte and ends the packet with two spaces.
 942+ 7428              // Other occurrences of c are ignored.
 943+ 7428              // If BLK is zero, text is taken from terminal buffer TIB.
 944+ 7428              // Otherwise text is taken from the disk-block given by BLK.
 945+ 7428              // "in" variable is incremented of the number of character read.
 946+ 7428              // The number of characters read is given by ENCLOSE.
 947+ 7428                              Colon_Def WORD, "WORD", is_normal
 947+ 7428             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 947+ 7428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 7428             >
 947+ 7428             >                // dummy db directives used to calculate length of namec
 947+ 7428 57 4F 52 44 >                db      "WORD"
 947+ 742C             >len_NFA         defl    $ - temp_NFA
 947+ 742C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 7428             >
 947+ 7428 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 7429 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 947+ 742D             >                org     $-1                 // alter last byte of Name just above to set
 947+ 742C C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 742D             >
 947+ 742D 16 74       >                dw      last_NFA            // Link to previous definition Name
 947+ 742F             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 742F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 7431             >                else
 947+ 7431 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 7431             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 7431             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 7431             >
 947+ 7431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 7431 09 6E A2 6B                  dw      BLK, FETCH              // blk @
 949+ 7435                                                              // if
 950+ 7435 2C 64                        dw      ZBRANCH
 951+ 7437 0C 00                        dw      Word_Else - $
 952+ 7439 09 6E A2 6B                  dw          BLK, FETCH          //      blk @
 953+ 743D 82 7D                        dw          BLOCK               //      block ( forward )
 954+ 743F                                                              // else
 955+ 743F 15 64                        dw      BRANCH
 956+ 7441 06 00                        dw      Word_Endif - $
 957+ 7443              Word_Else:
 958+ 7443 9D 6D A2 6B                  dw         TIB, FETCH           //      tib @
 959+ 7447              Word_Endif:                                     // endif
 960+ 7447 12 6E A2 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 960+ 744B 2F 6A
 961+ 744D 02 6B 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 962+ 7451 E9 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 962+ 7455 22 00 F7 73
 963+ 7459 12 6E 7F 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 964+ 745D CA 6A 3C 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 964+ 7461 BD 69
 965+ 7463 E5 69 E9 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 965+ 7467 CB 6B
 966+ 7469 2F 6A                        dw      PLUS                    // +
 967+ 746B E9 6E 50 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 967+ 746F D1 69
 968+ 7471 9D 68                        dw      CMOVE                   // cmove
 969+ 7473 E9 6E                        dw      HERE                    // here
 970+ 7475 AA 69                        dw      EXIT                    // ;
 971+ 7477
 972+ 7477              //  ______________________________________________________________________
 973+ 7477              //
 974+ 7477              // (.")         --
 975+ 7477              // Direct procedure compiled by ." and  .(  It executes TYPE.
 976+ 7477                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 976+ 7477             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 976+ 7477             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ 7477             >
 976+ 7477             >                // dummy db directives used to calculate length of namec
 976+ 7477 28 2E 22 29 >                db      '(.")'
 976+ 747B             >len_NFA         defl    $ - temp_NFA
 976+ 747B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ 7477             >
 976+ 7477 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ 7478 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 976+ 747C             >                org     $-1                 // alter last byte of Name just above to set
 976+ 747B A9          >                db      {b $} | END_BIT     // msb as name end
 976+ 747C             >
 976+ 747C 28 74       >                dw      last_NFA            // Link to previous definition Name
 976+ 747E             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 747E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 7480             >                else
 976+ 7480 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 976+ 7480             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 7480             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 7480             >
 976+ 7480             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 7480 E5 69 48 72                  dw      R_OP, COUNT             // r count
 978+ 7484 0F 6B 50 6A                  dw      DUP, ONE_PLUS           // dup 1+
 979+ 7488 D1 69 2F 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 979+ 748C BD 69
 980+ 748E 6A 72                        dw      TYPE                    // type
 981+ 7490 AA 69                        dw      EXIT                    // ;
 982+ 7492
 983+ 7492              //  ______________________________________________________________________
 984+ 7492              //
 985+ 7492              // char         -- c
 986+ 7492              // get first character from next input word
 987+ 7492                              Colon_Def CHAR,  "CHAR", is_normal
 987+ 7492             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 987+ 7492             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 7492             >
 987+ 7492             >                // dummy db directives used to calculate length of namec
 987+ 7492 43 48 41 52 >                db      "CHAR"
 987+ 7496             >len_NFA         defl    $ - temp_NFA
 987+ 7496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 7492             >
 987+ 7492 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 7493 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 987+ 7497             >                org     $-1                 // alter last byte of Name just above to set
 987+ 7496 D2          >                db      {b $} | END_BIT     // msb as name end
 987+ 7497             >
 987+ 7497 77 74       >                dw      last_NFA            // Link to previous definition Name
 987+ 7499             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 7499 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 749B             >                else
 987+ 749B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 749B             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 749B             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 749B             >
 987+ 749B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 749B 34 6D 2F 74                  dw      BL, WORD                // bl word
 989+ 749F 50 6A BD 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 990+ 74A3 AA 69                        dw      EXIT                    // ;
 991+ 74A5
 992+ 74A5              //  ______________________________________________________________________
 993+ 74A5              //
 994+ 74A5              // ,"           --
 995+ 74A5              // compiles a string terminated by " as a counted string from next input stream
 996+ 74A5                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 996+ 74A5             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 996+ 74A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 74A5             >
 996+ 74A5             >                // dummy db directives used to calculate length of namec
 996+ 74A5 2C 22       >                db      ',"'
 996+ 74A7             >len_NFA         defl    $ - temp_NFA
 996+ 74A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 74A5             >
 996+ 74A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 74A6 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 996+ 74A8             >                org     $-1                 // alter last byte of Name just above to set
 996+ 74A7 A2          >                db      {b $} | END_BIT     // msb as name end
 996+ 74A8             >
 996+ 74A8 92 74       >                dw      last_NFA            // Link to previous definition Name
 996+ 74AA             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 74AA 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 74AC             >                else
 996+ 74AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 74AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 74AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 74AC             >
 996+ 74AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 74AC A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 998+ 74B0 2F 74                        dw      WORD                    // word
 999+ 74B2 BD 6B 50 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
1000+ 74B6 F9 6E                        dw      ALLOT                   // allot
1001+ 74B8 0A 6D 16 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1002+ 74BC AA 69                        dw      EXIT
1003+ 74BE
1004+ 74BE              //  ______________________________________________________________________
1005+ 74BE              //
1006+ 74BE              // .c           c --
1007+ 74BE              // intermediate general purpose string builder, used by ." and .(
1008+ 74BE                              Colon_Def DOT_C,  ".C", is_immediate
1008+ 74BE             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1008+ 74BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 74BE             >
1008+ 74BE             >                // dummy db directives used to calculate length of namec
1008+ 74BE 2E 43       >                db      ".C"
1008+ 74C0             >len_NFA         defl    $ - temp_NFA
1008+ 74C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 74BE             >
1008+ 74BE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 74BF 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1008+ 74C1             >                org     $-1                 // alter last byte of Name just above to set
1008+ 74C0 C3          >                db      {b $} | END_BIT     // msb as name end
1008+ 74C1             >
1008+ 74C1 A5 74       >                dw      last_NFA            // Link to previous definition Name
1008+ 74C3             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 74C3 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 74C5             >                else
1008+ 74C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1008+ 74C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 74C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 74C5             >
1008+ 74C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 74C5 55 6E A2 6B                  dw      STATE, FETCH            // state @
1010+ 74C9                                                              // if
1011+ 74C9 2C 64                        dw      ZBRANCH
1012+ 74CB 12 00                        dw      Dot_C_Else - $
1013+ 74CD 41 71 7E 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1014+ 74D1 2F 74 BD 6B                  dw          WORD, CFETCH        //      word c@
1015+ 74D5 50 6A F9 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1016+ 74D9                                                              // else
1017+ 74D9 15 64                        dw      BRANCH
1018+ 74DB 08 00                        dw      Dot_C_Endif - $
1019+ 74DD              Dot_C_Else:
1020+ 74DD 2F 74 48 72                  dw          WORD, COUNT, TYPE   //      word count type
1020+ 74E1 6A 72
1021+ 74E3              Dot_C_Endif:                                    // endif
1022+ 74E3 AA 69                        dw      EXIT                    ;
1023+ 74E5
1024+ 74E5              //  ______________________________________________________________________
1025+ 74E5              //
1026+ 74E5              // ."           c --
1027+ 74E5                              Colon_Def DOT_QUOTE,  '."', is_immediate
1027+ 74E5             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1027+ 74E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 74E5             >
1027+ 74E5             >                // dummy db directives used to calculate length of namec
1027+ 74E5 2E 22       >                db      '."'
1027+ 74E7             >len_NFA         defl    $ - temp_NFA
1027+ 74E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 74E5             >
1027+ 74E5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 74E6 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1027+ 74E8             >                org     $-1                 // alter last byte of Name just above to set
1027+ 74E7 A2          >                db      {b $} | END_BIT     // msb as name end
1027+ 74E8             >
1027+ 74E8 BE 74       >                dw      last_NFA            // Link to previous definition Name
1027+ 74EA             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 74EA 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 74EC             >                else
1027+ 74EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1027+ 74EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 74EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 74EC             >
1027+ 74EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 74EC A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1029+ 74F0 C3 74                        dw      DOT_C                   // [compile] .c
1030+ 74F2 AA 69                        dw      EXIT                    // ; immediate
1031+ 74F4
1032+ 74F4              //  ______________________________________________________________________
1033+ 74F4              //
1034+ 74F4              // .(           c --
1035+ 74F4                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1035+ 74F4             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1035+ 74F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ 74F4             >
1035+ 74F4             >                // dummy db directives used to calculate length of namec
1035+ 74F4 2E 28       >                db      ".("
1035+ 74F6             >len_NFA         defl    $ - temp_NFA
1035+ 74F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ 74F4             >
1035+ 74F4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ 74F5 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1035+ 74F7             >                org     $-1                 // alter last byte of Name just above to set
1035+ 74F6 A8          >                db      {b $} | END_BIT     // msb as name end
1035+ 74F7             >
1035+ 74F7 E5 74       >                dw      last_NFA            // Link to previous definition Name
1035+ 74F9             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 74F9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1035+ 74FB             >                else
1035+ 74FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1035+ 74FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 74FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 74FB             >
1035+ 74FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 74FB A9 63 29 00                  dw      LIT, ")"                // [char] )
1037+ 74FF C3 74                        dw      DOT_C                   // [compile] .c
1038+ 7501 AA 69                        dw      EXIT                    // ; immediate
1039+ 7503
1040+ 7503              //  ______________________________________________________________________
1041+ 7503              //
1042+ 7503              // (sgn)        a -- a f
1043+ 7503              // determines if char in addr a is a sign (+ or -), and in that case increments
1044+ 7503              // a flag. Returns f as the sign, true for negative, false for positive.
1045+ 7503              // called by NUMBER and (EXP)
1046+ 7503                              Colon_Def CSGN,  "(SGN)", is_normal
1046+ 7503             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1046+ 7503             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1046+ 7503             >
1046+ 7503             >                // dummy db directives used to calculate length of namec
1046+ 7503 28 53 47 4E >                db      "(SGN)"
1046+ 7507 29          >
1046+ 7508             >len_NFA         defl    $ - temp_NFA
1046+ 7508             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1046+ 7503             >
1046+ 7503 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1046+ 7504 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1046+ 7508 29          >
1046+ 7509             >                org     $-1                 // alter last byte of Name just above to set
1046+ 7508 A9          >                db      {b $} | END_BIT     // msb as name end
1046+ 7509             >
1046+ 7509 F4 74       >                dw      last_NFA            // Link to previous definition Name
1046+ 750B             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1046+ 750B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1046+ 750D             >                else
1046+ 750D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1046+ 750D             >                endif           ; ok        // for other definitions it "points" the correct handler
1046+ 750D             >                // Use of "; ok" to suppress "warning[fwdref]"
1046+ 750D             >
1046+ 750D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1047+ 750D 0F 6B 50 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1047+ 7511 BD 6B
1048+ 7513 0F 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1048+ 7517 2D 00 4A 6F
1049+ 751B                                                              // if
1050+ 751B 2C 64                        dw      ZBRANCH
1051+ 751D 12 00                        dw      CSgn_Else_0 - $
1052+ 751F DA 6A                        dw          DROP                //      drop
1053+ 7521 50 6A                        dw          ONE_PLUS            //      1+
1054+ 7523 12 6D 68 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1054+ 7527 7F 6B
1055+ 7529 12 6D                        dw          ONE                 //      1
1056+ 752B                                                              // else
1057+ 752B 15 64                        dw      BRANCH
1058+ 752D 16 00                        dw      CSgn_Endif_0 - $
1059+ 752F              CSgn_Else_0:
1060+ 752F A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1060+ 7533 4A 6F
1061+ 7535                                                              //      if
1062+ 7535 2C 64                        dw          ZBRANCH
1063+ 7537 0A 00                        dw          CSgn_Endif_1 - $
1064+ 7539 50 6A                        dw              ONE_PLUS        //          1+
1065+ 753B 12 6D 68 6E                  dw              ONE, DPL        //          1 dpl
1066+ 753F 7F 6B                        dw              PLUSSTORE       //          +!
1067+ 7541              CSgn_Endif_1                                    //      endif
1068+ 7541 0A 6D                        dw          ZERO                //      0
1069+ 7543              CSgn_Endif_0:                                   // endif
1070+ 7543 AA 69                        dw      EXIT
1071+ 7545
1072+ 7545              //  ______________________________________________________________________
1073+ 7545              //
1074+ 7545              // (number)     d a -- d1 a1
1075+ 7545              // using the current BASE parse characters stored in address a
1076+ 7545              // accumulating a double precision integer d
1077+ 7545              // the process stops at the first not-convertible character
1078+ 7545              // A double-number is kept in CPU registers as HLDE.
1079+ 7545              // On the stack a double number is treated as two single numbers
1080+ 7545              // where HL is on the top of the stack and DE is the second from top,
1081+ 7545              // so in the stack memory it appears as LHED.
1082+ 7545              // Instead, in 2VARIABLE a double number is stored as EDLH.
1083+ 7545                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1083+ 7545             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1083+ 7545             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 7545             >
1083+ 7545             >                // dummy db directives used to calculate length of namec
1083+ 7545 28 4E 55 4D >                db      "(NUMBER)"
1083+ 7549 42 45 52 29 >
1083+ 754D             >len_NFA         defl    $ - temp_NFA
1083+ 754D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 7545             >
1083+ 7545 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 7546 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1083+ 754A 42 45 52 29 >
1083+ 754E             >                org     $-1                 // alter last byte of Name just above to set
1083+ 754D A9          >                db      {b $} | END_BIT     // msb as name end
1083+ 754E             >
1083+ 754E 03 75       >                dw      last_NFA            // Link to previous definition Name
1083+ 7550             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 7550 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 7552             >                else
1083+ 7552 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 7552             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 7552             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 7552             >
1083+ 7552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 7552                                                              // begin
1085+ 7552              CNumber_Begin:
1086+ 7552 50 6A                        dw          ONE_PLUS            //      1+
1087+ 7554 0F 6B BD 69                  dw          DUP, TO_R           //      dup >r
1088+ 7558 BD 6B                        dw          CFETCH              //      @
1089+ 755A 5F 6E A2 6B                  dw          BASE, FETCH         //      base @
1090+ 755E B1 64                        dw          DIGIT               //      digit
1091+ 7560                                                              // while
1092+ 7560 2C 64                        dw      ZBRANCH
1093+ 7562 2C 00                        dw      CNumber_While_end - $
1094+ 7564 02 6B                        dw          SWAP                //      swap
1095+ 7566 5F 6E A2 6B                  dw          BASE, FETCH         //      base @
1096+ 756A D0 68                        dw          UM_MUL              //      um*
1097+ 756C DA 6A 1C 6B                  dw          DROP, ROT           //      drop rot
1098+ 7570 5F 6E A2 6B                  dw          BASE, FETCH         //      base @
1099+ 7574 D0 68                        dw          UM_MUL              //      um*
1100+ 7576 3C 6A                        dw          DPLUS               //      d+
1101+ 7578 68 6E A2 6B                  dw          DPL, FETCH          //      dpl @
1102+ 757C 50 6A                        dw          ONE_PLUS            //      1+
1103+ 757E                                                              //      if
1104+ 757E 2C 64                        dw          ZBRANCH
1105+ 7580 08 00                        dw          CNumber_Endif - $
1106+ 7582 12 6D 68 6E                  dw              ONE, DPL        //          1 dpl
1107+ 7586 7F 6B                        dw              PLUSSTORE       //          +!
1108+ 7588              CNumber_Endif:                                  //      endif
1109+ 7588 D1 69                        dw             R_TO             //      r>  ( balance rp )
1110+ 758A 15 64                        dw      BRANCH
1111+ 758C C6 FF                        dw      CNumber_Begin - $
1112+ 758E              CNumber_While_end:                              // repeat
1113+ 758E D1 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1114+ 7590 AA 69                        dw      EXIT                    // ;
1115+ 7592
1116+ 7592              //  ______________________________________________________________________
1117+ 7592              //
1118+ 7592              // number       a -- d
1119+ 7592                              Colon_Def NUMBER,  "NUMBER", is_normal
1119+ 7592             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1119+ 7592             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 7592             >
1119+ 7592             >                // dummy db directives used to calculate length of namec
1119+ 7592 4E 55 4D 42 >                db      "NUMBER"
1119+ 7596 45 52       >
1119+ 7598             >len_NFA         defl    $ - temp_NFA
1119+ 7598             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 7592             >
1119+ 7592 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 7593 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1119+ 7597 45 52       >
1119+ 7599             >                org     $-1                 // alter last byte of Name just above to set
1119+ 7598 D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 7599             >
1119+ 7599 45 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 759B             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 759B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 759D             >                else
1119+ 759D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 759D             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 759D             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 759D             >
1119+ 759D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 759D 0A 6D 0A 6D                  dw      ZERO, ZERO              // 0 0
1121+ 75A1 1C 6B                        dw      ROT                     // rot
1122+ 75A3 0B 75 BD 69                  dw      CSGN, TO_R              // (sgn) >r
1123+ 75A7 2B 6D 68 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1123+ 75AB AF 6B
1124+ 75AD 50 75                        dw      CNUMBER                 // (number)
1125+ 75AF 0F 6B BD 6B                  dw      DUP, CFETCH             // dup c@
1126+ 75B3 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1126+ 75B7 4A 6F
1127+ 75B9                                                              // if
1128+ 75B9 2C 64                        dw      ZBRANCH
1129+ 75BB 0A 00                        dw      Number_Endif_1 - $
1130+ 75BD 0A 6D 68 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1130+ 75C1 AF 6B
1131+ 75C3 50 75                        dw          CNUMBER             //      (number)
1132+ 75C5              Number_Endif_1:                                 // endif
1133+ 75C5 BD 6B 34 6D                  dw      CFETCH, BL              // c@ bl
1134+ 75C9 3C 6F 0A 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1134+ 75CD AE 70
1135+ 75CF D1 69                        dw      R_TO                    // r>
1136+ 75D1                                                              // if
1137+ 75D1 2C 64                        dw      ZBRANCH
1138+ 75D3 04 00                        dw      Number_Endif_2 - $
1139+ 75D5 B0 6A                        dw          DMINUS              //      dminus
1140+ 75D7              Number_Endif_2:                                 // endif
1141+ 75D7 AA 69                        dw      EXIT                    // ;
1142+ 75D9
1143+ 75D9              //  ______________________________________________________________________
1144+ 75D9              //
1145+ 75D9              // -find        a -- d
1146+ 75D9                              Colon_Def LFIND,  "-FIND", is_normal
1146+ 75D9             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1146+ 75D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 75D9             >
1146+ 75D9             >                // dummy db directives used to calculate length of namec
1146+ 75D9 2D 46 49 4E >                db      "-FIND"
1146+ 75DD 44          >
1146+ 75DE             >len_NFA         defl    $ - temp_NFA
1146+ 75DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 75D9             >
1146+ 75D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 75DA 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1146+ 75DE 44          >
1146+ 75DF             >                org     $-1                 // alter last byte of Name just above to set
1146+ 75DE C4          >                db      {b $} | END_BIT     // msb as name end
1146+ 75DF             >
1146+ 75DF 92 75       >                dw      last_NFA            // Link to previous definition Name
1146+ 75E1             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 75E1 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1146+ 75E3             >                else
1146+ 75E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1146+ 75E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 75E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 75E3             >
1146+ 75E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 75E3 34 6D 2F 74                  dw      BL, WORD                // bl word
1148+ 75E7 3D 6E A2 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1148+ 75EB A2 6B
1149+ 75ED 26 65                        dw      C_FIND                  // (find)
1150+ 75EF BD 6F                        dw      QDUP                    // ?dup
1151+ 75F1 EC 69                        dw      ZEQUAL                  // 0=
1152+ 75F3                                                              // if
1153+ 75F3 2C 64                        dw      ZBRANCH
1154+ 75F5 08 00                        dw      LFind_Endif - $
1155+ 75F7 E9 6E                        dw          HERE                //      here
1156+ 75F9 2A 70                        dw          LATEST              //      latest
1157+ 75FB 26 65                        dw          C_FIND              //      (find)
1158+ 75FD              LFind_Endif:                                    // endif
1159+ 75FD AA 69                        dw      EXIT                    // ;
1160+ 75FF
1161+ 75FF              //  ______________________________________________________________________
1162+ 75FF              //
1163+ 75FF              // (abort)      --
1164+ 75FF                              Colon_Def CABORT,  "(ABORT)", is_normal
1164+ 75FF             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1164+ 75FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ 75FF             >
1164+ 75FF             >                // dummy db directives used to calculate length of namec
1164+ 75FF 28 41 42 4F >                db      "(ABORT)"
1164+ 7603 52 54 29    >
1164+ 7606             >len_NFA         defl    $ - temp_NFA
1164+ 7606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ 75FF             >
1164+ 75FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ 7600 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1164+ 7604 52 54 29    >
1164+ 7607             >                org     $-1                 // alter last byte of Name just above to set
1164+ 7606 A9          >                db      {b $} | END_BIT     // msb as name end
1164+ 7607             >
1164+ 7607 D9 75       >                dw      last_NFA            // Link to previous definition Name
1164+ 7609             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 7609 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 760B             >                else
1164+ 760B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1164+ 760B             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 760B             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 760B             >
1164+ 760B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 760B D0 78                        dw      ABORT                   // abort
1166+ 760D AA 69                        dw      EXIT                    // ;
1167+ 760F
1168+ 760F              //  ______________________________________________________________________
1169+ 760F              //
1170+ 760F              // error        n --
1171+ 760F              // raise an error
1172+ 760F              // if WARNING is 0, prints "MSG#n".
1173+ 760F              // if WARNING is 1, prints line n of screen 4.
1174+ 760F              // if WARNING is -1 does (ABORT) that normally does ABORT
1175+ 760F              // value can be negative or beyond block 4.
1176+ 760F                              Colon_Def ERROR,  "ERROR", is_normal
1176+ 760F             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1176+ 760F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ 760F             >
1176+ 760F             >                // dummy db directives used to calculate length of namec
1176+ 760F 45 52 52 4F >                db      "ERROR"
1176+ 7613 52          >
1176+ 7614             >len_NFA         defl    $ - temp_NFA
1176+ 7614             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ 760F             >
1176+ 760F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ 7610 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1176+ 7614 52          >
1176+ 7615             >                org     $-1                 // alter last byte of Name just above to set
1176+ 7614 D2          >                db      {b $} | END_BIT     // msb as name end
1176+ 7615             >
1176+ 7615 FF 75       >                dw      last_NFA            // Link to previous definition Name
1176+ 7617             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 7617 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 7619             >                else
1176+ 7619 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1176+ 7619             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 7619             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 7619             >
1176+ 7619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 7619 B5 6D A2 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1177+ 761D 07 6A
1178+ 761F                                                              // if
1179+ 761F 2C 64                        dw      ZBRANCH
1180+ 7621 04 00                        dw      Error_Endif_1 - $
1181+ 7623 09 76                        dw          CABORT              //      (abort)
1182+ 7625              Error_Endif_1:                                  // endif
1183+ 7625 E9 6E 48 72                  dw      HERE, COUNT, TYPE       // here count type
1183+ 7629 6A 72
1184+ 762B 7E 74                        dw      C_DOT_QUOTE             // .( ? )
1185+ 762D 02 3F 20                     db      2, "? "
1186+ 7630 01 7B                        dw      MESSAGE                 // message  ( forward )
1187+ 7632 8C 6D A2 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1187+ 7636 81 69
1188+ 7638 09 6E A2 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1188+ 763C BD 6F
1189+ 763E                                                              // if
1190+ 763E 2C 64                        dw      ZBRANCH
1191+ 7640 08 00                        dw      Error_Endif_2 - $
1192+ 7642 12 6E A2 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1192+ 7646 02 6B
1193+ 7648              Error_Endif_2:                                  // endif
1194+ 7648 8F 78                        dw      QUIT                    // quit ( forward )
1195+ 764A AA 69                        dw      EXIT                    // ;
1196+ 764C              //  ______________________________________________________________________
1197+ 764C              //
1198+ 764C              // id.          nfa --
1199+ 764C                              Colon_Def ID_DOT,  "ID.", is_normal
1199+ 764C             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1199+ 764C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ 764C             >
1199+ 764C             >                // dummy db directives used to calculate length of namec
1199+ 764C 49 44 2E    >                db      "ID."
1199+ 764F             >len_NFA         defl    $ - temp_NFA
1199+ 764F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ 764C             >
1199+ 764C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ 764D 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1199+ 7650             >                org     $-1                 // alter last byte of Name just above to set
1199+ 764F AE          >                db      {b $} | END_BIT     // msb as name end
1199+ 7650             >
1199+ 7650 0F 76       >                dw      last_NFA            // Link to previous definition Name
1199+ 7652             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 7652 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 7654             >                else
1199+ 7654 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1199+ 7654             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 7654             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 7654             >
1199+ 7654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 7654 1C 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1200+ 7658 20 00 A9 63
1200+ 765C 60 00
1201+ 765E CC 73                        dw      FILL                    // fill
1202+ 7660 0F 6B 68 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1202+ 7664 3A 70
1203+ 7666 CA 6A 3C 6F                  dw      OVER, SUBTRACT          // over -
1204+ 766A 1C 74 02 6B                  dw      PAD, SWAP               // pad swap
1205+ 766E 9D 68                        dw      CMOVE                   // cmove
1206+ 7670 1C 74 48 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1206+ 7674 A9 63 1F 00
1207+ 7678 3A 69                        dw      AND_OP                  // and  ( use only lower bits )
1208+ 767A 6A 72 F4 6F                  dw      TYPE, SPACE             // type
1209+ 767E AA 69                        dw      EXIT                    // ;
1210+ 7680
1211+ 7680              //  ______________________________________________________________________
1212+ 7680              //
1213+ 7680              // code         -- cccc
1214+ 7680                              Colon_Def CODE,  "CODE", is_normal
1214+ 7680             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1214+ 7680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 7680             >
1214+ 7680             >                // dummy db directives used to calculate length of namec
1214+ 7680 43 4F 44 45 >                db      "CODE"
1214+ 7684             >len_NFA         defl    $ - temp_NFA
1214+ 7684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 7680             >
1214+ 7680 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 7681 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1214+ 7685             >                org     $-1                 // alter last byte of Name just above to set
1214+ 7684 C5          >                db      {b $} | END_BIT     // msb as name end
1214+ 7685             >
1214+ 7685 4C 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 7687             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 7687 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 7689             >                else
1214+ 7689 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 7689             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 7689             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 7689             >
1214+ 7689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 7689 E1 75                        dw      LFIND                   // -find
1216+ 768B                                                              // if
1217+ 768B 2C 64                        dw      ZBRANCH
1218+ 768D 10 00                        dw      Code_Endif - $
1219+ 768F DA 6A                        dw          DROP                //      drop
1220+ 7691 8C 70 52 76                  dw          TO_NAME, ID_DOT     //      >name id.
1221+ 7695 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1221+ 7699 01 7B
1222+ 769B F4 6F                        dw          SPACE               //      space
1223+ 769D              Code_Endif:                                     // endif
1224+ 769D E9 6E                        dw      HERE                    // here
1225+ 769F                                                              // ( ---- here begins NFA ---- )
1226+ 769F 0F 6B BD 6B                  dw      DUP, CFETCH             // dup c@
1227+ 76A3 A8 6D A2 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1227+ 76A7 90 6F
1228+ 76A9 50 6A F9 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1229+ 76AD 0F 6B                        dw      DUP                     // dup
1230+ 76AF A9 63                        dw      LIT
1231+ 76B1 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1232+ 76B3 95 6B                        dw      TOGGLE                  // toggle
1233+ 76B5 E9 6E 5C 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1234+ 76B9 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1234+ 76BD 95 6B
1235+ 76BF                                                              // ( ---- here is LFA ---- )
1236+ 76BF 2A 70 05 6F                  dw      LATEST, COMMA           // latest ,
1237+ 76C3 4A 6E A2 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1237+ 76C7 AF 6B
1238+ 76C9 E9 6E 78 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1238+ 76CD 05 6F
1239+ 76CF AA 69                        dw      EXIT                    // ;
1240+ 76D1
1241+ 76D1              //  ______________________________________________________________________
1242+ 76D1              //
1243+ 76D1              // create       -- cccc     ( compile time )
1244+ 76D1              //              -- a        ( run time )
1245+ 76D1                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 76D1             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 76D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 76D1             >
1245+ 76D1             >                // dummy db directives used to calculate length of namec
1245+ 76D1 43 52 45 41 >                db      "CREATE"
1245+ 76D5 54 45       >
1245+ 76D7             >len_NFA         defl    $ - temp_NFA
1245+ 76D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 76D1             >
1245+ 76D1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 76D2 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 76D6 54 45       >
1245+ 76D8             >                org     $-1                 // alter last byte of Name just above to set
1245+ 76D7 C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 76D8             >
1245+ 76D8 80 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 76DA             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 76DA 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 76DC             >                else
1245+ 76DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1245+ 76DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 76DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 76DC             >
1245+ 76DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 76DC 87 76 8D 71                  dw      CODE, SMUDGE        // code smudge
1247+ 76E0
1248+ 76E0
1249+ 76E0 E3 71                        dw      C_SEMICOLON_CODE
1250+ 76E2                              // this routine is called from the call coded in CFA
1251+ 76E2              Create_Ptr:
1252+ 76E2 13                           inc     de
1253+ 76E3 D5                           push    de                  // balance TOS before overwrite it
1254+ 76E4
1255+ 76E4                              next
1255+ 76E4 DD E9       >                jp      (ix)
1256+ 76E6
1257+ 76E6              //  ______________________________________________________________________
1258+ 76E6              //
1259+ 76E6              // [compile]    -- cccc     ( compile time )
1260+ 76E6                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 76E6             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 76E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 76E6             >
1260+ 76E6             >                // dummy db directives used to calculate length of namec
1260+ 76E6 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 76EA 50 49 4C 45 >
1260+ 76EE 5D          >
1260+ 76EF             >len_NFA         defl    $ - temp_NFA
1260+ 76EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 76E6             >
1260+ 76E6 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 76E7 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 76EB 50 49 4C 45 >
1260+ 76EF 5D          >
1260+ 76F0             >                org     $-1                 // alter last byte of Name just above to set
1260+ 76EF DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 76F0             >
1260+ 76F0 D1 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 76F2             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 76F2 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 76F4             >                else
1260+ 76F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 76F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 76F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 76F4             >
1260+ 76F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 76F4 E1 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 76F6 EC 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 76F8 0A 6D AE 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 76FC DA 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 76FE 05 6F                        dw      COMMA                   // ,
1266+ 7700 AA 69                        dw      EXIT                    // ; immediate
1267+ 7702
1268+ 7702              //  ______________________________________________________________________
1269+ 7702              //
1270+ 7702              // literal      n --      ( compile time )
1271+ 7702                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 7702             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 7702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 7702             >
1271+ 7702             >                // dummy db directives used to calculate length of namec
1271+ 7702 4C 49 54 45 >                db      "LITERAL"
1271+ 7706 52 41 4C    >
1271+ 7709             >len_NFA         defl    $ - temp_NFA
1271+ 7709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 7702             >
1271+ 7702 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 7703 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 7707 52 41 4C    >
1271+ 770A             >                org     $-1                 // alter last byte of Name just above to set
1271+ 7709 CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 770A             >
1271+ 770A E6 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 770C             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 770C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 770E             >                else
1271+ 770E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1271+ 770E             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 770E             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 770E             >
1271+ 770E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 770E 55 6E A2 6B                  dw      STATE, FETCH            // state @
1273+ 7712                                                              // if
1274+ 7712 2C 64                        dw      ZBRANCH
1275+ 7714 08 00                        dw      Literal_Endif - $
1276+ 7716 41 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1277+ 771A 05 6F                        dw          COMMA               //      ,
1278+ 771C              Literal_Endif:                                  // endif
1279+ 771C AA 69                        dw      EXIT                    // ; immediate
1280+ 771E
1281+ 771E              //  ______________________________________________________________________
1282+ 771E              //
1283+ 771E              // dliteral     n --      ( compile time )
1284+ 771E                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 771E             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 771E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 771E             >
1284+ 771E             >                // dummy db directives used to calculate length of namec
1284+ 771E 44 4C 49 54 >                db      "DLITERAL"
1284+ 7722 45 52 41 4C >
1284+ 7726             >len_NFA         defl    $ - temp_NFA
1284+ 7726             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 771E             >
1284+ 771E C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 771F 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 7723 45 52 41 4C >
1284+ 7727             >                org     $-1                 // alter last byte of Name just above to set
1284+ 7726 CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 7727             >
1284+ 7727 02 77       >                dw      last_NFA            // Link to previous definition Name
1284+ 7729             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 7729 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 772B             >                else
1284+ 772B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1284+ 772B             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 772B             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 772B             >
1284+ 772B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 772B 55 6E A2 6B                  dw      STATE, FETCH            // state @
1286+ 772F                                                              // if
1287+ 772F 2C 64                        dw      ZBRANCH
1288+ 7731 08 00                        dw      DLiteral_Endif - $
1289+ 7733 02 6B                        dw          SWAP                //      swap
1290+ 7735 0C 77 0C 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 7739              DLiteral_Endif:                                 // endif
1292+ 7739 AA 69                        dw      EXIT                    // ; immediate
1293+ 773B
1294+ 773B              //  ______________________________________________________________________
1295+ 773B              //
1296+ 773B              // [char]       n --      ( compile time )
1297+ 773B              // inside colon definition, gets first character from next input word
1298+ 773B              // and compiles it as literal.
1299+ 773B                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 773B             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 773B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 773B             >
1299+ 773B             >                // dummy db directives used to calculate length of namec
1299+ 773B 5B 43 48 41 >                db      "[CHAR]"
1299+ 773F 52 5D       >
1299+ 7741             >len_NFA         defl    $ - temp_NFA
1299+ 7741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 773B             >
1299+ 773B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 773C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 7740 52 5D       >
1299+ 7742             >                org     $-1                 // alter last byte of Name just above to set
1299+ 7741 DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 7742             >
1299+ 7742 1E 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 7744             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 7744 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 7746             >                else
1299+ 7746 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 7746             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 7746             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 7746             >
1299+ 7746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 7746 99 74 0C 77                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 774A AA 69                        dw      EXIT                    // ; immediate
1302+ 774C
1303+ 774C              //  ______________________________________________________________________
1304+ 774C              //
1305+ 774C              // 0x00         n --      ( compile time )
1306+ 774C                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 774C             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 774C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 774C             >
1306+ 774C             >                // dummy db directives used to calculate length of namec
1306+ 774C 00          >                db      $00
1306+ 774D             >len_NFA         defl    $ - temp_NFA
1306+ 774D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 774C             >
1306+ 774C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 774D 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 774E             >                org     $-1                 // alter last byte of Name just above to set
1306+ 774D 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 774E             >
1306+ 774E 3B 77       >                dw      last_NFA            // Link to previous definition Name
1306+ 7750             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 7750 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 7752             >                else
1306+ 7752 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1306+ 7752             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 7752             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 7752             >
1306+ 7752             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 7752 09 6E A2 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 7756 12 6D
1308+ 7758 82 6F                        dw      GREATER                 // > if
1309+ 775A                                                              // if
1310+ 775A 2C 64                        dw      ZBRANCH
1311+ 775C 28 00                        dw      Nul_Else_1 - $
1312+ 775E 12 6D 09 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 7762 7F 6B
1313+ 7764 0A 6D 12 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 7768 AF 6B
1314+ 776A 09 6E A2 6B                  dw          BLK, FETCH          //      blk @
1315+ 776E 56 6D                        dw          BSCR                //      b/scr
1316+ 7770 5C 6A                        dw          ONE_SUBTRACT        //      1 -
1317+ 7772 3A 69                        dw          AND_OP              //      and  ( this is tricky )
1318+ 7774 EC 69                        dw          ZEQUAL              //      0=
1319+ 7776                                                              //      if
1320+ 7776 2C 64                        dw          ZBRANCH
1321+ 7778 08 00                        dw          Nul_Endif_2 - $
1322+ 777A E0 70                        dw              QEXEC           //          ?exec
1323+ 777C D1 69 DA 6A                  dw              R_TO, DROP      //          r> drop
1324+ 7780              Nul_Endif_2:                                    //      endif
1325+ 7780 15 64                        dw      BRANCH
1326+ 7782 06 00                        dw      Nul_Endif_1 - $
1327+ 7784              Nul_Else_1:                                     // else
1328+ 7784 D1 69 DA 6A                  dw          R_TO, DROP          //      r> drop
1329+ 7788              Nul_Endif_1:                                    // endif
1330+ 7788 AA 69                        dw      EXIT                    // ;
1331+ 778A
1332+ 778A              //  ______________________________________________________________________
1333+ 778A              //
1334+ 778A              // ?stack       --
1335+ 778A              // Raise error #1 if stack is empty and you pop it
1336+ 778A              // Raise error #7 if stack is full.
1337+ 778A              // This means SP must always stay between HERE and FFFF
1338+ 778A              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 778A              // for Next 8K MMU paging this is $DOE8
1340+ 778A                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 778A             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 778A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 778A             >
1340+ 778A             >                // dummy db directives used to calculate length of namec
1340+ 778A 3F 53 54 41 >                db      "?STACK"
1340+ 778E 43 4B       >
1340+ 7790             >len_NFA         defl    $ - temp_NFA
1340+ 7790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 778A             >
1340+ 778A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 778B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 778F 43 4B       >
1340+ 7791             >                org     $-1                 // alter last byte of Name just above to set
1340+ 7790 CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 7791             >
1340+ 7791 4C 77       >                dw      last_NFA            // Link to previous definition Name
1340+ 7793             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 7793 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 7795             >                else
1340+ 7795 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 7795             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 7795             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 7795             >
1340+ 7795             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 7795 72 69                        dw      SPFETCH                 // sp@
1342+ 7797 8C 6D A2 6B                  dw      S0, FETCH               // s0 @
1343+ 779B 02 6B 57 6F                  dw      SWAP, ULESS             // swap u<
1344+ 779F 12 6D AE 70                  dw      ONE, QERROR             // 1 ?error
1345+ 77A3 E9 6E                        dw      HERE                    // here
1346+ 77A5 8C 6D A2 6B                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 77A9 6B 6F
1347+ 77AB                                                              // if
1348+ 77AB 2C 64                        dw      ZBRANCH
1349+ 77AD 14 00                        dw      QStack_Endif - $
1350+ 77AF 72 69                        dw          SPFETCH             //      sp@
1351+ 77B1 E9 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1351+ 77B5 80 00
1352+ 77B7 2F 6A 57 6F                  dw          PLUS, ULESS         //      plus u<
1353+ 77BB A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 77BF AE 70
1354+ 77C1              QStack_Endif:                                   // endif
1355+ 77C1 AA 69                        dw      EXIT                    // ;
1356+ 77C3
1357+ 77C3
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77C3                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77C3              //  ______________________________________________________________________
   2+ 77C3              //
   3+ 77C3              //  L2.asm
   4+ 77C3              //
   5+ 77C3              //  Level-2
   6+ 77C3              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77C3              //  ______________________________________________________________________
   8+ 77C3
   9+ 77C3
  10+ 77C3              //  ______________________________________________________________________
  11+ 77C3              //
  12+ 77C3              // interpret    --
  13+ 77C3              // This is the text interpreter.
  14+ 77C3              // It executes or compiles, depending on STATE, the text coming from
  15+ 77C3              // current input stream.
  16+ 77C3              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77C3              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77C3              // leaving on top of stack a single or double precision number, depending
  19+ 77C3              // on the presence of a decimal point.
  20+ 77C3              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77C3              // by the offending word.
  22+ 77C3                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77C3             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77C3             >
  22+ 77C3             >                // dummy db directives used to calculate length of namec
  22+ 77C3 49 4E 54 45 >                db      "INTERPRET"
  22+ 77C7 52 50 52 45 >
  22+ 77CB 54          >
  22+ 77CC             >len_NFA         defl    $ - temp_NFA
  22+ 77CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77C3             >
  22+ 77C3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77C4 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77C8 52 50 52 45 >
  22+ 77CC 54          >
  22+ 77CD             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77CC D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77CD             >
  22+ 77CD 8A 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77CF             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77CF 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77D1             >                else
  22+ 77D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77D1             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77D1             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77D1             >
  22+ 77D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77D1
  24+ 77D1              Interpret_Begin:                                        // begin
  25+ 77D1 E1 75                        dw          LFIND                       //      -find
  26+ 77D3                                                                      //      if
  27+ 77D3 2C 64                        dw          ZBRANCH
  28+ 77D5 1A 00                        dw          Interpret_Else_1 - $
  29+ 77D7 55 6E A2 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77DB 6B 6F
  30+ 77DD                                                                      //          if
  31+ 77DD 2C 64                        dw              ZBRANCH
  32+ 77DF 08 00                        dw              Interpret_Else_2 - $
  33+ 77E1 5E 71                        dw                  COMPILE_XT          //              compile,
  34+ 77E3                                                                      //          else
  35+ 77E3 15 64                        dw              BRANCH
  36+ 77E5 06 00                        dw              Interpret_Endif_2 - $
  37+ 77E7              Interpret_Else_2:
  38+ 77E7 BE 63 B5 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77EB              Interpret_Endif_2:                                      //          endif
  40+ 77EB                                                                      //      else
  41+ 77EB 15 64                        dw          BRANCH
  42+ 77ED 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77EF              Interpret_Else_1:
  44+ 77EF E9 6E 9B 75                  dw              HERE, NUMBER            //          here number
  45+ 77F3 68 6E A2 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77F7 50 6A
  46+ 77F9                                                                      //          if
  47+ 77F9 2C 64                        dw              ZBRANCH
  48+ 77FB 08 00                        dw              Interpret_Else_3 - $
  49+ 77FD              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77FD              //                                                      //              if
  51+ 77FD              //              dw                  ZBRANCH
  52+ 77FD              //              dw                  Interpret_Endif_4 - $
  53+ 77FD              //              dw                      ONE, ZERO       //                  1 0
  54+ 77FD              //              dw                      TWO_DROP        //                  2drop
  55+ 77FD              //Interpret_Endif_4:                                      //              endif
  56+ 77FD 29 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77FF                                                                      //          else
  58+ 77FF 15 64                        dw              BRANCH
  59+ 7801 06 00                        dw              Interpret_Endif_3 - $
  60+ 7803              Interpret_Else_3:
  61+ 7803 DA 6A                        dw                  DROP                //              drop
  62+ 7805 0C 77                        dw                  LITERAL             //              [compile]  literal
  63+ 7807              Interpret_Endif_3:                                      //          endif
  64+ 7807              Interpret_Endif_1:                                      //      endif
  65+ 7807 93 77                        dw          QSTACK                      //      ?stack
  66+ 7809 3F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 780B                                                                      //      if
  68+ 780B 2C 64                        dw          ZBRANCH
  69+ 780D 04 00                        dw          Interpret_Endif_5 - $
  70+ 780F 09 76                        dw              CABORT                  //          (abort)
  71+ 7811              Interpret_Endif_5:                                      //      endif
  72+ 7811 15 64                        dw      BRANCH
  73+ 7813 BE FF                        dw      Interpret_Begin - $
  74+ 7815 AA 69                        dw      EXIT                            // ;
  75+ 7817
  76+ 7817              //  ______________________________________________________________________
  77+ 7817              //
  78+ 7817              // vocabulary   -- cccc     ( compile time )
  79+ 7817              // Defining word used in the form   VOCABULARY cccc
  80+ 7817              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7817              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7817              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7817              // so new definitions can be inserted in that vocabulary.
  84+ 7817                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7817             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7817             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7817             >
  84+ 7817             >                // dummy db directives used to calculate length of namec
  84+ 7817 56 4F 43 41 >                db      "VOCABULARY"
  84+ 781B 42 55 4C 41 >
  84+ 781F 52 59       >
  84+ 7821             >len_NFA         defl    $ - temp_NFA
  84+ 7821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7817             >
  84+ 7817 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7818 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 781C 42 55 4C 41 >
  84+ 7820 52 59       >
  84+ 7822             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7821 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7822             >
  84+ 7822 C3 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 7824             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7824 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7826             >                else
  84+ 7826 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7826             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7826             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7826             >
  84+ 7826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7826
  86+ 7826 11 72                        dw      CBUILDS
  87+ 7828
  88+ 7828 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 782C 05 6F
  89+ 782E 4A 6E A2 6B                  dw      CURRENT, FETCH          // current @
  90+ 7832 82 6A 05 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7836 E9 6E                        dw      HERE                    // here
  92+ 7838 D6 6D A2 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 783C 05 6F
  93+ 783E D6 6D AF 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7842
  95+ 7842 21 72                        dw      DOES_TO                 // does>
  96+ 7844              Vocabulary_Does:
  97+ 7844 78 6A                        dw      CELL_PLUS               // cell+
  98+ 7846 3D 6E AF 6B                  dw      CONTEXT, STORE          // context !
  99+ 784A AA 69                        dw      EXIT                    // ;
 100+ 784C
 101+ 784C              //  ______________________________________________________________________
 102+ 784C              //
 103+ 784C              // forth        --
 104+ 784C              // Name of the first vocabulary.
 105+ 784C              // It makes FORTH the CONTEXT vocabulary.
 106+ 784C              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 784C              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 784C              // of a colon definition to be able to select the vocabulary.
 109+ 784C
 110+ 784C                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 784C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 784C             >
 110+ 784C             >                // dummy db directives used to calculate length of namec
 110+ 784C 46 4F 52 54 >                db      "FORTH"
 110+ 7850 48          >
 110+ 7851             >len_NFA         defl    $ - temp_NFA
 110+ 7851             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 784C             >
 110+ 784C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 784D 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7851 48          >
 110+ 7852             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7851 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7852             >
 110+ 7852 17 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 7854             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7854 2D 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7856             >                else
 110+ 7856 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7856             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7856             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7856             >
 110+ 7856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7856 44 78                        dw      Vocabulary_Does
 112+ 7858 81 A0                        db      $81, $A0
 113+ 785A              Forth_Latest_Ptr:
 114+ 785A 75 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 785C              Voclink_Ptr:
 116+ 785C 00 00                        dw      0
 117+ 785E              // Any new vocabulary is structured as follow:
 118+ 785E              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 785E              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 785E              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 785E              //       at creations it points to the null-word of its parent vocabulary
 122+ 785E              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 785E              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 785E              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 785E              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 785E              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 785E              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 785E
 129+ 785E              //  ______________________________________________________________________
 130+ 785E              //
 131+ 785E              // definitions  --
 132+ 785E              // Used in the form  cccc DEFINITIONS
 133+ 785E              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 785E              // vocabulary cccc.
 135+ 785E                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 785E             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 785E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 785E             >
 135+ 785E             >                // dummy db directives used to calculate length of namec
 135+ 785E 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7862 4E 49 54 49 >
 135+ 7866 4F 4E 53    >
 135+ 7869             >len_NFA         defl    $ - temp_NFA
 135+ 7869             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 785E             >
 135+ 785E 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 785F 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7863 4E 49 54 49 >
 135+ 7867 4F 4E 53    >
 135+ 786A             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7869 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 786A             >
 135+ 786A 4C 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 786C             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 786C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 786E             >                else
 135+ 786E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 786E             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 786E             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 786E             >
 135+ 786E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 786E 3D 6E A2 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7872 4A 6E AF 6B                  dw      CURRENT, STORE          // current !
 138+ 7876 AA 69                        dw      EXIT                    // ;
 139+ 7878
 140+ 7878              //  ______________________________________________________________________
 141+ 7878              //
 142+ 7878              // (            -- cccc )
 143+ 7878              // the following text is interpreted as a comment until a closing )
 144+ 7878                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7878             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7878             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7878             >
 144+ 7878             >                // dummy db directives used to calculate length of namec
 144+ 7878 28          >                db      "("
 144+ 7879             >len_NFA         defl    $ - temp_NFA
 144+ 7879             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7878             >
 144+ 7878 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7879 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 787A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7879 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 787A             >
 144+ 787A 5E 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 787C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 787C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 787E             >                else
 144+ 787E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 787E             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 787E             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 787E             >
 144+ 787E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 787E A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7882 2F 74 DA 6A                  dw      WORD, DROP              // word drop
 147+ 7886 AA 69                        dw      EXIT                    // ;
 148+ 7888
 149+ 7888              //  ______________________________________________________________________
 150+ 7888              //
 151+ 7888              // quit         --
 152+ 7888              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7888                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7888             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7888             >
 153+ 7888             >                // dummy db directives used to calculate length of namec
 153+ 7888 51 55 49 54 >                db      "QUIT"
 153+ 788C             >len_NFA         defl    $ - temp_NFA
 153+ 788C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7888             >
 153+ 7888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7889 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 788D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 788C D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 788D             >
 153+ 788D 78 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 788F             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 788F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7891             >                else
 153+ 7891 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7891             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7891             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7891             >
 153+ 7891             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7891
 155+ 7891 C0 6E A2 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7895 CB 67 DA 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7899 0A 6D C0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 789D AF 6B
 158+ 789F 0A 6D 09 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 78A3 AF 6B
 159+ 78A5 6A 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78A7                                                              // begin
 161+ 78A7              Quit_Begin:
 162+ 78A7 94 6D A2 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78AB 9B 69
 163+ 78AD 2A 66                        dw      CR                      //      cr
 164+ 78AF AF 73                        dw      QUERY                   //      query
 165+ 78B1              Next_Breakpoint_1:
 166+ 78B1 CF 77                        dw      INTERPRET               //      interpret
 167+ 78B3 55 6E A2 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78B7 EC 69
 168+ 78B9                                                              //      if
 169+ 78B9 2C 64                        dw      ZBRANCH
 170+ 78BB 07 00                        dw      Quit_Endif - $
 171+ 78BD 7E 74                        dw          C_DOT_QUOTE
 172+ 78BF 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78C2              Quit_Endif:                                     //      else
 174+ 78C2                                                              // again
 175+ 78C2 15 64                        dw      BRANCH
 176+ 78C4 E3 FF                        dw      Quit_Begin - $
 177+ 78C6 AA 69                        dw      EXIT                    // ;
 178+ 78C8
 179+ 78C8              //  ______________________________________________________________________
 180+ 78C8              //
 181+ 78C8              // abort        --
 182+ 78C8                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78C8             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78C8             >
 182+ 78C8             >                // dummy db directives used to calculate length of namec
 182+ 78C8 41 42 4F 52 >                db      "ABORT"
 182+ 78CC 54          >
 182+ 78CD             >len_NFA         defl    $ - temp_NFA
 182+ 78CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78C8             >
 182+ 78C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78C9 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78CD 54          >
 182+ 78CE             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78CD D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78CE             >
 182+ 78CE 88 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78D0             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78D0 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78D2             >                else
 182+ 78D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78D2             >
 182+ 78D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78D2 8C 6D A2 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78D6 81 69
 184+ 78D8 CD 71                        dw      DECIMAL                 // decimal
 185+ 78DA 54 78                        dw      FORTH                   // [compile] forth
 186+ 78DC 6C 78                        dw      DEFINITIONS             // definitions
 187+ 78DE              Autoexec_Ptr:
 188+ 78DE 95 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78E0 8F 78                        dw      QUIT                    // quit
 190+ 78E2 AA 69                        dw      EXIT                    // ;
 191+ 78E4
 192+ 78E4              //  ______________________________________________________________________
 193+ 78E4              //
 194+ 78E4              // warm         --
 195+ 78E4                              Colon_Def WARM, "WARM", is_normal
 195+ 78E4             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78E4             >
 195+ 78E4             >                // dummy db directives used to calculate length of namec
 195+ 78E4 57 41 52 4D >                db      "WARM"
 195+ 78E8             >len_NFA         defl    $ - temp_NFA
 195+ 78E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78E4             >
 195+ 78E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78E5 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78E9             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78E8 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78E9             >
 195+ 78E9 C8 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78EB             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78EB 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78ED             >                else
 195+ 78ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78ED             >
 195+ 78ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78ED 6A 7C                        dw      BLK_INIT                // blk-init
 197+ 78EF 46 84                        dw      SPLASH                  // splash
 198+ 78F1 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78F5 D8 6F
 199+ 78F7 D0 78                        dw      ABORT                   // abort
 200+ 78F9 AA 69                        dw      EXIT                    // exit
 201+ 78FB
 202+ 78FB              //  ______________________________________________________________________
 203+ 78FB              //
 204+ 78FB              // cold         --
 205+ 78FB                              Colon_Def COLD, "COLD", is_normal
 205+ 78FB             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78FB             >
 205+ 78FB             >                // dummy db directives used to calculate length of namec
 205+ 78FB 43 4F 4C 44 >                db      "COLD"
 205+ 78FF             >len_NFA         defl    $ - temp_NFA
 205+ 78FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78FB             >
 205+ 78FB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78FC 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 7900             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78FF C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 7900             >
 205+ 7900 E4 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 7902             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7902 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 7904             >                else
 205+ 7904 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 7904             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 7904             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 7904             >
 205+ 7904             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 7904 A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7908 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 790C A2 6B                        dw      FETCH                   // @
 209+ 790E A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7912 2F 6A
 210+ 7914 A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7918 9D 68                        dw      CMOVE
 212+ 791A A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 791E A2 6B                        dw      FETCH                   // @
 214+ 7920 A9 63 5A 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7924 AF 6B                        dw      STORE                   // !
 216+ 7926 0A 6D 00 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 792A AF 6B
 217+ 792C E1 6D A2 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7930 0F 6B
 218+ 7932 94 6E AF 6B                  dw      USE, STORE              // use !
 219+ 7936 9E 6E AF 6B                  dw      PREV, STORE             // prev !
 220+ 793A A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 793E B1 6E AF 6B
 221+ 7942              //              dw      LIT, 8
 222+ 7942              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7942 1A 6D DF 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7946 AF 6B
 224+ 7948 EB 78        Warm_Start:     dw      WARM
 225+ 794A 02 79        Cold_Start:     dw      COLD
 226+ 794C AA 69                        dw      EXIT
 227+ 794E
 228+ 794E              //  ______________________________________________________________________
 229+ 794E              WarmRoutine:
 230+ 794E              ColdRoutine:
 231+ 794E DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7952 D9                           exx
 233+ 7953 E5                           push    hl
 234+ 7954 D9                           exx
 235+ 7955
 236+ 7955 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7959 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 795D              //              nop
 239+ 795D 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7960              //              nop
 241+ 7960                              ldrphl
 241+ 7960 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7963 01 48 79                     ld      bc, Warm_Start
 243+ 7966 38 02                        jr      c, Warm_Skip
 244+ 7968 03                           inc     bc
 245+ 7969 03                           inc     bc
 246+ 796A              Warm_Skip:
 247+ 796A                              next
 247+ 796A DD E9       >                jp      (ix)
 248+ 796C
 249+ 796C              //  ______________________________________________________________________
 250+ 796C              //
 251+ 796C              // basic        --
 252+ 796C                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 796C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 796C             >
 252+ 796C             >                // dummy db directives used to calculate length of namec
 252+ 796C 42 41 53 49 >                db      "BASIC"
 252+ 7970 43          >
 252+ 7971             >len_NFA         defl    $ - temp_NFA
 252+ 7971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 796C             >
 252+ 796C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 796D 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7971 43          >
 252+ 7972             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7971 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7972             >
 252+ 7972 FB 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7974             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7974 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7974             >                else
 252+ 7974 76 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7976             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7976             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7976             >
 252+ 7976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7976 C1                           pop     bc
 254+ 7977 21 00 00                     ld      hl, 0
 255+ 797A 39                           add     hl, sp
 256+ 797B ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 797F              //              nop
 258+ 797F 22 6E 63                     ld      (SP_Basic),hl
 259+ 7982 D9                           exx
 260+ 7983 E1                           pop     hl
 261+ 7984 D9                           exx
 262+ 7985 C9                           ret     // to Basic
 263+ 7986
 264+ 7986              //  ______________________________________________________________________
 265+ 7986              //
 266+ 7986              // +-           n1 n2 -- n3
 267+ 7986              // leaves n1 with the sign of n2 as n3.
 268+ 7986                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7986             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7986             >
 268+ 7986             >                // dummy db directives used to calculate length of namec
 268+ 7986 2B 2D       >                db      "+-"
 268+ 7988             >len_NFA         defl    $ - temp_NFA
 268+ 7988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7986             >
 268+ 7986 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7987 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7989             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7988 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7989             >
 268+ 7989 6C 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 798B             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 798B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 798D             >                else
 268+ 798D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 798D             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 798D             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 798D             >
 268+ 798D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 798D 07 6A                        dw      ZLESS                   // 0<
 270+ 798F                                                              // if
 271+ 798F 2C 64                        dw      ZBRANCH
 272+ 7991 04 00                        dw      Plus_Minus_Endif - $
 273+ 7993 9A 6A                        dw          MINUS               //      minus
 274+ 7995              Plus_Minus_Endif:                               // endif
 275+ 7995 AA 69                        dw      EXIT                    // ;
 276+ 7997
 277+ 7997              //  ______________________________________________________________________
 278+ 7997              //
 279+ 7997              // d+-          d1 n -- d2
 280+ 7997              // leaves d1 with the sign of n as d2.
 281+ 7997                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7997             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7997             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7997             >
 281+ 7997             >                // dummy db directives used to calculate length of namec
 281+ 7997 44 2B 2D    >                db      "D+-"
 281+ 799A             >len_NFA         defl    $ - temp_NFA
 281+ 799A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7997             >
 281+ 7997 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7998 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 799B             >                org     $-1                 // alter last byte of Name just above to set
 281+ 799A AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 799B             >
 281+ 799B 86 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 799D             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 799D 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 799F             >                else
 281+ 799F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 799F             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 799F             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 799F             >
 281+ 799F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 799F 07 6A                        dw      ZLESS                   // 0<
 283+ 79A1                                                              // if
 284+ 79A1 2C 64                        dw      ZBRANCH
 285+ 79A3 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79A5 B0 6A                        dw          DMINUS              //      dminus
 287+ 79A7              DPlus_Minus_Endif:                              // endif
 288+ 79A7 AA 69                        dw      EXIT                    // ;
 289+ 79A9
 290+ 79A9              //  ______________________________________________________________________
 291+ 79A9              //
 292+ 79A9              // abs          n1 -- n2
 293+ 79A9                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79A9             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79A9             >
 293+ 79A9             >                // dummy db directives used to calculate length of namec
 293+ 79A9 41 42 53    >                db      "ABS"
 293+ 79AC             >len_NFA         defl    $ - temp_NFA
 293+ 79AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79A9             >
 293+ 79A9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79AA 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79AD             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79AC D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79AD             >
 293+ 79AD 97 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79AF             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79AF 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79B1             >                else
 293+ 79B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79B1             >
 293+ 79B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79B1 0F 6B                        dw      DUP                     // dup
 295+ 79B3 8B 79                        dw      PLUS_MINUS              // +-
 296+ 79B5 AA 69                        dw      EXIT                    // ;
 297+ 79B7
 298+ 79B7              //  ______________________________________________________________________
 299+ 79B7              //
 300+ 79B7              // dabs         d1 -- d2
 301+ 79B7                              Colon_Def DABS, "DABS", is_normal
 301+ 79B7             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79B7             >
 301+ 79B7             >                // dummy db directives used to calculate length of namec
 301+ 79B7 44 41 42 53 >                db      "DABS"
 301+ 79BB             >len_NFA         defl    $ - temp_NFA
 301+ 79BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79B7             >
 301+ 79B7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79B8 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79BC             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79BB D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79BC             >
 301+ 79BC A9 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79BE             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79BE 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79C0             >                else
 301+ 79C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79C0             >
 301+ 79C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79C0 0F 6B                        dw      DUP                     // dup
 303+ 79C2 9D 79                        dw      DPLUS_MINUS             // d+-
 304+ 79C4 AA 69                        dw      EXIT                    // ;
 305+ 79C6
 306+ 79C6              //  ______________________________________________________________________
 307+ 79C6              //
 308+ 79C6              // m*           n1 n2 -- d
 309+ 79C6              // multiply two integer giving a double
 310+ 79C6                              Colon_Def MMUL, "M*", is_normal
 310+ 79C6             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79C6             >
 310+ 79C6             >                // dummy db directives used to calculate length of namec
 310+ 79C6 4D 2A       >                db      "M*"
 310+ 79C8             >len_NFA         defl    $ - temp_NFA
 310+ 79C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79C6             >
 310+ 79C6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79C7 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79C9             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79C8 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79C9             >
 310+ 79C9 B7 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79CB             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79CB 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79CD             >                else
 310+ 79CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79CD             >
 310+ 79CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79CD 70 6B 5F 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79D1 BD 69
 312+ 79D3 AF 79 02 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79D7 AF 79 D0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79DB D1 69 9D 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79DF AA 69                        dw      EXIT                    // ;
 316+ 79E1
 317+ 79E1              //  ______________________________________________________________________
 318+ 79E1              //
 319+ 79E1              // sm/rem       d n -- q r
 320+ 79E1              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79E1              // the remainder has the sign of d.
 322+ 79E1                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79E1             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79E1             >
 322+ 79E1             >                // dummy db directives used to calculate length of namec
 322+ 79E1 53 4D 2F 52 >                db      "SM/REM"
 322+ 79E5 45 4D       >
 322+ 79E7             >len_NFA         defl    $ - temp_NFA
 322+ 79E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79E1             >
 322+ 79E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79E2 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79E6 45 4D       >
 322+ 79E8             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79E7 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79E8             >
 322+ 79E8 C6 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79EA             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79EA 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79EC             >                else
 322+ 79EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79EC             >
 322+ 79EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79EC CA 6A BD 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79F0 BD 69
 324+ 79F2 BE 79 E5 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79F6 AF 79
 325+ 79F8 01 69                        dw      UMDIVMOD                // um/mod
 326+ 79FA D1 69                        dw      R_TO                    // r>
 327+ 79FC E5 69 5F 69                  dw      R_OP, XOR_OP            // r xor
 328+ 7A00 8B 79 02 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 7A04 D1 69                        dw      R_TO                    // r>
 330+ 7A06 8B 79 02 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 7A0A AA 69                        dw      EXIT                    // ;
 332+ 7A0C
 333+ 7A0C              //  ______________________________________________________________________
 334+ 7A0C              //
 335+ 7A0C              // fm/mod       d n -- q r
 336+ 7A0C              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A0C              // the remainder has the sign of d.
 338+ 7A0C                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A0C             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A0C             >
 338+ 7A0C             >                // dummy db directives used to calculate length of namec
 338+ 7A0C 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A10 4F 44       >
 338+ 7A12             >len_NFA         defl    $ - temp_NFA
 338+ 7A12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A0C             >
 338+ 7A0C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A0D 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A11 4F 44       >
 338+ 7A13             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A12 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A13             >
 338+ 7A13 E1 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A15             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A15 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A17             >                else
 338+ 7A17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A17             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A17             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A17             >
 338+ 7A17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A17 0F 6B BD 69                  dw      DUP, TO_R               // dup >r
 340+ 7A1B EA 79                        dw      SMDIVM
 341+ 7A1D CA 6A 0F 6B                  dw      OVER, DUP
 342+ 7A21 EC 69 EC 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A25 02 6B 07 6A                  dw      SWAP, ZLESS
 344+ 7A29 E5 69 07 6A                  dw      R_OP, ZLESS
 345+ 7A2D 5F 69 3A 69                  dw      XOR_OP, AND_OP
 346+ 7A31 2C 64                        dw      ZBRANCH
 347+ 7A33 10 00                        dw      Fm_Mod_Else - $
 348+ 7A35 5C 6A                        dw          ONE_SUBTRACT
 349+ 7A37 02 6B D1 69                  dw          SWAP, R_TO
 350+ 7A3B 2F 6A 02 6B                  dw          PLUS, SWAP
 351+ 7A3F 15 64                        dw      BRANCH
 352+ 7A41 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A43              Fm_Mod_Else:
 354+ 7A43 D1 69 DA 6A                  dw          R_TO, DROP
 355+ 7A47              Fm_Mod_Endif:
 356+ 7A47 AA 69                        dw      EXIT
 357+ 7A49              //              dw      TWO_DUP                 // 2dup
 358+ 7A49              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A49              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A49              //              dw      UMDIVMOD                // um/mod
 361+ 7A49              //              dw      SWAP                    // swap
 362+ 7A49              //              dw      II, ZLESS               // i'
 363+ 7A49              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A49              //              dw      R_TO                    // r>
 365+ 7A49              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A49              //              dw      R_OP                    // r@
 367+ 7A49              //              dw      ZLESS                   // i'
 368+ 7A49              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A49              //              dw      R_TO                    // r>
 370+ 7A49              //              dw      PLUS_MINUS              // +- swap
 371+ 7A49              //              dw      EXIT                    // ;
 372+ 7A49
 373+ 7A49              //  ______________________________________________________________________
 374+ 7A49              //
 375+ 7A49              // m/mod        d n -- q r
 376+ 7A49              // multiply two integer giving a double
 377+ 7A49                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A49             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A49             >
 377+ 7A49             >                // dummy db directives used to calculate length of namec
 377+ 7A49 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A4D 44          >
 377+ 7A4E             >len_NFA         defl    $ - temp_NFA
 377+ 7A4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A49             >
 377+ 7A49 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A4A 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A4E 44          >
 377+ 7A4F             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A4E C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A4F             >
 377+ 7A4F 0C 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A51             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A51 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A53             >                else
 377+ 7A53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A53             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A53             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A53             >
 377+ 7A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A53 EA 79                        dw      SMDIVM
 379+ 7A55 AA 69                        dw      EXIT                    // ;
 380+ 7A57
 381+ 7A57              //  ______________________________________________________________________
 382+ 7A57              //
 383+ 7A57              // m/           d n -- q
 384+ 7A57              // multiply two integer giving a double
 385+ 7A57                              Colon_Def MDIV, "M/", is_normal
 385+ 7A57             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A57             >
 385+ 7A57             >                // dummy db directives used to calculate length of namec
 385+ 7A57 4D 2F       >                db      "M/"
 385+ 7A59             >len_NFA         defl    $ - temp_NFA
 385+ 7A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A57             >
 385+ 7A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A58 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A5A             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A59 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A5A             >
 385+ 7A5A 49 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A5C             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A5C 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A5E             >                else
 385+ 7A5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A5E             >
 385+ 7A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A5E 51 7A E5 6A                  dw      MDIVM, NIP
 387+ 7A62 AA 69                        dw      EXIT                    // ;
 388+ 7A64
 389+ 7A64              //  ______________________________________________________________________
 390+ 7A64              //
 391+ 7A64              // *            n1 n2 -- n3
 392+ 7A64              // multiply two integer
 393+ 7A64                              Colon_Def MUL, "*", is_normal
 393+ 7A64             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A64             >
 393+ 7A64             >                // dummy db directives used to calculate length of namec
 393+ 7A64 2A          >                db      "*"
 393+ 7A65             >len_NFA         defl    $ - temp_NFA
 393+ 7A65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A64             >
 393+ 7A64 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A65 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A66             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A65 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A66             >
 393+ 7A66 57 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A68             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A68 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A6A             >                else
 393+ 7A6A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A6A             >
 393+ 7A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A6A CB 79 DA 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A6E AA 69                        dw      EXIT                    // ;
 396+ 7A70
 397+ 7A70              //  ______________________________________________________________________
 398+ 7A70              //
 399+ 7A70              // /mod         n1 n2 -- n3 n4
 400+ 7A70              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A70              // The remainder has the sign of n1
 402+ 7A70                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A70             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A70             >
 402+ 7A70             >                // dummy db directives used to calculate length of namec
 402+ 7A70 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A74             >len_NFA         defl    $ - temp_NFA
 402+ 7A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A70             >
 402+ 7A70 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A71 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A75             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A74 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A75             >
 402+ 7A75 64 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A77             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A77 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A79             >                else
 402+ 7A79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A79             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A79             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A79             >
 402+ 7A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A79 BD 69 28 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A7D D1 69
 404+ 7A7F 51 7A                        dw      MDIVM                   // m/mod
 405+ 7A81 AA 69                        dw      EXIT                    // ;
 406+ 7A83
 407+ 7A83              //  ______________________________________________________________________
 408+ 7A83              //
 409+ 7A83              // /            n1 n2 -- n3
 410+ 7A83              // division
 411+ 7A83                              Colon_Def DIV, "/", is_normal
 411+ 7A83             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A83             >
 411+ 7A83             >                // dummy db directives used to calculate length of namec
 411+ 7A83 2F          >                db      "/"
 411+ 7A84             >len_NFA         defl    $ - temp_NFA
 411+ 7A84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A83             >
 411+ 7A83 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A84 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A85             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A84 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A85             >
 411+ 7A85 70 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A87             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A87 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A89             >                else
 411+ 7A89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A89             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A89             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A89             >
 411+ 7A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A89 77 7A E5 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A8D AA 69                        dw      EXIT                    // ;
 414+ 7A8F
 415+ 7A8F              //  ______________________________________________________________________
 416+ 7A8F              //
 417+ 7A8F              // mod          n1 n2 -- n3
 418+ 7A8F                              Colon_Def MOD, "MOD", is_normal
 418+ 7A8F             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A8F             >
 418+ 7A8F             >                // dummy db directives used to calculate length of namec
 418+ 7A8F 4D 4F 44    >                db      "MOD"
 418+ 7A92             >len_NFA         defl    $ - temp_NFA
 418+ 7A92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A8F             >
 418+ 7A8F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A90 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A93             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A92 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A93             >
 418+ 7A93 83 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A95             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A95 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A97             >                else
 418+ 7A97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A97             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A97             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A97             >
 418+ 7A97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A97 77 7A DA 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A9B AA 69                        dw      EXIT                    // ;
 421+ 7A9D
 422+ 7A9D              //  ______________________________________________________________________
 423+ 7A9D              //
 424+ 7A9D              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A9D              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A9D              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A9D              // avoids loss of precision
 428+ 7A9D                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A9D             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A9D             >
 428+ 7A9D             >                // dummy db directives used to calculate length of namec
 428+ 7A9D 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7AA1 44          >
 428+ 7AA2             >len_NFA         defl    $ - temp_NFA
 428+ 7AA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A9D             >
 428+ 7A9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A9E 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7AA2 44          >
 428+ 7AA3             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7AA2 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7AA3             >
 428+ 7AA3 8F 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7AA5             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7AA5 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AA7             >                else
 428+ 7AA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AA7             >
 428+ 7AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AA7 BD 69 CB 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AAB D1 69 51 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AAF AA 69                        dw      EXIT                    // ;
 432+ 7AB1
 433+ 7AB1              //  ______________________________________________________________________
 434+ 7AB1              //
 435+ 7AB1              // */          n1 n2 n3 -- n4
 436+ 7AB1              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AB1                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AB1             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AB1             >
 437+ 7AB1             >                // dummy db directives used to calculate length of namec
 437+ 7AB1 2A 2F       >                db      "*/"
 437+ 7AB3             >len_NFA         defl    $ - temp_NFA
 437+ 7AB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AB1             >
 437+ 7AB1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AB2 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7AB4             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7AB3 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7AB4             >
 437+ 7AB4 9D 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AB6             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AB6 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AB8             >                else
 437+ 7AB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AB8             >
 437+ 7AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AB8 A5 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7ABA E5 6A                        dw     NIP                      // nip
 440+ 7ABC AA 69                        dw     EXIT                     // ;
 441+ 7ABE
 442+ 7ABE
 443+ 7ABE              //  ______________________________________________________________________
 444+ 7ABE              //
 445+ 7ABE              // m/mod        ud1 u2 -- u3 ud4
 446+ 7ABE              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7ABE              // All terms are unsigned.
 448+ 7ABE              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7ABE              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7ABE              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7ABE              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7ABE              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7ABE              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7ABE              //              dw      EXIT                    // ;
 455+ 7ABE
 456+ 7ABE              //  ______________________________________________________________________
 457+ 7ABE              //
 458+ 7ABE              // (line)       n1 n2 -- a b
 459+ 7ABE              // sends the line n1 of block n2 to the disk buffer.
 460+ 7ABE              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7ABE                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7ABE             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7ABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7ABE             >
 461+ 7ABE             >                // dummy db directives used to calculate length of namec
 461+ 7ABE 28 4C 49 4E >                db      "(LINE)"
 461+ 7AC2 45 29       >
 461+ 7AC4             >len_NFA         defl    $ - temp_NFA
 461+ 7AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7ABE             >
 461+ 7ABE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7ABF 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AC3 45 29       >
 461+ 7AC5             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AC4 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AC5             >
 461+ 7AC5 B1 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AC7             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AC7 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AC9             >                else
 461+ 7AC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AC9             >
 461+ 7AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AC9 BD 69                        dw      TO_R                    // >r
 463+ 7ACB B5 6C                        dw      NOOP                    // noop
 464+ 7ACD 3E 6D                        dw      CL                      // c/l
 465+ 7ACF 4A 6D A5 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AD3 D1 69                        dw      R_TO                    // r>
 467+ 7AD5 56 6D 68 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AD9 2F 6A
 468+ 7ADB 82 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7ADD 2F 6A                        dw      PLUS                    // +
 470+ 7ADF B5 6C                        dw      NOOP                    // noop
 471+ 7AE1 3E 6D                        dw      CL                      // c/l
 472+ 7AE3 AA 69                        dw      EXIT                    // ;
 473+ 7AE5
 474+ 7AE5              //  ______________________________________________________________________
 475+ 7AE5              //
 476+ 7AE5              // .line        n1 n2 --
 477+ 7AE5              // Sends to output line  n1  of screen n2.
 478+ 7AE5                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AE5             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AE5             >
 478+ 7AE5             >                // dummy db directives used to calculate length of namec
 478+ 7AE5 2E 4C 49 4E >                db      ".LINE"
 478+ 7AE9 45          >
 478+ 7AEA             >len_NFA         defl    $ - temp_NFA
 478+ 7AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AE5             >
 478+ 7AE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AE6 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AEA 45          >
 478+ 7AEB             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AEA C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AEB             >
 478+ 7AEB BE 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AED             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AED 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AEF             >                else
 478+ 7AEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AEF             >
 478+ 7AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AEF C7 7A CE 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AF3 6A 72
 480+ 7AF5 AA 69                        dw      EXIT                    // ;
 481+ 7AF7
 482+ 7AF7              //  ______________________________________________________________________
 483+ 7AF7              //
 484+ 7AF7              // message       n1 n2 --
 485+ 7AF7              // prints error message to current channel.
 486+ 7AF7              // if WARNING is 0, prints "MSG#n".
 487+ 7AF7              // if WARNING is 1, prints line n of screen 4.
 488+ 7AF7              // if WARNING is -1, see ERROR
 489+ 7AF7              // value can be negative or beyond block 4.
 490+ 7AF7                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AF7             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AF7             >
 490+ 7AF7             >                // dummy db directives used to calculate length of namec
 490+ 7AF7 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AFB 41 47 45    >
 490+ 7AFE             >len_NFA         defl    $ - temp_NFA
 490+ 7AFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AF7             >
 490+ 7AF7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AF8 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AFC 41 47 45    >
 490+ 7AFF             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AFE C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AFF             >
 490+ 7AFF E5 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7B01             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7B01 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7B03             >                else
 490+ 7B03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7B03             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7B03             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7B03             >
 490+ 7B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7B03 B5 6D A2 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B07                                                              // if
 493+ 7B07 2C 64                        dw      ZBRANCH
 494+ 7B09 18 00                        dw      Message_Else - $
 495+ 7B0B A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B0F 30 6E A2 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B13 56 6D 87 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B17 3C 6F
 498+ 7B19 ED 7A                        dw          DOT_LINE            //      .line
 499+ 7B1B F4 6F                        dw          SPACE               //      space
 500+ 7B1D                                                              // else
 501+ 7B1D
 502+ 7B1D 15 64                        dw      BRANCH
 503+ 7B1F 0B 00                        dw      Message_ENdif - $
 504+ 7B21              Message_Else:
 505+ 7B21 7E 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B23 04 6D 73 67                  db          4, "msg#"
 506+ 7B27 23
 507+ 7B28 3F 83                        dw          DOT                 //      .  ( forward )
 508+ 7B2A              Message_ENdif:                                  // endif
 509+ 7B2A AA 69                        dw      EXIT                    // ;
 510+ 7B2C
 511+ 7B2C
 512+ 7B2C              //  ______________________________________________________________________
 513+ 7B2C              //
 514+ 7B2C              // device
 515+ 7B2C                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B2C             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B2C             >
 515+ 7B2C             >                // dummy db directives used to calculate length of namec
 515+ 7B2C 44 45 56 49 >                db      "DEVICE"
 515+ 7B30 43 45       >
 515+ 7B32             >len_NFA         defl    $ - temp_NFA
 515+ 7B32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B2C             >
 515+ 7B2C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B2D 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B31 43 45       >
 515+ 7B33             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B32 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B33             >
 515+ 7B33 F7 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B35             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B35 E7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B37             >                else
 515+ 7B37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B37             >
 515+ 7B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B37 02 00       >                dw      2
 516+ 7B39
 517+ 7B39              //  ______________________________________________________________________
 518+ 7B39
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B39                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B39              //  ______________________________________________________________________
   2+ 7B39              //
   3+ 7B39              //  next-opt.asm
   4+ 7B39              //
   5+ 7B39              //  ZX Spectrum Next - peculiar definitions
   6+ 7B39              //  ______________________________________________________________________
   7+ 7B39
   8+ 7B39              //  ______________________________________________________________________
   9+ 7B39              //
  10+ 7B39              // reg@         n -- b
  11+ 7B39              // read Next REGister n giving byte b
  12+ 7B39
  13+ 7B39                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B39             >
  13+ 7B39             >                // dummy db directives used to calculate length of namec
  13+ 7B39 52 45 47 40 >                db      "REG@"
  13+ 7B3D             >len_NFA         defl    $ - temp_NFA
  13+ 7B3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B39             >
  13+ 7B39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B3A 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B3E             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B3D C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B3E             >
  13+ 7B3E 2C 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B40             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B40 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B40             >                else
  13+ 7B40 42 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B42             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B42             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B42             >
  13+ 7B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B42 D9                           exx
  15+ 7B43 01 3B 24                     ld      bc, $243B
  16+ 7B46 E1                           pop     hl
  17+ 7B47 ED 69                        out     (c), l
  18+ 7B49 04                           inc     b
  19+ 7B4A ED 68                        in      l,(c)
  20+ 7B4C E5                           push    hl
  21+ 7B4D D9                           exx
  22+ 7B4E                              next
  22+ 7B4E DD E9       >                jp      (ix)
  23+ 7B50
  24+ 7B50
  25+ 7B50              //  ______________________________________________________________________
  26+ 7B50              //
  27+ 7B50              // reg!         b n --
  28+ 7B50              // write value b to Next REGister n
  29+ 7B50
  30+ 7B50                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B50             >
  30+ 7B50             >                // dummy db directives used to calculate length of namec
  30+ 7B50 52 45 47 21 >                db      "REG!"
  30+ 7B54             >len_NFA         defl    $ - temp_NFA
  30+ 7B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B50             >
  30+ 7B50 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B51 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B55             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B54 A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B55             >
  30+ 7B55 39 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B57             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B57             >                else
  30+ 7B57 59 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B59             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B59             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B59             >
  30+ 7B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B59 D9                           exx
  32+ 7B5A 01 3B 24                     ld      bc, $243B
  33+ 7B5D E1                           pop     hl
  34+ 7B5E ED 69                        out     (c), l
  35+ 7B60 04                           inc     b
  36+ 7B61 E1                           pop     hl
  37+ 7B62 ED 69                        out     (c), l
  38+ 7B64 D9                           exx
  39+ 7B65                              next
  39+ 7B65 DD E9       >                jp      (ix)
  40+ 7B67
  41+ 7B67
  42+ 7B67              //  ______________________________________________________________________
  43+ 7B67              //
  44+ 7B67              // mmu7@        -- n
  45+ 7B67              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B67
  47+ 7B67                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B67             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B67             >
  47+ 7B67             >                // dummy db directives used to calculate length of namec
  47+ 7B67 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B6B 40          >
  47+ 7B6C             >len_NFA         defl    $ - temp_NFA
  47+ 7B6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B67             >
  47+ 7B67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B68 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B6C 40          >
  47+ 7B6D             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B6C C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B6D             >
  47+ 7B6D 50 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B6F             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B6F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B71             >                else
  47+ 7B71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B71             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B71             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B71             >
  47+ 7B71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B71 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B75 40 7B
  49+ 7B77 AA 69                        dw      EXIT
  50+ 7B79
  51+ 7B79              //  ______________________________________________________________________
  52+ 7B79              //
  53+ 7B79              // mmu7!        n --
  54+ 7B79              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B79              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B79
  57+ 7B79                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B79             >
  57+ 7B79             >                // dummy db directives used to calculate length of namec
  57+ 7B79 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B7D 21          >
  57+ 7B7E             >len_NFA         defl    $ - temp_NFA
  57+ 7B7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B79             >
  57+ 7B79 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B7A 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B7E 21          >
  57+ 7B7F             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B7E A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B7F             >
  57+ 7B7F 67 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B81             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B81 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B81             >                else
  57+ 7B81 83 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B83             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B83             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B83             >
  57+ 7B83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B83 E1                           pop     hl
  59+ 7B84 7D                           ld      a, l
  60+ 7B85 ED 92 57                     nextreg 87, a
  61+ 7B88
  62+ 7B88                              next
  62+ 7B88 DD E9       >                jp      (ix)
  63+ 7B8A
  64+ 7B8A              //  ______________________________________________________________________
  65+ 7B8A              //
  66+ 7B8A              // >far         ha -- a n
  67+ 7B8A              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B8A              // take lower bits of H and L as an offset from E000h
  69+ 7B8A              // then return address  a  between E000h-FFFFh
  70+ 7B8A              // and page number n  between 64-71 (40h-47h)
  71+ 7B8A              // For example, in hex:
  72+ 7B8A              //   0000 >FAR  gives  40.E000
  73+ 7B8A              //   1FFF >FAR  gives  40.FFFF
  74+ 7B8A              //   2000 >FAR  gives  41.E000
  75+ 7B8A              //   3FFF >FAR  gives  41.FFFF
  76+ 7B8A              //   EFFF >FAR  gives  47.EFFF
  77+ 7B8A              //   FFFF >FAR  gives  47.FFFF
  78+ 7B8A              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B8A              //                pop     de
  80+ 7B8A              //                ld      a, d
  81+ 7B8A              //                and     $E0
  82+ 7B8A              //                rlca
  83+ 7B8A              //                rlca
  84+ 7B8A              //                rlca
  85+ 7B8A              //                add     $40
  86+ 7B8A              //                ld      l, a
  87+ 7B8A              //                ld      h, 0
  88+ 7B8A              //                ld      a, d
  89+ 7B8A              //                or      $E0
  90+ 7B8A              //                ld      d, a
  91+ 7B8A              //                push    hl
  92+ 7B8A              //                push    de
  93+ 7B8A              //                next
  94+ 7B8A
  95+ 7B8A              //  ______________________________________________________________________
  96+ 7B8A              //
  97+ 7B8A              // <far         a n  -- ha
  98+ 7B8A              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B8A              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B8A              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B8A              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B8A              //                pop     de                  // page number in e
 103+ 7B8A              //                pop     hl                  // address in hl
 104+ 7B8A              //                ld      a, e
 105+ 7B8A              //                sub     $40                 // reduced to 0-7
 106+ 7B8A              //                rrca
 107+ 7B8A              //                rrca
 108+ 7B8A              //                rrca
 109+ 7B8A              //                ld      d, a                // save to d bits 765
 110+ 7B8A              //                ld      a, h                // drops
 111+ 7B8A              //                and     $1F
 112+ 7B8A              //                or      d
 113+ 7B8A              //                ld      h, a
 114+ 7B8A              //
 115+ 7B8A              //                psh1
 116+ 7B8A
 117+ 7B8A              //  ______________________________________________________________________
 118+ 7B8A              //
 119+ 7B8A              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B8A              // NextZXOS call wrapper.
 121+ 7B8A              //  n1 = hl register parameter value
 122+ 7B8A              //  n2 = de register parameter value
 123+ 7B8A              //  n3 = bc register parameter value
 124+ 7B8A              //  n4 =  a register parameter value
 125+ 7B8A              //   a = routine address in ROM 3
 126+ 7B8A              // ----
 127+ 7B8A              //  n5 = hl returned value
 128+ 7B8A              //  n6 = de returned value
 129+ 7B8A              //  n7 = bc returned value
 130+ 7B8A              //  n8 =  a returned value
 131+ 7B8A              //   f
 132+ 7B8A                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B8A             >
 132+ 7B8A             >                // dummy db directives used to calculate length of namec
 132+ 7B8A 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B8E 44 4F 53    >
 132+ 7B91             >len_NFA         defl    $ - temp_NFA
 132+ 7B91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B8A             >
 132+ 7B8A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B8B 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B8F 44 4F 53    >
 132+ 7B92             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B91 D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B92             >
 132+ 7B92 79 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B94             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B94 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B94             >                else
 132+ 7B94 96 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B96             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B96             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B96             >
 132+ 7B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B96 D1                           pop     de                  // dos call entry address in de
 134+ 7B97 E1                           pop     hl                  // a register
 135+ 7B98 7D                           ld      a, l
 136+ 7B99 D9                           exx
 137+ 7B9A C1                           pop     bc
 138+ 7B9B D1                           pop     de
 139+ 7B9C E1                           pop     hl
 140+ 7B9D D9                           exx
 141+ 7B9E
 142+ 7B9E C5                           push    bc
 143+ 7B9F DD E5                        push    ix
 144+ 7BA1
 145+ 7BA1              //              ld      (SP_Saved), sp
 146+ 7BA1              //              ld      sp, Cold_origin - 5
 147+ 7BA1 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7BA3
 149+ 7BA3 CF                           rst     08
 150+ 7BA4 94                           db      $94
 151+ 7BA5
 152+ 7BA5              //              ld      sp, (SP_Saved)
 153+ 7BA5              //              push    ix
 154+ 7BA5              //              pop     hl
 155+ 7BA5              //              ld      (IX_Echo), hl
 156+ 7BA5 DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7BA9              //              nop
 158+ 7BA9 DD E1                        pop     ix
 159+ 7BAB E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BAC D5                           push    de
 161+ 7BAD C5                           push    bc
 162+ 7BAE 4D                           ld      c, l
 163+ 7BAF 44                           ld      b, h
 164+ 7BB0
 165+ 7BB0 26 00                        ld      h, 0
 166+ 7BB2 6F                           ld      l, a
 167+ 7BB3 E5                           push    hl
 168+ 7BB4 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BB6 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BB7
 171+ 7BB7                              psh1
 171+ 7BB7 E5          >                push    hl
 171+ 7BB8 DD E9       >                jp      (ix)
 172+ 7BBA
 173+ 7BBA              //  ______________________________________________________________________
 174+ 7BBA              //
 175+ 7BBA              // blk-fh
 176+ 7BBA                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BBA             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BBA             >
 176+ 7BBA             >                // dummy db directives used to calculate length of namec
 176+ 7BBA 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BBE 46 48       >
 176+ 7BC0             >len_NFA         defl    $ - temp_NFA
 176+ 7BC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BBA             >
 176+ 7BBA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BBB 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BBF 46 48       >
 176+ 7BC1             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BC0 C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BC1             >
 176+ 7BC1 8A 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BC3             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BC3 E7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BC5             >                else
 176+ 7BC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BC5             >
 176+ 7BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BC5 01 00       >                dw      1
 177+ 7BC7
 178+ 7BC7                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BC7             >
 178+ 7BC7             >                // dummy db directives used to calculate length of namec
 178+ 7BC7 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BCB 46 4E 41 4D >
 178+ 7BCF 45          >
 178+ 7BD0             >len_NFA         defl    $ - temp_NFA
 178+ 7BD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BC7             >
 178+ 7BC7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BC8 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BCC 46 4E 41 4D >
 178+ 7BD0 45          >
 178+ 7BD1             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BD0 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BD1             >
 178+ 7BD1 BA 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BD3             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BD3 E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BD5             >                else
 178+ 7BD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BD5             >
 178+ 7BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BD5 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BD9 6F 63 6B 73
 179+ 7BDD 2D 36 34 2E
 179+ 7BE1 62 69 6E 00
 180+ 7BE5 00 00 00...                  ds      24
 181+ 7BFD
 182+ 7BFD              //  ______________________________________________________________________
 183+ 7BFD              //
 184+ 7BFD              // blk-seek     n --
 185+ 7BFD              // seek block n  within blocks!.bin  file
 186+ 7BFD                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BFD             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BFD             >
 186+ 7BFD             >                // dummy db directives used to calculate length of namec
 186+ 7BFD 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7C01 53 45 45 4B >
 186+ 7C05             >len_NFA         defl    $ - temp_NFA
 186+ 7C05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BFD             >
 186+ 7BFD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BFE 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7C02 53 45 45 4B >
 186+ 7C06             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C05 CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C06             >
 186+ 7C06 C7 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C08             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C08 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C0A             >                else
 186+ 7C0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C0A             >
 186+ 7C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C0A 4A 6D CB 79                  dw  BBUF, MMUL
 188+ 7C0E C3 7B A2 6B                  dw  BLK_FH, FETCH
 189+ 7C12 A8 67                        dw  F_SEEK
 190+ 7C14 A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C18 AE 70
 191+ 7C1A AA 69                        dw  EXIT
 192+ 7C1C
 193+ 7C1C              //  ______________________________________________________________________
 194+ 7C1C              //
 195+ 7C1C              // blk-read     n --
 196+ 7C1C              // seek block n  within blocks!.bin  file
 197+ 7C1C                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C1C             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C1C             >
 197+ 7C1C             >                // dummy db directives used to calculate length of namec
 197+ 7C1C 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C20 52 45 41 44 >
 197+ 7C24             >len_NFA         defl    $ - temp_NFA
 197+ 7C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C1C             >
 197+ 7C1C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C1D 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C21 52 45 41 44 >
 197+ 7C25             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C24 C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C25             >
 197+ 7C25 FD 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C27             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C27 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C29             >                else
 197+ 7C29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C29             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C29             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C29             >
 197+ 7C29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C29 08 7C                        dw  BLK_SEEK
 199+ 7C2B 4A 6D                        dw  BBUF
 200+ 7C2D C3 7B A2 6B                  dw  BLK_FH, FETCH
 201+ 7C31 14 68                        dw  F_READ
 202+ 7C33 A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C37 AE 70
 203+ 7C39 DA 6A                        dw  DROP
 204+ 7C3B AA 69                        dw  EXIT
 205+ 7C3D
 206+ 7C3D              //  ______________________________________________________________________
 207+ 7C3D              //
 208+ 7C3D              // blk-write     n --
 209+ 7C3D              // seek block n  within blocks!.bin  file
 210+ 7C3D                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C3D             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C3D             >
 210+ 7C3D             >                // dummy db directives used to calculate length of namec
 210+ 7C3D 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C41 57 52 49 54 >
 210+ 7C45 45          >
 210+ 7C46             >len_NFA         defl    $ - temp_NFA
 210+ 7C46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C3D             >
 210+ 7C3D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C3E 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C42 57 52 49 54 >
 210+ 7C46 45          >
 210+ 7C47             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C46 C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C47             >
 210+ 7C47 1C 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C49             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C49 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C4B             >                else
 210+ 7C4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C4B             >
 210+ 7C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C4B 08 7C                        dw  BLK_SEEK
 212+ 7C4D 4A 6D                        dw  BBUF
 213+ 7C4F C3 7B A2 6B                  dw  BLK_FH, FETCH
 214+ 7C53 33 68                        dw  F_WRITE
 215+ 7C55 A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C59 AE 70
 216+ 7C5B DA 6A                        dw  DROP
 217+ 7C5D AA 69                        dw  EXIT
 218+ 7C5F
 219+ 7C5F              //  ______________________________________________________________________
 220+ 7C5F              //
 221+ 7C5F              // blk-init     n --
 222+ 7C5F              // seek block n  within blocks!.bin  file
 223+ 7C5F                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C5F             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C5F             >
 223+ 7C5F             >                // dummy db directives used to calculate length of namec
 223+ 7C5F 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C63 49 4E 49 54 >
 223+ 7C67             >len_NFA         defl    $ - temp_NFA
 223+ 7C67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C5F             >
 223+ 7C5F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C60 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C64 49 4E 49 54 >
 223+ 7C68             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C67 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C68             >
 223+ 7C68 3D 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C6A             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C6A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C6C             >                else
 223+ 7C6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C6C             >
 223+ 7C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C6C C3 7B A2 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C70 CB 67 DA 6A
 225+ 7C74 D3 7B 50 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C78 E9 6E 22 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C7C 4A 68
 227+ 7C7E A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C82 AE 70
 228+ 7C84 C3 7B AF 6B                  dw  BLK_FH, STORE
 229+ 7C88 AA 69                        dw  EXIT
 230+ 7C8A
 231+ 7C8A              //  ______________________________________________________________________
 232+ 7C8A              //
 233+ 7C8A              // #sec
 234+ 7C8A              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C8A              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C8A
 237+ 7C8A                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C8A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C8A             >
 237+ 7C8A             >                // dummy db directives used to calculate length of namec
 237+ 7C8A 23 53 45 43 >                db      "#SEC"
 237+ 7C8E             >len_NFA         defl    $ - temp_NFA
 237+ 7C8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C8A             >
 237+ 7C8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C8B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C8F             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C8E C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C8F             >
 237+ 7C8F 5F 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C91             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C91 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C93             >                else
 237+ 7C93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C93             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C93             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C93             >
 237+ 7C93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C93 FF 7F       >                dw      32767
 238+ 7C95
 239+ 7C95              //  ______________________________________________________________________
 240+ 7C95
 241+ 7C95
 242+ 7C95
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C95                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C95              //  ______________________________________________________________________
   2+ 7C95              //
   3+ 7C95              //  L3.asm
   4+ 7C95              //
   5+ 7C95              //  Continuation of L2.asm
   6+ 7C95              //  I/O Block definitions
   7+ 7C95              //  ______________________________________________________________________
   8+ 7C95
   9+ 7C95
  10+ 7C95              //  ______________________________________________________________________
  11+ 7C95              //
  12+ 7C95              // r/w          a n f --
  13+ 7C95              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C95                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C95             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C95             >
  14+ 7C95             >                // dummy db directives used to calculate length of namec
  14+ 7C95 52 2F 57    >                db      "R/W"
  14+ 7C98             >len_NFA         defl    $ - temp_NFA
  14+ 7C98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C95             >
  14+ 7C95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C96 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C99             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C98 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C99             >
  14+ 7C99 8A 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C9B             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C9B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C9D             >                else
  14+ 7C9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C9D             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C9D             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C9D             >
  14+ 7C9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C9D BD 69                        dw      TO_R                    // >r
  16+ 7C9F 5C 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CA1 0F 6B 07 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CA5 CA 6A 91 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CA9 5C 6A 82 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CAD 4C 69                        dw      OR_OP                   // or
  21+ 7CAF A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CB3 AE 70
  22+ 7CB5 D1 69                        dw      R_TO                    // r>
  23+ 7CB7                                                              // if
  24+ 7CB7 2C 64                        dw      ZBRANCH
  25+ 7CB9 08 00                        dw      Read_Write_Else - $
  26+ 7CBB 27 7C                        dw          BLK_READ            //      blk-read
  27+ 7CBD 15 64                        dw      BRANCH
  28+ 7CBF 04 00                        dw      Read_Write_Endif - $
  29+ 7CC1              Read_Write_Else:                                // else
  30+ 7CC1 49 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CC3              Read_Write_Endif:                               // endif
  32+ 7CC3 AA 69                        dw      EXIT                    // ;
  33+ 7CC5
  34+ 7CC5
  35+ 7CC5              //  ______________________________________________________________________
  36+ 7CC5              //
  37+ 7CC5              // +buf        a1 -- a2 f
  38+ 7CC5              // advences to next buffer, cyclically rotating along them
  39+ 7CC5                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CC5             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CC5             >
  39+ 7CC5             >                // dummy db directives used to calculate length of namec
  39+ 7CC5 2B 42 55 46 >                db      "+BUF"
  39+ 7CC9             >len_NFA         defl    $ - temp_NFA
  39+ 7CC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CC5             >
  39+ 7CC5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CC6 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CCA             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CC9 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CCA             >
  39+ 7CCA 95 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CCC             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CCC 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CCE             >                else
  39+ 7CCE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CCE             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CCE             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CCE             >
  39+ 7CCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CCE A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CD2 2F 6A
  41+ 7CD4 0F 6B EC 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CD8 A2 6B
  42+ 7CDA 4A 6F                        dw      EQUALS                  // =
  43+ 7CDC                                                              // if
  44+ 7CDC 2C 64                        dw      ZBRANCH
  45+ 7CDE 08 00                        dw      PBuf_Endif - $
  46+ 7CE0 DA 6A                        dw          DROP                //      drop
  47+ 7CE2 E1 6D A2 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CE6              PBuf_Endif:                                     // endif
  49+ 7CE6 0F 6B 9E 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CEA A2 6B
  50+ 7CEC 3C 6F                        dw      SUBTRACT                // -
  51+ 7CEE AA 69                        dw      EXIT                    // ;
  52+ 7CF0
  53+ 7CF0              //  ______________________________________________________________________
  54+ 7CF0              //
  55+ 7CF0              // update       --
  56+ 7CF0              // mark the last used block to be written to disk
  57+ 7CF0                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CF0             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CF0             >
  57+ 7CF0             >                // dummy db directives used to calculate length of namec
  57+ 7CF0 55 50 44 41 >                db      "UPDATE"
  57+ 7CF4 54 45       >
  57+ 7CF6             >len_NFA         defl    $ - temp_NFA
  57+ 7CF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CF0             >
  57+ 7CF0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CF1 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CF5 54 45       >
  57+ 7CF7             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CF6 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CF7             >
  57+ 7CF7 C5 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CF9             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CF9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CFB             >                else
  57+ 7CFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CFB             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CFB             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CFB             >
  57+ 7CFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CFB 9E 6E A2 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CFF A2 6B
  59+ 7D01 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D05 4C 69
  60+ 7D07 9E 6E A2 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D0B AF 6B
  61+ 7D0D AA 69                        dw      EXIT                    // ;
  62+ 7D0F
  63+ 7D0F
  64+ 7D0F              //  ______________________________________________________________________
  65+ 7D0F              //
  66+ 7D0F              // empty-buffers --
  67+ 7D0F                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D0F             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D0F             >
  67+ 7D0F             >                // dummy db directives used to calculate length of namec
  67+ 7D0F 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D13 59 2D 42 55 >
  67+ 7D17 46 46 45 52 >
  67+ 7D1B 53          >
  67+ 7D1C             >len_NFA         defl    $ - temp_NFA
  67+ 7D1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D0F             >
  67+ 7D0F 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D10 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D14 59 2D 42 55 >
  67+ 7D18 46 46 45 52 >
  67+ 7D1C 53          >
  67+ 7D1D             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D1C D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D1D             >
  67+ 7D1D F0 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D1F             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D1F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D21             >                else
  67+ 7D21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D21             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D21             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D21             >
  67+ 7D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D21 E1 6D A2 6B                  dw      FIRST, FETCH            // first @
  69+ 7D25 EC 6D A2 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D29 CA 6A 3C 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D2D E6 73
  71+ 7D2F AA 69                        dw      EXIT                    // ;
  72+ 7D31
  73+ 7D31              //  ______________________________________________________________________
  74+ 7D31              //
  75+ 7D31              // buffer       n -- a
  76+ 7D31              // read block n and gives the address to a buffer
  77+ 7D31              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D31              // disk before reading the block n.
  79+ 7D31
  80+ 7D31                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D31             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D31             >
  80+ 7D31             >                // dummy db directives used to calculate length of namec
  80+ 7D31 42 55 46 46 >                db      "BUFFER"
  80+ 7D35 45 52       >
  80+ 7D37             >len_NFA         defl    $ - temp_NFA
  80+ 7D37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D31             >
  80+ 7D31 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D32 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D36 45 52       >
  80+ 7D38             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D37 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D38             >
  80+ 7D38 0F 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D3A             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D3A 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D3C             >                else
  80+ 7D3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D3C             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D3C             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D3C             >
  80+ 7D3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D3C 94 6E A2 6B                  dw      USE, FETCH              // use @
  82+ 7D40 0F 6B BD 69                  dw      DUP, TO_R               // dup >r
  83+ 7D44                                                              // begin
  84+ 7D44              Buffer_Begin:
  85+ 7D44 CC 7C                        dw          PBUF                //      +buf
  86+ 7D46                                                              // until
  87+ 7D46 2C 64                        dw      ZBRANCH
  88+ 7D48 FC FF                        dw      Buffer_Begin - $
  89+ 7D4A 94 6E AF 6B                  dw      USE, STORE              // use !
  90+ 7D4E E5 69 A2 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D52 07 6A
  91+ 7D54                                                              // if
  92+ 7D54 2C 64                        dw      ZBRANCH
  93+ 7D56 14 00                        dw      Buffer_Endif - $
  94+ 7D58 E5 69 78 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D5C E5 69 A2 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D60 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D64 3A 69                        dw          AND_OP              //      and
  98+ 7D66 0A 6D 9B 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D6A              Buffer_Endif:                                   // endif
 100+ 7D6A E5 69 AF 6B                  dw      R_OP, STORE             // r !
 101+ 7D6E E5 69 9E 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D72 AF 6B
 102+ 7D74 D1 69 78 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D78 AA 69                        dw      EXIT                    // ;
 104+ 7D7A
 105+ 7D7A              //  ______________________________________________________________________
 106+ 7D7A              //
 107+ 7D7A              // block        n -- a
 108+ 7D7A              // Leaves the buffer address that contains the block n.
 109+ 7D7A              // If the block is not already present, it will be loaded from disk
 110+ 7D7A              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D7A              // disk before reading the block n.
 112+ 7D7A              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D7A
 114+ 7D7A                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D7A             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D7A             >
 114+ 7D7A             >                // dummy db directives used to calculate length of namec
 114+ 7D7A 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D7E 4B          >
 114+ 7D7F             >len_NFA         defl    $ - temp_NFA
 114+ 7D7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D7A             >
 114+ 7D7A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D7B 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D7F 4B          >
 114+ 7D80             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D7F CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D80             >
 114+ 7D80 31 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D82             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D82 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D84             >                else
 114+ 7D84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D84             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D84             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D84             >
 114+ 7D84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D84 30 6E A2 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D88 2F 6A BD 69                  dw      PLUS, TO_R              // + >r
 117+ 7D8C 9E 6E A2 6B                  dw      PREV, FETCH             // prev @
 118+ 7D90 0F 6B A2 6B                  dw      DUP, FETCH              // dup @
 119+ 7D94 E5 69 3C 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D98 0F 6B 2F 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D9C                                                              // if
 122+ 7D9C 2C 64                        dw        ZBRANCH
 123+ 7D9E 32 00                        dw        Block_Endif_1 - $
 124+ 7DA0              Block_Begin:                                    //      begin
 125+ 7DA0 CC 7C EC 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DA4                                                              //          if
 127+ 7DA4 2C 64                        dw          ZBRANCH
 128+ 7DA6 12 00                        dw          Block_Endif_2 - $
 129+ 7DA8 DA 6A                        dw              DROP            //              drop
 130+ 7DAA E5 69 3A 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DAE 0F 6B                        dw              DUP             //              dup
 132+ 7DB0 E5 69 12 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DB4 9B 7C                        dw              READ_WRITE      //              r/w
 134+ 7DB6 8F 6A                        dw              TWO_MINUS       //              2-
 135+ 7DB8              Block_Endif_2:                                  //          endif
 136+ 7DB8 0F 6B A2 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DBC E5 69
 137+ 7DBE 3C 6F 0F 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DC2 2F 6A EC 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DC6                                                              //      until
 140+ 7DC6 2C 64                        dw        ZBRANCH
 141+ 7DC8 D8 FF                        dw        Block_Begin - $
 142+ 7DCA 0F 6B 9E 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DCE AF 6B
 143+ 7DD0              Block_Endif_1:                                  // endif
 144+ 7DD0 D1 69 DA 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DD4 78 6A
 145+ 7DD6 AA 69                        dw      EXIT                    // ;
 146+ 7DD8
 147+ 7DD8              //  ______________________________________________________________________
 148+ 7DD8              //
 149+ 7DD8              // #buff        -- n
 150+ 7DD8              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DD8                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DD8             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DD8             >
 151+ 7DD8             >                // dummy db directives used to calculate length of namec
 151+ 7DD8 23 42 55 46 >                db      "#BUFF"
 151+ 7DDC 46          >
 151+ 7DDD             >len_NFA         defl    $ - temp_NFA
 151+ 7DDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DD8             >
 151+ 7DD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DD9 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DDD 46          >
 151+ 7DDE             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DDD C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DDE             >
 151+ 7DDE 7A 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DE0             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DE0 CC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DE2             >                else
 151+ 7DE2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DE2             >
 151+ 7DE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DE2 07 00       >                dw      7
 152+ 7DE4
 153+ 7DE4              //  ______________________________________________________________________
 154+ 7DE4              //
 155+ 7DE4              // flush        --
 156+ 7DE4                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DE4             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DE4             >
 156+ 7DE4             >                // dummy db directives used to calculate length of namec
 156+ 7DE4 46 4C 55 53 >                db      "FLUSH"
 156+ 7DE8 48          >
 156+ 7DE9             >len_NFA         defl    $ - temp_NFA
 156+ 7DE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DE4             >
 156+ 7DE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DE5 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DE9 48          >
 156+ 7DEA             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DE9 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DEA             >
 156+ 7DEA D8 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DEC             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DEC 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DEE             >                else
 156+ 7DEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DEE             >
 156+ 7DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DEE E0 7D 50 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DF2 0A 6D
 158+ 7DF4              Flush_Do:                                       // do
 159+ 7DF4 86 64                        dw      C_DO
 160+ 7DF6 0A 6D 3A 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DFA DA 6A
 161+ 7DFC                                                              // loop
 162+ 7DFC 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E00 C3 7B A2 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E04 DF 67 DA 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E08 AA 69                        dw      EXIT                    // exit
 166+ 7E0A
 167+ 7E0A              //  ______________________________________________________________________
 168+ 7E0A              //
 169+ 7E0A              // f_getline    a m fh -- n
 170+ 7E0A              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E0A              // Address a is left for subsequent processing
 172+ 7E0A              // and n as the actual number of byte read, that is the length of line
 173+ 7E0A                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E0A             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E0A             >
 173+ 7E0A             >                // dummy db directives used to calculate length of namec
 173+ 7E0A 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E0E 54 4C 49 4E >
 173+ 7E12 45          >
 173+ 7E13             >len_NFA         defl    $ - temp_NFA
 173+ 7E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E0A             >
 173+ 7E0A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E0B 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E0F 54 4C 49 4E >
 173+ 7E13 45          >
 173+ 7E14             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E13 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E14             >
 173+ 7E14 E4 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E16             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E16 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E18             >                else
 173+ 7E18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E18             >
 173+ 7E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E18 BD 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E1A F2 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E1C E5 69 F6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E20 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E24 AE 70
 178+ 7E26
 179+ 7E26 5E 6B CA 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E2A 50 6A 02 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E2E
 182+ 7E2E E5 69 14 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E32 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E36 AE 70
 184+ 7E38                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E38 2C 64                        dw      ZBRANCH
 186+ 7E3A 3C 00                        dw      FGetline_Else - $
 187+ 7E3C A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E40 7E 65
 188+ 7E42 DA 6A E5 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E46 02 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E48 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E4C 7E 65
 191+ 7E4E DA 6A E5 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E52 1C 6B 90 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E56 0F 6B CA 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E5A AF 6B
 194+ 7E5C 0F 6B BD 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E60 5E 6B D1 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E64 0A 6D 3C 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E68 D1 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E6C A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E70 AE 70
 199+ 7E72                                                              // else
 200+ 7E72 15 64                        dw      BRANCH
 201+ 7E74 0C 00                        dw      FGetline_Endif - $
 202+ 7E76              FGetline_Else:
 203+ 7E76 D1 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E78 5E 6B 50 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E7C DA 6A 0A 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E80              FGetline_Endif:                                 // endif
 207+ 7E80 BD 69 0F 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E84 0F 6B
 208+ 7E86 50 6A 02 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E8A E5 69 9D 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E8E 70 6B 2F 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E92 0A 6D 02 6B                  dw      ZERO, SWAP              // 0 swap
 212+ 7E96 82 6A AF 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E9A E5 69 2F 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E9E 5C 6A
 214+ 7EA0 02 6B E5 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EA4 3C 6F
 215+ 7EA6 F7 73                        dw      BLANKS                  // blanks
 216+ 7EA8 D1 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EAA AA 69                        dw      EXIT                    // ;
 218+ 7EAC
 219+ 7EAC              //  ______________________________________________________________________
 220+ 7EAC              //
 221+ 7EAC              // f_include    fh --
 222+ 7EAC              // Given a filehandle includes the source from file
 223+ 7EAC                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EAC             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EAC             >
 223+ 7EAC             >                // dummy db directives used to calculate length of namec
 223+ 7EAC 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EB0 43 4C 55 44 >
 223+ 7EB4 45          >
 223+ 7EB5             >len_NFA         defl    $ - temp_NFA
 223+ 7EB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EAC             >
 223+ 7EAC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EAD 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EB1 43 4C 55 44 >
 223+ 7EB5 45          >
 223+ 7EB6             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EB5 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EB6             >
 223+ 7EB6 0A 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EB8             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EB8 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EBA             >                else
 223+ 7EBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EBA             >
 223+ 7EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EBA 09 6E A2 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EBE BD 69
 225+ 7EC0 12 6E A2 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EC4 BD 69
 226+ 7EC6 C0 6E A2 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7ECA BD 69
 227+ 7ECC E5 69                        dw      R_OP                    // r
 228+ 7ECE                                                              // if
 229+ 7ECE 2C 64                        dw      ZBRANCH
 230+ 7ED0 20 00                        dw      FInclude_Else_1 - $
 231+ 7ED2 E5 69 F6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7ED6 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EDA AE 70
 233+ 7EDC 12 6E A2 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EE0 8F 6A                        dw          TWO_MINUS
 235+ 7EE2 CA 6E A2 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EE6 3C 6F                        dw          SUBTRACT
 237+ 7EE8 28 6F 3C 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EEC                                                              // else
 239+ 7EEC 15 64                        dw      BRANCH
 240+ 7EEE 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EF0              FInclude_Else_1:
 242+ 7EF0 0A 6D 0A 6D                  dw          ZERO, ZERO          //      0 0
 243+ 7EF4                                                              // endif
 244+ 7EF4              FInclude_Endif_1:
 245+ 7EF4 BD 69 BD 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EF8 C0 6E AF 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EFC              FInclude_Begin:                                 // begin
 248+ 7EFC 12 6D 82 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F00 4A 6D
 249+ 7F02 70 6B F7 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F06 02 6B 50 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F0A 02 6B 82 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F0E C0 6E A2 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F12 16 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F14                                                              // while
 255+ 7F14 2C 64                        dw      ZBRANCH
 256+ 7F16 14 00                        dw      FInclude_Repeat - $
 257+ 7F18 12 6D 09 6E                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F1C AF 6B
 258+ 7F1E 0A 6D 12 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F22 AF 6B
 259+ 7F24 CF 77                        dw          INTERPRET           //      interpret
 260+ 7F26 15 64                        dw      BRANCH
 261+ 7F28 D4 FF                        dw      FInclude_Begin - $
 262+ 7F2A              FInclude_Repeat:                                // repeat
 263+ 7F2A C0 6E A2 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F2E 0A 6D C0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F32 AF 6B
 265+ 7F34 CB 67                        dw      F_CLOSE                 // f_close
 266+ 7F36 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F3A AE 70
 267+ 7F3C D1 69 D1 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F40 D1 69
 268+ 7F42 0F 6B C0 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F46 AF 6B
 269+ 7F48                                                              // if
 270+ 7F48 2C 64                        dw      ZBRANCH
 271+ 7F4A 12 00                        dw      FInclude_Else_2 - $
 272+ 7F4C C0 6E A2 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F50 A8 67                        dw          F_SEEK              //      f_seek
 274+ 7F52 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F56 AE 70
 275+ 7F58                                                              // else
 276+ 7F58 15 64                        dw      BRANCH
 277+ 7F5A 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F5C              FInclude_Else_2:
 279+ 7F5C 50 6B                        dw          TWO_DROP            //      2drop
 280+ 7F5E              FInclude_Endif_2:                               // endif
 281+ 7F5E D1 69 12 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F62 AF 6B
 282+ 7F64 D1 69 09 6E                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F68 AF 6B
 283+ 7F6A AA 69                        dw      EXIT                    // ;
 284+ 7F6C
 285+ 7F6C              //  ______________________________________________________________________
 286+ 7F6C              //
 287+ 7F6C              // open<         -- fh
 288+ 7F6C              // Open the following filename and return it file-handle
 289+ 7F6C              // Used in the form OPEN CCCC
 290+ 7F6C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F6C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F6C             >
 290+ 7F6C             >                // dummy db directives used to calculate length of namec
 290+ 7F6C 4F 50 45 4E >                db      "OPEN<"
 290+ 7F70 3C          >
 290+ 7F71             >len_NFA         defl    $ - temp_NFA
 290+ 7F71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F6C             >
 290+ 7F6C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F6D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F71 3C          >
 290+ 7F72             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F71 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F72             >
 290+ 7F72 AC 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F74             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F74 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F76             >                else
 290+ 7F76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F76             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F76             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F76             >
 290+ 7F76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F76 34 6D                        dw      BL
 292+ 7F78 2F 74 48 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F7C CA 6A
 293+ 7F7E 2F 6A 0A 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F82 02 6B AF 6B
 294+ 7F86 1C 74 12 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F8A 4A 68
 295+ 7F8C A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F90 AE 70                        dw      QERROR                  // ?error
 297+ 7F92 AA 69                        dw      EXIT                    // ;
 298+ 7F94
 299+ 7F94              //  ______________________________________________________________________
 300+ 7F94              //
 301+ 7F94              // include      -- cccc
 302+ 7F94              // Include the following filename
 303+ 7F94                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F94             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F94             >
 303+ 7F94             >                // dummy db directives used to calculate length of namec
 303+ 7F94 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F98 55 44 45    >
 303+ 7F9B             >len_NFA         defl    $ - temp_NFA
 303+ 7F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F94             >
 303+ 7F94 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F95 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F99 55 44 45    >
 303+ 7F9C             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F9B C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F9C             >
 303+ 7F9C 6C 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F9E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F9E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FA0             >                else
 303+ 7FA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FA0             >
 303+ 7FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FA0 74 7F                        dw      OPEN_FH                 // open
 305+ 7FA2 0F 6B B8 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FA6 CB 67 DA 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FAA AA 69                        dw      EXIT                    // ;
 308+ 7FAC
 309+ 7FAC              //  ______________________________________________________________________
 310+ 7FAC              //
 311+ 7FAC              // needs
 312+ 7FAC              // check for cccc exists in vocabulary
 313+ 7FAC              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FAC
 315+ 7FAC              // temp filename cccc.f as counted string zero-padded
 316+ 7FAC                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FAC             >
 316+ 7FAC             >                // dummy db directives used to calculate length of namec
 316+ 7FAC 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FB0 53 2D 57    >
 316+ 7FB3             >len_NFA         defl    $ - temp_NFA
 316+ 7FB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FAC             >
 316+ 7FAC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FAD 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FB1 53 2D 57    >
 316+ 7FB4             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FB3 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FB4             >
 316+ 7FB4 94 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FB6             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FB6 E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FB8             >                else
 316+ 7FB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FB8             >
 316+ 7FB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FB8 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FDB              // temp complete path+filename
 319+ 7FDB                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FDB             >
 319+ 7FDB             >                // dummy db directives used to calculate length of namec
 319+ 7FDB 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FDF 53 2D 46 4E >
 319+ 7FE3             >len_NFA         defl    $ - temp_NFA
 319+ 7FE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FDB             >
 319+ 7FDB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FDC 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FE0 53 2D 46 4E >
 319+ 7FE4             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FE3 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FE4             >
 319+ 7FE4 AC 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FE6             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FE6 E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FE8             >                else
 319+ 7FE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FE8             >
 319+ 7FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FE8 00 00 00...                  ds      40
 321+ 8010              // constant path
 322+ 8010                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8010             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8010             >
 322+ 8010             >                // dummy db directives used to calculate length of namec
 322+ 8010 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8014 53 2D 49 4E >
 322+ 8018 43          >
 322+ 8019             >len_NFA         defl    $ - temp_NFA
 322+ 8019             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8010             >
 322+ 8010 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8011 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8015 53 2D 49 4E >
 322+ 8019 43          >
 322+ 801A             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8019 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 801A             >
 322+ 801A DB 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 801C             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 801C E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 801E             >                else
 322+ 801E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 801E             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 801E             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 801E             >
 322+ 801E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 801E 04 69 6E 63                  db      4, "inc/", 0
 323+ 8022 2F 00
 324+ 8024                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8024             >
 324+ 8024             >                // dummy db directives used to calculate length of namec
 324+ 8024 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8028 53 2D 4C 49 >
 324+ 802C 42          >
 324+ 802D             >len_NFA         defl    $ - temp_NFA
 324+ 802D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8024             >
 324+ 8024 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8025 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8029 53 2D 4C 49 >
 324+ 802D 42          >
 324+ 802E             >                org     $-1                 // alter last byte of Name just above to set
 324+ 802D C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 802E             >
 324+ 802E 10 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8030             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8030 E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8032             >                else
 324+ 8032 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 8032             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8032             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8032             >
 324+ 8032             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8032 04 6C 69 62                  db      4, "lib/", 0
 325+ 8036 2F 00
 326+ 8038
 327+ 8038              // Concatenate path at a and filename and include it
 328+ 8038              // No error is issued if filename doesn't exist.
 329+ 8038                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8038             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8038             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8038             >
 329+ 8038             >                // dummy db directives used to calculate length of namec
 329+ 8038 4E 45 45 44 >                db      "NEEDS/"
 329+ 803C 53 2F       >
 329+ 803E             >len_NFA         defl    $ - temp_NFA
 329+ 803E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8038             >
 329+ 8038 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8039 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 803D 53 2F       >
 329+ 803F             >                org     $-1                 // alter last byte of Name just above to set
 329+ 803E AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 803F             >
 329+ 803F 24 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8041             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8041 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8043             >                else
 329+ 8043 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 8043             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8043             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8043             >
 329+ 8043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8043 48 72 F2 6A                  dw      COUNT, TUCK             // n a n
 331+ 8047 E6 7F 02 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 804B 9D 68
 332+ 804D E6 7F 2F 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8051 B6 7F 50 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8055 02 6B
 334+ 8057 A9 63 23 00                  dw      LIT, 35
 335+ 805B 9D 68                        dw      CMOVE
 336+ 805D E6 7F                        dw      NEEDS_FN
 337+ 805F 1C 74 12 6D                  dw      PAD, ONE, F_OPEN
 337+ 8063 4A 68
 338+ 8065 EC 69                        dw      ZEQUAL
 339+ 8067 2C 64                        dw      ZBRANCH
 340+ 8069 08 00                        dw      Needs_1 - $
 341+ 806B B8 7E                        dw          F_INCLUDE
 342+ 806D 15 64                        dw      BRANCH
 343+ 806F 04 00                        dw      Needs_2 - $
 344+ 8071              Needs_1:
 345+ 8071              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8071              //              dw          LIT, 43, MESSAGE
 347+ 8071 DA 6A                        dw          DROP
 348+ 8073              Needs_2:
 349+ 8073 AA 69                        dw      EXIT                    // ;
 350+ 8075
 351+ 8075
 352+ 8075                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8075             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8075             >
 352+ 8075             >                // dummy db directives used to calculate length of namec
 352+ 8075 4E 44 4F 4D >                db      "NDOM"
 352+ 8079             >len_NFA         defl    $ - temp_NFA
 352+ 8079             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8075             >
 352+ 8075 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8076 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 807A             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8079 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 807A             >
 352+ 807A 38 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 807C             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 807C E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 807E             >                else
 352+ 807E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 807E             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 807E             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 807E             >
 352+ 807E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 807E              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 807E 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8082 7C 5C 3C 3E
 354+ 8086 22
 355+ 8087
 356+ 8087                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 8087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 8087             >
 356+ 8087             >                // dummy db directives used to calculate length of namec
 356+ 8087 4E 43 44 4D >                db      "NCDM"
 356+ 808B             >len_NFA         defl    $ - temp_NFA
 356+ 808B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 8087             >
 356+ 8087 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 8088 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 808C             >                org     $-1                 // alter last byte of Name just above to set
 356+ 808B CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 808C             >
 356+ 808C 75 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 808E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 808E E2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8090             >                else
 356+ 8090 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 8090             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8090             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8090             >
 356+ 8090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8090              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8090 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 8094 24 5F 7B 7D
 358+ 8098 7E
 359+ 8099
 360+ 8099              // Replace illegal character in filename using the map here above
 361+ 8099              // at the moment we need only  "
 362+ 8099                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 362+ 8099             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 362+ 8099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 8099             >
 362+ 8099             >                // dummy db directives used to calculate length of namec
 362+ 8099 4E 45 45 44 >                db      "NEEDS-CH"
 362+ 809D 53 2D 43 48 >
 362+ 80A1             >len_NFA         defl    $ - temp_NFA
 362+ 80A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 8099             >
 362+ 8099 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 809A 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 362+ 809E 53 2D 43 48 >
 362+ 80A2             >                org     $-1                 // alter last byte of Name just above to set
 362+ 80A1 C8          >                db      {b $} | END_BIT     // msb as name end
 362+ 80A2             >
 362+ 80A2 87 80       >                dw      last_NFA            // Link to previous definition Name
 362+ 80A4             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 80A4 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 80A6             >                else
 362+ 80A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 80A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 80A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 80A6             >
 362+ 80A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 80A6 48 72 5C 72                  dw      COUNT, BOUNDS
 364+ 80AA 86 64                        dw      C_DO
 365+ 80AC              Needs_3:
 366+ 80AC 8E 80 7C 80                  dw          NCDM, NDOM, LIT, 9
 366+ 80B0 A9 63 09 00
 367+ 80B4 90 64 BD 6B                  dw          I, CFETCH
 368+ 80B8 B8 65                        dw          C_MAP
 369+ 80BA 90 64 CB 6B                  dw          I, CSTORE
 370+ 80BE              Needs_4:
 371+ 80BE 04 64                        dw      C_LOOP
 372+ 80C0 EC FF                        dw      Needs_3 - $
 373+ 80C2 AA 69                        dw      EXIT
 374+ 80C4
 375+ 80C4
 376+ 80C4              // include  "path/cccc.f" if cccc is not defined
 377+ 80C4              // filename cccc.f is temporary stored at NEEDS-W
 378+ 80C4                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 378+ 80C4             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 378+ 80C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 80C4             >
 378+ 80C4             >                // dummy db directives used to calculate length of namec
 378+ 80C4 4E 45 45 44 >                db      "NEEDS-F"
 378+ 80C8 53 2D 46    >
 378+ 80CB             >len_NFA         defl    $ - temp_NFA
 378+ 80CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 80C4             >
 378+ 80C4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 80C5 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 378+ 80C9 53 2D 46    >
 378+ 80CC             >                org     $-1                 // alter last byte of Name just above to set
 378+ 80CB C6          >                db      {b $} | END_BIT     // msb as name end
 378+ 80CC             >
 378+ 80CC 99 80       >                dw      last_NFA            // Link to previous definition Name
 378+ 80CE             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 80CE 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 80D0             >                else
 378+ 80D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 80D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 80D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 80D0             >
 378+ 80D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 80D0 E1 75                        dw      LFIND
 380+ 80D2 2C 64                        dw      ZBRANCH
 381+ 80D4 0A 00                        dw      Needs_5 - $
 382+ 80D6
 383+ 80D6 DA 6A 50 6B                  dw          DROP, TWO_DROP
 384+ 80DA 15 64                        dw      BRANCH
 385+ 80DC 2C 00                        dw      Needs_6 - $
 386+ 80DE              Needs_5:
 387+ 80DE B6 7F                        dw          NEEDS_W
 388+ 80E0 A9 63 23 00                  dw          LIT, 35
 389+ 80E4 E6 73                        dw          ERASE                   // a
 390+ 80E6 E9 6E BD 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 390+ 80EA 50 6A
 391+ 80EC E9 6E CA 6A                  dw          HERE, OVER              // a n here n
 392+ 80F0 B6 7F 02 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 392+ 80F4 9D 68
 393+ 80F6 B6 7F A4 80                  dw          NEEDS_W, NEEDS_CHECK
 394+ 80FA B6 7F 2F 6A                  dw          NEEDS_W, PLUS           // a a1+1
 395+ 80FE A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 396+ 8102 02 6B AF 6B                  dw          SWAP, STORE             // a
 397+ 8106 41 80                        dw          NEEDS_SLASH
 398+ 8108              Needs_6:
 399+ 8108 AA 69                        dw      EXIT
 400+ 810A
 401+ 810A
 402+ 810A              // check for cccc exists in vocabulary
 403+ 810A              // if it doesn't then  INCLUDE  inc/cccc.F
 404+ 810A              // search in inc subdirectory
 405+ 810A                              Colon_Def NEEDS, "NEEDS", is_normal
 405+ 810A             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 405+ 810A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 810A             >
 405+ 810A             >                // dummy db directives used to calculate length of namec
 405+ 810A 4E 45 45 44 >                db      "NEEDS"
 405+ 810E 53          >
 405+ 810F             >len_NFA         defl    $ - temp_NFA
 405+ 810F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 810A             >
 405+ 810A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 810B 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 405+ 810F 53          >
 405+ 8110             >                org     $-1                 // alter last byte of Name just above to set
 405+ 810F D3          >                db      {b $} | END_BIT     // msb as name end
 405+ 8110             >
 405+ 8110 C4 80       >                dw      last_NFA            // Link to previous definition Name
 405+ 8112             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 8112 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 8114             >                else
 405+ 8114 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 8114             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 8114             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 8114             >
 405+ 8114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 8114 12 6E A2 6B                  dw      TO_IN, FETCH
 407+ 8118 0F 6B                        dw      DUP
 408+ 811A 1C 80 CE 80                  dw      NEEDS_INC, NEEDS_PATH
 409+ 811E 12 6E AF 6B                  dw      TO_IN, STORE
 410+ 8122 30 80 CE 80                  dw      NEEDS_LIB, NEEDS_PATH
 411+ 8126 12 6E AF 6B                  dw      TO_IN, STORE
 412+ 812A E1 75                        dw      LFIND
 413+ 812C 2C 64                        dw      ZBRANCH
 414+ 812E 08 00                        dw      Needs_10 - $
 415+ 8130 50 6B                        dw          TWO_DROP
 416+ 8132 15 64                        dw      BRANCH
 417+ 8134 10 00                        dw      Needs_11 - $
 418+ 8136              Needs_10:
 419+ 8136 B6 7F 48 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 419+ 813A 6A 72 F4 6F
 420+ 813E A9 63 2B 00                  dw      LIT, 43, MESSAGE
 420+ 8142 01 7B
 421+ 8144              Needs_11:
 422+ 8144 AA 69                        dw      EXIT
 423+ 8146
 424+ 8146
 425+ 8146              //  ______________________________________________________________________
 426+ 8146              //
 427+ 8146              // load+        n --
 428+ 8146                              Colon_Def LOAD_P, "LOAD+", is_normal
 428+ 8146             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 428+ 8146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 8146             >
 428+ 8146             >                // dummy db directives used to calculate length of namec
 428+ 8146 4C 4F 41 44 >                db      "LOAD+"
 428+ 814A 2B          >
 428+ 814B             >len_NFA         defl    $ - temp_NFA
 428+ 814B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 8146             >
 428+ 8146 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 8147 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 428+ 814B 2B          >
 428+ 814C             >                org     $-1                 // alter last byte of Name just above to set
 428+ 814B AB          >                db      {b $} | END_BIT     // msb as name end
 428+ 814C             >
 428+ 814C 0A 81       >                dw      last_NFA            // Link to previous definition Name
 428+ 814E             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 814E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 8150             >                else
 428+ 8150 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 8150             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 8150             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 8150             >
 428+ 8150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 8150 09 6E A2 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 429+ 8154 BD 69
 430+ 8156 12 6E A2 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 430+ 815A BD 69
 431+ 815C
 432+ 815C 0A 6D 12 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 432+ 8160 AF 6B
 433+ 8162 56 6D 68 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 433+ 8166 09 6E AF 6B
 434+ 816A CF 77                        dw      INTERPRET               // interpret
 435+ 816C
 436+ 816C D1 69 12 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 436+ 8170 AF 6B
 437+ 8172 D1 69 09 6E                  dw      R_TO, BLK, STORE        // r> blk !
 437+ 8176 AF 6B
 438+ 8178 AA 69                        dw      EXIT                    // ;
 439+ 817A
 440+ 817A              //  ______________________________________________________________________
 441+ 817A              //
 442+ 817A              // -->          --
 443+ 817A                              Colon_Def LOAD_NEXT, "-->", is_immediate
 443+ 817A             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 443+ 817A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 817A             >
 443+ 817A             >                // dummy db directives used to calculate length of namec
 443+ 817A 2D 2D 3E    >                db      "-->"
 443+ 817D             >len_NFA         defl    $ - temp_NFA
 443+ 817D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 817A             >
 443+ 817A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 817B 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 443+ 817E             >                org     $-1                 // alter last byte of Name just above to set
 443+ 817D BE          >                db      {b $} | END_BIT     // msb as name end
 443+ 817E             >
 443+ 817E 46 81       >                dw      last_NFA            // Link to previous definition Name
 443+ 8180             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 8180 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 8182             >                else
 443+ 8182 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 8182             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 8182             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 8182             >
 443+ 8182             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 8182 27 71                        dw      QLOADING                // ?loading
 445+ 8184 0A 6D 12 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 445+ 8188 AF 6B
 446+ 818A 56 6D                        dw      BSCR                    // b/scr
 447+ 818C 09 6E A2 6B                  dw      BLK, FETCH              // blk @
 448+ 8190 CA 6A                        dw      OVER                    // over
 449+ 8192 95 7A                        dw      MOD                     // mod
 450+ 8194 3C 6F                        dw      SUBTRACT                // -
 451+ 8196 09 6E 7F 6B                  dw      BLK, PLUSSTORE          // +!
 452+ 819A AA 69                        dw      EXIT                    // ;
 453+ 819C
 454+ 819C              //  ______________________________________________________________________
 455+ 819C              //
 456+ 819C              // '            -- xt
 457+ 819C                              Colon_Def TICK, "'", is_normal
 457+ 819C             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 457+ 819C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 819C             >
 457+ 819C             >                // dummy db directives used to calculate length of namec
 457+ 819C 27          >                db      "'"
 457+ 819D             >len_NFA         defl    $ - temp_NFA
 457+ 819D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 819C             >
 457+ 819C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 819D 27          >                db      "'"               // name string in 7-bit ascii, but
 457+ 819E             >                org     $-1                 // alter last byte of Name just above to set
 457+ 819D A7          >                db      {b $} | END_BIT     // msb as name end
 457+ 819E             >
 457+ 819E 7A 81       >                dw      last_NFA            // Link to previous definition Name
 457+ 81A0             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 81A0 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 81A2             >                else
 457+ 81A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 81A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 81A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 81A2             >
 457+ 81A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 81A2 E1 75                        dw      LFIND                   // -find
 459+ 81A4 EC 69                        dw      ZEQUAL                  // 0=
 460+ 81A6 0A 6D AE 70                  dw      ZERO, QERROR            // 0 ?error
 461+ 81AA DA 6A                        dw      DROP                    // drop
 462+ 81AC AA 69                        dw      EXIT                    // ;
 463+ 81AE
 464+ 81AE              //  ______________________________________________________________________
 465+ 81AE              //
 466+ 81AE              // forget       -- cccc
 467+ 81AE                              Colon_Def FORGET, "FORGET", is_normal
 467+ 81AE             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 467+ 81AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 81AE             >
 467+ 81AE             >                // dummy db directives used to calculate length of namec
 467+ 81AE 46 4F 52 47 >                db      "FORGET"
 467+ 81B2 45 54       >
 467+ 81B4             >len_NFA         defl    $ - temp_NFA
 467+ 81B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 81AE             >
 467+ 81AE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 81AF 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 467+ 81B3 45 54       >
 467+ 81B5             >                org     $-1                 // alter last byte of Name just above to set
 467+ 81B4 D4          >                db      {b $} | END_BIT     // msb as name end
 467+ 81B5             >
 467+ 81B5 9C 81       >                dw      last_NFA            // Link to previous definition Name
 467+ 81B7             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 81B7 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 81B9             >                else
 467+ 81B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 81B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 81B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 81B9             >
 467+ 81B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 81B9 4A 6E A2 6B                  dw      CURRENT, FETCH          // current @
 469+ 81BD 3D 6E A2 6B                  dw      CONTEXT, FETCH          // context @
 470+ 81C1 3C 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 470+ 81C5 17 00 AE 70
 471+ 81C9 A0 81 7E 70                  dw      TICK, TO_BODY           // ' >body
 472+ 81CD 0F 6B C0 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 472+ 81D1 A2 6B
 473+ 81D3 57 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 473+ 81D7 15 00 AE 70
 474+ 81DB 0F 6B 54 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 474+ 81DF C8 6D AF 6B
 475+ 81E3 3A 70 A2 6B                  dw      LFA, FETCH              // lfa @
 476+ 81E7 3D 6E A2 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 476+ 81EB AF 6B
 477+ 81ED AA 69                        dw      EXIT                    // ;
 478+ 81EF
 479+ 81EF              //  ______________________________________________________________________
 480+ 81EF              //
 481+ 81EF              // marker       -- cccc
 482+ 81EF                              Colon_Def MARKER, "MARKER", is_immediate
 482+ 81EF             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 482+ 81EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 81EF             >
 482+ 81EF             >                // dummy db directives used to calculate length of namec
 482+ 81EF 4D 41 52 4B >                db      "MARKER"
 482+ 81F3 45 52       >
 482+ 81F5             >len_NFA         defl    $ - temp_NFA
 482+ 81F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 81EF             >
 482+ 81EF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 81F0 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 482+ 81F4 45 52       >
 482+ 81F6             >                org     $-1                 // alter last byte of Name just above to set
 482+ 81F5 D2          >                db      {b $} | END_BIT     // msb as name end
 482+ 81F6             >
 482+ 81F6 AE 81       >                dw      last_NFA            // Link to previous definition Name
 482+ 81F8             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 81F8 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 81FA             >                else
 482+ 81FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 81FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 81FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 81FA             >
 482+ 81FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 81FA 11 72                        dw      CBUILDS
 484+ 81FC D6 6D A2 6B                  dw      VOC_LINK, FETCH, COMMA
 484+ 8200 05 6F
 485+ 8202 4A 6E A2 6B                  dw      CURRENT, FETCH, COMMA
 485+ 8206 05 6F
 486+ 8208 3D 6E A2 6B                  dw      CONTEXT, FETCH, COMMA
 486+ 820C 05 6F
 487+ 820E 2A 70 05 6F                  dw      LATEST, COMMA
 488+ 8212 2A 70 68 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 488+ 8216 3A 70 A2 6B
 488+ 821A 05 6F
 489+ 821C 21 72                        dw      DOES_TO
 490+ 821E 0F 6B A2 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 490+ 8222 D6 6D AF 6B
 490+ 8226 78 6A
 491+ 8228 0F 6B A2 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 491+ 822C 4A 6E AF 6B
 491+ 8230 78 6A
 492+ 8232 0F 6B A2 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 492+ 8236 3D 6E AF 6B
 492+ 823A 78 6A
 493+ 823C 0F 6B A2 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 493+ 8240 C8 6D AF 6B
 493+ 8244 78 6A
 494+ 8246 A2 6B 4A 6E                  dw           FETCH, CURRENT, FETCH, STORE
 494+ 824A A2 6B AF 6B
 495+ 824E AA 69                        dw      EXIT
 496+ 8250
 497+ 8250              //  ______________________________________________________________________
 498+ 8250              //
 499+ 8250              // spaces       n --
 500+ 8250                              Colon_Def SPACES, "SPACES", is_normal
 500+ 8250             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 500+ 8250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 8250             >
 500+ 8250             >                // dummy db directives used to calculate length of namec
 500+ 8250 53 50 41 43 >                db      "SPACES"
 500+ 8254 45 53       >
 500+ 8256             >len_NFA         defl    $ - temp_NFA
 500+ 8256             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 8250             >
 500+ 8250 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 8251 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 500+ 8255 45 53       >
 500+ 8257             >                org     $-1                 // alter last byte of Name just above to set
 500+ 8256 D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 8257             >
 500+ 8257 EF 81       >                dw      last_NFA            // Link to previous definition Name
 500+ 8259             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 8259 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 825B             >                else
 500+ 825B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 825B             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 825B             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 825B             >
 500+ 825B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 825B 0A 6D A6 6F                  dw      ZERO, MAX
 502+ 825F 0A 6D 59 64                  dw      ZERO, C_Q_DO
 503+ 8263 08 00                        dw      Spaces_Leave - $
 504+ 8265              Spaces_Loop:
 505+ 8265 F4 6F                        dw          SPACE
 506+ 8267 04 64                        dw      C_LOOP
 507+ 8269 FC FF                        dw      Spaces_Loop - $
 508+ 826B              Spaces_Leave:
 509+ 826B AA 69                        dw      EXIT                    // ;
 510+ 826D
 511+ 826D              //  ______________________________________________________________________
 512+ 826D              //
 513+ 826D              // <#           --
 514+ 826D                              Colon_Def BEGIN_DASH, "<#", is_normal
 514+ 826D             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 514+ 826D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 826D             >
 514+ 826D             >                // dummy db directives used to calculate length of namec
 514+ 826D 3C 23       >                db      "<#"
 514+ 826F             >len_NFA         defl    $ - temp_NFA
 514+ 826F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 826D             >
 514+ 826D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 826E 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 514+ 8270             >                org     $-1                 // alter last byte of Name just above to set
 514+ 826F A3          >                db      {b $} | END_BIT     // msb as name end
 514+ 8270             >
 514+ 8270 50 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8272             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8272 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 8274             >                else
 514+ 8274 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 8274             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 8274             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 8274             >
 514+ 8274             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 8274 1C 74 8B 6E                  dw      PAD, HLD, STORE
 515+ 8278 AF 6B
 516+ 827A AA 69                        dw      EXIT
 517+ 827C
 518+ 827C              //  ______________________________________________________________________
 519+ 827C              //
 520+ 827C              // #>           --
 521+ 827C                              Colon_Def DASH_END, "#>", is_normal
 521+ 827C             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 521+ 827C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 521+ 827C             >
 521+ 827C             >                // dummy db directives used to calculate length of namec
 521+ 827C 23 3E       >                db      "#>"
 521+ 827E             >len_NFA         defl    $ - temp_NFA
 521+ 827E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 521+ 827C             >
 521+ 827C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 521+ 827D 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 521+ 827F             >                org     $-1                 // alter last byte of Name just above to set
 521+ 827E BE          >                db      {b $} | END_BIT     // msb as name end
 521+ 827F             >
 521+ 827F 6D 82       >                dw      last_NFA            // Link to previous definition Name
 521+ 8281             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 521+ 8281 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 521+ 8283             >                else
 521+ 8283 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 521+ 8283             >                endif           ; ok        // for other definitions it "points" the correct handler
 521+ 8283             >                // Use of "; ok" to suppress "warning[fwdref]"
 521+ 8283             >
 521+ 8283             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 522+ 8283 50 6B                        dw      TWO_DROP
 523+ 8285 8B 6E A2 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 523+ 8289 1C 74 CA 6A
 523+ 828D 3C 6F
 524+ 828F AA 69                        dw      EXIT
 525+ 8291
 526+ 8291              //  ______________________________________________________________________
 527+ 8291              //
 528+ 8291              // sign         n d -- d
 529+ 8291                              Colon_Def SIGN, "SIGN", is_normal
 529+ 8291             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 529+ 8291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 8291             >
 529+ 8291             >                // dummy db directives used to calculate length of namec
 529+ 8291 53 49 47 4E >                db      "SIGN"
 529+ 8295             >len_NFA         defl    $ - temp_NFA
 529+ 8295             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 8291             >
 529+ 8291 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 8292 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 529+ 8296             >                org     $-1                 // alter last byte of Name just above to set
 529+ 8295 CE          >                db      {b $} | END_BIT     // msb as name end
 529+ 8296             >
 529+ 8296 7C 82       >                dw      last_NFA            // Link to previous definition Name
 529+ 8298             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 8298 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 829A             >                else
 529+ 829A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 529+ 829A             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 829A             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 829A             >
 529+ 829A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 829A 1C 6B 07 6A                  dw      ROT, ZLESS
 531+ 829E 2C 64                        dw      ZBRANCH
 532+ 82A0 08 00                        dw      Sign_Endif - $
 533+ 82A2 A9 63 2D 00                  dw          LIT, 45, HOLD
 533+ 82A6 06 74
 534+ 82A8              Sign_Endif:
 535+ 82A8 AA 69                        dw      EXIT
 536+ 82AA
 537+ 82AA              //  ______________________________________________________________________
 538+ 82AA              //
 539+ 82AA              // #           d1 -- d2
 540+ 82AA                              Colon_Def DASH, "#", is_normal
 540+ 82AA             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 540+ 82AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 82AA             >
 540+ 82AA             >                // dummy db directives used to calculate length of namec
 540+ 82AA 23          >                db      "#"
 540+ 82AB             >len_NFA         defl    $ - temp_NFA
 540+ 82AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 82AA             >
 540+ 82AA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 82AB 23          >                db      "#"               // name string in 7-bit ascii, but
 540+ 82AC             >                org     $-1                 // alter last byte of Name just above to set
 540+ 82AB A3          >                db      {b $} | END_BIT     // msb as name end
 540+ 82AC             >
 540+ 82AC 91 82       >                dw      last_NFA            // Link to previous definition Name
 540+ 82AE             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 82AE 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 540+ 82B0             >                else
 540+ 82B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 540+ 82B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 82B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 82B0             >
 540+ 82B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 82B0 5F 6E A2 6B                  dw      BASE, FETCH
 542+ 82B4
 543+ 82B4 BD 69                        dw      TO_R                    // >r           ( ud1 )
 544+ 82B6 0A 6D E5 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 544+ 82BA 01 69
 545+ 82BC D1 69 02 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 545+ 82C0 BD 69
 546+ 82C2 01 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 547+ 82C4 D1 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 548+ 82C6
 549+ 82C6 1C 6B                        dw      ROT
 550+ 82C8 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 550+ 82CC CA 6A 6B 6F
 551+ 82D0 2C 64                        dw      ZBRANCH
 552+ 82D2 08 00                        dw      Dash_Endif - $
 553+ 82D4 A9 63 07 00                  dw          LIT, 7, PLUS
 553+ 82D8 2F 6A
 554+ 82DA              Dash_Endif:
 555+ 82DA
 556+ 82DA A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 556+ 82DE 2F 6A 06 74
 557+ 82E2 AA 69                        dw      EXIT
 558+ 82E4
 559+ 82E4              //  ______________________________________________________________________
 560+ 82E4              //
 561+ 82E4              // #s           d1 -- d2
 562+ 82E4                              Colon_Def DASHES, "#S", is_normal
 562+ 82E4             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 562+ 82E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ 82E4             >
 562+ 82E4             >                // dummy db directives used to calculate length of namec
 562+ 82E4 23 53       >                db      "#S"
 562+ 82E6             >len_NFA         defl    $ - temp_NFA
 562+ 82E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ 82E4             >
 562+ 82E4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ 82E5 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 562+ 82E7             >                org     $-1                 // alter last byte of Name just above to set
 562+ 82E6 D3          >                db      {b $} | END_BIT     // msb as name end
 562+ 82E7             >
 562+ 82E7 AA 82       >                dw      last_NFA            // Link to previous definition Name
 562+ 82E9             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 82E9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 82EB             >                else
 562+ 82EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 562+ 82EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 82EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 82EB             >
 562+ 82EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 82EB              Dashes_Begin:
 564+ 82EB AE 82 70 6B                  dw      DASH, TWO_DUP
 565+ 82EF 4C 69 EC 69                  dw          OR_OP, ZEQUAL
 566+ 82F3 2C 64                        dw      ZBRANCH
 567+ 82F5 F6 FF                        dw      Dashes_Begin - $
 568+ 82F7 AA 69                        dw      EXIT
 569+ 82F9
 570+ 82F9              //  ______________________________________________________________________
 571+ 82F9              //
 572+ 82F9              // d.r          d n --
 573+ 82F9                              Colon_Def D_DOT_R, "D.R", is_normal
 573+ 82F9             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 573+ 82F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 82F9             >
 573+ 82F9             >                // dummy db directives used to calculate length of namec
 573+ 82F9 44 2E 52    >                db      "D.R"
 573+ 82FC             >len_NFA         defl    $ - temp_NFA
 573+ 82FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 82F9             >
 573+ 82F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 82FA 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 573+ 82FD             >                org     $-1                 // alter last byte of Name just above to set
 573+ 82FC D2          >                db      {b $} | END_BIT     // msb as name end
 573+ 82FD             >
 573+ 82FD E4 82       >                dw      last_NFA            // Link to previous definition Name
 573+ 82FF             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 82FF 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 8301             >                else
 573+ 8301 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 8301             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 8301             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 8301             >
 573+ 8301             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 8301 BD 69                        dw      TO_R
 575+ 8303 F2 6A BE 79                  dw      TUCK, DABS
 576+ 8307 72 82 E9 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 576+ 830B 98 82 81 82
 577+ 830F D1 69                        dw      R_TO
 578+ 8311 CA 6A 3C 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 578+ 8315 59 82 6A 72
 579+ 8319 AA 69                        dw      EXIT
 580+ 831B
 581+ 831B              //  ______________________________________________________________________
 582+ 831B              //
 583+ 831B              // .r           n1 n2 --
 584+ 831B                              Colon_Def DOT_R, ".R", is_normal
 584+ 831B             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 584+ 831B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 831B             >
 584+ 831B             >                // dummy db directives used to calculate length of namec
 584+ 831B 2E 52       >                db      ".R"
 584+ 831D             >len_NFA         defl    $ - temp_NFA
 584+ 831D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 831B             >
 584+ 831B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 831C 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 584+ 831E             >                org     $-1                 // alter last byte of Name just above to set
 584+ 831D D2          >                db      {b $} | END_BIT     // msb as name end
 584+ 831E             >
 584+ 831E F9 82       >                dw      last_NFA            // Link to previous definition Name
 584+ 8320             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 8320 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 8322             >                else
 584+ 8322 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 8322             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 8322             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 8322             >
 584+ 8322             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 8322 BD 69                        dw      TO_R
 586+ 8324 28 6F D1 69                  dw      S_TO_D, R_TO
 587+ 8328 FF 82                        dw      D_DOT_R
 588+ 832A AA 69                        dw      EXIT
 589+ 832C
 590+ 832C              //  ______________________________________________________________________
 591+ 832C              //
 592+ 832C              // d.           d --
 593+ 832C                              Colon_Def D_DOT, "D.", is_normal
 593+ 832C             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 593+ 832C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 832C             >
 593+ 832C             >                // dummy db directives used to calculate length of namec
 593+ 832C 44 2E       >                db      "D."
 593+ 832E             >len_NFA         defl    $ - temp_NFA
 593+ 832E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 832C             >
 593+ 832C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 832D 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 593+ 832F             >                org     $-1                 // alter last byte of Name just above to set
 593+ 832E AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 832F             >
 593+ 832F 1B 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 8331             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8331 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 8333             >                else
 593+ 8333 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 8333             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 8333             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 8333             >
 593+ 8333             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 8333 0A 6D FF 82                  dw      ZERO, D_DOT_R, SPACE
 594+ 8337 F4 6F
 595+ 8339 AA 69                        dw      EXIT
 596+ 833B
 597+ 833B              //  ______________________________________________________________________
 598+ 833B              //
 599+ 833B              // .            n --
 600+ 833B                              Colon_Def DOT, ".", is_normal
 600+ 833B             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 600+ 833B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 833B             >
 600+ 833B             >                // dummy db directives used to calculate length of namec
 600+ 833B 2E          >                db      "."
 600+ 833C             >len_NFA         defl    $ - temp_NFA
 600+ 833C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 833B             >
 600+ 833B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 833C 2E          >                db      "."               // name string in 7-bit ascii, but
 600+ 833D             >                org     $-1                 // alter last byte of Name just above to set
 600+ 833C AE          >                db      {b $} | END_BIT     // msb as name end
 600+ 833D             >
 600+ 833D 2C 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 833F             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 833F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 8341             >                else
 600+ 8341 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 8341             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 8341             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 8341             >
 600+ 8341             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 8341 28 6F 31 83                  dw      S_TO_D, D_DOT
 602+ 8345 AA 69                        dw      EXIT
 603+ 8347
 604+ 8347              //  ______________________________________________________________________
 605+ 8347              //
 606+ 8347              // ?            n --
 607+ 8347                              Colon_Def QUESTION, "?", is_normal
 607+ 8347             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 607+ 8347             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 8347             >
 607+ 8347             >                // dummy db directives used to calculate length of namec
 607+ 8347 3F          >                db      "?"
 607+ 8348             >len_NFA         defl    $ - temp_NFA
 607+ 8348             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 8347             >
 607+ 8347 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 8348 3F          >                db      "?"               // name string in 7-bit ascii, but
 607+ 8349             >                org     $-1                 // alter last byte of Name just above to set
 607+ 8348 BF          >                db      {b $} | END_BIT     // msb as name end
 607+ 8349             >
 607+ 8349 3B 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 834B             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 834B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 834D             >                else
 607+ 834D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 834D             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 834D             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 834D             >
 607+ 834D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 834D A2 6B 3F 83                  dw      FETCH, DOT
 609+ 8351 AA 69                        dw      EXIT
 610+ 8353
 611+ 8353              //  ______________________________________________________________________
 612+ 8353              //
 613+ 8353              // u.           u --
 614+ 8353                              Colon_Def U_DOT, "U.", is_normal
 614+ 8353             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 614+ 8353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 8353             >
 614+ 8353             >                // dummy db directives used to calculate length of namec
 614+ 8353 55 2E       >                db      "U."
 614+ 8355             >len_NFA         defl    $ - temp_NFA
 614+ 8355             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 8353             >
 614+ 8353 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 8354 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 614+ 8356             >                org     $-1                 // alter last byte of Name just above to set
 614+ 8355 AE          >                db      {b $} | END_BIT     // msb as name end
 614+ 8356             >
 614+ 8356 47 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 8358             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 8358 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 835A             >                else
 614+ 835A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 835A             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 835A             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 835A             >
 614+ 835A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 835A 0A 6D 31 83                  dw      ZERO, D_DOT
 616+ 835E AA 69                        dw      EXIT
 617+ 8360
 618+ 8360              //  ______________________________________________________________________
 619+ 8360              //
 620+ 8360              // words        --
 621+ 8360                              Colon_Def WORDS, "WORDS", is_normal
 621+ 8360             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 621+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 8360             >
 621+ 8360             >                // dummy db directives used to calculate length of namec
 621+ 8360 57 4F 52 44 >                db      "WORDS"
 621+ 8364 53          >
 621+ 8365             >len_NFA         defl    $ - temp_NFA
 621+ 8365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 8360             >
 621+ 8360 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 8361 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 621+ 8365 53          >
 621+ 8366             >                org     $-1                 // alter last byte of Name just above to set
 621+ 8365 D3          >                db      {b $} | END_BIT     // msb as name end
 621+ 8366             >
 621+ 8366 53 83       >                dw      last_NFA            // Link to previous definition Name
 621+ 8368             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 8368 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 836A             >                else
 621+ 836A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 621+ 836A             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 836A             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 836A             >
 621+ 836A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 836A A9 63 80 00                  dw      LIT, 128, OUT, STORE
 622+ 836E 1B 6E AF 6B
 623+ 8372 3D 6E A2 6B                  dw      CONTEXT, FETCH, FETCH
 623+ 8376 A2 6B
 624+ 8378              Words_Begin:
 625+ 8378 0F 6B BD 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 625+ 837C A9 63 1F 00
 625+ 8380 3A 69
 626+ 8382 1B 6E A2 6B                  dw          OUT, FETCH, PLUS
 626+ 8386 2F 6A
 627+ 8388 3E 6D 6B 6F                  dw          CL, LESS, ZEQUAL
 627+ 838C EC 69
 628+ 838E 2C 64                        dw          ZBRANCH
 629+ 8390 0A 00                        dw          Words_Endif - $
 630+ 8392 2A 66 0A 6D                  dw              CR, ZERO, OUT, STORE
 630+ 8396 1B 6E AF 6B
 631+ 839A              Words_Endif:
 632+ 839A 0F 6B 52 76                  dw          DUP, ID_DOT
 633+ 839E 68 70 3A 70                  dw          PFA, LFA, FETCH
 633+ 83A2 A2 6B
 634+ 83A4 0F 6B EC 69                  dw          DUP, ZEQUAL
 635+ 83A8 3F 67 4C 69                  dw          QTERMINAL, OR_OP
 636+ 83AC 2C 64                        dw      ZBRANCH
 637+ 83AE CA FF                        dw      Words_Begin - $
 638+ 83B0 DA 6A                        dw      DROP
 639+ 83B2 AA 69                        dw      EXIT
 640+ 83B4
 641+ 83B4              //  ______________________________________________________________________
 642+ 83B4              //
 643+ 83B4              // list         n --
 644+ 83B4                              Colon_Def LIST, "LIST", is_normal
 644+ 83B4             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 644+ 83B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ 83B4             >
 644+ 83B4             >                // dummy db directives used to calculate length of namec
 644+ 83B4 4C 49 53 54 >                db      "LIST"
 644+ 83B8             >len_NFA         defl    $ - temp_NFA
 644+ 83B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ 83B4             >
 644+ 83B4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ 83B5 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 644+ 83B9             >                org     $-1                 // alter last byte of Name just above to set
 644+ 83B8 D4          >                db      {b $} | END_BIT     // msb as name end
 644+ 83B9             >
 644+ 83B9 60 83       >                dw      last_NFA            // Link to previous definition Name
 644+ 83BB             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 83BB 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 83BD             >                else
 644+ 83BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 644+ 83BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 83BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 83BD             >
 644+ 83BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 83BD CD 71 2A 66                  dw      DECIMAL, CR
 646+ 83C1 0F 6B 24 6E                  dw      DUP, SCR, STORE
 646+ 83C5 AF 6B
 647+ 83C7 7E 74                        dw      C_DOT_QUOTE
 648+ 83C9 05 53 63 72                  db      5, "Scr# "
 648+ 83CD 23 20
 649+ 83CF 3F 83                        dw      DOT
 650+ 83D1 62 6D 0A 6D                  dw      LSCR, ZERO, C_DO
 650+ 83D5 86 64
 651+ 83D7              List_Loop:
 652+ 83D7 2A 66                        dw          CR
 653+ 83D9 90 64 22 6D                  dw          I, THREE
 654+ 83DD 20 83 F4 6F                  dw          DOT_R, SPACE
 655+ 83E1 90 64 24 6E                  dw          I, SCR, FETCH, DOT_LINE
 655+ 83E5 A2 6B ED 7A
 656+ 83E9 3F 67                        dw          QTERMINAL
 657+ 83EB 2C 64                        dw          ZBRANCH
 658+ 83ED 06 00                        dw          List_Endif - $
 659+ 83EF 41 64                        dw              C_LEAVE
 660+ 83F1 06 00                        dw              List_Leave - $
 661+ 83F3              List_Endif:
 662+ 83F3 04 64                        dw      C_LOOP
 663+ 83F5 E2 FF                        dw      List_Loop - $
 664+ 83F7              List_Leave:
 665+ 83F7 2A 66                        dw      CR
 666+ 83F9 AA 69                        dw      EXIT
 667+ 83FB
 668+ 83FB              //  ______________________________________________________________________
 669+ 83FB              //
 670+ 83FB              // index        n1 n2 --
 671+ 83FB                              Colon_Def INDEX, "INDEX", is_normal
 671+ 83FB             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 671+ 83FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 83FB             >
 671+ 83FB             >                // dummy db directives used to calculate length of namec
 671+ 83FB 49 4E 44 45 >                db      "INDEX"
 671+ 83FF 58          >
 671+ 8400             >len_NFA         defl    $ - temp_NFA
 671+ 8400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 83FB             >
 671+ 83FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 83FC 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 671+ 8400 58          >
 671+ 8401             >                org     $-1                 // alter last byte of Name just above to set
 671+ 8400 D8          >                db      {b $} | END_BIT     // msb as name end
 671+ 8401             >
 671+ 8401 B4 83       >                dw      last_NFA            // Link to previous definition Name
 671+ 8403             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 8403 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 671+ 8405             >                else
 671+ 8405 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 8405             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 8405             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 8405             >
 671+ 8405             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 8405 50 6A 02 6B                  dw      ONE_PLUS, SWAP, C_DO
 672+ 8409 86 64
 673+ 840B              Index_Loop:
 674+ 840B 2A 66 90 64                  dw          CR, I, THREE
 674+ 840F 22 6D
 675+ 8411 20 83 F4 6F                  dw          DOT_R, SPACE
 676+ 8415 0A 6D 90 64                  dw          ZERO, I, DOT_LINE
 676+ 8419 ED 7A
 677+ 841B 3F 67                        dw          QTERMINAL
 678+ 841D 2C 64                        dw          ZBRANCH
 679+ 841F 06 00                        dw          Index_Endif - $
 680+ 8421 41 64                        dw              C_LEAVE
 681+ 8423 06 00                        dw              Index_Leave - $
 682+ 8425              Index_Endif:
 683+ 8425 04 64                        dw      C_LOOP
 684+ 8427 E4 FF                        dw      Index_Loop - $
 685+ 8429              Index_Leave:
 686+ 8429 2A 66                        dw      CR
 687+ 842B AA 69                        dw      EXIT
 688+ 842D
 689+ 842D              //  ______________________________________________________________________
 690+ 842D              //
 691+ 842D              // cls          --
 692+ 842D                              Colon_Def CLS, "CLS", is_normal
 692+ 842D             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 692+ 842D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 842D             >
 692+ 842D             >                // dummy db directives used to calculate length of namec
 692+ 842D 43 4C 53    >                db      "CLS"
 692+ 8430             >len_NFA         defl    $ - temp_NFA
 692+ 8430             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 842D             >
 692+ 842D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 842E 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 692+ 8431             >                org     $-1                 // alter last byte of Name just above to set
 692+ 8430 D3          >                db      {b $} | END_BIT     // msb as name end
 692+ 8431             >
 692+ 8431 FB 83       >                dw      last_NFA            // Link to previous definition Name
 692+ 8433             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 8433 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 8435             >                else
 692+ 8435 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 692+ 8435             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 8435             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 8435             >
 692+ 8435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 8435 A9 63 0E 00                  dw      LIT, $0E, EMITC
 693+ 8439 13 66
 694+ 843B AA 69                        dw      EXIT
 695+ 843D
 696+ 843D              //  ______________________________________________________________________
 697+ 843D              //
 698+ 843D              // splash       --
 699+ 843D                              Colon_Def SPLASH, "SPLASH", is_normal
 699+ 843D             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 699+ 843D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 843D             >
 699+ 843D             >                // dummy db directives used to calculate length of namec
 699+ 843D 53 50 4C 41 >                db      "SPLASH"
 699+ 8441 53 48       >
 699+ 8443             >len_NFA         defl    $ - temp_NFA
 699+ 8443             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 843D             >
 699+ 843D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 843E 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 699+ 8442 53 48       >
 699+ 8444             >                org     $-1                 // alter last byte of Name just above to set
 699+ 8443 C8          >                db      {b $} | END_BIT     // msb as name end
 699+ 8444             >
 699+ 8444 2D 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 8446             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 8446 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 8448             >                else
 699+ 8448 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 8448             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 8448             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 8448             >
 699+ 8448             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 8448 33 84                        dw      CLS
 701+ 844A 7E 74                        dw      C_DOT_QUOTE
 702+ 844C 5A                           db      90  // length of the following string CR included.
 703+ 844D 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 703+ 8451 72 74 68 20
 703+ 8455 31 2E 35 32
 703+ 8459 20 4E 65 78
 703+ 845D 74 5A 58 4F
 703+ 8461 53 20 76 65
 703+ 8465 72 73 69 6F
 703+ 8469 6E 0D
 704+ 846B 49 6E 64 69                  db      "Indirect Threaded - build 20220508", 13
 704+ 846F 72 65 63 74
 704+ 8473 20 54 68 72
 704+ 8477 65 61 64 65
 704+ 847B 64 20 2D 20
 704+ 847F 62 75 69 6C
 704+ 8483 64 20 32 30
 704+ 8487 32 32 30 35
 704+ 848B 30 38 0D
 705+ 848E 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 705+ 8492 2D 32 30 32
 705+ 8496 32 20 4D 61
 705+ 849A 74 74 65 6F
 705+ 849E 20 56 69 74
 705+ 84A2 74 75 72 69
 705+ 84A6 0D
 706+ 84A7 AA 69                        dw      EXIT
 707+ 84A9
 708+ 84A9              //  ______________________________________________________________________
 709+ 84A9              //
 710+ 84A9              // video        --
 711+ 84A9                              Colon_Def VIDEO, "VIDEO", is_normal
 711+ 84A9             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 711+ 84A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 84A9             >
 711+ 84A9             >                // dummy db directives used to calculate length of namec
 711+ 84A9 56 49 44 45 >                db      "VIDEO"
 711+ 84AD 4F          >
 711+ 84AE             >len_NFA         defl    $ - temp_NFA
 711+ 84AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 84A9             >
 711+ 84A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 84AA 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 711+ 84AE 4F          >
 711+ 84AF             >                org     $-1                 // alter last byte of Name just above to set
 711+ 84AE CF          >                db      {b $} | END_BIT     // msb as name end
 711+ 84AF             >
 711+ 84AF 3D 84       >                dw      last_NFA            // Link to previous definition Name
 711+ 84B1             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 84B1 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 711+ 84B3             >                else
 711+ 84B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 84B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 84B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 84B3             >
 711+ 84B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 84B3 1A 6D 0F 6B                  dw      TWO, DUP, DEVICE, STORE
 712+ 84B7 35 7B AF 6B
 713+ 84BB 85 67                        dw      SELECT
 714+ 84BD AA 69                        dw      EXIT
 715+ 84BF
 716+ 84BF              //  ______________________________________________________________________
 717+ 84BF              //
 718+ 84BF              // accept-      a n1 -- n2
 719+ 84BF                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 719+ 84BF             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 719+ 84BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ 84BF             >
 719+ 84BF             >                // dummy db directives used to calculate length of namec
 719+ 84BF 41 43 43 45 >                db      "ACCEPT-"
 719+ 84C3 50 54 2D    >
 719+ 84C6             >len_NFA         defl    $ - temp_NFA
 719+ 84C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ 84BF             >
 719+ 84BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ 84C0 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 719+ 84C4 50 54 2D    >
 719+ 84C7             >                org     $-1                 // alter last byte of Name just above to set
 719+ 84C6 AD          >                db      {b $} | END_BIT     // msb as name end
 719+ 84C7             >
 719+ 84C7 A9 84       >                dw      last_NFA            // Link to previous definition Name
 719+ 84C9             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 84C9 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 84CB             >                else
 719+ 84CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 719+ 84CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 84CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 84CB             >
 719+ 84CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 84CB BD 69                        dw      TO_R
 721+ 84CD 0A 6D                        dw      ZERO
 722+ 84CF 02 6B                        dw      SWAP
 723+ 84D1 0F 6B                        dw      DUP
 724+ 84D3 D1 69                        dw      R_TO
 725+ 84D5 2F 6A                        dw      PLUS
 726+ 84D7 02 6B                        dw      SWAP
 727+ 84D9 86 64                        dw      C_DO
 728+ 84DB              AcceptN_Loop:
 729+ 84DB 6F 7B                        dw          MMU7_FETCH
 730+ 84DD 60 67                        dw          INKEY
 731+ 84DF 02 6B 81 7B                  dw          SWAP, MMU7_STORE
 732+ 84E3 0F 6B EC 69                  dw          DUP, ZEQUAL
 733+ 84E7 2C 64                        dw          ZBRANCH
 734+ 84E9 06 00                        dw          AcceptN_Endif_1 - $
 735+ 84EB B1 84 8F 78                  dw              VIDEO, QUIT
 736+ 84EF              AcceptN_Endif_1:
 737+ 84EF 0F 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 737+ 84F3 0D 00 4A 6F
 738+ 84F7 2C 64                        dw          ZBRANCH
 739+ 84F9 06 00                        dw          AcceptN_Endif_2 - $
 740+ 84FB DA 6A 0A 6D                  dw              DROP, ZERO
 741+ 84FF              AcceptN_Endif_2:
 742+ 84FF 0F 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 742+ 8503 0A 00 4A 6F
 743+ 8507 2C 64                        dw          ZBRANCH
 744+ 8509 06 00                        dw          AcceptN_Endif_3 - $
 745+ 850B DA 6A 0A 6D                  dw              DROP, ZERO
 746+ 850F              AcceptN_Endif_3:
 747+ 850F 90 64 CB 6B                  dw          I, CSTORE, ONE_PLUS
 747+ 8513 50 6A
 748+ 8515
 749+ 8515 90 64 BD 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 749+ 8519 EC 69
 750+ 851B 2C 64                        dw          ZBRANCH
 751+ 851D 06 00                        dw              AcceptN_Endif_4 - $
 752+ 851F 41 64                        dw                  C_LEAVE     //              leave
 753+ 8521 06 00                        dw                  AcceptN_Leave - $
 754+ 8523              AcceptN_Endif_4:                                 //      endif
 755+ 8523
 756+ 8523 04 64                        dw      C_LOOP
 757+ 8525 B6 FF                        dw      AcceptN_Loop -$
 758+ 8527              AcceptN_Leave:
 759+ 8527 AA 69                        dw      EXIT
 760+ 8529
 761+ 8529              //  ______________________________________________________________________
 762+ 8529              //
 763+ 8529              // load-        n --
 764+ 8529              // Provided that a stream n is OPEN# via the standart BASIC
 765+ 8529              // it accepts text from stream #n to the normal INTERPRET
 766+ 8529              // up to now, text-file must end with QUIT
 767+ 8529                              Colon_Def LOAD_N, "LOAD-", is_normal
 767+ 8529             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 767+ 8529             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 8529             >
 767+ 8529             >                // dummy db directives used to calculate length of namec
 767+ 8529 4C 4F 41 44 >                db      "LOAD-"
 767+ 852D 2D          >
 767+ 852E             >len_NFA         defl    $ - temp_NFA
 767+ 852E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 8529             >
 767+ 8529 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 852A 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 767+ 852E 2D          >
 767+ 852F             >                org     $-1                 // alter last byte of Name just above to set
 767+ 852E AD          >                db      {b $} | END_BIT     // msb as name end
 767+ 852F             >
 767+ 852F BF 84       >                dw      last_NFA            // Link to previous definition Name
 767+ 8531             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 8531 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 8533             >                else
 767+ 8533 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 8533             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 8533             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 8533             >
 767+ 8533             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 8533 C0 6E AF 6B                  dw      SOURCE_ID, STORE
 769+ 8537              Load_N_Begin:
 770+ 8537 9D 6D A2 6B                  dw          TIB, FETCH
 771+ 853B 0F 6B A9 63                  dw          DUP, LIT, 80
 771+ 853F 50 00
 772+ 8541 70 6B F7 73                  dw          TWO_DUP, BLANKS
 773+ 8545 C0 6E A2 6B                  dw          SOURCE_ID, FETCH
 774+ 8549 AF 79 0F 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 774+ 854D 35 7B AF 6B
 775+ 8551 85 67                        dw          SELECT
 776+ 8553 C9 84                        dw          ACCEPT_N
 777+ 8555 B1 84                        dw          VIDEO
 778+ 8557 50 6B                        dw          TWO_DROP
 779+ 8559 0A 6D 09 6E                  dw          ZERO, BLK, STORE
 779+ 855D AF 6B
 780+ 855F 0A 6D 12 6E                  dw          ZERO, TO_IN, STORE
 780+ 8563 AF 6B
 781+ 8565 CF 77                        dw          INTERPRET
 782+ 8567 3F 67                        dw          QTERMINAL
 783+ 8569 2C 64                        dw      ZBRANCH
 784+ 856B CC FF                        dw      Load_N_Begin - $
 785+ 856D AA 69                        dw      EXIT
 786+ 856F
 787+ 856F              //  ______________________________________________________________________
 788+ 856F              //
 789+ 856F              // load         n --
 790+ 856F              // if n is positive, it loads screen #n (as usual)
 791+ 856F              // if n is negative, it connects stream #n to the normal INTERPRET
 792+ 856F              // this second way is useful if you want to load any kind of file
 793+ 856F              // provied that it is OPEN# the usual BASIC way.
 794+ 856F                              Colon_Def LOAD, "LOAD", is_normal
 794+ 856F             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 794+ 856F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 856F             >
 794+ 856F             >                // dummy db directives used to calculate length of namec
 794+ 856F 4C 4F 41 44 >                db      "LOAD"
 794+ 8573             >len_NFA         defl    $ - temp_NFA
 794+ 8573             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 856F             >
 794+ 856F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 8570 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 794+ 8574             >                org     $-1                 // alter last byte of Name just above to set
 794+ 8573 C4          >                db      {b $} | END_BIT     // msb as name end
 794+ 8574             >
 794+ 8574 29 85       >                dw      last_NFA            // Link to previous definition Name
 794+ 8576             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 8576 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 8578             >                else
 794+ 8578 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 794+ 8578             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 8578             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 8578             >
 794+ 8578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 8578 0F 6B 07 6A                  dw      DUP, ZLESS
 796+ 857C 2C 64                        dw      ZBRANCH
 797+ 857E 08 00                        dw      Load_Else - $
 798+ 8580 31 85                        dw          LOAD_N
 799+ 8582 15 64                        dw      BRANCH
 800+ 8584 04 00                        dw      Load_Endif - $
 801+ 8586              Load_Else:
 802+ 8586 4E 81                        dw          LOAD_P
 803+ 8588              Load_Endif:
 804+ 8588 AA 69                        dw      EXIT
 805+ 858A
 806+ 858A
 807+ 858A              //  ______________________________________________________________________
 808+ 858A              //
 809+ 858A              // autoexec     --
 810+ 858A              // this word is called the first time the Forth system boot to
 811+ 858A              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 812+ 858A                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 812+ 858A             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 812+ 858A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ 858A             >
 812+ 858A             >                // dummy db directives used to calculate length of namec
 812+ 858A 41 55 54 4F >                db      "AUTOEXEC"
 812+ 858E 45 58 45 43 >
 812+ 8592             >len_NFA         defl    $ - temp_NFA
 812+ 8592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ 858A             >
 812+ 858A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ 858B 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 812+ 858F 45 58 45 43 >
 812+ 8593             >                org     $-1                 // alter last byte of Name just above to set
 812+ 8592 C3          >                db      {b $} | END_BIT     // msb as name end
 812+ 8593             >
 812+ 8593 6F 85       >                dw      last_NFA            // Link to previous definition Name
 812+ 8595             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 8595 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 8597             >                else
 812+ 8597 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 812+ 8597             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 8597             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 8597             >
 812+ 8597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 8597 A9 63 0B 00                  dw      LIT, 11
 814+ 859B A9 63 B5 6C                  dw      LIT, NOOP
 815+ 859F A9 63 DE 78                  dw      LIT, Autoexec_Ptr
 816+ 85A3 AF 6B                        dw      STORE
 817+ 85A5 76 85                        dw      LOAD
 818+ 85A7 8F 78                        dw      QUIT
 819+ 85A9 AA 69                        dw      EXIT
 820+ 85AB
 821+ 85AB
 822+ 85AB              //  ______________________________________________________________________
 823+ 85AB              //
 824+ 85AB              // bye     --
 825+ 85AB              //
 826+ 85AB                              Colon_Def BYE, "BYE", is_normal
 826+ 85AB             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 826+ 85AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ 85AB             >
 826+ 85AB             >                // dummy db directives used to calculate length of namec
 826+ 85AB 42 59 45    >                db      "BYE"
 826+ 85AE             >len_NFA         defl    $ - temp_NFA
 826+ 85AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ 85AB             >
 826+ 85AB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ 85AC 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 826+ 85AF             >                org     $-1                 // alter last byte of Name just above to set
 826+ 85AE C5          >                db      {b $} | END_BIT     // msb as name end
 826+ 85AF             >
 826+ 85AF 8A 85       >                dw      last_NFA            // Link to previous definition Name
 826+ 85B1             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 85B1 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 85B3             >                else
 826+ 85B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 826+ 85B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 85B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 85B3             >
 826+ 85B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 85B3 EC 7D                        dw      FLUSH
 828+ 85B5 1F 7D                        dw      EMPTY_BUFFERS
 829+ 85B7 C3 7B A2 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 829+ 85BB CB 67 DA 6A
 830+ 85BF 0A 6D 70 6D                  dw      ZERO, PLUS_ORIGIN
 831+ 85C3 74 79                        dw      BASIC
 832+ 85C5
 833+ 85C5              //  ______________________________________________________________________
 834+ 85C5              //
 835+ 85C5              // invv     --
 836+ 85C5              //
 837+ 85C5              //              Colon_Def INVV, "INVV", is_normal
 838+ 85C5              //              dw      LIT, 20, EMITC, ONE, EMITC
 839+ 85C5              //              dw      EXIT
 840+ 85C5
 841+ 85C5              //  ______________________________________________________________________
 842+ 85C5              //
 843+ 85C5              // truv     --
 844+ 85C5              //
 845+ 85C5              //              Colon_Def TRUV, "TRUV", is_normal
 846+ 85C5              //              dw      LIT, 20, EMITC, ZERO, EMITC
 847+ 85C5              //              dw      EXIT
 848+ 85C5
 849+ 85C5              //  ______________________________________________________________________
 850+ 85C5              //
 851+ 85C5              // mark     --
 852+ 85C5              //
 853+ 85C5              //              Colon_Def MARK, "MARK", is_normal
 854+ 85C5              //              dw      INVV, TYPE, TRUV
 855+ 85C5              //              dw      EXIT
 856+ 85C5
 857+ 85C5              //  ______________________________________________________________________
 858+ 85C5              //
 859+ 85C5              // back     --
 860+ 85C5              //
 861+ 85C5                              Colon_Def BACK, "BACK", is_normal
 861+ 85C5             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 861+ 85C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 85C5             >
 861+ 85C5             >                // dummy db directives used to calculate length of namec
 861+ 85C5 42 41 43 4B >                db      "BACK"
 861+ 85C9             >len_NFA         defl    $ - temp_NFA
 861+ 85C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 85C5             >
 861+ 85C5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 85C6 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 861+ 85CA             >                org     $-1                 // alter last byte of Name just above to set
 861+ 85C9 CB          >                db      {b $} | END_BIT     // msb as name end
 861+ 85CA             >
 861+ 85CA AB 85       >                dw      last_NFA            // Link to previous definition Name
 861+ 85CC             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 85CC 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 861+ 85CE             >                else
 861+ 85CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 861+ 85CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 85CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 85CE             >
 861+ 85CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 85CE E9 6E 3C 6F                  dw      HERE, SUBTRACT, COMMA
 862+ 85D2 05 6F
 863+ 85D4 AA 69                        dw      EXIT
 864+ 85D6
 865+ 85D6              //  ______________________________________________________________________
 866+ 85D6              //
 867+ 85D6              // if          ( -- a 2 ) \ compile-time
 868+ 85D6              // IF ... THEN
 869+ 85D6              // IF ... ELSE ... ENDIF
 870+ 85D6                              Colon_Def IF, "IF", is_immediate
 870+ 85D6             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 870+ 85D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 85D6             >
 870+ 85D6             >                // dummy db directives used to calculate length of namec
 870+ 85D6 49 46       >                db      "IF"
 870+ 85D8             >len_NFA         defl    $ - temp_NFA
 870+ 85D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 85D6             >
 870+ 85D6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 85D7 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 870+ 85D9             >                org     $-1                 // alter last byte of Name just above to set
 870+ 85D8 C6          >                db      {b $} | END_BIT     // msb as name end
 870+ 85D9             >
 870+ 85D9 C5 85       >                dw      last_NFA            // Link to previous definition Name
 870+ 85DB             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 85DB 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 85DD             >                else
 870+ 85DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 85DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 85DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 85DD             >
 870+ 85DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 85DD 41 71 2C 64                  dw      COMPILE, ZBRANCH
 872+ 85E1 E9 6E 0A 6D                  dw      HERE, ZERO, COMMA
 872+ 85E5 05 6F
 873+ 85E7 1A 6D                        dw      TWO
 874+ 85E9 AA 69                        dw      EXIT
 875+ 85EB
 876+ 85EB              //  ______________________________________________________________________
 877+ 85EB              //
 878+ 85EB              // then        ( a 2 -- ) \ compile-time
 879+ 85EB              //
 880+ 85EB                              Colon_Def THEN, "THEN", is_immediate
 880+ 85EB             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 880+ 85EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 85EB             >
 880+ 85EB             >                // dummy db directives used to calculate length of namec
 880+ 85EB 54 48 45 4E >                db      "THEN"
 880+ 85EF             >len_NFA         defl    $ - temp_NFA
 880+ 85EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 85EB             >
 880+ 85EB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 85EC 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 880+ 85F0             >                org     $-1                 // alter last byte of Name just above to set
 880+ 85EF CE          >                db      {b $} | END_BIT     // msb as name end
 880+ 85F0             >
 880+ 85F0 D6 85       >                dw      last_NFA            // Link to previous definition Name
 880+ 85F2             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 85F2 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 85F4             >                else
 880+ 85F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 85F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 85F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 85F4             >
 880+ 85F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 85F4 C8 70                        dw      QCOMP
 882+ 85F6 1A 6D F7 70                  dw      TWO, QPAIRS
 883+ 85FA E9 6E CA 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 883+ 85FE 3C 6F 02 6B
 883+ 8602 AF 6B
 884+ 8604 AA 69                        dw      EXIT
 885+ 8606
 886+ 8606              //  ______________________________________________________________________
 887+ 8606              //
 888+ 8606              // endif       ( a 2 -- ) \ compile-time
 889+ 8606              //
 890+ 8606                              Colon_Def ENDIF, "ENDIF", is_immediate
 890+ 8606             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 890+ 8606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 8606             >
 890+ 8606             >                // dummy db directives used to calculate length of namec
 890+ 8606 45 4E 44 49 >                db      "ENDIF"
 890+ 860A 46          >
 890+ 860B             >len_NFA         defl    $ - temp_NFA
 890+ 860B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 8606             >
 890+ 8606 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 8607 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 890+ 860B 46          >
 890+ 860C             >                org     $-1                 // alter last byte of Name just above to set
 890+ 860B C6          >                db      {b $} | END_BIT     // msb as name end
 890+ 860C             >
 890+ 860C EB 85       >                dw      last_NFA            // Link to previous definition Name
 890+ 860E             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 860E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 8610             >                else
 890+ 8610 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 8610             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 8610             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 8610             >
 890+ 8610             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 8610 F2 85                        dw      THEN
 892+ 8612 AA 69                        dw      EXIT
 893+ 8614
 894+ 8614              //  ______________________________________________________________________
 895+ 8614              //
 896+ 8614              // else        ( a1 2 -- a2 2 ) \ compile-time
 897+ 8614              //
 898+ 8614                              Colon_Def ELSE, "ELSE", is_immediate
 898+ 8614             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 898+ 8614             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 8614             >
 898+ 8614             >                // dummy db directives used to calculate length of namec
 898+ 8614 45 4C 53 45 >                db      "ELSE"
 898+ 8618             >len_NFA         defl    $ - temp_NFA
 898+ 8618             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 8614             >
 898+ 8614 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 8615 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 898+ 8619             >                org     $-1                 // alter last byte of Name just above to set
 898+ 8618 C5          >                db      {b $} | END_BIT     // msb as name end
 898+ 8619             >
 898+ 8619 06 86       >                dw      last_NFA            // Link to previous definition Name
 898+ 861B             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 861B 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 861D             >                else
 898+ 861D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 861D             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 861D             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 861D             >
 898+ 861D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 861D C8 70                        dw      QCOMP
 900+ 861F 1A 6D F7 70                  dw      TWO, QPAIRS
 901+ 8623 41 71 15 64                  dw      COMPILE, BRANCH
 902+ 8627 E9 6E 0A 6D                  dw      HERE, ZERO, COMMA
 902+ 862B 05 6F
 903+ 862D 02 6B 1A 6D                  dw      SWAP, TWO, THEN
 903+ 8631 F2 85
 904+ 8633 1A 6D                        dw      TWO
 905+ 8635 AA 69                        dw      EXIT
 906+ 8637
 907+ 8637              //  ______________________________________________________________________
 908+ 8637              //
 909+ 8637              // begin        ( -- a 1 ) \ compile-time
 910+ 8637              // BEGIN ... AGAIN
 911+ 8637              // BEGIN ... f UNTIL
 912+ 8637              // BEGIN ... f WHILE ... REPEAT
 913+ 8637                              Colon_Def BEGIN, "BEGIN", is_immediate
 913+ 8637             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 913+ 8637             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 8637             >
 913+ 8637             >                // dummy db directives used to calculate length of namec
 913+ 8637 42 45 47 49 >                db      "BEGIN"
 913+ 863B 4E          >
 913+ 863C             >len_NFA         defl    $ - temp_NFA
 913+ 863C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 8637             >
 913+ 8637 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 8638 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 913+ 863C 4E          >
 913+ 863D             >                org     $-1                 // alter last byte of Name just above to set
 913+ 863C CE          >                db      {b $} | END_BIT     // msb as name end
 913+ 863D             >
 913+ 863D 14 86       >                dw      last_NFA            // Link to previous definition Name
 913+ 863F             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 863F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 8641             >                else
 913+ 8641 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 8641             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 8641             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 8641             >
 913+ 8641             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 8641 C8 70                        dw      QCOMP
 915+ 8643 E9 6E                        dw      HERE
 916+ 8645 1A 6D                        dw      TWO
 917+ 8647 AA 69                        dw      EXIT
 918+ 8649
 919+ 8649              //  ______________________________________________________________________
 920+ 8649              //
 921+ 8649              // again        ( a 1 -- ) \ compile-time
 922+ 8649                              Colon_Def AGAIN, "AGAIN", is_immediate
 922+ 8649             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 922+ 8649             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 8649             >
 922+ 8649             >                // dummy db directives used to calculate length of namec
 922+ 8649 41 47 41 49 >                db      "AGAIN"
 922+ 864D 4E          >
 922+ 864E             >len_NFA         defl    $ - temp_NFA
 922+ 864E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 8649             >
 922+ 8649 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 864A 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 922+ 864E 4E          >
 922+ 864F             >                org     $-1                 // alter last byte of Name just above to set
 922+ 864E CE          >                db      {b $} | END_BIT     // msb as name end
 922+ 864F             >
 922+ 864F 37 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 8651             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8651 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 8653             >                else
 922+ 8653 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 8653             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 8653             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 8653             >
 922+ 8653             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 8653 C8 70                        dw      QCOMP
 924+ 8655 1A 6D F7 70                  dw      TWO, QPAIRS
 925+ 8659 41 71 15 64                  dw      COMPILE, BRANCH
 926+ 865D CC 85                        dw      BACK
 927+ 865F AA 69                        dw      EXIT
 928+ 8661
 929+ 8661              //  ______________________________________________________________________
 930+ 8661              //
 931+ 8661              // until        ( a 1 -- ) \ compile-time
 932+ 8661                              Colon_Def UNTIL, "UNTIL", is_immediate
 932+ 8661             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 932+ 8661             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 8661             >
 932+ 8661             >                // dummy db directives used to calculate length of namec
 932+ 8661 55 4E 54 49 >                db      "UNTIL"
 932+ 8665 4C          >
 932+ 8666             >len_NFA         defl    $ - temp_NFA
 932+ 8666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 8661             >
 932+ 8661 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 8662 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 932+ 8666 4C          >
 932+ 8667             >                org     $-1                 // alter last byte of Name just above to set
 932+ 8666 CC          >                db      {b $} | END_BIT     // msb as name end
 932+ 8667             >
 932+ 8667 49 86       >                dw      last_NFA            // Link to previous definition Name
 932+ 8669             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 8669 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 866B             >                else
 932+ 866B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 932+ 866B             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 866B             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 866B             >
 932+ 866B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 866B C8 70                        dw      QCOMP
 934+ 866D 1A 6D F7 70                  dw      TWO, QPAIRS
 935+ 8671 41 71 2C 64                  dw      COMPILE, ZBRANCH
 936+ 8675 CC 85                        dw      BACK
 937+ 8677 AA 69                        dw      EXIT
 938+ 8679
 939+ 8679              //  ______________________________________________________________________
 940+ 8679              //
 941+ 8679              // end          ( a 1 -- ) \ compile-time
 942+ 8679                              Colon_Def END, "END", is_immediate
 942+ 8679             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 942+ 8679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 8679             >
 942+ 8679             >                // dummy db directives used to calculate length of namec
 942+ 8679 45 4E 44    >                db      "END"
 942+ 867C             >len_NFA         defl    $ - temp_NFA
 942+ 867C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 8679             >
 942+ 8679 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 867A 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 942+ 867D             >                org     $-1                 // alter last byte of Name just above to set
 942+ 867C C4          >                db      {b $} | END_BIT     // msb as name end
 942+ 867D             >
 942+ 867D 61 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 867F             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 867F 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 8681             >                else
 942+ 8681 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 8681             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 8681             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 8681             >
 942+ 8681             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 8681 69 86                        dw      UNTIL
 944+ 8683 AA 69                        dw      EXIT
 945+ 8685
 946+ 8685              //  ______________________________________________________________________
 947+ 8685              //
 948+ 8685              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 949+ 8685                              Colon_Def WHILE, "WHILE", is_immediate
 949+ 8685             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 949+ 8685             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 8685             >
 949+ 8685             >                // dummy db directives used to calculate length of namec
 949+ 8685 57 48 49 4C >                db      "WHILE"
 949+ 8689 45          >
 949+ 868A             >len_NFA         defl    $ - temp_NFA
 949+ 868A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 8685             >
 949+ 8685 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 8686 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 949+ 868A 45          >
 949+ 868B             >                org     $-1                 // alter last byte of Name just above to set
 949+ 868A C5          >                db      {b $} | END_BIT     // msb as name end
 949+ 868B             >
 949+ 868B 79 86       >                dw      last_NFA            // Link to previous definition Name
 949+ 868D             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 868D 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 868F             >                else
 949+ 868F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 949+ 868F             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 868F             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 868F             >
 949+ 868F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 868F DB 85                        dw      IF
 951+ 8691              //              dw      TWO_PLUS // ( that is 4 )
 952+ 8691 5E 6B                        dw      TWO_SWAP
 953+ 8693 AA 69                        dw      EXIT
 954+ 8695
 955+ 8695              //  ______________________________________________________________________
 956+ 8695              //
 957+ 8695              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 958+ 8695                              Colon_Def REPEAT, "REPEAT", is_immediate
 958+ 8695             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 958+ 8695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 8695             >
 958+ 8695             >                // dummy db directives used to calculate length of namec
 958+ 8695 52 45 50 45 >                db      "REPEAT"
 958+ 8699 41 54       >
 958+ 869B             >len_NFA         defl    $ - temp_NFA
 958+ 869B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 8695             >
 958+ 8695 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 8696 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 958+ 869A 41 54       >
 958+ 869C             >                org     $-1                 // alter last byte of Name just above to set
 958+ 869B D4          >                db      {b $} | END_BIT     // msb as name end
 958+ 869C             >
 958+ 869C 85 86       >                dw      last_NFA            // Link to previous definition Name
 958+ 869E             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 869E 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 86A0             >                else
 958+ 86A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 86A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 86A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 86A0             >
 958+ 86A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 86A0 51 86                        dw      AGAIN
 960+ 86A2              //              dw      TWO_MINUS
 961+ 86A2 F2 85                        dw      THEN
 962+ 86A4 AA 69                        dw      EXIT
 963+ 86A6
 964+ 86A6              //  ______________________________________________________________________
 965+ 86A6              //
 966+ 86A6              // ?do-
 967+ 86A6              // special version of "BACK" used by ?DO and LOOP
 968+ 86A6                              Colon_Def C_DO_BACK, "?DO-", is_normal
 968+ 86A6             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 968+ 86A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ 86A6             >
 968+ 86A6             >                // dummy db directives used to calculate length of namec
 968+ 86A6 3F 44 4F 2D >                db      "?DO-"
 968+ 86AA             >len_NFA         defl    $ - temp_NFA
 968+ 86AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ 86A6             >
 968+ 86A6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ 86A7 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 968+ 86AB             >                org     $-1                 // alter last byte of Name just above to set
 968+ 86AA AD          >                db      {b $} | END_BIT     // msb as name end
 968+ 86AB             >
 968+ 86AB 95 86       >                dw      last_NFA            // Link to previous definition Name
 968+ 86AD             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 86AD 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 86AF             >                else
 968+ 86AF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 968+ 86AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 86AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 86AF             >
 968+ 86AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 86AF CC 85                        dw      BACK
 970+ 86B1              CDoBack_Begin:
 971+ 86B1 72 69 7A 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 971+ 86B5 A2 6B 3C 6F
 972+ 86B9 2C 64                        dw      ZBRANCH
 973+ 86BB 0A 00                        dw      CDoBack_While - $
 974+ 86BD 68 6A F2 85                  dw          TWO_PLUS, THEN
 975+ 86C1 15 64                        dw      BRANCH
 976+ 86C3 EE FF                        dw      CDoBack_Begin - $
 977+ 86C5              CDoBack_While:
 978+ 86C5 0A 71 7A 6E                  dw      QCSP, CSP, STORE
 978+ 86C9 AF 6B
 979+ 86CB AA 69                        dw      EXIT
 980+ 86CD
 981+ 86CD              //  ______________________________________________________________________
 982+ 86CD              //
 983+ 86CD              // do
 984+ 86CD              // DO  ... LOOP
 985+ 86CD              // DO  ... n +LOOP
 986+ 86CD              // ?DO ... LOOP
 987+ 86CD              // ?DO ... n +LOOP
 988+ 86CD                              Colon_Def DO, "DO", is_immediate
 988+ 86CD             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 988+ 86CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 86CD             >
 988+ 86CD             >                // dummy db directives used to calculate length of namec
 988+ 86CD 44 4F       >                db      "DO"
 988+ 86CF             >len_NFA         defl    $ - temp_NFA
 988+ 86CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 86CD             >
 988+ 86CD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 86CE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 988+ 86D0             >                org     $-1                 // alter last byte of Name just above to set
 988+ 86CF CF          >                db      {b $} | END_BIT     // msb as name end
 988+ 86D0             >
 988+ 86D0 A6 86       >                dw      last_NFA            // Link to previous definition Name
 988+ 86D2             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 86D2 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 86D4             >                else
 988+ 86D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 86D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 86D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 86D4             >
 988+ 86D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 86D4 41 71 86 64                  dw      COMPILE, C_DO
 990+ 86D8 7A 6E A2 6B                  dw      CSP, FETCH, STORE_CSP
 990+ 86DC 9B 70
 991+ 86DE E9 6E 22 6D                  dw      HERE, THREE
 992+ 86E2 AA 69                        dw      EXIT
 993+ 86E4
 994+ 86E4              //  ______________________________________________________________________
 995+ 86E4              //
 996+ 86E4              // loop
 997+ 86E4                              Colon_Def LOOP, "LOOP", is_immediate
 997+ 86E4             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 997+ 86E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 86E4             >
 997+ 86E4             >                // dummy db directives used to calculate length of namec
 997+ 86E4 4C 4F 4F 50 >                db      "LOOP"
 997+ 86E8             >len_NFA         defl    $ - temp_NFA
 997+ 86E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 86E4             >
 997+ 86E4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 86E5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 997+ 86E9             >                org     $-1                 // alter last byte of Name just above to set
 997+ 86E8 D0          >                db      {b $} | END_BIT     // msb as name end
 997+ 86E9             >
 997+ 86E9 CD 86       >                dw      last_NFA            // Link to previous definition Name
 997+ 86EB             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 86EB 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 86ED             >                else
 997+ 86ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 86ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 86ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 86ED             >
 997+ 86ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 86ED 22 6D F7 70                  dw      THREE, QPAIRS
 999+ 86F1 41 71 04 64                  dw      COMPILE, C_LOOP
1000+ 86F5 AD 86                        dw      C_DO_BACK
1001+ 86F7 AA 69                        dw      EXIT
1002+ 86F9
1003+ 86F9              //  ______________________________________________________________________
1004+ 86F9              //
1005+ 86F9              // +loop
1006+ 86F9                              Colon_Def PLOOP, "+LOOP", is_immediate
1006+ 86F9             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1006+ 86F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 86F9             >
1006+ 86F9             >                // dummy db directives used to calculate length of namec
1006+ 86F9 2B 4C 4F 4F >                db      "+LOOP"
1006+ 86FD 50          >
1006+ 86FE             >len_NFA         defl    $ - temp_NFA
1006+ 86FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 86F9             >
1006+ 86F9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 86FA 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1006+ 86FE 50          >
1006+ 86FF             >                org     $-1                 // alter last byte of Name just above to set
1006+ 86FE D0          >                db      {b $} | END_BIT     // msb as name end
1006+ 86FF             >
1006+ 86FF E4 86       >                dw      last_NFA            // Link to previous definition Name
1006+ 8701             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 8701 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 8703             >                else
1006+ 8703 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1006+ 8703             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 8703             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 8703             >
1006+ 8703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 8703 22 6D F7 70                  dw      THREE, QPAIRS
1008+ 8707 41 71 CD 63                  dw      COMPILE, C_PLOOP
1009+ 870B AD 86                        dw      C_DO_BACK
1010+ 870D AA 69                        dw      EXIT
1011+ 870F
1012+ 870F              //  ______________________________________________________________________
1013+ 870F              //
1014+ 870F              // ?do
1015+ 870F                              Colon_Def QDO, "?DO", is_immediate
1015+ 870F             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1015+ 870F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ 870F             >
1015+ 870F             >                // dummy db directives used to calculate length of namec
1015+ 870F 3F 44 4F    >                db      "?DO"
1015+ 8712             >len_NFA         defl    $ - temp_NFA
1015+ 8712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ 870F             >
1015+ 870F C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ 8710 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1015+ 8713             >                org     $-1                 // alter last byte of Name just above to set
1015+ 8712 CF          >                db      {b $} | END_BIT     // msb as name end
1015+ 8713             >
1015+ 8713 F9 86       >                dw      last_NFA            // Link to previous definition Name
1015+ 8715             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 8715 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 8717             >                else
1015+ 8717 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1015+ 8717             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 8717             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 8717             >
1015+ 8717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 8717 41 71 59 64                  dw      COMPILE, C_Q_DO
1017+ 871B 7A 6E A2 6B                  dw      CSP, FETCH, STORE_CSP
1017+ 871F 9B 70
1018+ 8721 E9 6E 0A 6D                  dw      HERE, ZERO, COMMA, ZERO
1018+ 8725 05 6F 0A 6D
1019+ 8729 E9 6E 22 6D                  dw      HERE, THREE
1020+ 872D AA 69                        dw      EXIT
1021+ 872F
1022+ 872F              Latest_Definition:
1023+ 872F              //  ______________________________________________________________________
1024+ 872F              //
1025+ 872F              // \
1026+ 872F                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1026+ 872F             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1026+ 872F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 872F             >
1026+ 872F             >                // dummy db directives used to calculate length of namec
1026+ 872F 5C          >                db      "\\"
1026+ 8730             >len_NFA         defl    $ - temp_NFA
1026+ 8730             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 872F             >
1026+ 872F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 8730 5C          >                db      "\\"               // name string in 7-bit ascii, but
1026+ 8731             >                org     $-1                 // alter last byte of Name just above to set
1026+ 8730 DC          >                db      {b $} | END_BIT     // msb as name end
1026+ 8731             >
1026+ 8731 0F 87       >                dw      last_NFA            // Link to previous definition Name
1026+ 8733             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 8733 8D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 8735             >                else
1026+ 8735 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 8735             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 8735             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 8735             >
1026+ 8735             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 8735 09 6E A2 6B                  dw      BLK, FETCH
1028+ 8739 2C 64                        dw      ZBRANCH
1029+ 873B 30 00                        dw      Backslash_Else_1 - $
1030+ 873D 09 6E A2 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1030+ 8741 12 6D 82 6F
1031+ 8745 2C 64                        dw          ZBRANCH
1032+ 8747 18 00                        dw          Backslash_Else_2 - $
1033+ 8749 12 6E A2 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1033+ 874D 3E 6D 95 7A
1033+ 8751 3E 6D
1034+ 8753 02 6B 3C 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1034+ 8757 12 6E 7F 6B
1035+ 875B 15 64                        dw          BRANCH
1036+ 875D 0A 00                        dw          Backslash_Endif_2 - $
1037+ 875F              Backslash_Else_2:
1038+ 875F 4A 6D 82 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1038+ 8763 12 6E AF 6B
1039+ 8767              Backslash_Endif_2:
1040+ 8767 15 64                        dw      BRANCH
1041+ 8769 0A 00                        dw      Backslash_Endif_1 - $
1042+ 876B              Backslash_Else_1:
1043+ 876B A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1043+ 876F 12 6E AF 6B
1044+ 8773              Backslash_Endif_1:
1045+ 8773 AA 69                        dw      EXIT
1046+ 8775
1047+ 8775              Fence_Word:
1048+ 8775              //  ______________________________________________________________________
1049+ 8775              //
1050+ 8775
1051+ 8775 00           Here_Dictionary db      0
1052+ 8776
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8776
 115  8776              // now we save the compiled file so we can either run it or debug it
 116  8776                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8776                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8776                              SAVENEX CFG  0
 119  8776                              SAVENEX BANK 2, 0
 120  8776                              SAVENEX AUTO
 121  8776                              SAVENEX CLOSE
 122  8776
 123  8776              //              PAGE 7 ;set 7 page to current slot
 124  8776              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8776              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8776
 127  8776                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8776
 129  8776                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8776
 131  8776                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
