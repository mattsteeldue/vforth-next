# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.52 NextZXOS version
   7  0000              //  build 20230321
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 38 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 38 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 19 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 65 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 65 87        DP_origin       dw      Fence_Word
  39+ 6386 46 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 3E 04                        ld      a, 4
 237+ 6448 ED 31                        add     hl, a
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- ff | cfa b tf
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528 D9                               exx                         // de has dictionary pointer
 420+ 6529 D1                               pop     de
 421+ 652A              Find_VocabularyLoop:
 422+ 652A E1                               pop     hl                  // string pointer to search for
 423+ 652B E5                               push    hl                  // keep it on stack too for the end.
 424+ 652C 1A                               ld      a, (de)             // save NFA length byte
 425+ 652D 08                               ex      af,af'              // for later use (!)
 426+ 652E 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652F AE                               xor     (hl)                // check if same length
 428+ 6530 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6532                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6532 20 2B                            jr      nz, Find_DifferentLenght
 431+ 6534
 432+ 6534              Find_ThisWord:  // begin loop
 433+ 6534 23                                   inc     hl
 434+ 6535 13                                   inc     de
 435+ 6536 1A                                   ld      a, (de)
 436+ 6537                                      // case insensitive option - begin
 437+ 6537                                      // push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547                                      // pop     bc
 449+ 6547                                      // case insensitive option - end
 450+ 6547 87                                   add     a                   // ignore msb during compare
 451+ 6548 20 13                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654A
 453+ 654A                                  // loop back until last byte msb is found set
 454+ 654A                                  // that bit marks the ending char of this word
 455+ 654A 30 E8                            jr      nc, Find_ThisWord
 456+ 654C
 457+ 654C                                  // match found !
 458+ 654C 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 654F 19                                   add     hl, de
 460+ 6550 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6551 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6552 5F                                   ld      e, a
 463+ 6553 16 00                                ld      d, 0
 464+ 6555
 465+ 6555
 466+ 6555 21 FF FF                             ld      hl, -1
 467+ 6558 D5                                   push    de
 468+ 6559 E5                                   push    hl
 469+ 655A D9                                   exx
 470+ 655B                                      next
 470+ 655B DD E9       >                jp      (ix)
 471+ 655D
 472+ 655D              Find_DidntMatch: // didn't match (*)
 473+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 655F
 475+ 655F              Find_DifferentLenght:
 476+ 655F                              // consume chars until the end of the word
 477+ 655F                              // that is last byte msb is found set
 478+ 655F 13                               inc     de
 479+ 6560 1A                               ld      a, (de)
 480+ 6561 87                               add     a, a
 481+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 482+ 6564
 483+ 6564              Find_WordEnd:   // word-end  found (**)
 484+ 6564                              // take LFA and use it
 485+ 6564 13                           inc     de
 486+ 6565 EB                           ex      de, hl
 487+ 6566 5E                           ld      e, (hl)
 488+ 6567 23                           inc     hl
 489+ 6568 56                           ld      d, (hl)
 490+ 6569 7A                           ld      a, d
 491+ 656A B3                           or      e
 492+ 656B
 493+ 656B                          // loop until end of vocabulary
 494+ 656B 20 BD                    jr      nz, Find_VocabularyLoop
 495+ 656D
 496+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 498+ 6571
 499+ 6571 E5                       push    hl
 500+ 6572 D9                       exx
 501+ 6573                          next
 501+ 6573 DD E9       >                jp      (ix)
 502+ 6575
 503+ 6575              //  ______________________________________________________________________
 504+ 6575              //
 505+ 6575              // enclose      a c -- a  n1 n2 n3
 506+ 6575              // starting from a, using delimiter c, determines the offsets:
 507+ 6575              //   n1   the first character non-delimiter
 508+ 6575              //   n2   the first delimiter after the text
 509+ 6575              //   n3   the first character non enclosed.
 510+ 6575              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 511+ 6575              // an uncoditional delimiter.
 512+ 6575              // Examples:
 513+ 6575              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 514+ 6575              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 515+ 6575              // iii:	c  c  'nul'          -- 2  3  2
 516+ 6575                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 516+ 6575             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 6575             >
 516+ 6575             >                // dummy db directives used to calculate length of namec
 516+ 6575 45 4E 43 4C >                db      "ENCLOSE"
 516+ 6579 4F 53 45    >
 516+ 657C             >len_NFA         defl    $ - temp_NFA
 516+ 657C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 6575             >
 516+ 6575 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 6576 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 516+ 657A 4F 53 45    >
 516+ 657D             >                org     $-1                 // alter last byte of Name just above to set
 516+ 657C C5          >                db      {b $} | END_BIT     // msb as name end
 516+ 657D             >
 516+ 657D 1D 65       >                dw      last_NFA            // Link to previous definition Name
 516+ 657F             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 657F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 516+ 657F             >                else
 516+ 657F 81 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 6581             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 6581             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 6581             >
 516+ 6581             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 6581 D9                           exx
 518+ 6582 D1                           pop     de                  //  e has the character
 519+ 6583 E1                           pop     hl                  // hl has the string address
 520+ 6584 E5                           push    hl
 521+ 6585 7B                           ld      a, e
 522+ 6586 11 FF FF                     ld      de, -1              // let's start from -1
 523+ 6589 2B                           dec     hl
 524+ 658A              Enclose_NonDelimiter:
 525+ 658A                              // find first non delimiter
 526+ 658A 23                               inc     hl
 527+ 658B 13                               inc     de
 528+ 658C BE                               cp      (hl)
 529+ 658D 28 FB                        jr      z, Enclose_NonDelimiter
 530+ 658F D5                           push    de
 531+ 6590
 532+ 6590                              // push    bc                  // save Instruction Pointer
 533+ 6590
 534+ 6590 4F                           ld      c, a                // save char
 535+ 6591 7E                           ld      a, (hl)
 536+ 6592 A7                           and     a                   // stop if 0x00
 537+ 6593 20 07                        jr      nz, Enclose_NextChar
 538+ 6595
 539+ 6595                              /// case iii. no more character in string
 540+ 6595                                  // pop     bc                  // restore Instruction Pointer
 541+ 6595 13                               inc     de
 542+ 6596 D5                               push    de
 543+ 6597 1B                               dec     de
 544+ 6598 D5                               push    de
 545+ 6599 D9                               exx
 546+ 659A                                  next
 546+ 659A DD E9       >                jp      (ix)
 547+ 659C              Enclose_NextChar:
 548+ 659C 79                               ld      a, c
 549+ 659D 23                               inc     hl
 550+ 659E 13                               inc     de
 551+ 659F BE                               cp      (hl)
 552+ 65A0 20 06                            jr      nz, Enclose_NonSeparator
 553+ 65A2
 554+ 65A2                                      // case i. first non enclosed
 555+ 65A2                                      // pop     bc                  // restore Instruction Pointer
 556+ 65A2 D5                                   push    de
 557+ 65A3 13                                   inc     de
 558+ 65A4 D5                                   push    de
 559+ 65A5 D9                                   exx
 560+ 65A6                                      next
 560+ 65A6 DD E9       >                jp      (ix)
 561+ 65A8              Enclose_NonSeparator:
 562+ 65A8 7E                               ld      a, (hl)
 563+ 65A9 A7                               and     a
 564+ 65AA 20 F0                        jr      nz, Enclose_NextChar
 565+ 65AC
 566+ 65AC                              // case ii. separator & terminator
 567+ 65AC                              // pop     bc                  // restore Instruction Pointer
 568+ 65AC D5                           push    de
 569+ 65AD D5                           push    de
 570+ 65AE D9                           exx
 571+ 65AF                              next
 571+ 65AF DD E9       >                jp      (ix)
 572+ 65B1
 573+ 65B1              //  ______________________________________________________________________
 574+ 65B1              //
 575+ 65B1              // (map)        a2 a1 n c1 -- c2
 576+ 65B1              // translate character c1 using mapping string a2 and a2
 577+ 65B1              // if c1 is not present within string a1 then
 578+ 65B1              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 579+ 65B1                              New_Def C_MAP, "(MAP)", is_code, is_normal
 579+ 65B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 65B1             >
 579+ 65B1             >                // dummy db directives used to calculate length of namec
 579+ 65B1 28 4D 41 50 >                db      "(MAP)"
 579+ 65B5 29          >
 579+ 65B6             >len_NFA         defl    $ - temp_NFA
 579+ 65B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 65B1             >
 579+ 65B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 65B2 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 579+ 65B6 29          >
 579+ 65B7             >                org     $-1                 // alter last byte of Name just above to set
 579+ 65B6 A9          >                db      {b $} | END_BIT     // msb as name end
 579+ 65B7             >
 579+ 65B7 75 65       >                dw      last_NFA            // Link to previous definition Name
 579+ 65B9             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 65B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 579+ 65B9             >                else
 579+ 65B9 BB 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 65BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 65BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 65BB             >
 579+ 65BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 65BB D9                           exx
 581+ 65BC E1                           pop     hl
 582+ 65BD 7D                           ld      a, l
 583+ 65BE C1                           pop     bc
 584+ 65BF E1                           pop     hl
 585+ 65C0 50                           ld      d, b
 586+ 65C1 59                           ld      e, c
 587+ 65C2 ED B1                        cpir
 588+ 65C4 E1                           pop     hl
 589+ 65C5 20 05                        jr      nz, C_Map_Then
 589+ 65C7
 590+ 65C7 19                               add     hl, de
 591+ 65C8 2B                               dec     hl
 592+ 65C9 ED 42                            sbc     hl, bc
 593+ 65CB 7E                               ld      a, (hl)
 594+ 65CC              C_Map_Then:
 595+ 65CC 6F                           ld      l, a
 596+ 65CD 26 00                        ld      h, 0
 597+ 65CF E5                           push    hl
 598+ 65D0 D9                           exx
 599+ 65D1                              next
 599+ 65D1 DD E9       >                jp      (ix)
 600+ 65D3
 601+ 65D3              //  ______________________________________________________________________
 602+ 65D3              //
 603+ 65D3              // (compare)    a1 a2 n -- b
 604+ 65D3              // this word performs a lexicographic compare of n bytes of text at address a1
 605+ 65D3              // with n bytes of text at address a2. It returns numeric a value:
 606+ 65D3              //  0 : if strings are equal
 607+ 65D3              // +1 : if string at a1 greater than string at a2
 608+ 65D3              // -1 : if string at a1 less than string at a2
 609+ 65D3              // strings can be 256 bytes in length at most.
 610+ 65D3                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 610+ 65D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 65D3             >
 610+ 65D3             >                // dummy db directives used to calculate length of namec
 610+ 65D3 28 43 4F 4D >                db      "(COMPARE)"
 610+ 65D7 50 41 52 45 >
 610+ 65DB 29          >
 610+ 65DC             >len_NFA         defl    $ - temp_NFA
 610+ 65DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 65D3             >
 610+ 65D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 65D4 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 610+ 65D8 50 41 52 45 >
 610+ 65DC 29          >
 610+ 65DD             >                org     $-1                 // alter last byte of Name just above to set
 610+ 65DC A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 65DD             >
 610+ 65DD B1 65       >                dw      last_NFA            // Link to previous definition Name
 610+ 65DF             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 65DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 610+ 65DF             >                else
 610+ 65DF E1 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 610+ 65E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 65E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 65E1             >
 610+ 65E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 65E1 D9                           exx
 612+ 65E2 E1                           pop     hl                  // Number of bytes
 613+ 65E3 7D                           ld      a, l
 614+ 65E4 E1                           pop     hl                  // hl points string a2
 615+ 65E5 D1                           pop     de                  // hl points string a1
 616+ 65E6              //              push    bc                  // Instruction pointer on stack
 617+ 65E6 47                           ld      b, a
 618+ 65E7              C_Compare_Loop:
 619+ 65E7 7E                               ld      a, (hl)
 620+ 65E8 CD DB 64                         call    Case_Sensitive
 621+ 65EB 4F                               ld      c, a
 622+ 65EC 1A                               ld      a, (de)
 623+ 65ED CD DB 64                         call    Case_Sensitive
 624+ 65F0 B9                               cp      c
 625+ 65F1 13                               inc     de
 626+ 65F2 23                               inc     hl
 627+ 65F3 28 0E                            jr      z, C_Compare_Equal
 628+ 65F5 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 629+ 65F7 21 01 00                                 ld      hl, 1               // a1 gt a2
 630+ 65FA 18 03                                jr      C_Compare_Then      // Else
 631+ 65FC              C_Compare_NotLessThan:
 632+ 65FC 21 FF FF                                 ld      hl, -1              // a1 lt a2
 633+ 65FF              C_Compare_Then:                                 // Endif
 634+ 65FF              //                      pop     bc              // restore Instruction Pointer
 635+ 65FF E5                                   push    hl
 636+ 6600 D9                                   exx
 637+ 6601
 638+ 6601                                      next
 638+ 6601 DD E9       >                jp      (ix)
 639+ 6603
 640+ 6603              C_Compare_Equal:
 641+ 6603 10 E2                        djnz    C_Compare_Loop
 642+ 6605 21 00 00                     ld      hl, 0               // a1 eq a2
 643+ 6608              //              pop     bc                  // restore Instruction Pointer
 644+ 6608 E5                           push    hl
 645+ 6609 D9                           exx
 646+ 660A
 647+ 660A                              next
 647+ 660A DD E9       >                jp      (ix)
 648+ 660C
 649+ 660C              //  ______________________________________________________________________
 650+ 660C              //
 651+ 660C              // emitc        c --
 652+ 660C              // low level emit, calls ROM routine at #10 to send a character to
 653+ 660C              // the the current channel (see SELECT to change stream-channel)
 654+ 660C                              New_Def EMITC, "EMITC", is_code, is_normal
 654+ 660C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 660C             >
 654+ 660C             >                // dummy db directives used to calculate length of namec
 654+ 660C 45 4D 49 54 >                db      "EMITC"
 654+ 6610 43          >
 654+ 6611             >len_NFA         defl    $ - temp_NFA
 654+ 6611             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 660C             >
 654+ 660C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 660D 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 654+ 6611 43          >
 654+ 6612             >                org     $-1                 // alter last byte of Name just above to set
 654+ 6611 C3          >                db      {b $} | END_BIT     // msb as name end
 654+ 6612             >
 654+ 6612 D3 65       >                dw      last_NFA            // Link to previous definition Name
 654+ 6614             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 6614 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 654+ 6614             >                else
 654+ 6614 16 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 654+ 6616             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 6616             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 6616             >
 654+ 6616             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 6616 E1                           pop     hl
 656+ 6617 7D                           ld      a, l
 657+ 6618              Emitc_Ptr:
 658+ 6618 C5                           push    bc
 659+ 6619 DD E5                        push    ix
 660+ 661B D7                           rst     $10
 661+ 661C DD E1                        pop     ix
 662+ 661E C1                           pop     bc
 663+ 661F 3E FF                        ld      a, 255            // max possible
 664+ 6621 32 8C 5C                     ld      (SCR_CT), a
 665+ 6624
 666+ 6624                              next
 666+ 6624 DD E9       >                jp      (ix)
 667+ 6626
 668+ 6626              //  ______________________________________________________________________
 669+ 6626              //
 670+ 6626              // cr           --
 671+ 6626              // send a CR via EMITC
 672+ 6626                              New_Def CR, "CR", is_code, is_normal
 672+ 6626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 6626             >
 672+ 6626             >                // dummy db directives used to calculate length of namec
 672+ 6626 43 52       >                db      "CR"
 672+ 6628             >len_NFA         defl    $ - temp_NFA
 672+ 6628             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 6626             >
 672+ 6626 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 6627 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 672+ 6629             >                org     $-1                 // alter last byte of Name just above to set
 672+ 6628 D2          >                db      {b $} | END_BIT     // msb as name end
 672+ 6629             >
 672+ 6629 0C 66       >                dw      last_NFA            // Link to previous definition Name
 672+ 662B             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 662B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 672+ 662B             >                else
 672+ 662B 2D 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 672+ 662D             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 662D             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 662D             >
 672+ 662D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 662D
 674+ 662D 3E 0D                        ld      a, CR_CHAR
 675+ 662F 18 E7                        jr      Emitc_Ptr
 676+ 6631
 677+ 6631              Emitc_Vec:
 678+ 6631 74 66                        dw      C_Emit_Printable  // comma
 679+ 6633 7B 66                        dw      C_Emit_Bel        // bel
 680+ 6635 74 66                        dw      C_Emit_Printable  // bs
 681+ 6637 91 66                        dw      C_Emit_Tab        // tab
 682+ 6639 74 66                        dw      C_Emit_Printable  // cr
 683+ 663B 98 66                        dw      C_Emit_NL         // lf (unix newline)
 684+ 663D 74 66                        dw      C_Emit_Printable  // blank
 685+ 663F 74 66                        dw      C_Emit_Printable  // blank
 686+ 6641
 687+ 6641              Emit_Selector_Start:
 688+ 6641 06                           db      $06                 // comma
 689+ 6642 07                           db      $07                 // bel
 690+ 6643 08                           db      $08                 // bs
 691+ 6644 09                           db      $09                 // tab
 692+ 6645 0D                           db      $0D                 // cr
 693+ 6646 0A                           db      $0A                 // lf (unix newline)
 694+ 6647 20                           db      $20
 695+ 6648              Emit_Selector_End:
 696+ 6648 20                           db      $20
 697+ 6649
 698+ 6649              //  ______________________________________________________________________
 699+ 6649              //
 700+ 6649              // (?emit)      c1 -- c2 | c1
 701+ 6649              // decode a character to be sent via EMIT
 702+ 6649              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 703+ 6649              // the routine should resolve anything and convert the character anyway.
 704+ 6649                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 704+ 6649             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 6649             >
 704+ 6649             >                // dummy db directives used to calculate length of namec
 704+ 6649 28 3F 45 4D >                db      "(?EMIT)"
 704+ 664D 49 54 29    >
 704+ 6650             >len_NFA         defl    $ - temp_NFA
 704+ 6650             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 6649             >
 704+ 6649 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 664A 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 704+ 664E 49 54 29    >
 704+ 6651             >                org     $-1                 // alter last byte of Name just above to set
 704+ 6650 A9          >                db      {b $} | END_BIT     // msb as name end
 704+ 6651             >
 704+ 6651 26 66       >                dw      last_NFA            // Link to previous definition Name
 704+ 6653             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 6653 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 704+ 6653             >                else
 704+ 6653 55 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 704+ 6655             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 6655             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 6655             >
 704+ 6655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 6655 D9                           exx
 706+ 6656 D1                           pop     de
 707+ 6657 7B                           ld      a, e                //  de has c1
 708+ 6658 E6 7F                        and     $7F                 // 7-bit ascii only
 709+ 665A                              // push    bc                  // save Instruction Pointer
 710+ 665A 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 711+ 665D 21 48 66                     ld      hl, Emit_Selector_End
 712+ 6660 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 713+ 6662 20 0A                        jr      nz, C_Emit_Not_Found
 714+ 6664                                  // Found then decode it
 715+ 6664 21 31 66                         ld      hl, Emitc_Vec
 716+ 6667 09                               add     hl, bc
 717+ 6668 09                               add     hl, bc
 718+ 6669 5E                               ld      e, (hl)
 719+ 666A 23                               inc     hl
 720+ 666B 56                               ld      d, (hl)
 721+ 666C EB                               ex      de, hl
 722+ 666D                                  // pop     bc                  // restore Instruction Pointer
 723+ 666D E9                               jp      (hl)                // one of the following labels
 724+ 666E              C_Emit_Not_Found:
 725+ 666E                              // pop     bc                  // restore Instruction Pointer
 726+ 666E FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 727+ 6670 30 02                        jr      nc, C_Emit_Printable
 728+ 6672 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 729+ 6674              C_Emit_Printable:
 730+ 6674 6F                           ld      l, a
 731+ 6675 26 00                        ld      h, 0
 732+ 6677
 733+ 6677 E5                           push    hl
 734+ 6678 D9                           exx
 735+ 6679                              next
 735+ 6679 DD E9       >                jp      (ix)
 736+ 667B
 737+ 667B              C_Emit_Bel:
 738+ 667B D9                           exx
 739+ 667C C5                           push    bc                  // save Instruction Pointer
 740+ 667D 11 00 01                     ld      de, $0100
 741+ 6680 21 00 02                     ld      hl, $0200
 742+ 6683 DD E5                        push    ix                  // save Next Pointer
 743+ 6685 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 744+ 6688 DD E1                        pop     ix                  // restore Next Pointer
 745+ 668A C1                           pop     bc                  // restore Instruction Pointer
 746+ 668B 21 00 00                     ld      hl, NUL_CHAR
 747+ 668E E5                           push    hl
 748+ 668F                              next
 748+ 668F DD E9       >                jp      (ix)
 749+ 6691
 750+ 6691 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 751+ 6694 E5                           push    hl
 752+ 6695 D9                           exx
 753+ 6696                              next
 753+ 6696 DD E9       >                jp      (ix)
 754+ 6698
 755+ 6698 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 756+ 669B E5                           push    hl
 757+ 669C D9                           exx
 758+ 669D                              next
 758+ 669D DD E9       >                jp      (ix)
 759+ 669F
 760+ 669F              //  ______________________________________________________________________
 761+ 669F
 762+ 669F              Key_Table:
 763+ 669F E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 764+ 66A0 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 765+ 66A1 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 766+ 66A2 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 767+ 66A3 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 768+ 66A4 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 769+ 66A5 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 770+ 66A6 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 771+ 66A7 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 772+ 66A8 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 773+ 66A9 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 774+ 66AA              Key_MapTo:
 775+ 66AA 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 776+ 66AB 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 777+ 66AC 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 778+ 66AD 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 779+ 66AE 5D                           db      $5D                 //  6: SYMBOL+U : ]
 780+ 66AF 5B                           db      $5B                 //  5: SYMBOL+Y : [
 781+ 66B0 7D                           db      $7D                 //  4: SYMBOL+G : }
 782+ 66B1 7B                           db      $7B                 //  3: SYMBOL+F : {
 783+ 66B2 5C                           db      $5C                 //  2: SYMBOl+D : //
 784+ 66B3 7C                           db      $7C                 //  1: SYMBOL+S : |
 785+ 66B4 7E                           db      $7E                 //  0: SYMBOL+A : ~
 786+ 66B5
 787+ 66B5              //  ______________________________________________________________________
 788+ 66B5              //
 789+ 66B5              // curs         -- c
 790+ 66B5              // wait for a keypress
 791+ 66B5              // This definition need Standard ROM Interrupt to be served
 792+ 66B5
 793+ 66B5                              New_Def CUR, "CURS", is_code, is_normal
 793+ 66B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 66B5             >
 793+ 66B5             >                // dummy db directives used to calculate length of namec
 793+ 66B5 43 55 52 53 >                db      "CURS"
 793+ 66B9             >len_NFA         defl    $ - temp_NFA
 793+ 66B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 66B5             >
 793+ 66B5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 66B6 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 793+ 66BA             >                org     $-1                 // alter last byte of Name just above to set
 793+ 66B9 D3          >                db      {b $} | END_BIT     // msb as name end
 793+ 66BA             >
 793+ 66BA 49 66       >                dw      last_NFA            // Link to previous definition Name
 793+ 66BC             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 66BC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 793+ 66BC             >                else
 793+ 66BC BE 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 793+ 66BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 66BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 66BE             >
 793+ 66BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 66BE
 795+ 66BE C5                           push    bc                  // save Instruction Pointer
 796+ 66BF DD E5                        push    ix
 797+ 66C1
 798+ 66C1 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 799+ 66C5 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 800+ 66C8 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 801+ 66CC
 802+ 66CC              Cur_Wait:
 803+ 66CC 76                               halt
 804+ 66CD 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 805+ 66CF CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 806+ 66D2
 807+ 66D2                                  // software-flash: flips face every 320 ms
 808+ 66D2 3E 10                            ld      a, $10              // Timing based
 809+ 66D4 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 810+ 66D7
 811+ 66D7 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 812+ 66DA 20 0C                            jr      nz, Cur_Cursor
 813+ 66DC 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 814+ 66DF FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 815+ 66E3 28 03                                jr      z, Cur_Cursor
 816+ 66E5 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 817+ 66E8              Cur_Cursor:
 818+ 66E8 D7                               rst     $10
 819+ 66E9 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 820+ 66EB D7                               rst     $10
 821+ 66EC
 822+ 66EC FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 823+ 66F0 28 DA                        jr      z, Cur_Wait
 824+ 66F2
 825+ 66F2 76                           halt    // this is to sync flashing cursor.
 826+ 66F3
 827+ 66F3 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 828+ 66F5 D7                           rst     $10
 829+ 66F6 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 830+ 66F8 D7                           rst     $10
 831+ 66F9
 832+ 66F9 ED 7B 92 63                  ld      sp, (SP_Saved)
 833+ 66FD
 834+ 66FD DD E1                        pop     ix
 835+ 66FF C1                           pop     bc                  // Restore Instruction Pointer
 836+ 6700
 837+ 6700                              next
 837+ 6700 DD E9       >                jp      (ix)
 838+ 6702
 839+ 6702
 840+ 6702              //  ______________________________________________________________________
 841+ 6702              //
 842+ 6702              // key          -- c
 843+ 6702              // This definition need Standard ROM Interrupt to be served
 844+ 6702
 845+ 6702                              New_Def KEY, "KEY", is_code, is_normal
 845+ 6702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ 6702             >
 845+ 6702             >                // dummy db directives used to calculate length of namec
 845+ 6702 4B 45 59    >                db      "KEY"
 845+ 6705             >len_NFA         defl    $ - temp_NFA
 845+ 6705             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ 6702             >
 845+ 6702 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ 6703 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 845+ 6706             >                org     $-1                 // alter last byte of Name just above to set
 845+ 6705 D9          >                db      {b $} | END_BIT     // msb as name end
 845+ 6706             >
 845+ 6706 B5 66       >                dw      last_NFA            // Link to previous definition Name
 845+ 6708             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 6708 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 845+ 6708             >                else
 845+ 6708 0A 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 845+ 670A             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 670A             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 670A             >
 845+ 670A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 670A
 847+ 670A C5                           push    bc
 848+ 670B
 849+ 670B              Key_Wait:
 850+ 670B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 851+ 670F 28 FA                        jr      z, Key_Wait
 852+ 6711
 853+ 6711 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 854+ 6714
 855+ 6714                              // decode character from above table
 856+ 6714 21 9F 66                     ld      hl, Key_Table
 857+ 6717 01 0B 00                     ld      bc, $000B
 858+ 671A ED B1                        cpir
 859+ 671C 20 05                        jr      nz, Key_DontMap
 860+ 671E 21 AA 66                         ld      hl, Key_MapTo
 861+ 6721 09                               add     hl, bc
 862+ 6722 7E                               ld      a, (hl)
 863+ 6723 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 864+ 6725 20 09                        jr      nz, Key_NoCapsLock
 865+ 6727 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 866+ 672A 7E                               ld      a, (hl)
 867+ 672B EE 08                            xor     $08
 868+ 672D 77                               ld      (hl), a
 869+ 672E 3E 00                            ld      a, NUL_CHAR
 870+ 6730 6F           Key_NoCapsLock: ld      l, a
 871+ 6731 26 00                        ld      h, 0                // Prepare TOS
 872+ 6733
 873+ 6733 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 874+ 6737
 875+ 6737 C1                           pop     bc                  // Restore Instruction Pointer
 876+ 6738
 877+ 6738                              psh1
 877+ 6738 E5          >                push    hl
 877+ 6739 DD E9       >                jp      (ix)
 878+ 673B
 879+ 673B
 880+ 673B              //  ______________________________________________________________________
 881+ 673B              //
 882+ 673B              // click        --
 883+ 673B              // This definition need Standard ROM Interrupt to be served
 884+ 673B              //
 885+ 673B              //              New_Def CLICK, "CLICK", is_code, is_normal
 886+ 673B              //
 887+ 673B              //                push    bc
 888+ 673B              //              ld      a, ($5C48)          // BORDCR system variable
 889+ 673B              //              rra
 890+ 673B              //              rra
 891+ 673B              //              rra
 892+ 673B              //              or      $18                 // quick'n'dirty click
 893+ 673B              //              out     ($fe), a
 894+ 673B              //              ld      b, 0
 895+ 673B              //              djnz    $                   // wait loop
 896+ 673B              //              xor     $18
 897+ 673B              //              out     ($fe), a
 898+ 673B              //                pop     bc
 899+ 673B
 900+ 673B              //              next
 901+ 673B
 902+ 673B              //  ______________________________________________________________________
 903+ 673B              //
 904+ 673B              // key?         -- f
 905+ 673B              // key available
 906+ 673B              //
 907+ 673B              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 908+ 673B              //
 909+ 673B              //              ld      hl, 0000
 910+ 673B              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 911+ 673B              //              jr      z, Key_Q
 912+ 673B              //                  dec     hl
 913+ 673B              // Key_Q:
 914+ 673B              //                psh1
 915+ 673B              //              next
 916+ 673B
 917+ 673B              //  ______________________________________________________________________
 918+ 673B              //
 919+ 673B              // ?terminal    -- FALSE | TRUE
 920+ 673B              // test for BREAK keypress
 921+ 673B                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 921+ 673B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 673B             >
 921+ 673B             >                // dummy db directives used to calculate length of namec
 921+ 673B 3F 54 45 52 >                db      "?TERMINAL"
 921+ 673F 4D 49 4E 41 >
 921+ 6743 4C          >
 921+ 6744             >len_NFA         defl    $ - temp_NFA
 921+ 6744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 673B             >
 921+ 673B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 673C 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 921+ 6740 4D 49 4E 41 >
 921+ 6744 4C          >
 921+ 6745             >                org     $-1                 // alter last byte of Name just above to set
 921+ 6744 CC          >                db      {b $} | END_BIT     // msb as name end
 921+ 6745             >
 921+ 6745 02 67       >                dw      last_NFA            // Link to previous definition Name
 921+ 6747             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 6747 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 921+ 6747             >                else
 921+ 6747 49 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 6749             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 6749             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 6749             >
 921+ 6749             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 6749 D9                           exx
 923+ 674A 01 FE 7F                     ld      bc, $7ffe
 924+ 674D ED 50                        in      d, (c)
 925+ 674F 41                           ld      b, c
 926+ 6750 ED 78                        in      a, (c)
 927+ 6752 B2                           or       d
 928+ 6753 1F                           rra
 929+ 6754 3F                           ccf
 930+ 6755 ED 62                        sbc     hl, hl
 931+ 6757 E5                           push    hl
 932+ 6758 D9                           exx
 933+ 6759                              next
 933+ 6759 DD E9       >                jp      (ix)
 934+ 675B
 935+ 675B
 936+ 675B              //  ______________________________________________________________________
 937+ 675B              //
 938+ 675B              // inkey        -- c | 0
 939+ 675B              // call ROM inkey$ routine, returns c or "zero".
 940+ 675B
 941+ 675B                              New_Def INKEY, "INKEY", is_code, is_normal
 941+ 675B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 675B             >
 941+ 675B             >                // dummy db directives used to calculate length of namec
 941+ 675B 49 4E 4B 45 >                db      "INKEY"
 941+ 675F 59          >
 941+ 6760             >len_NFA         defl    $ - temp_NFA
 941+ 6760             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 675B             >
 941+ 675B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 675C 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 941+ 6760 59          >
 941+ 6761             >                org     $-1                 // alter last byte of Name just above to set
 941+ 6760 D9          >                db      {b $} | END_BIT     // msb as name end
 941+ 6761             >
 941+ 6761 3B 67       >                dw      last_NFA            // Link to previous definition Name
 941+ 6763             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 6763 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 941+ 6763             >                else
 941+ 6763 65 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 6765             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 6765             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 6765             >
 941+ 6765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 6765
 943+ 6765 C5                           push    bc
 944+ 6766 ED 73 92 63                  ld      (SP_Saved), sp
 945+ 676A 31 61 63                     ld      sp, Cold_origin - 5
 946+ 676D DD E5                        push    ix
 947+ 676F CD E6 15                     call    $15E6                   // instead of 15E9
 948+ 6772 DD E1                        pop     ix
 949+ 6774 ED 7B 92 63                  ld      sp, (SP_Saved)
 950+ 6778 6F                           ld      l, a
 951+ 6779 26 00                        ld      h, 0
 952+ 677B C1                           pop     bc
 953+ 677C                              psh1
 953+ 677C E5          >                push    hl
 953+ 677D DD E9       >                jp      (ix)
 954+ 677F
 955+ 677F              //  ______________________________________________________________________
 956+ 677F              //
 957+ 677F              // select      n --
 958+ 677F              // selects the given channel number
 959+ 677F
 960+ 677F                              New_Def SELECT, "SELECT", is_code, is_normal
 960+ 677F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ 677F             >
 960+ 677F             >                // dummy db directives used to calculate length of namec
 960+ 677F 53 45 4C 45 >                db      "SELECT"
 960+ 6783 43 54       >
 960+ 6785             >len_NFA         defl    $ - temp_NFA
 960+ 6785             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ 677F             >
 960+ 677F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ 6780 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 960+ 6784 43 54       >
 960+ 6786             >                org     $-1                 // alter last byte of Name just above to set
 960+ 6785 D4          >                db      {b $} | END_BIT     // msb as name end
 960+ 6786             >
 960+ 6786 5B 67       >                dw      last_NFA            // Link to previous definition Name
 960+ 6788             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 6788 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 960+ 6788             >                else
 960+ 6788 8A 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 960+ 678A             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 678A             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 678A             >
 960+ 678A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 678A E1                           pop     hl
 962+ 678B C5                           push    bc
 963+ 678C 7D                           ld      a, l
 964+ 678D ED 73 92 63                  ld      (SP_Saved), sp
 965+ 6791 31 61 63                     ld      sp, Cold_origin - 5
 966+ 6794 DD E5                        push    ix
 967+ 6796 CD 01 16                     call    $1601
 968+ 6799 DD E1                        pop     ix
 969+ 679B ED 7B 92 63                  ld      sp, (SP_Saved)
 970+ 679F C1                           pop     bc
 971+ 67A0
 972+ 67A0                              next
 972+ 67A0 DD E9       >                jp      (ix)
 973+ 67A2
 974+ 67A2              //  ______________________________________________________________________
 975+ 67A2              //
 976+ 67A2              // ZX Spectrum Next - Low Level disk primitives.
 977+ 67A2              // this include is "here" for backward compatibility
 978+ 67A2
 979+ 67A2                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++67A2              //  ______________________________________________________________________
   2++67A2              //
   3++67A2              //  next-opt.asm
   4++67A2              //
   5++67A2              //  ZX Spectrum Next - peculiar definitions
   6++67A2              //  ______________________________________________________________________
   7++67A2
   8++67A2              //  ______________________________________________________________________
   9++67A2              //
  10++67A2              // f_seek       d u -- f
  11++67A2              // Seek to position d in file-handle u.
  12++67A2              // Return a false-flag 0 on success, True flag on error
  13++67A2                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++67A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++67A2             >
  13++67A2             >                // dummy db directives used to calculate length of namec
  13++67A2 46 5F 53 45 >                db      "F_SEEK"
  13++67A6 45 4B       >
  13++67A8             >len_NFA         defl    $ - temp_NFA
  13++67A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++67A2             >
  13++67A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A3 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A7 45 4B       >
  13++67A9             >                org     $-1                 // alter last byte of Name just above to set
  13++67A8 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A9             >
  13++67A9 7F 67       >                dw      last_NFA            // Link to previous definition Name
  13++67AB             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67AB             >                else
  13++67AB AD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AD             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AD             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AD             >
  13++67AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AD E1                           pop     hl                  // file-handle
  15++67AE 7D                           ld      a, l                // file-handle
  16++67AF 60                           ld      h, b                // save Intruction Pointer
  17++67B0 69                           ld      l, c
  18++67B1 C1                           pop     bc                  // bc has high-word of d
  19++67B2 D1                           pop     de
  20++67B3 DD E5                        push    ix
  21++67B5 E5                           push    hl                  // save Instruction Pointer
  22++67B6 DD 21 00 00                  ld      ix, 0
  23++67BA CF                           rst     $08
  24++67BB 9F                           db      $9F
  25++67BC              F_Seek_Exit:
  26++67BC C1                           pop     bc                  // restore Instruction Pointer
  27++67BD DD E1                        pop     ix
  28++67BF ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67C1
  30++67C1                              psh1
  30++67C1 E5          >                push    hl
  30++67C2 DD E9       >                jp      (ix)
  31++67C4
  32++67C4              //  ______________________________________________________________________
  33++67C4              //
  34++67C4              // f_close      u -- f
  35++67C4              // Close file-handle u.
  36++67C4              // Return 0 on success, True flag on error
  37++67C4
  38++67C4                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C4             >
  38++67C4             >                // dummy db directives used to calculate length of namec
  38++67C4 46 5F 43 4C >                db      "F_CLOSE"
  38++67C8 4F 53 45    >
  38++67CB             >len_NFA         defl    $ - temp_NFA
  38++67CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C4             >
  38++67C4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C5 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C9 4F 53 45    >
  38++67CC             >                org     $-1                 // alter last byte of Name just above to set
  38++67CB C5          >                db      {b $} | END_BIT     // msb as name end
  38++67CC             >
  38++67CC A2 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CE             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CE             >                else
  38++67CE D0 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67D0             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67D0             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67D0             >
  38++67D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67D0
  40++67D0 E1                           pop     hl
  41++67D1 7D                           ld      a, l                // file-handle
  42++67D2 DD E5                        push    ix
  43++67D4 C5                           push    bc                  // Save Instruction pointer
  44++67D5 CF                           rst     $08
  45++67D6 9B                           db      $9B
  46++67D7 18 E3                        jr      F_Seek_Exit
  47++67D9              //              pop     bc
  48++67D9              //              pop     ix
  49++67D9              //              sbc     hl, hl
  50++67D9              //              psh1
  51++67D9
  52++67D9              //  ______________________________________________________________________
  53++67D9              //
  54++67D9              // f_sync      u -- f
  55++67D9              // Close file-handle u.
  56++67D9              // Return 0 on success, True flag on error
  57++67D9
  58++67D9                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D9             >
  58++67D9             >                // dummy db directives used to calculate length of namec
  58++67D9 46 5F 53 59 >                db      "F_SYNC"
  58++67DD 4E 43       >
  58++67DF             >len_NFA         defl    $ - temp_NFA
  58++67DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D9             >
  58++67D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67DA 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DE 4E 43       >
  58++67E0             >                org     $-1                 // alter last byte of Name just above to set
  58++67DF C3          >                db      {b $} | END_BIT     // msb as name end
  58++67E0             >
  58++67E0 C4 67       >                dw      last_NFA            // Link to previous definition Name
  58++67E2             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67E2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67E2             >                else
  58++67E2 E4 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E4             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E4             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E4             >
  58++67E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E4 E1                           pop     hl
  60++67E5 7D                           ld      a, l                // file-handle
  61++67E6 DD E5                        push    ix
  62++67E8 C5                           push    bc
  63++67E9 CF                           rst     $08
  64++67EA 9C                           db      $9C
  65++67EB 18 CF                        jr      F_Seek_Exit
  66++67ED              //              pop     bc
  67++67ED              //              pop     ix
  68++67ED              //              sbc     hl, hl
  69++67ED              //              psh1
  70++67ED
  71++67ED              //  ______________________________________________________________________
  72++67ED              //
  73++67ED              // f_fgetpos    u -- d f
  74++67ED              // Seek to position d in file-handle u.
  75++67ED              // Return a false-flag 0 on success, True flag on error
  76++67ED                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67ED             >
  76++67ED             >                // dummy db directives used to calculate length of namec
  76++67ED 46 5F 46 47 >                db      "F_FGETPOS"
  76++67F1 45 54 50 4F >
  76++67F5 53          >
  76++67F6             >len_NFA         defl    $ - temp_NFA
  76++67F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67ED             >
  76++67ED 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EE 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67F2 45 54 50 4F >
  76++67F6 53          >
  76++67F7             >                org     $-1                 // alter last byte of Name just above to set
  76++67F6 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F7             >
  76++67F7 D9 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F9             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F9             >                else
  76++67F9 FB 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67FB             >
  76++67FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67FB E1                           pop     hl
  78++67FC 7D                           ld      a, l                // file-handle
  79++67FD DD E5                        push    ix
  80++67FF C5                           push    bc
  81++6800 CF                           rst     $08
  82++6801 A0                           db      $A0
  83++6802 E1                           pop     hl                  // restore Instruction Pointer
  84++6803 DD E1                        pop     ix
  85++6805 D5                           push    de
  86++6806 C5                           push    bc
  87++6807 44                           ld      b, h                // restore Instruction Pointer
  88++6808 4D                           ld      c, l
  89++6809 ED 62                        sbc     hl, hl
  90++680B
  91++680B                              psh1
  91++680B E5          >                push    hl
  91++680C DD E9       >                jp      (ix)
  92++680E
  93++680E              //  ______________________________________________________________________
  94++680E              //
  95++680E              // f_read       a b u -- n f
  96++680E              // Read b bytes from file-handle u to address a
  97++680E              // Return the actual number n of bytes read
  98++680E              // Return 0 on success, True flag on error
  99++680E                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680E             >
  99++680E             >                // dummy db directives used to calculate length of namec
  99++680E 46 5F 52 45 >                db      "F_READ"
  99++6812 41 44       >
  99++6814             >len_NFA         defl    $ - temp_NFA
  99++6814             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680E             >
  99++680E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680F 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6813 41 44       >
  99++6815             >                org     $-1                 // alter last byte of Name just above to set
  99++6814 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6815             >
  99++6815 ED 67       >                dw      last_NFA            // Link to previous definition Name
  99++6817             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6817 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6817             >                else
  99++6817 19 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6819             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6819             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6819             >
  99++6819             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6819
 101++6819 50                           ld      d, b
 102++681A 59                           ld      e, c
 103++681B E1                           pop     hl
 104++681C 7D                           ld      a, l                // file-handle
 105++681D C1                           pop     bc                  // bc has bytes to read
 106++681E DD E3                        ex      (sp), ix            // ix has address
 107++6820 D5                           push    de                  // Save Instruction pointer
 108++6821 CF                           rst     $08
 109++6822 9D                           db      $9D
 110++6823              F_Read_Exit:
 111++6823 C1                           pop     bc                  // Restore Instruction pointer
 112++6824 DD E1                        pop     ix                  // Restore ix
 113++6826 D5                           push    de                  // bytes written
 114++6827 ED 62                        sbc     hl, hl
 115++6829
 116++6829                              psh1
 116++6829 E5          >                push    hl
 116++682A DD E9       >                jp      (ix)
 117++682C
 118++682C              //  ______________________________________________________________________
 119++682C              //
 120++682C              // f_write      a b u -- n f
 121++682C              // Write bytes currently stored at address a to file-handle u.
 122++682C              // Return the actual n bytes written and 0 on success, True flag on error.
 123++682C                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++682C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++682C             >
 123++682C             >                // dummy db directives used to calculate length of namec
 123++682C 46 5F 57 52 >                db      "F_WRITE"
 123++6830 49 54 45    >
 123++6833             >len_NFA         defl    $ - temp_NFA
 123++6833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++682C             >
 123++682C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682D 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++6831 49 54 45    >
 123++6834             >                org     $-1                 // alter last byte of Name just above to set
 123++6833 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6834             >
 123++6834 0E 68       >                dw      last_NFA            // Link to previous definition Name
 123++6836             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6836 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6836             >                else
 123++6836 38 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6838             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6838             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6838             >
 123++6838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6838
 125++6838 50                           ld      d, b
 126++6839 59                           ld      e, c
 127++683A E1                           pop     hl
 128++683B 7D                           ld      a, l                // file-handle
 129++683C C1                           pop     bc                  // bc has bytes to read
 130++683D DD E3                        ex      (sp), ix            // ix has address
 131++683F D5                           push    de                  // Save Instruction pointer
 132++6840 CF                           rst     $08
 133++6841 9E                           db      $9E
 134++6842 18 DF                        jr F_Read_Exit
 135++6844              //              pop     bc                  // Restore Instruction pointer
 136++6844              //              pop     ix                  // Restore ix
 137++6844              //              push    de                  // bytes written
 138++6844              //              sbc     hl, hl
 139++6844              //
 140++6844              //              psh1
 141++6844
 142++6844              //  ______________________________________________________________________
 143++6844              //
 144++6844              // f_open       a1 a2 b -- u f
 145++6844              // open a file
 146++6844              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6844              // a2 is address to an 8-byte header data used in some cases.
 148++6844              // b is access mode-byte, that is a combination of:
 149++6844              // any/all of:
 150++6844              //   esx_mode_read          $01 request read access
 151++6844              //   esx_mode_write         $02 request write access
 152++6844              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6844              // plus one of:
 154++6844              //   esx_mode_open_exist    $00 only open existing file
 155++6844              //   esx_mode_open_creat    $08 open existing or create file
 156++6844              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6844              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6844              // Return file-handle u and 0 on success, True flag on error
 159++6844                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6844             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6844             >
 159++6844             >                // dummy db directives used to calculate length of namec
 159++6844 46 5F 4F 50 >                db      "F_OPEN"
 159++6848 45 4E       >
 159++684A             >len_NFA         defl    $ - temp_NFA
 159++684A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6844             >
 159++6844 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6845 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6849 45 4E       >
 159++684B             >                org     $-1                 // alter last byte of Name just above to set
 159++684A CE          >                db      {b $} | END_BIT     // msb as name end
 159++684B             >
 159++684B 2C 68       >                dw      last_NFA            // Link to previous definition Name
 159++684D             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684D             >                else
 159++684D 4F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684F             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684F             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684F             >
 159++684F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684F 60                           ld      h, b                // Save Instruction pointer
 161++6850 69                           ld      l, c
 162++6851 C1                           pop     bc                  // file-mode
 163++6852 41                           ld      b, c                // file-mode
 164++6853 D1                           pop     de                  // 8-bytes buffer if any
 165++6854 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6856 E5                           push    hl                  // Save Instruction pointer
 167++6857 3E 2A                        ld      a, "*"
 168++6859 CF                           rst     $08
 169++685A 9A                           db      $9A
 170++685B              F_Open_Exit:
 171++685B 5F                           ld      e, a
 172++685C 16 00                        ld      d, 0
 173++685E 18 C3                        jr      F_Read_Exit
 174++6860
 175++6860              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6860              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6860              //   \ DROP
 178++6860              //   \ F_CLOSE
 179++6860
 180++6860
 181++6860              //  ______________________________________________________________________
 182++6860              //
 183++6860              // f_opendir    a1 a2 b -- u f
 184++6860              // open a file
 185++6860                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6860             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6860             >
 185++6860             >                // dummy db directives used to calculate length of namec
 185++6860 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6864 45 4E 44 49 >
 185++6868 52          >
 185++6869             >len_NFA         defl    $ - temp_NFA
 185++6869             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6860             >
 185++6860 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6861 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6865 45 4E 44 49 >
 185++6869 52          >
 185++686A             >                org     $-1                 // alter last byte of Name just above to set
 185++6869 D2          >                db      {b $} | END_BIT     // msb as name end
 185++686A             >
 185++686A 44 68       >                dw      last_NFA            // Link to previous definition Name
 185++686C             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++686C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 185++686C             >                else
 185++686C 6E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 185++686E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++686E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++686E             >
 185++686E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++686E DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++6870 D5                           push    de
 188++6871 C5                           push    bc                  // Save Instruction pointer
 189++6872 06 10                        ld      b, $10              // file-mode
 190++6874 3E 43                        ld      a, "C"
 191++6876 CF                           rst     $08
 192++6877 A3                           db      $A3
 193++6878 18 E1                        jr      F_Open_Exit
 194++687A
 195++687A
 196++687A              //  ______________________________________________________________________
 197++687A              //
 198++687A              // f_readdir    a1 a2 b -- u f
 199++687A              // open a file
 200++687A                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 200++687A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200++687A             >
 200++687A             >                // dummy db directives used to calculate length of namec
 200++687A 46 5F 52 45 >                db      "F_READDIR"
 200++687E 41 44 44 49 >
 200++6882 52          >
 200++6883             >len_NFA         defl    $ - temp_NFA
 200++6883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200++687A             >
 200++687A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200++687B 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 200++687F 41 44 44 49 >
 200++6883 52          >
 200++6884             >                org     $-1                 // alter last byte of Name just above to set
 200++6883 D2          >                db      {b $} | END_BIT     // msb as name end
 200++6884             >
 200++6884 60 68       >                dw      last_NFA            // Link to previous definition Name
 200++6886             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200++6886 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 200++6886             >                else
 200++6886 88 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 200++6888             >                endif           ; ok        // for other definitions it "points" the correct handler
 200++6888             >                // Use of "; ok" to suppress "warning[fwdref]"
 200++6888             >
 200++6888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201++6888 D9                            exx
 202++6889 E1                            pop     hl
 203++688A 7D                            ld      a, l
 204++688B D1                            pop     de
 205++688C DD E3                         ex      (sp), ix            // filespec nul-terminated
 206++688E D9                           exx
 207++688F D5                           push    de
 208++6890 C5                           push    bc                  // Save Instruction pointer
 209++6891 D9                            exx
 210++6892 CF                            rst     $08
 211++6893 A4                            db      $A4
 212++6894 18 C5                         jr      F_Open_Exit
 213++6896
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 980+ 6896
 981+ 6896
 982+ 6896              //  ______________________________________________________________________
 983+ 6896              //
 984+ 6896              // cmove    a1 a2 u --
 985+ 6896              // If u > 0, moves memory content starting at address a1 for n bytes long
 986+ 6896              // storing then starting at address addr2.
 987+ 6896              // The content of a1 is moved first. See CMOVE> also.
 988+ 6896                              New_Def CMOVE, "CMOVE", is_code, is_normal
 988+ 6896             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 6896             >
 988+ 6896             >                // dummy db directives used to calculate length of namec
 988+ 6896 43 4D 4F 56 >                db      "CMOVE"
 988+ 689A 45          >
 988+ 689B             >len_NFA         defl    $ - temp_NFA
 988+ 689B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 6896             >
 988+ 6896 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 6897 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 988+ 689B 45          >
 988+ 689C             >                org     $-1                 // alter last byte of Name just above to set
 988+ 689B C5          >                db      {b $} | END_BIT     // msb as name end
 988+ 689C             >
 988+ 689C 7A 68       >                dw      last_NFA            // Link to previous definition Name
 988+ 689E             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 689E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 988+ 689E             >                else
 988+ 689E A0 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 68A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 68A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 68A0             >
 988+ 68A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 68A0 D9                           exx
 990+ 68A1 C1                           pop     bc                  // bc has counter
 991+ 68A2 D1                           pop     de                  // de now has dest
 992+ 68A3 E1                           pop     hl                  // hl has source, save Instruction Pointer
 993+ 68A4 78                           ld      a, b
 994+ 68A5 B1                           or      c
 995+ 68A6 28 02                        jr      z, Cmove_NoMove
 996+ 68A8 ED B0                            ldir
 997+ 68AA              Cmove_NoMove:
 998+ 68AA D9                           exx
 999+ 68AB                              next
 999+ 68AB DD E9       >                jp      (ix)
1000+ 68AD
1001+ 68AD              //  ______________________________________________________________________
1002+ 68AD              //
1003+ 68AD              // cmove>    a1 a2 u --
1004+ 68AD              // If u > 0, moves memory content starting at address a1 for n bytes long
1005+ 68AD              // storing then starting at address addr2.
1006+ 68AD              // The content of a1 is moved last. See cmove.
1007+ 68AD                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1007+ 68AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 68AD             >
1007+ 68AD             >                // dummy db directives used to calculate length of namec
1007+ 68AD 43 4D 4F 56 >                db      "CMOVE>"
1007+ 68B1 45 3E       >
1007+ 68B3             >len_NFA         defl    $ - temp_NFA
1007+ 68B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 68AD             >
1007+ 68AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 68AE 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1007+ 68B2 45 3E       >
1007+ 68B4             >                org     $-1                 // alter last byte of Name just above to set
1007+ 68B3 BE          >                db      {b $} | END_BIT     // msb as name end
1007+ 68B4             >
1007+ 68B4 96 68       >                dw      last_NFA            // Link to previous definition Name
1007+ 68B6             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 68B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1007+ 68B6             >                else
1007+ 68B6 B8 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1007+ 68B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 68B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 68B8             >
1007+ 68B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 68B8 D9                           exx
1009+ 68B9 C1                           pop     bc                  // bc has counter
1010+ 68BA D1                           pop     de                  // de has dest
1011+ 68BB E1                           pop     hl                  // hl has source, save Instruction Pointer
1012+ 68BC 78                           ld      a, b
1013+ 68BD B1                           or      c
1014+ 68BE 28 08                        jr      z, CmoveV_NoMove
1015+ 68C0 EB                               ex      de, hl              // compute address to
1016+ 68C1 09                               add     hl, bc              // operate backward
1017+ 68C2 2B                               dec     hl
1018+ 68C3 EB                               ex      de, hl
1019+ 68C4 09                               add     hl, bc
1020+ 68C5 2B                               dec     hl
1021+ 68C6 ED B8                            lddr                        // backward
1022+ 68C8              CmoveV_NoMove:
1023+ 68C8 D9                           exx
1024+ 68C9                              next
1024+ 68C9 DD E9       >                jp      (ix)
1025+ 68CB
1026+ 68CB              //  ______________________________________________________________________
1027+ 68CB              //
1028+ 68CB              // um*      u1 u2 -- ud
1029+ 68CB              // Unsigned multiplication
1030+ 68CB              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1031+ 68CB              // On the stack a double number is treated as two single numbers
1032+ 68CB              // where DE is on the top of the stack and HL is the second from top,
1033+ 68CB              // Instead, in 2VARIABLE a double number is stored as EDLH.
1034+ 68CB              // this definition could use "MUL" Z80N new op-code.
1035+ 68CB                              New_Def UM_MUL, "UM*", is_code, is_normal
1035+ 68CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ 68CB             >
1035+ 68CB             >                // dummy db directives used to calculate length of namec
1035+ 68CB 55 4D 2A    >                db      "UM*"
1035+ 68CE             >len_NFA         defl    $ - temp_NFA
1035+ 68CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ 68CB             >
1035+ 68CB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ 68CC 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1035+ 68CF             >                org     $-1                 // alter last byte of Name just above to set
1035+ 68CE AA          >                db      {b $} | END_BIT     // msb as name end
1035+ 68CF             >
1035+ 68CF AD 68       >                dw      last_NFA            // Link to previous definition Name
1035+ 68D1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 68D1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1035+ 68D1             >                else
1035+ 68D1 D3 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1035+ 68D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 68D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 68D3             >
1035+ 68D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 68D3 D9                           exx
1037+ 68D4 D1                           pop     de                    // de has u2 operand
1038+ 68D5 E1                           pop     hl                    // hl has u1 operand
1039+ 68D6 45                           ld      b, l
1040+ 68D7 4B                           ld      c, e
1041+ 68D8 5D                           ld      e, l
1042+ 68D9 6A                           ld      l, d
1043+ 68DA E5                           push    hl
1044+ 68DB 69                           ld      l, c
1045+ 68DC ED 30                        mul
1046+ 68DE EB                           ex      de, hl
1047+ 68DF ED 30                        mul
1048+ 68E1 AF                           xor     a
1049+ 68E2 19                           add     hl, de
1050+ 68E3 8F                           adc     a
1051+ 68E4 59                           ld      e, c
1052+ 68E5 50                           ld      d, b
1053+ 68E6 ED 30                        mul
1054+ 68E8 47                           ld      b, a
1055+ 68E9 4C                           ld      c, h
1056+ 68EA 7A                           ld      a, d
1057+ 68EB 85                           add     l
1058+ 68EC 67                           ld      h, a
1059+ 68ED 6B                           ld      l, e
1060+ 68EE D1                           pop     de
1061+ 68EF ED 30                        mul
1062+ 68F1 EB                           ex      de, hl
1063+ 68F2 ED 4A                        adc     hl, bc
1064+ 68F4 D5                           push    de
1065+ 68F5 E5                           push    hl
1066+ 68F6 D9                           exx
1067+ 68F7                              next
1067+ 68F7 DD E9       >                jp      (ix)
1068+ 68F9
1069+ 68F9              //  ______________________________________________________________________
1070+ 68F9              //
1071+ 68F9              // um/mod      ud u1 -- q r
1072+ 68F9              // divides ud into u1 giving quotient q and remainder r
1073+ 68F9              // algorithm takes 16 bit at a time starting from msb
1074+ 68F9              // DE grows from lsb upward with quotient result
1075+ 68F9              // HL keeps the remainder at each stage of division
1076+ 68F9              // each loop 'lowers' the next binary digit to form the current dividend
1077+ 68F9                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1077+ 68F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1077+ 68F9             >
1077+ 68F9             >                // dummy db directives used to calculate length of namec
1077+ 68F9 55 4D 2F 4D >                db      "UM/MOD"
1077+ 68FD 4F 44       >
1077+ 68FF             >len_NFA         defl    $ - temp_NFA
1077+ 68FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1077+ 68F9             >
1077+ 68F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1077+ 68FA 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1077+ 68FE 4F 44       >
1077+ 6900             >                org     $-1                 // alter last byte of Name just above to set
1077+ 68FF C4          >                db      {b $} | END_BIT     // msb as name end
1077+ 6900             >
1077+ 6900 CB 68       >                dw      last_NFA            // Link to previous definition Name
1077+ 6902             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1077+ 6902 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1077+ 6902             >                else
1077+ 6902 04 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1077+ 6904             >                endif           ; ok        // for other definitions it "points" the correct handler
1077+ 6904             >                // Use of "; ok" to suppress "warning[fwdref]"
1077+ 6904             >
1077+ 6904             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1078+ 6904 D9                           exx
1079+ 6905 C1                           pop     bc                      // divisor
1080+ 6906
1081+ 6906 E1                           pop     hl                      // < high part
1082+ 6907 D1                           pop     de                      // < low part and
1083+ 6908
1084+ 6908 7D                           ld      a, l                    // check without changing arguments
1085+ 6909 91                           sub     c                       // if divisor is greater than high part
1086+ 690A 7C                           ld      a, h                    // so quotient will be in range
1087+ 690B 98                           sbc     a, b
1088+ 690C 30 20                        jr      nc, Um_DivMod_OutOfRange
1089+ 690E 3E 10                            ld      a, 16
1090+ 6910              Um_DivMod_Loop:
1091+ 6910 CB 23                                sla     e
1092+ 6912 CB 12                                rl      d
1093+ 6914 ED 6A                                adc     hl, hl
1094+ 6916 30 05                                jr      nc, Um_DivMod_Carry
1095+ 6918 A7                                       and     a
1096+ 6919 ED 42                                    sbc     hl, bc
1097+ 691B 18 07                                jr      Um_DivMod_Endif    // else
1098+ 691D              Um_DivMod_Carry:
1099+ 691D A7                                       and     a
1100+ 691E ED 42                                    sbc     hl, bc
1101+ 6920 30 02                                    jr      nc, Um_DivMod_Endif
1102+ 6922 09                                           add     hl, bc
1103+ 6923 1B                                           dec     de
1104+ 6924              Um_DivMod_Endif:                                   // endif
1105+ 6924 13                                   inc     de
1106+ 6925 3D                                   dec     a
1107+ 6926 20 E8                            jr      nz, Um_DivMod_Loop
1108+ 6928 EB                               ex      de, hl
1109+ 6929              Um_DivMod_Bailout:
1110+ 6929 D5                               push    de                  // de := remanider
1111+ 692A E5                               push    hl                  // hl := quotient
1112+ 692B D9                               exx
1113+ 692C                                  next
1113+ 692C DD E9       >                jp      (ix)
1114+ 692E
1115+ 692E              Um_DivMod_OutOfRange:
1116+ 692E 21 FF FF                     ld      hl, -1
1117+ 6931 54                           ld      d, h
1118+ 6932 5D                           ld      e, l
1119+ 6933 18 F4                        jr      Um_DivMod_Bailout
1120+ 6935
1121+ 6935              //  ______________________________________________________________________
1122+ 6935              //
1123+ 6935              // and          n1 n2 -- n3
1124+ 6935              // bit logical AND. Returns n3 as n1 & n2
1125+ 6935                              New_Def AND_OP, "AND", is_code, is_normal
1125+ 6935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ 6935             >
1125+ 6935             >                // dummy db directives used to calculate length of namec
1125+ 6935 41 4E 44    >                db      "AND"
1125+ 6938             >len_NFA         defl    $ - temp_NFA
1125+ 6938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ 6935             >
1125+ 6935 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ 6936 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1125+ 6939             >                org     $-1                 // alter last byte of Name just above to set
1125+ 6938 C4          >                db      {b $} | END_BIT     // msb as name end
1125+ 6939             >
1125+ 6939 F9 68       >                dw      last_NFA            // Link to previous definition Name
1125+ 693B             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 693B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1125+ 693B             >                else
1125+ 693B 3D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1125+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 693D             >
1125+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 693D D1                           pop     de
1127+ 693E E1                           pop     hl
1128+ 693F 7B                           ld      a, e
1129+ 6940 A5                           and     l
1130+ 6941 6F                           ld      l, a
1131+ 6942 7A                           ld      a, d
1132+ 6943 A4                           and     h
1133+ 6944 67                           ld      h, a
1134+ 6945
1135+ 6945                              psh1
1135+ 6945 E5          >                push    hl
1135+ 6946 DD E9       >                jp      (ix)
1136+ 6948
1137+ 6948              //  ______________________________________________________________________
1138+ 6948              //
1139+ 6948              // or           n1 n2 -- n3
1140+ 6948              // bit logical OR. Returns n3 as n1 | n2
1141+ 6948                              New_Def OR_OP, "OR", is_code, is_normal
1141+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ 6948             >
1141+ 6948             >                // dummy db directives used to calculate length of namec
1141+ 6948 4F 52       >                db      "OR"
1141+ 694A             >len_NFA         defl    $ - temp_NFA
1141+ 694A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ 6948             >
1141+ 6948 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ 6949 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1141+ 694B             >                org     $-1                 // alter last byte of Name just above to set
1141+ 694A D2          >                db      {b $} | END_BIT     // msb as name end
1141+ 694B             >
1141+ 694B 35 69       >                dw      last_NFA            // Link to previous definition Name
1141+ 694D             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 694D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1141+ 694D             >                else
1141+ 694D 4F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1141+ 694F             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 694F             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 694F             >
1141+ 694F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 694F D1                           pop     de
1143+ 6950 E1                           pop     hl
1144+ 6951 7B                           ld      a, e
1145+ 6952 B5                           or      l
1146+ 6953 6F                           ld      l, a
1147+ 6954 7A                           ld      a, d
1148+ 6955 B4                           or      h
1149+ 6956 67                           ld      h, a
1150+ 6957
1151+ 6957                              psh1
1151+ 6957 E5          >                push    hl
1151+ 6958 DD E9       >                jp      (ix)
1152+ 695A
1153+ 695A              //  ______________________________________________________________________
1154+ 695A              //
1155+ 695A              // xor          n1 n2 -- n3
1156+ 695A              // bit logical OR. Returns n3 as n1 ^ n2
1157+ 695A                              New_Def XOR_OP, "XOR", is_code, is_normal
1157+ 695A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 695A             >
1157+ 695A             >                // dummy db directives used to calculate length of namec
1157+ 695A 58 4F 52    >                db      "XOR"
1157+ 695D             >len_NFA         defl    $ - temp_NFA
1157+ 695D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 695A             >
1157+ 695A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 695B 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1157+ 695E             >                org     $-1                 // alter last byte of Name just above to set
1157+ 695D D2          >                db      {b $} | END_BIT     // msb as name end
1157+ 695E             >
1157+ 695E 48 69       >                dw      last_NFA            // Link to previous definition Name
1157+ 6960             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 6960 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1157+ 6960             >                else
1157+ 6960 62 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 6962             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 6962             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 6962             >
1157+ 6962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 6962 D1                           pop     de
1159+ 6963 E1                           pop     hl
1160+ 6964 7B                           ld      a, e
1161+ 6965 AD                           xor     l
1162+ 6966 6F                           ld      l, a
1163+ 6967 7A                           ld      a, d
1164+ 6968 AC                           xor     h
1165+ 6969 67                           ld      h, a
1166+ 696A
1167+ 696A                              psh1
1167+ 696A E5          >                push    hl
1167+ 696B DD E9       >                jp      (ix)
1168+ 696D
1169+ 696D              //  ______________________________________________________________________
1170+ 696D              //
1171+ 696D              // sp@      -- a
1172+ 696D              // returns on top of stack the value of SP before execution
1173+ 696D                              New_Def SPFETCH, "SP@", is_code, is_normal
1173+ 696D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1173+ 696D             >
1173+ 696D             >                // dummy db directives used to calculate length of namec
1173+ 696D 53 50 40    >                db      "SP@"
1173+ 6970             >len_NFA         defl    $ - temp_NFA
1173+ 6970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1173+ 696D             >
1173+ 696D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1173+ 696E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1173+ 6971             >                org     $-1                 // alter last byte of Name just above to set
1173+ 6970 C0          >                db      {b $} | END_BIT     // msb as name end
1173+ 6971             >
1173+ 6971 5A 69       >                dw      last_NFA            // Link to previous definition Name
1173+ 6973             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1173+ 6973 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1173+ 6973             >                else
1173+ 6973 75 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1173+ 6975             >                endif           ; ok        // for other definitions it "points" the correct handler
1173+ 6975             >                // Use of "; ok" to suppress "warning[fwdref]"
1173+ 6975             >
1173+ 6975             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1174+ 6975
1175+ 6975 21 00 00                     ld      hl, 0
1176+ 6978 39                           add     hl, sp
1177+ 6979
1178+ 6979                              psh1
1178+ 6979 E5          >                push    hl
1178+ 697A DD E9       >                jp      (ix)
1179+ 697C
1180+ 697C              //  ______________________________________________________________________
1181+ 697C              //
1182+ 697C              // sp!      a --
1183+ 697C              // restore SP to the initial value passed
1184+ 697C              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1185+ 697C                              New_Def SPSTORE, "SP!", is_code, is_normal
1185+ 697C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1185+ 697C             >
1185+ 697C             >                // dummy db directives used to calculate length of namec
1185+ 697C 53 50 21    >                db      "SP!"
1185+ 697F             >len_NFA         defl    $ - temp_NFA
1185+ 697F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1185+ 697C             >
1185+ 697C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1185+ 697D 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1185+ 6980             >                org     $-1                 // alter last byte of Name just above to set
1185+ 697F A1          >                db      {b $} | END_BIT     // msb as name end
1185+ 6980             >
1185+ 6980 6D 69       >                dw      last_NFA            // Link to previous definition Name
1185+ 6982             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1185+ 6982 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1185+ 6982             >                else
1185+ 6982 84 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1185+ 6984             >                endif           ; ok        // for other definitions it "points" the correct handler
1185+ 6984             >                // Use of "; ok" to suppress "warning[fwdref]"
1185+ 6984             >
1185+ 6984             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1186+ 6984 E1                           pop     hl
1187+ 6985 F9                           ld      sp, hl
1188+ 6986
1189+ 6986                              next
1189+ 6986 DD E9       >                jp      (ix)
1190+ 6988
1191+ 6988              //  ______________________________________________________________________
1192+ 6988              //
1193+ 6988              // rp@      -- a
1194+ 6988              // returns on top of stack the value of Return-Pointer
1195+ 6988                              New_Def RPFETCH, "RP@", is_code, is_normal
1195+ 6988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1195+ 6988             >
1195+ 6988             >                // dummy db directives used to calculate length of namec
1195+ 6988 52 50 40    >                db      "RP@"
1195+ 698B             >len_NFA         defl    $ - temp_NFA
1195+ 698B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1195+ 6988             >
1195+ 6988 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1195+ 6989 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1195+ 698C             >                org     $-1                 // alter last byte of Name just above to set
1195+ 698B C0          >                db      {b $} | END_BIT     // msb as name end
1195+ 698C             >
1195+ 698C 7C 69       >                dw      last_NFA            // Link to previous definition Name
1195+ 698E             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1195+ 698E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1195+ 698E             >                else
1195+ 698E 90 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1195+ 6990             >                endif           ; ok        // for other definitions it "points" the correct handler
1195+ 6990             >                // Use of "; ok" to suppress "warning[fwdref]"
1195+ 6990             >
1195+ 6990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1196+ 6990
1197+ 6990                              ldhlrp
1197+ 6990 2A 96 63    >                ld      hl,(RP_Pointer)
1198+ 6993
1199+ 6993                              psh1
1199+ 6993 E5          >                push    hl
1199+ 6994 DD E9       >                jp      (ix)
1200+ 6996
1201+ 6996              //  ______________________________________________________________________
1202+ 6996              //
1203+ 6996              // rp!      a --
1204+ 6996              // restore RP to the initial value passed
1205+ 6996              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1206+ 6996                              New_Def RPSTORE, "RP!", is_code, is_normal
1206+ 6996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1206+ 6996             >
1206+ 6996             >                // dummy db directives used to calculate length of namec
1206+ 6996 52 50 21    >                db      "RP!"
1206+ 6999             >len_NFA         defl    $ - temp_NFA
1206+ 6999             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1206+ 6996             >
1206+ 6996 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1206+ 6997 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1206+ 699A             >                org     $-1                 // alter last byte of Name just above to set
1206+ 6999 A1          >                db      {b $} | END_BIT     // msb as name end
1206+ 699A             >
1206+ 699A 88 69       >                dw      last_NFA            // Link to previous definition Name
1206+ 699C             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1206+ 699C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1206+ 699C             >                else
1206+ 699C 9E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1206+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1206+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1206+ 699E             >
1206+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1207+ 699E E1                           pop     hl
1208+ 699F                              ldrphl
1208+ 699F 22 96 63    >                ld      (RP_Pointer),hl
1209+ 69A2
1210+ 69A2                              next
1210+ 69A2 DD E9       >                jp      (ix)
1211+ 69A4
1212+ 69A4              //  ______________________________________________________________________
1213+ 69A4              //
1214+ 69A4              // exit      --
1215+ 69A4              // exits back to the caller word
1216+ 69A4                              New_Def EXIT, "EXIT", is_code, is_normal
1216+ 69A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1216+ 69A4             >
1216+ 69A4             >                // dummy db directives used to calculate length of namec
1216+ 69A4 45 58 49 54 >                db      "EXIT"
1216+ 69A8             >len_NFA         defl    $ - temp_NFA
1216+ 69A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1216+ 69A4             >
1216+ 69A4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1216+ 69A5 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1216+ 69A9             >                org     $-1                 // alter last byte of Name just above to set
1216+ 69A8 D4          >                db      {b $} | END_BIT     // msb as name end
1216+ 69A9             >
1216+ 69A9 96 69       >                dw      last_NFA            // Link to previous definition Name
1216+ 69AB             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1216+ 69AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1216+ 69AB             >                else
1216+ 69AB AD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1216+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1216+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1216+ 69AD             >
1216+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1217+ 69AD                              ldhlrp                      // Get Return Stack Pointer
1217+ 69AD 2A 96 63    >                ld      hl,(RP_Pointer)
1218+ 69B0 4E                           ld      c, (hl)             // pop Instruction Pointer
1219+ 69B1 23                           inc     hl                  // from Return Stack
1220+ 69B2 46                           ld      b, (hl)
1221+ 69B3 23                           inc     hl
1222+ 69B4                              ldrphl                      // Set Return Stack Pointer
1222+ 69B4 22 96 63    >                ld      (RP_Pointer),hl
1223+ 69B7                              next
1223+ 69B7 DD E9       >                jp      (ix)
1224+ 69B9
1225+ 69B9              //  ______________________________________________________________________
1226+ 69B9              //
1227+ 69B9              // lastl      --
1228+ 69B9              // exits back to the caller word
1229+ 69B9              //              New_Def EXIT, "LASTL", is_code, is_normal
1230+ 69B9              //              ldhlrp                      // Get Return Stack Pointer
1231+ 69B9              //              ld      e, (hl)             // pop Instruction Pointer
1232+ 69B9              //              inc     hl                  // from Return Stack
1233+ 69B9              //              ld      d, (hl)
1234+ 69B9              //              inc     hl
1235+ 69B9              //              ld      (hl), e
1236+ 69B9              //              inc     hl
1237+ 69B9              //              ld      (hl), d
1238+ 69B9              //              next
1239+ 69B9
1240+ 69B9              //  ______________________________________________________________________
1241+ 69B9              //
1242+ 69B9              // >r      n --
1243+ 69B9              // pop from calculator-stack and push into return-stack
1244+ 69B9                              New_Def TO_R, ">R", is_code, is_normal
1244+ 69B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 69B9             >
1244+ 69B9             >                // dummy db directives used to calculate length of namec
1244+ 69B9 3E 52       >                db      ">R"
1244+ 69BB             >len_NFA         defl    $ - temp_NFA
1244+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 69B9             >
1244+ 69B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 69BA 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1244+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1244+ 69BB D2          >                db      {b $} | END_BIT     // msb as name end
1244+ 69BC             >
1244+ 69BC A4 69       >                dw      last_NFA            // Link to previous definition Name
1244+ 69BE             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 69BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1244+ 69BE             >                else
1244+ 69BE C0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1244+ 69C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 69C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 69C0             >
1244+ 69C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 69C0 D1                           pop     de
1246+ 69C1                              ldhlrp
1246+ 69C1 2A 96 63    >                ld      hl,(RP_Pointer)
1247+ 69C4 2B                           dec     hl
1248+ 69C5 72                           ld      (hl), d             // store current TOS
1249+ 69C6 2B                           dec     hl                  // to Return Stack
1250+ 69C7 73                           ld      (hl), e
1251+ 69C8                              ldrphl
1251+ 69C8 22 96 63    >                ld      (RP_Pointer),hl
1252+ 69CB
1253+ 69CB                              next
1253+ 69CB DD E9       >                jp      (ix)
1254+ 69CD
1255+ 69CD              //  ______________________________________________________________________
1256+ 69CD              //
1257+ 69CD              // r>      -- n
1258+ 69CD              // pop from return-stack and push into calculator-stack
1259+ 69CD                              New_Def R_TO, "R>", is_code, is_normal
1259+ 69CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 69CD             >
1259+ 69CD             >                // dummy db directives used to calculate length of namec
1259+ 69CD 52 3E       >                db      "R>"
1259+ 69CF             >len_NFA         defl    $ - temp_NFA
1259+ 69CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 69CD             >
1259+ 69CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 69CE 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1259+ 69D0             >                org     $-1                 // alter last byte of Name just above to set
1259+ 69CF BE          >                db      {b $} | END_BIT     // msb as name end
1259+ 69D0             >
1259+ 69D0 B9 69       >                dw      last_NFA            // Link to previous definition Name
1259+ 69D2             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 69D2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1259+ 69D2             >                else
1259+ 69D2 D4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1259+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 69D4             >
1259+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 69D4
1261+ 69D4                              ldhlrp
1261+ 69D4 2A 96 63    >                ld      hl,(RP_Pointer)
1262+ 69D7 5E                           ld      e, (hl)             // retrieve from Return Stack
1263+ 69D8 23                           inc     hl
1264+ 69D9 56                           ld      d, (hl)
1265+ 69DA 23                           inc     hl
1266+ 69DB                              ldrphl
1266+ 69DB 22 96 63    >                ld      (RP_Pointer),hl
1267+ 69DE D5                           push    de
1268+ 69DF                              next
1268+ 69DF DD E9       >                jp      (ix)
1269+ 69E1
1270+ 69E1              //  ______________________________________________________________________
1271+ 69E1              //
1272+ 69E1              // r@            -- n
1273+ 69E1              // return on top of stack the value of top of return-stack
1274+ 69E1              // Since this is the same as I, we alter R's CFA to jump there
1275+ 69E1                              New_Def R_OP, "R@", I_Ptr, is_normal
1275+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1275+ 69E1             >
1275+ 69E1             >                // dummy db directives used to calculate length of namec
1275+ 69E1 52 40       >                db      "R@"
1275+ 69E3             >len_NFA         defl    $ - temp_NFA
1275+ 69E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1275+ 69E1             >
1275+ 69E1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1275+ 69E2 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1275+ 69E4             >                org     $-1                 // alter last byte of Name just above to set
1275+ 69E3 C0          >                db      {b $} | END_BIT     // msb as name end
1275+ 69E4             >
1275+ 69E4 CD 69       >                dw      last_NFA            // Link to previous definition Name
1275+ 69E6             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1275+ 69E6 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1275+ 69E8             >                else
1275+ 69E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1275+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1275+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1275+ 69E8             >
1275+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1276+ 69E8
1277+ 69E8              //  ______________________________________________________________________
1278+ 69E8              //
1279+ 69E8              // r            -- n
1280+ 69E8              // return on top of stack the value of top of return-stack
1281+ 69E8              // Since this is the same as I, we alter R's CFA to jump there
1282+ 69E8              //              New_Def R_OLD, "R", I_Ptr, is_normal
1283+ 69E8
1284+ 69E8              //  ______________________________________________________________________
1285+ 69E8              //
1286+ 69E8              // 0=           n -- f
1287+ 69E8              // true (non zero) if n is zero, false (0) elsewere
1288+ 69E8                              New_Def ZEQUAL, "0=", is_code, is_normal
1288+ 69E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1288+ 69E8             >
1288+ 69E8             >                // dummy db directives used to calculate length of namec
1288+ 69E8 30 3D       >                db      "0="
1288+ 69EA             >len_NFA         defl    $ - temp_NFA
1288+ 69EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1288+ 69E8             >
1288+ 69E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1288+ 69E9 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1288+ 69EB             >                org     $-1                 // alter last byte of Name just above to set
1288+ 69EA BD          >                db      {b $} | END_BIT     // msb as name end
1288+ 69EB             >
1288+ 69EB E1 69       >                dw      last_NFA            // Link to previous definition Name
1288+ 69ED             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1288+ 69ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1288+ 69ED             >                else
1288+ 69ED EF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1288+ 69EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1288+ 69EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1288+ 69EF             >
1288+ 69EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1289+ 69EF              Zero_Equal:
1290+ 69EF E1                           pop     hl
1291+ 69F0 7D                           ld      a, l
1292+ 69F1 B4                           or      h
1293+ 69F2 21 00 00                     ld      hl, FALSE_FLAG
1294+ 69F5 20 01                        jr      nz, ZEqual_Skip
1295+ 69F7 2B                               dec     hl
1296+ 69F8              ZEqual_Skip:
1297+ 69F8                              psh1
1297+ 69F8 E5          >                push    hl
1297+ 69F9 DD E9       >                jp      (ix)
1298+ 69FB
1299+ 69FB              //  ______________________________________________________________________
1300+ 69FB              //
1301+ 69FB              // not         a1 -- a2
1302+ 69FB              // increment by 2 top of stack
1303+ 69FB                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1303+ 69FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 69FB             >
1303+ 69FB             >                // dummy db directives used to calculate length of namec
1303+ 69FB 4E 4F 54    >                db      "NOT"
1303+ 69FE             >len_NFA         defl    $ - temp_NFA
1303+ 69FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 69FB             >
1303+ 69FB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 69FC 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1303+ 69FF             >                org     $-1                 // alter last byte of Name just above to set
1303+ 69FE D4          >                db      {b $} | END_BIT     // msb as name end
1303+ 69FF             >
1303+ 69FF E8 69       >                dw      last_NFA            // Link to previous definition Name
1303+ 6A01             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 6A01 EF 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1303+ 6A03             >                else
1303+ 6A03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1303+ 6A03             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 6A03             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 6A03             >
1303+ 6A03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 6A03
1305+ 6A03              //  ______________________________________________________________________
1306+ 6A03              //
1307+ 6A03              // 0<           n -- f
1308+ 6A03              // true (non zero) if n is less than zero, false (0) elsewere
1309+ 6A03                              New_Def ZLESS, "0<", is_code, is_normal
1309+ 6A03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ 6A03             >
1309+ 6A03             >                // dummy db directives used to calculate length of namec
1309+ 6A03 30 3C       >                db      "0<"
1309+ 6A05             >len_NFA         defl    $ - temp_NFA
1309+ 6A05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ 6A03             >
1309+ 6A03 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ 6A04 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1309+ 6A06             >                org     $-1                 // alter last byte of Name just above to set
1309+ 6A05 BC          >                db      {b $} | END_BIT     // msb as name end
1309+ 6A06             >
1309+ 6A06 FB 69       >                dw      last_NFA            // Link to previous definition Name
1309+ 6A08             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 6A08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1309+ 6A08             >                else
1309+ 6A08 0A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1309+ 6A0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 6A0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 6A0A             >
1309+ 6A0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 6A0A E1                           pop     hl
1311+ 6A0B 29                           add     hl, hl
1312+ 6A0C ED 62                        sbc     hl, hl
1313+ 6A0E                              psh1
1313+ 6A0E E5          >                push    hl
1313+ 6A0F DD E9       >                jp      (ix)
1314+ 6A11
1315+ 6A11              //  ______________________________________________________________________
1316+ 6A11              //
1317+ 6A11              // 0>           n -- f
1318+ 6A11              // true (non zero) if n is less than zero, false (0) elsewere
1319+ 6A11                              New_Def ZGREATER, "0>", is_code, is_normal
1319+ 6A11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ 6A11             >
1319+ 6A11             >                // dummy db directives used to calculate length of namec
1319+ 6A11 30 3E       >                db      "0>"
1319+ 6A13             >len_NFA         defl    $ - temp_NFA
1319+ 6A13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ 6A11             >
1319+ 6A11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ 6A12 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1319+ 6A14             >                org     $-1                 // alter last byte of Name just above to set
1319+ 6A13 BE          >                db      {b $} | END_BIT     // msb as name end
1319+ 6A14             >
1319+ 6A14 03 6A       >                dw      last_NFA            // Link to previous definition Name
1319+ 6A16             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 6A16 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1319+ 6A16             >                else
1319+ 6A16 18 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1319+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 6A18             >
1319+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 6A18 E1                           pop     hl
1321+ 6A19 7D                           ld      a, l
1322+ 6A1A B4                           or      h
1323+ 6A1B 29                           add     hl, hl
1324+ 6A1C 21 00 00                     ld      hl, FALSE_FLAG
1325+ 6A1F 38 04                        jr      c, ZGreater_Skip
1326+ 6A21 A7                               and     a
1327+ 6A22 28 01                            jr      z, ZGreater_Skip
1328+ 6A24 2B                                   dec     hl
1329+ 6A25              ZGreater_Skip:
1330+ 6A25                              psh1
1330+ 6A25 E5          >                push    hl
1330+ 6A26 DD E9       >                jp      (ix)
1331+ 6A28
1332+ 6A28              //  ______________________________________________________________________
1333+ 6A28              //
1334+ 6A28              // +            n1 n2 -- n3
1335+ 6A28              // returns the unsigned sum of two top values
1336+ 6A28                              New_Def PLUS, "+", is_code, is_normal
1336+ 6A28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ 6A28             >
1336+ 6A28             >                // dummy db directives used to calculate length of namec
1336+ 6A28 2B          >                db      "+"
1336+ 6A29             >len_NFA         defl    $ - temp_NFA
1336+ 6A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ 6A28             >
1336+ 6A28 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ 6A29 2B          >                db      "+"               // name string in 7-bit ascii, but
1336+ 6A2A             >                org     $-1                 // alter last byte of Name just above to set
1336+ 6A29 AB          >                db      {b $} | END_BIT     // msb as name end
1336+ 6A2A             >
1336+ 6A2A 11 6A       >                dw      last_NFA            // Link to previous definition Name
1336+ 6A2C             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 6A2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1336+ 6A2C             >                else
1336+ 6A2C 2E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1336+ 6A2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 6A2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 6A2E             >
1336+ 6A2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 6A2E E1                           pop     hl
1338+ 6A2F D1                           pop     de
1339+ 6A30 19                           add     hl, de
1340+ 6A31
1341+ 6A31                              psh1
1341+ 6A31 E5          >                push    hl
1341+ 6A32 DD E9       >                jp      (ix)
1342+ 6A34
1343+ 6A34
1344+ 6A34              //  ______________________________________________________________________
1345+ 6A34              //
1346+ 6A34              // d+           d1 d2 -- d3
1347+ 6A34              // returns the unsigned sum of two top double-numbers
1348+ 6A34              //      d2  d1
1349+ 6A34              //      h l h l
1350+ 6A34              // SP   LHEDLHED
1351+ 6A34              // SP  +01234567
1352+ 6A34                              New_Def DPLUS, "D+", is_code, is_normal
1352+ 6A34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1352+ 6A34             >
1352+ 6A34             >                // dummy db directives used to calculate length of namec
1352+ 6A34 44 2B       >                db      "D+"
1352+ 6A36             >len_NFA         defl    $ - temp_NFA
1352+ 6A36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1352+ 6A34             >
1352+ 6A34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1352+ 6A35 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1352+ 6A37             >                org     $-1                 // alter last byte of Name just above to set
1352+ 6A36 AB          >                db      {b $} | END_BIT     // msb as name end
1352+ 6A37             >
1352+ 6A37 28 6A       >                dw      last_NFA            // Link to previous definition Name
1352+ 6A39             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1352+ 6A39 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1352+ 6A39             >                else
1352+ 6A39 3B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1352+ 6A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1352+ 6A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1352+ 6A3B             >
1352+ 6A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1353+ 6A3B
1354+ 6A3B D9                           exx
1355+ 6A3C C1                           pop     bc                  // bc := d2.H
1356+ 6A3D D1                           pop     de                  // hl := d2.L
1357+ 6A3E E1                           pop     hl                  // d1.H
1358+ 6A3F E3                           ex      (sp), hl            // d1.L
1359+ 6A40 19                           add     hl, de              // hl := d2.L + d1.L
1360+ 6A41 E3                           ex      (sp), hl            // d1.H
1361+ 6A42 ED 4A                        adc     hl, bc              // d1.H + d2.H
1362+ 6A44 E5                           push    hl
1363+ 6A45 D9                           exx
1364+ 6A46                              next
1364+ 6A46 DD E9       >                jp      (ix)
1365+ 6A48
1366+ 6A48              //  ______________________________________________________________________
1367+ 6A48              //
1368+ 6A48              // 1+           n1 -- n2
1369+ 6A48              // increment by 1 top of stack
1370+ 6A48                              New_Def ONE_PLUS, "1+", is_code, is_normal
1370+ 6A48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1370+ 6A48             >
1370+ 6A48             >                // dummy db directives used to calculate length of namec
1370+ 6A48 31 2B       >                db      "1+"
1370+ 6A4A             >len_NFA         defl    $ - temp_NFA
1370+ 6A4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1370+ 6A48             >
1370+ 6A48 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1370+ 6A49 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1370+ 6A4B             >                org     $-1                 // alter last byte of Name just above to set
1370+ 6A4A AB          >                db      {b $} | END_BIT     // msb as name end
1370+ 6A4B             >
1370+ 6A4B 34 6A       >                dw      last_NFA            // Link to previous definition Name
1370+ 6A4D             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1370+ 6A4D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1370+ 6A4D             >                else
1370+ 6A4D 4F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1370+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1370+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1370+ 6A4F             >
1370+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1371+ 6A4F E1                           pop     hl
1372+ 6A50 23                           inc     hl
1373+ 6A51
1374+ 6A51                              psh1
1374+ 6A51 E5          >                push    hl
1374+ 6A52 DD E9       >                jp      (ix)
1375+ 6A54
1376+ 6A54              //  ______________________________________________________________________
1377+ 6A54              //
1378+ 6A54              // 1-           n1 -- n2
1379+ 6A54              // decrement by 1 top of stack
1380+ 6A54                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1380+ 6A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ 6A54             >
1380+ 6A54             >                // dummy db directives used to calculate length of namec
1380+ 6A54 31 2D       >                db      "1-"
1380+ 6A56             >len_NFA         defl    $ - temp_NFA
1380+ 6A56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ 6A54             >
1380+ 6A54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ 6A55 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1380+ 6A57             >                org     $-1                 // alter last byte of Name just above to set
1380+ 6A56 AD          >                db      {b $} | END_BIT     // msb as name end
1380+ 6A57             >
1380+ 6A57 48 6A       >                dw      last_NFA            // Link to previous definition Name
1380+ 6A59             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 6A59 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1380+ 6A59             >                else
1380+ 6A59 5B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1380+ 6A5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 6A5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 6A5B             >
1380+ 6A5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 6A5B E1                           pop     hl
1382+ 6A5C 2B                           dec     hl
1383+ 6A5D
1384+ 6A5D                              psh1
1384+ 6A5D E5          >                push    hl
1384+ 6A5E DD E9       >                jp      (ix)
1385+ 6A60
1386+ 6A60              //  ______________________________________________________________________
1387+ 6A60              //
1388+ 6A60              // 2+           n1 -- n2
1389+ 6A60              // increment by 2 top of stack
1390+ 6A60                              New_Def TWO_PLUS, "2+", is_code, is_normal
1390+ 6A60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1390+ 6A60             >
1390+ 6A60             >                // dummy db directives used to calculate length of namec
1390+ 6A60 32 2B       >                db      "2+"
1390+ 6A62             >len_NFA         defl    $ - temp_NFA
1390+ 6A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1390+ 6A60             >
1390+ 6A60 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1390+ 6A61 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1390+ 6A63             >                org     $-1                 // alter last byte of Name just above to set
1390+ 6A62 AB          >                db      {b $} | END_BIT     // msb as name end
1390+ 6A63             >
1390+ 6A63 54 6A       >                dw      last_NFA            // Link to previous definition Name
1390+ 6A65             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1390+ 6A65 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1390+ 6A65             >                else
1390+ 6A65 67 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1390+ 6A67             >                endif           ; ok        // for other definitions it "points" the correct handler
1390+ 6A67             >                // Use of "; ok" to suppress "warning[fwdref]"
1390+ 6A67             >
1390+ 6A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1391+ 6A67              Two_Plus:
1392+ 6A67 E1                           pop     hl
1393+ 6A68 23                           inc     hl
1394+ 6A69 23                           inc     hl
1395+ 6A6A
1396+ 6A6A                              psh1
1396+ 6A6A E5          >                push    hl
1396+ 6A6B DD E9       >                jp      (ix)
1397+ 6A6D
1398+ 6A6D              //  ______________________________________________________________________
1399+ 6A6D              //
1400+ 6A6D              // cell+        a1 -- a2
1401+ 6A6D              // increment by 2 top of stack
1402+ 6A6D                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1402+ 6A6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1402+ 6A6D             >
1402+ 6A6D             >                // dummy db directives used to calculate length of namec
1402+ 6A6D 43 45 4C 4C >                db      "CELL+"
1402+ 6A71 2B          >
1402+ 6A72             >len_NFA         defl    $ - temp_NFA
1402+ 6A72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1402+ 6A6D             >
1402+ 6A6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1402+ 6A6E 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1402+ 6A72 2B          >
1402+ 6A73             >                org     $-1                 // alter last byte of Name just above to set
1402+ 6A72 AB          >                db      {b $} | END_BIT     // msb as name end
1402+ 6A73             >
1402+ 6A73 60 6A       >                dw      last_NFA            // Link to previous definition Name
1402+ 6A75             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1402+ 6A75 67 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1402+ 6A77             >                else
1402+ 6A77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1402+ 6A77             >                endif           ; ok        // for other definitions it "points" the correct handler
1402+ 6A77             >                // Use of "; ok" to suppress "warning[fwdref]"
1402+ 6A77             >
1402+ 6A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1403+ 6A77
1404+ 6A77              //  ______________________________________________________________________
1405+ 6A77              //
1406+ 6A77              // align        a1 -- a2
1407+ 6A77              // align memory : not used
1408+ 6A77              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1409+ 6A77              //            next
1410+ 6A77
1411+ 6A77              //  ______________________________________________________________________
1412+ 6A77              //
1413+ 6A77              // cell-        a1 -- a2
1414+ 6A77              // decrement by 2 top of stack
1415+ 6A77                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1415+ 6A77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1415+ 6A77             >
1415+ 6A77             >                // dummy db directives used to calculate length of namec
1415+ 6A77 43 45 4C 4C >                db      "CELL-"
1415+ 6A7B 2D          >
1415+ 6A7C             >len_NFA         defl    $ - temp_NFA
1415+ 6A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1415+ 6A77             >
1415+ 6A77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1415+ 6A78 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1415+ 6A7C 2D          >
1415+ 6A7D             >                org     $-1                 // alter last byte of Name just above to set
1415+ 6A7C AD          >                db      {b $} | END_BIT     // msb as name end
1415+ 6A7D             >
1415+ 6A7D 6D 6A       >                dw      last_NFA            // Link to previous definition Name
1415+ 6A7F             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1415+ 6A7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1415+ 6A7F             >                else
1415+ 6A7F 81 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1415+ 6A81             >                endif           ; ok        // for other definitions it "points" the correct handler
1415+ 6A81             >                // Use of "; ok" to suppress "warning[fwdref]"
1415+ 6A81             >
1415+ 6A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1416+ 6A81              CellMinus:
1417+ 6A81 E1                           pop     hl
1418+ 6A82 2B                           dec     hl
1419+ 6A83 2B                           dec     hl
1420+ 6A84 E5                           push    hl
1421+ 6A85                              next
1421+ 6A85 DD E9       >                jp      (ix)
1422+ 6A87
1423+ 6A87              //  ______________________________________________________________________
1424+ 6A87              //
1425+ 6A87              // 2-           a1 -- a2
1426+ 6A87              // decrement by 2 top of stack
1427+ 6A87                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1427+ 6A87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1427+ 6A87             >
1427+ 6A87             >                // dummy db directives used to calculate length of namec
1427+ 6A87 32 2D       >                db      "2-"
1427+ 6A89             >len_NFA         defl    $ - temp_NFA
1427+ 6A89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1427+ 6A87             >
1427+ 6A87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1427+ 6A88 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1427+ 6A8A             >                org     $-1                 // alter last byte of Name just above to set
1427+ 6A89 AD          >                db      {b $} | END_BIT     // msb as name end
1427+ 6A8A             >
1427+ 6A8A 77 6A       >                dw      last_NFA            // Link to previous definition Name
1427+ 6A8C             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1427+ 6A8C 81 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1427+ 6A8E             >                else
1427+ 6A8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1427+ 6A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1427+ 6A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1427+ 6A8E             >
1427+ 6A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1428+ 6A8E
1429+ 6A8E              //  ______________________________________________________________________
1430+ 6A8E              //
1431+ 6A8E              // negate        n1 -- n2
1432+ 6A8E              // change the sign of number
1433+ 6A8E                              New_Def MINUS, "NEGATE", is_code, is_normal
1433+ 6A8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1433+ 6A8E             >
1433+ 6A8E             >                // dummy db directives used to calculate length of namec
1433+ 6A8E 4E 45 47 41 >                db      "NEGATE"
1433+ 6A92 54 45       >
1433+ 6A94             >len_NFA         defl    $ - temp_NFA
1433+ 6A94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1433+ 6A8E             >
1433+ 6A8E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1433+ 6A8F 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1433+ 6A93 54 45       >
1433+ 6A95             >                org     $-1                 // alter last byte of Name just above to set
1433+ 6A94 C5          >                db      {b $} | END_BIT     // msb as name end
1433+ 6A95             >
1433+ 6A95 87 6A       >                dw      last_NFA            // Link to previous definition Name
1433+ 6A97             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1433+ 6A97 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1433+ 6A97             >                else
1433+ 6A97 99 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1433+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
1433+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
1433+ 6A99             >
1433+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1434+ 6A99 21 00 00                     ld      hl, 0               // subtract from 0
1435+ 6A9C D1                           pop     de
1436+ 6A9D B7                           or      a
1437+ 6A9E ED 52                        sbc     hl, de
1438+ 6AA0
1439+ 6AA0                              psh1
1439+ 6AA0 E5          >                push    hl
1439+ 6AA1 DD E9       >                jp      (ix)
1440+ 6AA3
1441+ 6AA3              //  ______________________________________________________________________
1442+ 6AA3              //
1443+ 6AA3              // dnegate      d1 -- d2
1444+ 6AA3              // change the sign of a double number
1445+ 6AA3                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1445+ 6AA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1445+ 6AA3             >
1445+ 6AA3             >                // dummy db directives used to calculate length of namec
1445+ 6AA3 44 4E 45 47 >                db      "DNEGATE"
1445+ 6AA7 41 54 45    >
1445+ 6AAA             >len_NFA         defl    $ - temp_NFA
1445+ 6AAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1445+ 6AA3             >
1445+ 6AA3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1445+ 6AA4 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1445+ 6AA8 41 54 45    >
1445+ 6AAB             >                org     $-1                 // alter last byte of Name just above to set
1445+ 6AAA C5          >                db      {b $} | END_BIT     // msb as name end
1445+ 6AAB             >
1445+ 6AAB 8E 6A       >                dw      last_NFA            // Link to previous definition Name
1445+ 6AAD             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1445+ 6AAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1445+ 6AAD             >                else
1445+ 6AAD AF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1445+ 6AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1445+ 6AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1445+ 6AAF             >
1445+ 6AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1446+ 6AAF D9                           exx
1447+ 6AB0 C1                           pop     bc                  // d1.H
1448+ 6AB1 D1                           pop     de                  // d1.L
1449+ 6AB2 AF                           xor     a
1450+ 6AB3 67                           ld      h, a
1451+ 6AB4 6F                           ld      l, a
1452+ 6AB5 ED 52                        sbc     hl, de              // subtact from zero
1453+ 6AB7 E5                           push    hl                  // > d2-L
1454+ 6AB8 67                           ld      h, a
1455+ 6AB9 6F                           ld      l, a
1456+ 6ABA ED 42                        sbc     hl, bc              // subtract from zero with carry
1457+ 6ABC                                                          // > d2-H
1458+ 6ABC E5                           push    hl
1459+ 6ABD D9                           exx
1460+ 6ABE                              next
1460+ 6ABE DD E9       >                jp      (ix)
1461+ 6AC0
1462+ 6AC0              //  ______________________________________________________________________
1463+ 6AC0              //
1464+ 6AC0              // over         n1 n2 -- n1 n2 n1
1465+ 6AC0              // copy the second value of stack and put it on top.
1466+ 6AC0                              New_Def OVER, "OVER", is_code, is_normal
1466+ 6AC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1466+ 6AC0             >
1466+ 6AC0             >                // dummy db directives used to calculate length of namec
1466+ 6AC0 4F 56 45 52 >                db      "OVER"
1466+ 6AC4             >len_NFA         defl    $ - temp_NFA
1466+ 6AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1466+ 6AC0             >
1466+ 6AC0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1466+ 6AC1 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1466+ 6AC5             >                org     $-1                 // alter last byte of Name just above to set
1466+ 6AC4 D2          >                db      {b $} | END_BIT     // msb as name end
1466+ 6AC5             >
1466+ 6AC5 A3 6A       >                dw      last_NFA            // Link to previous definition Name
1466+ 6AC7             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1466+ 6AC7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1466+ 6AC7             >                else
1466+ 6AC7 C9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1466+ 6AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
1466+ 6AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
1466+ 6AC9             >
1466+ 6AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1467+ 6AC9 F1                           pop     af                  //   n2
1468+ 6ACA E1                           pop     hl                  // < n1
1469+ 6ACB E5                           push    hl                  // > n1
1470+ 6ACC F5                           push    af                  // > n2
1471+ 6ACD E5                           push    hl                  // > n1
1472+ 6ACE                              next
1472+ 6ACE DD E9       >                jp      (ix)
1473+ 6AD0
1474+ 6AD0              //  ______________________________________________________________________
1475+ 6AD0              //
1476+ 6AD0              // drop         n1 --
1477+ 6AD0              // drops the top of stack
1478+ 6AD0                              New_Def DROP, "DROP", is_code, is_normal
1478+ 6AD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1478+ 6AD0             >
1478+ 6AD0             >                // dummy db directives used to calculate length of namec
1478+ 6AD0 44 52 4F 50 >                db      "DROP"
1478+ 6AD4             >len_NFA         defl    $ - temp_NFA
1478+ 6AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1478+ 6AD0             >
1478+ 6AD0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1478+ 6AD1 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1478+ 6AD5             >                org     $-1                 // alter last byte of Name just above to set
1478+ 6AD4 D0          >                db      {b $} | END_BIT     // msb as name end
1478+ 6AD5             >
1478+ 6AD5 C0 6A       >                dw      last_NFA            // Link to previous definition Name
1478+ 6AD7             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1478+ 6AD7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1478+ 6AD7             >                else
1478+ 6AD7 D9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1478+ 6AD9             >                endif           ; ok        // for other definitions it "points" the correct handler
1478+ 6AD9             >                // Use of "; ok" to suppress "warning[fwdref]"
1478+ 6AD9             >
1478+ 6AD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1479+ 6AD9 E1                           pop     hl                  // < n1 and discard previous TOS
1480+ 6ADA                              next
1480+ 6ADA DD E9       >                jp      (ix)
1481+ 6ADC
1482+ 6ADC              //  ______________________________________________________________________
1483+ 6ADC              //
1484+ 6ADC              // nip          n1 n2 -- n2
1485+ 6ADC              // drops the second elemento on the stack
1486+ 6ADC                              New_Def NIP, "NIP", is_code, is_normal
1486+ 6ADC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1486+ 6ADC             >
1486+ 6ADC             >                // dummy db directives used to calculate length of namec
1486+ 6ADC 4E 49 50    >                db      "NIP"
1486+ 6ADF             >len_NFA         defl    $ - temp_NFA
1486+ 6ADF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1486+ 6ADC             >
1486+ 6ADC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1486+ 6ADD 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1486+ 6AE0             >                org     $-1                 // alter last byte of Name just above to set
1486+ 6ADF D0          >                db      {b $} | END_BIT     // msb as name end
1486+ 6AE0             >
1486+ 6AE0 D0 6A       >                dw      last_NFA            // Link to previous definition Name
1486+ 6AE2             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1486+ 6AE2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1486+ 6AE2             >                else
1486+ 6AE2 E4 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1486+ 6AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
1486+ 6AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
1486+ 6AE4             >
1486+ 6AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1487+ 6AE4
1488+ 6AE4 E1                           pop     hl                  // < n1 discarded
1489+ 6AE5 E3                           ex      (sp), hl
1490+ 6AE6                              next
1490+ 6AE6 DD E9       >                jp      (ix)
1491+ 6AE8
1492+ 6AE8              //  ______________________________________________________________________
1493+ 6AE8              //
1494+ 6AE8              // tuck         n1 n2 -- n2 n1 n2
1495+ 6AE8              // copy the top element after the second.
1496+ 6AE8                              New_Def TUCK, "TUCK", is_code, is_normal
1496+ 6AE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6AE8             >
1496+ 6AE8             >                // dummy db directives used to calculate length of namec
1496+ 6AE8 54 55 43 4B >                db      "TUCK"
1496+ 6AEC             >len_NFA         defl    $ - temp_NFA
1496+ 6AEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6AE8             >
1496+ 6AE8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6AE9 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1496+ 6AED             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6AEC CB          >                db      {b $} | END_BIT     // msb as name end
1496+ 6AED             >
1496+ 6AED DC 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6AEF             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6AEF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1496+ 6AEF             >                else
1496+ 6AEF F1 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1496+ 6AF1             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6AF1             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6AF1             >
1496+ 6AF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6AF1 E1                           pop     hl
1498+ 6AF2 F1                           pop     af                  // < n1
1499+ 6AF3 E5                           push    hl                  // > n2  and TOS
1500+ 6AF4 F5                           push    af                  // > n1
1501+ 6AF5 E5                           push    hl
1502+ 6AF6                              next
1502+ 6AF6 DD E9       >                jp      (ix)
1503+ 6AF8
1504+ 6AF8              //  ______________________________________________________________________
1505+ 6AF8              //
1506+ 6AF8              // swap         n1 n2 -- n2 n1
1507+ 6AF8              // swaps the two values on top of stack
1508+ 6AF8                              New_Def SWAP, "SWAP", is_code, is_normal
1508+ 6AF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1508+ 6AF8             >
1508+ 6AF8             >                // dummy db directives used to calculate length of namec
1508+ 6AF8 53 57 41 50 >                db      "SWAP"
1508+ 6AFC             >len_NFA         defl    $ - temp_NFA
1508+ 6AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1508+ 6AF8             >
1508+ 6AF8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1508+ 6AF9 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1508+ 6AFD             >                org     $-1                 // alter last byte of Name just above to set
1508+ 6AFC D0          >                db      {b $} | END_BIT     // msb as name end
1508+ 6AFD             >
1508+ 6AFD E8 6A       >                dw      last_NFA            // Link to previous definition Name
1508+ 6AFF             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1508+ 6AFF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1508+ 6AFF             >                else
1508+ 6AFF 01 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1508+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
1508+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
1508+ 6B01             >
1508+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1509+ 6B01 E1                           pop     hl                  // < n1
1510+ 6B02 E3                           ex      (sp),hl             // > n2
1511+ 6B03 E5                           push    hl                  // copy n1 to TOS
1512+ 6B04                              next
1512+ 6B04 DD E9       >                jp      (ix)
1513+ 6B06
1514+ 6B06              //  ______________________________________________________________________
1515+ 6B06              //
1516+ 6B06              // dup         n -- n n
1517+ 6B06              // duplicates the top value of stack
1518+ 6B06                              New_Def DUP, "DUP", is_code, is_normal
1518+ 6B06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ 6B06             >
1518+ 6B06             >                // dummy db directives used to calculate length of namec
1518+ 6B06 44 55 50    >                db      "DUP"
1518+ 6B09             >len_NFA         defl    $ - temp_NFA
1518+ 6B09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ 6B06             >
1518+ 6B06 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ 6B07 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1518+ 6B0A             >                org     $-1                 // alter last byte of Name just above to set
1518+ 6B09 D0          >                db      {b $} | END_BIT     // msb as name end
1518+ 6B0A             >
1518+ 6B0A F8 6A       >                dw      last_NFA            // Link to previous definition Name
1518+ 6B0C             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 6B0C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1518+ 6B0C             >                else
1518+ 6B0C 0E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1518+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 6B0E             >
1518+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 6B0E E1                           pop     hl
1520+ 6B0F E5                           push    hl                  // > n duplicate TOS
1521+ 6B10 E5                           push    hl
1522+ 6B11                              next
1522+ 6B11 DD E9       >                jp      (ix)
1523+ 6B13
1524+ 6B13              //  ______________________________________________________________________
1525+ 6B13              //
1526+ 6B13              // rot         n1 n2 n3 -- n2 n3 n1
1527+ 6B13              // Rotates the 3 top values of stack by picking the 3rd in access-order
1528+ 6B13              // and putting it on top. The other two are shifted down one place.
1529+ 6B13                              New_Def ROT, "ROT", is_code, is_normal
1529+ 6B13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1529+ 6B13             >
1529+ 6B13             >                // dummy db directives used to calculate length of namec
1529+ 6B13 52 4F 54    >                db      "ROT"
1529+ 6B16             >len_NFA         defl    $ - temp_NFA
1529+ 6B16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1529+ 6B13             >
1529+ 6B13 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1529+ 6B14 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1529+ 6B17             >                org     $-1                 // alter last byte of Name just above to set
1529+ 6B16 D4          >                db      {b $} | END_BIT     // msb as name end
1529+ 6B17             >
1529+ 6B17 06 6B       >                dw      last_NFA            // Link to previous definition Name
1529+ 6B19             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1529+ 6B19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1529+ 6B19             >                else
1529+ 6B19 1B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1529+ 6B1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1529+ 6B1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1529+ 6B1B             >
1529+ 6B1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1530+ 6B1B D1                           pop     de                  // < n3
1531+ 6B1C E1                           pop     hl                  // < n2
1532+ 6B1D E3                           ex      (sp),hl             // > n2 < n1
1533+ 6B1E D5                           push    de                  // > n3
1534+ 6B1F E5                           push    hl                  // copy n1 to TOS
1535+ 6B20                              next
1535+ 6B20 DD E9       >                jp      (ix)
1536+ 6B22
1537+ 6B22              //  ______________________________________________________________________
1538+ 6B22              //
1539+ 6B22              // -rot         n1 n2 n3 -- n3 n1 n2
1540+ 6B22              // Rotates the 3 top values of stack by picking the 1st in access-order
1541+ 6B22              // and putting back to 3rd place. The other two are shifted down one place.
1542+ 6B22                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1542+ 6B22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1542+ 6B22             >
1542+ 6B22             >                // dummy db directives used to calculate length of namec
1542+ 6B22 2D 52 4F 54 >                db      "-ROT"
1542+ 6B26             >len_NFA         defl    $ - temp_NFA
1542+ 6B26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1542+ 6B22             >
1542+ 6B22 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1542+ 6B23 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1542+ 6B27             >                org     $-1                 // alter last byte of Name just above to set
1542+ 6B26 D4          >                db      {b $} | END_BIT     // msb as name end
1542+ 6B27             >
1542+ 6B27 13 6B       >                dw      last_NFA            // Link to previous definition Name
1542+ 6B29             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1542+ 6B29 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1542+ 6B29             >                else
1542+ 6B29 2B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1542+ 6B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1542+ 6B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1542+ 6B2B             >
1542+ 6B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1543+ 6B2B E1                           pop     hl                  // < n3
1544+ 6B2C D1                           pop     de                  // < n2
1545+ 6B2D E3                           ex      (sp),hl             // > n3 < n1
1546+ 6B2E E5                           push    hl                  // > n1
1547+ 6B2F D5                           push    de                  // copy n3 to TOS
1548+ 6B30                              next
1548+ 6B30 DD E9       >                jp      (ix)
1549+ 6B32
1550+ 6B32              //  ______________________________________________________________________
1551+ 6B32              //
1552+ 6B32              // pick        n1 -- nx
1553+ 6B32              // picks the nth element from TOS
1554+ 6B32                              New_Def PICK, "PICK", is_code, is_normal
1554+ 6B32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1554+ 6B32             >
1554+ 6B32             >                // dummy db directives used to calculate length of namec
1554+ 6B32 50 49 43 4B >                db      "PICK"
1554+ 6B36             >len_NFA         defl    $ - temp_NFA
1554+ 6B36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1554+ 6B32             >
1554+ 6B32 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1554+ 6B33 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1554+ 6B37             >                org     $-1                 // alter last byte of Name just above to set
1554+ 6B36 CB          >                db      {b $} | END_BIT     // msb as name end
1554+ 6B37             >
1554+ 6B37 22 6B       >                dw      last_NFA            // Link to previous definition Name
1554+ 6B39             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1554+ 6B39 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1554+ 6B39             >                else
1554+ 6B39 3B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1554+ 6B3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1554+ 6B3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1554+ 6B3B             >
1554+ 6B3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1555+ 6B3B E1                           pop     hl                  // take TOS as index
1556+ 6B3C 29                           add     hl, hl              // as cells
1557+ 6B3D 39                           add     hl, sp              // from Stack Pointer
1558+ 6B3E 7E                           ld      a, (hl)             // replace TOS
1559+ 6B3F 23                           inc     hl
1560+ 6B40 66                           ld      h, (hl)
1561+ 6B41 6F                           ld      l, a
1562+ 6B42
1563+ 6B42                              psh1
1563+ 6B42 E5          >                push    hl
1563+ 6B43 DD E9       >                jp      (ix)
1564+ 6B45
1565+ 6B45
1566+ 6B45              //  ______________________________________________________________________
1567+ 6B45              //
1568+ 6B45              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1569+ 6B45              // picks the nth element from TOS
1570+ 6B45              //              New_Def ROLL, "ROLL", is_code, is_normal
1571+ 6B45              //              exx                     // we need all registers free
1572+ 6B45              //              pop     hl              // number of cells to roll
1573+ 6B45              //              ld      a, h
1574+ 6B45              //              or       l
1575+ 6B45              //              jr      z, Roll_Zero
1576+ 6B45              //                  add     hl, hl              // number of bytes to move
1577+ 6B45              //                  ld      b, h
1578+ 6B45              //                  ld      c, l
1579+ 6B45              //                  add     hl, sp          // address of n1
1580+ 6B45              //                  ld      a, (hl)         // take n1 into a and a,
1581+ 6B45              //                  inc     hl
1582+ 6B45              //                  ex      af, af'
1583+ 6B45              //                  ld      a, (hl)         // take n1 into a and a,
1584+ 6B45              //                  ld      d, h
1585+ 6B45              //                  ld      e, l
1586+ 6B45              //                  dec     hl
1587+ 6B45              //                  dec     hl
1588+ 6B45              //                  lddr
1589+ 6B45              //                  ex      de, hl
1590+ 6B45              //                  ld      (hl), a
1591+ 6B45              //                  dec     hl
1592+ 6B45              //                  ex      af, af'
1593+ 6B45              //                  ld      (hl), a
1594+ 6B45              //Roll_Zero:
1595+ 6B45              //              exx
1596+ 6B45              //              next
1597+ 6B45
1598+ 6B45
1599+ 6B45              //  ______________________________________________________________________
1600+ 6B45              //
1601+ 6B45              // 2over        d1 d2 -- d1 d2 d1
1602+ 6B45              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1603+ 6B45              // copy the second double of stack and put on top.
1604+ 6B45              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1605+ 6B45              //
1606+ 6B45              //              ld      hl, 7
1607+ 6B45              //              add     hl, sp
1608+ 6B45              //              ld      d, (hl)
1609+ 6B45              //              dec     hl
1610+ 6B45              //              ld      e, (hl)             // d1-L
1611+ 6B45              //              push    de
1612+ 6B45              //              dec     hl
1613+ 6B45              //              ld      d, (hl)
1614+ 6B45              //              dec     hl
1615+ 6B45              //              ld      e, (hl)             // d1-H
1616+ 6B45              //              push    de
1617+ 6B45              //              next
1618+ 6B45
1619+ 6B45              //  ______________________________________________________________________
1620+ 6B45              //
1621+ 6B45              // 2drop        d --
1622+ 6B45              //              n1 n2 --
1623+ 6B45              // drops the top double from stack
1624+ 6B45                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1624+ 6B45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1624+ 6B45             >
1624+ 6B45             >                // dummy db directives used to calculate length of namec
1624+ 6B45 32 44 52 4F >                db      "2DROP"
1624+ 6B49 50          >
1624+ 6B4A             >len_NFA         defl    $ - temp_NFA
1624+ 6B4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1624+ 6B45             >
1624+ 6B45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1624+ 6B46 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1624+ 6B4A 50          >
1624+ 6B4B             >                org     $-1                 // alter last byte of Name just above to set
1624+ 6B4A D0          >                db      {b $} | END_BIT     // msb as name end
1624+ 6B4B             >
1624+ 6B4B 32 6B       >                dw      last_NFA            // Link to previous definition Name
1624+ 6B4D             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1624+ 6B4D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1624+ 6B4D             >                else
1624+ 6B4D 4F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1624+ 6B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1624+ 6B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1624+ 6B4F             >
1624+ 6B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1625+ 6B4F E1                           pop     hl
1626+ 6B50 E1                           pop     hl
1627+ 6B51                              next
1627+ 6B51 DD E9       >                jp      (ix)
1628+ 6B53
1629+ 6B53              //  ______________________________________________________________________
1630+ 6B53              //
1631+ 6B53              // 2nip         d1 d2 -- d2
1632+ 6B53              //              n1 n2 n3 n4 -- n3 n4
1633+ 6B53              // drops the second double on the stack
1634+ 6B53              //              New_Def TWO_NIP, 4, "2nip"
1635+ 6B53              //              ...
1636+ 6B53
1637+ 6B53              //  ______________________________________________________________________
1638+ 6B53              //
1639+ 6B53              // 2tuck         d1 d2 -- d2 d1 d2
1640+ 6B53              // copy the top element after the second.
1641+ 6B53              //              New_Def TWO_TUCK, 5, "2tuck"
1642+ 6B53              //              ...
1643+ 6B53
1644+ 6B53              //  ______________________________________________________________________
1645+ 6B53              //
1646+ 6B53              // 2swap         d1 d2 -- d2 d1
1647+ 6B53              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1648+ 6B53              // swaps the two doubles on top of stack
1649+ 6B53                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1649+ 6B53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1649+ 6B53             >
1649+ 6B53             >                // dummy db directives used to calculate length of namec
1649+ 6B53 32 53 57 41 >                db      "2SWAP"
1649+ 6B57 50          >
1649+ 6B58             >len_NFA         defl    $ - temp_NFA
1649+ 6B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1649+ 6B53             >
1649+ 6B53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1649+ 6B54 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1649+ 6B58 50          >
1649+ 6B59             >                org     $-1                 // alter last byte of Name just above to set
1649+ 6B58 D0          >                db      {b $} | END_BIT     // msb as name end
1649+ 6B59             >
1649+ 6B59 45 6B       >                dw      last_NFA            // Link to previous definition Name
1649+ 6B5B             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1649+ 6B5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1649+ 6B5B             >                else
1649+ 6B5B 5D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1649+ 6B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
1649+ 6B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
1649+ 6B5D             >
1649+ 6B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1650+ 6B5D F1                           pop     af                  //   d2-H
1651+ 6B5E E1                           pop     hl                  // < d2-L
1652+ 6B5F D1                           pop     de                  // < d1-H
1653+ 6B60 E3                           ex      (sp), hl            // < d1-L > d2-L
1654+ 6B61 F5                           push    af                  // > d2-H
1655+ 6B62 E5                           push    hl                  // > d1-L
1656+ 6B63 D5                           push    de
1657+ 6B64
1658+ 6B64                              next
1658+ 6B64 DD E9       >                jp      (ix)
1659+ 6B66
1660+ 6B66              //  ______________________________________________________________________
1661+ 6B66              //
1662+ 6B66              // 2dup         d -- d d
1663+ 6B66              //              n1 n2 -- n1 n2 n1 n2
1664+ 6B66              // duplicates the top double of stack
1665+ 6B66                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1665+ 6B66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1665+ 6B66             >
1665+ 6B66             >                // dummy db directives used to calculate length of namec
1665+ 6B66 32 44 55 50 >                db      "2DUP"
1665+ 6B6A             >len_NFA         defl    $ - temp_NFA
1665+ 6B6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1665+ 6B66             >
1665+ 6B66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1665+ 6B67 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1665+ 6B6B             >                org     $-1                 // alter last byte of Name just above to set
1665+ 6B6A D0          >                db      {b $} | END_BIT     // msb as name end
1665+ 6B6B             >
1665+ 6B6B 53 6B       >                dw      last_NFA            // Link to previous definition Name
1665+ 6B6D             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1665+ 6B6D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1665+ 6B6D             >                else
1665+ 6B6D 6F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1665+ 6B6F             >                endif           ; ok        // for other definitions it "points" the correct handler
1665+ 6B6F             >                // Use of "; ok" to suppress "warning[fwdref]"
1665+ 6B6F             >
1665+ 6B6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1666+ 6B6F E1                           pop     hl                  // < d-H
1667+ 6B70 F1                           pop     af                  // < d-L
1668+ 6B71 F5                           push    af                  // < d-L
1669+ 6B72 E5                           push    hl                  // > d-H
1670+ 6B73 F5                           push    af                  // > d-L
1671+ 6B74 E5                           push    hl                  // > d-H
1672+ 6B75                              next
1672+ 6B75 DD E9       >                jp      (ix)
1673+ 6B77
1674+ 6B77              //  ______________________________________________________________________
1675+ 6B77              //
1676+ 6B77              // 2rot         d1 d2 d3 -- d2 d3 d1
1677+ 6B77              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1678+ 6B77              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1679+ 6B77              // and putting it on top. The other two are shifted down one place.
1680+ 6B77              //              New_Def TWO?ROT, 4, "2rot"
1681+ 6B77              //              ...
1682+ 6B77              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1683+ 6B77              //
1684+ 6B77              //      d3  |d2  |d1  |
1685+ 6B77              //      h l |h l |h l |
1686+ 6B77              // SP   LHED|LHED|LHED|
1687+ 6B77              // SP  +0123|4567|89ab|
1688+ 6B77              //              ld      hl, $000B
1689+ 6B77              //              add     hl, sp
1690+ 6B77              //              ld      d, (hl)
1691+ 6B77              //              dec     hl
1692+ 6B77              //              ld      e, (hl)
1693+ 6B77              //              dec     hl
1694+ 6B77              //              push    de
1695+ 6B77              //              ld      d, (hl)
1696+ 6B77              //              dec     hl
1697+ 6B77              //              ld      e, (hl)
1698+ 6B77              //              dec     hl
1699+ 6B77              //              push    de
1700+ 6B77
1701+ 6B77              //      d1  |d3  |d2  |d1  |
1702+ 6B77              //      h l |h l |h l |h l |
1703+ 6B77              // SP   LHED|LHED|LHED|LHED|
1704+ 6B77              // SP       +0123|4567|89ab|
1705+ 6B77
1706+ 6B77              //              ld      d, h
1707+ 6B77              //              ld      e, l
1708+ 6B77              //              inc     de
1709+ 6B77              //              inc     de
1710+ 6B77              //              inc     de
1711+ 6B77              //              inc     de
1712+ 6B77              //              push    bc
1713+ 6B77              //              ld      bc, $000C
1714+ 6B77              //              lddr
1715+ 6B77              //              pop     bc
1716+ 6B77              //              pop     de
1717+ 6B77              //              pop     de
1718+ 6B77              //
1719+ 6B77              //              next
1720+ 6B77
1721+ 6B77
1722+ 6B77              //  ______________________________________________________________________
1723+ 6B77              //
1724+ 6B77              // +!           n a --
1725+ 6B77              // Sums to the content of address a the number n.
1726+ 6B77              // It is the same of  a @ n + a !
1727+ 6B77                              New_Def PLUSSTORE, "+!", is_code, is_normal
1727+ 6B77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1727+ 6B77             >
1727+ 6B77             >                // dummy db directives used to calculate length of namec
1727+ 6B77 2B 21       >                db      "+!"
1727+ 6B79             >len_NFA         defl    $ - temp_NFA
1727+ 6B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1727+ 6B77             >
1727+ 6B77 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1727+ 6B78 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1727+ 6B7A             >                org     $-1                 // alter last byte of Name just above to set
1727+ 6B79 A1          >                db      {b $} | END_BIT     // msb as name end
1727+ 6B7A             >
1727+ 6B7A 66 6B       >                dw      last_NFA            // Link to previous definition Name
1727+ 6B7C             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1727+ 6B7C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1727+ 6B7C             >                else
1727+ 6B7C 7E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1727+ 6B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
1727+ 6B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
1727+ 6B7E             >
1727+ 6B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1728+ 6B7E E1                           pop     hl                  // hl is the address
1729+ 6B7F D1                           pop     de                  // de is the number
1730+ 6B80 7E                           ld      a, (hl)
1731+ 6B81 83                           add     e
1732+ 6B82 77                           ld      (hl), a
1733+ 6B83 23                           inc     hl
1734+ 6B84 7E                           ld      a, (hl)
1735+ 6B85 8A                           adc     d
1736+ 6B86 77                           ld      (hl), a
1737+ 6B87
1738+ 6B87                              next
1738+ 6B87 DD E9       >                jp      (ix)
1739+ 6B89
1740+ 6B89              //  ______________________________________________________________________
1741+ 6B89              //
1742+ 6B89              // toggle       a n --
1743+ 6B89              // Complements (xor) the byte at addrress  a  with the model n.
1744+ 6B89                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1744+ 6B89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1744+ 6B89             >
1744+ 6B89             >                // dummy db directives used to calculate length of namec
1744+ 6B89 54 4F 47 47 >                db      "TOGGLE"
1744+ 6B8D 4C 45       >
1744+ 6B8F             >len_NFA         defl    $ - temp_NFA
1744+ 6B8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1744+ 6B89             >
1744+ 6B89 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1744+ 6B8A 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1744+ 6B8E 4C 45       >
1744+ 6B90             >                org     $-1                 // alter last byte of Name just above to set
1744+ 6B8F C5          >                db      {b $} | END_BIT     // msb as name end
1744+ 6B90             >
1744+ 6B90 77 6B       >                dw      last_NFA            // Link to previous definition Name
1744+ 6B92             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1744+ 6B92 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1744+ 6B92             >                else
1744+ 6B92 94 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1744+ 6B94             >                endif           ; ok        // for other definitions it "points" the correct handler
1744+ 6B94             >                // Use of "; ok" to suppress "warning[fwdref]"
1744+ 6B94             >
1744+ 6B94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1745+ 6B94 D1                           pop     de
1746+ 6B95 E1                           pop     hl
1747+ 6B96 7E                           ld      a, (hl)
1748+ 6B97 AB                           xor     e
1749+ 6B98 77                           ld      (hl), a
1750+ 6B99
1751+ 6B99                              next
1751+ 6B99 DD E9       >                jp      (ix)
1752+ 6B9B
1753+ 6B9B              //  ______________________________________________________________________
1754+ 6B9B              //
1755+ 6B9B              // @            a -- n
1756+ 6B9B              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1757+ 6B9B                              New_Def FETCH, "@", is_code, is_normal
1757+ 6B9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6B9B             >
1757+ 6B9B             >                // dummy db directives used to calculate length of namec
1757+ 6B9B 40          >                db      "@"
1757+ 6B9C             >len_NFA         defl    $ - temp_NFA
1757+ 6B9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6B9B             >
1757+ 6B9B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6B9C 40          >                db      "@"               // name string in 7-bit ascii, but
1757+ 6B9D             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6B9C C0          >                db      {b $} | END_BIT     // msb as name end
1757+ 6B9D             >
1757+ 6B9D 89 6B       >                dw      last_NFA            // Link to previous definition Name
1757+ 6B9F             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6B9F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1757+ 6B9F             >                else
1757+ 6B9F A1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1757+ 6BA1             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6BA1             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6BA1             >
1757+ 6BA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6BA1 E1                           pop     hl
1759+ 6BA2 5E                           ld      e, (hl)             // low-byte
1760+ 6BA3 23                           inc     hl
1761+ 6BA4 56                           ld      d, (hl)             // high-byte
1762+ 6BA5 D5                           push    de
1763+ 6BA6                              next
1763+ 6BA6 DD E9       >                jp      (ix)
1764+ 6BA8
1765+ 6BA8              //  ______________________________________________________________________
1766+ 6BA8              //
1767+ 6BA8              // !            n a --
1768+ 6BA8              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1769+ 6BA8                              New_Def STORE, "!", is_code, is_normal
1769+ 6BA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1769+ 6BA8             >
1769+ 6BA8             >                // dummy db directives used to calculate length of namec
1769+ 6BA8 21          >                db      "!"
1769+ 6BA9             >len_NFA         defl    $ - temp_NFA
1769+ 6BA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1769+ 6BA8             >
1769+ 6BA8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1769+ 6BA9 21          >                db      "!"               // name string in 7-bit ascii, but
1769+ 6BAA             >                org     $-1                 // alter last byte of Name just above to set
1769+ 6BA9 A1          >                db      {b $} | END_BIT     // msb as name end
1769+ 6BAA             >
1769+ 6BAA 9B 6B       >                dw      last_NFA            // Link to previous definition Name
1769+ 6BAC             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1769+ 6BAC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1769+ 6BAC             >                else
1769+ 6BAC AE 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1769+ 6BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
1769+ 6BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
1769+ 6BAE             >
1769+ 6BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1770+ 6BAE E1                           pop     hl                  // address
1771+ 6BAF D1                           pop     de                  // < n
1772+ 6BB0 73                           ld      (hl), e             // low-byte
1773+ 6BB1 23                           inc     hl
1774+ 6BB2 72                           ld      (hl), d             // high-byte
1775+ 6BB3
1776+ 6BB3                              next
1776+ 6BB3 DD E9       >                jp      (ix)
1777+ 6BB5
1778+ 6BB5              //  ______________________________________________________________________
1779+ 6BB5              //
1780+ 6BB5              // c@           a -- c
1781+ 6BB5              // fetch a character n from address a
1782+ 6BB5                              New_Def CFETCH, "C@", is_code, is_normal
1782+ 6BB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1782+ 6BB5             >
1782+ 6BB5             >                // dummy db directives used to calculate length of namec
1782+ 6BB5 43 40       >                db      "C@"
1782+ 6BB7             >len_NFA         defl    $ - temp_NFA
1782+ 6BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1782+ 6BB5             >
1782+ 6BB5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1782+ 6BB6 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1782+ 6BB8             >                org     $-1                 // alter last byte of Name just above to set
1782+ 6BB7 C0          >                db      {b $} | END_BIT     // msb as name end
1782+ 6BB8             >
1782+ 6BB8 A8 6B       >                dw      last_NFA            // Link to previous definition Name
1782+ 6BBA             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1782+ 6BBA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1782+ 6BBA             >                else
1782+ 6BBA BC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1782+ 6BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
1782+ 6BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
1782+ 6BBC             >
1782+ 6BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1783+ 6BBC E1                           pop     hl
1784+ 6BBD 6E                           ld      l, (hl)             // low-byte
1785+ 6BBE 26 00                        ld      h, 0
1786+ 6BC0
1787+ 6BC0                              psh1
1787+ 6BC0 E5          >                push    hl
1787+ 6BC1 DD E9       >                jp      (ix)
1788+ 6BC3
1789+ 6BC3              //  ______________________________________________________________________
1790+ 6BC3              //
1791+ 6BC3              // c!           c a --
1792+ 6BC3              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1793+ 6BC3                              New_Def CSTORE, "C!", is_code, is_normal
1793+ 6BC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6BC3             >
1793+ 6BC3             >                // dummy db directives used to calculate length of namec
1793+ 6BC3 43 21       >                db      "C!"
1793+ 6BC5             >len_NFA         defl    $ - temp_NFA
1793+ 6BC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6BC3             >
1793+ 6BC3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6BC4 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1793+ 6BC6             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6BC5 A1          >                db      {b $} | END_BIT     // msb as name end
1793+ 6BC6             >
1793+ 6BC6 B5 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6BC8             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6BC8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1793+ 6BC8             >                else
1793+ 6BC8 CA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1793+ 6BCA             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6BCA             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6BCA             >
1793+ 6BCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6BCA E1                           pop     hl                  // < address
1795+ 6BCB D1                           pop     de
1796+ 6BCC 73                           ld      (hl), e             // low-byte
1797+ 6BCD
1798+ 6BCD                              next
1798+ 6BCD DD E9       >                jp      (ix)
1799+ 6BCF
1800+ 6BCF              //  ______________________________________________________________________
1801+ 6BCF              //
1802+ 6BCF              // 2@           a -- d
1803+ 6BCF              // fetch a 32 bits number d from address a and leaves it on top of the
1804+ 6BCF              // stack as two single numbers, high part as top of the stack.
1805+ 6BCF              // A double number is normally kept in CPU registers as HLDE.
1806+ 6BCF              // On stack a double number is treated as two single numbers
1807+ 6BCF              // where BC is on the top of the stack and HL is the second from top,
1808+ 6BCF              // so the sign of the number can be checked on top of stack
1809+ 6BCF              // and in the stack memory it appears as LHED.
1810+ 6BCF                              New_Def TWO_FETCH, "2@", is_code, is_normal
1810+ 6BCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1810+ 6BCF             >
1810+ 6BCF             >                // dummy db directives used to calculate length of namec
1810+ 6BCF 32 40       >                db      "2@"
1810+ 6BD1             >len_NFA         defl    $ - temp_NFA
1810+ 6BD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1810+ 6BCF             >
1810+ 6BCF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1810+ 6BD0 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1810+ 6BD2             >                org     $-1                 // alter last byte of Name just above to set
1810+ 6BD1 C0          >                db      {b $} | END_BIT     // msb as name end
1810+ 6BD2             >
1810+ 6BD2 C3 6B       >                dw      last_NFA            // Link to previous definition Name
1810+ 6BD4             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1810+ 6BD4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1810+ 6BD4             >                else
1810+ 6BD4 D6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1810+ 6BD6             >                endif           ; ok        // for other definitions it "points" the correct handler
1810+ 6BD6             >                // Use of "; ok" to suppress "warning[fwdref]"
1810+ 6BD6             >
1810+ 6BD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1811+ 6BD6 E1                           pop     hl                  // address
1812+ 6BD7 5E                           ld      e, (hl)             // low-byte
1813+ 6BD8 23                           inc     hl
1814+ 6BD9 56                           ld      d, (hl)             // high-byte
1815+ 6BDA
1816+ 6BDA 23                           inc     hl
1817+ 6BDB 7E                           ld      a, (hl)             // low-byte
1818+ 6BDC 23                           inc     hl
1819+ 6BDD 66                           ld      h, (hl)             // high-byte
1820+ 6BDE 6F                           ld      l, a
1821+ 6BDF E5                           push    hl
1822+ 6BE0 D5                           push    de
1823+ 6BE1                              next
1823+ 6BE1 DD E9       >                jp      (ix)
1824+ 6BE3
1825+ 6BE3              //  ______________________________________________________________________
1826+ 6BE3              //
1827+ 6BE3              // 2!           d a --
1828+ 6BE3              // stores a 32 bits number d from address a and leaves it on top of the
1829+ 6BE3              // stack as two single numbers, high part as top of the stack.
1830+ 6BE3              // A double number is normally kept in CPU registers as HLDE.
1831+ 6BE3              // On stack a double number is treated as two single numbers
1832+ 6BE3              // where BC is on the top of the stack and HL is the second from top,
1833+ 6BE3              // so the sign of the number can be checked on top of stack
1834+ 6BE3              // and in the stack memory it appears as LHED.
1835+ 6BE3                              New_Def TWO_STORE, "2!", is_code, is_normal
1835+ 6BE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1835+ 6BE3             >
1835+ 6BE3             >                // dummy db directives used to calculate length of namec
1835+ 6BE3 32 21       >                db      "2!"
1835+ 6BE5             >len_NFA         defl    $ - temp_NFA
1835+ 6BE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1835+ 6BE3             >
1835+ 6BE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1835+ 6BE4 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1835+ 6BE6             >                org     $-1                 // alter last byte of Name just above to set
1835+ 6BE5 A1          >                db      {b $} | END_BIT     // msb as name end
1835+ 6BE6             >
1835+ 6BE6 CF 6B       >                dw      last_NFA            // Link to previous definition Name
1835+ 6BE8             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1835+ 6BE8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1835+ 6BE8             >                else
1835+ 6BE8 EA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1835+ 6BEA             >                endif           ; ok        // for other definitions it "points" the correct handler
1835+ 6BEA             >                // Use of "; ok" to suppress "warning[fwdref]"
1835+ 6BEA             >
1835+ 6BEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1836+ 6BEA D9                           exx
1837+ 6BEB E1                           pop     hl                  // address
1838+ 6BEC C1                           pop     bc                  // < high-part
1839+ 6BED D1                           pop     de                  // < low-part > Instruction Pointer
1840+ 6BEE 71                           ld      (hl), c
1841+ 6BEF 23                           inc     hl
1842+ 6BF0 70                           ld      (hl), b
1843+ 6BF1 23                           inc     hl
1844+ 6BF2 73                           ld      (hl), e
1845+ 6BF3 23                           inc     hl
1846+ 6BF4 72                           ld      (hl), d
1847+ 6BF5 D9                           exx
1848+ 6BF6                              next
1848+ 6BF6 DD E9       >                jp      (ix)
1849+ 6BF8
1850+ 6BF8              //  ______________________________________________________________________
1851+ 6BF8              //
1852+ 6BF8              // p@           a -- c
1853+ 6BF8              // Read one byte from port a and leave the result on top of stack
1854+ 6BF8                              New_Def PFETCH, "P@", is_code, is_normal
1854+ 6BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1854+ 6BF8             >
1854+ 6BF8             >                // dummy db directives used to calculate length of namec
1854+ 6BF8 50 40       >                db      "P@"
1854+ 6BFA             >len_NFA         defl    $ - temp_NFA
1854+ 6BFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1854+ 6BF8             >
1854+ 6BF8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1854+ 6BF9 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1854+ 6BFB             >                org     $-1                 // alter last byte of Name just above to set
1854+ 6BFA C0          >                db      {b $} | END_BIT     // msb as name end
1854+ 6BFB             >
1854+ 6BFB E3 6B       >                dw      last_NFA            // Link to previous definition Name
1854+ 6BFD             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1854+ 6BFD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1854+ 6BFD             >                else
1854+ 6BFD FF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1854+ 6BFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1854+ 6BFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1854+ 6BFF             >
1854+ 6BFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1855+ 6BFF D9                           exx
1856+ 6C00 C1                           pop     bc
1857+ 6C01 26 00                        ld      h, 0
1858+ 6C03 ED 68                        in      l, (c)
1859+ 6C05 E5                           push    hl
1860+ 6C06 D9                           exx
1861+ 6C07                              next
1861+ 6C07 DD E9       >                jp      (ix)
1862+ 6C09
1863+ 6C09              //  ______________________________________________________________________
1864+ 6C09              //
1865+ 6C09              // p!           c a --
1866+ 6C09              // Send one byte (top of stack) to port a
1867+ 6C09                              New_Def PSTORE, "P!", is_code, is_normal
1867+ 6C09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1867+ 6C09             >
1867+ 6C09             >                // dummy db directives used to calculate length of namec
1867+ 6C09 50 21       >                db      "P!"
1867+ 6C0B             >len_NFA         defl    $ - temp_NFA
1867+ 6C0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1867+ 6C09             >
1867+ 6C09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1867+ 6C0A 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1867+ 6C0C             >                org     $-1                 // alter last byte of Name just above to set
1867+ 6C0B A1          >                db      {b $} | END_BIT     // msb as name end
1867+ 6C0C             >
1867+ 6C0C F8 6B       >                dw      last_NFA            // Link to previous definition Name
1867+ 6C0E             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1867+ 6C0E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1867+ 6C0E             >                else
1867+ 6C0E 10 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1867+ 6C10             >                endif           ; ok        // for other definitions it "points" the correct handler
1867+ 6C10             >                // Use of "; ok" to suppress "warning[fwdref]"
1867+ 6C10             >
1867+ 6C10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1868+ 6C10 D9                           exx
1869+ 6C11 C1                           pop     bc
1870+ 6C12 E1                           pop     hl                  // < c
1871+ 6C13 ED 69                        out     (c), l              // low-byte
1872+ 6C15 D9                           exx
1873+ 6C16                              next
1873+ 6C16 DD E9       >                jp      (ix)
1874+ 6C18
1875+ 6C18
1876+ 6C18              //  ______________________________________________________________________
1877+ 6C18              //
1878+ 6C18              // 2*           n1 -- n2
1879+ 6C18              // doubles the number at top of stack
1880+ 6C18                              New_Def TWO_MUL, "2*", is_code, is_normal
1880+ 6C18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1880+ 6C18             >
1880+ 6C18             >                // dummy db directives used to calculate length of namec
1880+ 6C18 32 2A       >                db      "2*"
1880+ 6C1A             >len_NFA         defl    $ - temp_NFA
1880+ 6C1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1880+ 6C18             >
1880+ 6C18 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1880+ 6C19 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1880+ 6C1B             >                org     $-1                 // alter last byte of Name just above to set
1880+ 6C1A AA          >                db      {b $} | END_BIT     // msb as name end
1880+ 6C1B             >
1880+ 6C1B 09 6C       >                dw      last_NFA            // Link to previous definition Name
1880+ 6C1D             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1880+ 6C1D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1880+ 6C1D             >                else
1880+ 6C1D 1F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1880+ 6C1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1880+ 6C1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1880+ 6C1F             >
1880+ 6C1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1881+ 6C1F              Two_Mul_Ptr:
1882+ 6C1F E1                           pop     hl
1883+ 6C20 29                           add     hl, hl
1884+ 6C21
1885+ 6C21                              psh1
1885+ 6C21 E5          >                push    hl
1885+ 6C22 DD E9       >                jp      (ix)
1886+ 6C24
1887+ 6C24              //  ______________________________________________________________________
1888+ 6C24              //
1889+ 6C24              // 2/           n1 -- n2
1890+ 6C24              // halves the top of stack, sign is unchanged
1891+ 6C24                              New_Def TWO_DIV, "2/", is_code, is_normal
1891+ 6C24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1891+ 6C24             >
1891+ 6C24             >                // dummy db directives used to calculate length of namec
1891+ 6C24 32 2F       >                db      "2/"
1891+ 6C26             >len_NFA         defl    $ - temp_NFA
1891+ 6C26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1891+ 6C24             >
1891+ 6C24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1891+ 6C25 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1891+ 6C27             >                org     $-1                 // alter last byte of Name just above to set
1891+ 6C26 AF          >                db      {b $} | END_BIT     // msb as name end
1891+ 6C27             >
1891+ 6C27 18 6C       >                dw      last_NFA            // Link to previous definition Name
1891+ 6C29             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1891+ 6C29 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1891+ 6C29             >                else
1891+ 6C29 2B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1891+ 6C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1891+ 6C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1891+ 6C2B             >
1891+ 6C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1892+ 6C2B E1                           pop     hl
1893+ 6C2C CB 2C                        sra     h
1894+ 6C2E CB 1D                        rr      l
1895+ 6C30
1896+ 6C30                              psh1
1896+ 6C30 E5          >                push    hl
1896+ 6C31 DD E9       >                jp      (ix)
1897+ 6C33
1898+ 6C33              //  ______________________________________________________________________
1899+ 6C33              //
1900+ 6C33              // lshift       n1 u -- n2
1901+ 6C33              // bit left shift of u bits
1902+ 6C33                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1902+ 6C33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1902+ 6C33             >
1902+ 6C33             >                // dummy db directives used to calculate length of namec
1902+ 6C33 4C 53 48 49 >                db      "LSHIFT"
1902+ 6C37 46 54       >
1902+ 6C39             >len_NFA         defl    $ - temp_NFA
1902+ 6C39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1902+ 6C33             >
1902+ 6C33 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1902+ 6C34 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1902+ 6C38 46 54       >
1902+ 6C3A             >                org     $-1                 // alter last byte of Name just above to set
1902+ 6C39 D4          >                db      {b $} | END_BIT     // msb as name end
1902+ 6C3A             >
1902+ 6C3A 24 6C       >                dw      last_NFA            // Link to previous definition Name
1902+ 6C3C             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1902+ 6C3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1902+ 6C3C             >                else
1902+ 6C3C 3E 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1902+ 6C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1902+ 6C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1902+ 6C3E             >
1902+ 6C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1903+ 6C3E D9                           exx
1904+ 6C3F C1                           pop     bc
1905+ 6C40 41                           ld      b, c
1906+ 6C41 D1                           pop     de
1907+ 6C42 ED 28                        bsla    de, b
1908+ 6C44 D5                           push    de
1909+ 6C45 D9                           exx
1910+ 6C46                              next
1910+ 6C46 DD E9       >                jp      (ix)
1911+ 6C48
1912+ 6C48              //  ______________________________________________________________________
1913+ 6C48              //
1914+ 6C48              // rshift       n1 u -- n2
1915+ 6C48              // bit right shift of u bits
1916+ 6C48                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1916+ 6C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1916+ 6C48             >
1916+ 6C48             >                // dummy db directives used to calculate length of namec
1916+ 6C48 52 53 48 49 >                db      "RSHIFT"
1916+ 6C4C 46 54       >
1916+ 6C4E             >len_NFA         defl    $ - temp_NFA
1916+ 6C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1916+ 6C48             >
1916+ 6C48 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1916+ 6C49 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1916+ 6C4D 46 54       >
1916+ 6C4F             >                org     $-1                 // alter last byte of Name just above to set
1916+ 6C4E D4          >                db      {b $} | END_BIT     // msb as name end
1916+ 6C4F             >
1916+ 6C4F 33 6C       >                dw      last_NFA            // Link to previous definition Name
1916+ 6C51             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1916+ 6C51 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1916+ 6C51             >                else
1916+ 6C51 53 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1916+ 6C53             >                endif           ; ok        // for other definitions it "points" the correct handler
1916+ 6C53             >                // Use of "; ok" to suppress "warning[fwdref]"
1916+ 6C53             >
1916+ 6C53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1917+ 6C53 D9                           exx
1918+ 6C54 C1                           pop     bc
1919+ 6C55 41                           ld      b, c
1920+ 6C56 D1                           pop     de
1921+ 6C57 ED 2A                        bsrl    de, b
1922+ 6C59 D5                           push    de
1923+ 6C5A D9                           exx
1924+ 6C5B                              next
1924+ 6C5B DD E9       >                jp      (ix)
1925+ 6C5D
1926+ 6C5D              //  ______________________________________________________________________
1927+ 6C5D              //
1928+ 6C5D              // cells        n1 -- n2
1929+ 6C5D              // decrement by 2 top of stack
1930+ 6C5D                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1930+ 6C5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1930+ 6C5D             >
1930+ 6C5D             >                // dummy db directives used to calculate length of namec
1930+ 6C5D 43 45 4C 4C >                db      "CELLS"
1930+ 6C61 53          >
1930+ 6C62             >len_NFA         defl    $ - temp_NFA
1930+ 6C62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1930+ 6C5D             >
1930+ 6C5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1930+ 6C5E 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1930+ 6C62 53          >
1930+ 6C63             >                org     $-1                 // alter last byte of Name just above to set
1930+ 6C62 D3          >                db      {b $} | END_BIT     // msb as name end
1930+ 6C63             >
1930+ 6C63 48 6C       >                dw      last_NFA            // Link to previous definition Name
1930+ 6C65             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1930+ 6C65 1F 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1930+ 6C67             >                else
1930+ 6C67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1930+ 6C67             >                endif           ; ok        // for other definitions it "points" the correct handler
1930+ 6C67             >                // Use of "; ok" to suppress "warning[fwdref]"
1930+ 6C67             >
1930+ 6C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1931+ 6C67
1932+ 6C67
1933+ 6C67              //  ______________________________________________________________________
1934+ 6C67
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C67                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C67              //  ______________________________________________________________________
   2+ 6C67              //
   3+ 6C67              //  L1.asm
   4+ 6C67              //
   5+ 6C67              //  Level-1 definitions and derivate
   6+ 6C67              //  ______________________________________________________________________
   7+ 6C67
   8+ 6C67              //  ______________________________________________________________________
   9+ 6C67              //
  10+ 6C67              // :            -- cccc     ( compile time )
  11+ 6C67              //              i*x -- j*x  ( run time )
  12+ 6C67              // Colon Definition
  13+ 6C67                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6C67             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6C67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C67             >
  13+ 6C67             >                // dummy db directives used to calculate length of namec
  13+ 6C67 3A          >                db      ":"
  13+ 6C68             >len_NFA         defl    $ - temp_NFA
  13+ 6C68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C67             >
  13+ 6C67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C68 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C69             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C68 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C69             >
  13+ 6C69 5D 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C6B             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C6B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C6D             >                else
  13+ 6C6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C6D             >
  13+ 6C6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C6D
  15+ 6C6D C9 70                        dw      QEXEC                   // ?exec
  16+ 6C6F 84 70                        dw      STORE_CSP               // !csp
  17+ 6C71 3C 6E 9F 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C75 2F 6E AC 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C79 C4 76                        dw      CREATE                  // create  ( forward )
  20+ 6C7B 76 71                        dw      SMUDGE                  // dmudge
  21+ 6C7D 61 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C7F CC 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C81                                                              // ... immediate
  24+ 6C81              Enter_Ptr:
  25+ 6C81                              // via call coded in CFA
  26+ 6C81                              ldhlrp
  26+ 6C81 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C84 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C85 70                           ld      (hl), b
  29+ 6C86 2B                           dec     hl
  30+ 6C87 71                           ld      (hl), c
  31+ 6C88                              ldrphl
  31+ 6C88 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C8B 13                           inc     de
  33+ 6C8C 4B                           ld      c, e
  34+ 6C8D 42                           ld      b, d
  35+ 6C8E                              next
  35+ 6C8E DD E9       >                jp      (ix)
  36+ 6C90
  37+ 6C90              //  ______________________________________________________________________
  38+ 6C90              //
  39+ 6C90              // ;            --
  40+ 6C90              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C90                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C90             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C90             >
  41+ 6C90             >                // dummy db directives used to calculate length of namec
  41+ 6C90 3B          >                db      ";"
  41+ 6C91             >len_NFA         defl    $ - temp_NFA
  41+ 6C91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C90             >
  41+ 6C90 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C91 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C92             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C91 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C92             >
  41+ 6C92 67 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C94             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C94 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C96             >                else
  41+ 6C96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C96             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C96             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C96             >
  41+ 6C96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C96
  43+ 6C96 F3 70                        dw      QCSP                    // ?csp
  44+ 6C98 2A 71 AB 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C9C 76 71                        dw      SMUDGE                  // smudge
  46+ 6C9E 53 71                        dw      SQUARED_OPEN            // [
  47+ 6CA0 AB 69                        dw      EXIT                    // ; immediate
  48+ 6CA2
  49+ 6CA2              //  ______________________________________________________________________
  50+ 6CA2              //
  51+ 6CA2              // noop         --
  52+ 6CA2                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6CA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6CA2             >
  52+ 6CA2             >                // dummy db directives used to calculate length of namec
  52+ 6CA2 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CA6             >len_NFA         defl    $ - temp_NFA
  52+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6CA2             >
  52+ 6CA2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6CA3 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CA6 D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CA7             >
  52+ 6CA7 90 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CA9             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CA9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CA9             >                else
  52+ 6CA9 AB 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CAB             >
  52+ 6CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CAB                              next
  53+ 6CAB DD E9       >                jp      (ix)
  54+ 6CAD
  55+ 6CAD              //  ______________________________________________________________________
  56+ 6CAD              //
  57+ 6CAD              // constant     n -- cccc     ( compile time )
  58+ 6CAD              //              -- n          ( run time )
  59+ 6CAD              // Constant definition.
  60+ 6CAD                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CAD             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CAD             >
  60+ 6CAD             >                // dummy db directives used to calculate length of namec
  60+ 6CAD 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CB1 54 41 4E 54 >
  60+ 6CB5             >len_NFA         defl    $ - temp_NFA
  60+ 6CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CAD             >
  60+ 6CAD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CAE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CB2 54 41 4E 54 >
  60+ 6CB6             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CB5 D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CB6             >
  60+ 6CB6 A2 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CB8             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CB8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CBA             >                else
  60+ 6CBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CBA             >
  60+ 6CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CBA
  62+ 6CBA C4 76                        dw      CREATE                  // create
  63+ 6CBC F7 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CBE CC 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CC0              Constant_Ptr:
  66+ 6CC0
  67+ 6CC0 13                           inc     de
  68+ 6CC1 EB                           ex      de, hl
  69+ 6CC2
  70+ 6CC2 5E                           ld      e, (hl)
  71+ 6CC3 23                           inc     hl
  72+ 6CC4 56                           ld      d, (hl)
  73+ 6CC5 D5                           push    de
  74+ 6CC6                              next
  74+ 6CC6 DD E9       >                jp      (ix)
  75+ 6CC8
  76+ 6CC8              //  ______________________________________________________________________
  77+ 6CC8              //
  78+ 6CC8              // variable     n -- cccc     ( compile time )
  79+ 6CC8              //              -- a          ( run time )
  80+ 6CC8              // Variable definition, n is the initial value.
  81+ 6CC8                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CC8             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CC8             >
  81+ 6CC8             >                // dummy db directives used to calculate length of namec
  81+ 6CC8 56 41 52 49 >                db      "VARIABLE"
  81+ 6CCC 41 42 4C 45 >
  81+ 6CD0             >len_NFA         defl    $ - temp_NFA
  81+ 6CD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CC8             >
  81+ 6CC8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CC9 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CCD 41 42 4C 45 >
  81+ 6CD1             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CD0 C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CD1             >
  81+ 6CD1 AD 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CD3             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CD3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CD5             >                else
  81+ 6CD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CD5             >
  81+ 6CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CD5
  83+ 6CD5 FC 6C                        dw      ZERO
  84+ 6CD7 B8 6C                        dw      CONSTANT                // constant
  85+ 6CD9 CC 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CDB              Variable_Ptr:
  87+ 6CDB
  88+ 6CDB 13                           inc     de
  89+ 6CDC D5                           push    de                  // balance TOS before overwrite it
  90+ 6CDD
  91+ 6CDD                              next
  91+ 6CDD DD E9       >                jp      (ix)
  92+ 6CDF
  93+ 6CDF              //  ______________________________________________________________________
  94+ 6CDF              //
  95+ 6CDF              // user         b -- cccc     ( compile time )
  96+ 6CDF              //              -- a          ( run time )
  97+ 6CDF              // User variable definition
  98+ 6CDF                              Colon_Def USER, "USER", is_normal
  98+ 6CDF             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CDF             >
  98+ 6CDF             >                // dummy db directives used to calculate length of namec
  98+ 6CDF 55 53 45 52 >                db      "USER"
  98+ 6CE3             >len_NFA         defl    $ - temp_NFA
  98+ 6CE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CDF             >
  98+ 6CDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CE0 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CE4             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CE3 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CE4             >
  98+ 6CE4 C8 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CE6             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CE6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CE8             >                else
  98+ 6CE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CE8             >
  98+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CE8
 100+ 6CE8 C4 76                        dw      CREATE                  // create
 101+ 6CEA 08 6F                        dw      CCOMMA                  // c,
 102+ 6CEC CC 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CEE
 104+ 6CEE
 105+ 6CEE              User_Ptr:
 106+ 6CEE                              // via call coded in CFA
 107+ 6CEE 13                           inc     de
 108+ 6CEF 1A                           ld      a, (de)
 109+ 6CF0 2A 94 63                     ld      hl, (USER_Pointer)
 110+ 6CF3 ED 31                        add     hl, a
 111+ 6CF5 E5                           push    hl
 112+ 6CF6                              next
 112+ 6CF6 DD E9       >                jp      (ix)
 113+ 6CF8
 114+ 6CF8              //  ______________________________________________________________________
 115+ 6CF8              //
 116+ 6CF8                              Constant_Def ZERO       ,   "0"     ,   0
 116+ 6CF8             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 116+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ 6CF8             >
 116+ 6CF8             >                // dummy db directives used to calculate length of namec
 116+ 6CF8 30          >                db      "0"
 116+ 6CF9             >len_NFA         defl    $ - temp_NFA
 116+ 6CF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ 6CF8             >
 116+ 6CF8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ 6CF9 30          >                db      "0"               // name string in 7-bit ascii, but
 116+ 6CFA             >                org     $-1                 // alter last byte of Name just above to set
 116+ 6CF9 B0          >                db      {b $} | END_BIT     // msb as name end
 116+ 6CFA             >
 116+ 6CFA DF 6C       >                dw      last_NFA            // Link to previous definition Name
 116+ 6CFC             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 6CFC C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 116+ 6CFE             >                else
 116+ 6CFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 116+ 6CFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 6CFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 6CFE             >
 116+ 6CFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 6CFE 00 00       >                dw      0
 117+ 6D00                              Constant_Def ONE        ,   "1"     ,   1
 117+ 6D00             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 117+ 6D00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 117+ 6D00             >
 117+ 6D00             >                // dummy db directives used to calculate length of namec
 117+ 6D00 31          >                db      "1"
 117+ 6D01             >len_NFA         defl    $ - temp_NFA
 117+ 6D01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 117+ 6D00             >
 117+ 6D00 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6D01 31          >                db      "1"               // name string in 7-bit ascii, but
 117+ 6D02             >                org     $-1                 // alter last byte of Name just above to set
 117+ 6D01 B1          >                db      {b $} | END_BIT     // msb as name end
 117+ 6D02             >
 117+ 6D02 F8 6C       >                dw      last_NFA            // Link to previous definition Name
 117+ 6D04             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 117+ 6D04 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 117+ 6D06             >                else
 117+ 6D06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 117+ 6D06             >                endif           ; ok        // for other definitions it "points" the correct handler
 117+ 6D06             >                // Use of "; ok" to suppress "warning[fwdref]"
 117+ 6D06             >
 117+ 6D06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 6D06 01 00       >                dw      1
 118+ 6D08                              Constant_Def TWO        ,   "2"     ,   2
 118+ 6D08             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 118+ 6D08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D08             >
 118+ 6D08             >                // dummy db directives used to calculate length of namec
 118+ 6D08 32          >                db      "2"
 118+ 6D09             >len_NFA         defl    $ - temp_NFA
 118+ 6D09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D08             >
 118+ 6D08 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D09 32          >                db      "2"               // name string in 7-bit ascii, but
 118+ 6D0A             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D09 B2          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D0A             >
 118+ 6D0A 00 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D0C             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D0C C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D0E             >                else
 118+ 6D0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D0E             >
 118+ 6D0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D0E 02 00       >                dw      2
 119+ 6D10                              Constant_Def THREE      ,   "3"     ,   3
 119+ 6D10             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 119+ 6D10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D10             >
 119+ 6D10             >                // dummy db directives used to calculate length of namec
 119+ 6D10 33          >                db      "3"
 119+ 6D11             >len_NFA         defl    $ - temp_NFA
 119+ 6D11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D10             >
 119+ 6D10 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D11 33          >                db      "3"               // name string in 7-bit ascii, but
 119+ 6D12             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D11 B3          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D12             >
 119+ 6D12 08 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D14             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D14 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D16             >                else
 119+ 6D16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D16             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D16             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D16             >
 119+ 6D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D16 03 00       >                dw      3
 120+ 6D18                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 120+ 6D18             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 120+ 6D18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D18             >
 120+ 6D18             >                // dummy db directives used to calculate length of namec
 120+ 6D18 2D 31       >                db      "-1"
 120+ 6D1A             >len_NFA         defl    $ - temp_NFA
 120+ 6D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D18             >
 120+ 6D18 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D19 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 120+ 6D1B             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D1A B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D1B             >
 120+ 6D1B 10 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D1D             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D1D C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D1F             >                else
 120+ 6D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D1F             >
 120+ 6D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D1F FF FF       >                dw      -1
 121+ 6D21                              Constant_Def BL         ,   "BL"    , $20
 121+ 6D21             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 121+ 6D21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D21             >
 121+ 6D21             >                // dummy db directives used to calculate length of namec
 121+ 6D21 42 4C       >                db      "BL"
 121+ 6D23             >len_NFA         defl    $ - temp_NFA
 121+ 6D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D21             >
 121+ 6D21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D22 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 121+ 6D24             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D23 CC          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D24             >
 121+ 6D24 18 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D26             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D26 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D28             >                else
 121+ 6D28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D28             >
 121+ 6D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D28 20 00       >                dw      $20
 122+ 6D2A                              Constant_Def CL         ,   "C/L"   ,  64
 122+ 6D2A             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 122+ 6D2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D2A             >
 122+ 6D2A             >                // dummy db directives used to calculate length of namec
 122+ 6D2A 43 2F 4C    >                db      "C/L"
 122+ 6D2D             >len_NFA         defl    $ - temp_NFA
 122+ 6D2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D2A             >
 122+ 6D2A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D2B 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 122+ 6D2E             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D2D CC          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D2E             >
 122+ 6D2E 21 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D30             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D30 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D32             >                else
 122+ 6D32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D32             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D32             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D32             >
 122+ 6D32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D32 40 00       >                dw      64
 123+ 6D34                              Constant_Def BBUF       ,   "B/BUF" , 512
 123+ 6D34             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 123+ 6D34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D34             >
 123+ 6D34             >                // dummy db directives used to calculate length of namec
 123+ 6D34 42 2F 42 55 >                db      "B/BUF"
 123+ 6D38 46          >
 123+ 6D39             >len_NFA         defl    $ - temp_NFA
 123+ 6D39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D34             >
 123+ 6D34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D35 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 123+ 6D39 46          >
 123+ 6D3A             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D39 C6          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D3A             >
 123+ 6D3A 2A 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D3C             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D3C C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D3E             >                else
 123+ 6D3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D3E             >
 123+ 6D3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D3E 00 02       >                dw      512
 124+ 6D40                              Constant_Def BSCR       ,   "B/SCR" ,   2
 124+ 6D40             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 124+ 6D40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D40             >
 124+ 6D40             >                // dummy db directives used to calculate length of namec
 124+ 6D40 42 2F 53 43 >                db      "B/SCR"
 124+ 6D44 52          >
 124+ 6D45             >len_NFA         defl    $ - temp_NFA
 124+ 6D45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D40             >
 124+ 6D40 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D41 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 124+ 6D45 52          >
 124+ 6D46             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D45 D2          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D46             >
 124+ 6D46 34 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D48             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D48 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D4A             >                else
 124+ 6D4A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D4A             >
 124+ 6D4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D4A 02 00       >                dw      2
 125+ 6D4C                              Constant_Def LSCR       ,   "L/SCR" ,  16
 125+ 6D4C             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 125+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D4C             >
 125+ 6D4C             >                // dummy db directives used to calculate length of namec
 125+ 6D4C 4C 2F 53 43 >                db      "L/SCR"
 125+ 6D50 52          >
 125+ 6D51             >len_NFA         defl    $ - temp_NFA
 125+ 6D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D4C             >
 125+ 6D4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D4D 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 125+ 6D51 52          >
 125+ 6D52             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D51 D2          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D52             >
 125+ 6D52 40 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D54             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D54 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D56             >                else
 125+ 6D56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D56             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D56             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D56             >
 125+ 6D56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D56 10 00       >                dw      16
 126+ 6D58
 127+ 6D58              //  ______________________________________________________________________
 128+ 6D58              //
 129+ 6D58              // +origin         --
 130+ 6D58              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 131+ 6D58              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 132+ 6D58              //              dw      PLUS                    // +
 133+ 6D58              //              dw      EXIT                    // ;
 134+ 6D58                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 134+ 6D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6D58             >
 134+ 6D58             >                // dummy db directives used to calculate length of namec
 134+ 6D58 2B 4F 52 49 >                db      "+ORIGIN"
 134+ 6D5C 47 49 4E    >
 134+ 6D5F             >len_NFA         defl    $ - temp_NFA
 134+ 6D5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 134+ 6D58             >
 134+ 6D58 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 134+ 6D59 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 134+ 6D5D 47 49 4E    >
 134+ 6D60             >                org     $-1                 // alter last byte of Name just above to set
 134+ 6D5F CE          >                db      {b $} | END_BIT     // msb as name end
 134+ 6D60             >
 134+ 6D60 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 134+ 6D62             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 134+ 6D62 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 134+ 6D62             >                else
 134+ 6D62 64 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 134+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 134+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 134+ 6D64             >
 134+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 135+ 6D64 E1                           pop     hl
 136+ 6D65 11 66 63                     ld      de,  Cold_origin
 137+ 6D68 19                           add     hl, de
 138+ 6D69 E5                           push    hl
 139+ 6D6A                              next
 139+ 6D6A DD E9       >                jp      (ix)
 140+ 6D6C
 141+ 6D6C
 142+ 6D6C              //  ______________________________________________________________________
 143+ 6D6C              //
 144+ 6D6C                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 144+ 6D6C             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 144+ 6D6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6D6C             >
 144+ 6D6C             >                // dummy db directives used to calculate length of namec
 144+ 6D6C 28 4E 45 58 >                db      "(NEXT)"
 144+ 6D70 54 29       >
 144+ 6D72             >len_NFA         defl    $ - temp_NFA
 144+ 6D72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6D6C             >
 144+ 6D6C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6D6D 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 144+ 6D71 54 29       >
 144+ 6D73             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6D72 A9          >                db      {b $} | END_BIT     // msb as name end
 144+ 6D73             >
 144+ 6D73 58 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6D75             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6D75 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 144+ 6D77             >                else
 144+ 6D77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6D77             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6D77             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6D77             >
 144+ 6D77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6D77 98 63       >                dw      Next_Ptr
 145+ 6D79
 146+ 6D79              //  ______________________________________________________________________
 147+ 6D79              //
 148+ 6D79
 149+ 6D79                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 149+ 6D79             >                New_Def  S0, "S0", User_Ptr, is_normal
 149+ 6D79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6D79             >
 149+ 6D79             >                // dummy db directives used to calculate length of namec
 149+ 6D79 53 30       >                db      "S0"
 149+ 6D7B             >len_NFA         defl    $ - temp_NFA
 149+ 6D7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6D79             >
 149+ 6D79 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6D7A 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 149+ 6D7C             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6D7B B0          >                db      {b $} | END_BIT     // msb as name end
 149+ 6D7C             >
 149+ 6D7C 6C 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6D7E             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6D7E EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6D80             >                else
 149+ 6D80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6D80             >
 149+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6D80 06          >                db      06
 150+ 6D81                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 150+ 6D81             >                New_Def  R0, "R0", User_Ptr, is_normal
 150+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6D81             >
 150+ 6D81             >                // dummy db directives used to calculate length of namec
 150+ 6D81 52 30       >                db      "R0"
 150+ 6D83             >len_NFA         defl    $ - temp_NFA
 150+ 6D83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6D81             >
 150+ 6D81 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6D82 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 150+ 6D84             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6D83 B0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6D84             >
 150+ 6D84 79 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6D86             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6D86 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6D88             >                else
 150+ 6D88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6D88             >
 150+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6D88 08          >                db      08
 151+ 6D89                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 151+ 6D89             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 151+ 6D89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D89             >
 151+ 6D89             >                // dummy db directives used to calculate length of namec
 151+ 6D89 54 49 42    >                db      "TIB"
 151+ 6D8C             >len_NFA         defl    $ - temp_NFA
 151+ 6D8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D89             >
 151+ 6D89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D8A 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 151+ 6D8D             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D8C C2          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D8D             >
 151+ 6D8D 81 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D8F             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D8F EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D91             >                else
 151+ 6D91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D91             >
 151+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D91 0A          >                db      10
 152+ 6D92                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 152+ 6D92             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 152+ 6D92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D92             >
 152+ 6D92             >                // dummy db directives used to calculate length of namec
 152+ 6D92 57 49 44 54 >                db      "WIDTH"
 152+ 6D96 48          >
 152+ 6D97             >len_NFA         defl    $ - temp_NFA
 152+ 6D97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D92             >
 152+ 6D92 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D93 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 152+ 6D97 48          >
 152+ 6D98             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D97 C8          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D98             >
 152+ 6D98 89 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D9A             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D9A EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D9C             >                else
 152+ 6D9C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D9C             >
 152+ 6D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D9C 0C          >                db      12
 153+ 6D9D                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 153+ 6D9D             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 153+ 6D9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D9D             >
 153+ 6D9D             >                // dummy db directives used to calculate length of namec
 153+ 6D9D 57 41 52 4E >                db      "WARNING"
 153+ 6DA1 49 4E 47    >
 153+ 6DA4             >len_NFA         defl    $ - temp_NFA
 153+ 6DA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D9D             >
 153+ 6D9D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D9E 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 153+ 6DA2 49 4E 47    >
 153+ 6DA5             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6DA4 C7          >                db      {b $} | END_BIT     // msb as name end
 153+ 6DA5             >
 153+ 6DA5 92 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6DA7             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6DA7 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6DA9             >                else
 153+ 6DA9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6DA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6DA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6DA9             >
 153+ 6DA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6DA9 0E          >                db      14
 154+ 6DAA                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 154+ 6DAA             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 154+ 6DAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6DAA             >
 154+ 6DAA             >                // dummy db directives used to calculate length of namec
 154+ 6DAA 46 45 4E 43 >                db      "FENCE"
 154+ 6DAE 45          >
 154+ 6DAF             >len_NFA         defl    $ - temp_NFA
 154+ 6DAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6DAA             >
 154+ 6DAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6DAB 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 154+ 6DAF 45          >
 154+ 6DB0             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6DAF C5          >                db      {b $} | END_BIT     // msb as name end
 154+ 6DB0             >
 154+ 6DB0 9D 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DB2             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DB2 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DB4             >                else
 154+ 6DB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DB4             >
 154+ 6DB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DB4 10          >                db      16
 155+ 6DB5                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 155+ 6DB5             >                New_Def  DP, "DP", User_Ptr, is_normal
 155+ 6DB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DB5             >
 155+ 6DB5             >                // dummy db directives used to calculate length of namec
 155+ 6DB5 44 50       >                db      "DP"
 155+ 6DB7             >len_NFA         defl    $ - temp_NFA
 155+ 6DB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DB5             >
 155+ 6DB5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DB6 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 155+ 6DB8             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DB7 D0          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DB8             >
 155+ 6DB8 AA 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DBA             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DBA EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DBC             >                else
 155+ 6DBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DBC             >
 155+ 6DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DBC 12          >                db      18
 156+ 6DBD                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 156+ 6DBD             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 156+ 6DBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DBD             >
 156+ 6DBD             >                // dummy db directives used to calculate length of namec
 156+ 6DBD 56 4F 43 2D >                db      "VOC-LINK"
 156+ 6DC1 4C 49 4E 4B >
 156+ 6DC5             >len_NFA         defl    $ - temp_NFA
 156+ 6DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DBD             >
 156+ 6DBD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DBE 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 156+ 6DC2 4C 49 4E 4B >
 156+ 6DC6             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DC5 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DC6             >
 156+ 6DC6 B5 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DC8             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DC8 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DCA             >                else
 156+ 6DCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DCA             >
 156+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DCA 14          >                db      20
 157+ 6DCB                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 157+ 6DCB             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 157+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DCB             >
 157+ 6DCB             >                // dummy db directives used to calculate length of namec
 157+ 6DCB 46 49 52 53 >                db      "FIRST"
 157+ 6DCF 54          >
 157+ 6DD0             >len_NFA         defl    $ - temp_NFA
 157+ 6DD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DCB             >
 157+ 6DCB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DCC 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 157+ 6DD0 54          >
 157+ 6DD1             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DD0 D4          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DD1             >
 157+ 6DD1 BD 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DD3             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DD3 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DD5             >                else
 157+ 6DD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DD5             >
 157+ 6DD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DD5 16          >                db      22
 158+ 6DD6                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 158+ 6DD6             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 158+ 6DD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DD6             >
 158+ 6DD6             >                // dummy db directives used to calculate length of namec
 158+ 6DD6 4C 49 4D 49 >                db      "LIMIT"
 158+ 6DDA 54          >
 158+ 6DDB             >len_NFA         defl    $ - temp_NFA
 158+ 6DDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DD6             >
 158+ 6DD6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DD7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 158+ 6DDB 54          >
 158+ 6DDC             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DDB D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DDC             >
 158+ 6DDC CB 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DDE             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DDE EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DE0             >                else
 158+ 6DE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DE0             >
 158+ 6DE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DE0 18          >                db      24
 159+ 6DE1                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 159+ 6DE1             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 159+ 6DE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DE1             >
 159+ 6DE1             >                // dummy db directives used to calculate length of namec
 159+ 6DE1 45 58 50    >                db      "EXP"
 159+ 6DE4             >len_NFA         defl    $ - temp_NFA
 159+ 6DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DE1             >
 159+ 6DE1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DE2 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 159+ 6DE5             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DE4 D0          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DE5             >
 159+ 6DE5 D6 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DE7             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DE7 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DE9             >                else
 159+ 6DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DE9             >
 159+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DE9 1A          >                db      26
 160+ 6DEA                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 160+ 6DEA             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 160+ 6DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DEA             >
 160+ 6DEA             >                // dummy db directives used to calculate length of namec
 160+ 6DEA 4E 4D 4F 44 >                db      "NMODE"
 160+ 6DEE 45          >
 160+ 6DEF             >len_NFA         defl    $ - temp_NFA
 160+ 6DEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DEA             >
 160+ 6DEA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DEB 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 160+ 6DEF 45          >
 160+ 6DF0             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DEF C5          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DF0             >
 160+ 6DF0 E1 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DF2             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DF2 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DF4             >                else
 160+ 6DF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DF4             >
 160+ 6DF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DF4 1C          >                db      28
 161+ 6DF5                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 161+ 6DF5             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 161+ 6DF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DF5             >
 161+ 6DF5             >                // dummy db directives used to calculate length of namec
 161+ 6DF5 42 4C 4B    >                db      "BLK"
 161+ 6DF8             >len_NFA         defl    $ - temp_NFA
 161+ 6DF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DF5             >
 161+ 6DF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DF6 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 161+ 6DF9             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DF8 CB          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DF9             >
 161+ 6DF9 EA 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DFB             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DFB EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DFD             >                else
 161+ 6DFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DFD             >
 161+ 6DFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DFD 1E          >                db      30
 162+ 6DFE                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 162+ 6DFE             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 162+ 6DFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DFE             >
 162+ 6DFE             >                // dummy db directives used to calculate length of namec
 162+ 6DFE 3E 49 4E    >                db      ">IN"
 162+ 6E01             >len_NFA         defl    $ - temp_NFA
 162+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DFE             >
 162+ 6DFE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DFF 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 162+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E01 CE          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E02             >
 162+ 6E02 F5 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E04             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E04 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E06             >                else
 162+ 6E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E06             >
 162+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E06 20          >                db      32
 163+ 6E07                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 163+ 6E07             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 163+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E07             >
 163+ 6E07             >                // dummy db directives used to calculate length of namec
 163+ 6E07 4F 55 54    >                db      "OUT"
 163+ 6E0A             >len_NFA         defl    $ - temp_NFA
 163+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E07             >
 163+ 6E07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E08 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 163+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E0A D4          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E0B             >
 163+ 6E0B FE 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E0D             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E0D EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E0F             >                else
 163+ 6E0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E0F             >
 163+ 6E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E0F 22          >                db      34
 164+ 6E10                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 164+ 6E10             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 164+ 6E10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E10             >
 164+ 6E10             >                // dummy db directives used to calculate length of namec
 164+ 6E10 53 43 52    >                db      "SCR"
 164+ 6E13             >len_NFA         defl    $ - temp_NFA
 164+ 6E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E10             >
 164+ 6E10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E11 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 164+ 6E14             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E13 D2          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E14             >
 164+ 6E14 07 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E16             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E16 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E18             >                else
 164+ 6E18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E18             >
 164+ 6E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E18 24          >                db      36
 165+ 6E19                              User_Def OFFSET     , "OFFSET"    , 38 //
 165+ 6E19             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 165+ 6E19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E19             >
 165+ 6E19             >                // dummy db directives used to calculate length of namec
 165+ 6E19 4F 46 46 53 >                db      "OFFSET"
 165+ 6E1D 45 54       >
 165+ 6E1F             >len_NFA         defl    $ - temp_NFA
 165+ 6E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E19             >
 165+ 6E19 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E1A 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 165+ 6E1E 45 54       >
 165+ 6E20             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E1F D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E20             >
 165+ 6E20 10 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E22             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E22 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E24             >                else
 165+ 6E24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E24             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E24             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E24             >
 165+ 6E24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E24 26          >                db      38
 166+ 6E25                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 166+ 6E25             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 166+ 6E25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E25             >
 166+ 6E25             >                // dummy db directives used to calculate length of namec
 166+ 6E25 43 4F 4E 54 >                db      "CONTEXT"
 166+ 6E29 45 58 54    >
 166+ 6E2C             >len_NFA         defl    $ - temp_NFA
 166+ 6E2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E25             >
 166+ 6E25 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E26 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 166+ 6E2A 45 58 54    >
 166+ 6E2D             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E2C D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E2D             >
 166+ 6E2D 19 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E2F             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E2F EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E31             >                else
 166+ 6E31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E31             >
 166+ 6E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E31 28          >                db      40
 167+ 6E32                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 167+ 6E32             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 167+ 6E32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E32             >
 167+ 6E32             >                // dummy db directives used to calculate length of namec
 167+ 6E32 43 55 52 52 >                db      "CURRENT"
 167+ 6E36 45 4E 54    >
 167+ 6E39             >len_NFA         defl    $ - temp_NFA
 167+ 6E39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E32             >
 167+ 6E32 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E33 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 167+ 6E37 45 4E 54    >
 167+ 6E3A             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E39 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E3A             >
 167+ 6E3A 25 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E3C             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E3C EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E3E             >                else
 167+ 6E3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E3E             >
 167+ 6E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E3E 2A          >                db      42
 168+ 6E3F                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 168+ 6E3F             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 168+ 6E3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E3F             >
 168+ 6E3F             >                // dummy db directives used to calculate length of namec
 168+ 6E3F 53 54 41 54 >                db      "STATE"
 168+ 6E43 45          >
 168+ 6E44             >len_NFA         defl    $ - temp_NFA
 168+ 6E44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E3F             >
 168+ 6E3F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E40 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 168+ 6E44 45          >
 168+ 6E45             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E44 C5          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E45             >
 168+ 6E45 32 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E47             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E47 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E49             >                else
 168+ 6E49 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E49             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E49             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E49             >
 168+ 6E49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E49 2C          >                db      44
 169+ 6E4A                              User_Def BASE       , "BASE"      , 46 //
 169+ 6E4A             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 169+ 6E4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E4A             >
 169+ 6E4A             >                // dummy db directives used to calculate length of namec
 169+ 6E4A 42 41 53 45 >                db      "BASE"
 169+ 6E4E             >len_NFA         defl    $ - temp_NFA
 169+ 6E4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E4A             >
 169+ 6E4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E4B 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 169+ 6E4F             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E4E C5          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E4F             >
 169+ 6E4F 3F 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E51             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E51 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E53             >                else
 169+ 6E53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E53             >
 169+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E53 2E          >                db      46
 170+ 6E54                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 170+ 6E54             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 170+ 6E54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E54             >
 170+ 6E54             >                // dummy db directives used to calculate length of namec
 170+ 6E54 44 50 4C    >                db      "DPL"
 170+ 6E57             >len_NFA         defl    $ - temp_NFA
 170+ 6E57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E54             >
 170+ 6E54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E55 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 170+ 6E58             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E57 CC          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E58             >
 170+ 6E58 4A 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E5A             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E5A EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E5C             >                else
 170+ 6E5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E5C             >
 170+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E5C 30          >                db      48
 171+ 6E5D                              User_Def FLD        , "FLD"       , 50 // output field width
 171+ 6E5D             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 171+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E5D             >
 171+ 6E5D             >                // dummy db directives used to calculate length of namec
 171+ 6E5D 46 4C 44    >                db      "FLD"
 171+ 6E60             >len_NFA         defl    $ - temp_NFA
 171+ 6E60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E5D             >
 171+ 6E5D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E5E 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 171+ 6E61             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E60 C4          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E61             >
 171+ 6E61 54 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E63             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E63 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E65             >                else
 171+ 6E65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E65             >
 171+ 6E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E65 32          >                db      50
 172+ 6E66                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 172+ 6E66             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 172+ 6E66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E66             >
 172+ 6E66             >                // dummy db directives used to calculate length of namec
 172+ 6E66 43 53 50    >                db      "CSP"
 172+ 6E69             >len_NFA         defl    $ - temp_NFA
 172+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E66             >
 172+ 6E66 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E67 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 172+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E69 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E6A             >
 172+ 6E6A 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E6C             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E6C EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E6E             >                else
 172+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E6E             >
 172+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E6E 34          >                db      52
 173+ 6E6F                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 173+ 6E6F             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 173+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E6F             >
 173+ 6E6F             >                // dummy db directives used to calculate length of namec
 173+ 6E6F 52 23       >                db      "R#"
 173+ 6E71             >len_NFA         defl    $ - temp_NFA
 173+ 6E71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E6F             >
 173+ 6E6F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E70 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 173+ 6E72             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E71 A3          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E72             >
 173+ 6E72 66 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E74             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E74 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E76             >                else
 173+ 6E76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E76             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E76             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E76             >
 173+ 6E76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E76 36          >                db      54
 174+ 6E77                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 174+ 6E77             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 174+ 6E77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E77             >
 174+ 6E77             >                // dummy db directives used to calculate length of namec
 174+ 6E77 48 4C 44    >                db      "HLD"
 174+ 6E7A             >len_NFA         defl    $ - temp_NFA
 174+ 6E7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E77             >
 174+ 6E77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E78 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 174+ 6E7B             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E7A C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E7B             >
 174+ 6E7B 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E7D             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E7D EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E7F             >                else
 174+ 6E7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E7F             >
 174+ 6E7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E7F 38          >                db      56
 175+ 6E80                              User_Def USE        , "USE"       , 58 // address of last used block
 175+ 6E80             >                New_Def  USE, "USE", User_Ptr, is_normal
 175+ 6E80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E80             >
 175+ 6E80             >                // dummy db directives used to calculate length of namec
 175+ 6E80 55 53 45    >                db      "USE"
 175+ 6E83             >len_NFA         defl    $ - temp_NFA
 175+ 6E83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E80             >
 175+ 6E80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E81 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 175+ 6E84             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E83 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E84             >
 175+ 6E84 77 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E86             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E86 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E88             >                else
 175+ 6E88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E88             >
 175+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E88 3A          >                db      58
 176+ 6E89                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 176+ 6E89             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 176+ 6E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E89             >
 176+ 6E89             >                // dummy db directives used to calculate length of namec
 176+ 6E89 50 52 45 56 >                db      "PREV"
 176+ 6E8D             >len_NFA         defl    $ - temp_NFA
 176+ 6E8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E89             >
 176+ 6E89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E8A 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 176+ 6E8E             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E8D D6          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E8E             >
 176+ 6E8E 80 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E90             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E90 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E92             >                else
 176+ 6E92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E92             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E92             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E92             >
 176+ 6E92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E92 3C          >                db      60
 177+ 6E93                              User_Def LP         , "LP"        , 62 // line printer (not used)
 177+ 6E93             >                New_Def  LP, "LP", User_Ptr, is_normal
 177+ 6E93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E93             >
 177+ 6E93             >                // dummy db directives used to calculate length of namec
 177+ 6E93 4C 50       >                db      "LP"
 177+ 6E95             >len_NFA         defl    $ - temp_NFA
 177+ 6E95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E93             >
 177+ 6E93 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E94 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 177+ 6E96             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E95 D0          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E96             >
 177+ 6E96 89 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E98             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E98 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E9A             >                else
 177+ 6E9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E9A             >
 177+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E9A 3E          >                db      62
 178+ 6E9B                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 178+ 6E9B             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 178+ 6E9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E9B             >
 178+ 6E9B             >                // dummy db directives used to calculate length of namec
 178+ 6E9B 50 4C 41 43 >                db      "PLACE"
 178+ 6E9F 45          >
 178+ 6EA0             >len_NFA         defl    $ - temp_NFA
 178+ 6EA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E9B             >
 178+ 6E9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E9C 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 178+ 6EA0 45          >
 178+ 6EA1             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6EA0 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6EA1             >
 178+ 6EA1 93 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6EA3             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6EA3 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6EA5             >                else
 178+ 6EA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6EA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6EA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6EA5             >
 178+ 6EA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6EA5 40          >                db      64
 179+ 6EA6                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 179+ 6EA6             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 179+ 6EA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6EA6             >
 179+ 6EA6             >                // dummy db directives used to calculate length of namec
 179+ 6EA6 53 4F 55 52 >                db      "SOURCE-ID"
 179+ 6EAA 43 45 2D 49 >
 179+ 6EAE 44          >
 179+ 6EAF             >len_NFA         defl    $ - temp_NFA
 179+ 6EAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6EA6             >
 179+ 6EA6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6EA7 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 179+ 6EAB 43 45 2D 49 >
 179+ 6EAF 44          >
 179+ 6EB0             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6EAF C4          >                db      {b $} | END_BIT     // msb as name end
 179+ 6EB0             >
 179+ 6EB0 9B 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EB2             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EB2 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EB4             >                else
 179+ 6EB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EB4             >
 179+ 6EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EB4 42          >                db      66
 180+ 6EB5                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 180+ 6EB5             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 180+ 6EB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EB5             >
 180+ 6EB5             >                // dummy db directives used to calculate length of namec
 180+ 6EB5 53 50 41 4E >                db      "SPAN"
 180+ 6EB9             >len_NFA         defl    $ - temp_NFA
 180+ 6EB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EB5             >
 180+ 6EB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EB6 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 180+ 6EBA             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EB9 CE          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EBA             >
 180+ 6EBA A6 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EBC             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EBC EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EBE             >                else
 180+ 6EBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EBE             >
 180+ 6EBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EBE 44          >                db      68
 181+ 6EBF                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 181+ 6EBF             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 181+ 6EBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EBF             >
 181+ 6EBF             >                // dummy db directives used to calculate length of namec
 181+ 6EBF 48 41 4E 44 >                db      "HANDLER"
 181+ 6EC3 4C 45 52    >
 181+ 6EC6             >len_NFA         defl    $ - temp_NFA
 181+ 6EC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EBF             >
 181+ 6EBF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EC0 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 181+ 6EC4 4C 45 52    >
 181+ 6EC7             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EC6 D2          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EC7             >
 181+ 6EC7 B5 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EC9             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EC9 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6ECB             >                else
 181+ 6ECB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6ECB             >
 181+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6ECB 46          >                db      70
 182+ 6ECC                              User_Def HP         , "HP"        , 72 // heap-pointer address
 182+ 6ECC             >                New_Def  HP, "HP", User_Ptr, is_normal
 182+ 6ECC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6ECC             >
 182+ 6ECC             >                // dummy db directives used to calculate length of namec
 182+ 6ECC 48 50       >                db      "HP"
 182+ 6ECE             >len_NFA         defl    $ - temp_NFA
 182+ 6ECE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6ECC             >
 182+ 6ECC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6ECD 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 182+ 6ECF             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6ECE D0          >                db      {b $} | END_BIT     // msb as name end
 182+ 6ECF             >
 182+ 6ECF BF 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6ED1             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6ED1 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6ED3             >                else
 182+ 6ED3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6ED3             >
 182+ 6ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6ED3 48          >                db      72
 183+ 6ED4
 184+ 6ED4              //  ______________________________________________________________________
 185+ 6ED4              //
 186+ 6ED4              // here         -- a
 187+ 6ED4                              Colon_Def HERE, "HERE", is_normal
 187+ 6ED4             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 187+ 6ED4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 6ED4             >
 187+ 6ED4             >                // dummy db directives used to calculate length of namec
 187+ 6ED4 48 45 52 45 >                db      "HERE"
 187+ 6ED8             >len_NFA         defl    $ - temp_NFA
 187+ 6ED8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 6ED4             >
 187+ 6ED4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 6ED5 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 187+ 6ED9             >                org     $-1                 // alter last byte of Name just above to set
 187+ 6ED8 C5          >                db      {b $} | END_BIT     // msb as name end
 187+ 6ED9             >
 187+ 6ED9 CC 6E       >                dw      last_NFA            // Link to previous definition Name
 187+ 6EDB             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6EDB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 187+ 6EDD             >                else
 187+ 6EDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 187+ 6EDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6EDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6EDD             >
 187+ 6EDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6EDD BA 6D 9F 6B                  dw      DP, FETCH               // dp @
 189+ 6EE1 AB 69                        dw      EXIT                    // ;
 190+ 6EE3
 191+ 6EE3              //  ______________________________________________________________________
 192+ 6EE3              //
 193+ 6EE3              // allot        n --
 194+ 6EE3                              Colon_Def ALLOT, "ALLOT", is_normal
 194+ 6EE3             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 194+ 6EE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ 6EE3             >
 194+ 6EE3             >                // dummy db directives used to calculate length of namec
 194+ 6EE3 41 4C 4C 4F >                db      "ALLOT"
 194+ 6EE7 54          >
 194+ 6EE8             >len_NFA         defl    $ - temp_NFA
 194+ 6EE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ 6EE3             >
 194+ 6EE3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ 6EE4 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 194+ 6EE8 54          >
 194+ 6EE9             >                org     $-1                 // alter last byte of Name just above to set
 194+ 6EE8 D4          >                db      {b $} | END_BIT     // msb as name end
 194+ 6EE9             >
 194+ 6EE9 D4 6E       >                dw      last_NFA            // Link to previous definition Name
 194+ 6EEB             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 6EEB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 194+ 6EED             >                else
 194+ 6EED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 194+ 6EED             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 6EED             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 6EED             >
 194+ 6EED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195+ 6EED BA 6D 7C 6B                  dw      DP,  PLUSSTORE          // dp +!
 196+ 6EF1 AB 69                        dw      EXIT                    // ;
 197+ 6EF3
 198+ 6EF3              //  ______________________________________________________________________
 199+ 6EF3              //
 200+ 6EF3              // comma        n --
 201+ 6EF3                              Colon_Def COMMA, ",", is_normal
 201+ 6EF3             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 201+ 6EF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 201+ 6EF3             >
 201+ 6EF3             >                // dummy db directives used to calculate length of namec
 201+ 6EF3 2C          >                db      ","
 201+ 6EF4             >len_NFA         defl    $ - temp_NFA
 201+ 6EF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 201+ 6EF3             >
 201+ 6EF3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 201+ 6EF4 2C          >                db      ","               // name string in 7-bit ascii, but
 201+ 6EF5             >                org     $-1                 // alter last byte of Name just above to set
 201+ 6EF4 AC          >                db      {b $} | END_BIT     // msb as name end
 201+ 6EF5             >
 201+ 6EF5 E3 6E       >                dw      last_NFA            // Link to previous definition Name
 201+ 6EF7             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 201+ 6EF7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 201+ 6EF9             >                else
 201+ 6EF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 201+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 201+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 201+ 6EF9             >
 201+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 202+ 6EF9 DB 6E AC 6B                  dw      HERE, STORE             // here !
 203+ 6EFD 0C 6D EB 6E                  dw      TWO, ALLOT              // 2 allot
 204+ 6F01 AB 69                        dw      EXIT                    // ;
 205+ 6F03
 206+ 6F03              //  ______________________________________________________________________
 207+ 6F03              //
 208+ 6F03              // ccomma       c --
 209+ 6F03                              Colon_Def CCOMMA, "C,", is_normal
 209+ 6F03             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 209+ 6F03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 6F03             >
 209+ 6F03             >                // dummy db directives used to calculate length of namec
 209+ 6F03 43 2C       >                db      "C,"
 209+ 6F05             >len_NFA         defl    $ - temp_NFA
 209+ 6F05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 6F03             >
 209+ 6F03 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 6F04 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 209+ 6F06             >                org     $-1                 // alter last byte of Name just above to set
 209+ 6F05 AC          >                db      {b $} | END_BIT     // msb as name end
 209+ 6F06             >
 209+ 6F06 F3 6E       >                dw      last_NFA            // Link to previous definition Name
 209+ 6F08             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 6F08 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 6F0A             >                else
 209+ 6F0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 209+ 6F0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 6F0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 6F0A             >
 209+ 6F0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 6F0A DB 6E C8 6B                  dw      HERE, CSTORE            // here c!
 211+ 6F0E 04 6D EB 6E                  dw      ONE, ALLOT              // 1 allot
 212+ 6F12 AB 69                        dw      EXIT                    // ;
 213+ 6F14
 214+ 6F14              //  ______________________________________________________________________
 215+ 6F14              //
 216+ 6F14              // s>d          n -- d
 217+ 6F14              // converts a single precision integer in a double precision
 218+ 6F14                              New_Def S_TO_D, "S>D", is_code, is_normal
 218+ 6F14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6F14             >
 218+ 6F14             >                // dummy db directives used to calculate length of namec
 218+ 6F14 53 3E 44    >                db      "S>D"
 218+ 6F17             >len_NFA         defl    $ - temp_NFA
 218+ 6F17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6F14             >
 218+ 6F14 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6F15 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 218+ 6F18             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6F17 C4          >                db      {b $} | END_BIT     // msb as name end
 218+ 6F18             >
 218+ 6F18 03 6F       >                dw      last_NFA            // Link to previous definition Name
 218+ 6F1A             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 6F1A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 6F1A             >                else
 218+ 6F1A 1C 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 6F1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 6F1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 6F1C             >
 218+ 6F1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 6F1C E1                           pop     hl
 220+ 6F1D 7C                           ld      a, h
 221+ 6F1E E5                           push    hl
 222+ 6F1F 17                           rla
 223+ 6F20 ED 62                        sbc     hl, hl
 224+ 6F22 E5                           push    hl
 225+ 6F23                              next
 225+ 6F23 DD E9       >                jp      (ix)
 226+ 6F25
 227+ 6F25              //  ______________________________________________________________________
 228+ 6F25              //
 229+ 6F25              // -            n1 n2 -- n3
 230+ 6F25              // subtraction
 231+ 6F25                              New_Def SUBTRACT, "-", is_code, is_normal
 231+ 6F25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 231+ 6F25             >
 231+ 6F25             >                // dummy db directives used to calculate length of namec
 231+ 6F25 2D          >                db      "-"
 231+ 6F26             >len_NFA         defl    $ - temp_NFA
 231+ 6F26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 231+ 6F25             >
 231+ 6F25 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 231+ 6F26 2D          >                db      "-"               // name string in 7-bit ascii, but
 231+ 6F27             >                org     $-1                 // alter last byte of Name just above to set
 231+ 6F26 AD          >                db      {b $} | END_BIT     // msb as name end
 231+ 6F27             >
 231+ 6F27 14 6F       >                dw      last_NFA            // Link to previous definition Name
 231+ 6F29             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 231+ 6F29 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 231+ 6F29             >                else
 231+ 6F29 2B 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 231+ 6F2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 231+ 6F2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 231+ 6F2B             >
 231+ 6F2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 232+ 6F2B D1                           pop     de
 233+ 6F2C E1                           pop     hl
 234+ 6F2D A7                           and     a
 235+ 6F2E ED 52                        sbc     hl, de
 236+ 6F30
 237+ 6F30                              psh1
 237+ 6F30 E5          >                push    hl
 237+ 6F31 DD E9       >                jp      (ix)
 238+ 6F33
 239+ 6F33              //  ______________________________________________________________________
 240+ 6F33              //
 241+ 6F33              // =            n1 n2 -- n3
 242+ 6F33              // equals
 243+ 6F33                              Colon_Def EQUALS, "=", is_normal
 243+ 6F33             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 243+ 6F33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ 6F33             >
 243+ 6F33             >                // dummy db directives used to calculate length of namec
 243+ 6F33 3D          >                db      "="
 243+ 6F34             >len_NFA         defl    $ - temp_NFA
 243+ 6F34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ 6F33             >
 243+ 6F33 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ 6F34 3D          >                db      "="               // name string in 7-bit ascii, but
 243+ 6F35             >                org     $-1                 // alter last byte of Name just above to set
 243+ 6F34 BD          >                db      {b $} | END_BIT     // msb as name end
 243+ 6F35             >
 243+ 6F35 25 6F       >                dw      last_NFA            // Link to previous definition Name
 243+ 6F37             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 6F37 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 243+ 6F39             >                else
 243+ 6F39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 243+ 6F39             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 6F39             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 6F39             >
 243+ 6F39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 6F39 29 6F ED 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 245+ 6F3D AB 69                        dw      EXIT                    // ;
 246+ 6F3F
 247+ 6F3F              //  ______________________________________________________________________
 248+ 6F3F              //
 249+ 6F3F              // u<           u1 u2 -- u3
 250+ 6F3F              // unsigned less-than
 251+ 6F3F                              New_Def ULESS, "U<", is_code, is_normal
 251+ 6F3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 6F3F             >
 251+ 6F3F             >                // dummy db directives used to calculate length of namec
 251+ 6F3F 55 3C       >                db      "U<"
 251+ 6F41             >len_NFA         defl    $ - temp_NFA
 251+ 6F41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 6F3F             >
 251+ 6F3F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 6F40 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 251+ 6F42             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6F41 BC          >                db      {b $} | END_BIT     // msb as name end
 251+ 6F42             >
 251+ 6F42 33 6F       >                dw      last_NFA            // Link to previous definition Name
 251+ 6F44             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6F44 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 251+ 6F44             >                else
 251+ 6F44 46 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 251+ 6F46             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6F46             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6F46             >
 251+ 6F46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6F46 D1                           pop     de
 253+ 6F47 E1                           pop     hl
 254+ 6F48 A7                           and     a
 255+ 6F49 ED 52                        sbc     hl, de
 256+ 6F4B ED 62                        sbc     hl, hl
 257+ 6F4D E5                           push    hl
 258+ 6F4E                              next
 258+ 6F4E DD E9       >                jp      (ix)
 259+ 6F50
 260+ 6F50              //  ______________________________________________________________________
 261+ 6F50              //
 262+ 6F50              // <           n1 n2 -- n3
 263+ 6F50              // less-than
 264+ 6F50                              New_Def LESS, "<", is_code, is_normal
 264+ 6F50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F50             >
 264+ 6F50             >                // dummy db directives used to calculate length of namec
 264+ 6F50 3C          >                db      "<"
 264+ 6F51             >len_NFA         defl    $ - temp_NFA
 264+ 6F51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F50             >
 264+ 6F50 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F51 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F52             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F51 BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F52             >
 264+ 6F52 3F 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F54             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F54 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F54             >                else
 264+ 6F54 56 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6F56             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6F56             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6F56             >
 264+ 6F56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6F56 D1                           pop     de
 266+ 6F57 E1                           pop     hl
 267+ 6F58 7C                           ld      a, h
 268+ 6F59 EE 80                        xor     $80
 269+ 6F5B 67                           ld      h, a
 270+ 6F5C 7A                           ld      a, d
 271+ 6F5D EE 80                        xor     $80
 272+ 6F5F 57                           ld      d, a
 273+ 6F60              //              and     a
 274+ 6F60 ED 52                        sbc     hl, de
 275+ 6F62 ED 62                        sbc     hl, hl
 276+ 6F64                              psh1
 276+ 6F64 E5          >                push    hl
 276+ 6F65 DD E9       >                jp      (ix)
 277+ 6F67
 278+ 6F67              //  ______________________________________________________________________
 279+ 6F67              //
 280+ 6F67              // >            n1 n2 -- n3
 281+ 6F67              // greater than
 282+ 6F67                              Colon_Def GREATER, ">", is_normal
 282+ 6F67             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 282+ 6F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 282+ 6F67             >
 282+ 6F67             >                // dummy db directives used to calculate length of namec
 282+ 6F67 3E          >                db      ">"
 282+ 6F68             >len_NFA         defl    $ - temp_NFA
 282+ 6F68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 282+ 6F67             >
 282+ 6F67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 282+ 6F68 3E          >                db      ">"               // name string in 7-bit ascii, but
 282+ 6F69             >                org     $-1                 // alter last byte of Name just above to set
 282+ 6F68 BE          >                db      {b $} | END_BIT     // msb as name end
 282+ 6F69             >
 282+ 6F69 50 6F       >                dw      last_NFA            // Link to previous definition Name
 282+ 6F6B             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 282+ 6F6B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 282+ 6F6D             >                else
 282+ 6F6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 282+ 6F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 282+ 6F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 282+ 6F6D             >
 282+ 6F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 283+ 6F6D FF 6A 54 6F                  dw      SWAP, LESS              // swap <
 284+ 6F71 AB 69                        dw      EXIT                    // ;
 285+ 6F73              //  ______________________________________________________________________
 286+ 6F73              //
 287+ 6F73              // min          n1 n2 -- n3
 288+ 6F73              // minimum between n1 and n2
 289+ 6F73                              Colon_Def MIN, "MIN" , is_normal
 289+ 6F73             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 289+ 6F73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 289+ 6F73             >
 289+ 6F73             >                // dummy db directives used to calculate length of namec
 289+ 6F73 4D 49 4E    >                db      "MIN"
 289+ 6F76             >len_NFA         defl    $ - temp_NFA
 289+ 6F76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 289+ 6F73             >
 289+ 6F73 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 289+ 6F74 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 289+ 6F77             >                org     $-1                 // alter last byte of Name just above to set
 289+ 6F76 CE          >                db      {b $} | END_BIT     // msb as name end
 289+ 6F77             >
 289+ 6F77 67 6F       >                dw      last_NFA            // Link to previous definition Name
 289+ 6F79             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 289+ 6F79 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 289+ 6F7B             >                else
 289+ 6F7B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 289+ 6F7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 289+ 6F7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 289+ 6F7B             >
 289+ 6F7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 290+ 6F7B 6D 6B                        dw      TWO_DUP                 // 2dup
 291+ 6F7D 6B 6F                        dw      GREATER                 // >
 292+ 6F7F 2C 64                        dw      ZBRANCH
 293+ 6F81 04 00                        dw      Min_Skip - $   // if
 294+ 6F83 FF 6A                        dw          SWAP                //      swap
 295+ 6F85              Min_Skip:                                       // endif
 296+ 6F85 D7 6A                        dw      DROP                    // drop
 297+ 6F87 AB 69                        dw      EXIT                    // ;
 298+ 6F89
 299+ 6F89              //  ______________________________________________________________________
 300+ 6F89              //
 301+ 6F89              // max          n1 n2 -- n3
 302+ 6F89              // maximum between n1 and n2
 303+ 6F89                              Colon_Def MAX, "MAX", is_normal
 303+ 6F89             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 303+ 6F89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6F89             >
 303+ 6F89             >                // dummy db directives used to calculate length of namec
 303+ 6F89 4D 41 58    >                db      "MAX"
 303+ 6F8C             >len_NFA         defl    $ - temp_NFA
 303+ 6F8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6F89             >
 303+ 6F89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6F8A 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 303+ 6F8D             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6F8C D8          >                db      {b $} | END_BIT     // msb as name end
 303+ 6F8D             >
 303+ 6F8D 73 6F       >                dw      last_NFA            // Link to previous definition Name
 303+ 6F8F             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6F8F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 6F91             >                else
 303+ 6F91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 6F91             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6F91             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6F91             >
 303+ 6F91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6F91 6D 6B                        dw      TWO_DUP                 // 2dup
 305+ 6F93 54 6F                        dw      LESS                    // <
 306+ 6F95 2C 64                        dw      ZBRANCH
 307+ 6F97 04 00                        dw      Max_Skip - $   // if
 308+ 6F99 FF 6A                        dw          SWAP                //      swap
 309+ 6F9B              Max_Skip:                                       // endif
 310+ 6F9B D7 6A                        dw      DROP                    // drop
 311+ 6F9D AB 69                        dw      EXIT                    // ;
 312+ 6F9F
 313+ 6F9F              //  ______________________________________________________________________
 314+ 6F9F              //
 315+ 6F9F              // ?dup         n -- 0 | n n
 316+ 6F9F              // duplicate if not zero
 317+ 6F9F                              New_Def QDUP, "?DUP", is_code, is_normal
 317+ 6F9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ 6F9F             >
 317+ 6F9F             >                // dummy db directives used to calculate length of namec
 317+ 6F9F 3F 44 55 50 >                db      "?DUP"
 317+ 6FA3             >len_NFA         defl    $ - temp_NFA
 317+ 6FA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ 6F9F             >
 317+ 6F9F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ 6FA0 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 317+ 6FA4             >                org     $-1                 // alter last byte of Name just above to set
 317+ 6FA3 D0          >                db      {b $} | END_BIT     // msb as name end
 317+ 6FA4             >
 317+ 6FA4 89 6F       >                dw      last_NFA            // Link to previous definition Name
 317+ 6FA6             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 6FA6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 317+ 6FA6             >                else
 317+ 6FA6 A8 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 317+ 6FA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 6FA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 6FA8             >
 317+ 6FA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 6FA8              QDup_Ptr:
 319+ 6FA8 E1                           pop     hl
 320+ 6FA9 7C                           ld      a, h
 321+ 6FAA B5                           or      l
 322+ 6FAB 28 01                        jr      z, QDup_Skip
 323+ 6FAD E5                               push    hl
 324+ 6FAE              QDup_Skip:
 325+ 6FAE                              psh1
 325+ 6FAE E5          >                push    hl
 325+ 6FAF DD E9       >                jp      (ix)
 326+ 6FB1
 327+ 6FB1              //  ______________________________________________________________________
 328+ 6FB1              //
 329+ 6FB1              // -dup         n -- 0 | n n
 330+ 6FB1              // duplicate if not zero
 331+ 6FB1                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 331+ 6FB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 6FB1             >
 331+ 6FB1             >                // dummy db directives used to calculate length of namec
 331+ 6FB1 2D 44 55 50 >                db      "-DUP"
 331+ 6FB5             >len_NFA         defl    $ - temp_NFA
 331+ 6FB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 6FB1             >
 331+ 6FB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 6FB2 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 331+ 6FB6             >                org     $-1                 // alter last byte of Name just above to set
 331+ 6FB5 D0          >                db      {b $} | END_BIT     // msb as name end
 331+ 6FB6             >
 331+ 6FB6 9F 6F       >                dw      last_NFA            // Link to previous definition Name
 331+ 6FB8             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 6FB8 A8 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 331+ 6FBA             >                else
 331+ 6FBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 6FBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 6FBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 6FBA             >
 331+ 6FBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 6FBA
 333+ 6FBA              //  ______________________________________________________________________
 334+ 6FBA              //
 335+ 6FBA              // emit         c --
 336+ 6FBA                              Colon_Def EMIT, "EMIT", is_normal
 336+ 6FBA             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 336+ 6FBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 6FBA             >
 336+ 6FBA             >                // dummy db directives used to calculate length of namec
 336+ 6FBA 45 4D 49 54 >                db      "EMIT"
 336+ 6FBE             >len_NFA         defl    $ - temp_NFA
 336+ 6FBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 6FBA             >
 336+ 6FBA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 6FBB 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 336+ 6FBF             >                org     $-1                 // alter last byte of Name just above to set
 336+ 6FBE D4          >                db      {b $} | END_BIT     // msb as name end
 336+ 6FBF             >
 336+ 6FBF B1 6F       >                dw      last_NFA            // Link to previous definition Name
 336+ 6FC1             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6FC1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 6FC3             >                else
 336+ 6FC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 6FC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6FC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6FC3             >
 336+ 6FC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6FC3 53 66                        dw      C_EMIT                      // (?emit)
 338+ 6FC5 A6 6F                        dw      QDUP                        // ?dup
 339+ 6FC7                                                                  // if
 340+ 6FC7 2C 64                        dw      ZBRANCH
 341+ 6FC9 0A 00                        dw      Emit_Skip - $
 342+ 6FCB 14 66                        dw          EMITC                   //      emitc
 343+ 6FCD 04 6D                        dw          ONE                     //      1
 344+ 6FCF 0D 6E 7C 6B                  dw          OUT, PLUSSTORE        //      out +!
 345+ 6FD3              Emit_Skip:                                          // endif
 346+ 6FD3 AB 69                        dw      EXIT                        // ;
 347+ 6FD5
 348+ 6FD5              //  ______________________________________________________________________
 349+ 6FD5              //
 350+ 6FD5              // space        --
 351+ 6FD5                              Colon_Def SPACE, "SPACE", is_normal
 351+ 6FD5             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 351+ 6FD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ 6FD5             >
 351+ 6FD5             >                // dummy db directives used to calculate length of namec
 351+ 6FD5 53 50 41 43 >                db      "SPACE"
 351+ 6FD9 45          >
 351+ 6FDA             >len_NFA         defl    $ - temp_NFA
 351+ 6FDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ 6FD5             >
 351+ 6FD5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ 6FD6 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 351+ 6FDA 45          >
 351+ 6FDB             >                org     $-1                 // alter last byte of Name just above to set
 351+ 6FDA C5          >                db      {b $} | END_BIT     // msb as name end
 351+ 6FDB             >
 351+ 6FDB BA 6F       >                dw      last_NFA            // Link to previous definition Name
 351+ 6FDD             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 6FDD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 351+ 6FDF             >                else
 351+ 6FDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 351+ 6FDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 6FDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 6FDF             >
 351+ 6FDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 6FDF 26 6D C1 6F                  dw      BL, EMIT                // bl emit
 353+ 6FE3 AB 69                        dw      EXIT                    // ;
 354+ 6FE5
 355+ 6FE5              //  ______________________________________________________________________
 356+ 6FE5              //
 357+ 6FE5              // traverse     a n -- a
 358+ 6FE5              // A dictionary entry is structured as follows
 359+ 6FE5              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 360+ 6FE5              //      +1   word name, last character is toggled with $80
 361+ 6FE5              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 362+ 6FE5              // CFA: +3+n routine address. Colon definitions here have pointer to code
 363+ 6FE5              // PFA: +5+n "is_code", definitions have no PFA.
 364+ 6FE5              //
 365+ 6FE5                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 365+ 6FE5             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 365+ 6FE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 6FE5             >
 365+ 6FE5             >                // dummy db directives used to calculate length of namec
 365+ 6FE5 54 52 41 56 >                db      "TRAVERSE"
 365+ 6FE9 45 52 53 45 >
 365+ 6FED             >len_NFA         defl    $ - temp_NFA
 365+ 6FED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 6FE5             >
 365+ 6FE5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 6FE6 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 365+ 6FEA 45 52 53 45 >
 365+ 6FEE             >                org     $-1                 // alter last byte of Name just above to set
 365+ 6FED C5          >                db      {b $} | END_BIT     // msb as name end
 365+ 6FEE             >
 365+ 6FEE D5 6F       >                dw      last_NFA            // Link to previous definition Name
 365+ 6FF0             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 6FF0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 6FF2             >                else
 365+ 6FF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 365+ 6FF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 6FF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 6FF2             >
 365+ 6FF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 6FF2 FF 6A                        dw      SWAP                    // swap
 367+ 6FF4              Traverse_Begin:                                 // begin
 368+ 6FF4 C7 6A 2C 6A                  dw          OVER, PLUS          //      over +
 369+ 6FF8 A9 63 7F 00                  dw          LIT, 127            //      127
 370+ 6FFC C7 6A BA 6B                  dw          OVER, CFETCH        //      over @
 371+ 7000 54 6F                        dw          LESS                //      <
 372+ 7002                                                              // until
 373+ 7002 2C 64                        dw      ZBRANCH
 374+ 7004 F0 FF                        dw      Traverse_Begin - $
 375+ 7006 E2 6A                        dw      NIP                     //  nip
 376+ 7008 AB 69                        dw      EXIT                    //  ;
 377+ 700A
 378+ 700A              //  ______________________________________________________________________
 379+ 700A              //
 380+ 700A              // latest       -- nfa
 381+ 700A                              Colon_Def LATEST, "LATEST", is_normal
 381+ 700A             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 381+ 700A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 381+ 700A             >
 381+ 700A             >                // dummy db directives used to calculate length of namec
 381+ 700A 4C 41 54 45 >                db      "LATEST"
 381+ 700E 53 54       >
 381+ 7010             >len_NFA         defl    $ - temp_NFA
 381+ 7010             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 381+ 700A             >
 381+ 700A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 381+ 700B 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 381+ 700F 53 54       >
 381+ 7011             >                org     $-1                 // alter last byte of Name just above to set
 381+ 7010 D4          >                db      {b $} | END_BIT     // msb as name end
 381+ 7011             >
 381+ 7011 E5 6F       >                dw      last_NFA            // Link to previous definition Name
 381+ 7013             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 381+ 7013 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 381+ 7015             >                else
 381+ 7015 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 381+ 7015             >                endif           ; ok        // for other definitions it "points" the correct handler
 381+ 7015             >                // Use of "; ok" to suppress "warning[fwdref]"
 381+ 7015             >
 381+ 7015             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 382+ 7015 3C 6E                        dw      CURRENT                 // current
 383+ 7017 9F 6B 9F 6B                  dw      FETCH, FETCH            // @ @
 384+ 701B AB 69                        dw      EXIT                    // ;
 385+ 701D
 386+ 701D              //  ______________________________________________________________________
 387+ 701D              //
 388+ 701D              // lfa          pfa -- lfa
 389+ 701D                              Colon_Def LFA, "LFA", is_normal
 389+ 701D             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 389+ 701D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 701D             >
 389+ 701D             >                // dummy db directives used to calculate length of namec
 389+ 701D 4C 46 41    >                db      "LFA"
 389+ 7020             >len_NFA         defl    $ - temp_NFA
 389+ 7020             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 701D             >
 389+ 701D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 701E 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 389+ 7021             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7020 C1          >                db      {b $} | END_BIT     // msb as name end
 389+ 7021             >
 389+ 7021 0A 70       >                dw      last_NFA            // Link to previous definition Name
 389+ 7023             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 7023 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 7025             >                else
 389+ 7025 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 7025             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 7025             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 7025             >
 389+ 7025             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 7025 7F 6A                        dw      CELL_MINUS              // cell-
 391+ 7027 7F 6A                        dw      CELL_MINUS              // cell-
 392+ 7029 AB 69                        dw      EXIT                    // ;
 393+ 702B
 394+ 702B              //  ______________________________________________________________________
 395+ 702B              //
 396+ 702B              // cfa          pfa -- cfa
 397+ 702B                              Colon_Def CFA, "CFA", is_normal
 397+ 702B             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 397+ 702B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 702B             >
 397+ 702B             >                // dummy db directives used to calculate length of namec
 397+ 702B 43 46 41    >                db      "CFA"
 397+ 702E             >len_NFA         defl    $ - temp_NFA
 397+ 702E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 702B             >
 397+ 702B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 702C 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 397+ 702F             >                org     $-1                 // alter last byte of Name just above to set
 397+ 702E C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 702F             >
 397+ 702F 1D 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 7031             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 7031 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 7033             >                else
 397+ 7033 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 7033             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 7033             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 7033             >
 397+ 7033             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 7033 7F 6A                        dw      CELL_MINUS              // cell-
 399+ 7035 AB 69                        dw      EXIT                    // ;
 400+ 7037
 401+ 7037              //  ______________________________________________________________________
 402+ 7037              //
 403+ 7037              // nfa          pfa -- nfa
 404+ 7037                              Colon_Def NFA, "NFA", is_normal
 404+ 7037             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 404+ 7037             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 7037             >
 404+ 7037             >                // dummy db directives used to calculate length of namec
 404+ 7037 4E 46 41    >                db      "NFA"
 404+ 703A             >len_NFA         defl    $ - temp_NFA
 404+ 703A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 7037             >
 404+ 7037 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7038 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 404+ 703B             >                org     $-1                 // alter last byte of Name just above to set
 404+ 703A C1          >                db      {b $} | END_BIT     // msb as name end
 404+ 703B             >
 404+ 703B 2B 70       >                dw      last_NFA            // Link to previous definition Name
 404+ 703D             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 703D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 703F             >                else
 404+ 703F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 703F             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 703F             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 703F             >
 404+ 703F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 703F A9 63 05 00                  dw      LIT, 5                  // 5
 406+ 7043 29 6F                        dw      SUBTRACT                // -
 407+ 7045 1D 6D                        dw      NEG_ONE                 // -1
 408+ 7047 F0 6F                        dw      TRAVERSE                // traverse
 409+ 7049 AB 69                        dw      EXIT                    // ;
 410+ 704B
 411+ 704B              //  ______________________________________________________________________
 412+ 704B              //
 413+ 704B              // pfa          nfa -- pfa
 414+ 704B                              Colon_Def PFA, "PFA", is_normal
 414+ 704B             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 414+ 704B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ 704B             >
 414+ 704B             >                // dummy db directives used to calculate length of namec
 414+ 704B 50 46 41    >                db      "PFA"
 414+ 704E             >len_NFA         defl    $ - temp_NFA
 414+ 704E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ 704B             >
 414+ 704B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ 704C 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 414+ 704F             >                org     $-1                 // alter last byte of Name just above to set
 414+ 704E C1          >                db      {b $} | END_BIT     // msb as name end
 414+ 704F             >
 414+ 704F 37 70       >                dw      last_NFA            // Link to previous definition Name
 414+ 7051             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 7051 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 7053             >                else
 414+ 7053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 414+ 7053             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 7053             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 7053             >
 414+ 7053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 7053 04 6D                        dw      ONE                     // 1
 416+ 7055 F0 6F                        dw      TRAVERSE                // traverse
 417+ 7057 A9 63 05 00                  dw      LIT, 5                  // 6
 418+ 705B 2C 6A                        dw      PLUS                    // +
 419+ 705D AB 69                        dw      EXIT                    // ;
 420+ 705F
 421+ 705F              //  ______________________________________________________________________
 422+ 705F              //
 423+ 705F              // >body        cfa -- pfa
 424+ 705F                              Colon_Def TO_BODY, ">BODY", is_normal
 424+ 705F             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 424+ 705F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 424+ 705F             >
 424+ 705F             >                // dummy db directives used to calculate length of namec
 424+ 705F 3E 42 4F 44 >                db      ">BODY"
 424+ 7063 59          >
 424+ 7064             >len_NFA         defl    $ - temp_NFA
 424+ 7064             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 424+ 705F             >
 424+ 705F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 424+ 7060 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 424+ 7064 59          >
 424+ 7065             >                org     $-1                 // alter last byte of Name just above to set
 424+ 7064 D9          >                db      {b $} | END_BIT     // msb as name end
 424+ 7065             >
 424+ 7065 4B 70       >                dw      last_NFA            // Link to previous definition Name
 424+ 7067             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 424+ 7067 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 424+ 7069             >                else
 424+ 7069 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 424+ 7069             >                endif           ; ok        // for other definitions it "points" the correct handler
 424+ 7069             >                // Use of "; ok" to suppress "warning[fwdref]"
 424+ 7069             >
 424+ 7069             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 425+ 7069 75 6A                        dw      CELL_PLUS               // cell+
 426+ 706B AB 69                        dw      EXIT                    // ;
 427+ 706D
 428+ 706D              //  ______________________________________________________________________
 429+ 706D              //
 430+ 706D              // <name        cfa -- nfa
 431+ 706D                              Colon_Def TO_NAME, "<NAME", is_normal
 431+ 706D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 431+ 706D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 706D             >
 431+ 706D             >                // dummy db directives used to calculate length of namec
 431+ 706D 3C 4E 41 4D >                db      "<NAME"
 431+ 7071 45          >
 431+ 7072             >len_NFA         defl    $ - temp_NFA
 431+ 7072             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 706D             >
 431+ 706D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 706E 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 431+ 7072 45          >
 431+ 7073             >                org     $-1                 // alter last byte of Name just above to set
 431+ 7072 C5          >                db      {b $} | END_BIT     // msb as name end
 431+ 7073             >
 431+ 7073 5F 70       >                dw      last_NFA            // Link to previous definition Name
 431+ 7075             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 7075 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 7077             >                else
 431+ 7077 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 431+ 7077             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 7077             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 7077             >
 431+ 7077             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 7077 67 70                        dw      TO_BODY                 // >body
 433+ 7079 3D 70                        dw      NFA                     // nfa
 434+ 707B AB 69                        dw      EXIT                    // ;
 435+ 707D
 436+ 707D              //  ______________________________________________________________________
 437+ 707D              //
 438+ 707D              // !csp         --
 439+ 707D              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 440+ 707D                              Colon_Def STORE_CSP, "!CSP", is_normal
 440+ 707D             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 440+ 707D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ 707D             >
 440+ 707D             >                // dummy db directives used to calculate length of namec
 440+ 707D 21 43 53 50 >                db      "!CSP"
 440+ 7081             >len_NFA         defl    $ - temp_NFA
 440+ 7081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ 707D             >
 440+ 707D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ 707E 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 440+ 7082             >                org     $-1                 // alter last byte of Name just above to set
 440+ 7081 D0          >                db      {b $} | END_BIT     // msb as name end
 440+ 7082             >
 440+ 7082 6D 70       >                dw      last_NFA            // Link to previous definition Name
 440+ 7084             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 7084 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 7086             >                else
 440+ 7086 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 440+ 7086             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 7086             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 7086             >
 440+ 7086             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 7086 73 69                        dw      SPFETCH                 // sp@
 442+ 7088 6C 6E AC 6B                  dw      CSP, STORE              // csp !
 443+ 708C AB 69                        dw      EXIT                    // ;
 444+ 708E
 445+ 708E              //  ______________________________________________________________________
 446+ 708E              //
 447+ 708E              // ?error       f n --
 448+ 708E              // rase error n if flag f it true
 449+ 708E                              Colon_Def QERROR, "?ERROR", is_normal
 449+ 708E             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 449+ 708E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ 708E             >
 449+ 708E             >                // dummy db directives used to calculate length of namec
 449+ 708E 3F 45 52 52 >                db      "?ERROR"
 449+ 7092 4F 52       >
 449+ 7094             >len_NFA         defl    $ - temp_NFA
 449+ 7094             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ 708E             >
 449+ 708E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ 708F 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 449+ 7093 4F 52       >
 449+ 7095             >                org     $-1                 // alter last byte of Name just above to set
 449+ 7094 D2          >                db      {b $} | END_BIT     // msb as name end
 449+ 7095             >
 449+ 7095 7D 70       >                dw      last_NFA            // Link to previous definition Name
 449+ 7097             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7097 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7099             >                else
 449+ 7099 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 449+ 7099             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7099             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7099             >
 449+ 7099             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7099 FF 6A                        dw      SWAP                    // swap
 451+ 709B                                                              // if
 452+ 709B 2C 64                        dw      ZBRANCH
 453+ 709D 08 00                        dw      QError_Else - $
 454+ 709F 01 76                        dw          ERROR               //      error  ( is a forward-ref )
 455+ 70A1                                                              // else
 456+ 70A1 15 64                        dw      BRANCH
 457+ 70A3 04 00                        dw      QError_Endif - $
 458+ 70A5              QError_Else:
 459+ 70A5 D7 6A                        dw          DROP                //      drop
 460+ 70A7              QError_Endif:                                   // endif
 461+ 70A7 AB 69                        dw      EXIT                    // ;
 462+ 70A9
 463+ 70A9              //  ______________________________________________________________________
 464+ 70A9              //
 465+ 70A9              // ?comp       --
 466+ 70A9              // raise msg #17 if not compiling
 467+ 70A9                              Colon_Def QCOMP, "?COMP", is_normal
 467+ 70A9             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 467+ 70A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 70A9             >
 467+ 70A9             >                // dummy db directives used to calculate length of namec
 467+ 70A9 3F 43 4F 4D >                db      "?COMP"
 467+ 70AD 50          >
 467+ 70AE             >len_NFA         defl    $ - temp_NFA
 467+ 70AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 70A9             >
 467+ 70A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 70AA 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 467+ 70AE 50          >
 467+ 70AF             >                org     $-1                 // alter last byte of Name just above to set
 467+ 70AE D0          >                db      {b $} | END_BIT     // msb as name end
 467+ 70AF             >
 467+ 70AF 8E 70       >                dw      last_NFA            // Link to previous definition Name
 467+ 70B1             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 70B1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 70B3             >                else
 467+ 70B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 70B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 70B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 70B3             >
 467+ 70B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 70B3 47 6E 9F 6B                  dw      STATE, FETCH            // state @
 469+ 70B7 ED 69                        dw      ZEQUAL                  // 0=
 470+ 70B9 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 471+ 70BD 97 70                        dw      QERROR                  // ?error
 472+ 70BF AB 69                        dw      EXIT                    // ;
 473+ 70C1
 474+ 70C1              //  ______________________________________________________________________
 475+ 70C1              //
 476+ 70C1              // ?exec       --
 477+ 70C1              // raise msg #18 if compiling
 478+ 70C1                              Colon_Def QEXEC, "?EXEC", is_normal
 478+ 70C1             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 478+ 70C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 70C1             >
 478+ 70C1             >                // dummy db directives used to calculate length of namec
 478+ 70C1 3F 45 58 45 >                db      "?EXEC"
 478+ 70C5 43          >
 478+ 70C6             >len_NFA         defl    $ - temp_NFA
 478+ 70C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 70C1             >
 478+ 70C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 70C2 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 478+ 70C6 43          >
 478+ 70C7             >                org     $-1                 // alter last byte of Name just above to set
 478+ 70C6 C3          >                db      {b $} | END_BIT     // msb as name end
 478+ 70C7             >
 478+ 70C7 A9 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 70C9             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 70C9 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 70CB             >                else
 478+ 70CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 70CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 70CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 70CB             >
 478+ 70CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 70CB 47 6E 9F 6B                  dw      STATE, FETCH            // state @
 480+ 70CF A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 481+ 70D3 97 70                        dw      QERROR                  // ?error
 482+ 70D5 AB 69                        dw      EXIT                    // ;
 483+ 70D7
 484+ 70D7              //  ______________________________________________________________________
 485+ 70D7              //
 486+ 70D7              // ?pairs       n1 n2 --
 487+ 70D7              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 488+ 70D7                              Colon_Def QPAIRS, "?PAIRS", is_normal
 488+ 70D7             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 488+ 70D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ 70D7             >
 488+ 70D7             >                // dummy db directives used to calculate length of namec
 488+ 70D7 3F 50 41 49 >                db      "?PAIRS"
 488+ 70DB 52 53       >
 488+ 70DD             >len_NFA         defl    $ - temp_NFA
 488+ 70DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ 70D7             >
 488+ 70D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ 70D8 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 488+ 70DC 52 53       >
 488+ 70DE             >                org     $-1                 // alter last byte of Name just above to set
 488+ 70DD D3          >                db      {b $} | END_BIT     // msb as name end
 488+ 70DE             >
 488+ 70DE C1 70       >                dw      last_NFA            // Link to previous definition Name
 488+ 70E0             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 70E0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 70E2             >                else
 488+ 70E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 488+ 70E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 70E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 70E2             >
 488+ 70E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 70E2 29 6F                        dw      SUBTRACT                // -
 490+ 70E4 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 491+ 70E8 97 70                        dw      QERROR                  // ?error
 492+ 70EA AB 69                        dw      EXIT                    // ;
 493+ 70EC
 494+ 70EC              //  ______________________________________________________________________
 495+ 70EC              //
 496+ 70EC              // ?csp       --
 497+ 70EC              // raise msg #20 if surrent SP in not what previously saved in CSP.
 498+ 70EC              // Compiler relies on that for  syntax checking of structures
 499+ 70EC                              Colon_Def QCSP, "?CSP", is_normal
 499+ 70EC             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 499+ 70EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 70EC             >
 499+ 70EC             >                // dummy db directives used to calculate length of namec
 499+ 70EC 3F 43 53 50 >                db      "?CSP"
 499+ 70F0             >len_NFA         defl    $ - temp_NFA
 499+ 70F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 70EC             >
 499+ 70EC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 70ED 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 499+ 70F1             >                org     $-1                 // alter last byte of Name just above to set
 499+ 70F0 D0          >                db      {b $} | END_BIT     // msb as name end
 499+ 70F1             >
 499+ 70F1 D7 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 70F3             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 70F3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 70F5             >                else
 499+ 70F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 70F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 70F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 70F5             >
 499+ 70F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 70F5 73 69                        dw      SPFETCH                 // sp@
 501+ 70F7 6C 6E 9F 6B                  dw      CSP, FETCH              // csp @
 502+ 70FB 29 6F                        dw      SUBTRACT                // -
 503+ 70FD A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 504+ 7101 97 70                        dw      QERROR                  // ?error
 505+ 7103 AB 69                        dw      EXIT                    // ;
 506+ 7105
 507+ 7105              //  ______________________________________________________________________
 508+ 7105              //
 509+ 7105              // ?loading      --
 510+ 7105              // raise msg #22 if not loading
 511+ 7105                              Colon_Def QLOADING, "?LOADING", is_normal
 511+ 7105             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 511+ 7105             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 7105             >
 511+ 7105             >                // dummy db directives used to calculate length of namec
 511+ 7105 3F 4C 4F 41 >                db      "?LOADING"
 511+ 7109 44 49 4E 47 >
 511+ 710D             >len_NFA         defl    $ - temp_NFA
 511+ 710D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 7105             >
 511+ 7105 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 7106 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 511+ 710A 44 49 4E 47 >
 511+ 710E             >                org     $-1                 // alter last byte of Name just above to set
 511+ 710D C7          >                db      {b $} | END_BIT     // msb as name end
 511+ 710E             >
 511+ 710E EC 70       >                dw      last_NFA            // Link to previous definition Name
 511+ 7110             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 7110 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 7112             >                else
 511+ 7112 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 7112             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 7112             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 7112             >
 511+ 7112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 7112 FB 6D 9F 6B                  dw      BLK, FETCH              // blk @
 513+ 7116 ED 69                        dw      ZEQUAL                  // 0=
 514+ 7118 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 515+ 711C 97 70                        dw      QERROR                  // ?error
 516+ 711E AB 69                        dw      EXIT                    // ;
 517+ 7120
 518+ 7120              //  ______________________________________________________________________
 519+ 7120              //
 520+ 7120              // compile      --
 521+ 7120              // compiles the following word
 522+ 7120                              Colon_Def COMPILE, "COMPILE", is_normal
 522+ 7120             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 522+ 7120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7120             >
 522+ 7120             >                // dummy db directives used to calculate length of namec
 522+ 7120 43 4F 4D 50 >                db      "COMPILE"
 522+ 7124 49 4C 45    >
 522+ 7127             >len_NFA         defl    $ - temp_NFA
 522+ 7127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7120             >
 522+ 7120 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7121 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 522+ 7125 49 4C 45    >
 522+ 7128             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7127 C5          >                db      {b $} | END_BIT     // msb as name end
 522+ 7128             >
 522+ 7128 05 71       >                dw      last_NFA            // Link to previous definition Name
 522+ 712A             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 712A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 712C             >                else
 522+ 712C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 712C             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 712C             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 712C             >
 522+ 712C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 712C B1 70                        dw      QCOMP                   // ?comp
 524+ 712E D2 69                        dw      R_TO                    // r>
 525+ 7130 0C 6B 75 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 526+ 7134 BE 69                        dw      TO_R                    // >r
 527+ 7136 9F 6B F7 6E                  dw      FETCH, COMMA            // @ ,
 528+ 713A AB 69                        dw      EXIT                    // ;
 529+ 713C
 530+ 713C              //  ______________________________________________________________________
 531+ 713C              //
 532+ 713C              // compile,     --
 533+ 713C              // compiles the following word
 534+ 713C                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 534+ 713C             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 534+ 713C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ 713C             >
 534+ 713C             >                // dummy db directives used to calculate length of namec
 534+ 713C 43 4F 4D 50 >                db      "COMPILE,"
 534+ 7140 49 4C 45 2C >
 534+ 7144             >len_NFA         defl    $ - temp_NFA
 534+ 7144             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ 713C             >
 534+ 713C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ 713D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 534+ 7141 49 4C 45 2C >
 534+ 7145             >                org     $-1                 // alter last byte of Name just above to set
 534+ 7144 AC          >                db      {b $} | END_BIT     // msb as name end
 534+ 7145             >
 534+ 7145 20 71       >                dw      last_NFA            // Link to previous definition Name
 534+ 7147             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 7147 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 7149             >                else
 534+ 7149 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 534+ 7149             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 7149             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 7149             >
 534+ 7149             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 7149 B1 70                        dw      QCOMP                   // ?comp
 536+ 714B F7 6E                        dw      COMMA                   // ,
 537+ 714D AB 69                        dw      EXIT                    // ;
 538+ 714F
 539+ 714F              //  ______________________________________________________________________
 540+ 714F              //
 541+ 714F              // [            --
 542+ 714F              // stop compilation
 543+ 714F                              Colon_Def SQUARED_OPEN, "[", is_immediate
 543+ 714F             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 543+ 714F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ 714F             >
 543+ 714F             >                // dummy db directives used to calculate length of namec
 543+ 714F 5B          >                db      "["
 543+ 7150             >len_NFA         defl    $ - temp_NFA
 543+ 7150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ 714F             >
 543+ 714F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ 7150 5B          >                db      "["               // name string in 7-bit ascii, but
 543+ 7151             >                org     $-1                 // alter last byte of Name just above to set
 543+ 7150 DB          >                db      {b $} | END_BIT     // msb as name end
 543+ 7151             >
 543+ 7151 3C 71       >                dw      last_NFA            // Link to previous definition Name
 543+ 7153             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 7153 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 7155             >                else
 543+ 7155 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 543+ 7155             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 7155             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 7155             >
 543+ 7155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 7155 FC 6C                        dw      ZERO                    // 0
 545+ 7157 47 6E AC 6B                  dw      STATE, STORE            // state !
 546+ 715B AB 69                        dw      EXIT                    // ; immediate
 547+ 715D
 548+ 715D              //  ______________________________________________________________________
 549+ 715D              //
 550+ 715D              // ]            --
 551+ 715D              // start compilation
 552+ 715D                              Colon_Def SQUARED_CLOSE, "]", is_normal
 552+ 715D             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 552+ 715D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 552+ 715D             >
 552+ 715D             >                // dummy db directives used to calculate length of namec
 552+ 715D 5D          >                db      "]"
 552+ 715E             >len_NFA         defl    $ - temp_NFA
 552+ 715E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 552+ 715D             >
 552+ 715D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 552+ 715E 5D          >                db      "]"               // name string in 7-bit ascii, but
 552+ 715F             >                org     $-1                 // alter last byte of Name just above to set
 552+ 715E DD          >                db      {b $} | END_BIT     // msb as name end
 552+ 715F             >
 552+ 715F 4F 71       >                dw      last_NFA            // Link to previous definition Name
 552+ 7161             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 552+ 7161 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 552+ 7163             >                else
 552+ 7163 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 552+ 7163             >                endif           ; ok        // for other definitions it "points" the correct handler
 552+ 7163             >                // Use of "; ok" to suppress "warning[fwdref]"
 552+ 7163             >
 552+ 7163             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 7163 A9 63 C0 00                  dw      LIT, $C0                // 192
 554+ 7167 47 6E AC 6B                  dw      STATE, STORE            // state !
 555+ 716B AB 69                        dw      EXIT                    // ;
 556+ 716D
 557+ 716D              //  ______________________________________________________________________
 558+ 716D              //
 559+ 716D              // smudge       --
 560+ 716D              // toggle smudge bit of latest definition
 561+ 716D                              Colon_Def SMUDGE, "SMUDGE", is_normal
 561+ 716D             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 561+ 716D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 716D             >
 561+ 716D             >                // dummy db directives used to calculate length of namec
 561+ 716D 53 4D 55 44 >                db      "SMUDGE"
 561+ 7171 47 45       >
 561+ 7173             >len_NFA         defl    $ - temp_NFA
 561+ 7173             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 716D             >
 561+ 716D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 716E 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 561+ 7172 47 45       >
 561+ 7174             >                org     $-1                 // alter last byte of Name just above to set
 561+ 7173 C5          >                db      {b $} | END_BIT     // msb as name end
 561+ 7174             >
 561+ 7174 5D 71       >                dw      last_NFA            // Link to previous definition Name
 561+ 7176             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 7176 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 7178             >                else
 561+ 7178 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 7178             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 7178             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 7178             >
 561+ 7178             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 7178 13 70                        dw      LATEST                  // latest
 563+ 717A A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 564+ 717E 92 6B                        dw      TOGGLE                  // toggle
 565+ 7180 AB 69                        dw      EXIT                    // ;
 566+ 7182
 567+ 7182              //  ______________________________________________________________________
 568+ 7182              //
 569+ 7182              // immediate    --
 570+ 7182              // make immediate the latest definition
 571+ 7182                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 571+ 7182             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 571+ 7182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ 7182             >
 571+ 7182             >                // dummy db directives used to calculate length of namec
 571+ 7182 49 4D 4D 45 >                db      "IMMEDIATE"
 571+ 7186 44 49 41 54 >
 571+ 718A 45          >
 571+ 718B             >len_NFA         defl    $ - temp_NFA
 571+ 718B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ 7182             >
 571+ 7182 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ 7183 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 571+ 7187 44 49 41 54 >
 571+ 718B 45          >
 571+ 718C             >                org     $-1                 // alter last byte of Name just above to set
 571+ 718B C5          >                db      {b $} | END_BIT     // msb as name end
 571+ 718C             >
 571+ 718C 6D 71       >                dw      last_NFA            // Link to previous definition Name
 571+ 718E             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ 718E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 571+ 7190             >                else
 571+ 7190 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 571+ 7190             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ 7190             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ 7190             >
 571+ 7190             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ 7190 13 70                        dw      LATEST                  // latest
 573+ 7192 A9 63 40 00                  dw      LIT, $40                // 64
 574+ 7196 92 6B                        dw      TOGGLE                  // toggle
 575+ 7198 AB 69                        dw      EXIT                    // ;
 576+ 719A
 577+ 719A              //  ______________________________________________________________________
 578+ 719A              //
 579+ 719A              // hex          --
 580+ 719A              // change numeration base
 581+ 719A                              Colon_Def HEX, "HEX", is_normal
 581+ 719A             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 581+ 719A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 581+ 719A             >
 581+ 719A             >                // dummy db directives used to calculate length of namec
 581+ 719A 48 45 58    >                db      "HEX"
 581+ 719D             >len_NFA         defl    $ - temp_NFA
 581+ 719D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 581+ 719A             >
 581+ 719A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 581+ 719B 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 581+ 719E             >                org     $-1                 // alter last byte of Name just above to set
 581+ 719D D8          >                db      {b $} | END_BIT     // msb as name end
 581+ 719E             >
 581+ 719E 82 71       >                dw      last_NFA            // Link to previous definition Name
 581+ 71A0             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 581+ 71A0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 581+ 71A2             >                else
 581+ 71A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 581+ 71A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 581+ 71A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 581+ 71A2             >
 581+ 71A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 582+ 71A2 A9 63 10 00                  dw      LIT, 16                 // 16
 583+ 71A6 51 6E AC 6B                  dw      BASE, STORE             // base !
 584+ 71AA AB 69                        dw      EXIT                    // ;
 585+ 71AC
 586+ 71AC              //  ______________________________________________________________________
 587+ 71AC              //
 588+ 71AC              // decimal      --
 589+ 71AC              // change numeration base
 590+ 71AC                              Colon_Def DECIMAL, "DECIMAL", is_normal
 590+ 71AC             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 590+ 71AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 590+ 71AC             >
 590+ 71AC             >                // dummy db directives used to calculate length of namec
 590+ 71AC 44 45 43 49 >                db      "DECIMAL"
 590+ 71B0 4D 41 4C    >
 590+ 71B3             >len_NFA         defl    $ - temp_NFA
 590+ 71B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 590+ 71AC             >
 590+ 71AC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 590+ 71AD 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 590+ 71B1 4D 41 4C    >
 590+ 71B4             >                org     $-1                 // alter last byte of Name just above to set
 590+ 71B3 CC          >                db      {b $} | END_BIT     // msb as name end
 590+ 71B4             >
 590+ 71B4 9A 71       >                dw      last_NFA            // Link to previous definition Name
 590+ 71B6             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 590+ 71B6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 590+ 71B8             >                else
 590+ 71B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 590+ 71B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 590+ 71B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 590+ 71B8             >
 590+ 71B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 591+ 71B8 A9 63 0A 00                  dw      LIT, 10                 // 10
 592+ 71BC 51 6E AC 6B                  dw      BASE, STORE             // base !
 593+ 71C0 AB 69                        dw      EXIT                    // ;
 594+ 71C2
 595+ 71C2              //  ______________________________________________________________________
 596+ 71C2              //
 597+ 71C2              // (;code)       --
 598+ 71C2              // patch to CFA to call/jump to the "following code"
 599+ 71C2                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 599+ 71C2             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 599+ 71C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 71C2             >
 599+ 71C2             >                // dummy db directives used to calculate length of namec
 599+ 71C2 28 3B 43 4F >                db      "(;CODE)"
 599+ 71C6 44 45 29    >
 599+ 71C9             >len_NFA         defl    $ - temp_NFA
 599+ 71C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 71C2             >
 599+ 71C2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 71C3 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 599+ 71C7 44 45 29    >
 599+ 71CA             >                org     $-1                 // alter last byte of Name just above to set
 599+ 71C9 A9          >                db      {b $} | END_BIT     // msb as name end
 599+ 71CA             >
 599+ 71CA AC 71       >                dw      last_NFA            // Link to previous definition Name
 599+ 71CC             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 71CC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 71CE             >                else
 599+ 71CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 71CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 71CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 71CE             >
 599+ 71CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 71CE D2 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 601+ 71D0 13 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 602+ 71D2 51 70 31 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 603+ 71D6
 604+ 71D6
 605+ 71D6
 606+ 71D6
 607+ 71D6
 608+ 71D6 AC 6B                        dw      STORE                   // !
 609+ 71D8 AB 69                        dw      EXIT                    // ;
 610+ 71DA
 611+ 71DA              //  ______________________________________________________________________
 612+ 71DA              //
 613+ 71DA              // ;code        --
 614+ 71DA                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 614+ 71DA             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 614+ 71DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 71DA             >
 614+ 71DA             >                // dummy db directives used to calculate length of namec
 614+ 71DA 3B 43 4F 44 >                db      ";CODE"
 614+ 71DE 45          >
 614+ 71DF             >len_NFA         defl    $ - temp_NFA
 614+ 71DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 71DA             >
 614+ 71DA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 71DB 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 614+ 71DF 45          >
 614+ 71E0             >                org     $-1                 // alter last byte of Name just above to set
 614+ 71DF C5          >                db      {b $} | END_BIT     // msb as name end
 614+ 71E0             >
 614+ 71E0 C2 71       >                dw      last_NFA            // Link to previous definition Name
 614+ 71E2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 71E2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 71E4             >                else
 614+ 71E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 71E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 71E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 71E4             >
 614+ 71E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 71E4 F3 70                        dw      QCSP                    // ?csp
 616+ 71E6 2A 71                        dw      COMPILE                 // compile
 617+ 71E8 CC 71                        dw      C_SEMICOLON_CODE        // (;code)
 618+ 71EA 53 71                        dw      SQUARED_OPEN            // [
 619+ 71EC A9 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 620+ 71EE AB 69                        dw      EXIT                    // ; immediate
 621+ 71F0
 622+ 71F0              //  ______________________________________________________________________
 623+ 71F0              //
 624+ 71F0              // <builds      --
 625+ 71F0                              Colon_Def CBUILDS, "<BUILDS", is_normal
 625+ 71F0             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 625+ 71F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 71F0             >
 625+ 71F0             >                // dummy db directives used to calculate length of namec
 625+ 71F0 3C 42 55 49 >                db      "<BUILDS"
 625+ 71F4 4C 44 53    >
 625+ 71F7             >len_NFA         defl    $ - temp_NFA
 625+ 71F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 71F0             >
 625+ 71F0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 71F1 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 625+ 71F5 4C 44 53    >
 625+ 71F8             >                org     $-1                 // alter last byte of Name just above to set
 625+ 71F7 D3          >                db      {b $} | END_BIT     // msb as name end
 625+ 71F8             >
 625+ 71F8 DA 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 71FA             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 71FA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 71FC             >                else
 625+ 71FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 625+ 71FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 71FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 71FC             >
 625+ 71FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 71FC FC 6C                        dw      ZERO                    // 0
 627+ 71FE B8 6C                        dw      CONSTANT                // constant
 628+ 7200 AB 69                        dw      EXIT                    // ;
 629+ 7202
 630+ 7202              //  ______________________________________________________________________
 631+ 7202              //
 632+ 7202              // recurse      --
 633+ 7202              //              Colon_Def RECURSE, "RECURSE", is_immediate
 634+ 7202              //              dw      QCOMP                   // ?comp
 635+ 7202              //              dw      LATEST                  // latest
 636+ 7202              //              dw      PFA, CFA                // pfa cfa
 637+ 7202              //              dw      COMMA                   // ,
 638+ 7202              //              dw      EXIT                    // ; immediate
 639+ 7202
 640+ 7202              //  ______________________________________________________________________
 641+ 7202              //
 642+ 7202              // does>     --
 643+ 7202                              Colon_Def DOES_TO, "DOES>", is_normal
 643+ 7202             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 643+ 7202             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 7202             >
 643+ 7202             >                // dummy db directives used to calculate length of namec
 643+ 7202 44 4F 45 53 >                db      "DOES>"
 643+ 7206 3E          >
 643+ 7207             >len_NFA         defl    $ - temp_NFA
 643+ 7207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 7202             >
 643+ 7202 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 7203 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 643+ 7207 3E          >
 643+ 7208             >                org     $-1                 // alter last byte of Name just above to set
 643+ 7207 BE          >                db      {b $} | END_BIT     // msb as name end
 643+ 7208             >
 643+ 7208 F0 71       >                dw      last_NFA            // Link to previous definition Name
 643+ 720A             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 720A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 720C             >                else
 643+ 720C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 720C             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 720C             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 720C             >
 643+ 720C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 720C D2 69                        dw      R_TO                    // r>
 645+ 720E 13 70                        dw      LATEST                  // latest
 646+ 7210 51 70                        dw      PFA                     // pfa
 647+ 7212 AC 6B                        dw      STORE                   // !
 648+ 7214 CC 71                        dw      C_SEMICOLON_CODE        // ;code
 649+ 7216              Does_Ptr:
 650+ 7216                              // via call coded in CFA
 651+ 7216                              ldhlrp
 651+ 7216 2A 96 63    >                ld      hl,(RP_Pointer)
 652+ 7219 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 653+ 721A 70                           ld      (hl), b
 654+ 721B 2B                           dec     hl
 655+ 721C 71                           ld      (hl), c
 656+ 721D                              ldrphl
 656+ 721D 22 96 63    >                ld      (RP_Pointer),hl
 657+ 7220 13                           inc     de
 658+ 7221 EB                           ex      de, hl
 659+ 7222 4E                           ld      c, (hl)
 660+ 7223 23                           inc     hl
 661+ 7224 46                           ld      b, (hl)
 662+ 7225 23                           inc     hl
 663+ 7226
 664+ 7226                              psh1
 664+ 7226 E5          >                push    hl
 664+ 7227 DD E9       >                jp      (ix)
 665+ 7229                              // SMUDGE !
 666+ 7229
 667+ 7229              //  ______________________________________________________________________
 668+ 7229              //
 669+ 7229              // count        a -- a2 n
 670+ 7229              // expects a counted string at address a, returns string address and counter
 671+ 7229                              New_Def COUNT, "COUNT", is_code, is_normal
 671+ 7229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 7229             >
 671+ 7229             >                // dummy db directives used to calculate length of namec
 671+ 7229 43 4F 55 4E >                db      "COUNT"
 671+ 722D 54          >
 671+ 722E             >len_NFA         defl    $ - temp_NFA
 671+ 722E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 7229             >
 671+ 7229 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 722A 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 671+ 722E 54          >
 671+ 722F             >                org     $-1                 // alter last byte of Name just above to set
 671+ 722E D4          >                db      {b $} | END_BIT     // msb as name end
 671+ 722F             >
 671+ 722F 02 72       >                dw      last_NFA            // Link to previous definition Name
 671+ 7231             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 7231 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 671+ 7231             >                else
 671+ 7231 33 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 7233             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 7233             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 7233             >
 671+ 7233             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 7233 E1                           pop     hl
 673+ 7234 5E                           ld      e, (hl)
 674+ 7235 16 00                        ld      d, 0
 675+ 7237 23                           inc     hl
 676+ 7238              Count_Ptr:
 677+ 7238 E5                           push    hl
 678+ 7239 D5                           push    de
 679+ 723A                              next
 679+ 723A DD E9       >                jp      (ix)
 680+ 723C
 681+ 723C
 682+ 723C              //  ______________________________________________________________________
 683+ 723C              //
 684+ 723C              // bounds       a n -- a+n n
 685+ 723C              // given an address and a length ( a n ) calculate the bound addresses
 686+ 723C              // suitable for DO-LOOP
 687+ 723C                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 687+ 723C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 687+ 723C             >
 687+ 723C             >                // dummy db directives used to calculate length of namec
 687+ 723C 42 4F 55 4E >                db      "BOUNDS"
 687+ 7240 44 53       >
 687+ 7242             >len_NFA         defl    $ - temp_NFA
 687+ 7242             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 687+ 723C             >
 687+ 723C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 687+ 723D 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 687+ 7241 44 53       >
 687+ 7243             >                org     $-1                 // alter last byte of Name just above to set
 687+ 7242 D3          >                db      {b $} | END_BIT     // msb as name end
 687+ 7243             >
 687+ 7243 29 72       >                dw      last_NFA            // Link to previous definition Name
 687+ 7245             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 687+ 7245 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 687+ 7245             >                else
 687+ 7245 47 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 687+ 7247             >                endif           ; ok        // for other definitions it "points" the correct handler
 687+ 7247             >                // Use of "; ok" to suppress "warning[fwdref]"
 687+ 7247             >
 687+ 7247             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 688+ 7247 E1                           pop     hl
 689+ 7248 D1                           pop     de
 690+ 7249 19                           add     hl, de
 691+ 724A 18 EC                        jr      Count_Ptr
 692+ 724C
 693+ 724C              //  ______________________________________________________________________
 694+ 724C              //
 695+ 724C              // leave        --
 696+ 724C              // Compile (leave) to leave current LOOP and jump just after it
 697+ 724C                              Colon_Def LEAVE, "LEAVE", is_immediate
 697+ 724C             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 697+ 724C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 724C             >
 697+ 724C             >                // dummy db directives used to calculate length of namec
 697+ 724C 4C 45 41 56 >                db      "LEAVE"
 697+ 7250 45          >
 697+ 7251             >len_NFA         defl    $ - temp_NFA
 697+ 7251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 724C             >
 697+ 724C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 724D 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 697+ 7251 45          >
 697+ 7252             >                org     $-1                 // alter last byte of Name just above to set
 697+ 7251 C5          >                db      {b $} | END_BIT     // msb as name end
 697+ 7252             >
 697+ 7252 3C 72       >                dw      last_NFA            // Link to previous definition Name
 697+ 7254             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 7254 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 7256             >                else
 697+ 7256 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 697+ 7256             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 7256             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 7256             >
 697+ 7256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 7256 2A 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 699+ 725A DB 6E BE 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 699+ 725E FC 6C F7 6E
 700+ 7262 FC 6C FC 6C                  dw      ZERO, ZERO
 701+ 7266 73 69 0C 6B                  dw      SPFETCH, DUP
 702+ 726A 75 6A 75 6A                  dw      CELL_PLUS, CELL_PLUS
 703+ 726E EF 6A                        dw      TUCK
 704+ 7270 6C 6E 9F 6B                  dw      CSP, FETCH
 705+ 7274 FF 6A 29 6F                  dw      SWAP, SUBTRACT
 706+ 7278 9E 68                        dw      CMOVE
 707+ 727A 6C 6E 9F 6B                  dw      CSP, FETCH, CELL_MINUS
 707+ 727E 7F 6A
 708+ 7280 D2 69 C7 6A                  dw      R_TO, OVER, STORE
 708+ 7284 AC 6B
 709+ 7286 7F 6A FC 6C                  dw      CELL_MINUS, ZERO
 710+ 728A FF 6A AC 6B                  dw      SWAP, STORE
 711+ 728E AB 69                        dw      EXIT                    // ;
 712+ 7290
 713+ 7290              //  ______________________________________________________________________
 714+ 7290              //
 715+ 7290              // type         a n --
 716+ 7290              // Sends to current output channel n characters starting at address a.
 717+ 7290                              Colon_Def TYPE, "TYPE", is_normal
 717+ 7290             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 717+ 7290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 717+ 7290             >
 717+ 7290             >                // dummy db directives used to calculate length of namec
 717+ 7290 54 59 50 45 >                db      "TYPE"
 717+ 7294             >len_NFA         defl    $ - temp_NFA
 717+ 7294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 717+ 7290             >
 717+ 7290 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 717+ 7291 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 717+ 7295             >                org     $-1                 // alter last byte of Name just above to set
 717+ 7294 C5          >                db      {b $} | END_BIT     // msb as name end
 717+ 7295             >
 717+ 7295 4C 72       >                dw      last_NFA            // Link to previous definition Name
 717+ 7297             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 717+ 7297 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 717+ 7299             >                else
 717+ 7299 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 717+ 7299             >                endif           ; ok        // for other definitions it "points" the correct handler
 717+ 7299             >                // Use of "; ok" to suppress "warning[fwdref]"
 717+ 7299             >
 717+ 7299             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 718+ 7299 45 72                        dw      BOUNDS                  // bounds
 719+ 729B 59 64                        dw      C_Q_DO                  // ?do
 720+ 729D 0C 00                        dw      Type_Skip - $
 721+ 729F              Type_Loop:
 722+ 729F 90 64 BA 6B                  dw          I, CFETCH           //      i c@
 723+ 72A3 C1 6F                        dw          EMIT                //      emit
 724+ 72A5 04 64                        dw      C_LOOP                  // loop
 725+ 72A7 F8 FF                        dw      Type_Loop - $
 726+ 72A9              Type_Skip:
 727+ 72A9 AB 69                        dw      EXIT                    // ;
 728+ 72AB
 729+ 72AB              //  ______________________________________________________________________
 730+ 72AB              //
 731+ 72AB              // -trailing    a n1 -- a n2
 732+ 72AB              // Assumes that an n1 bytes-long string is stored at address a
 733+ 72AB              // and the string contains a space delimited word,
 734+ 72AB              // Finds n2 as the position of the first character after the word.
 735+ 72AB                              Colon_Def LTRAILING, "-TRAILING", is_normal
 735+ 72AB             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 735+ 72AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ 72AB             >
 735+ 72AB             >                // dummy db directives used to calculate length of namec
 735+ 72AB 2D 54 52 41 >                db      "-TRAILING"
 735+ 72AF 49 4C 49 4E >
 735+ 72B3 47          >
 735+ 72B4             >len_NFA         defl    $ - temp_NFA
 735+ 72B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ 72AB             >
 735+ 72AB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ 72AC 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 735+ 72B0 49 4C 49 4E >
 735+ 72B4 47          >
 735+ 72B5             >                org     $-1                 // alter last byte of Name just above to set
 735+ 72B4 C7          >                db      {b $} | END_BIT     // msb as name end
 735+ 72B5             >
 735+ 72B5 90 72       >                dw      last_NFA            // Link to previous definition Name
 735+ 72B7             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 72B7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 72B9             >                else
 735+ 72B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 735+ 72B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 72B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 72B9             >
 735+ 72B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 72B9 0C 6B FC 6C                  dw      DUP, ZERO               // dup 0
 737+ 72BD                                                              // do
 738+ 72BD 59 64                        dw      C_Q_DO
 739+ 72BF 20 00                        dw      LTrailing_Leave - $
 740+ 72C1              LTrailing_Loop:
 741+ 72C1 6D 6B 2C 6A                  dw          TWO_DUP, PLUS       //      2dup +
 742+ 72C5 59 6A                        dw          ONE_SUBTRACT        //      1-
 743+ 72C7 BA 6B                        dw          CFETCH              //      c@
 744+ 72C9 26 6D 29 6F                  dw          BL, SUBTRACT        //      bl -
 745+ 72CD                                                              //      if
 746+ 72CD 2C 64                        dw          ZBRANCH
 747+ 72CF 0A 00                        dw          LTrailing_Else - $
 748+ 72D1 41 64                        dw              C_LEAVE         //          leave
 749+ 72D3 0C 00                        dw              LTrailing_Leave - $
 750+ 72D5 15 64                        dw          BRANCH              //      else
 751+ 72D7 04 00                        dw          LTrailing_Endif - $
 752+ 72D9              LTrailing_Else:
 753+ 72D9 59 6A                        dw              ONE_SUBTRACT    //          1-
 754+ 72DB              LTrailing_Endif:                                //      endif
 755+ 72DB                                                              // loop
 756+ 72DB 04 64                        dw      C_LOOP
 757+ 72DD E4 FF                        dw      LTrailing_Loop - $
 758+ 72DF              LTrailing_Leave:
 759+ 72DF AB 69                        dw      EXIT                    // ;
 760+ 72E1
 761+ 72E1              //  ______________________________________________________________________
 762+ 72E1              //
 763+ 72E1              // accept       a n1 -- n2
 764+ 72E1              // Accepts at most n1 characters from terminal and stores them at address a
 765+ 72E1              // CR stops input. A 'nul' is added as trailer.
 766+ 72E1              // n2 is the string length. n2 is kept in span user variable also.
 767+ 72E1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 767+ 72E1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 767+ 72E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 72E1             >
 767+ 72E1             >                // dummy db directives used to calculate length of namec
 767+ 72E1 41 43 43 45 >                db      "ACCEPT"
 767+ 72E5 50 54       >
 767+ 72E7             >len_NFA         defl    $ - temp_NFA
 767+ 72E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 72E1             >
 767+ 72E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 72E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 767+ 72E6 50 54       >
 767+ 72E8             >                org     $-1                 // alter last byte of Name just above to set
 767+ 72E7 D4          >                db      {b $} | END_BIT     // msb as name end
 767+ 72E8             >
 767+ 72E8 AB 72       >                dw      last_NFA            // Link to previous definition Name
 767+ 72EA             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 72EA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 72EC             >                else
 767+ 72EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 72EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 72EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 72EC             >
 767+ 72EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 72EC C7 6A 2C 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 768+ 72F0 C7 6A
 769+ 72F2 FC 6C 29 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 770+ 72F6                                                              // do
 771+ 72F6 59 64                        dw      C_Q_DO
 772+ 72F8 8C 00                        dw      Accept_Leave - $
 773+ 72FA              Accept_Loop:
 774+ 72FA BC 66                        dw          CUR
 775+ 72FC D7 6A 08 67                  dw          DROP, KEY           //      drop key        ( a  c )
 776+ 7300 0C 6B                        dw          DUP                 //      dup             ( a  c  c )
 777+ 7302 A9 63 0E 00                  dw          LIT, $0E            //      0E
 778+ 7306 62 6D                        dw          PLUS_ORIGIN         //      +origin
 779+ 7308 9F 6B                        dw          FETCH               //      @               ( a  c  c  del )
 780+ 730A 37 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 781+ 730C                                                              //      if
 782+ 730C 2C 64                        dw          ZBRANCH
 783+ 730E 2C 00                        dw          Accept_Else_0 - $
 784+ 7310 D7 6A                        dw              DROP            //          drop        ( a  )
 785+ 7312 0C 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 785+ 7316 37 6F
 786+ 7318 04 6D 3B 69                  dw              ONE, AND_OP     //          1 and
 787+ 731C 0C 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 788+ 731E D2 69                        dw              R_TO            //          r> 2 - + r>
 789+ 7320 8C 6A 2C 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 790+ 7324 BE 69                        dw              TO_R            //
 791+ 7326                                                              //          if
 792+ 7326 2C 64                        dw              ZBRANCH
 793+ 7328 0A 00                        dw              Accept_Else_1 - $
 794+ 732A A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 795+ 732E                                                              //          else
 796+ 732E 15 64                        dw              BRANCH
 797+ 7330 06 00                        dw              Accept_Endif_1 - $
 798+ 7332              Accept_Else_1:
 799+ 7332 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 800+ 7336              Accept_Endif_1:                                 //          endif
 801+ 7336 15 64                        dw          BRANCH
 802+ 7338 2E 00                        dw          Accept_Endif_0 - $
 803+ 733A              Accept_Else_0:                                  //      else
 804+ 733A 0C 6B                        dw              DUP             //          dup         ( a  c  c )
 805+ 733C A9 63 0D 00                  dw              LIT, 13         //          13
 806+ 7340 37 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 807+ 7342                                                              //          if
 808+ 7342 2C 64                        dw              ZBRANCH
 809+ 7344 0C 00                        dw              Accept_Else_2 - $
 810+ 7346 D7 6A 26 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 811+ 734A FC 6C                        dw                  ZERO        //              0       ( a  c  0 )
 812+ 734C                                                              //          else
 813+ 734C 15 64                        dw              BRANCH
 814+ 734E 04 00                        dw              Accept_Endif_2 - $
 815+ 7350              Accept_Else_2:
 816+ 7350 0C 6B                        dw                  DUP         //              dup     ( a  c  c )
 817+ 7352                                                              //          endif
 818+ 7352              Accept_Endif_2:
 819+ 7352 90 64 C8 6B                  dw              I, CSTORE       //          i           ( a  c )
 820+ 7356 0C 6B 26 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 820+ 735A 54 6F
 821+ 735C                                                              //          if
 822+ 735C 2C 64                        dw              ZBRANCH
 823+ 735E 08 00                        dw              Accept_Endif_3 - $
 824+ 7360 D2 69                        dw                  R_TO        //              r>
 825+ 7362 59 6A                        dw                  ONE_SUBTRACT//              1-
 826+ 7364 BE 69                        dw                  TO_R        //              >r
 827+ 7366                                                              //          endif
 828+ 7366              Accept_Endif_3:
 829+ 7366              Accept_Endif_0:                                 //      endif
 830+ 7366 C1 6F                        dw          EMIT                //      emit
 831+ 7368 FC 6C 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 831+ 736C 4D 6A
 832+ 736E AC 6B                        dw          STORE               //          ( zero pad )
 833+ 7370 90 64                        dw          I                   //      i
 834+ 7372 90 64 BA 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 834+ 7376 ED 69
 835+ 7378 2C 64                        dw          ZBRANCH             //
 836+ 737A 06 00                        dw              Accept_Endif_4 - $
 837+ 737C 41 64                        dw                  C_LEAVE     //              leave
 838+ 737E 06 00                        dw                  Accept_Leave - $
 839+ 7380              Accept_Endif_4:                                 //      endif
 840+ 7380                                                              // loop
 841+ 7380 04 64                        dw      C_LOOP
 842+ 7382 78 FF                        dw      Accept_Loop - $
 843+ 7384              Accept_Leave:
 844+ 7384 FF 6A 29 6F                  dw      SWAP, SUBTRACT          // swap -
 845+ 7388 4D 6A                        dw      ONE_PLUS                // 1+
 846+ 738A 0C 6B BC 6E                  dw      DUP, SPAN, STORE        // dup span !
 846+ 738E AC 6B
 847+ 7390 AB 69                        dw      EXIT                    // ;
 848+ 7392
 849+ 7392              //  ______________________________________________________________________
 850+ 7392              //
 851+ 7392              // expect      a n --
 852+ 7392              // Accepts at most n1 characters from terminal and stores them at address a
 853+ 7392              // CR stops input. A 'nul' is added as trailer.
 854+ 7392              // n2 is the string length. n2 is kept in span user variable also.
 855+ 7392              //              Colon_Def EXPECT, "EXPECT", is_normal
 856+ 7392              //              dw      ACCEPT, DROP            // accept drop
 857+ 7392              //              dw      EXIT                    // ;
 858+ 7392
 859+ 7392              //  ______________________________________________________________________
 860+ 7392              //
 861+ 7392              // query        --
 862+ 7392              // Accept at most 80 character from console. CR stops.
 863+ 7392              // Text is stored in TIB. Variable IN is zeroed.
 864+ 7392                              Colon_Def QUERY, "QUERY", is_normal
 864+ 7392             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 864+ 7392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ 7392             >
 864+ 7392             >                // dummy db directives used to calculate length of namec
 864+ 7392 51 55 45 52 >                db      "QUERY"
 864+ 7396 59          >
 864+ 7397             >len_NFA         defl    $ - temp_NFA
 864+ 7397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ 7392             >
 864+ 7392 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ 7393 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 864+ 7397 59          >
 864+ 7398             >                org     $-1                 // alter last byte of Name just above to set
 864+ 7397 D9          >                db      {b $} | END_BIT     // msb as name end
 864+ 7398             >
 864+ 7398 E1 72       >                dw      last_NFA            // Link to previous definition Name
 864+ 739A             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 739A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 739C             >                else
 864+ 739C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 864+ 739C             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 739C             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 739C             >
 864+ 739C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 739C 8F 6D 9F 6B                  dw      TIB, FETCH              // tib @
 866+ 73A0 A9 63 50 00                  dw      LIT, 80                 // 80
 867+ 73A4 EA 72 D7 6A                  dw      ACCEPT, DROP            // accept drop
 868+ 73A8 FC 6C 04 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 868+ 73AC AC 6B
 869+ 73AE AB 69                        dw      EXIT                    // ;
 870+ 73B0
 871+ 73B0              //  ______________________________________________________________________
 872+ 73B0              //
 873+ 73B0              // fill        a n c --
 874+ 73B0              // If n > 0, fills n locations starting from address a with the value c.
 875+ 73B0                              New_Def FILL, "FILL", is_code, is_normal
 875+ 73B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 73B0             >
 875+ 73B0             >                // dummy db directives used to calculate length of namec
 875+ 73B0 46 49 4C 4C >                db      "FILL"
 875+ 73B4             >len_NFA         defl    $ - temp_NFA
 875+ 73B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 73B0             >
 875+ 73B0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 73B1 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 875+ 73B5             >                org     $-1                 // alter last byte of Name just above to set
 875+ 73B4 CC          >                db      {b $} | END_BIT     // msb as name end
 875+ 73B5             >
 875+ 73B5 92 73       >                dw      last_NFA            // Link to previous definition Name
 875+ 73B7             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 73B7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 875+ 73B7             >                else
 875+ 73B7 B9 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 73B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 73B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 73B9             >
 875+ 73B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 73B9 D9                           exx
 877+ 73BA D1                           pop     de                  // de has character
 878+ 73BB C1                           pop     bc                  // bc has counter
 879+ 73BC E1                           pop     hl                  // hl has address, save Instruction Pointer
 880+ 73BD              Fill_Loop:
 881+ 73BD 78                               ld      a, b
 882+ 73BE B1                               or      c
 883+ 73BF 28 05                        jr      z, Fill_While_End
 884+ 73C1 73                               ld      (hl), e
 885+ 73C2 0B                               dec     bc
 886+ 73C3 23                               inc     hl
 887+ 73C4 18 F7                        jr      Fill_Loop
 888+ 73C6              Fill_While_End:
 889+ 73C6 D9                           exx
 890+ 73C7
 891+ 73C7                              next
 891+ 73C7 DD E9       >                jp      (ix)
 892+ 73C9
 893+ 73C9              //  ______________________________________________________________________
 894+ 73C9              //
 895+ 73C9              // erase        a n --
 896+ 73C9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 897+ 73C9                              Colon_Def ERASE, "ERASE", is_normal
 897+ 73C9             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 897+ 73C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 73C9             >
 897+ 73C9             >                // dummy db directives used to calculate length of namec
 897+ 73C9 45 52 41 53 >                db      "ERASE"
 897+ 73CD 45          >
 897+ 73CE             >len_NFA         defl    $ - temp_NFA
 897+ 73CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 73C9             >
 897+ 73C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 73CA 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 897+ 73CE 45          >
 897+ 73CF             >                org     $-1                 // alter last byte of Name just above to set
 897+ 73CE C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 73CF             >
 897+ 73CF B0 73       >                dw      last_NFA            // Link to previous definition Name
 897+ 73D1             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 73D1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 73D3             >                else
 897+ 73D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 73D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 73D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 73D3             >
 897+ 73D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 73D3 FC 6C B7 73                  dw      ZERO, FILL              // 0 fill
 899+ 73D7 AB 69                        dw      EXIT                    // ;
 900+ 73D9
 901+ 73D9              //  ______________________________________________________________________
 902+ 73D9              //
 903+ 73D9              // blank        a n --
 904+ 73D9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 73D9                              Colon_Def BLANK, "BLANK", is_normal
 905+ 73D9             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 905+ 73D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 73D9             >
 905+ 73D9             >                // dummy db directives used to calculate length of namec
 905+ 73D9 42 4C 41 4E >                db      "BLANK"
 905+ 73DD 4B          >
 905+ 73DE             >len_NFA         defl    $ - temp_NFA
 905+ 73DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 73D9             >
 905+ 73D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 73DA 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 905+ 73DE 4B          >
 905+ 73DF             >                org     $-1                 // alter last byte of Name just above to set
 905+ 73DE CB          >                db      {b $} | END_BIT     // msb as name end
 905+ 73DF             >
 905+ 73DF C9 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 73E1             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 73E1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 73E3             >                else
 905+ 73E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 905+ 73E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 73E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 73E3             >
 905+ 73E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 73E3 26 6D B7 73                  dw      BL, FILL                // bl fill
 907+ 73E7 AB 69                        dw      EXIT                    // ;
 908+ 73E9
 909+ 73E9              //  ______________________________________________________________________
 910+ 73E9              //
 911+ 73E9              // hold         c --
 912+ 73E9              // Used between <# and #> to insert a character c in numeric formatting.
 913+ 73E9                              Colon_Def HOLD, "HOLD", is_normal
 913+ 73E9             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 913+ 73E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 73E9             >
 913+ 73E9             >                // dummy db directives used to calculate length of namec
 913+ 73E9 48 4F 4C 44 >                db      "HOLD"
 913+ 73ED             >len_NFA         defl    $ - temp_NFA
 913+ 73ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 73E9             >
 913+ 73E9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 73EA 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 913+ 73EE             >                org     $-1                 // alter last byte of Name just above to set
 913+ 73ED C4          >                db      {b $} | END_BIT     // msb as name end
 913+ 73EE             >
 913+ 73EE D9 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 73F0             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 73F0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 73F2             >                else
 913+ 73F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 73F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 73F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 73F2             >
 913+ 73F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 73F2 1D 6D                        dw      NEG_ONE                 // -1
 915+ 73F4 7D 6E 7C 6B                  dw      HLD, PLUSSTORE          // hld +!
 916+ 73F8 7D 6E 9F 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 916+ 73FC C8 6B
 917+ 73FE AB 69                        dw      EXIT                    // ;
 918+ 7400
 919+ 7400              //  ______________________________________________________________________
 920+ 7400              //
 921+ 7400              // pad         -- a
 922+ 7400              // leaves the buffer text address. This is at a fixed distance over HERE.
 923+ 7400                              Colon_Def PAD, "PAD", is_normal
 923+ 7400             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 923+ 7400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 7400             >
 923+ 7400             >                // dummy db directives used to calculate length of namec
 923+ 7400 50 41 44    >                db      "PAD"
 923+ 7403             >len_NFA         defl    $ - temp_NFA
 923+ 7403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 7400             >
 923+ 7400 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 7401 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 923+ 7404             >                org     $-1                 // alter last byte of Name just above to set
 923+ 7403 C4          >                db      {b $} | END_BIT     // msb as name end
 923+ 7404             >
 923+ 7404 E9 73       >                dw      last_NFA            // Link to previous definition Name
 923+ 7406             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 7406 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 7408             >                else
 923+ 7408 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 923+ 7408             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 7408             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 7408             >
 923+ 7408             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 7408 DB 6E                        dw      HERE                    // here
 925+ 740A A9 63 44 00                  dw      LIT, 68                 // 68
 926+ 740E 2C 6A                        dw      PLUS                    // +
 927+ 7410 AB 69                        dw      EXIT                    // ;
 928+ 7412
 929+ 7412              //  ______________________________________________________________________
 930+ 7412              //
 931+ 7412              // word         c -- a
 932+ 7412              // reads characters from input streams until it encouners a c delimiter.
 933+ 7412              // Stores that packet so it starts from HERE
 934+ 7412              // WORD leaves a counter as first byte and ends the packet with two spaces.
 935+ 7412              // Other occurrences of c are ignored.
 936+ 7412              // If BLK is zero, text is taken from terminal buffer TIB.
 937+ 7412              // Otherwise text is taken from the disk-block given by BLK.
 938+ 7412              // "in" variable is incremented of the number of character read.
 939+ 7412              // The number of characters read is given by ENCLOSE.
 940+ 7412                              Colon_Def WORD, "WORD", is_normal
 940+ 7412             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 940+ 7412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ 7412             >
 940+ 7412             >                // dummy db directives used to calculate length of namec
 940+ 7412 57 4F 52 44 >                db      "WORD"
 940+ 7416             >len_NFA         defl    $ - temp_NFA
 940+ 7416             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ 7412             >
 940+ 7412 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ 7413 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 940+ 7417             >                org     $-1                 // alter last byte of Name just above to set
 940+ 7416 C4          >                db      {b $} | END_BIT     // msb as name end
 940+ 7417             >
 940+ 7417 00 74       >                dw      last_NFA            // Link to previous definition Name
 940+ 7419             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 7419 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 741B             >                else
 940+ 741B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 940+ 741B             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 741B             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 741B             >
 940+ 741B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 741B FB 6D 9F 6B                  dw      BLK, FETCH              // blk @
 942+ 741F                                                              // if
 943+ 741F 2C 64                        dw      ZBRANCH
 944+ 7421 0C 00                        dw      Word_Else - $
 945+ 7423 FB 6D 9F 6B                  dw          BLK, FETCH          //      blk @
 946+ 7427 6C 7D                        dw          BLOCK               //      block ( forward )
 947+ 7429                                                              // else
 948+ 7429 15 64                        dw      BRANCH
 949+ 742B 06 00                        dw      Word_Endif - $
 950+ 742D              Word_Else:
 951+ 742D 8F 6D 9F 6B                  dw         TIB, FETCH           //      tib @
 952+ 7431              Word_Endif:                                     // endif
 953+ 7431 04 6E 9F 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 953+ 7435 2C 6A
 954+ 7437 FF 6A 7F 65                  dw      SWAP, ENCLOSE           // swap enclose
 955+ 743B DB 6E A9 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 955+ 743F 22 00 E1 73
 956+ 7443 04 6E 7C 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 957+ 7447 C7 6A 29 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 957+ 744B BE 69
 958+ 744D E6 69 DB 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 958+ 7451 C8 6B
 959+ 7453 2C 6A                        dw      PLUS                    // +
 960+ 7455 DB 6E 4D 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 960+ 7459 D2 69
 961+ 745B 9E 68                        dw      CMOVE                   // cmove
 962+ 745D DB 6E                        dw      HERE                    // here
 963+ 745F AB 69                        dw      EXIT                    // ;
 964+ 7461
 965+ 7461              //  ______________________________________________________________________
 966+ 7461              //
 967+ 7461              // (.")         --
 968+ 7461              // Direct procedure compiled by ." and  .(  It executes TYPE.
 969+ 7461                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 969+ 7461             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 969+ 7461             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 7461             >
 969+ 7461             >                // dummy db directives used to calculate length of namec
 969+ 7461 28 2E 22 29 >                db      '(.")'
 969+ 7465             >len_NFA         defl    $ - temp_NFA
 969+ 7465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 7461             >
 969+ 7461 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 7462 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 969+ 7466             >                org     $-1                 // alter last byte of Name just above to set
 969+ 7465 A9          >                db      {b $} | END_BIT     // msb as name end
 969+ 7466             >
 969+ 7466 12 74       >                dw      last_NFA            // Link to previous definition Name
 969+ 7468             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 7468 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 746A             >                else
 969+ 746A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 746A             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 746A             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 746A             >
 969+ 746A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 746A E6 69 31 72                  dw      R_OP, COUNT             // r count
 971+ 746E 0C 6B 4D 6A                  dw      DUP, ONE_PLUS           // dup 1+
 972+ 7472 D2 69 2C 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 972+ 7476 BE 69
 973+ 7478 97 72                        dw      TYPE                    // type
 974+ 747A AB 69                        dw      EXIT                    // ;
 975+ 747C
 976+ 747C              //  ______________________________________________________________________
 977+ 747C              //
 978+ 747C              // char         -- c
 979+ 747C              // get first character from next input word
 980+ 747C                              Colon_Def CHAR,  "CHAR", is_normal
 980+ 747C             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 980+ 747C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 980+ 747C             >
 980+ 747C             >                // dummy db directives used to calculate length of namec
 980+ 747C 43 48 41 52 >                db      "CHAR"
 980+ 7480             >len_NFA         defl    $ - temp_NFA
 980+ 7480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 980+ 747C             >
 980+ 747C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 980+ 747D 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 980+ 7481             >                org     $-1                 // alter last byte of Name just above to set
 980+ 7480 D2          >                db      {b $} | END_BIT     // msb as name end
 980+ 7481             >
 980+ 7481 61 74       >                dw      last_NFA            // Link to previous definition Name
 980+ 7483             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 980+ 7483 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 980+ 7485             >                else
 980+ 7485 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 980+ 7485             >                endif           ; ok        // for other definitions it "points" the correct handler
 980+ 7485             >                // Use of "; ok" to suppress "warning[fwdref]"
 980+ 7485             >
 980+ 7485             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 981+ 7485 26 6D 19 74                  dw      BL, WORD                // bl word
 982+ 7489 4D 6A BA 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 983+ 748D AB 69                        dw      EXIT                    // ;
 984+ 748F
 985+ 748F              //  ______________________________________________________________________
 986+ 748F              //
 987+ 748F              // ,"           --
 988+ 748F              // compiles a string terminated by " as a counted string from next input stream
 989+ 748F                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 989+ 748F             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 989+ 748F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 748F             >
 989+ 748F             >                // dummy db directives used to calculate length of namec
 989+ 748F 2C 22       >                db      ',"'
 989+ 7491             >len_NFA         defl    $ - temp_NFA
 989+ 7491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 748F             >
 989+ 748F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 7490 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 989+ 7492             >                org     $-1                 // alter last byte of Name just above to set
 989+ 7491 A2          >                db      {b $} | END_BIT     // msb as name end
 989+ 7492             >
 989+ 7492 7C 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 7494             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 7494 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 7496             >                else
 989+ 7496 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 7496             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 7496             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 7496             >
 989+ 7496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 7496 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 991+ 749A 19 74                        dw      WORD                    // word
 992+ 749C BA 6B 4D 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 993+ 74A0 EB 6E                        dw      ALLOT                   // allot
 994+ 74A2 FC 6C 08 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 995+ 74A6 AB 69                        dw      EXIT
 996+ 74A8
 997+ 74A8              //  ______________________________________________________________________
 998+ 74A8              //
 999+ 74A8              // .c           c --
1000+ 74A8              // intermediate general purpose string builder, used by ." and .(
1001+ 74A8                              Colon_Def DOT_C,  ".C", is_immediate
1001+ 74A8             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1001+ 74A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 74A8             >
1001+ 74A8             >                // dummy db directives used to calculate length of namec
1001+ 74A8 2E 43       >                db      ".C"
1001+ 74AA             >len_NFA         defl    $ - temp_NFA
1001+ 74AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 74A8             >
1001+ 74A8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 74A9 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1001+ 74AB             >                org     $-1                 // alter last byte of Name just above to set
1001+ 74AA C3          >                db      {b $} | END_BIT     // msb as name end
1001+ 74AB             >
1001+ 74AB 8F 74       >                dw      last_NFA            // Link to previous definition Name
1001+ 74AD             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 74AD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1001+ 74AF             >                else
1001+ 74AF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1001+ 74AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 74AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 74AF             >
1001+ 74AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 74AF 47 6E 9F 6B                  dw      STATE, FETCH            // state @
1003+ 74B3                                                              // if
1004+ 74B3 2C 64                        dw      ZBRANCH
1005+ 74B5 12 00                        dw      Dot_C_Else - $
1006+ 74B7 2A 71 68 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1007+ 74BB 19 74 BA 6B                  dw          WORD, CFETCH        //      word c@
1008+ 74BF 4D 6A EB 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1009+ 74C3                                                              // else
1010+ 74C3 15 64                        dw      BRANCH
1011+ 74C5 08 00                        dw      Dot_C_Endif - $
1012+ 74C7              Dot_C_Else:
1013+ 74C7 19 74 31 72                  dw          WORD, COUNT, TYPE   //      word count type
1013+ 74CB 97 72
1014+ 74CD              Dot_C_Endif:                                    // endif
1015+ 74CD AB 69                        dw      EXIT                    ;
1016+ 74CF
1017+ 74CF              //  ______________________________________________________________________
1018+ 74CF              //
1019+ 74CF              // ."           c --
1020+ 74CF                              Colon_Def DOT_QUOTE,  '."', is_immediate
1020+ 74CF             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1020+ 74CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 74CF             >
1020+ 74CF             >                // dummy db directives used to calculate length of namec
1020+ 74CF 2E 22       >                db      '."'
1020+ 74D1             >len_NFA         defl    $ - temp_NFA
1020+ 74D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 74CF             >
1020+ 74CF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 74D0 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1020+ 74D2             >                org     $-1                 // alter last byte of Name just above to set
1020+ 74D1 A2          >                db      {b $} | END_BIT     // msb as name end
1020+ 74D2             >
1020+ 74D2 A8 74       >                dw      last_NFA            // Link to previous definition Name
1020+ 74D4             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 74D4 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 74D6             >                else
1020+ 74D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 74D6             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 74D6             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 74D6             >
1020+ 74D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 74D6 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1022+ 74DA AD 74                        dw      DOT_C                   // [compile] .c
1023+ 74DC AB 69                        dw      EXIT                    // ; immediate
1024+ 74DE
1025+ 74DE              //  ______________________________________________________________________
1026+ 74DE              //
1027+ 74DE              // .(           c --
1028+ 74DE                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1028+ 74DE             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1028+ 74DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 74DE             >
1028+ 74DE             >                // dummy db directives used to calculate length of namec
1028+ 74DE 2E 28       >                db      ".("
1028+ 74E0             >len_NFA         defl    $ - temp_NFA
1028+ 74E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 74DE             >
1028+ 74DE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 74DF 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1028+ 74E1             >                org     $-1                 // alter last byte of Name just above to set
1028+ 74E0 A8          >                db      {b $} | END_BIT     // msb as name end
1028+ 74E1             >
1028+ 74E1 CF 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 74E3             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 74E3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 74E5             >                else
1028+ 74E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1028+ 74E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 74E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 74E5             >
1028+ 74E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 74E5 A9 63 29 00                  dw      LIT, ")"                // [char] )
1030+ 74E9 AD 74                        dw      DOT_C                   // [compile] .c
1031+ 74EB AB 69                        dw      EXIT                    // ; immediate
1032+ 74ED
1033+ 74ED              //  ______________________________________________________________________
1034+ 74ED              //
1035+ 74ED              // (sgn)        a -- a f
1036+ 74ED              // determines if char in addr a is a sign (+ or -), and in that case increments
1037+ 74ED              // a flag. Returns f as the sign, true for negative, false for positive.
1038+ 74ED              // called by NUMBER and (EXP)
1039+ 74ED                              Colon_Def CSGN,  "(SGN)", is_normal
1039+ 74ED             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1039+ 74ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ 74ED             >
1039+ 74ED             >                // dummy db directives used to calculate length of namec
1039+ 74ED 28 53 47 4E >                db      "(SGN)"
1039+ 74F1 29          >
1039+ 74F2             >len_NFA         defl    $ - temp_NFA
1039+ 74F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ 74ED             >
1039+ 74ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ 74EE 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1039+ 74F2 29          >
1039+ 74F3             >                org     $-1                 // alter last byte of Name just above to set
1039+ 74F2 A9          >                db      {b $} | END_BIT     // msb as name end
1039+ 74F3             >
1039+ 74F3 DE 74       >                dw      last_NFA            // Link to previous definition Name
1039+ 74F5             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 74F5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1039+ 74F7             >                else
1039+ 74F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1039+ 74F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 74F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 74F7             >
1039+ 74F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 74F7 0C 6B 4D 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1040+ 74FB BA 6B
1041+ 74FD 0C 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1041+ 7501 2D 00 37 6F
1042+ 7505                                                              // if
1043+ 7505 2C 64                        dw      ZBRANCH
1044+ 7507 12 00                        dw      CSgn_Else_0 - $
1045+ 7509 D7 6A                        dw          DROP                //      drop
1046+ 750B 4D 6A                        dw          ONE_PLUS            //      1+
1047+ 750D 04 6D 5A 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1047+ 7511 7C 6B
1048+ 7513 04 6D                        dw          ONE                 //      1
1049+ 7515                                                              // else
1050+ 7515 15 64                        dw      BRANCH
1051+ 7517 16 00                        dw      CSgn_Endif_0 - $
1052+ 7519              CSgn_Else_0:
1053+ 7519 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1053+ 751D 37 6F
1054+ 751F                                                              //      if
1055+ 751F 2C 64                        dw          ZBRANCH
1056+ 7521 0A 00                        dw          CSgn_Endif_1 - $
1057+ 7523 4D 6A                        dw              ONE_PLUS        //          1+
1058+ 7525 04 6D 5A 6E                  dw              ONE, DPL        //          1 dpl
1059+ 7529 7C 6B                        dw              PLUSSTORE       //          +!
1060+ 752B              CSgn_Endif_1                                    //      endif
1061+ 752B FC 6C                        dw          ZERO                //      0
1062+ 752D              CSgn_Endif_0:                                   // endif
1063+ 752D AB 69                        dw      EXIT
1064+ 752F
1065+ 752F              //  ______________________________________________________________________
1066+ 752F              //
1067+ 752F              // (number)     d a -- d1 a1
1068+ 752F              // using the current BASE parse characters stored in address a
1069+ 752F              // accumulating a double precision integer d
1070+ 752F              // the process stops at the first not-convertible character
1071+ 752F              // A double-number is kept in CPU registers as HLDE.
1072+ 752F              // On the stack a double number is treated as two single numbers
1073+ 752F              // where HL is on the top of the stack and DE is the second from top,
1074+ 752F              // so in the stack memory it appears as LHED.
1075+ 752F              // Instead, in 2VARIABLE a double number is stored as EDLH.
1076+ 752F                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1076+ 752F             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1076+ 752F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 752F             >
1076+ 752F             >                // dummy db directives used to calculate length of namec
1076+ 752F 28 4E 55 4D >                db      "(NUMBER)"
1076+ 7533 42 45 52 29 >
1076+ 7537             >len_NFA         defl    $ - temp_NFA
1076+ 7537             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 752F             >
1076+ 752F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 7530 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1076+ 7534 42 45 52 29 >
1076+ 7538             >                org     $-1                 // alter last byte of Name just above to set
1076+ 7537 A9          >                db      {b $} | END_BIT     // msb as name end
1076+ 7538             >
1076+ 7538 ED 74       >                dw      last_NFA            // Link to previous definition Name
1076+ 753A             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 753A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 753C             >                else
1076+ 753C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1076+ 753C             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 753C             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 753C             >
1076+ 753C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 753C                                                              // begin
1078+ 753C              CNumber_Begin:
1079+ 753C 4D 6A                        dw          ONE_PLUS            //      1+
1080+ 753E 0C 6B BE 69                  dw          DUP, TO_R           //      dup >r
1081+ 7542 BA 6B                        dw          CFETCH              //      @
1082+ 7544 51 6E 9F 6B                  dw          BASE, FETCH         //      base @
1083+ 7548 B1 64                        dw          DIGIT               //      digit
1084+ 754A                                                              // while
1085+ 754A 2C 64                        dw      ZBRANCH
1086+ 754C 2C 00                        dw      CNumber_While_end - $
1087+ 754E FF 6A                        dw          SWAP                //      swap
1088+ 7550 51 6E 9F 6B                  dw          BASE, FETCH         //      base @
1089+ 7554 D1 68                        dw          UM_MUL              //      um*
1090+ 7556 D7 6A 19 6B                  dw          DROP, ROT           //      drop rot
1091+ 755A 51 6E 9F 6B                  dw          BASE, FETCH         //      base @
1092+ 755E D1 68                        dw          UM_MUL              //      um*
1093+ 7560 39 6A                        dw          DPLUS               //      d+
1094+ 7562 5A 6E 9F 6B                  dw          DPL, FETCH          //      dpl @
1095+ 7566 4D 6A                        dw          ONE_PLUS            //      1+
1096+ 7568                                                              //      if
1097+ 7568 2C 64                        dw          ZBRANCH
1098+ 756A 08 00                        dw          CNumber_Endif - $
1099+ 756C 04 6D 5A 6E                  dw              ONE, DPL        //          1 dpl
1100+ 7570 7C 6B                        dw              PLUSSTORE       //          +!
1101+ 7572              CNumber_Endif:                                  //      endif
1102+ 7572 D2 69                        dw             R_TO             //      r>  ( balance rp )
1103+ 7574 15 64                        dw      BRANCH
1104+ 7576 C6 FF                        dw      CNumber_Begin - $
1105+ 7578              CNumber_While_end:                              // repeat
1106+ 7578 D2 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1107+ 757A AB 69                        dw      EXIT                    // ;
1108+ 757C
1109+ 757C              //  ______________________________________________________________________
1110+ 757C              //
1111+ 757C              // number       a -- d
1112+ 757C                              Colon_Def NUMBER,  "NUMBER", is_normal
1112+ 757C             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1112+ 757C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ 757C             >
1112+ 757C             >                // dummy db directives used to calculate length of namec
1112+ 757C 4E 55 4D 42 >                db      "NUMBER"
1112+ 7580 45 52       >
1112+ 7582             >len_NFA         defl    $ - temp_NFA
1112+ 7582             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ 757C             >
1112+ 757C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ 757D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1112+ 7581 45 52       >
1112+ 7583             >                org     $-1                 // alter last byte of Name just above to set
1112+ 7582 D2          >                db      {b $} | END_BIT     // msb as name end
1112+ 7583             >
1112+ 7583 2F 75       >                dw      last_NFA            // Link to previous definition Name
1112+ 7585             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 7585 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 7587             >                else
1112+ 7587 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1112+ 7587             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 7587             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 7587             >
1112+ 7587             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 7587 FC 6C FC 6C                  dw      ZERO, ZERO              // 0 0
1114+ 758B 19 6B                        dw      ROT                     // rot
1115+ 758D F5 74 BE 69                  dw      CSGN, TO_R              // (sgn) >r
1116+ 7591 1D 6D 5A 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1116+ 7595 AC 6B
1117+ 7597 3A 75                        dw      CNUMBER                 // (number)
1118+ 7599 0C 6B BA 6B                  dw      DUP, CFETCH             // dup c@
1119+ 759D A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1119+ 75A1 37 6F
1120+ 75A3                                                              // if
1121+ 75A3 2C 64                        dw      ZBRANCH
1122+ 75A5 0A 00                        dw      Number_Endif_1 - $
1123+ 75A7 FC 6C 5A 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1123+ 75AB AC 6B
1124+ 75AD 3A 75                        dw          CNUMBER             //      (number)
1125+ 75AF              Number_Endif_1:                                 // endif
1126+ 75AF BA 6B 26 6D                  dw      CFETCH, BL              // c@ bl
1127+ 75B3 29 6F FC 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1127+ 75B7 97 70
1128+ 75B9 D2 69                        dw      R_TO                    // r>
1129+ 75BB                                                              // if
1130+ 75BB 2C 64                        dw      ZBRANCH
1131+ 75BD 04 00                        dw      Number_Endif_2 - $
1132+ 75BF AD 6A                        dw          DMINUS              //      dminus
1133+ 75C1              Number_Endif_2:                                 // endif
1134+ 75C1 AB 69                        dw      EXIT                    // ;
1135+ 75C3
1136+ 75C3              //  ______________________________________________________________________
1137+ 75C3              //
1138+ 75C3              // -find        a -- d
1139+ 75C3                              Colon_Def LFIND,  "-FIND", is_normal
1139+ 75C3             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1139+ 75C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 75C3             >
1139+ 75C3             >                // dummy db directives used to calculate length of namec
1139+ 75C3 2D 46 49 4E >                db      "-FIND"
1139+ 75C7 44          >
1139+ 75C8             >len_NFA         defl    $ - temp_NFA
1139+ 75C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 75C3             >
1139+ 75C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 75C4 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1139+ 75C8 44          >
1139+ 75C9             >                org     $-1                 // alter last byte of Name just above to set
1139+ 75C8 C4          >                db      {b $} | END_BIT     // msb as name end
1139+ 75C9             >
1139+ 75C9 7C 75       >                dw      last_NFA            // Link to previous definition Name
1139+ 75CB             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 75CB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1139+ 75CD             >                else
1139+ 75CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 75CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 75CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 75CD             >
1139+ 75CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 75CD 26 6D 19 74                  dw      BL, WORD                // bl word
1141+ 75D1 2F 6E 9F 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1141+ 75D5 9F 6B
1142+ 75D7 26 65                        dw      C_FIND                  // (find)
1143+ 75D9 A6 6F                        dw      QDUP                    // ?dup
1144+ 75DB ED 69                        dw      ZEQUAL                  // 0=
1145+ 75DD                                                              // if
1146+ 75DD 2C 64                        dw      ZBRANCH
1147+ 75DF 08 00                        dw      LFind_Endif - $
1148+ 75E1 DB 6E                        dw          HERE                //      here
1149+ 75E3 13 70                        dw          LATEST              //      latest
1150+ 75E5 26 65                        dw          C_FIND              //      (find)
1151+ 75E7              LFind_Endif:                                    // endif
1152+ 75E7 AB 69                        dw      EXIT                    // ;
1153+ 75E9
1154+ 75E9              //  ______________________________________________________________________
1155+ 75E9              //
1156+ 75E9              // (abort)      --
1157+ 75E9                              Colon_Def CABORT,  "(ABORT)", is_normal
1157+ 75E9             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1157+ 75E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 75E9             >
1157+ 75E9             >                // dummy db directives used to calculate length of namec
1157+ 75E9 28 41 42 4F >                db      "(ABORT)"
1157+ 75ED 52 54 29    >
1157+ 75F0             >len_NFA         defl    $ - temp_NFA
1157+ 75F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 75E9             >
1157+ 75E9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 75EA 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1157+ 75EE 52 54 29    >
1157+ 75F1             >                org     $-1                 // alter last byte of Name just above to set
1157+ 75F0 A9          >                db      {b $} | END_BIT     // msb as name end
1157+ 75F1             >
1157+ 75F1 C3 75       >                dw      last_NFA            // Link to previous definition Name
1157+ 75F3             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 75F3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 75F5             >                else
1157+ 75F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 75F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 75F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 75F5             >
1157+ 75F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 75F5 BA 78                        dw      ABORT                   // abort
1159+ 75F7 AB 69                        dw      EXIT                    // ;
1160+ 75F9
1161+ 75F9              //  ______________________________________________________________________
1162+ 75F9              //
1163+ 75F9              // error        n --
1164+ 75F9              // raise an error
1165+ 75F9              // if WARNING is 0, prints "MSG#n".
1166+ 75F9              // if WARNING is 1, prints line n of screen 4.
1167+ 75F9              // if WARNING is -1 does (ABORT) that normally does ABORT
1168+ 75F9              // value can be negative or beyond block 4.
1169+ 75F9                              Colon_Def ERROR,  "ERROR", is_normal
1169+ 75F9             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1169+ 75F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 75F9             >
1169+ 75F9             >                // dummy db directives used to calculate length of namec
1169+ 75F9 45 52 52 4F >                db      "ERROR"
1169+ 75FD 52          >
1169+ 75FE             >len_NFA         defl    $ - temp_NFA
1169+ 75FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 75F9             >
1169+ 75F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 75FA 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1169+ 75FE 52          >
1169+ 75FF             >                org     $-1                 // alter last byte of Name just above to set
1169+ 75FE D2          >                db      {b $} | END_BIT     // msb as name end
1169+ 75FF             >
1169+ 75FF E9 75       >                dw      last_NFA            // Link to previous definition Name
1169+ 7601             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 7601 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1169+ 7603             >                else
1169+ 7603 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1169+ 7603             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 7603             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 7603             >
1169+ 7603             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 7603 A7 6D 9F 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1170+ 7607 08 6A
1171+ 7609                                                              // if
1172+ 7609 2C 64                        dw      ZBRANCH
1173+ 760B 04 00                        dw      Error_Endif_1 - $
1174+ 760D F3 75                        dw          CABORT              //      (abort)
1175+ 760F              Error_Endif_1:                                  // endif
1176+ 760F DB 6E 31 72                  dw      HERE, COUNT, TYPE       // here count type
1176+ 7613 97 72
1177+ 7615 68 74                        dw      C_DOT_QUOTE             // .( ? )
1178+ 7617 02 3F 20                     db      2, "? "
1179+ 761A EB 7A                        dw      MESSAGE                 // message  ( forward )
1180+ 761C 7E 6D 9F 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1180+ 7620 82 69
1181+ 7622 FB 6D 9F 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1181+ 7626 A6 6F
1182+ 7628                                                              // if
1183+ 7628 2C 64                        dw      ZBRANCH
1184+ 762A 08 00                        dw      Error_Endif_2 - $
1185+ 762C 04 6E 9F 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1185+ 7630 FF 6A
1186+ 7632              Error_Endif_2:                                  // endif
1187+ 7632 79 78                        dw      QUIT                    // quit ( forward )
1188+ 7634 AB 69                        dw      EXIT                    // ;
1189+ 7636              //  ______________________________________________________________________
1190+ 7636              //
1191+ 7636              // id.          nfa --
1192+ 7636                              Colon_Def ID_DOT,  "ID.", is_normal
1192+ 7636             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1192+ 7636             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1192+ 7636             >
1192+ 7636             >                // dummy db directives used to calculate length of namec
1192+ 7636 49 44 2E    >                db      "ID."
1192+ 7639             >len_NFA         defl    $ - temp_NFA
1192+ 7639             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1192+ 7636             >
1192+ 7636 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1192+ 7637 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1192+ 763A             >                org     $-1                 // alter last byte of Name just above to set
1192+ 7639 AE          >                db      {b $} | END_BIT     // msb as name end
1192+ 763A             >
1192+ 763A F9 75       >                dw      last_NFA            // Link to previous definition Name
1192+ 763C             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1192+ 763C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1192+ 763E             >                else
1192+ 763E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1192+ 763E             >                endif           ; ok        // for other definitions it "points" the correct handler
1192+ 763E             >                // Use of "; ok" to suppress "warning[fwdref]"
1192+ 763E             >
1192+ 763E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1193+ 763E 06 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1193+ 7642 20 00 A9 63
1193+ 7646 60 00
1194+ 7648 B7 73                        dw      FILL                    // fill
1195+ 764A 0C 6B 51 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1195+ 764E 23 70
1196+ 7650 C7 6A 29 6F                  dw      OVER, SUBTRACT          // over -
1197+ 7654 06 74 FF 6A                  dw      PAD, SWAP               // pad swap
1198+ 7658 9E 68                        dw      CMOVE                   // cmove
1199+ 765A 06 74 31 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1199+ 765E A9 63 1F 00
1200+ 7662 3B 69                        dw      AND_OP                  // and  ( use only lower bits )
1201+ 7664 97 72 DD 6F                  dw      TYPE, SPACE             // type
1202+ 7668 AB 69                        dw      EXIT                    // ;
1203+ 766A
1204+ 766A              //  ______________________________________________________________________
1205+ 766A              //
1206+ 766A              // code         -- cccc
1207+ 766A                              Colon_Def CODE,  "CODE", is_normal
1207+ 766A             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1207+ 766A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ 766A             >
1207+ 766A             >                // dummy db directives used to calculate length of namec
1207+ 766A 43 4F 44 45 >                db      "CODE"
1207+ 766E             >len_NFA         defl    $ - temp_NFA
1207+ 766E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ 766A             >
1207+ 766A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ 766B 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1207+ 766F             >                org     $-1                 // alter last byte of Name just above to set
1207+ 766E C5          >                db      {b $} | END_BIT     // msb as name end
1207+ 766F             >
1207+ 766F 36 76       >                dw      last_NFA            // Link to previous definition Name
1207+ 7671             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 7671 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 7673             >                else
1207+ 7673 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1207+ 7673             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 7673             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 7673             >
1207+ 7673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 7673 CB 75                        dw      LFIND                   // -find
1209+ 7675                                                              // if
1210+ 7675 2C 64                        dw      ZBRANCH
1211+ 7677 10 00                        dw      Code_Endif - $
1212+ 7679 D7 6A                        dw          DROP                //      drop
1213+ 767B 75 70 3C 76                  dw          TO_NAME, ID_DOT     //      >name id.
1214+ 767F A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1214+ 7683 EB 7A
1215+ 7685 DD 6F                        dw          SPACE               //      space
1216+ 7687              Code_Endif:                                     // endif
1217+ 7687 DB 6E                        dw      HERE                    // here
1218+ 7689                                                              // ( ---- here begins NFA ---- )
1219+ 7689 0C 6B BA 6B                  dw      DUP, CFETCH             // dup c@
1220+ 768D 9A 6D 9F 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1220+ 7691 79 6F
1221+ 7693 4D 6A EB 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1222+ 7697 0C 6B                        dw      DUP                     // dup
1223+ 7699 A9 63                        dw      LIT
1224+ 769B A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1225+ 769D 92 6B                        dw      TOGGLE                  // toggle
1226+ 769F DB 6E 59 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1227+ 76A3 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1227+ 76A7 92 6B
1228+ 76A9                                                              // ( ---- here is LFA ---- )
1229+ 76A9 13 70 F7 6E                  dw      LATEST, COMMA           // latest ,
1230+ 76AD 3C 6E 9F 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1230+ 76B1 AC 6B
1231+ 76B3 DB 6E 75 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1231+ 76B7 F7 6E
1232+ 76B9 AB 69                        dw      EXIT                    // ;
1233+ 76BB
1234+ 76BB              //  ______________________________________________________________________
1235+ 76BB              //
1236+ 76BB              // create       -- cccc     ( compile time )
1237+ 76BB              //              -- a        ( run time )
1238+ 76BB                              Colon_Def CREATE,  "CREATE", is_normal
1238+ 76BB             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1238+ 76BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ 76BB             >
1238+ 76BB             >                // dummy db directives used to calculate length of namec
1238+ 76BB 43 52 45 41 >                db      "CREATE"
1238+ 76BF 54 45       >
1238+ 76C1             >len_NFA         defl    $ - temp_NFA
1238+ 76C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ 76BB             >
1238+ 76BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ 76BC 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1238+ 76C0 54 45       >
1238+ 76C2             >                org     $-1                 // alter last byte of Name just above to set
1238+ 76C1 C5          >                db      {b $} | END_BIT     // msb as name end
1238+ 76C2             >
1238+ 76C2 6A 76       >                dw      last_NFA            // Link to previous definition Name
1238+ 76C4             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 76C4 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 76C6             >                else
1238+ 76C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1238+ 76C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 76C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 76C6             >
1238+ 76C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 76C6 71 76 76 71                  dw      CODE, SMUDGE        // code smudge
1240+ 76CA
1241+ 76CA
1242+ 76CA CC 71                        dw      C_SEMICOLON_CODE
1243+ 76CC                              // this routine is called from the call coded in CFA
1244+ 76CC              Create_Ptr:
1245+ 76CC 13                           inc     de
1246+ 76CD D5                           push    de                  // balance TOS before overwrite it
1247+ 76CE
1248+ 76CE                              next
1248+ 76CE DD E9       >                jp      (ix)
1249+ 76D0
1250+ 76D0              //  ______________________________________________________________________
1251+ 76D0              //
1252+ 76D0              // [compile]    -- cccc     ( compile time )
1253+ 76D0                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1253+ 76D0             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1253+ 76D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1253+ 76D0             >
1253+ 76D0             >                // dummy db directives used to calculate length of namec
1253+ 76D0 5B 43 4F 4D >                db      "[COMPILE]"
1253+ 76D4 50 49 4C 45 >
1253+ 76D8 5D          >
1253+ 76D9             >len_NFA         defl    $ - temp_NFA
1253+ 76D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1253+ 76D0             >
1253+ 76D0 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1253+ 76D1 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1253+ 76D5 50 49 4C 45 >
1253+ 76D9 5D          >
1253+ 76DA             >                org     $-1                 // alter last byte of Name just above to set
1253+ 76D9 DD          >                db      {b $} | END_BIT     // msb as name end
1253+ 76DA             >
1253+ 76DA BB 76       >                dw      last_NFA            // Link to previous definition Name
1253+ 76DC             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1253+ 76DC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1253+ 76DE             >                else
1253+ 76DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1253+ 76DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1253+ 76DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1253+ 76DE             >
1253+ 76DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1254+ 76DE CB 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1255+ 76E0 ED 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1256+ 76E2 FC 6C 97 70                  dw      ZERO, QERROR            // 0 ?error
1257+ 76E6 D7 6A                        dw      DROP                    // drop       (  cfa  )
1258+ 76E8 F7 6E                        dw      COMMA                   // ,
1259+ 76EA AB 69                        dw      EXIT                    // ; immediate
1260+ 76EC
1261+ 76EC              //  ______________________________________________________________________
1262+ 76EC              //
1263+ 76EC              // literal      n --      ( compile time )
1264+ 76EC                              Colon_Def LITERAL,  "LITERAL", is_immediate
1264+ 76EC             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1264+ 76EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 76EC             >
1264+ 76EC             >                // dummy db directives used to calculate length of namec
1264+ 76EC 4C 49 54 45 >                db      "LITERAL"
1264+ 76F0 52 41 4C    >
1264+ 76F3             >len_NFA         defl    $ - temp_NFA
1264+ 76F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 76EC             >
1264+ 76EC C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 76ED 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1264+ 76F1 52 41 4C    >
1264+ 76F4             >                org     $-1                 // alter last byte of Name just above to set
1264+ 76F3 CC          >                db      {b $} | END_BIT     // msb as name end
1264+ 76F4             >
1264+ 76F4 D0 76       >                dw      last_NFA            // Link to previous definition Name
1264+ 76F6             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 76F6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1264+ 76F8             >                else
1264+ 76F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1264+ 76F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 76F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 76F8             >
1264+ 76F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 76F8 47 6E 9F 6B                  dw      STATE, FETCH            // state @
1266+ 76FC                                                              // if
1267+ 76FC 2C 64                        dw      ZBRANCH
1268+ 76FE 08 00                        dw      Literal_Endif - $
1269+ 7700 2A 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1270+ 7704 F7 6E                        dw          COMMA               //      ,
1271+ 7706              Literal_Endif:                                  // endif
1272+ 7706 AB 69                        dw      EXIT                    // ; immediate
1273+ 7708
1274+ 7708              //  ______________________________________________________________________
1275+ 7708              //
1276+ 7708              // dliteral     n --      ( compile time )
1277+ 7708                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1277+ 7708             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1277+ 7708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 7708             >
1277+ 7708             >                // dummy db directives used to calculate length of namec
1277+ 7708 44 4C 49 54 >                db      "DLITERAL"
1277+ 770C 45 52 41 4C >
1277+ 7710             >len_NFA         defl    $ - temp_NFA
1277+ 7710             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 7708             >
1277+ 7708 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 7709 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1277+ 770D 45 52 41 4C >
1277+ 7711             >                org     $-1                 // alter last byte of Name just above to set
1277+ 7710 CC          >                db      {b $} | END_BIT     // msb as name end
1277+ 7711             >
1277+ 7711 EC 76       >                dw      last_NFA            // Link to previous definition Name
1277+ 7713             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 7713 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1277+ 7715             >                else
1277+ 7715 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 7715             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 7715             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 7715             >
1277+ 7715             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 7715 47 6E 9F 6B                  dw      STATE, FETCH            // state @
1279+ 7719                                                              // if
1280+ 7719 2C 64                        dw      ZBRANCH
1281+ 771B 08 00                        dw      DLiteral_Endif - $
1282+ 771D FF 6A                        dw          SWAP                //      swap
1283+ 771F F6 76 F6 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1284+ 7723              DLiteral_Endif:                                 // endif
1285+ 7723 AB 69                        dw      EXIT                    // ; immediate
1286+ 7725
1287+ 7725              //  ______________________________________________________________________
1288+ 7725              //
1289+ 7725              // [char]       n --      ( compile time )
1290+ 7725              // inside colon definition, gets first character from next input word
1291+ 7725              // and compiles it as literal.
1292+ 7725                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1292+ 7725             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1292+ 7725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 7725             >
1292+ 7725             >                // dummy db directives used to calculate length of namec
1292+ 7725 5B 43 48 41 >                db      "[CHAR]"
1292+ 7729 52 5D       >
1292+ 772B             >len_NFA         defl    $ - temp_NFA
1292+ 772B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 7725             >
1292+ 7725 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 7726 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1292+ 772A 52 5D       >
1292+ 772C             >                org     $-1                 // alter last byte of Name just above to set
1292+ 772B DD          >                db      {b $} | END_BIT     // msb as name end
1292+ 772C             >
1292+ 772C 08 77       >                dw      last_NFA            // Link to previous definition Name
1292+ 772E             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 772E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1292+ 7730             >                else
1292+ 7730 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 7730             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 7730             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 7730             >
1292+ 7730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 7730 83 74 F6 76                  dw      CHAR, LITERAL           // char [compile] literal
1294+ 7734 AB 69                        dw      EXIT                    // ; immediate
1295+ 7736
1296+ 7736              //  ______________________________________________________________________
1297+ 7736              //
1298+ 7736              // 0x00         n --      ( compile time )
1299+ 7736                              Colon_Def NUL_WORD,  $00, is_immediate
1299+ 7736             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1299+ 7736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 7736             >
1299+ 7736             >                // dummy db directives used to calculate length of namec
1299+ 7736 00          >                db      $00
1299+ 7737             >len_NFA         defl    $ - temp_NFA
1299+ 7737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 7736             >
1299+ 7736 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 7737 00          >                db      $00               // name string in 7-bit ascii, but
1299+ 7738             >                org     $-1                 // alter last byte of Name just above to set
1299+ 7737 80          >                db      {b $} | END_BIT     // msb as name end
1299+ 7738             >
1299+ 7738 25 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 773A             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 773A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 773C             >                else
1299+ 773C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 773C             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 773C             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 773C             >
1299+ 773C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 773C FB 6D 9F 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1300+ 7740 04 6D
1301+ 7742 6B 6F                        dw      GREATER                 // > if
1302+ 7744                                                              // if
1303+ 7744 2C 64                        dw      ZBRANCH
1304+ 7746 28 00                        dw      Nul_Else_1 - $
1305+ 7748 04 6D FB 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1305+ 774C 7C 6B
1306+ 774E FC 6C 04 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1306+ 7752 AC 6B
1307+ 7754 FB 6D 9F 6B                  dw          BLK, FETCH          //      blk @
1308+ 7758 48 6D                        dw          BSCR                //      b/scr
1309+ 775A 59 6A                        dw          ONE_SUBTRACT        //      1 -
1310+ 775C 3B 69                        dw          AND_OP              //      and  ( this is tricky )
1311+ 775E ED 69                        dw          ZEQUAL              //      0=
1312+ 7760                                                              //      if
1313+ 7760 2C 64                        dw          ZBRANCH
1314+ 7762 08 00                        dw          Nul_Endif_2 - $
1315+ 7764 C9 70                        dw              QEXEC           //          ?exec
1316+ 7766 D2 69 D7 6A                  dw              R_TO, DROP      //          r> drop
1317+ 776A              Nul_Endif_2:                                    //      endif
1318+ 776A 15 64                        dw      BRANCH
1319+ 776C 06 00                        dw      Nul_Endif_1 - $
1320+ 776E              Nul_Else_1:                                     // else
1321+ 776E D2 69 D7 6A                  dw          R_TO, DROP          //      r> drop
1322+ 7772              Nul_Endif_1:                                    // endif
1323+ 7772 AB 69                        dw      EXIT                    // ;
1324+ 7774
1325+ 7774              //  ______________________________________________________________________
1326+ 7774              //
1327+ 7774              // ?stack       --
1328+ 7774              // Raise error #1 if stack is empty and you pop it
1329+ 7774              // Raise error #7 if stack is full.
1330+ 7774              // This means SP must always stay between HERE and FFFF
1331+ 7774              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1332+ 7774              // for Next 8K MMU paging this is $DOE8
1333+ 7774                              Colon_Def QSTACK, "?STACK", is_normal
1333+ 7774             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1333+ 7774             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1333+ 7774             >
1333+ 7774             >                // dummy db directives used to calculate length of namec
1333+ 7774 3F 53 54 41 >                db      "?STACK"
1333+ 7778 43 4B       >
1333+ 777A             >len_NFA         defl    $ - temp_NFA
1333+ 777A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1333+ 7774             >
1333+ 7774 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1333+ 7775 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1333+ 7779 43 4B       >
1333+ 777B             >                org     $-1                 // alter last byte of Name just above to set
1333+ 777A CB          >                db      {b $} | END_BIT     // msb as name end
1333+ 777B             >
1333+ 777B 36 77       >                dw      last_NFA            // Link to previous definition Name
1333+ 777D             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1333+ 777D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1333+ 777F             >                else
1333+ 777F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1333+ 777F             >                endif           ; ok        // for other definitions it "points" the correct handler
1333+ 777F             >                // Use of "; ok" to suppress "warning[fwdref]"
1333+ 777F             >
1333+ 777F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1334+ 777F 73 69                        dw      SPFETCH                 // sp@
1335+ 7781 7E 6D 9F 6B                  dw      S0, FETCH               // s0 @
1336+ 7785 FF 6A 44 6F                  dw      SWAP, ULESS             // swap u<
1337+ 7789 04 6D 97 70                  dw      ONE, QERROR             // 1 ?error
1338+ 778D DB 6E                        dw      HERE                    // here
1339+ 778F 7E 6D 9F 6B                  dw      S0, FETCH, LESS         // s0 @ <
1339+ 7793 54 6F
1340+ 7795                                                              // if
1341+ 7795 2C 64                        dw      ZBRANCH
1342+ 7797 14 00                        dw      QStack_Endif - $
1343+ 7799 73 69                        dw          SPFETCH             //      sp@
1344+ 779B DB 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1344+ 779F 80 00
1345+ 77A1 2C 6A 44 6F                  dw          PLUS, ULESS         //      plus u<
1346+ 77A5 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1346+ 77A9 97 70
1347+ 77AB              QStack_Endif:                                   // endif
1348+ 77AB AB 69                        dw      EXIT                    // ;
1349+ 77AD
1350+ 77AD
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77AD                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77AD              //  ______________________________________________________________________
   2+ 77AD              //
   3+ 77AD              //  L2.asm
   4+ 77AD              //
   5+ 77AD              //  Level-2
   6+ 77AD              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77AD              //  ______________________________________________________________________
   8+ 77AD
   9+ 77AD
  10+ 77AD              //  ______________________________________________________________________
  11+ 77AD              //
  12+ 77AD              // interpret    --
  13+ 77AD              // This is the text interpreter.
  14+ 77AD              // It executes or compiles, depending on STATE, the text coming from
  15+ 77AD              // current input stream.
  16+ 77AD              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77AD              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77AD              // leaving on top of stack a single or double precision number, depending
  19+ 77AD              // on the presence of a decimal point.
  20+ 77AD              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77AD              // by the offending word.
  22+ 77AD                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77AD             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77AD             >
  22+ 77AD             >                // dummy db directives used to calculate length of namec
  22+ 77AD 49 4E 54 45 >                db      "INTERPRET"
  22+ 77B1 52 50 52 45 >
  22+ 77B5 54          >
  22+ 77B6             >len_NFA         defl    $ - temp_NFA
  22+ 77B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77AD             >
  22+ 77AD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77AE 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77B2 52 50 52 45 >
  22+ 77B6 54          >
  22+ 77B7             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77B6 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77B7             >
  22+ 77B7 74 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77B9             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77B9 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77BB             >                else
  22+ 77BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77BB             >
  22+ 77BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77BB
  24+ 77BB              Interpret_Begin:                                        // begin
  25+ 77BB CB 75                        dw          LFIND                       //      -find
  26+ 77BD                                                                      //      if
  27+ 77BD 2C 64                        dw          ZBRANCH
  28+ 77BF 1A 00                        dw          Interpret_Else_1 - $
  29+ 77C1 47 6E 9F 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77C5 54 6F
  30+ 77C7                                                                      //          if
  31+ 77C7 2C 64                        dw              ZBRANCH
  32+ 77C9 08 00                        dw              Interpret_Else_2 - $
  33+ 77CB 47 71                        dw                  COMPILE_XT          //              compile,
  34+ 77CD                                                                      //          else
  35+ 77CD 15 64                        dw              BRANCH
  36+ 77CF 06 00                        dw              Interpret_Endif_2 - $
  37+ 77D1              Interpret_Else_2:
  38+ 77D1 BE 63 A9 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77D5              Interpret_Endif_2:                                      //          endif
  40+ 77D5                                                                      //      else
  41+ 77D5 15 64                        dw          BRANCH
  42+ 77D7 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77D9              Interpret_Else_1:
  44+ 77D9 DB 6E 85 75                  dw              HERE, NUMBER            //          here number
  45+ 77DD 5A 6E 9F 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77E1 4D 6A
  46+ 77E3                                                                      //          if
  47+ 77E3 2C 64                        dw              ZBRANCH
  48+ 77E5 08 00                        dw              Interpret_Else_3 - $
  49+ 77E7              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77E7              //                                                      //              if
  51+ 77E7              //              dw                  ZBRANCH
  52+ 77E7              //              dw                  Interpret_Endif_4 - $
  53+ 77E7              //              dw                      ONE, ZERO       //                  1 0
  54+ 77E7              //              dw                      TWO_DROP        //                  2drop
  55+ 77E7              //Interpret_Endif_4:                                      //              endif
  56+ 77E7 13 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77E9                                                                      //          else
  58+ 77E9 15 64                        dw              BRANCH
  59+ 77EB 06 00                        dw              Interpret_Endif_3 - $
  60+ 77ED              Interpret_Else_3:
  61+ 77ED D7 6A                        dw                  DROP                //              drop
  62+ 77EF F6 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77F1              Interpret_Endif_3:                                      //          endif
  64+ 77F1              Interpret_Endif_1:                                      //      endif
  65+ 77F1 7D 77                        dw          QSTACK                      //      ?stack
  66+ 77F3 47 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77F5                                                                      //      if
  68+ 77F5 2C 64                        dw          ZBRANCH
  69+ 77F7 04 00                        dw          Interpret_Endif_5 - $
  70+ 77F9 79 78                        dw              QUIT                  //          quit
  71+ 77FB              Interpret_Endif_5:                                      //      endif
  72+ 77FB 15 64                        dw      BRANCH
  73+ 77FD BE FF                        dw      Interpret_Begin - $
  74+ 77FF AB 69                        dw      EXIT                            // ;
  75+ 7801
  76+ 7801              //  ______________________________________________________________________
  77+ 7801              //
  78+ 7801              // vocabulary   -- cccc     ( compile time )
  79+ 7801              // Defining word used in the form   VOCABULARY cccc
  80+ 7801              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7801              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7801              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7801              // so new definitions can be inserted in that vocabulary.
  84+ 7801                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7801             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7801             >
  84+ 7801             >                // dummy db directives used to calculate length of namec
  84+ 7801 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7805 42 55 4C 41 >
  84+ 7809 52 59       >
  84+ 780B             >len_NFA         defl    $ - temp_NFA
  84+ 780B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7801             >
  84+ 7801 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7802 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7806 42 55 4C 41 >
  84+ 780A 52 59       >
  84+ 780C             >                org     $-1                 // alter last byte of Name just above to set
  84+ 780B D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 780C             >
  84+ 780C AD 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 780E             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 780E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7810             >                else
  84+ 7810 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7810             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7810             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7810             >
  84+ 7810             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7810
  86+ 7810 FA 71                        dw      CBUILDS
  87+ 7812
  88+ 7812 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7816 F7 6E
  89+ 7818 3C 6E 9F 6B                  dw      CURRENT, FETCH          // current @
  90+ 781C 7F 6A F7 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7820 DB 6E                        dw      HERE                    // here
  92+ 7822 C8 6D 9F 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7826 F7 6E
  93+ 7828 C8 6D AC 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 782C
  95+ 782C 0A 72                        dw      DOES_TO                 // does>
  96+ 782E              Vocabulary_Does:
  97+ 782E 75 6A                        dw      CELL_PLUS               // cell+
  98+ 7830 2F 6E AC 6B                  dw      CONTEXT, STORE          // context !
  99+ 7834 AB 69                        dw      EXIT                    // ;
 100+ 7836
 101+ 7836              //  ______________________________________________________________________
 102+ 7836              //
 103+ 7836              // forth        --
 104+ 7836              // Name of the first vocabulary.
 105+ 7836              // It makes FORTH the CONTEXT vocabulary.
 106+ 7836              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7836              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7836              // of a colon definition to be able to select the vocabulary.
 109+ 7836
 110+ 7836                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7836             >
 110+ 7836             >                // dummy db directives used to calculate length of namec
 110+ 7836 46 4F 52 54 >                db      "FORTH"
 110+ 783A 48          >
 110+ 783B             >len_NFA         defl    $ - temp_NFA
 110+ 783B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7836             >
 110+ 7836 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7837 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 783B 48          >
 110+ 783C             >                org     $-1                 // alter last byte of Name just above to set
 110+ 783B C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 783C             >
 110+ 783C 01 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 783E             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 783E 16 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7840             >                else
 110+ 7840 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7840             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7840             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7840             >
 110+ 7840             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7840 2E 78                        dw      Vocabulary_Does
 112+ 7842 81 A0                        db      $81, $A0
 113+ 7844              Forth_Latest_Ptr:
 114+ 7844 65 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 7846              Voclink_Ptr:
 116+ 7846 00 00                        dw      0
 117+ 7848              // Any new vocabulary is structured as follow:
 118+ 7848              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7848              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7848              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7848              //       at creations it points to the null-word of its parent vocabulary
 122+ 7848              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7848              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7848              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7848              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7848              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7848              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7848
 129+ 7848              //  ______________________________________________________________________
 130+ 7848              //
 131+ 7848              // definitions  --
 132+ 7848              // Used in the form  cccc DEFINITIONS
 133+ 7848              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7848              // vocabulary cccc.
 135+ 7848                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7848             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7848             >
 135+ 7848             >                // dummy db directives used to calculate length of namec
 135+ 7848 44 45 46 49 >                db      "DEFINITIONS"
 135+ 784C 4E 49 54 49 >
 135+ 7850 4F 4E 53    >
 135+ 7853             >len_NFA         defl    $ - temp_NFA
 135+ 7853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7848             >
 135+ 7848 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7849 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 784D 4E 49 54 49 >
 135+ 7851 4F 4E 53    >
 135+ 7854             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7853 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7854             >
 135+ 7854 36 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7856             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7856 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7858             >                else
 135+ 7858 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7858             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7858             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7858             >
 135+ 7858             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7858 2F 6E 9F 6B                  dw      CONTEXT, FETCH          // context @
 137+ 785C 3C 6E AC 6B                  dw      CURRENT, STORE          // current !
 138+ 7860 AB 69                        dw      EXIT                    // ;
 139+ 7862
 140+ 7862              //  ______________________________________________________________________
 141+ 7862              //
 142+ 7862              // (            -- cccc )
 143+ 7862              // the following text is interpreted as a comment until a closing )
 144+ 7862                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7862             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7862             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7862             >
 144+ 7862             >                // dummy db directives used to calculate length of namec
 144+ 7862 28          >                db      "("
 144+ 7863             >len_NFA         defl    $ - temp_NFA
 144+ 7863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7862             >
 144+ 7862 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7863 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7864             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7863 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7864             >
 144+ 7864 48 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7866             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7866 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7868             >                else
 144+ 7868 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7868             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7868             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7868             >
 144+ 7868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7868 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 786C 19 74 D7 6A                  dw      WORD, DROP              // word drop
 147+ 7870 AB 69                        dw      EXIT                    // ;
 148+ 7872
 149+ 7872              //  ______________________________________________________________________
 150+ 7872              //
 151+ 7872              // quit         --
 152+ 7872              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7872                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7872             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7872             >
 153+ 7872             >                // dummy db directives used to calculate length of namec
 153+ 7872 51 55 49 54 >                db      "QUIT"
 153+ 7876             >len_NFA         defl    $ - temp_NFA
 153+ 7876             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7872             >
 153+ 7872 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7873 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7877             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7876 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7877             >
 153+ 7877 62 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7879             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7879 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 787B             >                else
 153+ 787B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 787B             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 787B             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 787B             >
 153+ 787B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 787B
 155+ 787B B2 6E 9F 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 787F CE 67 D7 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7883 FC 6C B2 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7887 AC 6B
 158+ 7889 FC 6C FB 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 788D AC 6B
 159+ 788F 53 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7891                                                              // begin
 161+ 7891              Quit_Begin:
 162+ 7891 86 6D 9F 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7895 9C 69
 163+ 7897 2B 66                        dw      CR                      //      cr
 164+ 7899 9A 73                        dw      QUERY                   //      query
 165+ 789B              Next_Breakpoint_1:
 166+ 789B B9 77                        dw      INTERPRET               //      interpret
 167+ 789D 47 6E 9F 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78A1 ED 69
 168+ 78A3                                                              //      if
 169+ 78A3 2C 64                        dw      ZBRANCH
 170+ 78A5 07 00                        dw      Quit_Endif - $
 171+ 78A7 68 74                        dw          C_DOT_QUOTE
 172+ 78A9 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78AC              Quit_Endif:                                     //      else
 174+ 78AC                                                              // again
 175+ 78AC 15 64                        dw      BRANCH
 176+ 78AE E3 FF                        dw      Quit_Begin - $
 177+ 78B0 AB 69                        dw      EXIT                    // ;
 178+ 78B2
 179+ 78B2              //  ______________________________________________________________________
 180+ 78B2              //
 181+ 78B2              // abort        --
 182+ 78B2                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78B2             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78B2             >
 182+ 78B2             >                // dummy db directives used to calculate length of namec
 182+ 78B2 41 42 4F 52 >                db      "ABORT"
 182+ 78B6 54          >
 182+ 78B7             >len_NFA         defl    $ - temp_NFA
 182+ 78B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78B2             >
 182+ 78B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78B3 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78B7 54          >
 182+ 78B8             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78B7 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78B8             >
 182+ 78B8 72 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78BA             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78BA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78BC             >                else
 182+ 78BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78BC             >
 182+ 78BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78BC 7E 6D 9F 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78C0 82 69
 184+ 78C2 B6 71                        dw      DECIMAL                 // decimal
 185+ 78C4 3E 78                        dw      FORTH                   // [compile] forth
 186+ 78C6 56 78                        dw      DEFINITIONS             // definitions
 187+ 78C8              Autoexec_Ptr:
 188+ 78C8 7F 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78CA 79 78                        dw      QUIT                    // quit
 190+ 78CC AB 69                        dw      EXIT                    // ;
 191+ 78CE
 192+ 78CE              //  ______________________________________________________________________
 193+ 78CE              //
 194+ 78CE              // warm         --
 195+ 78CE                              Colon_Def WARM, "WARM", is_normal
 195+ 78CE             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78CE             >
 195+ 78CE             >                // dummy db directives used to calculate length of namec
 195+ 78CE 57 41 52 4D >                db      "WARM"
 195+ 78D2             >len_NFA         defl    $ - temp_NFA
 195+ 78D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78CE             >
 195+ 78CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78CF 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78D3             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78D2 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78D3             >
 195+ 78D3 B2 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78D5             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78D5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78D7             >                else
 195+ 78D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78D7             >
 195+ 78D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78D7 54 7C                        dw      BLK_INIT                // blk-init
 197+ 78D9 30 84                        dw      SPLASH                  // splash
 198+ 78DB A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78DF C1 6F
 199+ 78E1 BA 78                        dw      ABORT                   // abort
 200+ 78E3 AB 69                        dw      EXIT                    // exit
 201+ 78E5
 202+ 78E5              //  ______________________________________________________________________
 203+ 78E5              //
 204+ 78E5              // cold         --
 205+ 78E5                              Colon_Def COLD, "COLD", is_normal
 205+ 78E5             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78E5             >
 205+ 78E5             >                // dummy db directives used to calculate length of namec
 205+ 78E5 43 4F 4C 44 >                db      "COLD"
 205+ 78E9             >len_NFA         defl    $ - temp_NFA
 205+ 78E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78E5             >
 205+ 78E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78E6 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78EA             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78E9 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78EA             >
 205+ 78EA CE 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78EC             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78EC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78EE             >                else
 205+ 78EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78EE             >
 205+ 78EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78EE A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78F2 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78F6 9F 6B                        dw      FETCH                   // @
 209+ 78F8 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78FC 2C 6A
 210+ 78FE A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7902 9E 68                        dw      CMOVE
 212+ 7904 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7908 9F 6B                        dw      FETCH                   // @
 214+ 790A A9 63 44 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 790E AC 6B                        dw      STORE                   // !
 216+ 7910 FC 6C F2 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7914 AC 6B
 217+ 7916 D3 6D 9F 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 791A 0C 6B
 218+ 791C 86 6E AC 6B                  dw      USE, STORE              // use !
 219+ 7920 90 6E AC 6B                  dw      PREV, STORE             // prev !
 220+ 7924 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7928 A3 6E AC 6B
 221+ 792C              //              dw      LIT, 8
 222+ 792C              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 792C 0C 6D D1 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7930 AC 6B
 224+ 7932 D5 78        Warm_Start:     dw      WARM
 225+ 7934 EC 78        Cold_Start:     dw      COLD
 226+ 7936 AB 69                        dw      EXIT
 227+ 7938
 228+ 7938              //  ______________________________________________________________________
 229+ 7938              WarmRoutine:
 230+ 7938              ColdRoutine:
 231+ 7938 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 793C D9                           exx
 233+ 793D E5                           push    hl
 234+ 793E D9                           exx
 235+ 793F
 236+ 793F ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7943 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7947              //              nop
 239+ 7947 2A 7A 63                     ld      hl, (R0_origin)
 240+ 794A              //              nop
 241+ 794A                              ldrphl
 241+ 794A 22 96 63    >                ld      (RP_Pointer),hl
 242+ 794D 01 32 79                     ld      bc, Warm_Start
 243+ 7950 38 02                        jr      c, Warm_Skip
 244+ 7952 03                           inc     bc
 245+ 7953 03                           inc     bc
 246+ 7954              Warm_Skip:
 247+ 7954                              next
 247+ 7954 DD E9       >                jp      (ix)
 248+ 7956
 249+ 7956              //  ______________________________________________________________________
 250+ 7956              //
 251+ 7956              // basic        --
 252+ 7956                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7956             >
 252+ 7956             >                // dummy db directives used to calculate length of namec
 252+ 7956 42 41 53 49 >                db      "BASIC"
 252+ 795A 43          >
 252+ 795B             >len_NFA         defl    $ - temp_NFA
 252+ 795B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7956             >
 252+ 7956 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7957 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 795B 43          >
 252+ 795C             >                org     $-1                 // alter last byte of Name just above to set
 252+ 795B C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 795C             >
 252+ 795C E5 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 795E             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 795E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 795E             >                else
 252+ 795E 60 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7960             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7960             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7960             >
 252+ 7960             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7960 C1                           pop     bc
 254+ 7961 21 00 00                     ld      hl, 0
 255+ 7964 39                           add     hl, sp
 256+ 7965 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7969              //              nop
 258+ 7969 22 6E 63                     ld      (SP_Basic),hl
 259+ 796C D9                           exx
 260+ 796D E1                           pop     hl
 261+ 796E D9                           exx
 262+ 796F C9                           ret     // to Basic
 263+ 7970
 264+ 7970              //  ______________________________________________________________________
 265+ 7970              //
 266+ 7970              // +-           n1 n2 -- n3
 267+ 7970              // leaves n1 with the sign of n2 as n3.
 268+ 7970                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7970             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7970             >
 268+ 7970             >                // dummy db directives used to calculate length of namec
 268+ 7970 2B 2D       >                db      "+-"
 268+ 7972             >len_NFA         defl    $ - temp_NFA
 268+ 7972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7970             >
 268+ 7970 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7971 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7973             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7972 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7973             >
 268+ 7973 56 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7975             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7975 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7977             >                else
 268+ 7977 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7977             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7977             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7977             >
 268+ 7977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7977 08 6A                        dw      ZLESS                   // 0<
 270+ 7979                                                              // if
 271+ 7979 2C 64                        dw      ZBRANCH
 272+ 797B 04 00                        dw      Plus_Minus_Endif - $
 273+ 797D 97 6A                        dw          MINUS               //      minus
 274+ 797F              Plus_Minus_Endif:                               // endif
 275+ 797F AB 69                        dw      EXIT                    // ;
 276+ 7981
 277+ 7981              //  ______________________________________________________________________
 278+ 7981              //
 279+ 7981              // d+-          d1 n -- d2
 280+ 7981              // leaves d1 with the sign of n as d2.
 281+ 7981                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7981             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7981             >
 281+ 7981             >                // dummy db directives used to calculate length of namec
 281+ 7981 44 2B 2D    >                db      "D+-"
 281+ 7984             >len_NFA         defl    $ - temp_NFA
 281+ 7984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7981             >
 281+ 7981 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7982 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7985             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7984 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7985             >
 281+ 7985 70 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7987             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7987 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7989             >                else
 281+ 7989 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7989             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7989             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7989             >
 281+ 7989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7989 08 6A                        dw      ZLESS                   // 0<
 283+ 798B                                                              // if
 284+ 798B 2C 64                        dw      ZBRANCH
 285+ 798D 04 00                        dw      DPlus_Minus_Endif - $
 286+ 798F AD 6A                        dw          DMINUS              //      dminus
 287+ 7991              DPlus_Minus_Endif:                              // endif
 288+ 7991 AB 69                        dw      EXIT                    // ;
 289+ 7993
 290+ 7993              //  ______________________________________________________________________
 291+ 7993              //
 292+ 7993              // abs          n1 -- n2
 293+ 7993                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7993             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7993             >
 293+ 7993             >                // dummy db directives used to calculate length of namec
 293+ 7993 41 42 53    >                db      "ABS"
 293+ 7996             >len_NFA         defl    $ - temp_NFA
 293+ 7996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7993             >
 293+ 7993 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7994 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7997             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7996 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7997             >
 293+ 7997 81 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7999             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7999 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 799B             >                else
 293+ 799B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 799B             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 799B             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 799B             >
 293+ 799B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 799B 0C 6B                        dw      DUP                     // dup
 295+ 799D 75 79                        dw      PLUS_MINUS              // +-
 296+ 799F AB 69                        dw      EXIT                    // ;
 297+ 79A1
 298+ 79A1              //  ______________________________________________________________________
 299+ 79A1              //
 300+ 79A1              // dabs         d1 -- d2
 301+ 79A1                              Colon_Def DABS, "DABS", is_normal
 301+ 79A1             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79A1             >
 301+ 79A1             >                // dummy db directives used to calculate length of namec
 301+ 79A1 44 41 42 53 >                db      "DABS"
 301+ 79A5             >len_NFA         defl    $ - temp_NFA
 301+ 79A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79A1             >
 301+ 79A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79A2 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79A6             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79A5 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79A6             >
 301+ 79A6 93 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79A8             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79A8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79AA             >                else
 301+ 79AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79AA             >
 301+ 79AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79AA 0C 6B                        dw      DUP                     // dup
 303+ 79AC 87 79                        dw      DPLUS_MINUS             // d+-
 304+ 79AE AB 69                        dw      EXIT                    // ;
 305+ 79B0
 306+ 79B0              //  ______________________________________________________________________
 307+ 79B0              //
 308+ 79B0              // m*           n1 n2 -- d
 309+ 79B0              // multiply two integer giving a double
 310+ 79B0                              Colon_Def MMUL, "M*", is_normal
 310+ 79B0             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79B0             >
 310+ 79B0             >                // dummy db directives used to calculate length of namec
 310+ 79B0 4D 2A       >                db      "M*"
 310+ 79B2             >len_NFA         defl    $ - temp_NFA
 310+ 79B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79B0             >
 310+ 79B0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79B1 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79B3             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79B2 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79B3             >
 310+ 79B3 A1 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79B5             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79B5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79B7             >                else
 310+ 79B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79B7             >
 310+ 79B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79B7 6D 6B 60 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79BB BE 69
 312+ 79BD 99 79 FF 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79C1 99 79 D1 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79C5 D2 69 87 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79C9 AB 69                        dw      EXIT                    // ;
 316+ 79CB
 317+ 79CB              //  ______________________________________________________________________
 318+ 79CB              //
 319+ 79CB              // sm/rem       d n -- q r
 320+ 79CB              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79CB              // the remainder has the sign of d.
 322+ 79CB                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79CB             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79CB             >
 322+ 79CB             >                // dummy db directives used to calculate length of namec
 322+ 79CB 53 4D 2F 52 >                db      "SM/REM"
 322+ 79CF 45 4D       >
 322+ 79D1             >len_NFA         defl    $ - temp_NFA
 322+ 79D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79CB             >
 322+ 79CB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79CC 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79D0 45 4D       >
 322+ 79D2             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79D1 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79D2             >
 322+ 79D2 B0 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79D4             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79D4 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79D6             >                else
 322+ 79D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79D6             >
 322+ 79D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79D6 C7 6A BE 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79DA BE 69
 324+ 79DC A8 79 E6 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79E0 99 79
 325+ 79E2 02 69                        dw      UMDIVMOD                // um/mod
 326+ 79E4 D2 69                        dw      R_TO                    // r>
 327+ 79E6 E6 69 60 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79EA 75 79 FF 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79EE D2 69                        dw      R_TO                    // r>
 330+ 79F0 75 79 FF 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79F4 AB 69                        dw      EXIT                    // ;
 332+ 79F6
 333+ 79F6              //  ______________________________________________________________________
 334+ 79F6              //
 335+ 79F6              // fm/mod       d n -- q r
 336+ 79F6              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79F6              // the remainder has the sign of d.
 338+ 79F6                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79F6             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79F6             >
 338+ 79F6             >                // dummy db directives used to calculate length of namec
 338+ 79F6 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79FA 4F 44       >
 338+ 79FC             >len_NFA         defl    $ - temp_NFA
 338+ 79FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79F6             >
 338+ 79F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79F7 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79FB 4F 44       >
 338+ 79FD             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79FC C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79FD             >
 338+ 79FD CB 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79FF             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79FF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A01             >                else
 338+ 7A01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A01             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A01             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A01             >
 338+ 7A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A01 0C 6B BE 69                  dw      DUP, TO_R               // dup >r
 340+ 7A05 D4 79                        dw      SMDIVM
 341+ 7A07 C7 6A 0C 6B                  dw      OVER, DUP
 342+ 7A0B ED 69 ED 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A0F FF 6A 08 6A                  dw      SWAP, ZLESS
 344+ 7A13 E6 69 08 6A                  dw      R_OP, ZLESS
 345+ 7A17 60 69 3B 69                  dw      XOR_OP, AND_OP
 346+ 7A1B 2C 64                        dw      ZBRANCH
 347+ 7A1D 10 00                        dw      Fm_Mod_Else - $
 348+ 7A1F 59 6A                        dw          ONE_SUBTRACT
 349+ 7A21 FF 6A D2 69                  dw          SWAP, R_TO
 350+ 7A25 2C 6A FF 6A                  dw          PLUS, SWAP
 351+ 7A29 15 64                        dw      BRANCH
 352+ 7A2B 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A2D              Fm_Mod_Else:
 354+ 7A2D D2 69 D7 6A                  dw          R_TO, DROP
 355+ 7A31              Fm_Mod_Endif:
 356+ 7A31 AB 69                        dw      EXIT
 357+ 7A33              //              dw      TWO_DUP                 // 2dup
 358+ 7A33              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A33              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A33              //              dw      UMDIVMOD                // um/mod
 361+ 7A33              //              dw      SWAP                    // swap
 362+ 7A33              //              dw      II, ZLESS               // i'
 363+ 7A33              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A33              //              dw      R_TO                    // r>
 365+ 7A33              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A33              //              dw      R_OP                    // r@
 367+ 7A33              //              dw      ZLESS                   // i'
 368+ 7A33              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A33              //              dw      R_TO                    // r>
 370+ 7A33              //              dw      PLUS_MINUS              // +- swap
 371+ 7A33              //              dw      EXIT                    // ;
 372+ 7A33
 373+ 7A33              //  ______________________________________________________________________
 374+ 7A33              //
 375+ 7A33              // m/mod        d n -- q r
 376+ 7A33              // multiply two integer giving a double
 377+ 7A33                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A33             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A33             >
 377+ 7A33             >                // dummy db directives used to calculate length of namec
 377+ 7A33 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A37 44          >
 377+ 7A38             >len_NFA         defl    $ - temp_NFA
 377+ 7A38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A33             >
 377+ 7A33 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A34 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A38 44          >
 377+ 7A39             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A38 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A39             >
 377+ 7A39 F6 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A3B             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A3B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A3D             >                else
 377+ 7A3D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A3D             >
 377+ 7A3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A3D D4 79                        dw      SMDIVM
 379+ 7A3F AB 69                        dw      EXIT                    // ;
 380+ 7A41
 381+ 7A41              //  ______________________________________________________________________
 382+ 7A41              //
 383+ 7A41              // m/           d n -- q
 384+ 7A41              // multiply two integer giving a double
 385+ 7A41                              Colon_Def MDIV, "M/", is_normal
 385+ 7A41             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A41             >
 385+ 7A41             >                // dummy db directives used to calculate length of namec
 385+ 7A41 4D 2F       >                db      "M/"
 385+ 7A43             >len_NFA         defl    $ - temp_NFA
 385+ 7A43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A41             >
 385+ 7A41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A42 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A44             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A43 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A44             >
 385+ 7A44 33 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A46             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A46 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A48             >                else
 385+ 7A48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A48             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A48             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A48             >
 385+ 7A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A48 3B 7A E2 6A                  dw      MDIVM, NIP
 387+ 7A4C AB 69                        dw      EXIT                    // ;
 388+ 7A4E
 389+ 7A4E              //  ______________________________________________________________________
 390+ 7A4E              //
 391+ 7A4E              // *            n1 n2 -- n3
 392+ 7A4E              // multiply two integer
 393+ 7A4E                              Colon_Def MUL, "*", is_normal
 393+ 7A4E             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A4E             >
 393+ 7A4E             >                // dummy db directives used to calculate length of namec
 393+ 7A4E 2A          >                db      "*"
 393+ 7A4F             >len_NFA         defl    $ - temp_NFA
 393+ 7A4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A4E             >
 393+ 7A4E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A4F 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A50             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A4F AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A50             >
 393+ 7A50 41 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A52             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A52 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A54             >                else
 393+ 7A54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A54             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A54             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A54             >
 393+ 7A54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A54 B5 79 D7 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A58 AB 69                        dw      EXIT                    // ;
 396+ 7A5A
 397+ 7A5A              //  ______________________________________________________________________
 398+ 7A5A              //
 399+ 7A5A              // /mod         n1 n2 -- n3 n4
 400+ 7A5A              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A5A              // The remainder has the sign of n1
 402+ 7A5A                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A5A             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A5A             >
 402+ 7A5A             >                // dummy db directives used to calculate length of namec
 402+ 7A5A 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A5E             >len_NFA         defl    $ - temp_NFA
 402+ 7A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A5A             >
 402+ 7A5A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A5B 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A5F             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A5E C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A5F             >
 402+ 7A5F 4E 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A61             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A61 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A63             >                else
 402+ 7A63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A63             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A63             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A63             >
 402+ 7A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A63 BE 69 1A 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A67 D2 69
 404+ 7A69 3B 7A                        dw      MDIVM                   // m/mod
 405+ 7A6B AB 69                        dw      EXIT                    // ;
 406+ 7A6D
 407+ 7A6D              //  ______________________________________________________________________
 408+ 7A6D              //
 409+ 7A6D              // /            n1 n2 -- n3
 410+ 7A6D              // division
 411+ 7A6D                              Colon_Def DIV, "/", is_normal
 411+ 7A6D             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A6D             >
 411+ 7A6D             >                // dummy db directives used to calculate length of namec
 411+ 7A6D 2F          >                db      "/"
 411+ 7A6E             >len_NFA         defl    $ - temp_NFA
 411+ 7A6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A6D             >
 411+ 7A6D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A6E 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A6F             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A6E AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A6F             >
 411+ 7A6F 5A 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A71             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A71 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A73             >                else
 411+ 7A73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A73             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A73             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A73             >
 411+ 7A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A73 61 7A E2 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A77 AB 69                        dw      EXIT                    // ;
 414+ 7A79
 415+ 7A79              //  ______________________________________________________________________
 416+ 7A79              //
 417+ 7A79              // mod          n1 n2 -- n3
 418+ 7A79                              Colon_Def MOD, "MOD", is_normal
 418+ 7A79             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A79             >
 418+ 7A79             >                // dummy db directives used to calculate length of namec
 418+ 7A79 4D 4F 44    >                db      "MOD"
 418+ 7A7C             >len_NFA         defl    $ - temp_NFA
 418+ 7A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A79             >
 418+ 7A79 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A7A 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A7D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A7C C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A7D             >
 418+ 7A7D 6D 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A7F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A7F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A81             >                else
 418+ 7A81 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A81             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A81             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A81             >
 418+ 7A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A81 61 7A D7 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A85 AB 69                        dw      EXIT                    // ;
 421+ 7A87
 422+ 7A87              //  ______________________________________________________________________
 423+ 7A87              //
 424+ 7A87              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A87              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A87              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A87              // avoids loss of precision
 428+ 7A87                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A87             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A87             >
 428+ 7A87             >                // dummy db directives used to calculate length of namec
 428+ 7A87 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A8B 44          >
 428+ 7A8C             >len_NFA         defl    $ - temp_NFA
 428+ 7A8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A87             >
 428+ 7A87 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A88 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A8C 44          >
 428+ 7A8D             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A8C C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A8D             >
 428+ 7A8D 79 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A8F             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A8F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A91             >                else
 428+ 7A91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A91             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A91             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A91             >
 428+ 7A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A91 BE 69 B5 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A95 D2 69 3B 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A99 AB 69                        dw      EXIT                    // ;
 432+ 7A9B
 433+ 7A9B              //  ______________________________________________________________________
 434+ 7A9B              //
 435+ 7A9B              // */          n1 n2 n3 -- n4
 436+ 7A9B              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A9B                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A9B             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A9B             >
 437+ 7A9B             >                // dummy db directives used to calculate length of namec
 437+ 7A9B 2A 2F       >                db      "*/"
 437+ 7A9D             >len_NFA         defl    $ - temp_NFA
 437+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A9B             >
 437+ 7A9B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A9C 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A9D AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A9E             >
 437+ 7A9E 87 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AA0             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AA0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AA2             >                else
 437+ 7AA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AA2             >
 437+ 7AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AA2 8F 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AA4 E2 6A                        dw     NIP                      // nip
 440+ 7AA6 AB 69                        dw     EXIT                     // ;
 441+ 7AA8
 442+ 7AA8
 443+ 7AA8              //  ______________________________________________________________________
 444+ 7AA8              //
 445+ 7AA8              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AA8              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AA8              // All terms are unsigned.
 448+ 7AA8              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AA8              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AA8              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AA8              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AA8              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AA8              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AA8              //              dw      EXIT                    // ;
 455+ 7AA8
 456+ 7AA8              //  ______________________________________________________________________
 457+ 7AA8              //
 458+ 7AA8              // (line)       n1 n2 -- a b
 459+ 7AA8              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AA8              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AA8                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AA8             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AA8             >
 461+ 7AA8             >                // dummy db directives used to calculate length of namec
 461+ 7AA8 28 4C 49 4E >                db      "(LINE)"
 461+ 7AAC 45 29       >
 461+ 7AAE             >len_NFA         defl    $ - temp_NFA
 461+ 7AAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AA8             >
 461+ 7AA8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AA9 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AAD 45 29       >
 461+ 7AAF             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AAE A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AAF             >
 461+ 7AAF 9B 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AB1             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AB1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AB3             >                else
 461+ 7AB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AB3             >
 461+ 7AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AB3 BE 69                        dw      TO_R                    // >r
 463+ 7AB5 A9 6C                        dw      NOOP                    // noop
 464+ 7AB7 30 6D                        dw      CL                      // c/l
 465+ 7AB9 3C 6D 8F 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ABD D2 69                        dw      R_TO                    // r>
 467+ 7ABF 48 6D 52 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AC3 2C 6A
 468+ 7AC5 6C 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AC7 2C 6A                        dw      PLUS                    // +
 470+ 7AC9 A9 6C                        dw      NOOP                    // noop
 471+ 7ACB 30 6D                        dw      CL                      // c/l
 472+ 7ACD AB 69                        dw      EXIT                    // ;
 473+ 7ACF
 474+ 7ACF              //  ______________________________________________________________________
 475+ 7ACF              //
 476+ 7ACF              // .line        n1 n2 --
 477+ 7ACF              // Sends to output line  n1  of screen n2.
 478+ 7ACF                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ACF             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ACF             >
 478+ 7ACF             >                // dummy db directives used to calculate length of namec
 478+ 7ACF 2E 4C 49 4E >                db      ".LINE"
 478+ 7AD3 45          >
 478+ 7AD4             >len_NFA         defl    $ - temp_NFA
 478+ 7AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ACF             >
 478+ 7ACF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AD0 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AD4 45          >
 478+ 7AD5             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AD4 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AD5             >
 478+ 7AD5 A8 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AD7             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AD7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AD9             >                else
 478+ 7AD9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AD9             >
 478+ 7AD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AD9 B1 7A B7 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7ADD 97 72
 480+ 7ADF AB 69                        dw      EXIT                    // ;
 481+ 7AE1
 482+ 7AE1              //  ______________________________________________________________________
 483+ 7AE1              //
 484+ 7AE1              // message       n1 n2 --
 485+ 7AE1              // prints error message to current channel.
 486+ 7AE1              // if WARNING is 0, prints "MSG#n".
 487+ 7AE1              // if WARNING is 1, prints line n of screen 4.
 488+ 7AE1              // if WARNING is -1, see ERROR
 489+ 7AE1              // value can be negative or beyond block 4.
 490+ 7AE1                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AE1             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AE1             >
 490+ 7AE1             >                // dummy db directives used to calculate length of namec
 490+ 7AE1 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AE5 41 47 45    >
 490+ 7AE8             >len_NFA         defl    $ - temp_NFA
 490+ 7AE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AE1             >
 490+ 7AE1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AE2 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AE6 41 47 45    >
 490+ 7AE9             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AE8 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AE9             >
 490+ 7AE9 CF 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AEB             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AEB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AED             >                else
 490+ 7AED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AED             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AED             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AED             >
 490+ 7AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AED A7 6D 9F 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AF1                                                              // if
 493+ 7AF1 2C 64                        dw      ZBRANCH
 494+ 7AF3 18 00                        dw      Message_Else - $
 495+ 7AF5 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7AF9 22 6E 9F 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AFD 48 6D 71 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B01 29 6F
 498+ 7B03 D7 7A                        dw          DOT_LINE            //      .line
 499+ 7B05 DD 6F                        dw          SPACE               //      space
 500+ 7B07                                                              // else
 501+ 7B07
 502+ 7B07 15 64                        dw      BRANCH
 503+ 7B09 0B 00                        dw      Message_ENdif - $
 504+ 7B0B              Message_Else:
 505+ 7B0B 68 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B0D 04 6D 73 67                  db          4, "msg#"
 506+ 7B11 23
 507+ 7B12 29 83                        dw          DOT                 //      .  ( forward )
 508+ 7B14              Message_ENdif:                                  // endif
 509+ 7B14 AB 69                        dw      EXIT                    // ;
 510+ 7B16
 511+ 7B16
 512+ 7B16              //  ______________________________________________________________________
 513+ 7B16              //
 514+ 7B16              // device
 515+ 7B16                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B16             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B16             >
 515+ 7B16             >                // dummy db directives used to calculate length of namec
 515+ 7B16 44 45 56 49 >                db      "DEVICE"
 515+ 7B1A 43 45       >
 515+ 7B1C             >len_NFA         defl    $ - temp_NFA
 515+ 7B1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B16             >
 515+ 7B16 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B17 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B1B 43 45       >
 515+ 7B1D             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B1C C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B1D             >
 515+ 7B1D E1 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B1F             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B1F DB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B21             >                else
 515+ 7B21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B21             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B21             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B21             >
 515+ 7B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B21 02 00       >                dw      2
 516+ 7B23
 517+ 7B23              //  ______________________________________________________________________
 518+ 7B23
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B23                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B23              //  ______________________________________________________________________
   2+ 7B23              //
   3+ 7B23              //  next-opt.asm
   4+ 7B23              //
   5+ 7B23              //  ZX Spectrum Next - peculiar definitions
   6+ 7B23              //  ______________________________________________________________________
   7+ 7B23
   8+ 7B23              //  ______________________________________________________________________
   9+ 7B23              //
  10+ 7B23              // reg@         n -- b
  11+ 7B23              // read Next REGister n giving byte b
  12+ 7B23
  13+ 7B23                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B23             >
  13+ 7B23             >                // dummy db directives used to calculate length of namec
  13+ 7B23 52 45 47 40 >                db      "REG@"
  13+ 7B27             >len_NFA         defl    $ - temp_NFA
  13+ 7B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B23             >
  13+ 7B23 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B24 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B28             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B27 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B28             >
  13+ 7B28 16 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B2A             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B2A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B2A             >                else
  13+ 7B2A 2C 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B2C             >
  13+ 7B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B2C D9                           exx
  15+ 7B2D 01 3B 24                     ld      bc, $243B
  16+ 7B30 E1                           pop     hl
  17+ 7B31 ED 69                        out     (c), l
  18+ 7B33 04                           inc     b
  19+ 7B34 ED 68                        in      l,(c)
  20+ 7B36 E5                           push    hl
  21+ 7B37 D9                           exx
  22+ 7B38                              next
  22+ 7B38 DD E9       >                jp      (ix)
  23+ 7B3A
  24+ 7B3A
  25+ 7B3A              //  ______________________________________________________________________
  26+ 7B3A              //
  27+ 7B3A              // reg!         b n --
  28+ 7B3A              // write value b to Next REGister n
  29+ 7B3A
  30+ 7B3A                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B3A             >
  30+ 7B3A             >                // dummy db directives used to calculate length of namec
  30+ 7B3A 52 45 47 21 >                db      "REG!"
  30+ 7B3E             >len_NFA         defl    $ - temp_NFA
  30+ 7B3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B3A             >
  30+ 7B3A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B3B 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B3F             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B3E A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B3F             >
  30+ 7B3F 23 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B41             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B41 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B41             >                else
  30+ 7B41 43 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B43             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B43             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B43             >
  30+ 7B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B43 D9                           exx
  32+ 7B44 01 3B 24                     ld      bc, $243B
  33+ 7B47 E1                           pop     hl
  34+ 7B48 ED 69                        out     (c), l
  35+ 7B4A 04                           inc     b
  36+ 7B4B E1                           pop     hl
  37+ 7B4C ED 69                        out     (c), l
  38+ 7B4E D9                           exx
  39+ 7B4F                              next
  39+ 7B4F DD E9       >                jp      (ix)
  40+ 7B51
  41+ 7B51
  42+ 7B51              //  ______________________________________________________________________
  43+ 7B51              //
  44+ 7B51              // mmu7@        -- n
  45+ 7B51              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B51
  47+ 7B51                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B51             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B51             >
  47+ 7B51             >                // dummy db directives used to calculate length of namec
  47+ 7B51 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B55 40          >
  47+ 7B56             >len_NFA         defl    $ - temp_NFA
  47+ 7B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B51             >
  47+ 7B51 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B52 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B56 40          >
  47+ 7B57             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B56 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B57             >
  47+ 7B57 3A 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B59             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B59 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B5B             >                else
  47+ 7B5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B5B             >
  47+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B5B A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B5F 2A 7B
  49+ 7B61 AB 69                        dw      EXIT
  50+ 7B63
  51+ 7B63              //  ______________________________________________________________________
  52+ 7B63              //
  53+ 7B63              // mmu7!        n --
  54+ 7B63              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B63              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B63
  57+ 7B63                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B63             >
  57+ 7B63             >                // dummy db directives used to calculate length of namec
  57+ 7B63 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B67 21          >
  57+ 7B68             >len_NFA         defl    $ - temp_NFA
  57+ 7B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B63             >
  57+ 7B63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B64 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B68 21          >
  57+ 7B69             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B68 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B69             >
  57+ 7B69 51 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B6B             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B6B             >                else
  57+ 7B6B 6D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B6D             >
  57+ 7B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B6D E1                           pop     hl
  59+ 7B6E 7D                           ld      a, l
  60+ 7B6F ED 92 57                     nextreg 87, a
  61+ 7B72
  62+ 7B72                              next
  62+ 7B72 DD E9       >                jp      (ix)
  63+ 7B74
  64+ 7B74              //  ______________________________________________________________________
  65+ 7B74              //
  66+ 7B74              // >far         ha -- a n
  67+ 7B74              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B74              // take lower bits of H and L as an offset from E000h
  69+ 7B74              // then return address  a  between E000h-FFFFh
  70+ 7B74              // and page number n  between 64-71 (40h-47h)
  71+ 7B74              // For example, in hex:
  72+ 7B74              //   0000 >FAR  gives  40.E000
  73+ 7B74              //   1FFF >FAR  gives  40.FFFF
  74+ 7B74              //   2000 >FAR  gives  41.E000
  75+ 7B74              //   3FFF >FAR  gives  41.FFFF
  76+ 7B74              //   EFFF >FAR  gives  47.EFFF
  77+ 7B74              //   FFFF >FAR  gives  47.FFFF
  78+ 7B74              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B74              //                pop     de
  80+ 7B74              //                ld      a, d
  81+ 7B74              //                and     $E0
  82+ 7B74              //                rlca
  83+ 7B74              //                rlca
  84+ 7B74              //                rlca
  85+ 7B74              //                add     $40
  86+ 7B74              //                ld      l, a
  87+ 7B74              //                ld      h, 0
  88+ 7B74              //                ld      a, d
  89+ 7B74              //                or      $E0
  90+ 7B74              //                ld      d, a
  91+ 7B74              //                push    hl
  92+ 7B74              //                push    de
  93+ 7B74              //                next
  94+ 7B74
  95+ 7B74              //  ______________________________________________________________________
  96+ 7B74              //
  97+ 7B74              // <far         a n  -- ha
  98+ 7B74              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B74              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B74              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B74              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B74              //                pop     de                  // page number in e
 103+ 7B74              //                pop     hl                  // address in hl
 104+ 7B74              //                ld      a, e
 105+ 7B74              //                sub     $40                 // reduced to 0-7
 106+ 7B74              //                rrca
 107+ 7B74              //                rrca
 108+ 7B74              //                rrca
 109+ 7B74              //                ld      d, a                // save to d bits 765
 110+ 7B74              //                ld      a, h                // drops
 111+ 7B74              //                and     $1F
 112+ 7B74              //                or      d
 113+ 7B74              //                ld      h, a
 114+ 7B74              //
 115+ 7B74              //                psh1
 116+ 7B74
 117+ 7B74              //  ______________________________________________________________________
 118+ 7B74              //
 119+ 7B74              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B74              // NextZXOS call wrapper.
 121+ 7B74              //  n1 = hl register parameter value
 122+ 7B74              //  n2 = de register parameter value
 123+ 7B74              //  n3 = bc register parameter value
 124+ 7B74              //  n4 =  a register parameter value
 125+ 7B74              //   a = routine address in ROM 3
 126+ 7B74              // ----
 127+ 7B74              //  n5 = hl returned value
 128+ 7B74              //  n6 = de returned value
 129+ 7B74              //  n7 = bc returned value
 130+ 7B74              //  n8 =  a returned value
 131+ 7B74              //   f
 132+ 7B74                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B74             >
 132+ 7B74             >                // dummy db directives used to calculate length of namec
 132+ 7B74 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B78 44 4F 53    >
 132+ 7B7B             >len_NFA         defl    $ - temp_NFA
 132+ 7B7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B74             >
 132+ 7B74 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B75 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B79 44 4F 53    >
 132+ 7B7C             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B7B D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B7C             >
 132+ 7B7C 63 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B7E             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B7E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B7E             >                else
 132+ 7B7E 80 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B80             >
 132+ 7B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B80 D1                           pop     de                  // dos call entry address in de
 134+ 7B81 E1                           pop     hl                  // a register
 135+ 7B82 7D                           ld      a, l
 136+ 7B83 D9                           exx
 137+ 7B84 C1                           pop     bc
 138+ 7B85 D1                           pop     de
 139+ 7B86 E1                           pop     hl
 140+ 7B87 D9                           exx
 141+ 7B88
 142+ 7B88 C5                           push    bc
 143+ 7B89 DD E5                        push    ix
 144+ 7B8B
 145+ 7B8B              //              ld      (SP_Saved), sp
 146+ 7B8B              //              ld      sp, Cold_origin - 5
 147+ 7B8B 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B8D
 149+ 7B8D CF                           rst     08
 150+ 7B8E 94                           db      $94
 151+ 7B8F
 152+ 7B8F              //              ld      sp, (SP_Saved)
 153+ 7B8F              //              push    ix
 154+ 7B8F              //              pop     hl
 155+ 7B8F              //              ld      (IX_Echo), hl
 156+ 7B8F DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7B93              //              nop
 158+ 7B93 DD E1                        pop     ix
 159+ 7B95 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7B96 D5                           push    de
 161+ 7B97 C5                           push    bc
 162+ 7B98 4D                           ld      c, l
 163+ 7B99 44                           ld      b, h
 164+ 7B9A
 165+ 7B9A 26 00                        ld      h, 0
 166+ 7B9C 6F                           ld      l, a
 167+ 7B9D E5                           push    hl
 168+ 7B9E ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BA0 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BA1
 171+ 7BA1                              psh1
 171+ 7BA1 E5          >                push    hl
 171+ 7BA2 DD E9       >                jp      (ix)
 172+ 7BA4
 173+ 7BA4              //  ______________________________________________________________________
 174+ 7BA4              //
 175+ 7BA4              // blk-fh
 176+ 7BA4                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BA4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BA4             >
 176+ 7BA4             >                // dummy db directives used to calculate length of namec
 176+ 7BA4 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BA8 46 48       >
 176+ 7BAA             >len_NFA         defl    $ - temp_NFA
 176+ 7BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BA4             >
 176+ 7BA4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BA5 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BA9 46 48       >
 176+ 7BAB             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BAA C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BAB             >
 176+ 7BAB 74 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BAD             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BAD DB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BAF             >                else
 176+ 7BAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BAF             >
 176+ 7BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BAF 01 00       >                dw      1
 177+ 7BB1
 178+ 7BB1                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BB1             >
 178+ 7BB1             >                // dummy db directives used to calculate length of namec
 178+ 7BB1 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BB5 46 4E 41 4D >
 178+ 7BB9 45          >
 178+ 7BBA             >len_NFA         defl    $ - temp_NFA
 178+ 7BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BB1             >
 178+ 7BB1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BB2 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BB6 46 4E 41 4D >
 178+ 7BBA 45          >
 178+ 7BBB             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BBA C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BBB             >
 178+ 7BBB A4 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BBD             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BBD CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BBF             >                else
 178+ 7BBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BBF             >
 178+ 7BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BBF 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BC3 6F 63 6B 73
 179+ 7BC7 2D 36 34 2E
 179+ 7BCB 62 69 6E 00
 180+ 7BCF 00 00 00...                  ds      24
 181+ 7BE7
 182+ 7BE7              //  ______________________________________________________________________
 183+ 7BE7              //
 184+ 7BE7              // blk-seek     n --
 185+ 7BE7              // seek block n  within blocks!.bin  file
 186+ 7BE7                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BE7             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BE7             >
 186+ 7BE7             >                // dummy db directives used to calculate length of namec
 186+ 7BE7 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BEB 53 45 45 4B >
 186+ 7BEF             >len_NFA         defl    $ - temp_NFA
 186+ 7BEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BE7             >
 186+ 7BE7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BE8 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BEC 53 45 45 4B >
 186+ 7BF0             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7BEF CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7BF0             >
 186+ 7BF0 B1 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7BF2             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7BF2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7BF4             >                else
 186+ 7BF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7BF4             >
 186+ 7BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BF4 3C 6D B5 79                  dw  BBUF, MMUL
 188+ 7BF8 AD 7B 9F 6B                  dw  BLK_FH, FETCH
 189+ 7BFC AB 67                        dw  F_SEEK
 190+ 7BFE A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C02 97 70
 191+ 7C04 AB 69                        dw  EXIT
 192+ 7C06
 193+ 7C06              //  ______________________________________________________________________
 194+ 7C06              //
 195+ 7C06              // blk-read     n --
 196+ 7C06              // seek block n  within blocks!.bin  file
 197+ 7C06                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C06             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C06             >
 197+ 7C06             >                // dummy db directives used to calculate length of namec
 197+ 7C06 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C0A 52 45 41 44 >
 197+ 7C0E             >len_NFA         defl    $ - temp_NFA
 197+ 7C0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C06             >
 197+ 7C06 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C07 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C0B 52 45 41 44 >
 197+ 7C0F             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C0E C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C0F             >
 197+ 7C0F E7 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C11             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C11 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C13             >                else
 197+ 7C13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C13             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C13             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C13             >
 197+ 7C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C13 F2 7B                        dw  BLK_SEEK
 199+ 7C15 3C 6D                        dw  BBUF
 200+ 7C17 AD 7B 9F 6B                  dw  BLK_FH, FETCH
 201+ 7C1B 17 68                        dw  F_READ
 202+ 7C1D A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C21 97 70
 203+ 7C23 D7 6A                        dw  DROP
 204+ 7C25 AB 69                        dw  EXIT
 205+ 7C27
 206+ 7C27              //  ______________________________________________________________________
 207+ 7C27              //
 208+ 7C27              // blk-write     n --
 209+ 7C27              // seek block n  within blocks!.bin  file
 210+ 7C27                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C27             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C27             >
 210+ 7C27             >                // dummy db directives used to calculate length of namec
 210+ 7C27 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C2B 57 52 49 54 >
 210+ 7C2F 45          >
 210+ 7C30             >len_NFA         defl    $ - temp_NFA
 210+ 7C30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C27             >
 210+ 7C27 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C28 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C2C 57 52 49 54 >
 210+ 7C30 45          >
 210+ 7C31             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C30 C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C31             >
 210+ 7C31 06 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C33             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C33 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C35             >                else
 210+ 7C35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C35             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C35             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C35             >
 210+ 7C35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C35 F2 7B                        dw  BLK_SEEK
 212+ 7C37 3C 6D                        dw  BBUF
 213+ 7C39 AD 7B 9F 6B                  dw  BLK_FH, FETCH
 214+ 7C3D 36 68                        dw  F_WRITE
 215+ 7C3F A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C43 97 70
 216+ 7C45 D7 6A                        dw  DROP
 217+ 7C47 AB 69                        dw  EXIT
 218+ 7C49
 219+ 7C49              //  ______________________________________________________________________
 220+ 7C49              //
 221+ 7C49              // blk-init     n --
 222+ 7C49              // seek block n  within blocks!.bin  file
 223+ 7C49                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C49             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C49             >
 223+ 7C49             >                // dummy db directives used to calculate length of namec
 223+ 7C49 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C4D 49 4E 49 54 >
 223+ 7C51             >len_NFA         defl    $ - temp_NFA
 223+ 7C51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C49             >
 223+ 7C49 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C4A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C4E 49 4E 49 54 >
 223+ 7C52             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C51 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C52             >
 223+ 7C52 27 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C54             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C54 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C56             >                else
 223+ 7C56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C56             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C56             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C56             >
 223+ 7C56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C56 AD 7B 9F 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C5A CE 67 D7 6A
 225+ 7C5E BD 7B 4D 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C62 DB 6E 14 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C66 4D 68
 227+ 7C68 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C6C 97 70
 228+ 7C6E AD 7B AC 6B                  dw  BLK_FH, STORE
 229+ 7C72 AB 69                        dw  EXIT
 230+ 7C74
 231+ 7C74              //  ______________________________________________________________________
 232+ 7C74              //
 233+ 7C74              // #sec
 234+ 7C74              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C74              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C74
 237+ 7C74                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C74             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C74             >
 237+ 7C74             >                // dummy db directives used to calculate length of namec
 237+ 7C74 23 53 45 43 >                db      "#SEC"
 237+ 7C78             >len_NFA         defl    $ - temp_NFA
 237+ 7C78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C74             >
 237+ 7C74 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C75 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C79             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C78 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C79             >
 237+ 7C79 49 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C7B             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C7B C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C7D             >                else
 237+ 7C7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C7D             >
 237+ 7C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C7D FF 7F       >                dw      32767
 238+ 7C7F
 239+ 7C7F              //  ______________________________________________________________________
 240+ 7C7F
 241+ 7C7F
 242+ 7C7F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C7F                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C7F              //  ______________________________________________________________________
   2+ 7C7F              //
   3+ 7C7F              //  L3.asm
   4+ 7C7F              //
   5+ 7C7F              //  Continuation of L2.asm
   6+ 7C7F              //  I/O Block definitions
   7+ 7C7F              //  ______________________________________________________________________
   8+ 7C7F
   9+ 7C7F
  10+ 7C7F              //  ______________________________________________________________________
  11+ 7C7F              //
  12+ 7C7F              // r/w          a n f --
  13+ 7C7F              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C7F                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C7F             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C7F             >
  14+ 7C7F             >                // dummy db directives used to calculate length of namec
  14+ 7C7F 52 2F 57    >                db      "R/W"
  14+ 7C82             >len_NFA         defl    $ - temp_NFA
  14+ 7C82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C7F             >
  14+ 7C7F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C80 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C83             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C82 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C83             >
  14+ 7C83 74 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C85             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C85 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C87             >                else
  14+ 7C87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C87             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C87             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C87             >
  14+ 7C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C87 BE 69                        dw      TO_R                    // >r
  16+ 7C89 59 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8B 0C 6B 08 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7C8F C7 6A 7B 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C93 59 6A 6B 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C97 4D 69                        dw      OR_OP                   // or
  21+ 7C99 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C9D 97 70
  22+ 7C9F D2 69                        dw      R_TO                    // r>
  23+ 7CA1                                                              // if
  24+ 7CA1 2C 64                        dw      ZBRANCH
  25+ 7CA3 08 00                        dw      Read_Write_Else - $
  26+ 7CA5 11 7C                        dw          BLK_READ            //      blk-read
  27+ 7CA7 15 64                        dw      BRANCH
  28+ 7CA9 04 00                        dw      Read_Write_Endif - $
  29+ 7CAB              Read_Write_Else:                                // else
  30+ 7CAB 33 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CAD              Read_Write_Endif:                               // endif
  32+ 7CAD AB 69                        dw      EXIT                    // ;
  33+ 7CAF
  34+ 7CAF
  35+ 7CAF              //  ______________________________________________________________________
  36+ 7CAF              //
  37+ 7CAF              // +buf        a1 -- a2 f
  38+ 7CAF              // advences to next buffer, cyclically rotating along them
  39+ 7CAF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CAF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CAF             >
  39+ 7CAF             >                // dummy db directives used to calculate length of namec
  39+ 7CAF 2B 42 55 46 >                db      "+BUF"
  39+ 7CB3             >len_NFA         defl    $ - temp_NFA
  39+ 7CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CAF             >
  39+ 7CAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CB0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB4             >
  39+ 7CB4 7F 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CB6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CB6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CB8             >                else
  39+ 7CB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CB8             >
  39+ 7CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CB8 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CBC 2C 6A
  41+ 7CBE 0C 6B DE 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC2 9F 6B
  42+ 7CC4 37 6F                        dw      EQUALS                  // =
  43+ 7CC6                                                              // if
  44+ 7CC6 2C 64                        dw      ZBRANCH
  45+ 7CC8 08 00                        dw      PBuf_Endif - $
  46+ 7CCA D7 6A                        dw          DROP                //      drop
  47+ 7CCC D3 6D 9F 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CD0              PBuf_Endif:                                     // endif
  49+ 7CD0 0C 6B 90 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD4 9F 6B
  50+ 7CD6 29 6F                        dw      SUBTRACT                // -
  51+ 7CD8 AB 69                        dw      EXIT                    // ;
  52+ 7CDA
  53+ 7CDA              //  ______________________________________________________________________
  54+ 7CDA              //
  55+ 7CDA              // update       --
  56+ 7CDA              // mark the last used block to be written to disk
  57+ 7CDA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CDA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CDA             >
  57+ 7CDA             >                // dummy db directives used to calculate length of namec
  57+ 7CDA 55 50 44 41 >                db      "UPDATE"
  57+ 7CDE 54 45       >
  57+ 7CE0             >len_NFA         defl    $ - temp_NFA
  57+ 7CE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CDA             >
  57+ 7CDA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CDB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CDF 54 45       >
  57+ 7CE1             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CE0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE1             >
  57+ 7CE1 AF 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE3             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CE5             >                else
  57+ 7CE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CE5             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CE5             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CE5             >
  57+ 7CE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CE5 90 6E 9F 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CE9 9F 6B
  59+ 7CEB A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CEF 4D 69
  60+ 7CF1 90 6E 9F 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CF5 AC 6B
  61+ 7CF7 AB 69                        dw      EXIT                    // ;
  62+ 7CF9
  63+ 7CF9
  64+ 7CF9              //  ______________________________________________________________________
  65+ 7CF9              //
  66+ 7CF9              // empty-buffers --
  67+ 7CF9                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CF9             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CF9             >
  67+ 7CF9             >                // dummy db directives used to calculate length of namec
  67+ 7CF9 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CFD 59 2D 42 55 >
  67+ 7D01 46 46 45 52 >
  67+ 7D05 53          >
  67+ 7D06             >len_NFA         defl    $ - temp_NFA
  67+ 7D06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CF9             >
  67+ 7CF9 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CFA 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CFE 59 2D 42 55 >
  67+ 7D02 46 46 45 52 >
  67+ 7D06 53          >
  67+ 7D07             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D06 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D07             >
  67+ 7D07 DA 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D09             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D09 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D0B             >                else
  67+ 7D0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D0B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D0B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D0B             >
  67+ 7D0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D0B D3 6D 9F 6B                  dw      FIRST, FETCH            // first @
  69+ 7D0F DE 6D 9F 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D13 C7 6A 29 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D17 D1 73
  71+ 7D19 AB 69                        dw      EXIT                    // ;
  72+ 7D1B
  73+ 7D1B              //  ______________________________________________________________________
  74+ 7D1B              //
  75+ 7D1B              // buffer       n -- a
  76+ 7D1B              // read block n and gives the address to a buffer
  77+ 7D1B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D1B              // disk before reading the block n.
  79+ 7D1B
  80+ 7D1B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D1B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D1B             >
  80+ 7D1B             >                // dummy db directives used to calculate length of namec
  80+ 7D1B 42 55 46 46 >                db      "BUFFER"
  80+ 7D1F 45 52       >
  80+ 7D21             >len_NFA         defl    $ - temp_NFA
  80+ 7D21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D1B             >
  80+ 7D1B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D1C 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D20 45 52       >
  80+ 7D22             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D21 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D22             >
  80+ 7D22 F9 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D24             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D24 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D26             >                else
  80+ 7D26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D26             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D26             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D26             >
  80+ 7D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D26 86 6E 9F 6B                  dw      USE, FETCH              // use @
  82+ 7D2A 0C 6B BE 69                  dw      DUP, TO_R               // dup >r
  83+ 7D2E                                                              // begin
  84+ 7D2E              Buffer_Begin:
  85+ 7D2E B6 7C                        dw          PBUF                //      +buf
  86+ 7D30                                                              // until
  87+ 7D30 2C 64                        dw      ZBRANCH
  88+ 7D32 FC FF                        dw      Buffer_Begin - $
  89+ 7D34 86 6E AC 6B                  dw      USE, STORE              // use !
  90+ 7D38 E6 69 9F 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D3C 08 6A
  91+ 7D3E                                                              // if
  92+ 7D3E 2C 64                        dw      ZBRANCH
  93+ 7D40 14 00                        dw      Buffer_Endif - $
  94+ 7D42 E6 69 75 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D46 E6 69 9F 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D4A A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D4E 3B 69                        dw          AND_OP              //      and
  98+ 7D50 FC 6C 85 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D54              Buffer_Endif:                                   // endif
 100+ 7D54 E6 69 AC 6B                  dw      R_OP, STORE             // r !
 101+ 7D58 E6 69 90 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D5C AC 6B
 102+ 7D5E D2 69 75 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D62 AB 69                        dw      EXIT                    // ;
 104+ 7D64
 105+ 7D64              //  ______________________________________________________________________
 106+ 7D64              //
 107+ 7D64              // block        n -- a
 108+ 7D64              // Leaves the buffer address that contains the block n.
 109+ 7D64              // If the block is not already present, it will be loaded from disk
 110+ 7D64              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D64              // disk before reading the block n.
 112+ 7D64              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D64
 114+ 7D64                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D64             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D64             >
 114+ 7D64             >                // dummy db directives used to calculate length of namec
 114+ 7D64 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D68 4B          >
 114+ 7D69             >len_NFA         defl    $ - temp_NFA
 114+ 7D69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D64             >
 114+ 7D64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D65 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D69 4B          >
 114+ 7D6A             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D69 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D6A             >
 114+ 7D6A 1B 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D6C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D6C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D6E             >                else
 114+ 7D6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D6E             >
 114+ 7D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D6E 22 6E 9F 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D72 2C 6A BE 69                  dw      PLUS, TO_R              // + >r
 117+ 7D76 90 6E 9F 6B                  dw      PREV, FETCH             // prev @
 118+ 7D7A 0C 6B 9F 6B                  dw      DUP, FETCH              // dup @
 119+ 7D7E E6 69 29 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D82 0C 6B 2C 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D86                                                              // if
 122+ 7D86 2C 64                        dw        ZBRANCH
 123+ 7D88 32 00                        dw        Block_Endif_1 - $
 124+ 7D8A              Block_Begin:                                    //      begin
 125+ 7D8A B6 7C ED 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D8E                                                              //          if
 127+ 7D8E 2C 64                        dw          ZBRANCH
 128+ 7D90 12 00                        dw          Block_Endif_2 - $
 129+ 7D92 D7 6A                        dw              DROP            //              drop
 130+ 7D94 E6 69 24 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D98 0C 6B                        dw              DUP             //              dup
 132+ 7D9A E6 69 04 6D                  dw              R_OP, ONE       //              r 1
 133+ 7D9E 85 7C                        dw              READ_WRITE      //              r/w
 134+ 7DA0 8C 6A                        dw              TWO_MINUS       //              2-
 135+ 7DA2              Block_Endif_2:                                  //          endif
 136+ 7DA2 0C 6B 9F 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DA6 E6 69
 137+ 7DA8 29 6F 0C 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DAC 2C 6A ED 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DB0                                                              //      until
 140+ 7DB0 2C 64                        dw        ZBRANCH
 141+ 7DB2 D8 FF                        dw        Block_Begin - $
 142+ 7DB4 0C 6B 90 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DB8 AC 6B
 143+ 7DBA              Block_Endif_1:                                  // endif
 144+ 7DBA D2 69 D7 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DBE 75 6A
 145+ 7DC0 AB 69                        dw      EXIT                    // ;
 146+ 7DC2
 147+ 7DC2              //  ______________________________________________________________________
 148+ 7DC2              //
 149+ 7DC2              // #buff        -- n
 150+ 7DC2              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DC2                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DC2             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DC2             >
 151+ 7DC2             >                // dummy db directives used to calculate length of namec
 151+ 7DC2 23 42 55 46 >                db      "#BUFF"
 151+ 7DC6 46          >
 151+ 7DC7             >len_NFA         defl    $ - temp_NFA
 151+ 7DC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DC2             >
 151+ 7DC2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DC3 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DC7 46          >
 151+ 7DC8             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DC7 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DC8             >
 151+ 7DC8 64 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DCA             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DCA C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DCC             >                else
 151+ 7DCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DCC             >
 151+ 7DCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DCC 07 00       >                dw      7
 152+ 7DCE
 153+ 7DCE              //  ______________________________________________________________________
 154+ 7DCE              //
 155+ 7DCE              // flush        --
 156+ 7DCE                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DCE             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DCE             >
 156+ 7DCE             >                // dummy db directives used to calculate length of namec
 156+ 7DCE 46 4C 55 53 >                db      "FLUSH"
 156+ 7DD2 48          >
 156+ 7DD3             >len_NFA         defl    $ - temp_NFA
 156+ 7DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DCE             >
 156+ 7DCE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DCF 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DD3 48          >
 156+ 7DD4             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DD3 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DD4             >
 156+ 7DD4 C2 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DD6             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DD6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DD8             >                else
 156+ 7DD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DD8             >
 156+ 7DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DD8 CA 7D 4D 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DDC FC 6C
 158+ 7DDE              Flush_Do:                                       // do
 159+ 7DDE 86 64                        dw      C_DO
 160+ 7DE0 FC 6C 24 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DE4 D7 6A
 161+ 7DE6                                                              // loop
 162+ 7DE6 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DEA AD 7B 9F 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DEE E2 67 D7 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DF2 AB 69                        dw      EXIT                    // exit
 166+ 7DF4
 167+ 7DF4              //  ______________________________________________________________________
 168+ 7DF4              //
 169+ 7DF4              // f_getline    a m fh -- n
 170+ 7DF4              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DF4              // Address a is left for subsequent processing
 172+ 7DF4              // and n as the actual number of byte read, that is the length of line
 173+ 7DF4                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DF4             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DF4             >
 173+ 7DF4             >                // dummy db directives used to calculate length of namec
 173+ 7DF4 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DF8 54 4C 49 4E >
 173+ 7DFC 45          >
 173+ 7DFD             >len_NFA         defl    $ - temp_NFA
 173+ 7DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DF4             >
 173+ 7DF4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DF5 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DF9 54 4C 49 4E >
 173+ 7DFD 45          >
 173+ 7DFE             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DFD C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DFE             >
 173+ 7DFE CE 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E00             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E00 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E02             >                else
 173+ 7E02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E02             >
 173+ 7E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E02 BE 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E04 EF 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E06 E6 69 F9 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E0A A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E0E 97 70
 178+ 7E10
 179+ 7E10 5B 6B C7 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E14 4D 6A FF 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E18
 182+ 7E18 E6 69 17 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E1C A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E20 97 70
 184+ 7E22                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E22 2C 64                        dw      ZBRANCH
 186+ 7E24 3C 00                        dw      FGetline_Else - $
 187+ 7E26 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E2A 7F 65
 188+ 7E2C D7 6A E2 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E30 FF 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E32 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E36 7F 65
 191+ 7E38 D7 6A E2 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E3C 19 6B 79 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E40 0C 6B BC 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E44 AC 6B
 194+ 7E46 0C 6B BE 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E4A 5B 6B D2 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E4E FC 6C 39 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E52 D2 69 AB 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E56 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E5A 97 70
 199+ 7E5C                                                              // else
 200+ 7E5C 15 64                        dw      BRANCH
 201+ 7E5E 0C 00                        dw      FGetline_Endif - $
 202+ 7E60              FGetline_Else:
 203+ 7E60 D2 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E62 5B 6B 4D 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E66 D7 6A FC 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E6A              FGetline_Endif:                                 // endif
 207+ 7E6A BE 69 0C 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E6E 0C 6B
 208+ 7E70 4D 6A FF 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E74 E6 69 9E 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E78 6D 6B 2C 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E7C FC 6C FF 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E80 7F 6A AC 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E84 E6 69 2C 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E88 59 6A
 214+ 7E8A FF 6A E6 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E8E 29 6F
 215+ 7E90 E1 73                        dw      BLANK                   // blank
 216+ 7E92 D2 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E94 AB 69                        dw      EXIT                    // ;
 218+ 7E96
 219+ 7E96              //  ______________________________________________________________________
 220+ 7E96              //
 221+ 7E96              // f_include    fh --
 222+ 7E96              // Given a filehandle includes the source from file
 223+ 7E96                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E96             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E96             >
 223+ 7E96             >                // dummy db directives used to calculate length of namec
 223+ 7E96 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E9A 43 4C 55 44 >
 223+ 7E9E 45          >
 223+ 7E9F             >len_NFA         defl    $ - temp_NFA
 223+ 7E9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E96             >
 223+ 7E96 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E97 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E9B 43 4C 55 44 >
 223+ 7E9F 45          >
 223+ 7EA0             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E9F C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EA0             >
 223+ 7EA0 F4 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EA2             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EA2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EA4             >                else
 223+ 7EA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EA4             >
 223+ 7EA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EA4 FB 6D 9F 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EA8 BE 69
 225+ 7EAA 04 6E 9F 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EAE BE 69
 226+ 7EB0 B2 6E 9F 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EB4 BE 69
 227+ 7EB6 E6 69                        dw      R_OP                    // r
 228+ 7EB8                                                              // if
 229+ 7EB8 2C 64                        dw      ZBRANCH
 230+ 7EBA 20 00                        dw      FInclude_Else_1 - $
 231+ 7EBC E6 69 F9 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EC0 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EC4 97 70
 233+ 7EC6 04 6E 9F 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7ECA 8C 6A                        dw          TWO_MINUS
 235+ 7ECC BC 6E 9F 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7ED0 29 6F                        dw          SUBTRACT
 237+ 7ED2 1A 6F 39 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7ED6                                                              // else
 239+ 7ED6 15 64                        dw      BRANCH
 240+ 7ED8 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EDA              FInclude_Else_1:
 242+ 7EDA FC 6C FC 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EDE                                                              // endif
 244+ 7EDE              FInclude_Endif_1:
 245+ 7EDE BE 69 BE 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EE2 B2 6E AC 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EE6              FInclude_Begin:                                 // begin
 248+ 7EE6 04 6D 6C 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EEA 3C 6D
 249+ 7EEC 6D 6B E1 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EF0 FF 6A 4D 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EF4 FF 6A 7F 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EF8 B2 6E 9F 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EFC 00 7E                        dw          F_GETLINE           //      f_getline
 254+ 7EFE                                                              // while
 255+ 7EFE 2C 64                        dw      ZBRANCH
 256+ 7F00 14 00                        dw      FInclude_Repeat - $
 257+ 7F02 04 6D FB 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F06 AC 6B
 258+ 7F08 FC 6C 04 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F0C AC 6B
 259+ 7F0E B9 77                        dw          INTERPRET           //      interpret
 260+ 7F10 15 64                        dw      BRANCH
 261+ 7F12 D4 FF                        dw      FInclude_Begin - $
 262+ 7F14              FInclude_Repeat:                                // repeat
 263+ 7F14 B2 6E 9F 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F18 FC 6C B2 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F1C AC 6B
 265+ 7F1E CE 67                        dw      F_CLOSE                 // f_close
 266+ 7F20 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F24 97 70
 267+ 7F26 D2 69 D2 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F2A D2 69
 268+ 7F2C 0C 6B B2 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F30 AC 6B
 269+ 7F32                                                              // if
 270+ 7F32 2C 64                        dw      ZBRANCH
 271+ 7F34 12 00                        dw      FInclude_Else_2 - $
 272+ 7F36 B2 6E 9F 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F3A AB 67                        dw          F_SEEK              //      f_seek
 274+ 7F3C A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F40 97 70
 275+ 7F42                                                              // else
 276+ 7F42 15 64                        dw      BRANCH
 277+ 7F44 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F46              FInclude_Else_2:
 279+ 7F46 4D 6B                        dw          TWO_DROP            //      2drop
 280+ 7F48              FInclude_Endif_2:                               // endif
 281+ 7F48 D2 69 04 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F4C AC 6B
 282+ 7F4E D2 69 FB 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F52 AC 6B
 283+ 7F54 AB 69                        dw      EXIT                    // ;
 284+ 7F56
 285+ 7F56              //  ______________________________________________________________________
 286+ 7F56              //
 287+ 7F56              // open<         -- fh
 288+ 7F56              // Open the following filename and return it file-handle
 289+ 7F56              // Used in the form OPEN CCCC
 290+ 7F56                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F56             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F56             >
 290+ 7F56             >                // dummy db directives used to calculate length of namec
 290+ 7F56 4F 50 45 4E >                db      "OPEN<"
 290+ 7F5A 3C          >
 290+ 7F5B             >len_NFA         defl    $ - temp_NFA
 290+ 7F5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F56             >
 290+ 7F56 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F57 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F5B 3C          >
 290+ 7F5C             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F5B BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F5C             >
 290+ 7F5C 96 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F5E             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F5E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F60             >                else
 290+ 7F60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F60             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F60             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F60             >
 290+ 7F60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F60 26 6D                        dw      BL
 292+ 7F62 19 74 31 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F66 C7 6A
 293+ 7F68 2C 6A FC 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F6C FF 6A AC 6B
 294+ 7F70 06 74 04 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F74 4D 68
 295+ 7F76 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F7A 97 70                        dw      QERROR                  // ?error
 297+ 7F7C AB 69                        dw      EXIT                    // ;
 298+ 7F7E
 299+ 7F7E              //  ______________________________________________________________________
 300+ 7F7E              //
 301+ 7F7E              // include      -- cccc
 302+ 7F7E              // Include the following filename
 303+ 7F7E                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F7E             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F7E             >
 303+ 7F7E             >                // dummy db directives used to calculate length of namec
 303+ 7F7E 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F82 55 44 45    >
 303+ 7F85             >len_NFA         defl    $ - temp_NFA
 303+ 7F85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F7E             >
 303+ 7F7E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F7F 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F83 55 44 45    >
 303+ 7F86             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F85 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F86             >
 303+ 7F86 56 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F88             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F88 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F8A             >                else
 303+ 7F8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F8A             >
 303+ 7F8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F8A 5E 7F                        dw      OPEN_FH                 // open
 305+ 7F8C 0C 6B A2 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F90 CE 67 D7 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F94 AB 69                        dw      EXIT                    // ;
 308+ 7F96
 309+ 7F96              //  ______________________________________________________________________
 310+ 7F96              //
 311+ 7F96              // needs
 312+ 7F96              // check for cccc exists in vocabulary
 313+ 7F96              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F96
 315+ 7F96              // temp filename cccc.f as counted string zero-padded
 316+ 7F96                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F96             >
 316+ 7F96             >                // dummy db directives used to calculate length of namec
 316+ 7F96 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F9A 53 2D 57    >
 316+ 7F9D             >len_NFA         defl    $ - temp_NFA
 316+ 7F9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F96             >
 316+ 7F96 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F97 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F9B 53 2D 57    >
 316+ 7F9E             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F9D D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F9E             >
 316+ 7F9E 7E 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FA0             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FA0 CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FA2             >                else
 316+ 7FA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FA2             >
 316+ 7FA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FA2 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FC5              // temp complete path+filename
 319+ 7FC5                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FC5             >
 319+ 7FC5             >                // dummy db directives used to calculate length of namec
 319+ 7FC5 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FC9 53 2D 46 4E >
 319+ 7FCD             >len_NFA         defl    $ - temp_NFA
 319+ 7FCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FC5             >
 319+ 7FC5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FC6 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FCA 53 2D 46 4E >
 319+ 7FCE             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FCD CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FCE             >
 319+ 7FCE 96 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FD0             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FD0 CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FD2             >                else
 319+ 7FD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FD2             >
 319+ 7FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FD2 00 00 00...                  ds      40
 321+ 7FFA              // constant path
 322+ 7FFA                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FFA             >
 322+ 7FFA             >                // dummy db directives used to calculate length of namec
 322+ 7FFA 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FFE 53 2D 49 4E >
 322+ 8002 43          >
 322+ 8003             >len_NFA         defl    $ - temp_NFA
 322+ 8003             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FFA             >
 322+ 7FFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FFB 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FFF 53 2D 49 4E >
 322+ 8003 43          >
 322+ 8004             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8003 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8004             >
 322+ 8004 C5 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8006             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8006 CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8008             >                else
 322+ 8008 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8008             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8008             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8008             >
 322+ 8008             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8008 04 69 6E 63                  db      4, "inc/", 0
 323+ 800C 2F 00
 324+ 800E                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 800E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 800E             >
 324+ 800E             >                // dummy db directives used to calculate length of namec
 324+ 800E 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8012 53 2D 4C 49 >
 324+ 8016 42          >
 324+ 8017             >len_NFA         defl    $ - temp_NFA
 324+ 8017             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 800E             >
 324+ 800E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 800F 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8013 53 2D 4C 49 >
 324+ 8017 42          >
 324+ 8018             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8017 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8018             >
 324+ 8018 FA 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 801A             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 801A CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 801C             >                else
 324+ 801C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 801C             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 801C             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 801C             >
 324+ 801C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 801C 04 6C 69 62                  db      4, "lib/", 0
 325+ 8020 2F 00
 326+ 8022
 327+ 8022              // Concatenate path at a and filename and include it
 328+ 8022              // No error is issued if filename doesn't exist.
 329+ 8022                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8022             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8022             >
 329+ 8022             >                // dummy db directives used to calculate length of namec
 329+ 8022 4E 45 45 44 >                db      "NEEDS/"
 329+ 8026 53 2F       >
 329+ 8028             >len_NFA         defl    $ - temp_NFA
 329+ 8028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8022             >
 329+ 8022 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8023 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8027 53 2F       >
 329+ 8029             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8028 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8029             >
 329+ 8029 0E 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 802B             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 802B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 802D             >                else
 329+ 802D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 802D             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 802D             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 802D             >
 329+ 802D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 802D 31 72 EF 6A                  dw      COUNT, TUCK             // n a n
 331+ 8031 D0 7F FF 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8035 9E 68
 332+ 8037 D0 7F 2C 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 803B A0 7F 4D 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 803F FF 6A
 334+ 8041 A9 63 23 00                  dw      LIT, 35
 335+ 8045 9E 68                        dw      CMOVE
 336+ 8047 D0 7F                        dw      NEEDS_FN
 337+ 8049 06 74 04 6D                  dw      PAD, ONE, F_OPEN
 337+ 804D 4D 68
 338+ 804F ED 69                        dw      ZEQUAL
 339+ 8051 2C 64                        dw      ZBRANCH
 340+ 8053 08 00                        dw      Needs_1 - $
 341+ 8055 A2 7E                        dw          F_INCLUDE
 342+ 8057 15 64                        dw      BRANCH
 343+ 8059 04 00                        dw      Needs_2 - $
 344+ 805B              Needs_1:
 345+ 805B              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 805B              //              dw          LIT, 43, MESSAGE
 347+ 805B D7 6A                        dw          DROP
 348+ 805D              Needs_2:
 349+ 805D AB 69                        dw      EXIT                    // ;
 350+ 805F
 351+ 805F
 352+ 805F                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 805F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 805F             >
 352+ 805F             >                // dummy db directives used to calculate length of namec
 352+ 805F 4E 44 4F 4D >                db      "NDOM"
 352+ 8063             >len_NFA         defl    $ - temp_NFA
 352+ 8063             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 805F             >
 352+ 805F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8060 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8064             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8063 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8064             >
 352+ 8064 22 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8066             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8066 CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8068             >                else
 352+ 8068 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8068             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8068             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8068             >
 352+ 8068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8068              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8068 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 806C 7C 5C 3C 3E
 354+ 8070 22
 355+ 8071 00                           db 0
 356+ 8072
 357+ 8072                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8072             >
 357+ 8072             >                // dummy db directives used to calculate length of namec
 357+ 8072 4E 43 44 4D >                db      "NCDM"
 357+ 8076             >len_NFA         defl    $ - temp_NFA
 357+ 8076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8072             >
 357+ 8072 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8073 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8077             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8076 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8077             >
 357+ 8077 5F 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8079             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8079 CC 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 807B             >                else
 357+ 807B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 807B             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 807B             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 807B             >
 357+ 807B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 807B              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 807B 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 807F 24 5F 7B 7D
 359+ 8083 7E
 360+ 8084 00                           db 0
 361+ 8085
 362+ 8085              // Replace illegal character in filename using the map here above
 363+ 8085              // at the moment we need only  "
 364+ 8085                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8085             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8085             >
 364+ 8085             >                // dummy db directives used to calculate length of namec
 364+ 8085 4D 41 50 2D >                db      "MAP-FN"
 364+ 8089 46 4E       >
 364+ 808B             >len_NFA         defl    $ - temp_NFA
 364+ 808B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8085             >
 364+ 8085 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8086 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 808A 46 4E       >
 364+ 808C             >                org     $-1                 // alter last byte of Name just above to set
 364+ 808B CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 808C             >
 364+ 808C 72 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 808E             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 808E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 8090             >                else
 364+ 8090 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 364+ 8090             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 8090             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 8090             >
 364+ 8090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 8090 31 72 45 72                  dw      COUNT, BOUNDS
 366+ 8094 86 64                        dw      C_DO
 367+ 8096              Needs_3:
 368+ 8096 79 80 66 80                  dw          NCDM, NDOM, LIT, 10
 368+ 809A A9 63 0A 00
 369+ 809E 90 64 BA 6B                  dw          I, CFETCH
 370+ 80A2 B9 65                        dw          C_MAP
 371+ 80A4 90 64 C8 6B                  dw          I, CSTORE
 372+ 80A8              Needs_4:
 373+ 80A8 04 64                        dw      C_LOOP
 374+ 80AA EC FF                        dw      Needs_3 - $
 375+ 80AC AB 69                        dw      EXIT
 376+ 80AE
 377+ 80AE
 378+ 80AE              // include  "path/cccc.f" if cccc is not defined
 379+ 80AE              // filename cccc.f is temporary stored at NEEDS-W
 380+ 80AE                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 80AE             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 80AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 80AE             >
 380+ 80AE             >                // dummy db directives used to calculate length of namec
 380+ 80AE 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80B2 53 2D 46    >
 380+ 80B5             >len_NFA         defl    $ - temp_NFA
 380+ 80B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 80AE             >
 380+ 80AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 80AF 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80B3 53 2D 46    >
 380+ 80B6             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80B5 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80B6             >
 380+ 80B6 85 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80B8             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80B8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80BA             >                else
 380+ 80BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 80BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80BA             >
 380+ 80BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80BA CB 75                        dw      LFIND
 382+ 80BC 2C 64                        dw      ZBRANCH
 383+ 80BE 0A 00                        dw      Needs_5 - $
 384+ 80C0
 385+ 80C0 D7 6A 4D 6B                  dw          DROP, TWO_DROP
 386+ 80C4 15 64                        dw      BRANCH
 387+ 80C6 2C 00                        dw      Needs_6 - $
 388+ 80C8              Needs_5:
 389+ 80C8 A0 7F                        dw          NEEDS_W
 390+ 80CA A9 63 23 00                  dw          LIT, 35
 391+ 80CE D1 73                        dw          ERASE                   // a
 392+ 80D0 DB 6E BA 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80D4 4D 6A
 393+ 80D6 DB 6E C7 6A                  dw          HERE, OVER              // a n here n
 394+ 80DA A0 7F FF 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80DE 9E 68
 395+ 80E0 A0 7F 8E 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80E4 A0 7F 2C 6A                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80E8 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80EC FF 6A AC 6B                  dw          SWAP, STORE             // a
 399+ 80F0 2B 80                        dw          NEEDS_SLASH
 400+ 80F2              Needs_6:
 401+ 80F2 AB 69                        dw      EXIT
 402+ 80F4
 403+ 80F4
 404+ 80F4              // check for cccc exists in vocabulary
 405+ 80F4              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80F4              // search in inc subdirectory
 407+ 80F4                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80F4             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80F4             >
 407+ 80F4             >                // dummy db directives used to calculate length of namec
 407+ 80F4 4E 45 45 44 >                db      "NEEDS"
 407+ 80F8 53          >
 407+ 80F9             >len_NFA         defl    $ - temp_NFA
 407+ 80F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80F4             >
 407+ 80F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80F5 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80F9 53          >
 407+ 80FA             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80F9 D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80FA             >
 407+ 80FA AE 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80FC             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80FC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80FE             >                else
 407+ 80FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 407+ 80FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80FE             >
 407+ 80FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80FE 04 6E 9F 6B                  dw      TO_IN, FETCH
 409+ 8102 0C 6B                        dw      DUP
 410+ 8104 06 80 B8 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 8108 04 6E AC 6B                  dw      TO_IN, STORE
 412+ 810C 1A 80 B8 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8110 04 6E AC 6B                  dw      TO_IN, STORE
 414+ 8114 CB 75                        dw      LFIND
 415+ 8116 2C 64                        dw      ZBRANCH
 416+ 8118 08 00                        dw      Needs_10 - $
 417+ 811A 4D 6B                        dw          TWO_DROP
 418+ 811C 15 64                        dw      BRANCH
 419+ 811E 10 00                        dw      Needs_11 - $
 420+ 8120              Needs_10:
 421+ 8120 A0 7F 31 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8124 97 72 DD 6F
 422+ 8128 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 812C EB 7A
 423+ 812E              Needs_11:
 424+ 812E AB 69                        dw      EXIT
 425+ 8130
 426+ 8130
 427+ 8130              //  ______________________________________________________________________
 428+ 8130              //
 429+ 8130              // load+        n --
 430+ 8130                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8130             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8130             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8130             >
 430+ 8130             >                // dummy db directives used to calculate length of namec
 430+ 8130 4C 4F 41 44 >                db      "LOAD+"
 430+ 8134 2B          >
 430+ 8135             >len_NFA         defl    $ - temp_NFA
 430+ 8135             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8130             >
 430+ 8130 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8131 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8135 2B          >
 430+ 8136             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8135 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8136             >
 430+ 8136 F4 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 8138             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 8138 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 813A             >                else
 430+ 813A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 430+ 813A             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 813A             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 813A             >
 430+ 813A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 813A FB 6D 9F 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 813E BE 69
 432+ 8140 04 6E 9F 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8144 BE 69
 433+ 8146
 434+ 8146 FC 6C 04 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 814A AC 6B
 435+ 814C 48 6D 52 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8150 FB 6D AC 6B
 436+ 8154 B9 77                        dw      INTERPRET               // interpret
 437+ 8156
 438+ 8156 D2 69 04 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 815A AC 6B
 439+ 815C D2 69 FB 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8160 AC 6B
 440+ 8162 AB 69                        dw      EXIT                    // ;
 441+ 8164
 442+ 8164              //  ______________________________________________________________________
 443+ 8164              //
 444+ 8164              // -->          --
 445+ 8164                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8164             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8164             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8164             >
 445+ 8164             >                // dummy db directives used to calculate length of namec
 445+ 8164 2D 2D 3E    >                db      "-->"
 445+ 8167             >len_NFA         defl    $ - temp_NFA
 445+ 8167             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8164             >
 445+ 8164 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8165 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 8168             >                org     $-1                 // alter last byte of Name just above to set
 445+ 8167 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 8168             >
 445+ 8168 30 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 816A             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 816A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 816C             >                else
 445+ 816C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 445+ 816C             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 816C             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 816C             >
 445+ 816C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 816C 10 71                        dw      QLOADING                // ?loading
 447+ 816E FC 6C 04 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8172 AC 6B
 448+ 8174 48 6D                        dw      BSCR                    // b/scr
 449+ 8176 FB 6D 9F 6B                  dw      BLK, FETCH              // blk @
 450+ 817A C7 6A                        dw      OVER                    // over
 451+ 817C 7F 7A                        dw      MOD                     // mod
 452+ 817E 29 6F                        dw      SUBTRACT                // -
 453+ 8180 FB 6D 7C 6B                  dw      BLK, PLUSSTORE          // +!
 454+ 8184 AB 69                        dw      EXIT                    // ;
 455+ 8186
 456+ 8186              //  ______________________________________________________________________
 457+ 8186              //
 458+ 8186              // '            -- xt
 459+ 8186                              Colon_Def TICK, "'", is_normal
 459+ 8186             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 8186             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 8186             >
 459+ 8186             >                // dummy db directives used to calculate length of namec
 459+ 8186 27          >                db      "'"
 459+ 8187             >len_NFA         defl    $ - temp_NFA
 459+ 8187             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 8186             >
 459+ 8186 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 8187 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 8188             >                org     $-1                 // alter last byte of Name just above to set
 459+ 8187 A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 8188             >
 459+ 8188 64 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 818A             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 818A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 818C             >                else
 459+ 818C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 459+ 818C             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 818C             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 818C             >
 459+ 818C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 818C CB 75                        dw      LFIND                   // -find
 461+ 818E ED 69                        dw      ZEQUAL                  // 0=
 462+ 8190 FC 6C 97 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8194 D7 6A                        dw      DROP                    // drop
 464+ 8196 AB 69                        dw      EXIT                    // ;
 465+ 8198
 466+ 8198              //  ______________________________________________________________________
 467+ 8198              //
 468+ 8198              // forget       -- cccc
 469+ 8198                              Colon_Def FORGET, "FORGET", is_normal
 469+ 8198             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 8198             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 8198             >
 469+ 8198             >                // dummy db directives used to calculate length of namec
 469+ 8198 46 4F 52 47 >                db      "FORGET"
 469+ 819C 45 54       >
 469+ 819E             >len_NFA         defl    $ - temp_NFA
 469+ 819E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 8198             >
 469+ 8198 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 8199 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 819D 45 54       >
 469+ 819F             >                org     $-1                 // alter last byte of Name just above to set
 469+ 819E D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 819F             >
 469+ 819F 86 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81A1             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81A1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81A3             >                else
 469+ 81A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 469+ 81A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81A3             >
 469+ 81A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81A3 3C 6E 9F 6B                  dw      CURRENT, FETCH          // current @
 471+ 81A7 2F 6E 9F 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81AB 29 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81AF 17 00 97 70
 473+ 81B3 8A 81 67 70                  dw      TICK, TO_BODY           // ' >body
 474+ 81B7 0C 6B B2 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81BB 9F 6B
 475+ 81BD 44 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81C1 15 00 97 70
 476+ 81C5 0C 6B 3D 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81C9 BA 6D AC 6B
 477+ 81CD 23 70 9F 6B                  dw      LFA, FETCH              // lfa @
 478+ 81D1 2F 6E 9F 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81D5 AC 6B
 479+ 81D7 AB 69                        dw      EXIT                    // ;
 480+ 81D9
 481+ 81D9              //  ______________________________________________________________________
 482+ 81D9              //
 483+ 81D9              // marker       -- cccc
 484+ 81D9                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81D9             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81D9             >
 484+ 81D9             >                // dummy db directives used to calculate length of namec
 484+ 81D9 4D 41 52 4B >                db      "MARKER"
 484+ 81DD 45 52       >
 484+ 81DF             >len_NFA         defl    $ - temp_NFA
 484+ 81DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81D9             >
 484+ 81D9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81DA 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81DE 45 52       >
 484+ 81E0             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81DF D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81E0             >
 484+ 81E0 98 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81E2             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81E2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81E4             >                else
 484+ 81E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 81E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81E4             >
 484+ 81E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81E4 FA 71                        dw      CBUILDS
 486+ 81E6 C8 6D 9F 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81EA F7 6E
 487+ 81EC 3C 6E 9F 6B                  dw      CURRENT, FETCH, COMMA
 487+ 81F0 F7 6E
 488+ 81F2 2F 6E 9F 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 81F6 F7 6E
 489+ 81F8 13 70 F7 6E                  dw      LATEST, COMMA
 490+ 81FC 13 70 51 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 8200 23 70 9F 6B
 490+ 8204 F7 6E
 491+ 8206 0A 72                        dw      DOES_TO
 492+ 8208 0C 6B 9F 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 820C C8 6D AC 6B
 492+ 8210 75 6A
 493+ 8212 0C 6B 9F 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 8216 3C 6E AC 6B
 493+ 821A 75 6A
 494+ 821C 0C 6B 9F 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8220 2F 6E AC 6B
 494+ 8224 75 6A
 495+ 8226 0C 6B 9F 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 822A BA 6D AC 6B
 495+ 822E 75 6A
 496+ 8230 9F 6B 3C 6E                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 8234 9F 6B AC 6B
 497+ 8238 AB 69                        dw      EXIT
 498+ 823A
 499+ 823A              //  ______________________________________________________________________
 500+ 823A              //
 501+ 823A              // spaces       n --
 502+ 823A                              Colon_Def SPACES, "SPACES", is_normal
 502+ 823A             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 823A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 823A             >
 502+ 823A             >                // dummy db directives used to calculate length of namec
 502+ 823A 53 50 41 43 >                db      "SPACES"
 502+ 823E 45 53       >
 502+ 8240             >len_NFA         defl    $ - temp_NFA
 502+ 8240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 823A             >
 502+ 823A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 823B 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 823F 45 53       >
 502+ 8241             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8240 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8241             >
 502+ 8241 D9 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 8243             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8243 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 8245             >                else
 502+ 8245 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 502+ 8245             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 8245             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 8245             >
 502+ 8245             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 8245 FC 6C 8F 6F                  dw      ZERO, MAX
 504+ 8249 FC 6C 59 64                  dw      ZERO, C_Q_DO
 505+ 824D 08 00                        dw      Spaces_Leave - $
 506+ 824F              Spaces_Loop:
 507+ 824F DD 6F                        dw          SPACE
 508+ 8251 04 64                        dw      C_LOOP
 509+ 8253 FC FF                        dw      Spaces_Loop - $
 510+ 8255              Spaces_Leave:
 511+ 8255 AB 69                        dw      EXIT                    // ;
 512+ 8257
 513+ 8257              //  ______________________________________________________________________
 514+ 8257              //
 515+ 8257              // <#           --
 516+ 8257                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 8257             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 8257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8257             >
 516+ 8257             >                // dummy db directives used to calculate length of namec
 516+ 8257 3C 23       >                db      "<#"
 516+ 8259             >len_NFA         defl    $ - temp_NFA
 516+ 8259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8257             >
 516+ 8257 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8258 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 825A             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8259 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 825A             >
 516+ 825A 3A 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 825C             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 825C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 825E             >                else
 516+ 825E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 825E             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 825E             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 825E             >
 516+ 825E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 825E 06 74 7D 6E                  dw      PAD, HLD, STORE
 517+ 8262 AC 6B
 518+ 8264 AB 69                        dw      EXIT
 519+ 8266
 520+ 8266              //  ______________________________________________________________________
 521+ 8266              //
 522+ 8266              // #>           --
 523+ 8266                              Colon_Def DASH_END, "#>", is_normal
 523+ 8266             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 8266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 8266             >
 523+ 8266             >                // dummy db directives used to calculate length of namec
 523+ 8266 23 3E       >                db      "#>"
 523+ 8268             >len_NFA         defl    $ - temp_NFA
 523+ 8268             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 8266             >
 523+ 8266 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8267 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8269             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8268 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8269             >
 523+ 8269 57 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 826B             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 826B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 826D             >                else
 523+ 826D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 826D             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 826D             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 826D             >
 523+ 826D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 826D 4D 6B                        dw      TWO_DROP
 525+ 826F 7D 6E 9F 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 8273 06 74 C7 6A
 525+ 8277 29 6F
 526+ 8279 AB 69                        dw      EXIT
 527+ 827B
 528+ 827B              //  ______________________________________________________________________
 529+ 827B              //
 530+ 827B              // sign         n d -- d
 531+ 827B                              Colon_Def SIGN, "SIGN", is_normal
 531+ 827B             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 827B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 827B             >
 531+ 827B             >                // dummy db directives used to calculate length of namec
 531+ 827B 53 49 47 4E >                db      "SIGN"
 531+ 827F             >len_NFA         defl    $ - temp_NFA
 531+ 827F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 827B             >
 531+ 827B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 827C 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 8280             >                org     $-1                 // alter last byte of Name just above to set
 531+ 827F CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 8280             >
 531+ 8280 66 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 8282             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 8282 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 8284             >                else
 531+ 8284 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 531+ 8284             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 8284             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 8284             >
 531+ 8284             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 8284 08 6A                        dw      ZLESS
 533+ 8286 2C 64                        dw      ZBRANCH
 534+ 8288 08 00                        dw      Sign_Endif - $
 535+ 828A A9 63 2D 00                  dw          LIT, 45, HOLD
 535+ 828E F0 73
 536+ 8290              Sign_Endif:
 537+ 8290 AB 69                        dw      EXIT
 538+ 8292
 539+ 8292              //  ______________________________________________________________________
 540+ 8292              //
 541+ 8292              // #           d1 -- d2
 542+ 8292                              Colon_Def DASH, "#", is_normal
 542+ 8292             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 8292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 8292             >
 542+ 8292             >                // dummy db directives used to calculate length of namec
 542+ 8292 23          >                db      "#"
 542+ 8293             >len_NFA         defl    $ - temp_NFA
 542+ 8293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 8292             >
 542+ 8292 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 8293 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 8294             >                org     $-1                 // alter last byte of Name just above to set
 542+ 8293 A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 8294             >
 542+ 8294 7B 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8296             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8296 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8298             >                else
 542+ 8298 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 8298             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8298             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8298             >
 542+ 8298             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8298 51 6E 9F 6B                  dw      BASE, FETCH
 544+ 829C
 545+ 829C BE 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 829E FC 6C E6 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 82A2 02 69
 547+ 82A4 D2 69 FF 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82A8 BE 69
 548+ 82AA 02 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82AC D2 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82AE
 551+ 82AE 19 6B                        dw      ROT
 552+ 82B0 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82B4 C7 6A 54 6F
 553+ 82B8 2C 64                        dw      ZBRANCH
 554+ 82BA 08 00                        dw      Dash_Endif - $
 555+ 82BC A9 63 07 00                  dw          LIT, 7, PLUS
 555+ 82C0 2C 6A
 556+ 82C2              Dash_Endif:
 557+ 82C2
 558+ 82C2 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82C6 2C 6A F0 73
 559+ 82CA AB 69                        dw      EXIT
 560+ 82CC
 561+ 82CC              //  ______________________________________________________________________
 562+ 82CC              //
 563+ 82CC              // #s           d1 -- d2
 564+ 82CC                              Colon_Def DASHES, "#S", is_normal
 564+ 82CC             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82CC             >
 564+ 82CC             >                // dummy db directives used to calculate length of namec
 564+ 82CC 23 53       >                db      "#S"
 564+ 82CE             >len_NFA         defl    $ - temp_NFA
 564+ 82CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82CC             >
 564+ 82CC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82CD 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82CF             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82CE D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82CF             >
 564+ 82CF 92 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82D1             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82D1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82D3             >                else
 564+ 82D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 82D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82D3             >
 564+ 82D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82D3              Dashes_Begin:
 566+ 82D3 96 82 6D 6B                  dw      DASH, TWO_DUP
 567+ 82D7 4D 69 ED 69                  dw          OR_OP, ZEQUAL
 568+ 82DB 2C 64                        dw      ZBRANCH
 569+ 82DD F6 FF                        dw      Dashes_Begin - $
 570+ 82DF AB 69                        dw      EXIT
 571+ 82E1
 572+ 82E1              //  ______________________________________________________________________
 573+ 82E1              //
 574+ 82E1              // d.r          d n --
 575+ 82E1                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82E1             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82E1             >
 575+ 82E1             >                // dummy db directives used to calculate length of namec
 575+ 82E1 44 2E 52    >                db      "D.R"
 575+ 82E4             >len_NFA         defl    $ - temp_NFA
 575+ 82E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82E1             >
 575+ 82E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82E2 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82E5             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82E4 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82E5             >
 575+ 82E5 CC 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82E7             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82E7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82E9             >                else
 575+ 82E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 82E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82E9             >
 575+ 82E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82E9 BE 69                        dw      TO_R
 577+ 82EB EF 6A A8 79                  dw      TUCK, DABS
 578+ 82EF 5C 82 D1 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 82F3 19 6B 82 82
 578+ 82F7 6B 82
 579+ 82F9 D2 69                        dw      R_TO
 580+ 82FB C7 6A 29 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 82FF 43 82 97 72
 581+ 8303 AB 69                        dw      EXIT
 582+ 8305
 583+ 8305              //  ______________________________________________________________________
 584+ 8305              //
 585+ 8305              // .r           n1 n2 --
 586+ 8305                              Colon_Def DOT_R, ".R", is_normal
 586+ 8305             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8305             >
 586+ 8305             >                // dummy db directives used to calculate length of namec
 586+ 8305 2E 52       >                db      ".R"
 586+ 8307             >len_NFA         defl    $ - temp_NFA
 586+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8305             >
 586+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8306 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8307 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8308             >
 586+ 8308 E1 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 830A             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 830A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 830C             >                else
 586+ 830C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 830C             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 830C             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 830C             >
 586+ 830C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 830C BE 69                        dw      TO_R
 588+ 830E 1A 6F D2 69                  dw      S_TO_D, R_TO
 589+ 8312 E7 82                        dw      D_DOT_R
 590+ 8314 AB 69                        dw      EXIT
 591+ 8316
 592+ 8316              //  ______________________________________________________________________
 593+ 8316              //
 594+ 8316              // d.           d --
 595+ 8316                              Colon_Def D_DOT, "D.", is_normal
 595+ 8316             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8316             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8316             >
 595+ 8316             >                // dummy db directives used to calculate length of namec
 595+ 8316 44 2E       >                db      "D."
 595+ 8318             >len_NFA         defl    $ - temp_NFA
 595+ 8318             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8316             >
 595+ 8316 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8317 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8319             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8318 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8319             >
 595+ 8319 05 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 831B             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 831B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 831D             >                else
 595+ 831D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 595+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 831D             >
 595+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 831D FC 6C E7 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8321 DD 6F
 597+ 8323 AB 69                        dw      EXIT
 598+ 8325
 599+ 8325              //  ______________________________________________________________________
 600+ 8325              //
 601+ 8325              // .            n --
 602+ 8325                              Colon_Def DOT, ".", is_normal
 602+ 8325             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8325             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8325             >
 602+ 8325             >                // dummy db directives used to calculate length of namec
 602+ 8325 2E          >                db      "."
 602+ 8326             >len_NFA         defl    $ - temp_NFA
 602+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8325             >
 602+ 8325 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8326 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8326 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8327             >
 602+ 8327 16 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8329             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8329 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 832B             >                else
 602+ 832B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 832B             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 832B             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 832B             >
 602+ 832B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 832B 1A 6F 1B 83                  dw      S_TO_D, D_DOT
 604+ 832F AB 69                        dw      EXIT
 605+ 8331
 606+ 8331              //  ______________________________________________________________________
 607+ 8331              //
 608+ 8331              // ?            n --
 609+ 8331                              Colon_Def QUESTION, "?", is_normal
 609+ 8331             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8331             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8331             >
 609+ 8331             >                // dummy db directives used to calculate length of namec
 609+ 8331 3F          >                db      "?"
 609+ 8332             >len_NFA         defl    $ - temp_NFA
 609+ 8332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8331             >
 609+ 8331 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8332 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8333             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8332 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8333             >
 609+ 8333 25 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8335             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8335 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8337             >                else
 609+ 8337 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 8337             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8337             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8337             >
 609+ 8337             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8337 9F 6B 29 83                  dw      FETCH, DOT
 611+ 833B AB 69                        dw      EXIT
 612+ 833D
 613+ 833D              //  ______________________________________________________________________
 614+ 833D              //
 615+ 833D              // u.           u --
 616+ 833D                              Colon_Def U_DOT, "U.", is_normal
 616+ 833D             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 833D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 833D             >
 616+ 833D             >                // dummy db directives used to calculate length of namec
 616+ 833D 55 2E       >                db      "U."
 616+ 833F             >len_NFA         defl    $ - temp_NFA
 616+ 833F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 833D             >
 616+ 833D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 833E 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8340             >                org     $-1                 // alter last byte of Name just above to set
 616+ 833F AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8340             >
 616+ 8340 31 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8342             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8342 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8344             >                else
 616+ 8344 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 616+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8344             >
 616+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8344 FC 6C 1B 83                  dw      ZERO, D_DOT
 618+ 8348 AB 69                        dw      EXIT
 619+ 834A
 620+ 834A              //  ______________________________________________________________________
 621+ 834A              //
 622+ 834A              // words        --
 623+ 834A                              Colon_Def WORDS, "WORDS", is_normal
 623+ 834A             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 834A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 834A             >
 623+ 834A             >                // dummy db directives used to calculate length of namec
 623+ 834A 57 4F 52 44 >                db      "WORDS"
 623+ 834E 53          >
 623+ 834F             >len_NFA         defl    $ - temp_NFA
 623+ 834F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 834A             >
 623+ 834A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 834B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 834F 53          >
 623+ 8350             >                org     $-1                 // alter last byte of Name just above to set
 623+ 834F D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8350             >
 623+ 8350 3D 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8352             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8352 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8354             >                else
 623+ 8354 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 8354             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8354             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8354             >
 623+ 8354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8354 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 8358 0D 6E AC 6B
 625+ 835C 2F 6E 9F 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8360 9F 6B
 626+ 8362              Words_Begin:
 627+ 8362 0C 6B BA 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 8366 A9 63 1F 00
 627+ 836A 3B 69
 628+ 836C 0D 6E 9F 6B                  dw          OUT, FETCH, PLUS
 628+ 8370 2C 6A
 629+ 8372 30 6D 54 6F                  dw          CL, LESS, ZEQUAL
 629+ 8376 ED 69
 630+ 8378 2C 64                        dw          ZBRANCH
 631+ 837A 0A 00                        dw          Words_Endif - $
 632+ 837C 2B 66 FC 6C                  dw              CR, ZERO, OUT, STORE
 632+ 8380 0D 6E AC 6B
 633+ 8384              Words_Endif:
 634+ 8384 0C 6B 3C 76                  dw          DUP, ID_DOT
 635+ 8388 51 70 23 70                  dw          PFA, LFA, FETCH
 635+ 838C 9F 6B
 636+ 838E 0C 6B ED 69                  dw          DUP, ZEQUAL
 637+ 8392 47 67 4D 69                  dw          QTERMINAL, OR_OP
 638+ 8396 2C 64                        dw      ZBRANCH
 639+ 8398 CA FF                        dw      Words_Begin - $
 640+ 839A D7 6A                        dw      DROP
 641+ 839C AB 69                        dw      EXIT
 642+ 839E
 643+ 839E              //  ______________________________________________________________________
 644+ 839E              //
 645+ 839E              // list         n --
 646+ 839E                              Colon_Def LIST, "LIST", is_normal
 646+ 839E             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 839E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 839E             >
 646+ 839E             >                // dummy db directives used to calculate length of namec
 646+ 839E 4C 49 53 54 >                db      "LIST"
 646+ 83A2             >len_NFA         defl    $ - temp_NFA
 646+ 83A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 839E             >
 646+ 839E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 839F 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83A3             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83A2 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83A3             >
 646+ 83A3 4A 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83A5             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83A5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83A7             >                else
 646+ 83A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 646+ 83A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83A7             >
 646+ 83A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83A7 B6 71 2B 66                  dw      DECIMAL, CR
 648+ 83AB 0C 6B 16 6E                  dw      DUP, SCR, STORE
 648+ 83AF AC 6B
 649+ 83B1 68 74                        dw      C_DOT_QUOTE
 650+ 83B3 05 53 63 72                  db      5, "Scr# "
 650+ 83B7 23 20
 651+ 83B9 29 83                        dw      DOT
 652+ 83BB 54 6D FC 6C                  dw      LSCR, ZERO, C_DO
 652+ 83BF 86 64
 653+ 83C1              List_Loop:
 654+ 83C1 2B 66                        dw          CR
 655+ 83C3 90 64 14 6D                  dw          I, THREE
 656+ 83C7 0A 83 DD 6F                  dw          DOT_R, SPACE
 657+ 83CB 90 64 16 6E                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83CF 9F 6B D7 7A
 658+ 83D3 47 67                        dw          QTERMINAL
 659+ 83D5 2C 64                        dw          ZBRANCH
 660+ 83D7 06 00                        dw          List_Endif - $
 661+ 83D9 41 64                        dw              C_LEAVE
 662+ 83DB 06 00                        dw              List_Leave - $
 663+ 83DD              List_Endif:
 664+ 83DD 04 64                        dw      C_LOOP
 665+ 83DF E2 FF                        dw      List_Loop - $
 666+ 83E1              List_Leave:
 667+ 83E1 2B 66                        dw      CR
 668+ 83E3 AB 69                        dw      EXIT
 669+ 83E5
 670+ 83E5              //  ______________________________________________________________________
 671+ 83E5              //
 672+ 83E5              // index        n1 n2 --
 673+ 83E5                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83E5             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83E5             >
 673+ 83E5             >                // dummy db directives used to calculate length of namec
 673+ 83E5 49 4E 44 45 >                db      "INDEX"
 673+ 83E9 58          >
 673+ 83EA             >len_NFA         defl    $ - temp_NFA
 673+ 83EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83E5             >
 673+ 83E5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83E6 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83EA 58          >
 673+ 83EB             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83EA D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83EB             >
 673+ 83EB 9E 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83ED             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83ED 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 83EF             >                else
 673+ 83EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 673+ 83EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 83EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 83EF             >
 673+ 83EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 83EF 4D 6A FF 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 83F3 86 64
 675+ 83F5              Index_Loop:
 676+ 83F5 2B 66 90 64                  dw          CR, I, THREE
 676+ 83F9 14 6D
 677+ 83FB 0A 83 DD 6F                  dw          DOT_R, SPACE
 678+ 83FF FC 6C 90 64                  dw          ZERO, I, DOT_LINE
 678+ 8403 D7 7A
 679+ 8405 47 67                        dw          QTERMINAL
 680+ 8407 2C 64                        dw          ZBRANCH
 681+ 8409 06 00                        dw          Index_Endif - $
 682+ 840B 41 64                        dw              C_LEAVE
 683+ 840D 06 00                        dw              Index_Leave - $
 684+ 840F              Index_Endif:
 685+ 840F 04 64                        dw      C_LOOP
 686+ 8411 E4 FF                        dw      Index_Loop - $
 687+ 8413              Index_Leave:
 688+ 8413 2B 66                        dw      CR
 689+ 8415 AB 69                        dw      EXIT
 690+ 8417
 691+ 8417              //  ______________________________________________________________________
 692+ 8417              //
 693+ 8417              // cls          --
 694+ 8417                              Colon_Def CLS, "CLS", is_normal
 694+ 8417             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 8417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 8417             >
 694+ 8417             >                // dummy db directives used to calculate length of namec
 694+ 8417 43 4C 53    >                db      "CLS"
 694+ 841A             >len_NFA         defl    $ - temp_NFA
 694+ 841A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 8417             >
 694+ 8417 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 8418 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 841B             >                org     $-1                 // alter last byte of Name just above to set
 694+ 841A D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 841B             >
 694+ 841B E5 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 841D             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 841D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 841F             >                else
 694+ 841F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 841F             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 841F             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 841F             >
 694+ 841F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 841F A9 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 8423 14 66
 696+ 8425 AB 69                        dw      EXIT
 697+ 8427
 698+ 8427              //  ______________________________________________________________________
 699+ 8427              //
 700+ 8427              // splash       --
 701+ 8427                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 8427             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 8427             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 8427             >
 701+ 8427             >                // dummy db directives used to calculate length of namec
 701+ 8427 53 50 4C 41 >                db      "SPLASH"
 701+ 842B 53 48       >
 701+ 842D             >len_NFA         defl    $ - temp_NFA
 701+ 842D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 8427             >
 701+ 8427 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 8428 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 842C 53 48       >
 701+ 842E             >                org     $-1                 // alter last byte of Name just above to set
 701+ 842D C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 842E             >
 701+ 842E 17 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8430             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8430 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 8432             >                else
 701+ 8432 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 701+ 8432             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 8432             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 8432             >
 701+ 8432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 8432 1D 84                        dw      CLS
 703+ 8434 68 74                        dw      C_DOT_QUOTE
 704+ 8436 5A                           db      90  // length of the following string CR included.
 705+ 8437 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 705+ 843B 72 74 68 20
 705+ 843F 31 2E 35 32
 705+ 8443 20 4E 65 78
 705+ 8447 74 5A 58 4F
 705+ 844B 53 20 76 65
 705+ 844F 72 73 69 6F
 705+ 8453 6E 0D
 706+ 8455 49 6E 64 69                  db      "Indirect Threaded - build 20230321", 13
 706+ 8459 72 65 63 74
 706+ 845D 20 54 68 72
 706+ 8461 65 61 64 65
 706+ 8465 64 20 2D 20
 706+ 8469 62 75 69 6C
 706+ 846D 64 20 32 30
 706+ 8471 32 33 30 33
 706+ 8475 32 31 0D
 707+ 8478 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13
 707+ 847C 2D 32 30 32
 707+ 8480 33 20 4D 61
 707+ 8484 74 74 65 6F
 707+ 8488 20 56 69 74
 707+ 848C 74 75 72 69
 707+ 8490 0D
 708+ 8491 AB 69                        dw      EXIT
 709+ 8493
 710+ 8493              //  ______________________________________________________________________
 711+ 8493              //
 712+ 8493              // video        --
 713+ 8493                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 8493             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 8493             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 8493             >
 713+ 8493             >                // dummy db directives used to calculate length of namec
 713+ 8493 56 49 44 45 >                db      "VIDEO"
 713+ 8497 4F          >
 713+ 8498             >len_NFA         defl    $ - temp_NFA
 713+ 8498             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 8493             >
 713+ 8493 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 8494 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 8498 4F          >
 713+ 8499             >                org     $-1                 // alter last byte of Name just above to set
 713+ 8498 CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 8499             >
 713+ 8499 27 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 849B             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 849B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 849D             >                else
 713+ 849D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 713+ 849D             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 849D             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 849D             >
 713+ 849D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 849D 0C 6D 0C 6B                  dw      TWO, DUP, DEVICE, STORE
 714+ 84A1 1F 7B AC 6B
 715+ 84A5 88 67                        dw      SELECT
 716+ 84A7 AB 69                        dw      EXIT
 717+ 84A9
 718+ 84A9              //  ______________________________________________________________________
 719+ 84A9              //
 720+ 84A9              // accept-      a n1 -- n2
 721+ 84A9                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84A9             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84A9             >
 721+ 84A9             >                // dummy db directives used to calculate length of namec
 721+ 84A9 41 43 43 45 >                db      "ACCEPT-"
 721+ 84AD 50 54 2D    >
 721+ 84B0             >len_NFA         defl    $ - temp_NFA
 721+ 84B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84A9             >
 721+ 84A9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84AA 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84AE 50 54 2D    >
 721+ 84B1             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84B0 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84B1             >
 721+ 84B1 93 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84B3             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84B3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84B5             >                else
 721+ 84B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 84B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84B5             >
 721+ 84B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84B5 BE 69                        dw      TO_R
 723+ 84B7 FC 6C                        dw      ZERO
 724+ 84B9 FF 6A                        dw      SWAP
 725+ 84BB 0C 6B                        dw      DUP
 726+ 84BD D2 69                        dw      R_TO
 727+ 84BF 2C 6A                        dw      PLUS
 728+ 84C1 FF 6A                        dw      SWAP
 729+ 84C3 86 64                        dw      C_DO
 730+ 84C5              AcceptN_Loop:
 731+ 84C5 59 7B                        dw          MMU7_FETCH
 732+ 84C7 63 67                        dw          INKEY
 733+ 84C9 FF 6A 6B 7B                  dw          SWAP, MMU7_STORE
 734+ 84CD 0C 6B ED 69                  dw          DUP, ZEQUAL
 735+ 84D1 2C 64                        dw          ZBRANCH
 736+ 84D3 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84D5              //              dw              VIDEO, QUIT
 738+ 84D5 41 64                        dw              C_LEAVE
 739+ 84D7 3A 00                        dw              AcceptN_Leave - $
 740+ 84D9
 741+ 84D9              AcceptN_Endif_1:
 742+ 84D9 0C 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84DD 0D 00 37 6F
 743+ 84E1 2C 64                        dw          ZBRANCH
 744+ 84E3 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84E5 D7 6A FC 6C                  dw              DROP, ZERO
 746+ 84E9              AcceptN_Endif_2:
 747+ 84E9 0C 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84ED 0A 00 37 6F
 748+ 84F1 2C 64                        dw          ZBRANCH
 749+ 84F3 06 00                        dw          AcceptN_Endif_3 - $
 750+ 84F5 D7 6A FC 6C                  dw              DROP, ZERO
 751+ 84F9              AcceptN_Endif_3:
 752+ 84F9 90 64 C8 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 84FD 4D 6A
 753+ 84FF
 754+ 84FF 90 64 BA 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 8503 ED 69
 755+ 8505 2C 64                        dw          ZBRANCH
 756+ 8507 06 00                        dw              AcceptN_Endif_4 - $
 757+ 8509 41 64                        dw                  C_LEAVE     //              leave
 758+ 850B 06 00                        dw                  AcceptN_Leave - $
 759+ 850D              AcceptN_Endif_4:                                 //      endif
 760+ 850D
 761+ 850D 04 64                        dw      C_LOOP
 762+ 850F B6 FF                        dw      AcceptN_Loop -$
 763+ 8511              AcceptN_Leave:
 764+ 8511 AB 69                        dw      EXIT
 765+ 8513
 766+ 8513              //  ______________________________________________________________________
 767+ 8513              //
 768+ 8513              // load-        n --
 769+ 8513              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 8513              // it accepts text from stream #n to the normal INTERPRET
 771+ 8513              // up to now, text-file must end with QUIT
 772+ 8513                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 8513             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 8513             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 8513             >
 772+ 8513             >                // dummy db directives used to calculate length of namec
 772+ 8513 4C 4F 41 44 >                db      "LOAD-"
 772+ 8517 2D          >
 772+ 8518             >len_NFA         defl    $ - temp_NFA
 772+ 8518             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 8513             >
 772+ 8513 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 8514 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8518 2D          >
 772+ 8519             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8518 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8519             >
 772+ 8519 A9 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 851B             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 851B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 851D             >                else
 772+ 851D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 851D             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 851D             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 851D             >
 772+ 851D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 851D B2 6E AC 6B                  dw      SOURCE_ID, STORE
 774+ 8521              Load_N_Begin:
 775+ 8521 8F 6D 9F 6B                  dw          TIB, FETCH
 776+ 8525 0C 6B A9 63                  dw          DUP, LIT, 80
 776+ 8529 50 00
 777+ 852B 6D 6B E1 73                  dw          TWO_DUP, BLANK
 778+ 852F B2 6E 9F 6B                  dw          SOURCE_ID, FETCH
 779+ 8533 99 79 0C 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8537 1F 7B AC 6B
 780+ 853B 88 67                        dw          SELECT
 781+ 853D B3 84                        dw          ACCEPT_N
 782+ 853F 9B 84                        dw          VIDEO
 783+ 8541 4D 6B                        dw          TWO_DROP
 784+ 8543 FC 6C FB 6D                  dw          ZERO, BLK, STORE
 784+ 8547 AC 6B
 785+ 8549 FC 6C 04 6E                  dw          ZERO, TO_IN, STORE
 785+ 854D AC 6B
 786+ 854F B9 77                        dw          INTERPRET
 787+ 8551 47 67                        dw          QTERMINAL
 788+ 8553 2C 64                        dw      ZBRANCH
 789+ 8555 CC FF                        dw      Load_N_Begin - $
 790+ 8557 AB 69                        dw      EXIT
 791+ 8559
 792+ 8559              //  ______________________________________________________________________
 793+ 8559              //
 794+ 8559              // load         n --
 795+ 8559              // if n is positive, it loads screen #n (as usual)
 796+ 8559              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8559              // this second way is useful if you want to load any kind of file
 798+ 8559              // provied that it is OPEN# the usual BASIC way.
 799+ 8559                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8559             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8559             >
 799+ 8559             >                // dummy db directives used to calculate length of namec
 799+ 8559 4C 4F 41 44 >                db      "LOAD"
 799+ 855D             >len_NFA         defl    $ - temp_NFA
 799+ 855D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8559             >
 799+ 8559 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 855A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 855E             >                org     $-1                 // alter last byte of Name just above to set
 799+ 855D C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 855E             >
 799+ 855E 13 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8560             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8560 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 8562             >                else
 799+ 8562 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 799+ 8562             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 8562             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 8562             >
 799+ 8562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 8562 0C 6B 08 6A                  dw      DUP, ZLESS
 801+ 8566 2C 64                        dw      ZBRANCH
 802+ 8568 08 00                        dw      Load_Else - $
 803+ 856A 1B 85                        dw          LOAD_N
 804+ 856C 15 64                        dw      BRANCH
 805+ 856E 04 00                        dw      Load_Endif - $
 806+ 8570              Load_Else:
 807+ 8570 38 81                        dw          LOAD_P
 808+ 8572              Load_Endif:
 809+ 8572 AB 69                        dw      EXIT
 810+ 8574
 811+ 8574
 812+ 8574              //  ______________________________________________________________________
 813+ 8574              //
 814+ 8574              // autoexec     --
 815+ 8574              // this word is called the first time the Forth system boot to
 816+ 8574              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 8574                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 8574             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 8574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 8574             >
 817+ 8574             >                // dummy db directives used to calculate length of namec
 817+ 8574 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8578 45 58 45 43 >
 817+ 857C             >len_NFA         defl    $ - temp_NFA
 817+ 857C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 8574             >
 817+ 8574 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 8575 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8579 45 58 45 43 >
 817+ 857D             >                org     $-1                 // alter last byte of Name just above to set
 817+ 857C C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 857D             >
 817+ 857D 59 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 857F             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 857F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 8581             >                else
 817+ 8581 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 8581             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 8581             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 8581             >
 817+ 8581             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 8581 A9 63 0B 00                  dw      LIT, 11
 819+ 8585 A9 63 A9 6C                  dw      LIT, NOOP
 820+ 8589 A9 63 C8 78                  dw      LIT, Autoexec_Ptr
 821+ 858D AC 6B                        dw      STORE
 822+ 858F 60 85                        dw      LOAD
 823+ 8591 79 78                        dw      QUIT
 824+ 8593 AB 69                        dw      EXIT
 825+ 8595
 826+ 8595
 827+ 8595              //  ______________________________________________________________________
 828+ 8595              //
 829+ 8595              // bye     --
 830+ 8595              //
 831+ 8595                              Colon_Def BYE, "BYE", is_normal
 831+ 8595             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 8595             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8595             >
 831+ 8595             >                // dummy db directives used to calculate length of namec
 831+ 8595 42 59 45    >                db      "BYE"
 831+ 8598             >len_NFA         defl    $ - temp_NFA
 831+ 8598             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8595             >
 831+ 8595 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8596 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 8599             >                org     $-1                 // alter last byte of Name just above to set
 831+ 8598 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 8599             >
 831+ 8599 74 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 859B             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 859B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 859D             >                else
 831+ 859D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 859D             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 859D             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 859D             >
 831+ 859D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 859D D6 7D                        dw      FLUSH
 833+ 859F 09 7D                        dw      EMPTY_BUFFERS
 834+ 85A1 AD 7B 9F 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85A5 CE 67 D7 6A
 835+ 85A9 FC 6C 62 6D                  dw      ZERO, PLUS_ORIGIN
 836+ 85AD 5E 79                        dw      BASIC
 837+ 85AF
 838+ 85AF              //  ______________________________________________________________________
 839+ 85AF              //
 840+ 85AF              // invv     --
 841+ 85AF              //
 842+ 85AF              //              Colon_Def INVV, "INVV", is_normal
 843+ 85AF              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85AF              //              dw      EXIT
 845+ 85AF
 846+ 85AF              //  ______________________________________________________________________
 847+ 85AF              //
 848+ 85AF              // truv     --
 849+ 85AF              //
 850+ 85AF              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85AF              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85AF              //              dw      EXIT
 853+ 85AF
 854+ 85AF              //  ______________________________________________________________________
 855+ 85AF              //
 856+ 85AF              // mark     --
 857+ 85AF              //
 858+ 85AF              //              Colon_Def MARK, "MARK", is_normal
 859+ 85AF              //              dw      INVV, TYPE, TRUV
 860+ 85AF              //              dw      EXIT
 861+ 85AF
 862+ 85AF              //  ______________________________________________________________________
 863+ 85AF              //
 864+ 85AF              // back     --
 865+ 85AF              //
 866+ 85AF                              Colon_Def BACK, "BACK", is_normal
 866+ 85AF             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85AF             >
 866+ 85AF             >                // dummy db directives used to calculate length of namec
 866+ 85AF 42 41 43 4B >                db      "BACK"
 866+ 85B3             >len_NFA         defl    $ - temp_NFA
 866+ 85B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85AF             >
 866+ 85AF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85B0 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85B4             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85B3 CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85B4             >
 866+ 85B4 95 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85B6             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85B6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85B8             >                else
 866+ 85B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 866+ 85B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85B8             >
 866+ 85B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85B8 DB 6E 29 6F                  dw      HERE, SUBTRACT, COMMA
 867+ 85BC F7 6E
 868+ 85BE AB 69                        dw      EXIT
 869+ 85C0
 870+ 85C0              //  ______________________________________________________________________
 871+ 85C0              //
 872+ 85C0              // if          ( -- a 2 ) \ compile-time
 873+ 85C0              // IF ... THEN
 874+ 85C0              // IF ... ELSE ... ENDIF
 875+ 85C0                              Colon_Def IF, "IF", is_immediate
 875+ 85C0             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85C0             >
 875+ 85C0             >                // dummy db directives used to calculate length of namec
 875+ 85C0 49 46       >                db      "IF"
 875+ 85C2             >len_NFA         defl    $ - temp_NFA
 875+ 85C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85C0             >
 875+ 85C0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85C1 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85C3             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85C2 C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85C3             >
 875+ 85C3 AF 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85C5             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85C5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85C7             >                else
 875+ 85C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 85C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85C7             >
 875+ 85C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85C7 2A 71 2C 64                  dw      COMPILE, ZBRANCH
 877+ 85CB DB 6E FC 6C                  dw      HERE, ZERO, COMMA
 877+ 85CF F7 6E
 878+ 85D1 0C 6D                        dw      TWO
 879+ 85D3 AB 69                        dw      EXIT
 880+ 85D5
 881+ 85D5              //  ______________________________________________________________________
 882+ 85D5              //
 883+ 85D5              // then        ( a 2 -- ) \ compile-time
 884+ 85D5              //
 885+ 85D5                              Colon_Def THEN, "THEN", is_immediate
 885+ 85D5             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85D5             >
 885+ 85D5             >                // dummy db directives used to calculate length of namec
 885+ 85D5 54 48 45 4E >                db      "THEN"
 885+ 85D9             >len_NFA         defl    $ - temp_NFA
 885+ 85D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85D5             >
 885+ 85D5 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85D6 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85DA             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85D9 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85DA             >
 885+ 85DA C0 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85DC             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85DC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85DE             >                else
 885+ 85DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 885+ 85DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85DE             >
 885+ 85DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85DE B1 70                        dw      QCOMP
 887+ 85E0 0C 6D E0 70                  dw      TWO, QPAIRS
 888+ 85E4 DB 6E C7 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85E8 29 6F FF 6A
 888+ 85EC AC 6B
 889+ 85EE AB 69                        dw      EXIT
 890+ 85F0
 891+ 85F0              //  ______________________________________________________________________
 892+ 85F0              //
 893+ 85F0              // endif       ( a 2 -- ) \ compile-time
 894+ 85F0              //
 895+ 85F0                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 85F0             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 85F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 85F0             >
 895+ 85F0             >                // dummy db directives used to calculate length of namec
 895+ 85F0 45 4E 44 49 >                db      "ENDIF"
 895+ 85F4 46          >
 895+ 85F5             >len_NFA         defl    $ - temp_NFA
 895+ 85F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 85F0             >
 895+ 85F0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 85F1 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 85F5 46          >
 895+ 85F6             >                org     $-1                 // alter last byte of Name just above to set
 895+ 85F5 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 85F6             >
 895+ 85F6 D5 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 85F8             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 85F8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 85FA             >                else
 895+ 85FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 895+ 85FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 85FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 85FA             >
 895+ 85FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 85FA DC 85                        dw      THEN
 897+ 85FC AB 69                        dw      EXIT
 898+ 85FE
 899+ 85FE              //  ______________________________________________________________________
 900+ 85FE              //
 901+ 85FE              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 85FE              //
 903+ 85FE                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 85FE             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 85FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 85FE             >
 903+ 85FE             >                // dummy db directives used to calculate length of namec
 903+ 85FE 45 4C 53 45 >                db      "ELSE"
 903+ 8602             >len_NFA         defl    $ - temp_NFA
 903+ 8602             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 85FE             >
 903+ 85FE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 85FF 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8603             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8602 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8603             >
 903+ 8603 F0 85       >                dw      last_NFA            // Link to previous definition Name
 903+ 8605             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8605 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8607             >                else
 903+ 8607 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 8607             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8607             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8607             >
 903+ 8607             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8607 B1 70                        dw      QCOMP
 905+ 8609 0C 6D E0 70                  dw      TWO, QPAIRS
 906+ 860D 2A 71 15 64                  dw      COMPILE, BRANCH
 907+ 8611 DB 6E FC 6C                  dw      HERE, ZERO, COMMA
 907+ 8615 F7 6E
 908+ 8617 FF 6A 0C 6D                  dw      SWAP, TWO, THEN
 908+ 861B DC 85
 909+ 861D 0C 6D                        dw      TWO
 910+ 861F AB 69                        dw      EXIT
 911+ 8621
 912+ 8621              //  ______________________________________________________________________
 913+ 8621              //
 914+ 8621              // begin        ( -- a 1 ) \ compile-time
 915+ 8621              // BEGIN ... AGAIN
 916+ 8621              // BEGIN ... f UNTIL
 917+ 8621              // BEGIN ... f WHILE ... REPEAT
 918+ 8621                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8621             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8621             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8621             >
 918+ 8621             >                // dummy db directives used to calculate length of namec
 918+ 8621 42 45 47 49 >                db      "BEGIN"
 918+ 8625 4E          >
 918+ 8626             >len_NFA         defl    $ - temp_NFA
 918+ 8626             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8621             >
 918+ 8621 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8622 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8626 4E          >
 918+ 8627             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8626 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8627             >
 918+ 8627 FE 85       >                dw      last_NFA            // Link to previous definition Name
 918+ 8629             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 8629 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 862B             >                else
 918+ 862B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 862B             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 862B             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 862B             >
 918+ 862B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 862B B1 70                        dw      QCOMP
 920+ 862D DB 6E                        dw      HERE
 921+ 862F 0C 6D                        dw      TWO
 922+ 8631 AB 69                        dw      EXIT
 923+ 8633
 924+ 8633              //  ______________________________________________________________________
 925+ 8633              //
 926+ 8633              // again        ( a 1 -- ) \ compile-time
 927+ 8633                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8633             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8633             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8633             >
 927+ 8633             >                // dummy db directives used to calculate length of namec
 927+ 8633 41 47 41 49 >                db      "AGAIN"
 927+ 8637 4E          >
 927+ 8638             >len_NFA         defl    $ - temp_NFA
 927+ 8638             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8633             >
 927+ 8633 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8634 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 8638 4E          >
 927+ 8639             >                org     $-1                 // alter last byte of Name just above to set
 927+ 8638 CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 8639             >
 927+ 8639 21 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 863B             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 863B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 863D             >                else
 927+ 863D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 863D             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 863D             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 863D             >
 927+ 863D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 863D B1 70                        dw      QCOMP
 929+ 863F 0C 6D E0 70                  dw      TWO, QPAIRS
 930+ 8643 2A 71 15 64                  dw      COMPILE, BRANCH
 931+ 8647 B6 85                        dw      BACK
 932+ 8649 AB 69                        dw      EXIT
 933+ 864B
 934+ 864B              //  ______________________________________________________________________
 935+ 864B              //
 936+ 864B              // until        ( a 1 -- ) \ compile-time
 937+ 864B                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 864B             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 864B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 864B             >
 937+ 864B             >                // dummy db directives used to calculate length of namec
 937+ 864B 55 4E 54 49 >                db      "UNTIL"
 937+ 864F 4C          >
 937+ 8650             >len_NFA         defl    $ - temp_NFA
 937+ 8650             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 864B             >
 937+ 864B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 864C 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8650 4C          >
 937+ 8651             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8650 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8651             >
 937+ 8651 33 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8653             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8653 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8655             >                else
 937+ 8655 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 937+ 8655             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8655             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8655             >
 937+ 8655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8655 B1 70                        dw      QCOMP
 939+ 8657 0C 6D E0 70                  dw      TWO, QPAIRS
 940+ 865B 2A 71 2C 64                  dw      COMPILE, ZBRANCH
 941+ 865F B6 85                        dw      BACK
 942+ 8661 AB 69                        dw      EXIT
 943+ 8663
 944+ 8663              //  ______________________________________________________________________
 945+ 8663              //
 946+ 8663              // end          ( a 1 -- ) \ compile-time
 947+ 8663                              Colon_Def END, "END", is_immediate
 947+ 8663             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8663             >
 947+ 8663             >                // dummy db directives used to calculate length of namec
 947+ 8663 45 4E 44    >                db      "END"
 947+ 8666             >len_NFA         defl    $ - temp_NFA
 947+ 8666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8663             >
 947+ 8663 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8664 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 8667             >                org     $-1                 // alter last byte of Name just above to set
 947+ 8666 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 8667             >
 947+ 8667 4B 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 8669             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 8669 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 866B             >                else
 947+ 866B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 866B             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 866B             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 866B             >
 947+ 866B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 866B 53 86                        dw      UNTIL
 949+ 866D AB 69                        dw      EXIT
 950+ 866F
 951+ 866F              //  ______________________________________________________________________
 952+ 866F              //
 953+ 866F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 866F                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 866F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 866F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 866F             >
 954+ 866F             >                // dummy db directives used to calculate length of namec
 954+ 866F 57 48 49 4C >                db      "WHILE"
 954+ 8673 45          >
 954+ 8674             >len_NFA         defl    $ - temp_NFA
 954+ 8674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 866F             >
 954+ 866F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8670 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8674 45          >
 954+ 8675             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8674 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 8675             >
 954+ 8675 63 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 8677             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 8677 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 8679             >                else
 954+ 8679 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 954+ 8679             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 8679             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 8679             >
 954+ 8679             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 8679 C5 85                        dw      IF
 956+ 867B              //              dw      TWO_PLUS // ( that is 4 )
 957+ 867B 5B 6B                        dw      TWO_SWAP
 958+ 867D AB 69                        dw      EXIT
 959+ 867F
 960+ 867F              //  ______________________________________________________________________
 961+ 867F              //
 962+ 867F              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 867F                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 867F             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 867F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 867F             >
 963+ 867F             >                // dummy db directives used to calculate length of namec
 963+ 867F 52 45 50 45 >                db      "REPEAT"
 963+ 8683 41 54       >
 963+ 8685             >len_NFA         defl    $ - temp_NFA
 963+ 8685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 867F             >
 963+ 867F C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 8680 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 8684 41 54       >
 963+ 8686             >                org     $-1                 // alter last byte of Name just above to set
 963+ 8685 D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 8686             >
 963+ 8686 6F 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 8688             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 8688 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 868A             >                else
 963+ 868A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 963+ 868A             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 868A             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 868A             >
 963+ 868A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 868A 3B 86                        dw      AGAIN
 965+ 868C              //              dw      TWO_MINUS
 966+ 868C DC 85                        dw      THEN
 967+ 868E AB 69                        dw      EXIT
 968+ 8690
 969+ 8690              //  ______________________________________________________________________
 970+ 8690              //
 971+ 8690              // ?do-
 972+ 8690              // special version of "BACK" used by ?DO and LOOP
 973+ 8690                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 8690             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 8690             >
 973+ 8690             >                // dummy db directives used to calculate length of namec
 973+ 8690 3F 44 4F 2D >                db      "?DO-"
 973+ 8694             >len_NFA         defl    $ - temp_NFA
 973+ 8694             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 8690             >
 973+ 8690 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 8691 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 8695             >                org     $-1                 // alter last byte of Name just above to set
 973+ 8694 AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 8695             >
 973+ 8695 7F 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 8697             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 8697 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 8699             >                else
 973+ 8699 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 8699             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 8699             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 8699             >
 973+ 8699             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 8699 B6 85                        dw      BACK
 975+ 869B              CDoBack_Begin:
 976+ 869B 73 69 6C 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 869F 9F 6B 29 6F
 977+ 86A3 2C 64                        dw      ZBRANCH
 978+ 86A5 0A 00                        dw      CDoBack_While - $
 979+ 86A7 65 6A DC 85                  dw          TWO_PLUS, THEN
 980+ 86AB 15 64                        dw      BRANCH
 981+ 86AD EE FF                        dw      CDoBack_Begin - $
 982+ 86AF              CDoBack_While:
 983+ 86AF F3 70 6C 6E                  dw      QCSP, CSP, STORE
 983+ 86B3 AC 6B
 984+ 86B5 AB 69                        dw      EXIT
 985+ 86B7
 986+ 86B7              //  ______________________________________________________________________
 987+ 86B7              //
 988+ 86B7              // do
 989+ 86B7              // DO  ... LOOP
 990+ 86B7              // DO  ... n +LOOP
 991+ 86B7              // ?DO ... LOOP
 992+ 86B7              // ?DO ... n +LOOP
 993+ 86B7                              Colon_Def DO, "DO", is_immediate
 993+ 86B7             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86B7             >
 993+ 86B7             >                // dummy db directives used to calculate length of namec
 993+ 86B7 44 4F       >                db      "DO"
 993+ 86B9             >len_NFA         defl    $ - temp_NFA
 993+ 86B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86B7             >
 993+ 86B7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86B8 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86BA             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86B9 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86BA             >
 993+ 86BA 90 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86BC             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86BC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86BE             >                else
 993+ 86BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 86BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86BE             >
 993+ 86BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86BE 2A 71 86 64                  dw      COMPILE, C_DO
 995+ 86C2 6C 6E 9F 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86C6 84 70
 996+ 86C8 DB 6E 14 6D                  dw      HERE, THREE
 997+ 86CC AB 69                        dw      EXIT
 998+ 86CE
 999+ 86CE              //  ______________________________________________________________________
1000+ 86CE              //
1001+ 86CE              // loop
1002+ 86CE                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86CE             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86CE             >
1002+ 86CE             >                // dummy db directives used to calculate length of namec
1002+ 86CE 4C 4F 4F 50 >                db      "LOOP"
1002+ 86D2             >len_NFA         defl    $ - temp_NFA
1002+ 86D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86CE             >
1002+ 86CE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86CF 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86D3             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86D2 D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86D3             >
1002+ 86D3 B7 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86D5             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86D5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86D7             >                else
1002+ 86D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 86D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86D7             >
1002+ 86D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86D7 14 6D E0 70                  dw      THREE, QPAIRS
1004+ 86DB 2A 71 04 64                  dw      COMPILE, C_LOOP
1005+ 86DF 97 86                        dw      C_DO_BACK
1006+ 86E1 AB 69                        dw      EXIT
1007+ 86E3
1008+ 86E3              //  ______________________________________________________________________
1009+ 86E3              //
1010+ 86E3              // +loop
1011+ 86E3                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86E3             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86E3             >
1011+ 86E3             >                // dummy db directives used to calculate length of namec
1011+ 86E3 2B 4C 4F 4F >                db      "+LOOP"
1011+ 86E7 50          >
1011+ 86E8             >len_NFA         defl    $ - temp_NFA
1011+ 86E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86E3             >
1011+ 86E3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86E4 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 86E8 50          >
1011+ 86E9             >                org     $-1                 // alter last byte of Name just above to set
1011+ 86E8 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 86E9             >
1011+ 86E9 CE 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 86EB             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 86EB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 86ED             >                else
1011+ 86ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1011+ 86ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 86ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 86ED             >
1011+ 86ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 86ED 14 6D E0 70                  dw      THREE, QPAIRS
1013+ 86F1 2A 71 CD 63                  dw      COMPILE, C_PLOOP
1014+ 86F5 97 86                        dw      C_DO_BACK
1015+ 86F7 AB 69                        dw      EXIT
1016+ 86F9
1017+ 86F9              //  ______________________________________________________________________
1018+ 86F9              //
1019+ 86F9              // ?do
1020+ 86F9                              Colon_Def QDO, "?DO", is_immediate
1020+ 86F9             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 86F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 86F9             >
1020+ 86F9             >                // dummy db directives used to calculate length of namec
1020+ 86F9 3F 44 4F    >                db      "?DO"
1020+ 86FC             >len_NFA         defl    $ - temp_NFA
1020+ 86FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 86F9             >
1020+ 86F9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 86FA 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 86FD             >                org     $-1                 // alter last byte of Name just above to set
1020+ 86FC CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 86FD             >
1020+ 86FD E3 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 86FF             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 86FF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 8701             >                else
1020+ 8701 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 8701             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 8701             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 8701             >
1020+ 8701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 8701 2A 71 59 64                  dw      COMPILE, C_Q_DO
1022+ 8705 6C 6E 9F 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 8709 84 70
1023+ 870B DB 6E FC 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 870F F7 6E FC 6C
1024+ 8713 DB 6E 14 6D                  dw      HERE, THREE
1025+ 8717 AB 69                        dw      EXIT
1026+ 8719
1027+ 8719              Latest_Definition:
1028+ 8719              //  ______________________________________________________________________
1029+ 8719              //
1030+ 8719              // \
1031+ 8719                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8719             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8719             >
1031+ 8719             >                // dummy db directives used to calculate length of namec
1031+ 8719 5C          >                db      "\\"
1031+ 871A             >len_NFA         defl    $ - temp_NFA
1031+ 871A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8719             >
1031+ 8719 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 871A 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 871B             >                org     $-1                 // alter last byte of Name just above to set
1031+ 871A DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 871B             >
1031+ 871B F9 86       >                dw      last_NFA            // Link to previous definition Name
1031+ 871D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 871D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 871F             >                else
1031+ 871F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1031+ 871F             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 871F             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 871F             >
1031+ 871F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 871F FB 6D 9F 6B                  dw      BLK, FETCH
1033+ 8723 2C 64                        dw      ZBRANCH
1034+ 8725 30 00                        dw      Backslash_Else_1 - $
1035+ 8727 FB 6D 9F 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 872B 04 6D 6B 6F
1036+ 872F 2C 64                        dw          ZBRANCH
1037+ 8731 18 00                        dw          Backslash_Else_2 - $
1038+ 8733 04 6E 9F 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8737 30 6D 7F 7A
1038+ 873B 30 6D
1039+ 873D FF 6A 29 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 8741 04 6E 7C 6B
1040+ 8745 15 64                        dw          BRANCH
1041+ 8747 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8749              Backslash_Else_2:
1043+ 8749 3C 6D 7F 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 874D 04 6E AC 6B
1044+ 8751              Backslash_Endif_2:
1045+ 8751 15 64                        dw      BRANCH
1046+ 8753 10 00                        dw      Backslash_Endif_1 - $
1047+ 8755              Backslash_Else_1:
1048+ 8755 FC 6C 8F 6D                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1048+ 8759 9F 6B 04 6E
1048+ 875D 9F 6B 2C 6A
1048+ 8761 AC 6B
1049+ 8763              Backslash_Endif_1:
1050+ 8763 AB 69                        dw      EXIT
1051+ 8765
1052+ 8765              Fence_Word:
1053+ 8765              //  ______________________________________________________________________
1054+ 8765              //
1055+ 8765
1056+ 8765 00           Here_Dictionary db      0
1057+ 8766
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8766
 115  8766              // now we save the compiled file so we can either run it or debug it
 116  8766                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8766                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8766                              SAVENEX CFG  0
 119  8766                              SAVENEX BANK 2, 0
 120  8766                              SAVENEX AUTO
 121  8766                              SAVENEX CLOSE
 122  8766
 123  8766              //              PAGE 7 ;set 7 page to current slot
 124  8766              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8766              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8766
 127  8766                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8766
 129  8766                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8766
 131  8766                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
