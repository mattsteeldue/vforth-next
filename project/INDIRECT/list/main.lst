# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220730
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 49 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 49 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 2A 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 70 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 70 87        DP_origin       dw      Fence_Word
  39+ 6386 57 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- addr 0 | cfa b 1
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 01 00                             ld      hl, 1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // curs         -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def CUR, "CURS", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 43 55 52 53 >                db      "CURS"
 778+ 66B6             >len_NFA         defl    $ - temp_NFA
 778+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 778+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B6 D3          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B7             >
 778+ 66B7 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B9             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B9             >                else
 778+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BB             >
 778+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BB
 780+ 66BB C5                           push    bc                  // save Instruction Pointer
 781+ 66BC DD E5                        push    ix
 782+ 66BE
 783+ 66BE ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C2 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C5 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C9
 787+ 66C9              Cur_Wait:
 788+ 66C9 76                               halt
 789+ 66CA 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CC CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CF
 792+ 66CF                                  // software-flash: flips face every 320 ms
 793+ 66CF 3E 10                            ld      a, $10              // Timing based
 794+ 66D1 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D4
 796+ 66D4 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D7 20 0C                            jr      nz, Cur_Cursor
 798+ 66D9 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DC FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66E0 28 03                                jr      z, Cur_Cursor
 801+ 66E2 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E5              Cur_Cursor:
 803+ 66E5 D7                               rst     $10
 804+ 66E6 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E8 D7                               rst     $10
 806+ 66E9
 807+ 66E9 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66ED 28 DA                        jr      z, Cur_Wait
 809+ 66EF
 810+ 66EF 76                           halt    // this is to sync flashing cursor.
 811+ 66F0
 812+ 66F0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F2 D7                           rst     $10
 814+ 66F3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F5 D7                           rst     $10
 816+ 66F6
 817+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 818+ 66FA
 819+ 66FA DD E1                        pop     ix
 820+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 821+ 66FD
 822+ 66FD                              next
 822+ 66FD DD E9       >                jp      (ix)
 823+ 66FF
 824+ 66FF
 825+ 66FF              //  ______________________________________________________________________
 826+ 66FF              //
 827+ 66FF              // key          -- c
 828+ 66FF              // This definition need Standard ROM Interrupt to be served
 829+ 66FF
 830+ 66FF                              New_Def KEY, "KEY", is_code, is_normal
 830+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ 66FF             >
 830+ 66FF             >                // dummy db directives used to calculate length of namec
 830+ 66FF 4B 45 59    >                db      "KEY"
 830+ 6702             >len_NFA         defl    $ - temp_NFA
 830+ 6702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ 66FF             >
 830+ 66FF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ 6700 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 830+ 6703             >                org     $-1                 // alter last byte of Name just above to set
 830+ 6702 D9          >                db      {b $} | END_BIT     // msb as name end
 830+ 6703             >
 830+ 6703 B2 66       >                dw      last_NFA            // Link to previous definition Name
 830+ 6705             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 6705 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 830+ 6705             >                else
 830+ 6705 07 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 830+ 6707             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 6707             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 6707             >
 830+ 6707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 6707
 832+ 6707 C5                           push    bc
 833+ 6708
 834+ 6708              Key_Wait:
 835+ 6708 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 836+ 670C 28 FA                        jr      z, Key_Wait
 837+ 670E
 838+ 670E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 839+ 6711
 840+ 6711                              // decode character from above table
 841+ 6711 21 9C 66                     ld      hl, Key_Table
 842+ 6714 01 0B 00                     ld      bc, $000B
 843+ 6717 ED B1                        cpir
 844+ 6719 20 05                        jr      nz, Key_DontMap
 845+ 671B 21 A7 66                         ld      hl, Key_MapTo
 846+ 671E 09                               add     hl, bc
 847+ 671F 7E                               ld      a, (hl)
 848+ 6720 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 849+ 6722 20 09                        jr      nz, Key_NoCapsLock
 850+ 6724 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 851+ 6727 7E                               ld      a, (hl)
 852+ 6728 EE 08                            xor     $08
 853+ 672A 77                               ld      (hl), a
 854+ 672B 3E 00                            ld      a, NUL_CHAR
 855+ 672D 6F           Key_NoCapsLock: ld      l, a
 856+ 672E 26 00                        ld      h, 0                // Prepare TOS
 857+ 6730
 858+ 6730 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 859+ 6734
 860+ 6734 C1                           pop     bc                  // Restore Instruction Pointer
 861+ 6735
 862+ 6735                              psh1
 862+ 6735 E5          >                push    hl
 862+ 6736 DD E9       >                jp      (ix)
 863+ 6738
 864+ 6738
 865+ 6738              //  ______________________________________________________________________
 866+ 6738              //
 867+ 6738              // click        --
 868+ 6738              // This definition need Standard ROM Interrupt to be served
 869+ 6738              //
 870+ 6738              //              New_Def CLICK, "CLICK", is_code, is_normal
 871+ 6738              //
 872+ 6738              //                push    bc
 873+ 6738              //              ld      a, ($5C48)          // BORDCR system variable
 874+ 6738              //              rra
 875+ 6738              //              rra
 876+ 6738              //              rra
 877+ 6738              //              or      $18                 // quick'n'dirty click
 878+ 6738              //              out     ($fe), a
 879+ 6738              //              ld      b, 0
 880+ 6738              //              djnz    $                   // wait loop
 881+ 6738              //              xor     $18
 882+ 6738              //              out     ($fe), a
 883+ 6738              //                pop     bc
 884+ 6738
 885+ 6738              //              next
 886+ 6738
 887+ 6738              //  ______________________________________________________________________
 888+ 6738              //
 889+ 6738              // key?         -- f
 890+ 6738              // key available
 891+ 6738              //
 892+ 6738              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 893+ 6738              //
 894+ 6738              //              ld      hl, 0000
 895+ 6738              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 896+ 6738              //              jr      z, Key_Q
 897+ 6738              //                  dec     hl
 898+ 6738              // Key_Q:
 899+ 6738              //                psh1
 900+ 6738              //              next
 901+ 6738
 902+ 6738              //  ______________________________________________________________________
 903+ 6738              //
 904+ 6738              // ?terminal    -- FALSE | TRUE
 905+ 6738              // test for BREAK keypress
 906+ 6738                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 906+ 6738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 6738             >
 906+ 6738             >                // dummy db directives used to calculate length of namec
 906+ 6738 3F 54 45 52 >                db      "?TERMINAL"
 906+ 673C 4D 49 4E 41 >
 906+ 6740 4C          >
 906+ 6741             >len_NFA         defl    $ - temp_NFA
 906+ 6741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 6738             >
 906+ 6738 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 6739 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 906+ 673D 4D 49 4E 41 >
 906+ 6741 4C          >
 906+ 6742             >                org     $-1                 // alter last byte of Name just above to set
 906+ 6741 CC          >                db      {b $} | END_BIT     // msb as name end
 906+ 6742             >
 906+ 6742 FF 66       >                dw      last_NFA            // Link to previous definition Name
 906+ 6744             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 6744 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 906+ 6744             >                else
 906+ 6744 46 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 6746             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 6746             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 6746             >
 906+ 6746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 6746 D9                           exx
 908+ 6747 01 FE 7F                     ld      bc, $7ffe
 909+ 674A ED 50                        in      d, (c)
 910+ 674C 41                           ld      b, c
 911+ 674D ED 78                        in      a, (c)
 912+ 674F B2                           or       d
 913+ 6750 1F                           rra
 914+ 6751 3F                           ccf
 915+ 6752 ED 62                        sbc     hl, hl
 916+ 6754 E5                           push    hl
 917+ 6755 D9                           exx
 918+ 6756                              next
 918+ 6756 DD E9       >                jp      (ix)
 919+ 6758
 920+ 6758
 921+ 6758              //  ______________________________________________________________________
 922+ 6758              //
 923+ 6758              // inkey        -- c | 0
 924+ 6758              // call ROM inkey$ routine, returns c or "zero".
 925+ 6758
 926+ 6758                              New_Def INKEY, "INKEY", is_code, is_normal
 926+ 6758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 6758             >
 926+ 6758             >                // dummy db directives used to calculate length of namec
 926+ 6758 49 4E 4B 45 >                db      "INKEY"
 926+ 675C 59          >
 926+ 675D             >len_NFA         defl    $ - temp_NFA
 926+ 675D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 6758             >
 926+ 6758 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 6759 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 926+ 675D 59          >
 926+ 675E             >                org     $-1                 // alter last byte of Name just above to set
 926+ 675D D9          >                db      {b $} | END_BIT     // msb as name end
 926+ 675E             >
 926+ 675E 38 67       >                dw      last_NFA            // Link to previous definition Name
 926+ 6760             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 6760 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 926+ 6760             >                else
 926+ 6760 62 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 6762             >
 926+ 6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 6762
 928+ 6762 C5                           push    bc
 929+ 6763 ED 73 92 63                  ld      (SP_Saved), sp
 930+ 6767 31 61 63                     ld      sp, Cold_origin - 5
 931+ 676A DD E5                        push    ix
 932+ 676C CD E6 15                     call    $15E6                   // instead of 15E9
 933+ 676F DD E1                        pop     ix
 934+ 6771 ED 7B 92 63                  ld      sp, (SP_Saved)
 935+ 6775 6F                           ld      l, a
 936+ 6776 26 00                        ld      h, 0
 937+ 6778 C1                           pop     bc
 938+ 6779                              psh1
 938+ 6779 E5          >                push    hl
 938+ 677A DD E9       >                jp      (ix)
 939+ 677C
 940+ 677C              //  ______________________________________________________________________
 941+ 677C              //
 942+ 677C              // select      n --
 943+ 677C              // selects the given channel number
 944+ 677C
 945+ 677C                              New_Def SELECT, "SELECT", is_code, is_normal
 945+ 677C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 677C             >
 945+ 677C             >                // dummy db directives used to calculate length of namec
 945+ 677C 53 45 4C 45 >                db      "SELECT"
 945+ 6780 43 54       >
 945+ 6782             >len_NFA         defl    $ - temp_NFA
 945+ 6782             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 677C             >
 945+ 677C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 677D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 945+ 6781 43 54       >
 945+ 6783             >                org     $-1                 // alter last byte of Name just above to set
 945+ 6782 D4          >                db      {b $} | END_BIT     // msb as name end
 945+ 6783             >
 945+ 6783 58 67       >                dw      last_NFA            // Link to previous definition Name
 945+ 6785             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 6785 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 945+ 6785             >                else
 945+ 6785 87 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 6787             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 6787             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 6787             >
 945+ 6787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 6787 E1                           pop     hl
 947+ 6788 C5                           push    bc
 948+ 6789 7D                           ld      a, l
 949+ 678A ED 73 92 63                  ld      (SP_Saved), sp
 950+ 678E 31 61 63                     ld      sp, Cold_origin - 5
 951+ 6791 DD E5                        push    ix
 952+ 6793 CD 01 16                     call    $1601
 953+ 6796 DD E1                        pop     ix
 954+ 6798 ED 7B 92 63                  ld      sp, (SP_Saved)
 955+ 679C C1                           pop     bc
 956+ 679D
 957+ 679D                              next
 957+ 679D DD E9       >                jp      (ix)
 958+ 679F
 959+ 679F              //  ______________________________________________________________________
 960+ 679F              //
 961+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 962+ 679F              // this include is "here" for backward compatibility
 963+ 679F
 964+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9              F_Seek_Exit:
  26++67B9 C1                           pop     bc                  // restore Instruction Pointer
  27++67BA DD E1                        pop     ix
  28++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67BE
  30++67BE                              psh1
  30++67BE E5          >                push    hl
  30++67BF DD E9       >                jp      (ix)
  31++67C1
  32++67C1              //  ______________________________________________________________________
  33++67C1              //
  34++67C1              // f_close      u -- f
  35++67C1              // Close file-handle u.
  36++67C1              // Return 0 on success, True flag on error
  37++67C1
  38++67C1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C1             >
  38++67C1             >                // dummy db directives used to calculate length of namec
  38++67C1 46 5F 43 4C >                db      "F_CLOSE"
  38++67C5 4F 53 45    >
  38++67C8             >len_NFA         defl    $ - temp_NFA
  38++67C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C1             >
  38++67C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C6 4F 53 45    >
  38++67C9             >                org     $-1                 // alter last byte of Name just above to set
  38++67C8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C9             >
  38++67C9 9F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CB             >                else
  38++67CB CD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67CD             >
  38++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67CD
  40++67CD E1                           pop     hl
  41++67CE 7D                           ld      a, l                // file-handle
  42++67CF DD E5                        push    ix
  43++67D1 C5                           push    bc                  // Save Instruction pointer
  44++67D2 CF                           rst     $08
  45++67D3 9B                           db      $9B
  46++67D4 18 E3                        jr      F_Seek_Exit
  47++67D6              //              pop     bc
  48++67D6              //              pop     ix
  49++67D6              //              sbc     hl, hl
  50++67D6              //              psh1
  51++67D6
  52++67D6              //  ______________________________________________________________________
  53++67D6              //
  54++67D6              // f_sync      u -- f
  55++67D6              // Close file-handle u.
  56++67D6              // Return 0 on success, True flag on error
  57++67D6
  58++67D6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D6             >
  58++67D6             >                // dummy db directives used to calculate length of namec
  58++67D6 46 5F 53 59 >                db      "F_SYNC"
  58++67DA 4E 43       >
  58++67DC             >len_NFA         defl    $ - temp_NFA
  58++67DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D6             >
  58++67D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DB 4E 43       >
  58++67DD             >                org     $-1                 // alter last byte of Name just above to set
  58++67DC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67DD             >
  58++67DD C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DF             >                else
  58++67DF E1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E1             >
  58++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E1 E1                           pop     hl
  60++67E2 7D                           ld      a, l                // file-handle
  61++67E3 DD E5                        push    ix
  62++67E5 C5                           push    bc
  63++67E6 CF                           rst     $08
  64++67E7 9C                           db      $9C
  65++67E8 18 CF                        jr      F_Seek_Exit
  66++67EA              //              pop     bc
  67++67EA              //              pop     ix
  68++67EA              //              sbc     hl, hl
  69++67EA              //              psh1
  70++67EA
  71++67EA              //  ______________________________________________________________________
  72++67EA              //
  73++67EA              // f_fgetpos    u -- d f
  74++67EA              // Seek to position d in file-handle u.
  75++67EA              // Return a false-flag 0 on success, True flag on error
  76++67EA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67EA             >
  76++67EA             >                // dummy db directives used to calculate length of namec
  76++67EA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67EE 45 54 50 4F >
  76++67F2 53          >
  76++67F3             >len_NFA         defl    $ - temp_NFA
  76++67F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67EA             >
  76++67EA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EF 45 54 50 4F >
  76++67F3 53          >
  76++67F4             >                org     $-1                 // alter last byte of Name just above to set
  76++67F3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F4             >
  76++67F4 D6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F6             >                else
  76++67F6 F8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F8             >
  76++67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F8 E1                           pop     hl
  78++67F9 7D                           ld      a, l                // file-handle
  79++67FA DD E5                        push    ix
  80++67FC C5                           push    bc
  81++67FD CF                           rst     $08
  82++67FE A0                           db      $A0
  83++67FF E1                           pop     hl                  // restore Instruction Pointer
  84++6800 DD E1                        pop     ix
  85++6802 D5                           push    de
  86++6803 C5                           push    bc
  87++6804 44                           ld      b, h                // restore Instruction Pointer
  88++6805 4D                           ld      c, l
  89++6806 ED 62                        sbc     hl, hl
  90++6808
  91++6808                              psh1
  91++6808 E5          >                push    hl
  91++6809 DD E9       >                jp      (ix)
  92++680B
  93++680B              //  ______________________________________________________________________
  94++680B              //
  95++680B              // f_read       a b u -- n f
  96++680B              // Read b bytes from file-handle u to address a
  97++680B              // Return the actual number n of bytes read
  98++680B              // Return 0 on success, True flag on error
  99++680B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680B             >
  99++680B             >                // dummy db directives used to calculate length of namec
  99++680B 46 5F 52 45 >                db      "F_READ"
  99++680F 41 44       >
  99++6811             >len_NFA         defl    $ - temp_NFA
  99++6811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680B             >
  99++680B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6810 41 44       >
  99++6812             >                org     $-1                 // alter last byte of Name just above to set
  99++6811 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6812             >
  99++6812 EA 67       >                dw      last_NFA            // Link to previous definition Name
  99++6814             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6814 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6814             >                else
  99++6814 16 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6816             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6816             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6816             >
  99++6816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6816
 101++6816 50                           ld      d, b
 102++6817 59                           ld      e, c
 103++6818 E1                           pop     hl
 104++6819 7D                           ld      a, l                // file-handle
 105++681A C1                           pop     bc                  // bc has bytes to read
 106++681B DD E3                        ex      (sp), ix            // ix has address
 107++681D D5                           push    de                  // Save Instruction pointer
 108++681E CF                           rst     $08
 109++681F 9D                           db      $9D
 110++6820              F_Read_Exit:
 111++6820 C1                           pop     bc                  // Restore Instruction pointer
 112++6821 DD E1                        pop     ix                  // Restore ix
 113++6823 D5                           push    de                  // bytes written
 114++6824 ED 62                        sbc     hl, hl
 115++6826
 116++6826                              psh1
 116++6826 E5          >                push    hl
 116++6827 DD E9       >                jp      (ix)
 117++6829
 118++6829              //  ______________________________________________________________________
 119++6829              //
 120++6829              // f_write      a b u -- n f
 121++6829              // Write bytes currently stored at address a to file-handle u.
 122++6829              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6829                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6829             >
 123++6829             >                // dummy db directives used to calculate length of namec
 123++6829 46 5F 57 52 >                db      "F_WRITE"
 123++682D 49 54 45    >
 123++6830             >len_NFA         defl    $ - temp_NFA
 123++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6829             >
 123++6829 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++682E 49 54 45    >
 123++6831             >                org     $-1                 // alter last byte of Name just above to set
 123++6830 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6831             >
 123++6831 0B 68       >                dw      last_NFA            // Link to previous definition Name
 123++6833             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6833             >                else
 123++6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6835             >
 123++6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6835
 125++6835 50                           ld      d, b
 126++6836 59                           ld      e, c
 127++6837 E1                           pop     hl
 128++6838 7D                           ld      a, l                // file-handle
 129++6839 C1                           pop     bc                  // bc has bytes to read
 130++683A DD E3                        ex      (sp), ix            // ix has address
 131++683C D5                           push    de                  // Save Instruction pointer
 132++683D CF                           rst     $08
 133++683E 9E                           db      $9E
 134++683F 18 DF                        jr F_Read_Exit
 135++6841              //              pop     bc                  // Restore Instruction pointer
 136++6841              //              pop     ix                  // Restore ix
 137++6841              //              push    de                  // bytes written
 138++6841              //              sbc     hl, hl
 139++6841              //
 140++6841              //              psh1
 141++6841
 142++6841              //  ______________________________________________________________________
 143++6841              //
 144++6841              // f_open       a1 a2 b -- u f
 145++6841              // open a file
 146++6841              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6841              // a2 is address to an 8-byte header data used in some cases.
 148++6841              // b is access mode-byte, that is a combination of:
 149++6841              // any/all of:
 150++6841              //   esx_mode_read          $01 request read access
 151++6841              //   esx_mode_write         $02 request write access
 152++6841              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6841              // plus one of:
 154++6841              //   esx_mode_open_exist    $00 only open existing file
 155++6841              //   esx_mode_open_creat    $08 open existing or create file
 156++6841              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6841              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6841              // Return file-handle u and 0 on success, True flag on error
 159++6841                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6841             >
 159++6841             >                // dummy db directives used to calculate length of namec
 159++6841 46 5F 4F 50 >                db      "F_OPEN"
 159++6845 45 4E       >
 159++6847             >len_NFA         defl    $ - temp_NFA
 159++6847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6841             >
 159++6841 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6842 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6846 45 4E       >
 159++6848             >                org     $-1                 // alter last byte of Name just above to set
 159++6847 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6848             >
 159++6848 29 68       >                dw      last_NFA            // Link to previous definition Name
 159++684A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684A             >                else
 159++684A 4C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684C             >
 159++684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684C 60                           ld      h, b                // Save Instruction pointer
 161++684D 69                           ld      l, c
 162++684E C1                           pop     bc                  // file-mode
 163++684F 41                           ld      b, c                // file-mode
 164++6850 D1                           pop     de                  // 8-bytes buffer if any
 165++6851 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6853 E5                           push    hl                  // Save Instruction pointer
 167++6854 3E 2A                        ld      a, "*"
 168++6856 CF                           rst     $08
 169++6857 9A                           db      $9A
 170++6858              F_Open_Exit:
 171++6858 5F                           ld      e, a
 172++6859 16 00                        ld      d, 0
 173++685B 18 C3                        jr      F_Read_Exit
 174++685D
 175++685D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++685D              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++685D              //   \ DROP
 178++685D              //   \ F_CLOSE
 179++685D
 180++685D
 181++685D              //  ______________________________________________________________________
 182++685D              //
 183++685D              // f_opendir    a1 a2 b -- u f
 184++685D              // open a file
 185++685D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++685D             >
 185++685D             >                // dummy db directives used to calculate length of namec
 185++685D 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6861 45 4E 44 49 >
 185++6865 52          >
 185++6866             >len_NFA         defl    $ - temp_NFA
 185++6866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++685D             >
 185++685D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++685E 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6862 45 4E 44 49 >
 185++6866 52          >
 185++6867             >                org     $-1                 // alter last byte of Name just above to set
 185++6866 D2          >                db      {b $} | END_BIT     // msb as name end
 185++6867             >
 185++6867 41 68       >                dw      last_NFA            // Link to previous definition Name
 185++6869             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++6869 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 185++6869             >                else
 185++6869 6B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 185++686B             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++686B             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++686B             >
 185++686B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++686B DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++686D C5                           push    bc                  // Save Instruction pointer
 188++686E 06 10                        ld      b, $10              // file-mode
 189++6870 3E 43                        ld      a, "C"
 190++6872 CF                           rst     $08
 191++6873 A3                           db      $A3
 192++6874 18 E2                        jr      F_Open_Exit
 193++6876
 194++6876
 195++6876              //  ______________________________________________________________________
 196++6876              //
 197++6876              // f_readdir    a1 a2 b -- u f
 198++6876              // open a file
 199++6876                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++6876             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++6876             >
 199++6876             >                // dummy db directives used to calculate length of namec
 199++6876 46 5F 52 45 >                db      "F_READDIR"
 199++687A 41 44 44 49 >
 199++687E 52          >
 199++687F             >len_NFA         defl    $ - temp_NFA
 199++687F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++6876             >
 199++6876 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++6877 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++687B 41 44 44 49 >
 199++687F 52          >
 199++6880             >                org     $-1                 // alter last byte of Name just above to set
 199++687F D2          >                db      {b $} | END_BIT     // msb as name end
 199++6880             >
 199++6880 5D 68       >                dw      last_NFA            // Link to previous definition Name
 199++6882             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6882 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 199++6882             >                else
 199++6882 84 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 199++6884             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6884             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6884             >
 199++6884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6884 E1                           pop     hl
 201++6885 7D                           ld      a, l
 202++6886 D1                           pop     de
 203++6887 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++6889 C5                           push    bc                  // Save Instruction pointer
 205++688A CF                           rst     $08
 206++688B A4                           db      $A4
 207++688C 18 CA                        jr      F_Open_Exit
 208++688E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 965+ 688E
 966+ 688E
 967+ 688E              //  ______________________________________________________________________
 968+ 688E              //
 969+ 688E              // cmove    a1 a2 u --
 970+ 688E              // If u > 0, moves memory content starting at address a1 for n bytes long
 971+ 688E              // storing then starting at address addr2.
 972+ 688E              // The content of a1 is moved first. See CMOVE> also.
 973+ 688E                              New_Def CMOVE, "CMOVE", is_code, is_normal
 973+ 688E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 688E             >
 973+ 688E             >                // dummy db directives used to calculate length of namec
 973+ 688E 43 4D 4F 56 >                db      "CMOVE"
 973+ 6892 45          >
 973+ 6893             >len_NFA         defl    $ - temp_NFA
 973+ 6893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 688E             >
 973+ 688E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 688F 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 973+ 6893 45          >
 973+ 6894             >                org     $-1                 // alter last byte of Name just above to set
 973+ 6893 C5          >                db      {b $} | END_BIT     // msb as name end
 973+ 6894             >
 973+ 6894 76 68       >                dw      last_NFA            // Link to previous definition Name
 973+ 6896             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 6896 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 973+ 6896             >                else
 973+ 6896 98 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 6898             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 6898             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 6898             >
 973+ 6898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 6898 D9                           exx
 975+ 6899 C1                           pop     bc                  // bc has counter
 976+ 689A D1                           pop     de                  // de now has dest
 977+ 689B E1                           pop     hl                  // hl has source, save Instruction Pointer
 978+ 689C 78                           ld      a, b
 979+ 689D B1                           or      c
 980+ 689E 28 02                        jr      z, Cmove_NoMove
 981+ 68A0 ED B0                            ldir
 982+ 68A2              Cmove_NoMove:
 983+ 68A2 D9                           exx
 984+ 68A3                              next
 984+ 68A3 DD E9       >                jp      (ix)
 985+ 68A5
 986+ 68A5              //  ______________________________________________________________________
 987+ 68A5              //
 988+ 68A5              // cmove>    a1 a2 u --
 989+ 68A5              // If u > 0, moves memory content starting at address a1 for n bytes long
 990+ 68A5              // storing then starting at address addr2.
 991+ 68A5              // The content of a1 is moved last. See cmove.
 992+ 68A5                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 992+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 992+ 68A5             >
 992+ 68A5             >                // dummy db directives used to calculate length of namec
 992+ 68A5 43 4D 4F 56 >                db      "CMOVE>"
 992+ 68A9 45 3E       >
 992+ 68AB             >len_NFA         defl    $ - temp_NFA
 992+ 68AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 992+ 68A5             >
 992+ 68A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 992+ 68A6 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 992+ 68AA 45 3E       >
 992+ 68AC             >                org     $-1                 // alter last byte of Name just above to set
 992+ 68AB BE          >                db      {b $} | END_BIT     // msb as name end
 992+ 68AC             >
 992+ 68AC 8E 68       >                dw      last_NFA            // Link to previous definition Name
 992+ 68AE             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 992+ 68AE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 992+ 68AE             >                else
 992+ 68AE B0 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 992+ 68B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 992+ 68B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 992+ 68B0             >
 992+ 68B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 993+ 68B0 D9                           exx
 994+ 68B1 C1                           pop     bc                  // bc has counter
 995+ 68B2 D1                           pop     de                  // de has dest
 996+ 68B3 E1                           pop     hl                  // hl has source, save Instruction Pointer
 997+ 68B4 78                           ld      a, b
 998+ 68B5 B1                           or      c
 999+ 68B6 28 08                        jr      z, CmoveV_NoMove
1000+ 68B8 EB                               ex      de, hl              // compute address to
1001+ 68B9 09                               add     hl, bc              // operate backward
1002+ 68BA 2B                               dec     hl
1003+ 68BB EB                               ex      de, hl
1004+ 68BC 09                               add     hl, bc
1005+ 68BD 2B                               dec     hl
1006+ 68BE ED B8                            lddr                        // backward
1007+ 68C0              CmoveV_NoMove:
1008+ 68C0 D9                           exx
1009+ 68C1                              next
1009+ 68C1 DD E9       >                jp      (ix)
1010+ 68C3
1011+ 68C3              //  ______________________________________________________________________
1012+ 68C3              //
1013+ 68C3              // um*      u1 u2 -- ud
1014+ 68C3              // Unsigned multiplication
1015+ 68C3              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1016+ 68C3              // On the stack a double number is treated as two single numbers
1017+ 68C3              // where DE is on the top of the stack and HL is the second from top,
1018+ 68C3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1019+ 68C3              // this definition could use "MUL" Z80N new op-code.
1020+ 68C3                              New_Def UM_MUL, "UM*", is_code, is_normal
1020+ 68C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 68C3             >
1020+ 68C3             >                // dummy db directives used to calculate length of namec
1020+ 68C3 55 4D 2A    >                db      "UM*"
1020+ 68C6             >len_NFA         defl    $ - temp_NFA
1020+ 68C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 68C3             >
1020+ 68C3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 68C4 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1020+ 68C7             >                org     $-1                 // alter last byte of Name just above to set
1020+ 68C6 AA          >                db      {b $} | END_BIT     // msb as name end
1020+ 68C7             >
1020+ 68C7 A5 68       >                dw      last_NFA            // Link to previous definition Name
1020+ 68C9             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 68C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1020+ 68C9             >                else
1020+ 68C9 CB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 68CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 68CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 68CB             >
1020+ 68CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 68CB D9                           exx
1022+ 68CC D1                           pop     de                    // de has u2 operand
1023+ 68CD E1                           pop     hl                    // hl has u1 operand
1024+ 68CE 45                           ld      b, l
1025+ 68CF 4B                           ld      c, e
1026+ 68D0 5D                           ld      e, l
1027+ 68D1 6A                           ld      l, d
1028+ 68D2 E5                           push    hl
1029+ 68D3 69                           ld      l, c
1030+ 68D4 ED 30                        mul
1031+ 68D6 EB                           ex      de, hl
1032+ 68D7 ED 30                        mul
1033+ 68D9 AF                           xor     a
1034+ 68DA 19                           add     hl, de
1035+ 68DB 8F                           adc     a
1036+ 68DC 59                           ld      e, c
1037+ 68DD 50                           ld      d, b
1038+ 68DE ED 30                        mul
1039+ 68E0 47                           ld      b, a
1040+ 68E1 4C                           ld      c, h
1041+ 68E2 7A                           ld      a, d
1042+ 68E3 85                           add     l
1043+ 68E4 67                           ld      h, a
1044+ 68E5 6B                           ld      l, e
1045+ 68E6 D1                           pop     de
1046+ 68E7 ED 30                        mul
1047+ 68E9 EB                           ex      de, hl
1048+ 68EA ED 4A                        adc     hl, bc
1049+ 68EC D5                           push    de
1050+ 68ED E5                           push    hl
1051+ 68EE D9                           exx
1052+ 68EF                              next
1052+ 68EF DD E9       >                jp      (ix)
1053+ 68F1
1054+ 68F1              //  ______________________________________________________________________
1055+ 68F1              //
1056+ 68F1              // um/mod      ud u1 -- q r
1057+ 68F1              // divides ud into u1 giving quotient q and remainder r
1058+ 68F1              // algorithm takes 16 bit at a time starting from msb
1059+ 68F1              // DE grows from lsb upward with quotient result
1060+ 68F1              // HL keeps the remainder at each stage of division
1061+ 68F1              // each loop 'lowers' the next binary digit to form the current dividend
1062+ 68F1                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1062+ 68F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 68F1             >
1062+ 68F1             >                // dummy db directives used to calculate length of namec
1062+ 68F1 55 4D 2F 4D >                db      "UM/MOD"
1062+ 68F5 4F 44       >
1062+ 68F7             >len_NFA         defl    $ - temp_NFA
1062+ 68F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 68F1             >
1062+ 68F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 68F2 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1062+ 68F6 4F 44       >
1062+ 68F8             >                org     $-1                 // alter last byte of Name just above to set
1062+ 68F7 C4          >                db      {b $} | END_BIT     // msb as name end
1062+ 68F8             >
1062+ 68F8 C3 68       >                dw      last_NFA            // Link to previous definition Name
1062+ 68FA             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 68FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 68FA             >                else
1062+ 68FA FC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 68FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 68FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 68FC             >
1062+ 68FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 68FC D9                           exx
1064+ 68FD C1                           pop     bc                      // divisor
1065+ 68FE
1066+ 68FE E1                           pop     hl                      // < high part
1067+ 68FF D1                           pop     de                      // < low part and
1068+ 6900
1069+ 6900 7D                           ld      a, l                    // check without changing arguments
1070+ 6901 91                           sub     c                       // if divisor is greater than high part
1071+ 6902 7C                           ld      a, h                    // so quotient will be in range
1072+ 6903 98                           sbc     a, b
1073+ 6904 30 20                        jr      nc, Um_DivMod_OutOfRange
1074+ 6906 3E 10                            ld      a, 16
1075+ 6908              Um_DivMod_Loop:
1076+ 6908 CB 23                                sla     e
1077+ 690A CB 12                                rl      d
1078+ 690C ED 6A                                adc     hl, hl
1079+ 690E 30 05                                jr      nc, Um_DivMod_Carry
1080+ 6910 A7                                       and     a
1081+ 6911 ED 42                                    sbc     hl, bc
1082+ 6913 18 07                                jr      Um_DivMod_Endif    // else
1083+ 6915              Um_DivMod_Carry:
1084+ 6915 A7                                       and     a
1085+ 6916 ED 42                                    sbc     hl, bc
1086+ 6918 30 02                                    jr      nc, Um_DivMod_Endif
1087+ 691A 09                                           add     hl, bc
1088+ 691B 1B                                           dec     de
1089+ 691C              Um_DivMod_Endif:                                   // endif
1090+ 691C 13                                   inc     de
1091+ 691D 3D                                   dec     a
1092+ 691E 20 E8                            jr      nz, Um_DivMod_Loop
1093+ 6920 EB                               ex      de, hl
1094+ 6921              Um_DivMod_Bailout:
1095+ 6921 D5                               push    de                  // de := remanider
1096+ 6922 E5                               push    hl                  // hl := quotient
1097+ 6923 D9                               exx
1098+ 6924                                  next
1098+ 6924 DD E9       >                jp      (ix)
1099+ 6926
1100+ 6926              Um_DivMod_OutOfRange:
1101+ 6926 21 FF FF                     ld      hl, -1
1102+ 6929 54                           ld      d, h
1103+ 692A 5D                           ld      e, l
1104+ 692B 18 F4                        jr      Um_DivMod_Bailout
1105+ 692D
1106+ 692D              //  ______________________________________________________________________
1107+ 692D              //
1108+ 692D              // and          n1 n2 -- n3
1109+ 692D              // bit logical AND. Returns n3 as n1 & n2
1110+ 692D                              New_Def AND_OP, "AND", is_code, is_normal
1110+ 692D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 692D             >
1110+ 692D             >                // dummy db directives used to calculate length of namec
1110+ 692D 41 4E 44    >                db      "AND"
1110+ 6930             >len_NFA         defl    $ - temp_NFA
1110+ 6930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 692D             >
1110+ 692D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 692E 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1110+ 6931             >                org     $-1                 // alter last byte of Name just above to set
1110+ 6930 C4          >                db      {b $} | END_BIT     // msb as name end
1110+ 6931             >
1110+ 6931 F1 68       >                dw      last_NFA            // Link to previous definition Name
1110+ 6933             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 6933 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1110+ 6933             >                else
1110+ 6933 35 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 6935             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 6935             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 6935             >
1110+ 6935             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 6935 D1                           pop     de
1112+ 6936 E1                           pop     hl
1113+ 6937 7B                           ld      a, e
1114+ 6938 A5                           and     l
1115+ 6939 6F                           ld      l, a
1116+ 693A 7A                           ld      a, d
1117+ 693B A4                           and     h
1118+ 693C 67                           ld      h, a
1119+ 693D
1120+ 693D                              psh1
1120+ 693D E5          >                push    hl
1120+ 693E DD E9       >                jp      (ix)
1121+ 6940
1122+ 6940              //  ______________________________________________________________________
1123+ 6940              //
1124+ 6940              // or           n1 n2 -- n3
1125+ 6940              // bit logical OR. Returns n3 as n1 | n2
1126+ 6940                              New_Def OR_OP, "OR", is_code, is_normal
1126+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1126+ 6940             >
1126+ 6940             >                // dummy db directives used to calculate length of namec
1126+ 6940 4F 52       >                db      "OR"
1126+ 6942             >len_NFA         defl    $ - temp_NFA
1126+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1126+ 6940             >
1126+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1126+ 6941 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1126+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1126+ 6942 D2          >                db      {b $} | END_BIT     // msb as name end
1126+ 6943             >
1126+ 6943 2D 69       >                dw      last_NFA            // Link to previous definition Name
1126+ 6945             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1126+ 6945 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1126+ 6945             >                else
1126+ 6945 47 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1126+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1126+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1126+ 6947             >
1126+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1127+ 6947 D1                           pop     de
1128+ 6948 E1                           pop     hl
1129+ 6949 7B                           ld      a, e
1130+ 694A B5                           or      l
1131+ 694B 6F                           ld      l, a
1132+ 694C 7A                           ld      a, d
1133+ 694D B4                           or      h
1134+ 694E 67                           ld      h, a
1135+ 694F
1136+ 694F                              psh1
1136+ 694F E5          >                push    hl
1136+ 6950 DD E9       >                jp      (ix)
1137+ 6952
1138+ 6952              //  ______________________________________________________________________
1139+ 6952              //
1140+ 6952              // xor          n1 n2 -- n3
1141+ 6952              // bit logical OR. Returns n3 as n1 ^ n2
1142+ 6952                              New_Def XOR_OP, "XOR", is_code, is_normal
1142+ 6952             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 6952             >
1142+ 6952             >                // dummy db directives used to calculate length of namec
1142+ 6952 58 4F 52    >                db      "XOR"
1142+ 6955             >len_NFA         defl    $ - temp_NFA
1142+ 6955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 6952             >
1142+ 6952 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 6953 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1142+ 6956             >                org     $-1                 // alter last byte of Name just above to set
1142+ 6955 D2          >                db      {b $} | END_BIT     // msb as name end
1142+ 6956             >
1142+ 6956 40 69       >                dw      last_NFA            // Link to previous definition Name
1142+ 6958             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 6958 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1142+ 6958             >                else
1142+ 6958 5A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 695A             >
1142+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 695A D1                           pop     de
1144+ 695B E1                           pop     hl
1145+ 695C 7B                           ld      a, e
1146+ 695D AD                           xor     l
1147+ 695E 6F                           ld      l, a
1148+ 695F 7A                           ld      a, d
1149+ 6960 AC                           xor     h
1150+ 6961 67                           ld      h, a
1151+ 6962
1152+ 6962                              psh1
1152+ 6962 E5          >                push    hl
1152+ 6963 DD E9       >                jp      (ix)
1153+ 6965
1154+ 6965              //  ______________________________________________________________________
1155+ 6965              //
1156+ 6965              // sp@      -- a
1157+ 6965              // returns on top of stack the value of SP before execution
1158+ 6965                              New_Def SPFETCH, "SP@", is_code, is_normal
1158+ 6965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 6965             >
1158+ 6965             >                // dummy db directives used to calculate length of namec
1158+ 6965 53 50 40    >                db      "SP@"
1158+ 6968             >len_NFA         defl    $ - temp_NFA
1158+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 6965             >
1158+ 6965 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 6966 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1158+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1158+ 6968 C0          >                db      {b $} | END_BIT     // msb as name end
1158+ 6969             >
1158+ 6969 52 69       >                dw      last_NFA            // Link to previous definition Name
1158+ 696B             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 696B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1158+ 696B             >                else
1158+ 696B 6D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1158+ 696D             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 696D             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 696D             >
1158+ 696D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 696D
1160+ 696D 21 00 00                     ld      hl, 0
1161+ 6970 39                           add     hl, sp
1162+ 6971
1163+ 6971                              psh1
1163+ 6971 E5          >                push    hl
1163+ 6972 DD E9       >                jp      (ix)
1164+ 6974
1165+ 6974              //  ______________________________________________________________________
1166+ 6974              //
1167+ 6974              // sp!      a --
1168+ 6974              // restore SP to the initial value passed
1169+ 6974              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1170+ 6974                              New_Def SPSTORE, "SP!", is_code, is_normal
1170+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1170+ 6974             >
1170+ 6974             >                // dummy db directives used to calculate length of namec
1170+ 6974 53 50 21    >                db      "SP!"
1170+ 6977             >len_NFA         defl    $ - temp_NFA
1170+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1170+ 6974             >
1170+ 6974 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1170+ 6975 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1170+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1170+ 6977 A1          >                db      {b $} | END_BIT     // msb as name end
1170+ 6978             >
1170+ 6978 65 69       >                dw      last_NFA            // Link to previous definition Name
1170+ 697A             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1170+ 697A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1170+ 697A             >                else
1170+ 697A 7C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1170+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1170+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1170+ 697C             >
1170+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1171+ 697C E1                           pop     hl
1172+ 697D F9                           ld      sp, hl
1173+ 697E
1174+ 697E                              next
1174+ 697E DD E9       >                jp      (ix)
1175+ 6980
1176+ 6980              //  ______________________________________________________________________
1177+ 6980              //
1178+ 6980              // rp@      -- a
1179+ 6980              // returns on top of stack the value of Return-Pointer
1180+ 6980                              New_Def RPFETCH, "RP@", is_code, is_normal
1180+ 6980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ 6980             >
1180+ 6980             >                // dummy db directives used to calculate length of namec
1180+ 6980 52 50 40    >                db      "RP@"
1180+ 6983             >len_NFA         defl    $ - temp_NFA
1180+ 6983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ 6980             >
1180+ 6980 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ 6981 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1180+ 6984             >                org     $-1                 // alter last byte of Name just above to set
1180+ 6983 C0          >                db      {b $} | END_BIT     // msb as name end
1180+ 6984             >
1180+ 6984 74 69       >                dw      last_NFA            // Link to previous definition Name
1180+ 6986             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 6986 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1180+ 6986             >                else
1180+ 6986 88 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1180+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 6988             >
1180+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 6988
1182+ 6988                              ldhlrp
1182+ 6988 2A 96 63    >                ld      hl,(RP_Pointer)
1183+ 698B
1184+ 698B                              psh1
1184+ 698B E5          >                push    hl
1184+ 698C DD E9       >                jp      (ix)
1185+ 698E
1186+ 698E              //  ______________________________________________________________________
1187+ 698E              //
1188+ 698E              // rp!      a --
1189+ 698E              // restore RP to the initial value passed
1190+ 698E              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1191+ 698E                              New_Def RPSTORE, "RP!", is_code, is_normal
1191+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ 698E             >
1191+ 698E             >                // dummy db directives used to calculate length of namec
1191+ 698E 52 50 21    >                db      "RP!"
1191+ 6991             >len_NFA         defl    $ - temp_NFA
1191+ 6991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ 698E             >
1191+ 698E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ 698F 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1191+ 6992             >                org     $-1                 // alter last byte of Name just above to set
1191+ 6991 A1          >                db      {b $} | END_BIT     // msb as name end
1191+ 6992             >
1191+ 6992 80 69       >                dw      last_NFA            // Link to previous definition Name
1191+ 6994             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 6994 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1191+ 6994             >                else
1191+ 6994 96 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1191+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 6996             >
1191+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 6996 E1                           pop     hl
1193+ 6997                              ldrphl
1193+ 6997 22 96 63    >                ld      (RP_Pointer),hl
1194+ 699A
1195+ 699A                              next
1195+ 699A DD E9       >                jp      (ix)
1196+ 699C
1197+ 699C              //  ______________________________________________________________________
1198+ 699C              //
1199+ 699C              // exit      --
1200+ 699C              // exits back to the caller word
1201+ 699C                              New_Def EXIT, "EXIT", is_code, is_normal
1201+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1201+ 699C             >
1201+ 699C             >                // dummy db directives used to calculate length of namec
1201+ 699C 45 58 49 54 >                db      "EXIT"
1201+ 69A0             >len_NFA         defl    $ - temp_NFA
1201+ 69A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1201+ 699C             >
1201+ 699C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1201+ 699D 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1201+ 69A1             >                org     $-1                 // alter last byte of Name just above to set
1201+ 69A0 D4          >                db      {b $} | END_BIT     // msb as name end
1201+ 69A1             >
1201+ 69A1 8E 69       >                dw      last_NFA            // Link to previous definition Name
1201+ 69A3             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1201+ 69A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1201+ 69A3             >                else
1201+ 69A3 A5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1201+ 69A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1201+ 69A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1201+ 69A5             >
1201+ 69A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1202+ 69A5                              ldhlrp                      // Get Return Stack Pointer
1202+ 69A5 2A 96 63    >                ld      hl,(RP_Pointer)
1203+ 69A8 4E                           ld      c, (hl)             // pop Instruction Pointer
1204+ 69A9 23                           inc     hl                  // from Return Stack
1205+ 69AA 46                           ld      b, (hl)
1206+ 69AB 23                           inc     hl
1207+ 69AC                              ldrphl                      // Set Return Stack Pointer
1207+ 69AC 22 96 63    >                ld      (RP_Pointer),hl
1208+ 69AF                              next
1208+ 69AF DD E9       >                jp      (ix)
1209+ 69B1
1210+ 69B1              //  ______________________________________________________________________
1211+ 69B1              //
1212+ 69B1              // lastl      --
1213+ 69B1              // exits back to the caller word
1214+ 69B1              //              New_Def EXIT, "LASTL", is_code, is_normal
1215+ 69B1              //              ldhlrp                      // Get Return Stack Pointer
1216+ 69B1              //              ld      e, (hl)             // pop Instruction Pointer
1217+ 69B1              //              inc     hl                  // from Return Stack
1218+ 69B1              //              ld      d, (hl)
1219+ 69B1              //              inc     hl
1220+ 69B1              //              ld      (hl), e
1221+ 69B1              //              inc     hl
1222+ 69B1              //              ld      (hl), d
1223+ 69B1              //              next
1224+ 69B1
1225+ 69B1              //  ______________________________________________________________________
1226+ 69B1              //
1227+ 69B1              // >r      n --
1228+ 69B1              // pop from calculator-stack and push into return-stack
1229+ 69B1                              New_Def TO_R, ">R", is_code, is_normal
1229+ 69B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ 69B1             >
1229+ 69B1             >                // dummy db directives used to calculate length of namec
1229+ 69B1 3E 52       >                db      ">R"
1229+ 69B3             >len_NFA         defl    $ - temp_NFA
1229+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ 69B1             >
1229+ 69B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ 69B2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1229+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1229+ 69B3 D2          >                db      {b $} | END_BIT     // msb as name end
1229+ 69B4             >
1229+ 69B4 9C 69       >                dw      last_NFA            // Link to previous definition Name
1229+ 69B6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 69B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1229+ 69B6             >                else
1229+ 69B6 B8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1229+ 69B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 69B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 69B8             >
1229+ 69B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 69B8 D1                           pop     de
1231+ 69B9                              ldhlrp
1231+ 69B9 2A 96 63    >                ld      hl,(RP_Pointer)
1232+ 69BC 2B                           dec     hl
1233+ 69BD 72                           ld      (hl), d             // store current TOS
1234+ 69BE 2B                           dec     hl                  // to Return Stack
1235+ 69BF 73                           ld      (hl), e
1236+ 69C0                              ldrphl
1236+ 69C0 22 96 63    >                ld      (RP_Pointer),hl
1237+ 69C3
1238+ 69C3                              next
1238+ 69C3 DD E9       >                jp      (ix)
1239+ 69C5
1240+ 69C5              //  ______________________________________________________________________
1241+ 69C5              //
1242+ 69C5              // r>      -- n
1243+ 69C5              // pop from return-stack and push into calculator-stack
1244+ 69C5                              New_Def R_TO, "R>", is_code, is_normal
1244+ 69C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 69C5             >
1244+ 69C5             >                // dummy db directives used to calculate length of namec
1244+ 69C5 52 3E       >                db      "R>"
1244+ 69C7             >len_NFA         defl    $ - temp_NFA
1244+ 69C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 69C5             >
1244+ 69C5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 69C6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1244+ 69C8             >                org     $-1                 // alter last byte of Name just above to set
1244+ 69C7 BE          >                db      {b $} | END_BIT     // msb as name end
1244+ 69C8             >
1244+ 69C8 B1 69       >                dw      last_NFA            // Link to previous definition Name
1244+ 69CA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 69CA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1244+ 69CA             >                else
1244+ 69CA CC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1244+ 69CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 69CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 69CC             >
1244+ 69CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 69CC
1246+ 69CC                              ldhlrp
1246+ 69CC 2A 96 63    >                ld      hl,(RP_Pointer)
1247+ 69CF 5E                           ld      e, (hl)             // retrieve from Return Stack
1248+ 69D0 23                           inc     hl
1249+ 69D1 56                           ld      d, (hl)
1250+ 69D2 23                           inc     hl
1251+ 69D3                              ldrphl
1251+ 69D3 22 96 63    >                ld      (RP_Pointer),hl
1252+ 69D6 D5                           push    de
1253+ 69D7                              next
1253+ 69D7 DD E9       >                jp      (ix)
1254+ 69D9
1255+ 69D9              //  ______________________________________________________________________
1256+ 69D9              //
1257+ 69D9              // r@            -- n
1258+ 69D9              // return on top of stack the value of top of return-stack
1259+ 69D9              // Since this is the same as I, we alter R's CFA to jump there
1260+ 69D9                              New_Def R_OP, "R@", I_Ptr, is_normal
1260+ 69D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 69D9             >
1260+ 69D9             >                // dummy db directives used to calculate length of namec
1260+ 69D9 52 40       >                db      "R@"
1260+ 69DB             >len_NFA         defl    $ - temp_NFA
1260+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 69D9             >
1260+ 69D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 69DA 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1260+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1260+ 69DB C0          >                db      {b $} | END_BIT     // msb as name end
1260+ 69DC             >
1260+ 69DC C5 69       >                dw      last_NFA            // Link to previous definition Name
1260+ 69DE             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 69DE 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1260+ 69E0             >                else
1260+ 69E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 69E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 69E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 69E0             >
1260+ 69E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 69E0
1262+ 69E0              //  ______________________________________________________________________
1263+ 69E0              //
1264+ 69E0              // r            -- n
1265+ 69E0              // return on top of stack the value of top of return-stack
1266+ 69E0              // Since this is the same as I, we alter R's CFA to jump there
1267+ 69E0              //              New_Def R_OLD, "R", I_Ptr, is_normal
1268+ 69E0
1269+ 69E0              //  ______________________________________________________________________
1270+ 69E0              //
1271+ 69E0              // 0=           n -- f
1272+ 69E0              // true (non zero) if n is zero, false (0) elsewere
1273+ 69E0                              New_Def ZEQUAL, "0=", is_code, is_normal
1273+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 69E0             >
1273+ 69E0             >                // dummy db directives used to calculate length of namec
1273+ 69E0 30 3D       >                db      "0="
1273+ 69E2             >len_NFA         defl    $ - temp_NFA
1273+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 69E0             >
1273+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 69E1 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1273+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1273+ 69E2 BD          >                db      {b $} | END_BIT     // msb as name end
1273+ 69E3             >
1273+ 69E3 D9 69       >                dw      last_NFA            // Link to previous definition Name
1273+ 69E5             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 69E5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1273+ 69E5             >                else
1273+ 69E5 E7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1273+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 69E7             >
1273+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 69E7              Zero_Equal:
1275+ 69E7 E1                           pop     hl
1276+ 69E8 7D                           ld      a, l
1277+ 69E9 B4                           or      h
1278+ 69EA 21 00 00                     ld      hl, FALSE_FLAG
1279+ 69ED 20 01                        jr      nz, ZEqual_Skip
1280+ 69EF 2B                               dec     hl
1281+ 69F0              ZEqual_Skip:
1282+ 69F0                              psh1
1282+ 69F0 E5          >                push    hl
1282+ 69F1 DD E9       >                jp      (ix)
1283+ 69F3
1284+ 69F3              //  ______________________________________________________________________
1285+ 69F3              //
1286+ 69F3              // not         a1 -- a2
1287+ 69F3              // increment by 2 top of stack
1288+ 69F3                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1288+ 69F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1288+ 69F3             >
1288+ 69F3             >                // dummy db directives used to calculate length of namec
1288+ 69F3 4E 4F 54    >                db      "NOT"
1288+ 69F6             >len_NFA         defl    $ - temp_NFA
1288+ 69F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1288+ 69F3             >
1288+ 69F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1288+ 69F4 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1288+ 69F7             >                org     $-1                 // alter last byte of Name just above to set
1288+ 69F6 D4          >                db      {b $} | END_BIT     // msb as name end
1288+ 69F7             >
1288+ 69F7 E0 69       >                dw      last_NFA            // Link to previous definition Name
1288+ 69F9             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1288+ 69F9 E7 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1288+ 69FB             >                else
1288+ 69FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1288+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1288+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1288+ 69FB             >
1288+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1289+ 69FB
1290+ 69FB              //  ______________________________________________________________________
1291+ 69FB              //
1292+ 69FB              // 0<           n -- f
1293+ 69FB              // true (non zero) if n is less than zero, false (0) elsewere
1294+ 69FB                              New_Def ZLESS, "0<", is_code, is_normal
1294+ 69FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ 69FB             >
1294+ 69FB             >                // dummy db directives used to calculate length of namec
1294+ 69FB 30 3C       >                db      "0<"
1294+ 69FD             >len_NFA         defl    $ - temp_NFA
1294+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ 69FB             >
1294+ 69FB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ 69FC 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1294+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1294+ 69FD BC          >                db      {b $} | END_BIT     // msb as name end
1294+ 69FE             >
1294+ 69FE F3 69       >                dw      last_NFA            // Link to previous definition Name
1294+ 6A00             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 6A00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1294+ 6A00             >                else
1294+ 6A00 02 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1294+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 6A02             >
1294+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 6A02 E1                           pop     hl
1296+ 6A03 29                           add     hl, hl
1297+ 6A04 21 00 00                     ld      hl, 0
1298+ 6A07 30 01                        jr      nc, ZLess_Skip
1299+ 6A09 2B                               dec     hl
1300+ 6A0A              ZLess_Skip:
1301+ 6A0A                              psh1
1301+ 6A0A E5          >                push    hl
1301+ 6A0B DD E9       >                jp      (ix)
1302+ 6A0D
1303+ 6A0D              //  ______________________________________________________________________
1304+ 6A0D              //
1305+ 6A0D              // 0>           n -- f
1306+ 6A0D              // true (non zero) if n is less than zero, false (0) elsewere
1307+ 6A0D                              New_Def ZGREATER, "0>", is_code, is_normal
1307+ 6A0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1307+ 6A0D             >
1307+ 6A0D             >                // dummy db directives used to calculate length of namec
1307+ 6A0D 30 3E       >                db      "0>"
1307+ 6A0F             >len_NFA         defl    $ - temp_NFA
1307+ 6A0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1307+ 6A0D             >
1307+ 6A0D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1307+ 6A0E 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1307+ 6A10             >                org     $-1                 // alter last byte of Name just above to set
1307+ 6A0F BE          >                db      {b $} | END_BIT     // msb as name end
1307+ 6A10             >
1307+ 6A10 FB 69       >                dw      last_NFA            // Link to previous definition Name
1307+ 6A12             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1307+ 6A12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1307+ 6A12             >                else
1307+ 6A12 14 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1307+ 6A14             >                endif           ; ok        // for other definitions it "points" the correct handler
1307+ 6A14             >                // Use of "; ok" to suppress "warning[fwdref]"
1307+ 6A14             >
1307+ 6A14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1308+ 6A14 E1                           pop     hl
1309+ 6A15 7D                           ld      a, l
1310+ 6A16 B4                           or      h
1311+ 6A17 29                           add     hl, hl
1312+ 6A18 21 00 00                     ld      hl, FALSE_FLAG
1313+ 6A1B 38 04                        jr      c, ZGreater_Skip
1314+ 6A1D A7                               and     a
1315+ 6A1E 28 01                            jr      z, ZGreater_Skip
1316+ 6A20 2B                                   dec     hl
1317+ 6A21              ZGreater_Skip:
1318+ 6A21                              psh1
1318+ 6A21 E5          >                push    hl
1318+ 6A22 DD E9       >                jp      (ix)
1319+ 6A24
1320+ 6A24              //  ______________________________________________________________________
1321+ 6A24              //
1322+ 6A24              // +            n1 n2 -- n3
1323+ 6A24              // returns the unsigned sum of two top values
1324+ 6A24                              New_Def PLUS, "+", is_code, is_normal
1324+ 6A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ 6A24             >
1324+ 6A24             >                // dummy db directives used to calculate length of namec
1324+ 6A24 2B          >                db      "+"
1324+ 6A25             >len_NFA         defl    $ - temp_NFA
1324+ 6A25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ 6A24             >
1324+ 6A24 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ 6A25 2B          >                db      "+"               // name string in 7-bit ascii, but
1324+ 6A26             >                org     $-1                 // alter last byte of Name just above to set
1324+ 6A25 AB          >                db      {b $} | END_BIT     // msb as name end
1324+ 6A26             >
1324+ 6A26 0D 6A       >                dw      last_NFA            // Link to previous definition Name
1324+ 6A28             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 6A28 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1324+ 6A28             >                else
1324+ 6A28 2A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1324+ 6A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 6A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 6A2A             >
1324+ 6A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 6A2A E1                           pop     hl
1326+ 6A2B D1                           pop     de
1327+ 6A2C 19                           add     hl, de
1328+ 6A2D
1329+ 6A2D                              psh1
1329+ 6A2D E5          >                push    hl
1329+ 6A2E DD E9       >                jp      (ix)
1330+ 6A30
1331+ 6A30
1332+ 6A30              //  ______________________________________________________________________
1333+ 6A30              //
1334+ 6A30              // d+           d1 d2 -- d3
1335+ 6A30              // returns the unsigned sum of two top double-numbers
1336+ 6A30              //      d2  d1
1337+ 6A30              //      h l h l
1338+ 6A30              // SP   LHEDLHED
1339+ 6A30              // SP  +01234567
1340+ 6A30                              New_Def DPLUS, "D+", is_code, is_normal
1340+ 6A30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 6A30             >
1340+ 6A30             >                // dummy db directives used to calculate length of namec
1340+ 6A30 44 2B       >                db      "D+"
1340+ 6A32             >len_NFA         defl    $ - temp_NFA
1340+ 6A32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 6A30             >
1340+ 6A30 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 6A31 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1340+ 6A33             >                org     $-1                 // alter last byte of Name just above to set
1340+ 6A32 AB          >                db      {b $} | END_BIT     // msb as name end
1340+ 6A33             >
1340+ 6A33 24 6A       >                dw      last_NFA            // Link to previous definition Name
1340+ 6A35             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 6A35 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1340+ 6A35             >                else
1340+ 6A35 37 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 6A37             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 6A37             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 6A37             >
1340+ 6A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 6A37
1342+ 6A37 D9                           exx
1343+ 6A38 C1                           pop     bc                  // bc := d2.H
1344+ 6A39 D1                           pop     de                  // hl := d2.L
1345+ 6A3A E1                           pop     hl                  // d1.H
1346+ 6A3B E3                           ex      (sp), hl            // d1.L
1347+ 6A3C 19                           add     hl, de              // hl := d2.L + d1.L
1348+ 6A3D E3                           ex      (sp), hl            // d1.H
1349+ 6A3E ED 4A                        adc     hl, bc              // d1.H + d2.H
1350+ 6A40 E5                           push    hl
1351+ 6A41 D9                           exx
1352+ 6A42                              next
1352+ 6A42 DD E9       >                jp      (ix)
1353+ 6A44
1354+ 6A44              //  ______________________________________________________________________
1355+ 6A44              //
1356+ 6A44              // 1+           n1 -- n2
1357+ 6A44              // increment by 1 top of stack
1358+ 6A44                              New_Def ONE_PLUS, "1+", is_code, is_normal
1358+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ 6A44             >
1358+ 6A44             >                // dummy db directives used to calculate length of namec
1358+ 6A44 31 2B       >                db      "1+"
1358+ 6A46             >len_NFA         defl    $ - temp_NFA
1358+ 6A46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ 6A44             >
1358+ 6A44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ 6A45 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1358+ 6A47             >                org     $-1                 // alter last byte of Name just above to set
1358+ 6A46 AB          >                db      {b $} | END_BIT     // msb as name end
1358+ 6A47             >
1358+ 6A47 30 6A       >                dw      last_NFA            // Link to previous definition Name
1358+ 6A49             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 6A49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1358+ 6A49             >                else
1358+ 6A49 4B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1358+ 6A4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 6A4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 6A4B             >
1358+ 6A4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 6A4B E1                           pop     hl
1360+ 6A4C 23                           inc     hl
1361+ 6A4D
1362+ 6A4D                              psh1
1362+ 6A4D E5          >                push    hl
1362+ 6A4E DD E9       >                jp      (ix)
1363+ 6A50
1364+ 6A50              //  ______________________________________________________________________
1365+ 6A50              //
1366+ 6A50              // 1-           n1 -- n2
1367+ 6A50              // decrement by 1 top of stack
1368+ 6A50                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1368+ 6A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 6A50             >
1368+ 6A50             >                // dummy db directives used to calculate length of namec
1368+ 6A50 31 2D       >                db      "1-"
1368+ 6A52             >len_NFA         defl    $ - temp_NFA
1368+ 6A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 6A50             >
1368+ 6A50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 6A51 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1368+ 6A53             >                org     $-1                 // alter last byte of Name just above to set
1368+ 6A52 AD          >                db      {b $} | END_BIT     // msb as name end
1368+ 6A53             >
1368+ 6A53 44 6A       >                dw      last_NFA            // Link to previous definition Name
1368+ 6A55             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6A55 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1368+ 6A55             >                else
1368+ 6A55 57 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1368+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6A57             >
1368+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6A57 E1                           pop     hl
1370+ 6A58 2B                           dec     hl
1371+ 6A59
1372+ 6A59                              psh1
1372+ 6A59 E5          >                push    hl
1372+ 6A5A DD E9       >                jp      (ix)
1373+ 6A5C
1374+ 6A5C              //  ______________________________________________________________________
1375+ 6A5C              //
1376+ 6A5C              // 2+           n1 -- n2
1377+ 6A5C              // increment by 2 top of stack
1378+ 6A5C                              New_Def TWO_PLUS, "2+", is_code, is_normal
1378+ 6A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6A5C             >
1378+ 6A5C             >                // dummy db directives used to calculate length of namec
1378+ 6A5C 32 2B       >                db      "2+"
1378+ 6A5E             >len_NFA         defl    $ - temp_NFA
1378+ 6A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6A5C             >
1378+ 6A5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6A5D 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1378+ 6A5F             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6A5E AB          >                db      {b $} | END_BIT     // msb as name end
1378+ 6A5F             >
1378+ 6A5F 50 6A       >                dw      last_NFA            // Link to previous definition Name
1378+ 6A61             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6A61 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1378+ 6A61             >                else
1378+ 6A61 63 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1378+ 6A63             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6A63             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6A63             >
1378+ 6A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6A63              Two_Plus:
1380+ 6A63 E1                           pop     hl
1381+ 6A64 23                           inc     hl
1382+ 6A65 23                           inc     hl
1383+ 6A66
1384+ 6A66                              psh1
1384+ 6A66 E5          >                push    hl
1384+ 6A67 DD E9       >                jp      (ix)
1385+ 6A69
1386+ 6A69              //  ______________________________________________________________________
1387+ 6A69              //
1388+ 6A69              // cell+        a1 -- a2
1389+ 6A69              // increment by 2 top of stack
1390+ 6A69                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1390+ 6A69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1390+ 6A69             >
1390+ 6A69             >                // dummy db directives used to calculate length of namec
1390+ 6A69 43 45 4C 4C >                db      "CELL+"
1390+ 6A6D 2B          >
1390+ 6A6E             >len_NFA         defl    $ - temp_NFA
1390+ 6A6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1390+ 6A69             >
1390+ 6A69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1390+ 6A6A 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1390+ 6A6E 2B          >
1390+ 6A6F             >                org     $-1                 // alter last byte of Name just above to set
1390+ 6A6E AB          >                db      {b $} | END_BIT     // msb as name end
1390+ 6A6F             >
1390+ 6A6F 5C 6A       >                dw      last_NFA            // Link to previous definition Name
1390+ 6A71             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1390+ 6A71 63 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1390+ 6A73             >                else
1390+ 6A73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1390+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1390+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1390+ 6A73             >
1390+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1391+ 6A73
1392+ 6A73              //  ______________________________________________________________________
1393+ 6A73              //
1394+ 6A73              // align        a1 -- a2
1395+ 6A73              // align memory : not used
1396+ 6A73              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1397+ 6A73              //            next
1398+ 6A73
1399+ 6A73              //  ______________________________________________________________________
1400+ 6A73              //
1401+ 6A73              // cell-        a1 -- a2
1402+ 6A73              // decrement by 2 top of stack
1403+ 6A73                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1403+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ 6A73             >
1403+ 6A73             >                // dummy db directives used to calculate length of namec
1403+ 6A73 43 45 4C 4C >                db      "CELL-"
1403+ 6A77 2D          >
1403+ 6A78             >len_NFA         defl    $ - temp_NFA
1403+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ 6A73             >
1403+ 6A73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ 6A74 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1403+ 6A78 2D          >
1403+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1403+ 6A78 AD          >                db      {b $} | END_BIT     // msb as name end
1403+ 6A79             >
1403+ 6A79 69 6A       >                dw      last_NFA            // Link to previous definition Name
1403+ 6A7B             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 6A7B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1403+ 6A7B             >                else
1403+ 6A7B 7D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1403+ 6A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 6A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 6A7D             >
1403+ 6A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 6A7D              CellMinus:
1405+ 6A7D E1                           pop     hl
1406+ 6A7E 2B                           dec     hl
1407+ 6A7F 2B                           dec     hl
1408+ 6A80 E5                           push    hl
1409+ 6A81                              next
1409+ 6A81 DD E9       >                jp      (ix)
1410+ 6A83
1411+ 6A83              //  ______________________________________________________________________
1412+ 6A83              //
1413+ 6A83              // 2-           a1 -- a2
1414+ 6A83              // decrement by 2 top of stack
1415+ 6A83                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1415+ 6A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1415+ 6A83             >
1415+ 6A83             >                // dummy db directives used to calculate length of namec
1415+ 6A83 32 2D       >                db      "2-"
1415+ 6A85             >len_NFA         defl    $ - temp_NFA
1415+ 6A85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1415+ 6A83             >
1415+ 6A83 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1415+ 6A84 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1415+ 6A86             >                org     $-1                 // alter last byte of Name just above to set
1415+ 6A85 AD          >                db      {b $} | END_BIT     // msb as name end
1415+ 6A86             >
1415+ 6A86 73 6A       >                dw      last_NFA            // Link to previous definition Name
1415+ 6A88             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1415+ 6A88 7D 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1415+ 6A8A             >                else
1415+ 6A8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1415+ 6A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
1415+ 6A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
1415+ 6A8A             >
1415+ 6A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1416+ 6A8A
1417+ 6A8A              //  ______________________________________________________________________
1418+ 6A8A              //
1419+ 6A8A              // negate        n1 -- n2
1420+ 6A8A              // change the sign of number
1421+ 6A8A                              New_Def MINUS, "NEGATE", is_code, is_normal
1421+ 6A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 6A8A             >
1421+ 6A8A             >                // dummy db directives used to calculate length of namec
1421+ 6A8A 4E 45 47 41 >                db      "NEGATE"
1421+ 6A8E 54 45       >
1421+ 6A90             >len_NFA         defl    $ - temp_NFA
1421+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 6A8A             >
1421+ 6A8A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 6A8B 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1421+ 6A8F 54 45       >
1421+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1421+ 6A90 C5          >                db      {b $} | END_BIT     // msb as name end
1421+ 6A91             >
1421+ 6A91 83 6A       >                dw      last_NFA            // Link to previous definition Name
1421+ 6A93             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 6A93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1421+ 6A93             >                else
1421+ 6A93 95 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1421+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 6A95             >
1421+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 6A95 21 00 00                     ld      hl, 0               // subtract from 0
1423+ 6A98 D1                           pop     de
1424+ 6A99 B7                           or      a
1425+ 6A9A ED 52                        sbc     hl, de
1426+ 6A9C
1427+ 6A9C                              psh1
1427+ 6A9C E5          >                push    hl
1427+ 6A9D DD E9       >                jp      (ix)
1428+ 6A9F
1429+ 6A9F              //  ______________________________________________________________________
1430+ 6A9F              //
1431+ 6A9F              // dnegate      d1 -- d2
1432+ 6A9F              // change the sign of a double number
1433+ 6A9F                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1433+ 6A9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1433+ 6A9F             >
1433+ 6A9F             >                // dummy db directives used to calculate length of namec
1433+ 6A9F 44 4E 45 47 >                db      "DNEGATE"
1433+ 6AA3 41 54 45    >
1433+ 6AA6             >len_NFA         defl    $ - temp_NFA
1433+ 6AA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1433+ 6A9F             >
1433+ 6A9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1433+ 6AA0 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1433+ 6AA4 41 54 45    >
1433+ 6AA7             >                org     $-1                 // alter last byte of Name just above to set
1433+ 6AA6 C5          >                db      {b $} | END_BIT     // msb as name end
1433+ 6AA7             >
1433+ 6AA7 8A 6A       >                dw      last_NFA            // Link to previous definition Name
1433+ 6AA9             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1433+ 6AA9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1433+ 6AA9             >                else
1433+ 6AA9 AB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1433+ 6AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
1433+ 6AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
1433+ 6AAB             >
1433+ 6AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1434+ 6AAB D9                           exx
1435+ 6AAC C1                           pop     bc                  // d1.H
1436+ 6AAD D1                           pop     de                  // d1.L
1437+ 6AAE AF                           xor     a
1438+ 6AAF 67                           ld      h, a
1439+ 6AB0 6F                           ld      l, a
1440+ 6AB1 ED 52                        sbc     hl, de              // subtact from zero
1441+ 6AB3 E5                           push    hl                  // > d2-L
1442+ 6AB4 67                           ld      h, a
1443+ 6AB5 6F                           ld      l, a
1444+ 6AB6 ED 42                        sbc     hl, bc              // subtract from zero with carry
1445+ 6AB8                                                          // > d2-H
1446+ 6AB8 E5                           push    hl
1447+ 6AB9 D9                           exx
1448+ 6ABA                              next
1448+ 6ABA DD E9       >                jp      (ix)
1449+ 6ABC
1450+ 6ABC              //  ______________________________________________________________________
1451+ 6ABC              //
1452+ 6ABC              // over         n1 n2 -- n1 n2 n1
1453+ 6ABC              // copy the second value of stack and put it on top.
1454+ 6ABC                              New_Def OVER, "OVER", is_code, is_normal
1454+ 6ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ 6ABC             >
1454+ 6ABC             >                // dummy db directives used to calculate length of namec
1454+ 6ABC 4F 56 45 52 >                db      "OVER"
1454+ 6AC0             >len_NFA         defl    $ - temp_NFA
1454+ 6AC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ 6ABC             >
1454+ 6ABC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ 6ABD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1454+ 6AC1             >                org     $-1                 // alter last byte of Name just above to set
1454+ 6AC0 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ 6AC1             >
1454+ 6AC1 9F 6A       >                dw      last_NFA            // Link to previous definition Name
1454+ 6AC3             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 6AC3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1454+ 6AC3             >                else
1454+ 6AC3 C5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1454+ 6AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 6AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 6AC5             >
1454+ 6AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 6AC5 D1                           pop     de                  //   n2
1456+ 6AC6 E1                           pop     hl                  // < n1
1457+ 6AC7 E5                           push    hl                  // > n1
1458+ 6AC8 D5                           push    de                  // > n2
1459+ 6AC9 E5                           push    hl                  // > n1
1460+ 6ACA                              next
1460+ 6ACA DD E9       >                jp      (ix)
1461+ 6ACC
1462+ 6ACC              //  ______________________________________________________________________
1463+ 6ACC              //
1464+ 6ACC              // drop         n1 --
1465+ 6ACC              // drops the top of stack
1466+ 6ACC                              New_Def DROP, "DROP", is_code, is_normal
1466+ 6ACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1466+ 6ACC             >
1466+ 6ACC             >                // dummy db directives used to calculate length of namec
1466+ 6ACC 44 52 4F 50 >                db      "DROP"
1466+ 6AD0             >len_NFA         defl    $ - temp_NFA
1466+ 6AD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1466+ 6ACC             >
1466+ 6ACC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1466+ 6ACD 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1466+ 6AD1             >                org     $-1                 // alter last byte of Name just above to set
1466+ 6AD0 D0          >                db      {b $} | END_BIT     // msb as name end
1466+ 6AD1             >
1466+ 6AD1 BC 6A       >                dw      last_NFA            // Link to previous definition Name
1466+ 6AD3             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1466+ 6AD3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1466+ 6AD3             >                else
1466+ 6AD3 D5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1466+ 6AD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1466+ 6AD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1466+ 6AD5             >
1466+ 6AD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1467+ 6AD5 E1                           pop     hl                  // < n1 and discard previous TOS
1468+ 6AD6                              next
1468+ 6AD6 DD E9       >                jp      (ix)
1469+ 6AD8
1470+ 6AD8              //  ______________________________________________________________________
1471+ 6AD8              //
1472+ 6AD8              // nip          n1 n2 -- n2
1473+ 6AD8              // drops the second elemento on the stack
1474+ 6AD8                              New_Def NIP, "NIP", is_code, is_normal
1474+ 6AD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ 6AD8             >
1474+ 6AD8             >                // dummy db directives used to calculate length of namec
1474+ 6AD8 4E 49 50    >                db      "NIP"
1474+ 6ADB             >len_NFA         defl    $ - temp_NFA
1474+ 6ADB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ 6AD8             >
1474+ 6AD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ 6AD9 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1474+ 6ADC             >                org     $-1                 // alter last byte of Name just above to set
1474+ 6ADB D0          >                db      {b $} | END_BIT     // msb as name end
1474+ 6ADC             >
1474+ 6ADC CC 6A       >                dw      last_NFA            // Link to previous definition Name
1474+ 6ADE             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 6ADE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1474+ 6ADE             >                else
1474+ 6ADE E0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1474+ 6AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 6AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 6AE0             >
1474+ 6AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 6AE0
1476+ 6AE0 E1                           pop     hl                  // < n1 discarded
1477+ 6AE1 E3                           ex      (sp), hl
1478+ 6AE2                              next
1478+ 6AE2 DD E9       >                jp      (ix)
1479+ 6AE4
1480+ 6AE4              //  ______________________________________________________________________
1481+ 6AE4              //
1482+ 6AE4              // tuck         n1 n2 -- n2 n1 n2
1483+ 6AE4              // copy the top element after the second.
1484+ 6AE4                              New_Def TUCK, "TUCK", is_code, is_normal
1484+ 6AE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1484+ 6AE4             >
1484+ 6AE4             >                // dummy db directives used to calculate length of namec
1484+ 6AE4 54 55 43 4B >                db      "TUCK"
1484+ 6AE8             >len_NFA         defl    $ - temp_NFA
1484+ 6AE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1484+ 6AE4             >
1484+ 6AE4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1484+ 6AE5 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1484+ 6AE9             >                org     $-1                 // alter last byte of Name just above to set
1484+ 6AE8 CB          >                db      {b $} | END_BIT     // msb as name end
1484+ 6AE9             >
1484+ 6AE9 D8 6A       >                dw      last_NFA            // Link to previous definition Name
1484+ 6AEB             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1484+ 6AEB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1484+ 6AEB             >                else
1484+ 6AEB ED 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1484+ 6AED             >                endif           ; ok        // for other definitions it "points" the correct handler
1484+ 6AED             >                // Use of "; ok" to suppress "warning[fwdref]"
1484+ 6AED             >
1484+ 6AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1485+ 6AED E1                           pop     hl
1486+ 6AEE D1                           pop     de                  // < n1
1487+ 6AEF E5                           push    hl                  // > n2  and TOS
1488+ 6AF0 D5                           push    de                  // > n1
1489+ 6AF1 E5                           push    hl
1490+ 6AF2                              next
1490+ 6AF2 DD E9       >                jp      (ix)
1491+ 6AF4
1492+ 6AF4              //  ______________________________________________________________________
1493+ 6AF4              //
1494+ 6AF4              // swap         n1 n2 -- n2 n1
1495+ 6AF4              // swaps the two values on top of stack
1496+ 6AF4                              New_Def SWAP, "SWAP", is_code, is_normal
1496+ 6AF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6AF4             >
1496+ 6AF4             >                // dummy db directives used to calculate length of namec
1496+ 6AF4 53 57 41 50 >                db      "SWAP"
1496+ 6AF8             >len_NFA         defl    $ - temp_NFA
1496+ 6AF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6AF4             >
1496+ 6AF4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6AF5 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1496+ 6AF9             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6AF8 D0          >                db      {b $} | END_BIT     // msb as name end
1496+ 6AF9             >
1496+ 6AF9 E4 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6AFB             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6AFB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1496+ 6AFB             >                else
1496+ 6AFB FD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1496+ 6AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6AFD             >
1496+ 6AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6AFD E1                           pop     hl                  // < n1
1498+ 6AFE E3                           ex      (sp),hl             // > n2
1499+ 6AFF E5                           push    hl                  // copy n1 to TOS
1500+ 6B00                              next
1500+ 6B00 DD E9       >                jp      (ix)
1501+ 6B02
1502+ 6B02              //  ______________________________________________________________________
1503+ 6B02              //
1504+ 6B02              // dup         n -- n n
1505+ 6B02              // duplicates the top value of stack
1506+ 6B02                              New_Def DUP, "DUP", is_code, is_normal
1506+ 6B02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6B02             >
1506+ 6B02             >                // dummy db directives used to calculate length of namec
1506+ 6B02 44 55 50    >                db      "DUP"
1506+ 6B05             >len_NFA         defl    $ - temp_NFA
1506+ 6B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6B02             >
1506+ 6B02 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6B03 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1506+ 6B06             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6B05 D0          >                db      {b $} | END_BIT     // msb as name end
1506+ 6B06             >
1506+ 6B06 F4 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6B08             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6B08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1506+ 6B08             >                else
1506+ 6B08 0A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1506+ 6B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6B0A             >
1506+ 6B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6B0A E1                           pop     hl
1508+ 6B0B E5                           push    hl                  // > n duplicate TOS
1509+ 6B0C E5                           push    hl
1510+ 6B0D                              next
1510+ 6B0D DD E9       >                jp      (ix)
1511+ 6B0F
1512+ 6B0F              //  ______________________________________________________________________
1513+ 6B0F              //
1514+ 6B0F              // rot         n1 n2 n3 -- n2 n3 n1
1515+ 6B0F              // Rotates the 3 top values of stack by picking the 3rd in access-order
1516+ 6B0F              // and putting it on top. The other two are shifted down one place.
1517+ 6B0F                              New_Def ROT, "ROT", is_code, is_normal
1517+ 6B0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1517+ 6B0F             >
1517+ 6B0F             >                // dummy db directives used to calculate length of namec
1517+ 6B0F 52 4F 54    >                db      "ROT"
1517+ 6B12             >len_NFA         defl    $ - temp_NFA
1517+ 6B12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1517+ 6B0F             >
1517+ 6B0F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1517+ 6B10 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1517+ 6B13             >                org     $-1                 // alter last byte of Name just above to set
1517+ 6B12 D4          >                db      {b $} | END_BIT     // msb as name end
1517+ 6B13             >
1517+ 6B13 02 6B       >                dw      last_NFA            // Link to previous definition Name
1517+ 6B15             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1517+ 6B15 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1517+ 6B15             >                else
1517+ 6B15 17 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1517+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1517+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1517+ 6B17             >
1517+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1518+ 6B17 D1                           pop     de                  // < n3
1519+ 6B18 E1                           pop     hl                  // < n2
1520+ 6B19 E3                           ex      (sp),hl             // > n2 < n1
1521+ 6B1A D5                           push    de                  // > n3
1522+ 6B1B E5                           push    hl                  // copy n1 to TOS
1523+ 6B1C                              next
1523+ 6B1C DD E9       >                jp      (ix)
1524+ 6B1E
1525+ 6B1E              //  ______________________________________________________________________
1526+ 6B1E              //
1527+ 6B1E              // -rot         n1 n2 n3 -- n3 n1 n2
1528+ 6B1E              // Rotates the 3 top values of stack by picking the 1st in access-order
1529+ 6B1E              // and putting back to 3rd place. The other two are shifted down one place.
1530+ 6B1E                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1530+ 6B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1530+ 6B1E             >
1530+ 6B1E             >                // dummy db directives used to calculate length of namec
1530+ 6B1E 2D 52 4F 54 >                db      "-ROT"
1530+ 6B22             >len_NFA         defl    $ - temp_NFA
1530+ 6B22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1530+ 6B1E             >
1530+ 6B1E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1530+ 6B1F 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1530+ 6B23             >                org     $-1                 // alter last byte of Name just above to set
1530+ 6B22 D4          >                db      {b $} | END_BIT     // msb as name end
1530+ 6B23             >
1530+ 6B23 0F 6B       >                dw      last_NFA            // Link to previous definition Name
1530+ 6B25             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1530+ 6B25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1530+ 6B25             >                else
1530+ 6B25 27 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1530+ 6B27             >                endif           ; ok        // for other definitions it "points" the correct handler
1530+ 6B27             >                // Use of "; ok" to suppress "warning[fwdref]"
1530+ 6B27             >
1530+ 6B27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1531+ 6B27 E1                           pop     hl                  // < n3
1532+ 6B28 D1                           pop     de                  // < n2
1533+ 6B29 E3                           ex      (sp),hl             // > n3 < n1
1534+ 6B2A E5                           push    hl                  // > n1
1535+ 6B2B D5                           push    de                  // copy n3 to TOS
1536+ 6B2C                              next
1536+ 6B2C DD E9       >                jp      (ix)
1537+ 6B2E
1538+ 6B2E              //  ______________________________________________________________________
1539+ 6B2E              //
1540+ 6B2E              // pick        n1 -- nx
1541+ 6B2E              // picks the nth element from TOS
1542+ 6B2E                              New_Def PICK, "PICK", is_code, is_normal
1542+ 6B2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1542+ 6B2E             >
1542+ 6B2E             >                // dummy db directives used to calculate length of namec
1542+ 6B2E 50 49 43 4B >                db      "PICK"
1542+ 6B32             >len_NFA         defl    $ - temp_NFA
1542+ 6B32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1542+ 6B2E             >
1542+ 6B2E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1542+ 6B2F 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1542+ 6B33             >                org     $-1                 // alter last byte of Name just above to set
1542+ 6B32 CB          >                db      {b $} | END_BIT     // msb as name end
1542+ 6B33             >
1542+ 6B33 1E 6B       >                dw      last_NFA            // Link to previous definition Name
1542+ 6B35             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1542+ 6B35 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1542+ 6B35             >                else
1542+ 6B35 37 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1542+ 6B37             >                endif           ; ok        // for other definitions it "points" the correct handler
1542+ 6B37             >                // Use of "; ok" to suppress "warning[fwdref]"
1542+ 6B37             >
1542+ 6B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1543+ 6B37 E1                           pop     hl                  // take TOS as index
1544+ 6B38 29                           add     hl, hl              // as cells
1545+ 6B39 39                           add     hl, sp              // from Stack Pointer
1546+ 6B3A 7E                           ld      a, (hl)             // replace TOS
1547+ 6B3B 23                           inc     hl
1548+ 6B3C 66                           ld      h, (hl)
1549+ 6B3D 6F                           ld      l, a
1550+ 6B3E
1551+ 6B3E                              psh1
1551+ 6B3E E5          >                push    hl
1551+ 6B3F DD E9       >                jp      (ix)
1552+ 6B41
1553+ 6B41
1554+ 6B41              //  ______________________________________________________________________
1555+ 6B41              //
1556+ 6B41              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1557+ 6B41              // picks the nth element from TOS
1558+ 6B41              //              New_Def ROLL, "ROLL", is_code, is_normal
1559+ 6B41              //              exx                     // we need all registers free
1560+ 6B41              //              pop     hl              // number of cells to roll
1561+ 6B41              //              ld      a, h
1562+ 6B41              //              or       l
1563+ 6B41              //              jr      z, Roll_Zero
1564+ 6B41              //                  add     hl, hl              // number of bytes to move
1565+ 6B41              //                  ld      b, h
1566+ 6B41              //                  ld      c, l
1567+ 6B41              //                  add     hl, sp          // address of n1
1568+ 6B41              //                  ld      a, (hl)         // take n1 into a and a,
1569+ 6B41              //                  inc     hl
1570+ 6B41              //                  ex      af, af'
1571+ 6B41              //                  ld      a, (hl)         // take n1 into a and a,
1572+ 6B41              //                  ld      d, h
1573+ 6B41              //                  ld      e, l
1574+ 6B41              //                  dec     hl
1575+ 6B41              //                  dec     hl
1576+ 6B41              //                  lddr
1577+ 6B41              //                  ex      de, hl
1578+ 6B41              //                  ld      (hl), a
1579+ 6B41              //                  dec     hl
1580+ 6B41              //                  ex      af, af'
1581+ 6B41              //                  ld      (hl), a
1582+ 6B41              //Roll_Zero:
1583+ 6B41              //              exx
1584+ 6B41              //              next
1585+ 6B41
1586+ 6B41
1587+ 6B41              //  ______________________________________________________________________
1588+ 6B41              //
1589+ 6B41              // 2over        d1 d2 -- d1 d2 d1
1590+ 6B41              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1591+ 6B41              // copy the second double of stack and put on top.
1592+ 6B41              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1593+ 6B41              //
1594+ 6B41              //              ld      hl, 7
1595+ 6B41              //              add     hl, sp
1596+ 6B41              //              ld      d, (hl)
1597+ 6B41              //              dec     hl
1598+ 6B41              //              ld      e, (hl)             // d1-L
1599+ 6B41              //              push    de
1600+ 6B41              //              dec     hl
1601+ 6B41              //              ld      d, (hl)
1602+ 6B41              //              dec     hl
1603+ 6B41              //              ld      e, (hl)             // d1-H
1604+ 6B41              //              push    de
1605+ 6B41              //              next
1606+ 6B41
1607+ 6B41              //  ______________________________________________________________________
1608+ 6B41              //
1609+ 6B41              // 2drop        d --
1610+ 6B41              //              n1 n2 --
1611+ 6B41              // drops the top double from stack
1612+ 6B41                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1612+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ 6B41             >
1612+ 6B41             >                // dummy db directives used to calculate length of namec
1612+ 6B41 32 44 52 4F >                db      "2DROP"
1612+ 6B45 50          >
1612+ 6B46             >len_NFA         defl    $ - temp_NFA
1612+ 6B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ 6B41             >
1612+ 6B41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ 6B42 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1612+ 6B46 50          >
1612+ 6B47             >                org     $-1                 // alter last byte of Name just above to set
1612+ 6B46 D0          >                db      {b $} | END_BIT     // msb as name end
1612+ 6B47             >
1612+ 6B47 2E 6B       >                dw      last_NFA            // Link to previous definition Name
1612+ 6B49             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 6B49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1612+ 6B49             >                else
1612+ 6B49 4B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1612+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 6B4B             >
1612+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 6B4B E1                           pop     hl
1614+ 6B4C E1                           pop     hl
1615+ 6B4D                              next
1615+ 6B4D DD E9       >                jp      (ix)
1616+ 6B4F
1617+ 6B4F              //  ______________________________________________________________________
1618+ 6B4F              //
1619+ 6B4F              // 2nip         d1 d2 -- d2
1620+ 6B4F              //              n1 n2 n3 n4 -- n3 n4
1621+ 6B4F              // drops the second double on the stack
1622+ 6B4F              //              New_Def TWO_NIP, 4, "2nip"
1623+ 6B4F              //              ...
1624+ 6B4F
1625+ 6B4F              //  ______________________________________________________________________
1626+ 6B4F              //
1627+ 6B4F              // 2tuck         d1 d2 -- d2 d1 d2
1628+ 6B4F              // copy the top element after the second.
1629+ 6B4F              //              New_Def TWO_TUCK, 5, "2tuck"
1630+ 6B4F              //              ...
1631+ 6B4F
1632+ 6B4F              //  ______________________________________________________________________
1633+ 6B4F              //
1634+ 6B4F              // 2swap         d1 d2 -- d2 d1
1635+ 6B4F              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1636+ 6B4F              // swaps the two doubles on top of stack
1637+ 6B4F                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1637+ 6B4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ 6B4F             >
1637+ 6B4F             >                // dummy db directives used to calculate length of namec
1637+ 6B4F 32 53 57 41 >                db      "2SWAP"
1637+ 6B53 50          >
1637+ 6B54             >len_NFA         defl    $ - temp_NFA
1637+ 6B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ 6B4F             >
1637+ 6B4F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ 6B50 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1637+ 6B54 50          >
1637+ 6B55             >                org     $-1                 // alter last byte of Name just above to set
1637+ 6B54 D0          >                db      {b $} | END_BIT     // msb as name end
1637+ 6B55             >
1637+ 6B55 41 6B       >                dw      last_NFA            // Link to previous definition Name
1637+ 6B57             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 6B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1637+ 6B57             >                else
1637+ 6B57 59 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1637+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 6B59             >
1637+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 6B59 F1                           pop     af                  //   d2-H
1639+ 6B5A E1                           pop     hl                  // < d2-L
1640+ 6B5B D1                           pop     de                  // < d1-H
1641+ 6B5C E3                           ex      (sp), hl            // < d1-L > d2-L
1642+ 6B5D F5                           push    af                  // > d2-H
1643+ 6B5E E5                           push    hl                  // > d1-L
1644+ 6B5F D5                           push    de
1645+ 6B60
1646+ 6B60                              next
1646+ 6B60 DD E9       >                jp      (ix)
1647+ 6B62
1648+ 6B62              //  ______________________________________________________________________
1649+ 6B62              //
1650+ 6B62              // 2dup         d -- d d
1651+ 6B62              //              n1 n2 -- n1 n2 n1 n2
1652+ 6B62              // duplicates the top double of stack
1653+ 6B62                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1653+ 6B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ 6B62             >
1653+ 6B62             >                // dummy db directives used to calculate length of namec
1653+ 6B62 32 44 55 50 >                db      "2DUP"
1653+ 6B66             >len_NFA         defl    $ - temp_NFA
1653+ 6B66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ 6B62             >
1653+ 6B62 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ 6B63 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1653+ 6B67             >                org     $-1                 // alter last byte of Name just above to set
1653+ 6B66 D0          >                db      {b $} | END_BIT     // msb as name end
1653+ 6B67             >
1653+ 6B67 4F 6B       >                dw      last_NFA            // Link to previous definition Name
1653+ 6B69             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 6B69 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1653+ 6B69             >                else
1653+ 6B69 6B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1653+ 6B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 6B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 6B6B             >
1653+ 6B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 6B6B E1                           pop     hl                  // < d-H
1655+ 6B6C D1                           pop     de                  // < d-L
1656+ 6B6D D5                           push    de                  // < d-L
1657+ 6B6E E5                           push    hl                  // > d-H
1658+ 6B6F D5                           push    de                  // > d-L
1659+ 6B70 E5                           push    hl                  // > d-H
1660+ 6B71                              next
1660+ 6B71 DD E9       >                jp      (ix)
1661+ 6B73
1662+ 6B73              //  ______________________________________________________________________
1663+ 6B73              //
1664+ 6B73              // 2rot         d1 d2 d3 -- d2 d3 d1
1665+ 6B73              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1666+ 6B73              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1667+ 6B73              // and putting it on top. The other two are shifted down one place.
1668+ 6B73              //              New_Def TWO?ROT, 4, "2rot"
1669+ 6B73              //              ...
1670+ 6B73              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1671+ 6B73              //
1672+ 6B73              //      d3  |d2  |d1  |
1673+ 6B73              //      h l |h l |h l |
1674+ 6B73              // SP   LHED|LHED|LHED|
1675+ 6B73              // SP  +0123|4567|89ab|
1676+ 6B73              //              ld      hl, $000B
1677+ 6B73              //              add     hl, sp
1678+ 6B73              //              ld      d, (hl)
1679+ 6B73              //              dec     hl
1680+ 6B73              //              ld      e, (hl)
1681+ 6B73              //              dec     hl
1682+ 6B73              //              push    de
1683+ 6B73              //              ld      d, (hl)
1684+ 6B73              //              dec     hl
1685+ 6B73              //              ld      e, (hl)
1686+ 6B73              //              dec     hl
1687+ 6B73              //              push    de
1688+ 6B73
1689+ 6B73              //      d1  |d3  |d2  |d1  |
1690+ 6B73              //      h l |h l |h l |h l |
1691+ 6B73              // SP   LHED|LHED|LHED|LHED|
1692+ 6B73              // SP       +0123|4567|89ab|
1693+ 6B73
1694+ 6B73              //              ld      d, h
1695+ 6B73              //              ld      e, l
1696+ 6B73              //              inc     de
1697+ 6B73              //              inc     de
1698+ 6B73              //              inc     de
1699+ 6B73              //              inc     de
1700+ 6B73              //              push    bc
1701+ 6B73              //              ld      bc, $000C
1702+ 6B73              //              lddr
1703+ 6B73              //              pop     bc
1704+ 6B73              //              pop     de
1705+ 6B73              //              pop     de
1706+ 6B73              //
1707+ 6B73              //              next
1708+ 6B73
1709+ 6B73
1710+ 6B73              //  ______________________________________________________________________
1711+ 6B73              //
1712+ 6B73              // +!           n a --
1713+ 6B73              // Sums to the content of address a the number n.
1714+ 6B73              // It is the same of  a @ n + a !
1715+ 6B73                              New_Def PLUSSTORE, "+!", is_code, is_normal
1715+ 6B73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1715+ 6B73             >
1715+ 6B73             >                // dummy db directives used to calculate length of namec
1715+ 6B73 2B 21       >                db      "+!"
1715+ 6B75             >len_NFA         defl    $ - temp_NFA
1715+ 6B75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1715+ 6B73             >
1715+ 6B73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1715+ 6B74 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1715+ 6B76             >                org     $-1                 // alter last byte of Name just above to set
1715+ 6B75 A1          >                db      {b $} | END_BIT     // msb as name end
1715+ 6B76             >
1715+ 6B76 62 6B       >                dw      last_NFA            // Link to previous definition Name
1715+ 6B78             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1715+ 6B78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1715+ 6B78             >                else
1715+ 6B78 7A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1715+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1715+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1715+ 6B7A             >
1715+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1716+ 6B7A E1                           pop     hl                  // hl is the address
1717+ 6B7B D1                           pop     de                  // de is the number
1718+ 6B7C 7E                           ld      a, (hl)
1719+ 6B7D 83                           add     e
1720+ 6B7E 77                           ld      (hl), a
1721+ 6B7F 23                           inc     hl
1722+ 6B80 7E                           ld      a, (hl)
1723+ 6B81 8A                           adc     d
1724+ 6B82 77                           ld      (hl), a
1725+ 6B83
1726+ 6B83                              next
1726+ 6B83 DD E9       >                jp      (ix)
1727+ 6B85
1728+ 6B85              //  ______________________________________________________________________
1729+ 6B85              //
1730+ 6B85              // toggle       a n --
1731+ 6B85              // Complements (xor) the byte at addrress  a  with the model n.
1732+ 6B85                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1732+ 6B85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1732+ 6B85             >
1732+ 6B85             >                // dummy db directives used to calculate length of namec
1732+ 6B85 54 4F 47 47 >                db      "TOGGLE"
1732+ 6B89 4C 45       >
1732+ 6B8B             >len_NFA         defl    $ - temp_NFA
1732+ 6B8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1732+ 6B85             >
1732+ 6B85 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1732+ 6B86 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1732+ 6B8A 4C 45       >
1732+ 6B8C             >                org     $-1                 // alter last byte of Name just above to set
1732+ 6B8B C5          >                db      {b $} | END_BIT     // msb as name end
1732+ 6B8C             >
1732+ 6B8C 73 6B       >                dw      last_NFA            // Link to previous definition Name
1732+ 6B8E             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1732+ 6B8E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1732+ 6B8E             >                else
1732+ 6B8E 90 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1732+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
1732+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
1732+ 6B90             >
1732+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1733+ 6B90 D1                           pop     de
1734+ 6B91 E1                           pop     hl
1735+ 6B92 7E                           ld      a, (hl)
1736+ 6B93 AB                           xor     e
1737+ 6B94 77                           ld      (hl), a
1738+ 6B95
1739+ 6B95                              next
1739+ 6B95 DD E9       >                jp      (ix)
1740+ 6B97
1741+ 6B97              //  ______________________________________________________________________
1742+ 6B97              //
1743+ 6B97              // @            a -- n
1744+ 6B97              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1745+ 6B97                              New_Def FETCH, "@", is_code, is_normal
1745+ 6B97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1745+ 6B97             >
1745+ 6B97             >                // dummy db directives used to calculate length of namec
1745+ 6B97 40          >                db      "@"
1745+ 6B98             >len_NFA         defl    $ - temp_NFA
1745+ 6B98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1745+ 6B97             >
1745+ 6B97 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1745+ 6B98 40          >                db      "@"               // name string in 7-bit ascii, but
1745+ 6B99             >                org     $-1                 // alter last byte of Name just above to set
1745+ 6B98 C0          >                db      {b $} | END_BIT     // msb as name end
1745+ 6B99             >
1745+ 6B99 85 6B       >                dw      last_NFA            // Link to previous definition Name
1745+ 6B9B             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1745+ 6B9B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1745+ 6B9B             >                else
1745+ 6B9B 9D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1745+ 6B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
1745+ 6B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
1745+ 6B9D             >
1745+ 6B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1746+ 6B9D E1                           pop     hl
1747+ 6B9E 5E                           ld      e, (hl)             // low-byte
1748+ 6B9F 23                           inc     hl
1749+ 6BA0 56                           ld      d, (hl)             // high-byte
1750+ 6BA1 D5                           push    de
1751+ 6BA2                              next
1751+ 6BA2 DD E9       >                jp      (ix)
1752+ 6BA4
1753+ 6BA4              //  ______________________________________________________________________
1754+ 6BA4              //
1755+ 6BA4              // !            n a --
1756+ 6BA4              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1757+ 6BA4                              New_Def STORE, "!", is_code, is_normal
1757+ 6BA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6BA4             >
1757+ 6BA4             >                // dummy db directives used to calculate length of namec
1757+ 6BA4 21          >                db      "!"
1757+ 6BA5             >len_NFA         defl    $ - temp_NFA
1757+ 6BA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6BA4             >
1757+ 6BA4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6BA5 21          >                db      "!"               // name string in 7-bit ascii, but
1757+ 6BA6             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6BA5 A1          >                db      {b $} | END_BIT     // msb as name end
1757+ 6BA6             >
1757+ 6BA6 97 6B       >                dw      last_NFA            // Link to previous definition Name
1757+ 6BA8             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6BA8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1757+ 6BA8             >                else
1757+ 6BA8 AA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1757+ 6BAA             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6BAA             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6BAA             >
1757+ 6BAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6BAA E1                           pop     hl                  // address
1759+ 6BAB D1                           pop     de                  // < n
1760+ 6BAC 73                           ld      (hl), e             // low-byte
1761+ 6BAD 23                           inc     hl
1762+ 6BAE 72                           ld      (hl), d             // high-byte
1763+ 6BAF
1764+ 6BAF                              next
1764+ 6BAF DD E9       >                jp      (ix)
1765+ 6BB1
1766+ 6BB1              //  ______________________________________________________________________
1767+ 6BB1              //
1768+ 6BB1              // c@           a -- c
1769+ 6BB1              // fetch a character n from address a
1770+ 6BB1                              New_Def CFETCH, "C@", is_code, is_normal
1770+ 6BB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ 6BB1             >
1770+ 6BB1             >                // dummy db directives used to calculate length of namec
1770+ 6BB1 43 40       >                db      "C@"
1770+ 6BB3             >len_NFA         defl    $ - temp_NFA
1770+ 6BB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ 6BB1             >
1770+ 6BB1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ 6BB2 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1770+ 6BB4             >                org     $-1                 // alter last byte of Name just above to set
1770+ 6BB3 C0          >                db      {b $} | END_BIT     // msb as name end
1770+ 6BB4             >
1770+ 6BB4 A4 6B       >                dw      last_NFA            // Link to previous definition Name
1770+ 6BB6             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6BB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1770+ 6BB6             >                else
1770+ 6BB6 B8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1770+ 6BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6BB8             >
1770+ 6BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6BB8 E1                           pop     hl
1772+ 6BB9 6E                           ld      l, (hl)             // low-byte
1773+ 6BBA 26 00                        ld      h, 0
1774+ 6BBC
1775+ 6BBC                              psh1
1775+ 6BBC E5          >                push    hl
1775+ 6BBD DD E9       >                jp      (ix)
1776+ 6BBF
1777+ 6BBF              //  ______________________________________________________________________
1778+ 6BBF              //
1779+ 6BBF              // c!           c a --
1780+ 6BBF              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1781+ 6BBF                              New_Def CSTORE, "C!", is_code, is_normal
1781+ 6BBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1781+ 6BBF             >
1781+ 6BBF             >                // dummy db directives used to calculate length of namec
1781+ 6BBF 43 21       >                db      "C!"
1781+ 6BC1             >len_NFA         defl    $ - temp_NFA
1781+ 6BC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1781+ 6BBF             >
1781+ 6BBF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1781+ 6BC0 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1781+ 6BC2             >                org     $-1                 // alter last byte of Name just above to set
1781+ 6BC1 A1          >                db      {b $} | END_BIT     // msb as name end
1781+ 6BC2             >
1781+ 6BC2 B1 6B       >                dw      last_NFA            // Link to previous definition Name
1781+ 6BC4             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1781+ 6BC4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1781+ 6BC4             >                else
1781+ 6BC4 C6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1781+ 6BC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1781+ 6BC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1781+ 6BC6             >
1781+ 6BC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1782+ 6BC6 E1                           pop     hl                  // < address
1783+ 6BC7 D1                           pop     de
1784+ 6BC8 73                           ld      (hl), e             // low-byte
1785+ 6BC9
1786+ 6BC9                              next
1786+ 6BC9 DD E9       >                jp      (ix)
1787+ 6BCB
1788+ 6BCB              //  ______________________________________________________________________
1789+ 6BCB              //
1790+ 6BCB              // 2@           a -- d
1791+ 6BCB              // fetch a 32 bits number d from address a and leaves it on top of the
1792+ 6BCB              // stack as two single numbers, high part as top of the stack.
1793+ 6BCB              // A double number is normally kept in CPU registers as HLDE.
1794+ 6BCB              // On stack a double number is treated as two single numbers
1795+ 6BCB              // where BC is on the top of the stack and HL is the second from top,
1796+ 6BCB              // so the sign of the number can be checked on top of stack
1797+ 6BCB              // and in the stack memory it appears as LHED.
1798+ 6BCB                              New_Def TWO_FETCH, "2@", is_code, is_normal
1798+ 6BCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1798+ 6BCB             >
1798+ 6BCB             >                // dummy db directives used to calculate length of namec
1798+ 6BCB 32 40       >                db      "2@"
1798+ 6BCD             >len_NFA         defl    $ - temp_NFA
1798+ 6BCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1798+ 6BCB             >
1798+ 6BCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1798+ 6BCC 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1798+ 6BCE             >                org     $-1                 // alter last byte of Name just above to set
1798+ 6BCD C0          >                db      {b $} | END_BIT     // msb as name end
1798+ 6BCE             >
1798+ 6BCE BF 6B       >                dw      last_NFA            // Link to previous definition Name
1798+ 6BD0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1798+ 6BD0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1798+ 6BD0             >                else
1798+ 6BD0 D2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1798+ 6BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1798+ 6BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1798+ 6BD2             >
1798+ 6BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1799+ 6BD2 E1                           pop     hl                  // address
1800+ 6BD3 5E                           ld      e, (hl)             // low-byte
1801+ 6BD4 23                           inc     hl
1802+ 6BD5 56                           ld      d, (hl)             // high-byte
1803+ 6BD6
1804+ 6BD6 23                           inc     hl
1805+ 6BD7 7E                           ld      a, (hl)             // low-byte
1806+ 6BD8 23                           inc     hl
1807+ 6BD9 66                           ld      h, (hl)             // high-byte
1808+ 6BDA 6F                           ld      l, a
1809+ 6BDB E5                           push    hl
1810+ 6BDC D5                           push    de
1811+ 6BDD                              next
1811+ 6BDD DD E9       >                jp      (ix)
1812+ 6BDF
1813+ 6BDF              //  ______________________________________________________________________
1814+ 6BDF              //
1815+ 6BDF              // 2!           d a --
1816+ 6BDF              // stores a 32 bits number d from address a and leaves it on top of the
1817+ 6BDF              // stack as two single numbers, high part as top of the stack.
1818+ 6BDF              // A double number is normally kept in CPU registers as HLDE.
1819+ 6BDF              // On stack a double number is treated as two single numbers
1820+ 6BDF              // where BC is on the top of the stack and HL is the second from top,
1821+ 6BDF              // so the sign of the number can be checked on top of stack
1822+ 6BDF              // and in the stack memory it appears as LHED.
1823+ 6BDF                              New_Def TWO_STORE, "2!", is_code, is_normal
1823+ 6BDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1823+ 6BDF             >
1823+ 6BDF             >                // dummy db directives used to calculate length of namec
1823+ 6BDF 32 21       >                db      "2!"
1823+ 6BE1             >len_NFA         defl    $ - temp_NFA
1823+ 6BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1823+ 6BDF             >
1823+ 6BDF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1823+ 6BE0 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1823+ 6BE2             >                org     $-1                 // alter last byte of Name just above to set
1823+ 6BE1 A1          >                db      {b $} | END_BIT     // msb as name end
1823+ 6BE2             >
1823+ 6BE2 CB 6B       >                dw      last_NFA            // Link to previous definition Name
1823+ 6BE4             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1823+ 6BE4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1823+ 6BE4             >                else
1823+ 6BE4 E6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1823+ 6BE6             >                endif           ; ok        // for other definitions it "points" the correct handler
1823+ 6BE6             >                // Use of "; ok" to suppress "warning[fwdref]"
1823+ 6BE6             >
1823+ 6BE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1824+ 6BE6 D9                           exx
1825+ 6BE7 E1                           pop     hl                  // address
1826+ 6BE8 C1                           pop     bc                  // < high-part
1827+ 6BE9 D1                           pop     de                  // < low-part > Instruction Pointer
1828+ 6BEA 71                           ld      (hl), c
1829+ 6BEB 23                           inc     hl
1830+ 6BEC 70                           ld      (hl), b
1831+ 6BED 23                           inc     hl
1832+ 6BEE 73                           ld      (hl), e
1833+ 6BEF 23                           inc     hl
1834+ 6BF0 72                           ld      (hl), d
1835+ 6BF1 D9                           exx
1836+ 6BF2                              next
1836+ 6BF2 DD E9       >                jp      (ix)
1837+ 6BF4
1838+ 6BF4              //  ______________________________________________________________________
1839+ 6BF4              //
1840+ 6BF4              // p@           a -- c
1841+ 6BF4              // Read one byte from port a and leave the result on top of stack
1842+ 6BF4                              New_Def PFETCH, "P@", is_code, is_normal
1842+ 6BF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6BF4             >
1842+ 6BF4             >                // dummy db directives used to calculate length of namec
1842+ 6BF4 50 40       >                db      "P@"
1842+ 6BF6             >len_NFA         defl    $ - temp_NFA
1842+ 6BF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6BF4             >
1842+ 6BF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6BF5 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1842+ 6BF7             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6BF6 C0          >                db      {b $} | END_BIT     // msb as name end
1842+ 6BF7             >
1842+ 6BF7 DF 6B       >                dw      last_NFA            // Link to previous definition Name
1842+ 6BF9             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6BF9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1842+ 6BF9             >                else
1842+ 6BF9 FB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1842+ 6BFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6BFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6BFB             >
1842+ 6BFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6BFB D9                           exx
1844+ 6BFC C1                           pop     bc
1845+ 6BFD 26 00                        ld      h, 0
1846+ 6BFF ED 68                        in      l, (c)
1847+ 6C01 E5                           push    hl
1848+ 6C02 D9                           exx
1849+ 6C03                              next
1849+ 6C03 DD E9       >                jp      (ix)
1850+ 6C05
1851+ 6C05              //  ______________________________________________________________________
1852+ 6C05              //
1853+ 6C05              // p!           c a --
1854+ 6C05              // Send one byte (top of stack) to port a
1855+ 6C05                              New_Def PSTORE, "P!", is_code, is_normal
1855+ 6C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1855+ 6C05             >
1855+ 6C05             >                // dummy db directives used to calculate length of namec
1855+ 6C05 50 21       >                db      "P!"
1855+ 6C07             >len_NFA         defl    $ - temp_NFA
1855+ 6C07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1855+ 6C05             >
1855+ 6C05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1855+ 6C06 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1855+ 6C08             >                org     $-1                 // alter last byte of Name just above to set
1855+ 6C07 A1          >                db      {b $} | END_BIT     // msb as name end
1855+ 6C08             >
1855+ 6C08 F4 6B       >                dw      last_NFA            // Link to previous definition Name
1855+ 6C0A             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1855+ 6C0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1855+ 6C0A             >                else
1855+ 6C0A 0C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1855+ 6C0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1855+ 6C0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1855+ 6C0C             >
1855+ 6C0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1856+ 6C0C D9                           exx
1857+ 6C0D C1                           pop     bc
1858+ 6C0E E1                           pop     hl                  // < c
1859+ 6C0F ED 69                        out     (c), l              // low-byte
1860+ 6C11 D9                           exx
1861+ 6C12                              next
1861+ 6C12 DD E9       >                jp      (ix)
1862+ 6C14
1863+ 6C14
1864+ 6C14              //  ______________________________________________________________________
1865+ 6C14              //
1866+ 6C14              // 2*           n1 -- n2
1867+ 6C14              // doubles the number at top of stack
1868+ 6C14                              New_Def TWO_MUL, "2*", is_code, is_normal
1868+ 6C14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1868+ 6C14             >
1868+ 6C14             >                // dummy db directives used to calculate length of namec
1868+ 6C14 32 2A       >                db      "2*"
1868+ 6C16             >len_NFA         defl    $ - temp_NFA
1868+ 6C16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1868+ 6C14             >
1868+ 6C14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1868+ 6C15 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1868+ 6C17             >                org     $-1                 // alter last byte of Name just above to set
1868+ 6C16 AA          >                db      {b $} | END_BIT     // msb as name end
1868+ 6C17             >
1868+ 6C17 05 6C       >                dw      last_NFA            // Link to previous definition Name
1868+ 6C19             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1868+ 6C19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1868+ 6C19             >                else
1868+ 6C19 1B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1868+ 6C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1868+ 6C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1868+ 6C1B             >
1868+ 6C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1869+ 6C1B              Two_Mul_Ptr:
1870+ 6C1B E1                           pop     hl
1871+ 6C1C 29                           add     hl, hl
1872+ 6C1D
1873+ 6C1D                              psh1
1873+ 6C1D E5          >                push    hl
1873+ 6C1E DD E9       >                jp      (ix)
1874+ 6C20
1875+ 6C20              //  ______________________________________________________________________
1876+ 6C20              //
1877+ 6C20              // 2/           n1 -- n2
1878+ 6C20              // halves the top of stack, sign is unchanged
1879+ 6C20                              New_Def TWO_DIV, "2/", is_code, is_normal
1879+ 6C20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1879+ 6C20             >
1879+ 6C20             >                // dummy db directives used to calculate length of namec
1879+ 6C20 32 2F       >                db      "2/"
1879+ 6C22             >len_NFA         defl    $ - temp_NFA
1879+ 6C22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1879+ 6C20             >
1879+ 6C20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1879+ 6C21 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1879+ 6C23             >                org     $-1                 // alter last byte of Name just above to set
1879+ 6C22 AF          >                db      {b $} | END_BIT     // msb as name end
1879+ 6C23             >
1879+ 6C23 14 6C       >                dw      last_NFA            // Link to previous definition Name
1879+ 6C25             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1879+ 6C25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1879+ 6C25             >                else
1879+ 6C25 27 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1879+ 6C27             >                endif           ; ok        // for other definitions it "points" the correct handler
1879+ 6C27             >                // Use of "; ok" to suppress "warning[fwdref]"
1879+ 6C27             >
1879+ 6C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1880+ 6C27 E1                           pop     hl
1881+ 6C28 CB 2C                        sra     h
1882+ 6C2A CB 1D                        rr      l
1883+ 6C2C
1884+ 6C2C                              psh1
1884+ 6C2C E5          >                push    hl
1884+ 6C2D DD E9       >                jp      (ix)
1885+ 6C2F
1886+ 6C2F              //  ______________________________________________________________________
1887+ 6C2F              //
1888+ 6C2F              // lshift       n1 u -- n2
1889+ 6C2F              // bit left shift of u bits
1890+ 6C2F                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1890+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ 6C2F             >
1890+ 6C2F             >                // dummy db directives used to calculate length of namec
1890+ 6C2F 4C 53 48 49 >                db      "LSHIFT"
1890+ 6C33 46 54       >
1890+ 6C35             >len_NFA         defl    $ - temp_NFA
1890+ 6C35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ 6C2F             >
1890+ 6C2F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ 6C30 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1890+ 6C34 46 54       >
1890+ 6C36             >                org     $-1                 // alter last byte of Name just above to set
1890+ 6C35 D4          >                db      {b $} | END_BIT     // msb as name end
1890+ 6C36             >
1890+ 6C36 20 6C       >                dw      last_NFA            // Link to previous definition Name
1890+ 6C38             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 6C38 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1890+ 6C38             >                else
1890+ 6C38 3A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1890+ 6C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 6C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 6C3A             >
1890+ 6C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 6C3A D1                           pop     de
1892+ 6C3B
1893+ 6C3B E1                           pop     hl
1894+ 6C3C 7B                           ld      a, e
1895+ 6C3D B7                           or      a
1896+ 6C3E 28 04                        jr      z, Lshift_Zero
1897+ 6C40              Lshift_Loop:
1898+ 6C40 29                                   add     hl, hl
1899+ 6C41 3D                                   dec     a
1900+ 6C42 20 FC                            jr      nz, Lshift_Loop
1901+ 6C44              Lshift_Zero:
1902+ 6C44
1903+ 6C44
1904+ 6C44                              psh1
1904+ 6C44 E5          >                push    hl
1904+ 6C45 DD E9       >                jp      (ix)
1905+ 6C47
1906+ 6C47              //  ______________________________________________________________________
1907+ 6C47              //
1908+ 6C47              // rshift       n1 u -- n2
1909+ 6C47              // bit right shift of u bits
1910+ 6C47                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1910+ 6C47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1910+ 6C47             >
1910+ 6C47             >                // dummy db directives used to calculate length of namec
1910+ 6C47 52 53 48 49 >                db      "RSHIFT"
1910+ 6C4B 46 54       >
1910+ 6C4D             >len_NFA         defl    $ - temp_NFA
1910+ 6C4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1910+ 6C47             >
1910+ 6C47 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1910+ 6C48 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1910+ 6C4C 46 54       >
1910+ 6C4E             >                org     $-1                 // alter last byte of Name just above to set
1910+ 6C4D D4          >                db      {b $} | END_BIT     // msb as name end
1910+ 6C4E             >
1910+ 6C4E 2F 6C       >                dw      last_NFA            // Link to previous definition Name
1910+ 6C50             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1910+ 6C50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1910+ 6C50             >                else
1910+ 6C50 52 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1910+ 6C52             >                endif           ; ok        // for other definitions it "points" the correct handler
1910+ 6C52             >                // Use of "; ok" to suppress "warning[fwdref]"
1910+ 6C52             >
1910+ 6C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1911+ 6C52 D1                           pop     de
1912+ 6C53
1913+ 6C53 E1                           pop     hl
1914+ 6C54 7B                           ld      a, e
1915+ 6C55 B7                           or      a
1916+ 6C56 28 07                        jr      z, Rshift_Zero
1917+ 6C58              Rshift_Loop:
1918+ 6C58 CB 3C                                srl     h
1919+ 6C5A CB 1D                                rr      l
1920+ 6C5C 3D                                   dec     a
1921+ 6C5D 20 F9                            jr      nz, Rshift_Loop
1922+ 6C5F              Rshift_Zero:
1923+ 6C5F
1924+ 6C5F
1925+ 6C5F                              psh1
1925+ 6C5F E5          >                push    hl
1925+ 6C60 DD E9       >                jp      (ix)
1926+ 6C62
1927+ 6C62              //  ______________________________________________________________________
1928+ 6C62              //
1929+ 6C62              // cells        n1 -- n2
1930+ 6C62              // decrement by 2 top of stack
1931+ 6C62                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1931+ 6C62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1931+ 6C62             >
1931+ 6C62             >                // dummy db directives used to calculate length of namec
1931+ 6C62 43 45 4C 4C >                db      "CELLS"
1931+ 6C66 53          >
1931+ 6C67             >len_NFA         defl    $ - temp_NFA
1931+ 6C67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1931+ 6C62             >
1931+ 6C62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1931+ 6C63 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1931+ 6C67 53          >
1931+ 6C68             >                org     $-1                 // alter last byte of Name just above to set
1931+ 6C67 D3          >                db      {b $} | END_BIT     // msb as name end
1931+ 6C68             >
1931+ 6C68 47 6C       >                dw      last_NFA            // Link to previous definition Name
1931+ 6C6A             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1931+ 6C6A 1B 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1931+ 6C6C             >                else
1931+ 6C6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1931+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
1931+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
1931+ 6C6C             >
1931+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1932+ 6C6C
1933+ 6C6C
1934+ 6C6C              //  ______________________________________________________________________
1935+ 6C6C
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C6C                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C6C              //  ______________________________________________________________________
   2+ 6C6C              //
   3+ 6C6C              //  L1.asm
   4+ 6C6C              //
   5+ 6C6C              //  Level-1 definitions and derivate
   6+ 6C6C              //  ______________________________________________________________________
   7+ 6C6C
   8+ 6C6C              //  ______________________________________________________________________
   9+ 6C6C              //
  10+ 6C6C              // :            -- cccc     ( compile time )
  11+ 6C6C              //              i*x -- j*x  ( run time )
  12+ 6C6C              // Colon Definition
  13+ 6C6C                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C6C             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C6C             >
  13+ 6C6C             >                // dummy db directives used to calculate length of namec
  13+ 6C6C 3A          >                db      ":"
  13+ 6C6D             >len_NFA         defl    $ - temp_NFA
  13+ 6C6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C6C             >
  13+ 6C6C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C6D 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C6E             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C6D BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C6E             >
  13+ 6C6E 62 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C70             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C70 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C72             >                else
  13+ 6C72 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C72             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C72             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C72             >
  13+ 6C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C72
  15+ 6C72 D9 70                        dw      QEXEC                   // ?exec
  16+ 6C74 94 70                        dw      STORE_CSP               // !csp
  17+ 6C76 43 6E 9B 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C7A 36 6E A8 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C7E D5 76                        dw      CREATE                  // create  ( forward )
  20+ 6C80 86 71                        dw      SMUDGE                  // dmudge
  21+ 6C82 71 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C84 DC 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C86                                                              // ... immediate
  24+ 6C86              Enter_Ptr:
  25+ 6C86                              // via call coded in CFA
  26+ 6C86                              ldhlrp
  26+ 6C86 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C89 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C8A 70                           ld      (hl), b
  29+ 6C8B 2B                           dec     hl
  30+ 6C8C 71                           ld      (hl), c
  31+ 6C8D                              ldrphl
  31+ 6C8D 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C90 13                           inc     de
  33+ 6C91 4B                           ld      c, e
  34+ 6C92 42                           ld      b, d
  35+ 6C93                              next
  35+ 6C93 DD E9       >                jp      (ix)
  36+ 6C95
  37+ 6C95              //  ______________________________________________________________________
  38+ 6C95              //
  39+ 6C95              // ;            --
  40+ 6C95              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C95                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C95             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C95             >
  41+ 6C95             >                // dummy db directives used to calculate length of namec
  41+ 6C95 3B          >                db      ";"
  41+ 6C96             >len_NFA         defl    $ - temp_NFA
  41+ 6C96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C95             >
  41+ 6C95 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C96 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C97             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C96 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C97             >
  41+ 6C97 6C 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C99             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C99 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C9B             >                else
  41+ 6C9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C9B             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C9B             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C9B             >
  41+ 6C9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C9B
  43+ 6C9B 03 71                        dw      QCSP                    // ?csp
  44+ 6C9D 3A 71 A3 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CA1 86 71                        dw      SMUDGE                  // smudge
  46+ 6CA3 63 71                        dw      SQUARED_OPEN            // [
  47+ 6CA5 A3 69                        dw      EXIT                    // ; immediate
  48+ 6CA7
  49+ 6CA7              //  ______________________________________________________________________
  50+ 6CA7              //
  51+ 6CA7              // noop         --
  52+ 6CA7                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6CA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6CA7             >
  52+ 6CA7             >                // dummy db directives used to calculate length of namec
  52+ 6CA7 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CAB             >len_NFA         defl    $ - temp_NFA
  52+ 6CAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6CA7             >
  52+ 6CA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6CA8 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CAC             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CAB D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CAC             >
  52+ 6CAC 95 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CAE             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CAE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CAE             >                else
  52+ 6CAE B0 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CB0             >
  52+ 6CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CB0                              next
  53+ 6CB0 DD E9       >                jp      (ix)
  54+ 6CB2
  55+ 6CB2              //  ______________________________________________________________________
  56+ 6CB2              //
  57+ 6CB2              // constant     n -- cccc     ( compile time )
  58+ 6CB2              //              -- n          ( run time )
  59+ 6CB2              // Constant definition.
  60+ 6CB2                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CB2             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CB2             >
  60+ 6CB2             >                // dummy db directives used to calculate length of namec
  60+ 6CB2 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CB6 54 41 4E 54 >
  60+ 6CBA             >len_NFA         defl    $ - temp_NFA
  60+ 6CBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CB2             >
  60+ 6CB2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CB3 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CB7 54 41 4E 54 >
  60+ 6CBB             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CBA D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CBB             >
  60+ 6CBB A7 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CBD             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CBD 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CBF             >                else
  60+ 6CBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CBF             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CBF             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CBF             >
  60+ 6CBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CBF
  62+ 6CBF D5 76                        dw      CREATE                  // create
  63+ 6CC1 FE 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CC3 DC 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CC5              Constant_Ptr:
  66+ 6CC5
  67+ 6CC5 13                           inc     de
  68+ 6CC6 EB                           ex      de, hl
  69+ 6CC7
  70+ 6CC7 5E                           ld      e, (hl)
  71+ 6CC8 23                           inc     hl
  72+ 6CC9 56                           ld      d, (hl)
  73+ 6CCA D5                           push    de
  74+ 6CCB                              next
  74+ 6CCB DD E9       >                jp      (ix)
  75+ 6CCD
  76+ 6CCD              //  ______________________________________________________________________
  77+ 6CCD              //
  78+ 6CCD              // variable     n -- cccc     ( compile time )
  79+ 6CCD              //              -- a          ( run time )
  80+ 6CCD              // Variable definition, n is the initial value.
  81+ 6CCD                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CCD             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CCD             >
  81+ 6CCD             >                // dummy db directives used to calculate length of namec
  81+ 6CCD 56 41 52 49 >                db      "VARIABLE"
  81+ 6CD1 41 42 4C 45 >
  81+ 6CD5             >len_NFA         defl    $ - temp_NFA
  81+ 6CD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CCD             >
  81+ 6CCD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CCE 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CD2 41 42 4C 45 >
  81+ 6CD6             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CD5 C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CD6             >
  81+ 6CD6 B2 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CD8             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CD8 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CDA             >                else
  81+ 6CDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CDA             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CDA             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CDA             >
  81+ 6CDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CDA
  83+ 6CDA 03 6D                        dw      ZERO
  84+ 6CDC BD 6C                        dw      CONSTANT                // constant
  85+ 6CDE DC 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CE0              Variable_Ptr:
  87+ 6CE0
  88+ 6CE0 13                           inc     de
  89+ 6CE1 D5                           push    de                  // balance TOS before overwrite it
  90+ 6CE2
  91+ 6CE2                              next
  91+ 6CE2 DD E9       >                jp      (ix)
  92+ 6CE4
  93+ 6CE4              //  ______________________________________________________________________
  94+ 6CE4              //
  95+ 6CE4              // user         b -- cccc     ( compile time )
  96+ 6CE4              //              -- a          ( run time )
  97+ 6CE4              // User variable definition
  98+ 6CE4                              Colon_Def USER, "USER", is_normal
  98+ 6CE4             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CE4             >
  98+ 6CE4             >                // dummy db directives used to calculate length of namec
  98+ 6CE4 55 53 45 52 >                db      "USER"
  98+ 6CE8             >len_NFA         defl    $ - temp_NFA
  98+ 6CE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CE4             >
  98+ 6CE4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CE5 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CE9             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CE8 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CE9             >
  98+ 6CE9 CD 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CEB             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CEB 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CED             >                else
  98+ 6CED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CED             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CED             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CED             >
  98+ 6CED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CED
 100+ 6CED D5 76                        dw      CREATE                  // create
 101+ 6CEF 0F 6F                        dw      CCOMMA                  // c,
 102+ 6CF1 DC 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CF3
 104+ 6CF3
 105+ 6CF3              User_Ptr:
 106+ 6CF3                              // via call coded in CFA
 107+ 6CF3 13                           inc     de
 108+ 6CF4 EB                           ex      de, hl
 109+ 6CF5 5E                           ld      e, (hl)
 110+ 6CF6 16 00                        ld      d, 0
 111+ 6CF8 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CFB 19                           add     hl, de
 113+ 6CFC
 114+ 6CFC                              psh1
 114+ 6CFC E5          >                push    hl
 114+ 6CFD DD E9       >                jp      (ix)
 115+ 6CFF
 116+ 6CFF              //  ______________________________________________________________________
 117+ 6CFF              //
 118+ 6CFF                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CFF             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CFF             >
 118+ 6CFF             >                // dummy db directives used to calculate length of namec
 118+ 6CFF 30          >                db      "0"
 118+ 6D00             >len_NFA         defl    $ - temp_NFA
 118+ 6D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CFF             >
 118+ 6CFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D00 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D01             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D00 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D01             >
 118+ 6D01 E4 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D03             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D03 C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D05             >                else
 118+ 6D05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D05             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D05             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D05             >
 118+ 6D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D05 00 00       >                dw      0
 119+ 6D07                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D07             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D07             >
 119+ 6D07             >                // dummy db directives used to calculate length of namec
 119+ 6D07 31          >                db      "1"
 119+ 6D08             >len_NFA         defl    $ - temp_NFA
 119+ 6D08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D07             >
 119+ 6D07 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D08 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D09             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D08 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D09             >
 119+ 6D09 FF 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D0B             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D0B C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D0D             >                else
 119+ 6D0D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D0D             >
 119+ 6D0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D0D 01 00       >                dw      1
 120+ 6D0F                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D0F             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D0F             >
 120+ 6D0F             >                // dummy db directives used to calculate length of namec
 120+ 6D0F 32          >                db      "2"
 120+ 6D10             >len_NFA         defl    $ - temp_NFA
 120+ 6D10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D0F             >
 120+ 6D0F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D10 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D11             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D10 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D11             >
 120+ 6D11 07 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D13             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D13 C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D15             >                else
 120+ 6D15 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D15             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D15             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D15             >
 120+ 6D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D15 02 00       >                dw      2
 121+ 6D17                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D17             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D17             >
 121+ 6D17             >                // dummy db directives used to calculate length of namec
 121+ 6D17 33          >                db      "3"
 121+ 6D18             >len_NFA         defl    $ - temp_NFA
 121+ 6D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D17             >
 121+ 6D17 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D18 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D19             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D18 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D19             >
 121+ 6D19 0F 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D1B             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D1B C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D1D             >                else
 121+ 6D1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D1D             >
 121+ 6D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D1D 03 00       >                dw      3
 122+ 6D1F                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D1F             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D1F             >
 122+ 6D1F             >                // dummy db directives used to calculate length of namec
 122+ 6D1F 2D 31       >                db      "-1"
 122+ 6D21             >len_NFA         defl    $ - temp_NFA
 122+ 6D21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D1F             >
 122+ 6D1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D20 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D22             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D21 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D22             >
 122+ 6D22 17 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D24             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D24 C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D26             >                else
 122+ 6D26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D26             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D26             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D26             >
 122+ 6D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D26 FF FF       >                dw      -1
 123+ 6D28                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D28             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D28             >
 123+ 6D28             >                // dummy db directives used to calculate length of namec
 123+ 6D28 42 4C       >                db      "BL"
 123+ 6D2A             >len_NFA         defl    $ - temp_NFA
 123+ 6D2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D28             >
 123+ 6D28 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D29 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D2B             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D2A CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D2B             >
 123+ 6D2B 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D2D             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D2D C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D2F             >                else
 123+ 6D2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D2F             >
 123+ 6D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D2F 20 00       >                dw      $20
 124+ 6D31                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D31             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D31             >
 124+ 6D31             >                // dummy db directives used to calculate length of namec
 124+ 6D31 43 2F 4C    >                db      "C/L"
 124+ 6D34             >len_NFA         defl    $ - temp_NFA
 124+ 6D34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D31             >
 124+ 6D31 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D32 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D35             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D34 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D35             >
 124+ 6D35 28 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D37             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D37 C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D39             >                else
 124+ 6D39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D39             >
 124+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D39 40 00       >                dw      64
 125+ 6D3B                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D3B             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D3B             >
 125+ 6D3B             >                // dummy db directives used to calculate length of namec
 125+ 6D3B 42 2F 42 55 >                db      "B/BUF"
 125+ 6D3F 46          >
 125+ 6D40             >len_NFA         defl    $ - temp_NFA
 125+ 6D40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D3B             >
 125+ 6D3B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D3C 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D40 46          >
 125+ 6D41             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D40 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D41             >
 125+ 6D41 31 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D43             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D43 C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D45             >                else
 125+ 6D45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D45             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D45             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D45             >
 125+ 6D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D45 00 02       >                dw      512
 126+ 6D47                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D47             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D47             >
 126+ 6D47             >                // dummy db directives used to calculate length of namec
 126+ 6D47 42 2F 53 43 >                db      "B/SCR"
 126+ 6D4B 52          >
 126+ 6D4C             >len_NFA         defl    $ - temp_NFA
 126+ 6D4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D47             >
 126+ 6D47 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D48 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D4C 52          >
 126+ 6D4D             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D4C D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D4D             >
 126+ 6D4D 3B 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D4F             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D4F C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D51             >                else
 126+ 6D51 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D51             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D51             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D51             >
 126+ 6D51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D51 02 00       >                dw      2
 127+ 6D53                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D53             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D53             >
 127+ 6D53             >                // dummy db directives used to calculate length of namec
 127+ 6D53 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D57 52          >
 127+ 6D58             >len_NFA         defl    $ - temp_NFA
 127+ 6D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D53             >
 127+ 6D53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D54 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D58 52          >
 127+ 6D59             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D58 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D59             >
 127+ 6D59 47 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D5B             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D5B C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D5D             >                else
 127+ 6D5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D5D             >
 127+ 6D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D5D 10 00       >                dw      16
 128+ 6D5F
 129+ 6D5F              //  ______________________________________________________________________
 130+ 6D5F              //
 131+ 6D5F              // +origin         --
 132+ 6D5F              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D5F              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D5F              //              dw      PLUS                    // +
 135+ 6D5F              //              dw      EXIT                    // ;
 136+ 6D5F                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D5F             >
 136+ 6D5F             >                // dummy db directives used to calculate length of namec
 136+ 6D5F 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D63 47 49 4E    >
 136+ 6D66             >len_NFA         defl    $ - temp_NFA
 136+ 6D66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D5F             >
 136+ 6D5F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D60 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D64 47 49 4E    >
 136+ 6D67             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D66 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D67             >
 136+ 6D67 53 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D69             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D69 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D69             >                else
 136+ 6D69 6B 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D6B             >
 136+ 6D6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D6B E1                           pop     hl
 138+ 6D6C 11 66 63                     ld      de,  Cold_origin
 139+ 6D6F 19                           add     hl, de
 140+ 6D70 E5                           push    hl
 141+ 6D71                              next
 141+ 6D71 DD E9       >                jp      (ix)
 142+ 6D73
 143+ 6D73
 144+ 6D73              //  ______________________________________________________________________
 145+ 6D73              //
 146+ 6D73                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D73             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D73             >
 146+ 6D73             >                // dummy db directives used to calculate length of namec
 146+ 6D73 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D77 54 29       >
 146+ 6D79             >len_NFA         defl    $ - temp_NFA
 146+ 6D79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D73             >
 146+ 6D73 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D74 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D78 54 29       >
 146+ 6D7A             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D79 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D7A             >
 146+ 6D7A 5F 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D7C             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D7C C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D7E             >                else
 146+ 6D7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D7E             >
 146+ 6D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D7E 98 63       >                dw      Next_Ptr
 147+ 6D80
 148+ 6D80              //  ______________________________________________________________________
 149+ 6D80              //
 150+ 6D80
 151+ 6D80                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D80             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D80             >
 151+ 6D80             >                // dummy db directives used to calculate length of namec
 151+ 6D80 53 30       >                db      "S0"
 151+ 6D82             >len_NFA         defl    $ - temp_NFA
 151+ 6D82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D80             >
 151+ 6D80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D81 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D83             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D82 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D83             >
 151+ 6D83 73 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D85             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D85 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D87             >                else
 151+ 6D87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D87             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D87             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D87             >
 151+ 6D87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D87 06          >                db      06
 152+ 6D88                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D88             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D88             >
 152+ 6D88             >                // dummy db directives used to calculate length of namec
 152+ 6D88 52 30       >                db      "R0"
 152+ 6D8A             >len_NFA         defl    $ - temp_NFA
 152+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D88             >
 152+ 6D88 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D89 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D8A B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D8B             >
 152+ 6D8B 80 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D8D             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D8D F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D8F             >                else
 152+ 6D8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D8F             >
 152+ 6D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D8F 08          >                db      08
 153+ 6D90                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D90             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D90             >
 153+ 6D90             >                // dummy db directives used to calculate length of namec
 153+ 6D90 54 49 42    >                db      "TIB"
 153+ 6D93             >len_NFA         defl    $ - temp_NFA
 153+ 6D93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D90             >
 153+ 6D90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D91 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D94             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D93 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D94             >
 153+ 6D94 88 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D96             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D96 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D98             >                else
 153+ 6D98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D98             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D98             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D98             >
 153+ 6D98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D98 0A          >                db      10
 154+ 6D99                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D99             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D99             >
 154+ 6D99             >                // dummy db directives used to calculate length of namec
 154+ 6D99 57 49 44 54 >                db      "WIDTH"
 154+ 6D9D 48          >
 154+ 6D9E             >len_NFA         defl    $ - temp_NFA
 154+ 6D9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D99             >
 154+ 6D99 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D9A 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D9E 48          >
 154+ 6D9F             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D9E C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D9F             >
 154+ 6D9F 90 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DA1             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DA1 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DA3             >                else
 154+ 6DA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DA3             >
 154+ 6DA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DA3 0C          >                db      12
 155+ 6DA4                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6DA4             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6DA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DA4             >
 155+ 6DA4             >                // dummy db directives used to calculate length of namec
 155+ 6DA4 57 41 52 4E >                db      "WARNING"
 155+ 6DA8 49 4E 47    >
 155+ 6DAB             >len_NFA         defl    $ - temp_NFA
 155+ 6DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DA4             >
 155+ 6DA4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DA5 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6DA9 49 4E 47    >
 155+ 6DAC             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DAB C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DAC             >
 155+ 6DAC 99 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DAE             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DAE F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DB0             >                else
 155+ 6DB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DB0             >
 155+ 6DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DB0 0E          >                db      14
 156+ 6DB1                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6DB1             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6DB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DB1             >
 156+ 6DB1             >                // dummy db directives used to calculate length of namec
 156+ 6DB1 46 45 4E 43 >                db      "FENCE"
 156+ 6DB5 45          >
 156+ 6DB6             >len_NFA         defl    $ - temp_NFA
 156+ 6DB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DB1             >
 156+ 6DB1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DB2 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6DB6 45          >
 156+ 6DB7             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DB6 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DB7             >
 156+ 6DB7 A4 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DB9             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DB9 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DBB             >                else
 156+ 6DBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DBB             >
 156+ 6DBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DBB 10          >                db      16
 157+ 6DBC                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6DBC             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6DBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DBC             >
 157+ 6DBC             >                // dummy db directives used to calculate length of namec
 157+ 6DBC 44 50       >                db      "DP"
 157+ 6DBE             >len_NFA         defl    $ - temp_NFA
 157+ 6DBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DBC             >
 157+ 6DBC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DBD 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6DBF             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DBE D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DBF             >
 157+ 6DBF B1 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DC1             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DC1 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DC3             >                else
 157+ 6DC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DC3             >
 157+ 6DC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DC3 12          >                db      18
 158+ 6DC4                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6DC4             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6DC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DC4             >
 158+ 6DC4             >                // dummy db directives used to calculate length of namec
 158+ 6DC4 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6DC8 4C 49 4E 4B >
 158+ 6DCC             >len_NFA         defl    $ - temp_NFA
 158+ 6DCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DC4             >
 158+ 6DC4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DC5 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6DC9 4C 49 4E 4B >
 158+ 6DCD             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DCC CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DCD             >
 158+ 6DCD BC 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DCF             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DCF F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DD1             >                else
 158+ 6DD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DD1             >
 158+ 6DD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DD1 14          >                db      20
 159+ 6DD2                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DD2             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DD2             >
 159+ 6DD2             >                // dummy db directives used to calculate length of namec
 159+ 6DD2 46 49 52 53 >                db      "FIRST"
 159+ 6DD6 54          >
 159+ 6DD7             >len_NFA         defl    $ - temp_NFA
 159+ 6DD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DD2             >
 159+ 6DD2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DD3 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DD7 54          >
 159+ 6DD8             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DD7 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DD8             >
 159+ 6DD8 C4 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DDA             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DDA F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DDC             >                else
 159+ 6DDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DDC             >
 159+ 6DDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DDC 16          >                db      22
 160+ 6DDD                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DDD             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DDD             >
 160+ 6DDD             >                // dummy db directives used to calculate length of namec
 160+ 6DDD 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DE1 54          >
 160+ 6DE2             >len_NFA         defl    $ - temp_NFA
 160+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DDD             >
 160+ 6DDD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DDE 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DE2 54          >
 160+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DE2 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DE3             >
 160+ 6DE3 D2 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DE5             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DE5 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DE7             >                else
 160+ 6DE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DE7             >
 160+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DE7 18          >                db      24
 161+ 6DE8                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DE8             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DE8             >
 161+ 6DE8             >                // dummy db directives used to calculate length of namec
 161+ 6DE8 45 58 50    >                db      "EXP"
 161+ 6DEB             >len_NFA         defl    $ - temp_NFA
 161+ 6DEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DE8             >
 161+ 6DE8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DE9 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DEC             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DEB D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DEC             >
 161+ 6DEC DD 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DEE             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DEE F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DF0             >                else
 161+ 6DF0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DF0             >
 161+ 6DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DF0 1A          >                db      26
 162+ 6DF1                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DF1             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DF1             >
 162+ 6DF1             >                // dummy db directives used to calculate length of namec
 162+ 6DF1 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DF5 45          >
 162+ 6DF6             >len_NFA         defl    $ - temp_NFA
 162+ 6DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DF1             >
 162+ 6DF1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DF2 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DF6 45          >
 162+ 6DF7             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF6 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DF7             >
 162+ 6DF7 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DF9             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DF9 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DFB             >                else
 162+ 6DFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DFB             >
 162+ 6DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DFB 1C          >                db      28
 163+ 6DFC                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DFC             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DFC             >
 163+ 6DFC             >                // dummy db directives used to calculate length of namec
 163+ 6DFC 42 4C 4B    >                db      "BLK"
 163+ 6DFF             >len_NFA         defl    $ - temp_NFA
 163+ 6DFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DFC             >
 163+ 6DFC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DFD 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6E00             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DFF CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E00             >
 163+ 6E00 F1 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E02             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E02 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E04             >                else
 163+ 6E04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E04             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E04             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E04             >
 163+ 6E04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E04 1E          >                db      30
 164+ 6E05                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6E05             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6E05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E05             >
 164+ 6E05             >                // dummy db directives used to calculate length of namec
 164+ 6E05 3E 49 4E    >                db      ">IN"
 164+ 6E08             >len_NFA         defl    $ - temp_NFA
 164+ 6E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E05             >
 164+ 6E05 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E06 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6E09             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E08 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E09             >
 164+ 6E09 FC 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E0B             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E0B F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E0D             >                else
 164+ 6E0D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E0D             >
 164+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E0D 20          >                db      32
 165+ 6E0E                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6E0E             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6E0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E0E             >
 165+ 6E0E             >                // dummy db directives used to calculate length of namec
 165+ 6E0E 4F 55 54    >                db      "OUT"
 165+ 6E11             >len_NFA         defl    $ - temp_NFA
 165+ 6E11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E0E             >
 165+ 6E0E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E0F 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6E12             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E11 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E12             >
 165+ 6E12 05 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E14             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E14 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E16             >                else
 165+ 6E16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E16             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E16             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E16             >
 165+ 6E16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E16 22          >                db      34
 166+ 6E17                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6E17             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6E17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E17             >
 166+ 6E17             >                // dummy db directives used to calculate length of namec
 166+ 6E17 53 43 52    >                db      "SCR"
 166+ 6E1A             >len_NFA         defl    $ - temp_NFA
 166+ 6E1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E17             >
 166+ 6E17 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E18 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6E1B             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E1A D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E1B             >
 166+ 6E1B 0E 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E1D             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E1D F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E1F             >                else
 166+ 6E1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E1F             >
 166+ 6E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E1F 24          >                db      36
 167+ 6E20                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6E20             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6E20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E20             >
 167+ 6E20             >                // dummy db directives used to calculate length of namec
 167+ 6E20 4F 46 46 53 >                db      "OFFSET"
 167+ 6E24 45 54       >
 167+ 6E26             >len_NFA         defl    $ - temp_NFA
 167+ 6E26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E20             >
 167+ 6E20 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E21 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6E25 45 54       >
 167+ 6E27             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E26 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E27             >
 167+ 6E27 17 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E29             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E29 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E2B             >                else
 167+ 6E2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E2B             >
 167+ 6E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E2B 26          >                db      38
 168+ 6E2C                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6E2C             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6E2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E2C             >
 168+ 6E2C             >                // dummy db directives used to calculate length of namec
 168+ 6E2C 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6E30 45 58 54    >
 168+ 6E33             >len_NFA         defl    $ - temp_NFA
 168+ 6E33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E2C             >
 168+ 6E2C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E2D 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6E31 45 58 54    >
 168+ 6E34             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E33 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E34             >
 168+ 6E34 20 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E36             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E36 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E38             >                else
 168+ 6E38 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E38             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E38             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E38             >
 168+ 6E38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E38 28          >                db      40
 169+ 6E39                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E39             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E39             >
 169+ 6E39             >                // dummy db directives used to calculate length of namec
 169+ 6E39 43 55 52 52 >                db      "CURRENT"
 169+ 6E3D 45 4E 54    >
 169+ 6E40             >len_NFA         defl    $ - temp_NFA
 169+ 6E40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E39             >
 169+ 6E39 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E3A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E3E 45 4E 54    >
 169+ 6E41             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E40 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E41             >
 169+ 6E41 2C 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E43             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E43 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E45             >                else
 169+ 6E45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E45             >
 169+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E45 2A          >                db      42
 170+ 6E46                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E46             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E46             >
 170+ 6E46             >                // dummy db directives used to calculate length of namec
 170+ 6E46 53 54 41 54 >                db      "STATE"
 170+ 6E4A 45          >
 170+ 6E4B             >len_NFA         defl    $ - temp_NFA
 170+ 6E4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E46             >
 170+ 6E46 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E47 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E4B 45          >
 170+ 6E4C             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E4B C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E4C             >
 170+ 6E4C 39 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E4E             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E4E F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E50             >                else
 170+ 6E50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E50             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E50             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E50             >
 170+ 6E50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E50 2C          >                db      44
 171+ 6E51                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E51             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E51             >
 171+ 6E51             >                // dummy db directives used to calculate length of namec
 171+ 6E51 42 41 53 45 >                db      "BASE"
 171+ 6E55             >len_NFA         defl    $ - temp_NFA
 171+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E51             >
 171+ 6E51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E52 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E55 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E56             >
 171+ 6E56 46 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E58             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E58 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E5A             >                else
 171+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E5A             >
 171+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E5A 2E          >                db      46
 172+ 6E5B                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E5B             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E5B             >
 172+ 6E5B             >                // dummy db directives used to calculate length of namec
 172+ 6E5B 44 50 4C    >                db      "DPL"
 172+ 6E5E             >len_NFA         defl    $ - temp_NFA
 172+ 6E5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E5B             >
 172+ 6E5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E5C 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E5F             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E5E CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E5F             >
 172+ 6E5F 51 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E61             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E61 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E63             >                else
 172+ 6E63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E63             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E63             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E63             >
 172+ 6E63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E63 30          >                db      48
 173+ 6E64                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E64             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E64             >
 173+ 6E64             >                // dummy db directives used to calculate length of namec
 173+ 6E64 46 4C 44    >                db      "FLD"
 173+ 6E67             >len_NFA         defl    $ - temp_NFA
 173+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E64             >
 173+ 6E64 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E65 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E67 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E68             >
 173+ 6E68 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E6A             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E6A F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E6C             >                else
 173+ 6E6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E6C             >
 173+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E6C 32          >                db      50
 174+ 6E6D                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E6D             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E6D             >
 174+ 6E6D             >                // dummy db directives used to calculate length of namec
 174+ 6E6D 43 53 50    >                db      "CSP"
 174+ 6E70             >len_NFA         defl    $ - temp_NFA
 174+ 6E70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E6D             >
 174+ 6E6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E6E 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E71             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E70 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E71             >
 174+ 6E71 64 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E73             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E73 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E75             >                else
 174+ 6E75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E75             >
 174+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E75 34          >                db      52
 175+ 6E76                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E76             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E76             >
 175+ 6E76             >                // dummy db directives used to calculate length of namec
 175+ 6E76 52 23       >                db      "R#"
 175+ 6E78             >len_NFA         defl    $ - temp_NFA
 175+ 6E78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E76             >
 175+ 6E76 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E77 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E79             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E78 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E79             >
 175+ 6E79 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E7B             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E7B F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E7D             >                else
 175+ 6E7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E7D             >
 175+ 6E7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E7D 36          >                db      54
 176+ 6E7E                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E7E             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E7E             >
 176+ 6E7E             >                // dummy db directives used to calculate length of namec
 176+ 6E7E 48 4C 44    >                db      "HLD"
 176+ 6E81             >len_NFA         defl    $ - temp_NFA
 176+ 6E81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E7E             >
 176+ 6E7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E7F 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E82             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E81 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E82             >
 176+ 6E82 76 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E84             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E84 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E86             >                else
 176+ 6E86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E86             >
 176+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E86 38          >                db      56
 177+ 6E87                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E87             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E87             >
 177+ 6E87             >                // dummy db directives used to calculate length of namec
 177+ 6E87 55 53 45    >                db      "USE"
 177+ 6E8A             >len_NFA         defl    $ - temp_NFA
 177+ 6E8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E87             >
 177+ 6E87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E88 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E8B             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E8A C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E8B             >
 177+ 6E8B 7E 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E8D             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E8D F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E8F             >                else
 177+ 6E8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E8F             >
 177+ 6E8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E8F 3A          >                db      58
 178+ 6E90                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E90             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E90             >
 178+ 6E90             >                // dummy db directives used to calculate length of namec
 178+ 6E90 50 52 45 56 >                db      "PREV"
 178+ 6E94             >len_NFA         defl    $ - temp_NFA
 178+ 6E94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E90             >
 178+ 6E90 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E91 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E95             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E94 D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E95             >
 178+ 6E95 87 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E97             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E97 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E99             >                else
 178+ 6E99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E99             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E99             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E99             >
 178+ 6E99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E99 3C          >                db      60
 179+ 6E9A                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E9A             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E9A             >
 179+ 6E9A             >                // dummy db directives used to calculate length of namec
 179+ 6E9A 4C 50       >                db      "LP"
 179+ 6E9C             >len_NFA         defl    $ - temp_NFA
 179+ 6E9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E9A             >
 179+ 6E9A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E9B 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E9D             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E9C D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E9D             >
 179+ 6E9D 90 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E9F             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E9F F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EA1             >                else
 179+ 6EA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EA1             >
 179+ 6EA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EA1 3E          >                db      62
 180+ 6EA2                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6EA2             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6EA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EA2             >
 180+ 6EA2             >                // dummy db directives used to calculate length of namec
 180+ 6EA2 50 4C 41 43 >                db      "PLACE"
 180+ 6EA6 45          >
 180+ 6EA7             >len_NFA         defl    $ - temp_NFA
 180+ 6EA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EA2             >
 180+ 6EA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EA3 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6EA7 45          >
 180+ 6EA8             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EA7 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EA8             >
 180+ 6EA8 9A 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EAA             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EAA F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EAC             >                else
 180+ 6EAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EAC             >
 180+ 6EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EAC 40          >                db      64
 181+ 6EAD                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6EAD             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EAD             >
 181+ 6EAD             >                // dummy db directives used to calculate length of namec
 181+ 6EAD 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6EB1 43 45 2D 49 >
 181+ 6EB5 44          >
 181+ 6EB6             >len_NFA         defl    $ - temp_NFA
 181+ 6EB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EAD             >
 181+ 6EAD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EAE 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6EB2 43 45 2D 49 >
 181+ 6EB6 44          >
 181+ 6EB7             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EB6 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EB7             >
 181+ 6EB7 A2 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EB9             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EB9 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EBB             >                else
 181+ 6EBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EBB             >
 181+ 6EBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EBB 42          >                db      66
 182+ 6EBC                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6EBC             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6EBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EBC             >
 182+ 6EBC             >                // dummy db directives used to calculate length of namec
 182+ 6EBC 53 50 41 4E >                db      "SPAN"
 182+ 6EC0             >len_NFA         defl    $ - temp_NFA
 182+ 6EC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EBC             >
 182+ 6EBC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EBD 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6EC1             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EC0 CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EC1             >
 182+ 6EC1 AD 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EC3             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EC3 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6EC5             >                else
 182+ 6EC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6EC5             >
 182+ 6EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6EC5 44          >                db      68
 183+ 6EC6                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6EC6             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6EC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6EC6             >
 183+ 6EC6             >                // dummy db directives used to calculate length of namec
 183+ 6EC6 48 41 4E 44 >                db      "HANDLER"
 183+ 6ECA 4C 45 52    >
 183+ 6ECD             >len_NFA         defl    $ - temp_NFA
 183+ 6ECD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6EC6             >
 183+ 6EC6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6EC7 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6ECB 4C 45 52    >
 183+ 6ECE             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6ECD D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6ECE             >
 183+ 6ECE BC 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6ED0             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6ED0 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6ED2             >                else
 183+ 6ED2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6ED2             >
 183+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6ED2 46          >                db      70
 184+ 6ED3                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6ED3             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6ED3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6ED3             >
 184+ 6ED3             >                // dummy db directives used to calculate length of namec
 184+ 6ED3 48 50       >                db      "HP"
 184+ 6ED5             >len_NFA         defl    $ - temp_NFA
 184+ 6ED5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6ED3             >
 184+ 6ED3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6ED4 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6ED6             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6ED5 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6ED6             >
 184+ 6ED6 C6 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6ED8             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6ED8 F3 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EDA             >                else
 184+ 6EDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EDA             >
 184+ 6EDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EDA 48          >                db      72
 185+ 6EDB
 186+ 6EDB              //  ______________________________________________________________________
 187+ 6EDB              //
 188+ 6EDB              // here         -- a
 189+ 6EDB                              Colon_Def HERE, "HERE", is_normal
 189+ 6EDB             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6EDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6EDB             >
 189+ 6EDB             >                // dummy db directives used to calculate length of namec
 189+ 6EDB 48 45 52 45 >                db      "HERE"
 189+ 6EDF             >len_NFA         defl    $ - temp_NFA
 189+ 6EDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6EDB             >
 189+ 6EDB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6EDC 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EE0             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EDF C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EE0             >
 189+ 6EE0 D3 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EE2             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EE2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EE4             >                else
 189+ 6EE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EE4             >
 189+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EE4 C1 6D 9B 6B                  dw      DP, FETCH               // dp @
 191+ 6EE8 A3 69                        dw      EXIT                    // ;
 192+ 6EEA
 193+ 6EEA              //  ______________________________________________________________________
 194+ 6EEA              //
 195+ 6EEA              // allot        n --
 196+ 6EEA                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EEA             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EEA             >
 196+ 6EEA             >                // dummy db directives used to calculate length of namec
 196+ 6EEA 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EEE 54          >
 196+ 6EEF             >len_NFA         defl    $ - temp_NFA
 196+ 6EEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EEA             >
 196+ 6EEA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EEB 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EEF 54          >
 196+ 6EF0             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EEF D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EF0             >
 196+ 6EF0 DB 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EF2             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EF2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EF4             >                else
 196+ 6EF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EF4             >
 196+ 6EF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EF4 C1 6D 78 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EF8 A3 69                        dw      EXIT                    // ;
 199+ 6EFA
 200+ 6EFA              //  ______________________________________________________________________
 201+ 6EFA              //
 202+ 6EFA              // comma        n --
 203+ 6EFA                              Colon_Def COMMA, ",", is_normal
 203+ 6EFA             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EFA             >
 203+ 6EFA             >                // dummy db directives used to calculate length of namec
 203+ 6EFA 2C          >                db      ","
 203+ 6EFB             >len_NFA         defl    $ - temp_NFA
 203+ 6EFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EFA             >
 203+ 6EFA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EFB 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6EFC             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EFB AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EFC             >
 203+ 6EFC EA 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6EFE             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6EFE 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F00             >                else
 203+ 6F00 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F00             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F00             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F00             >
 203+ 6F00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F00 E2 6E A8 6B                  dw      HERE, STORE             // here !
 205+ 6F04 13 6D F2 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6F08 A3 69                        dw      EXIT                    // ;
 207+ 6F0A
 208+ 6F0A              //  ______________________________________________________________________
 209+ 6F0A              //
 210+ 6F0A              // ccomma       c --
 211+ 6F0A                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6F0A             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6F0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6F0A             >
 211+ 6F0A             >                // dummy db directives used to calculate length of namec
 211+ 6F0A 43 2C       >                db      "C,"
 211+ 6F0C             >len_NFA         defl    $ - temp_NFA
 211+ 6F0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6F0A             >
 211+ 6F0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6F0B 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6F0D             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6F0C AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6F0D             >
 211+ 6F0D FA 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6F0F             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6F0F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6F11             >                else
 211+ 6F11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6F11             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6F11             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6F11             >
 211+ 6F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6F11 E2 6E C4 6B                  dw      HERE, CSTORE            // here c!
 213+ 6F15 0B 6D F2 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6F19 A3 69                        dw      EXIT                    // ;
 215+ 6F1B
 216+ 6F1B              //  ______________________________________________________________________
 217+ 6F1B              //
 218+ 6F1B              // s>d          n -- d
 219+ 6F1B              // converts a single precision integer in a double precision
 220+ 6F1B                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6F1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6F1B             >
 220+ 6F1B             >                // dummy db directives used to calculate length of namec
 220+ 6F1B 53 3E 44    >                db      "S>D"
 220+ 6F1E             >len_NFA         defl    $ - temp_NFA
 220+ 6F1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6F1B             >
 220+ 6F1B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6F1C 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6F1F             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6F1E C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6F1F             >
 220+ 6F1F 0A 6F       >                dw      last_NFA            // Link to previous definition Name
 220+ 6F21             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6F21 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6F21             >                else
 220+ 6F21 23 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6F23             >
 220+ 6F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6F23 D1                           pop     de
 222+ 6F24 21 00 00                     ld      hl, 0
 223+ 6F27 7A                           ld      a, d
 224+ 6F28 E6 80                        and     $80
 225+ 6F2A 28 01                        jr      z, S_to_D_Skip
 226+ 6F2C 2B                           dec     hl                  // $FFFF
 227+ 6F2D              S_to_D_Skip:
 228+ 6F2D D5                           push    de
 229+ 6F2E E5                           push    hl
 230+ 6F2F                              next
 230+ 6F2F DD E9       >                jp      (ix)
 231+ 6F31
 232+ 6F31              //  ______________________________________________________________________
 233+ 6F31              //
 234+ 6F31              // -            n1 n2 -- n3
 235+ 6F31              // subtraction
 236+ 6F31                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6F31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6F31             >
 236+ 6F31             >                // dummy db directives used to calculate length of namec
 236+ 6F31 2D          >                db      "-"
 236+ 6F32             >len_NFA         defl    $ - temp_NFA
 236+ 6F32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6F31             >
 236+ 6F31 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F32 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F33             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F32 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F33             >
 236+ 6F33 1B 6F       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F35             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F35 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F35             >                else
 236+ 6F35 37 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F37             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F37             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F37             >
 236+ 6F37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F37 D1                           pop     de
 238+ 6F38 E1                           pop     hl
 239+ 6F39 A7                           and     a
 240+ 6F3A ED 52                        sbc     hl, de
 241+ 6F3C
 242+ 6F3C                              psh1
 242+ 6F3C E5          >                push    hl
 242+ 6F3D DD E9       >                jp      (ix)
 243+ 6F3F
 244+ 6F3F              //  ______________________________________________________________________
 245+ 6F3F              //
 246+ 6F3F              // =            n1 n2 -- n3
 247+ 6F3F              // equals
 248+ 6F3F                              Colon_Def EQUALS, "=", is_normal
 248+ 6F3F             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F3F             >
 248+ 6F3F             >                // dummy db directives used to calculate length of namec
 248+ 6F3F 3D          >                db      "="
 248+ 6F40             >len_NFA         defl    $ - temp_NFA
 248+ 6F40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F3F             >
 248+ 6F3F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F40 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F41             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F40 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F41             >
 248+ 6F41 31 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F43             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F43 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F45             >                else
 248+ 6F45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F45             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F45             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F45             >
 248+ 6F45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F45 35 6F E5 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F49 A3 69                        dw      EXIT                    // ;
 251+ 6F4B
 252+ 6F4B              //  ______________________________________________________________________
 253+ 6F4B              //
 254+ 6F4B              // u<           u1 u2 -- u3
 255+ 6F4B              // unsigned less-than
 256+ 6F4B                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F4B             >
 256+ 6F4B             >                // dummy db directives used to calculate length of namec
 256+ 6F4B 55 3C       >                db      "U<"
 256+ 6F4D             >len_NFA         defl    $ - temp_NFA
 256+ 6F4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F4B             >
 256+ 6F4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F4C 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F4E             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F4D BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F4E             >
 256+ 6F4E 3F 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F50             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F50             >                else
 256+ 6F50 52 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F52             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F52             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F52             >
 256+ 6F52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F52 D1                           pop     de
 258+ 6F53 E1                           pop     hl
 259+ 6F54 A7                           and     a
 260+ 6F55 ED 52                        sbc     hl, de
 261+ 6F57 21 FF FF                     ld      hl, -1
 262+ 6F5A 38 01                        jr      c, ULess_Skip
 263+ 6F5C 23                               inc     hl
 264+ 6F5D              ULess_Skip:
 265+ 6F5D
 266+ 6F5D                              psh1
 266+ 6F5D E5          >                push    hl
 266+ 6F5E DD E9       >                jp      (ix)
 267+ 6F60
 268+ 6F60              //  ______________________________________________________________________
 269+ 6F60              //
 270+ 6F60              // <           n1 n2 -- n3
 271+ 6F60              // less-than
 272+ 6F60                              New_Def LESS, "<", is_code, is_normal
 272+ 6F60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F60             >
 272+ 6F60             >                // dummy db directives used to calculate length of namec
 272+ 6F60 3C          >                db      "<"
 272+ 6F61             >len_NFA         defl    $ - temp_NFA
 272+ 6F61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F60             >
 272+ 6F60 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F61 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F62             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F61 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F62             >
 272+ 6F62 4B 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F64             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F64 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F64             >                else
 272+ 6F64 66 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F66             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F66             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F66             >
 272+ 6F66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F66 D1                           pop     de
 274+ 6F67 E1                           pop     hl
 275+ 6F68 7C                           ld      a, h
 276+ 6F69 EE 80                        xor     $80
 277+ 6F6B 67                           ld      h, a
 278+ 6F6C 7A                           ld      a, d
 279+ 6F6D EE 80                        xor     $80
 280+ 6F6F 57                           ld      d, a
 281+ 6F70              //              and     a
 282+ 6F70 ED 52                        sbc     hl, de
 283+ 6F72 ED 62                        sbc     hl, hl
 284+ 6F74                              psh1
 284+ 6F74 E5          >                push    hl
 284+ 6F75 DD E9       >                jp      (ix)
 285+ 6F77
 286+ 6F77              //  ______________________________________________________________________
 287+ 6F77              //
 288+ 6F77              // >            n1 n2 -- n3
 289+ 6F77              // greater than
 290+ 6F77                              Colon_Def GREATER, ">", is_normal
 290+ 6F77             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 290+ 6F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6F77             >
 290+ 6F77             >                // dummy db directives used to calculate length of namec
 290+ 6F77 3E          >                db      ">"
 290+ 6F78             >len_NFA         defl    $ - temp_NFA
 290+ 6F78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6F77             >
 290+ 6F77 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6F78 3E          >                db      ">"               // name string in 7-bit ascii, but
 290+ 6F79             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6F78 BE          >                db      {b $} | END_BIT     // msb as name end
 290+ 6F79             >
 290+ 6F79 60 6F       >                dw      last_NFA            // Link to previous definition Name
 290+ 6F7B             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6F7B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 6F7D             >                else
 290+ 6F7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6F7D             >
 290+ 6F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6F7D FB 6A 64 6F                  dw      SWAP, LESS              // swap <
 292+ 6F81 A3 69                        dw      EXIT                    // ;
 293+ 6F83              //  ______________________________________________________________________
 294+ 6F83              //
 295+ 6F83              // min          n1 n2 -- n3
 296+ 6F83              // minimum between n1 and n2
 297+ 6F83                              Colon_Def MIN, "MIN" , is_normal
 297+ 6F83             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 297+ 6F83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6F83             >
 297+ 6F83             >                // dummy db directives used to calculate length of namec
 297+ 6F83 4D 49 4E    >                db      "MIN"
 297+ 6F86             >len_NFA         defl    $ - temp_NFA
 297+ 6F86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6F83             >
 297+ 6F83 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6F84 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 297+ 6F87             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6F86 CE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6F87             >
 297+ 6F87 77 6F       >                dw      last_NFA            // Link to previous definition Name
 297+ 6F89             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6F89 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6F8B             >                else
 297+ 6F8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 6F8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6F8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6F8B             >
 297+ 6F8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6F8B 69 6B                        dw      TWO_DUP                 // 2dup
 299+ 6F8D 7B 6F                        dw      GREATER                 // >
 300+ 6F8F 2C 64                        dw      ZBRANCH
 301+ 6F91 04 00                        dw      Min_Skip - $   // if
 302+ 6F93 FB 6A                        dw          SWAP                //      swap
 303+ 6F95              Min_Skip:                                       // endif
 304+ 6F95 D3 6A                        dw      DROP                    // drop
 305+ 6F97 A3 69                        dw      EXIT                    // ;
 306+ 6F99
 307+ 6F99              //  ______________________________________________________________________
 308+ 6F99              //
 309+ 6F99              // max          n1 n2 -- n3
 310+ 6F99              // maximum between n1 and n2
 311+ 6F99                              Colon_Def MAX, "MAX", is_normal
 311+ 6F99             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 311+ 6F99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ 6F99             >
 311+ 6F99             >                // dummy db directives used to calculate length of namec
 311+ 6F99 4D 41 58    >                db      "MAX"
 311+ 6F9C             >len_NFA         defl    $ - temp_NFA
 311+ 6F9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ 6F99             >
 311+ 6F99 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ 6F9A 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 311+ 6F9D             >                org     $-1                 // alter last byte of Name just above to set
 311+ 6F9C D8          >                db      {b $} | END_BIT     // msb as name end
 311+ 6F9D             >
 311+ 6F9D 83 6F       >                dw      last_NFA            // Link to previous definition Name
 311+ 6F9F             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6F9F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6FA1             >                else
 311+ 6FA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 311+ 6FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6FA1             >
 311+ 6FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6FA1 69 6B                        dw      TWO_DUP                 // 2dup
 313+ 6FA3 64 6F                        dw      LESS                    // <
 314+ 6FA5 2C 64                        dw      ZBRANCH
 315+ 6FA7 04 00                        dw      Max_Skip - $   // if
 316+ 6FA9 FB 6A                        dw          SWAP                //      swap
 317+ 6FAB              Max_Skip:                                       // endif
 318+ 6FAB D3 6A                        dw      DROP                    // drop
 319+ 6FAD A3 69                        dw      EXIT                    // ;
 320+ 6FAF
 321+ 6FAF              //  ______________________________________________________________________
 322+ 6FAF              //
 323+ 6FAF              // ?dup         n -- 0 | n n
 324+ 6FAF              // duplicate if not zero
 325+ 6FAF                              New_Def QDUP, "?DUP", is_code, is_normal
 325+ 6FAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 6FAF             >
 325+ 6FAF             >                // dummy db directives used to calculate length of namec
 325+ 6FAF 3F 44 55 50 >                db      "?DUP"
 325+ 6FB3             >len_NFA         defl    $ - temp_NFA
 325+ 6FB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 6FAF             >
 325+ 6FAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 6FB0 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 325+ 6FB4             >                org     $-1                 // alter last byte of Name just above to set
 325+ 6FB3 D0          >                db      {b $} | END_BIT     // msb as name end
 325+ 6FB4             >
 325+ 6FB4 99 6F       >                dw      last_NFA            // Link to previous definition Name
 325+ 6FB6             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6FB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 325+ 6FB6             >                else
 325+ 6FB6 B8 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 325+ 6FB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6FB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6FB8             >
 325+ 6FB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6FB8              QDup_Ptr:
 327+ 6FB8 E1                           pop     hl
 328+ 6FB9 7C                           ld      a, h
 329+ 6FBA B5                           or      l
 330+ 6FBB 28 01                        jr      z, QDup_Skip
 331+ 6FBD E5                               push    hl
 332+ 6FBE              QDup_Skip:
 333+ 6FBE                              psh1
 333+ 6FBE E5          >                push    hl
 333+ 6FBF DD E9       >                jp      (ix)
 334+ 6FC1
 335+ 6FC1              //  ______________________________________________________________________
 336+ 6FC1              //
 337+ 6FC1              // -dup         n -- 0 | n n
 338+ 6FC1              // duplicate if not zero
 339+ 6FC1                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 339+ 6FC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 6FC1             >
 339+ 6FC1             >                // dummy db directives used to calculate length of namec
 339+ 6FC1 2D 44 55 50 >                db      "-DUP"
 339+ 6FC5             >len_NFA         defl    $ - temp_NFA
 339+ 6FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 6FC1             >
 339+ 6FC1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 6FC2 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 339+ 6FC6             >                org     $-1                 // alter last byte of Name just above to set
 339+ 6FC5 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ 6FC6             >
 339+ 6FC6 AF 6F       >                dw      last_NFA            // Link to previous definition Name
 339+ 6FC8             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6FC8 B8 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 339+ 6FCA             >                else
 339+ 6FCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6FCA             >
 339+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6FCA
 341+ 6FCA              //  ______________________________________________________________________
 342+ 6FCA              //
 343+ 6FCA              // emit         c --
 344+ 6FCA                              Colon_Def EMIT, "EMIT", is_normal
 344+ 6FCA             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 344+ 6FCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FCA             >
 344+ 6FCA             >                // dummy db directives used to calculate length of namec
 344+ 6FCA 45 4D 49 54 >                db      "EMIT"
 344+ 6FCE             >len_NFA         defl    $ - temp_NFA
 344+ 6FCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FCA             >
 344+ 6FCA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FCB 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 344+ 6FCF             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FCE D4          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FCF             >
 344+ 6FCF C1 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FD1             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FD1 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FD3             >                else
 344+ 6FD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FD3             >
 344+ 6FD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FD3 52 66                        dw      C_EMIT                      // (?emit)
 346+ 6FD5 B6 6F                        dw      QDUP                        // ?dup
 347+ 6FD7                                                                  // if
 348+ 6FD7 2C 64                        dw      ZBRANCH
 349+ 6FD9 0A 00                        dw      Emit_Skip - $
 350+ 6FDB 13 66                        dw          EMITC                   //      emitc
 351+ 6FDD 0B 6D                        dw          ONE                     //      1
 352+ 6FDF 14 6E 78 6B                  dw          OUT, PLUSSTORE        //      out +!
 353+ 6FE3              Emit_Skip:                                          // endif
 354+ 6FE3 A3 69                        dw      EXIT                        // ;
 355+ 6FE5
 356+ 6FE5              //  ______________________________________________________________________
 357+ 6FE5              //
 358+ 6FE5              // space        --
 359+ 6FE5                              Colon_Def SPACE, "SPACE", is_normal
 359+ 6FE5             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 359+ 6FE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 6FE5             >
 359+ 6FE5             >                // dummy db directives used to calculate length of namec
 359+ 6FE5 53 50 41 43 >                db      "SPACE"
 359+ 6FE9 45          >
 359+ 6FEA             >len_NFA         defl    $ - temp_NFA
 359+ 6FEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 6FE5             >
 359+ 6FE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 6FE6 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 359+ 6FEA 45          >
 359+ 6FEB             >                org     $-1                 // alter last byte of Name just above to set
 359+ 6FEA C5          >                db      {b $} | END_BIT     // msb as name end
 359+ 6FEB             >
 359+ 6FEB CA 6F       >                dw      last_NFA            // Link to previous definition Name
 359+ 6FED             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6FED 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6FEF             >                else
 359+ 6FEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 6FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6FEF             >
 359+ 6FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6FEF 2D 6D D1 6F                  dw      BL, EMIT                // bl emit
 361+ 6FF3 A3 69                        dw      EXIT                    // ;
 362+ 6FF5
 363+ 6FF5              //  ______________________________________________________________________
 364+ 6FF5              //
 365+ 6FF5              // traverse     a n -- a
 366+ 6FF5              // A dictionary entry is structured as follows
 367+ 6FF5              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 368+ 6FF5              //      +1   word name, last character is toggled with $80
 369+ 6FF5              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 370+ 6FF5              // CFA: +3+n routine address. Colon definitions here have pointer to code
 371+ 6FF5              // PFA: +5+n "is_code", definitions have no PFA.
 372+ 6FF5              //
 373+ 6FF5                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 373+ 6FF5             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 373+ 6FF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ 6FF5             >
 373+ 6FF5             >                // dummy db directives used to calculate length of namec
 373+ 6FF5 54 52 41 56 >                db      "TRAVERSE"
 373+ 6FF9 45 52 53 45 >
 373+ 6FFD             >len_NFA         defl    $ - temp_NFA
 373+ 6FFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ 6FF5             >
 373+ 6FF5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ 6FF6 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 373+ 6FFA 45 52 53 45 >
 373+ 6FFE             >                org     $-1                 // alter last byte of Name just above to set
 373+ 6FFD C5          >                db      {b $} | END_BIT     // msb as name end
 373+ 6FFE             >
 373+ 6FFE E5 6F       >                dw      last_NFA            // Link to previous definition Name
 373+ 7000             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 7000 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 7002             >                else
 373+ 7002 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 373+ 7002             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 7002             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 7002             >
 373+ 7002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 7002 FB 6A                        dw      SWAP                    // swap
 375+ 7004              Traverse_Begin:                                 // begin
 376+ 7004 C3 6A 28 6A                  dw          OVER, PLUS          //      over +
 377+ 7008 A9 63 7F 00                  dw          LIT, 127            //      127
 378+ 700C C3 6A B6 6B                  dw          OVER, CFETCH        //      over @
 379+ 7010 64 6F                        dw          LESS                //      <
 380+ 7012                                                              // until
 381+ 7012 2C 64                        dw      ZBRANCH
 382+ 7014 F0 FF                        dw      Traverse_Begin - $
 383+ 7016 DE 6A                        dw      NIP                     //  nip
 384+ 7018 A3 69                        dw      EXIT                    //  ;
 385+ 701A
 386+ 701A              //  ______________________________________________________________________
 387+ 701A              //
 388+ 701A              // latest       -- nfa
 389+ 701A                              Colon_Def LATEST, "LATEST", is_normal
 389+ 701A             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 389+ 701A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 701A             >
 389+ 701A             >                // dummy db directives used to calculate length of namec
 389+ 701A 4C 41 54 45 >                db      "LATEST"
 389+ 701E 53 54       >
 389+ 7020             >len_NFA         defl    $ - temp_NFA
 389+ 7020             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 701A             >
 389+ 701A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 701B 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 389+ 701F 53 54       >
 389+ 7021             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7020 D4          >                db      {b $} | END_BIT     // msb as name end
 389+ 7021             >
 389+ 7021 F5 6F       >                dw      last_NFA            // Link to previous definition Name
 389+ 7023             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 7023 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 7025             >                else
 389+ 7025 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 7025             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 7025             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 7025             >
 389+ 7025             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 7025 43 6E                        dw      CURRENT                 // current
 391+ 7027 9B 6B 9B 6B                  dw      FETCH, FETCH            // @ @
 392+ 702B A3 69                        dw      EXIT                    // ;
 393+ 702D
 394+ 702D              //  ______________________________________________________________________
 395+ 702D              //
 396+ 702D              // lfa          pfa -- lfa
 397+ 702D                              Colon_Def LFA, "LFA", is_normal
 397+ 702D             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 397+ 702D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 702D             >
 397+ 702D             >                // dummy db directives used to calculate length of namec
 397+ 702D 4C 46 41    >                db      "LFA"
 397+ 7030             >len_NFA         defl    $ - temp_NFA
 397+ 7030             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 702D             >
 397+ 702D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 702E 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 397+ 7031             >                org     $-1                 // alter last byte of Name just above to set
 397+ 7030 C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 7031             >
 397+ 7031 1A 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 7033             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 7033 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 7035             >                else
 397+ 7035 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 7035             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 7035             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 7035             >
 397+ 7035             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 7035 7B 6A                        dw      CELL_MINUS              // cell-
 399+ 7037 7B 6A                        dw      CELL_MINUS              // cell-
 400+ 7039 A3 69                        dw      EXIT                    // ;
 401+ 703B
 402+ 703B              //  ______________________________________________________________________
 403+ 703B              //
 404+ 703B              // cfa          pfa -- cfa
 405+ 703B                              Colon_Def CFA, "CFA", is_normal
 405+ 703B             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 405+ 703B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 703B             >
 405+ 703B             >                // dummy db directives used to calculate length of namec
 405+ 703B 43 46 41    >                db      "CFA"
 405+ 703E             >len_NFA         defl    $ - temp_NFA
 405+ 703E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 703B             >
 405+ 703B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 703C 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 405+ 703F             >                org     $-1                 // alter last byte of Name just above to set
 405+ 703E C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 703F             >
 405+ 703F 2D 70       >                dw      last_NFA            // Link to previous definition Name
 405+ 7041             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7041 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 7043             >                else
 405+ 7043 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 7043             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 7043             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 7043             >
 405+ 7043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 7043 7B 6A                        dw      CELL_MINUS              // cell-
 407+ 7045 A3 69                        dw      EXIT                    // ;
 408+ 7047
 409+ 7047              //  ______________________________________________________________________
 410+ 7047              //
 411+ 7047              // nfa          pfa -- nfa
 412+ 7047                              Colon_Def NFA, "NFA", is_normal
 412+ 7047             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 7047             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7047             >
 412+ 7047             >                // dummy db directives used to calculate length of namec
 412+ 7047 4E 46 41    >                db      "NFA"
 412+ 704A             >len_NFA         defl    $ - temp_NFA
 412+ 704A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7047             >
 412+ 7047 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7048 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 704B             >                org     $-1                 // alter last byte of Name just above to set
 412+ 704A C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 704B             >
 412+ 704B 3B 70       >                dw      last_NFA            // Link to previous definition Name
 412+ 704D             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 704D 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 704F             >                else
 412+ 704F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 704F             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 704F             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 704F             >
 412+ 704F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 704F A9 63 05 00                  dw      LIT, 5                  // 5
 414+ 7053 35 6F                        dw      SUBTRACT                // -
 415+ 7055 24 6D                        dw      NEG_ONE                 // -1
 416+ 7057 00 70                        dw      TRAVERSE                // traverse
 417+ 7059 A3 69                        dw      EXIT                    // ;
 418+ 705B
 419+ 705B              //  ______________________________________________________________________
 420+ 705B              //
 421+ 705B              // pfa          nfa -- pfa
 422+ 705B                              Colon_Def PFA, "PFA", is_normal
 422+ 705B             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 705B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 705B             >
 422+ 705B             >                // dummy db directives used to calculate length of namec
 422+ 705B 50 46 41    >                db      "PFA"
 422+ 705E             >len_NFA         defl    $ - temp_NFA
 422+ 705E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 705B             >
 422+ 705B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 705C 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 705F             >                org     $-1                 // alter last byte of Name just above to set
 422+ 705E C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 705F             >
 422+ 705F 47 70       >                dw      last_NFA            // Link to previous definition Name
 422+ 7061             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 7061 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 7063             >                else
 422+ 7063 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 7063             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 7063             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 7063             >
 422+ 7063             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 7063 0B 6D                        dw      ONE                     // 1
 424+ 7065 00 70                        dw      TRAVERSE                // traverse
 425+ 7067 A9 63 05 00                  dw      LIT, 5                  // 6
 426+ 706B 28 6A                        dw      PLUS                    // +
 427+ 706D A3 69                        dw      EXIT                    // ;
 428+ 706F
 429+ 706F              //  ______________________________________________________________________
 430+ 706F              //
 431+ 706F              // >body        cfa -- pfa
 432+ 706F                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 706F             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 706F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 706F             >
 432+ 706F             >                // dummy db directives used to calculate length of namec
 432+ 706F 3E 42 4F 44 >                db      ">BODY"
 432+ 7073 59          >
 432+ 7074             >len_NFA         defl    $ - temp_NFA
 432+ 7074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 706F             >
 432+ 706F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 7070 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 7074 59          >
 432+ 7075             >                org     $-1                 // alter last byte of Name just above to set
 432+ 7074 D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 7075             >
 432+ 7075 5B 70       >                dw      last_NFA            // Link to previous definition Name
 432+ 7077             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 7077 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 7079             >                else
 432+ 7079 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 432+ 7079             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 7079             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 7079             >
 432+ 7079             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 7079 71 6A                        dw      CELL_PLUS               // cell+
 434+ 707B A3 69                        dw      EXIT                    // ;
 435+ 707D
 436+ 707D              //  ______________________________________________________________________
 437+ 707D              //
 438+ 707D              // <name        cfa -- nfa
 439+ 707D                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 707D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 707D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 707D             >
 439+ 707D             >                // dummy db directives used to calculate length of namec
 439+ 707D 3C 4E 41 4D >                db      "<NAME"
 439+ 7081 45          >
 439+ 7082             >len_NFA         defl    $ - temp_NFA
 439+ 7082             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 707D             >
 439+ 707D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 707E 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 7082 45          >
 439+ 7083             >                org     $-1                 // alter last byte of Name just above to set
 439+ 7082 C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 7083             >
 439+ 7083 6F 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 7085             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 7085 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 7087             >                else
 439+ 7087 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 7087             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 7087             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 7087             >
 439+ 7087             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 7087 77 70                        dw      TO_BODY                 // >body
 441+ 7089 4D 70                        dw      NFA                     // nfa
 442+ 708B A3 69                        dw      EXIT                    // ;
 443+ 708D
 444+ 708D              //  ______________________________________________________________________
 445+ 708D              //
 446+ 708D              // !csp         --
 447+ 708D              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 708D                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 708D             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 708D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 708D             >
 448+ 708D             >                // dummy db directives used to calculate length of namec
 448+ 708D 21 43 53 50 >                db      "!CSP"
 448+ 7091             >len_NFA         defl    $ - temp_NFA
 448+ 7091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 708D             >
 448+ 708D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 708E 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 7092             >                org     $-1                 // alter last byte of Name just above to set
 448+ 7091 D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 7092             >
 448+ 7092 7D 70       >                dw      last_NFA            // Link to previous definition Name
 448+ 7094             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 7094 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7096             >                else
 448+ 7096 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 7096             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7096             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7096             >
 448+ 7096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7096 6B 69                        dw      SPFETCH                 // sp@
 450+ 7098 73 6E A8 6B                  dw      CSP, STORE              // csp !
 451+ 709C A3 69                        dw      EXIT                    // ;
 452+ 709E
 453+ 709E              //  ______________________________________________________________________
 454+ 709E              //
 455+ 709E              // ?error       f n --
 456+ 709E              // rase error n if flag f it true
 457+ 709E                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 709E             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 709E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 709E             >
 457+ 709E             >                // dummy db directives used to calculate length of namec
 457+ 709E 3F 45 52 52 >                db      "?ERROR"
 457+ 70A2 4F 52       >
 457+ 70A4             >len_NFA         defl    $ - temp_NFA
 457+ 70A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 709E             >
 457+ 709E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 709F 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 70A3 4F 52       >
 457+ 70A5             >                org     $-1                 // alter last byte of Name just above to set
 457+ 70A4 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 70A5             >
 457+ 70A5 8D 70       >                dw      last_NFA            // Link to previous definition Name
 457+ 70A7             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 70A7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 70A9             >                else
 457+ 70A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 70A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 70A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 70A9             >
 457+ 70A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 70A9 FB 6A                        dw      SWAP                    // swap
 459+ 70AB                                                              // if
 460+ 70AB 2C 64                        dw      ZBRANCH
 461+ 70AD 08 00                        dw      QError_Else - $
 462+ 70AF 12 76                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 70B1                                                              // else
 464+ 70B1 15 64                        dw      BRANCH
 465+ 70B3 04 00                        dw      QError_Endif - $
 466+ 70B5              QError_Else:
 467+ 70B5 D3 6A                        dw          DROP                //      drop
 468+ 70B7              QError_Endif:                                   // endif
 469+ 70B7 A3 69                        dw      EXIT                    // ;
 470+ 70B9
 471+ 70B9              //  ______________________________________________________________________
 472+ 70B9              //
 473+ 70B9              // ?comp       --
 474+ 70B9              // raise msg #17 if not compiling
 475+ 70B9                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 70B9             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 70B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 70B9             >
 475+ 70B9             >                // dummy db directives used to calculate length of namec
 475+ 70B9 3F 43 4F 4D >                db      "?COMP"
 475+ 70BD 50          >
 475+ 70BE             >len_NFA         defl    $ - temp_NFA
 475+ 70BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 70B9             >
 475+ 70B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 70BA 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 70BE 50          >
 475+ 70BF             >                org     $-1                 // alter last byte of Name just above to set
 475+ 70BE D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 70BF             >
 475+ 70BF 9E 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 70C1             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 70C1 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 70C3             >                else
 475+ 70C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 70C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 70C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 70C3             >
 475+ 70C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 70C3 4E 6E 9B 6B                  dw      STATE, FETCH            // state @
 477+ 70C7 E5 69                        dw      ZEQUAL                  // 0=
 478+ 70C9 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 70CD A7 70                        dw      QERROR                  // ?error
 480+ 70CF A3 69                        dw      EXIT                    // ;
 481+ 70D1
 482+ 70D1              //  ______________________________________________________________________
 483+ 70D1              //
 484+ 70D1              // ?exec       --
 485+ 70D1              // raise msg #18 if compiling
 486+ 70D1                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 70D1             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 70D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 70D1             >
 486+ 70D1             >                // dummy db directives used to calculate length of namec
 486+ 70D1 3F 45 58 45 >                db      "?EXEC"
 486+ 70D5 43          >
 486+ 70D6             >len_NFA         defl    $ - temp_NFA
 486+ 70D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 70D1             >
 486+ 70D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 70D2 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 70D6 43          >
 486+ 70D7             >                org     $-1                 // alter last byte of Name just above to set
 486+ 70D6 C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 70D7             >
 486+ 70D7 B9 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 70D9             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 70D9 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 70DB             >                else
 486+ 70DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 70DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 70DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 70DB             >
 486+ 70DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 70DB 4E 6E 9B 6B                  dw      STATE, FETCH            // state @
 488+ 70DF A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 70E3 A7 70                        dw      QERROR                  // ?error
 490+ 70E5 A3 69                        dw      EXIT                    // ;
 491+ 70E7
 492+ 70E7              //  ______________________________________________________________________
 493+ 70E7              //
 494+ 70E7              // ?pairs       n1 n2 --
 495+ 70E7              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 70E7                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 70E7             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 70E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 70E7             >
 496+ 70E7             >                // dummy db directives used to calculate length of namec
 496+ 70E7 3F 50 41 49 >                db      "?PAIRS"
 496+ 70EB 52 53       >
 496+ 70ED             >len_NFA         defl    $ - temp_NFA
 496+ 70ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 70E7             >
 496+ 70E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 70E8 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 70EC 52 53       >
 496+ 70EE             >                org     $-1                 // alter last byte of Name just above to set
 496+ 70ED D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 70EE             >
 496+ 70EE D1 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 70F0             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 70F0 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 70F2             >                else
 496+ 70F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 70F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 70F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 70F2             >
 496+ 70F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 70F2 35 6F                        dw      SUBTRACT                // -
 498+ 70F4 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 70F8 A7 70                        dw      QERROR                  // ?error
 500+ 70FA A3 69                        dw      EXIT                    // ;
 501+ 70FC
 502+ 70FC              //  ______________________________________________________________________
 503+ 70FC              //
 504+ 70FC              // ?csp       --
 505+ 70FC              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 70FC              // Compiler relies on that for  syntax checking of structures
 507+ 70FC                              Colon_Def QCSP, "?CSP", is_normal
 507+ 70FC             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 70FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 70FC             >
 507+ 70FC             >                // dummy db directives used to calculate length of namec
 507+ 70FC 3F 43 53 50 >                db      "?CSP"
 507+ 7100             >len_NFA         defl    $ - temp_NFA
 507+ 7100             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 70FC             >
 507+ 70FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 70FD 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 7101             >                org     $-1                 // alter last byte of Name just above to set
 507+ 7100 D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 7101             >
 507+ 7101 E7 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 7103             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 7103 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 7105             >                else
 507+ 7105 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 7105             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 7105             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 7105             >
 507+ 7105             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 7105 6B 69                        dw      SPFETCH                 // sp@
 509+ 7107 73 6E 9B 6B                  dw      CSP, FETCH              // csp @
 510+ 710B 35 6F                        dw      SUBTRACT                // -
 511+ 710D A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 7111 A7 70                        dw      QERROR                  // ?error
 513+ 7113 A3 69                        dw      EXIT                    // ;
 514+ 7115
 515+ 7115              //  ______________________________________________________________________
 516+ 7115              //
 517+ 7115              // ?loading      --
 518+ 7115              // raise msg #22 if not loading
 519+ 7115                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 7115             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 7115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 7115             >
 519+ 7115             >                // dummy db directives used to calculate length of namec
 519+ 7115 3F 4C 4F 41 >                db      "?LOADING"
 519+ 7119 44 49 4E 47 >
 519+ 711D             >len_NFA         defl    $ - temp_NFA
 519+ 711D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 7115             >
 519+ 7115 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 7116 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 711A 44 49 4E 47 >
 519+ 711E             >                org     $-1                 // alter last byte of Name just above to set
 519+ 711D C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 711E             >
 519+ 711E FC 70       >                dw      last_NFA            // Link to previous definition Name
 519+ 7120             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 7120 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 7122             >                else
 519+ 7122 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 7122             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 7122             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 7122             >
 519+ 7122             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 7122 02 6E 9B 6B                  dw      BLK, FETCH              // blk @
 521+ 7126 E5 69                        dw      ZEQUAL                  // 0=
 522+ 7128 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 712C A7 70                        dw      QERROR                  // ?error
 524+ 712E A3 69                        dw      EXIT                    // ;
 525+ 7130
 526+ 7130              //  ______________________________________________________________________
 527+ 7130              //
 528+ 7130              // compile      --
 529+ 7130              // compiles the following word
 530+ 7130                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 7130             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 7130             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 7130             >
 530+ 7130             >                // dummy db directives used to calculate length of namec
 530+ 7130 43 4F 4D 50 >                db      "COMPILE"
 530+ 7134 49 4C 45    >
 530+ 7137             >len_NFA         defl    $ - temp_NFA
 530+ 7137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 7130             >
 530+ 7130 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 7131 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 7135 49 4C 45    >
 530+ 7138             >                org     $-1                 // alter last byte of Name just above to set
 530+ 7137 C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 7138             >
 530+ 7138 15 71       >                dw      last_NFA            // Link to previous definition Name
 530+ 713A             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 713A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 713C             >                else
 530+ 713C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 713C             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 713C             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 713C             >
 530+ 713C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 713C C1 70                        dw      QCOMP                   // ?comp
 532+ 713E CA 69                        dw      R_TO                    // r>
 533+ 7140 08 6B 71 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 7144 B6 69                        dw      TO_R                    // >r
 535+ 7146 9B 6B FE 6E                  dw      FETCH, COMMA            // @ ,
 536+ 714A A3 69                        dw      EXIT                    // ;
 537+ 714C
 538+ 714C              //  ______________________________________________________________________
 539+ 714C              //
 540+ 714C              // compile,     --
 541+ 714C              // compiles the following word
 542+ 714C                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 714C             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 714C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 714C             >
 542+ 714C             >                // dummy db directives used to calculate length of namec
 542+ 714C 43 4F 4D 50 >                db      "COMPILE,"
 542+ 7150 49 4C 45 2C >
 542+ 7154             >len_NFA         defl    $ - temp_NFA
 542+ 7154             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 714C             >
 542+ 714C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 714D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 7151 49 4C 45 2C >
 542+ 7155             >                org     $-1                 // alter last byte of Name just above to set
 542+ 7154 AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 7155             >
 542+ 7155 30 71       >                dw      last_NFA            // Link to previous definition Name
 542+ 7157             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 7157 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 7159             >                else
 542+ 7159 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 7159             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 7159             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 7159             >
 542+ 7159             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 7159 C1 70                        dw      QCOMP                   // ?comp
 544+ 715B FE 6E                        dw      COMMA                   // ,
 545+ 715D A3 69                        dw      EXIT                    // ;
 546+ 715F
 547+ 715F              //  ______________________________________________________________________
 548+ 715F              //
 549+ 715F              // [            --
 550+ 715F              // stop compilation
 551+ 715F                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 715F             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 715F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 715F             >
 551+ 715F             >                // dummy db directives used to calculate length of namec
 551+ 715F 5B          >                db      "["
 551+ 7160             >len_NFA         defl    $ - temp_NFA
 551+ 7160             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 715F             >
 551+ 715F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 7160 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 7161             >                org     $-1                 // alter last byte of Name just above to set
 551+ 7160 DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 7161             >
 551+ 7161 4C 71       >                dw      last_NFA            // Link to previous definition Name
 551+ 7163             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 7163 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7165             >                else
 551+ 7165 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 551+ 7165             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7165             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7165             >
 551+ 7165             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7165 03 6D                        dw      ZERO                    // 0
 553+ 7167 4E 6E A8 6B                  dw      STATE, STORE            // state !
 554+ 716B A3 69                        dw      EXIT                    // ; immediate
 555+ 716D
 556+ 716D              //  ______________________________________________________________________
 557+ 716D              //
 558+ 716D              // ]            --
 559+ 716D              // start compilation
 560+ 716D                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 716D             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 716D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 716D             >
 560+ 716D             >                // dummy db directives used to calculate length of namec
 560+ 716D 5D          >                db      "]"
 560+ 716E             >len_NFA         defl    $ - temp_NFA
 560+ 716E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 716D             >
 560+ 716D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 716E 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 716F             >                org     $-1                 // alter last byte of Name just above to set
 560+ 716E DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 716F             >
 560+ 716F 5F 71       >                dw      last_NFA            // Link to previous definition Name
 560+ 7171             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 7171 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 7173             >                else
 560+ 7173 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 7173             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 7173             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 7173             >
 560+ 7173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 7173 A9 63 C0 00                  dw      LIT, $C0                // 192
 562+ 7177 4E 6E A8 6B                  dw      STATE, STORE            // state !
 563+ 717B A3 69                        dw      EXIT                    // ;
 564+ 717D
 565+ 717D              //  ______________________________________________________________________
 566+ 717D              //
 567+ 717D              // smudge       --
 568+ 717D              // toggle smudge bit of latest definition
 569+ 717D                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 717D             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 717D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 717D             >
 569+ 717D             >                // dummy db directives used to calculate length of namec
 569+ 717D 53 4D 55 44 >                db      "SMUDGE"
 569+ 7181 47 45       >
 569+ 7183             >len_NFA         defl    $ - temp_NFA
 569+ 7183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 717D             >
 569+ 717D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 717E 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 7182 47 45       >
 569+ 7184             >                org     $-1                 // alter last byte of Name just above to set
 569+ 7183 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 7184             >
 569+ 7184 6D 71       >                dw      last_NFA            // Link to previous definition Name
 569+ 7186             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 7186 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 7188             >                else
 569+ 7188 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 7188             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 7188             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 7188             >
 569+ 7188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 7188 23 70                        dw      LATEST                  // latest
 571+ 718A A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 718E 8E 6B                        dw      TOGGLE                  // toggle
 573+ 7190 A3 69                        dw      EXIT                    // ;
 574+ 7192
 575+ 7192              //  ______________________________________________________________________
 576+ 7192              //
 577+ 7192              // immediate    --
 578+ 7192              // make immediate the latest definition
 579+ 7192                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 7192             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 7192             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 7192             >
 579+ 7192             >                // dummy db directives used to calculate length of namec
 579+ 7192 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 7196 44 49 41 54 >
 579+ 719A 45          >
 579+ 719B             >len_NFA         defl    $ - temp_NFA
 579+ 719B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 7192             >
 579+ 7192 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 7193 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 7197 44 49 41 54 >
 579+ 719B 45          >
 579+ 719C             >                org     $-1                 // alter last byte of Name just above to set
 579+ 719B C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 719C             >
 579+ 719C 7D 71       >                dw      last_NFA            // Link to previous definition Name
 579+ 719E             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 719E 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 71A0             >                else
 579+ 71A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 71A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 71A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 71A0             >
 579+ 71A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 71A0 23 70                        dw      LATEST                  // latest
 581+ 71A2 A9 63 40 00                  dw      LIT, $40                // 64
 582+ 71A6 8E 6B                        dw      TOGGLE                  // toggle
 583+ 71A8 A3 69                        dw      EXIT                    // ;
 584+ 71AA
 585+ 71AA              //  ______________________________________________________________________
 586+ 71AA              //
 587+ 71AA              // hex          --
 588+ 71AA              // change numeration base
 589+ 71AA                              Colon_Def HEX, "HEX", is_normal
 589+ 71AA             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 71AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 71AA             >
 589+ 71AA             >                // dummy db directives used to calculate length of namec
 589+ 71AA 48 45 58    >                db      "HEX"
 589+ 71AD             >len_NFA         defl    $ - temp_NFA
 589+ 71AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 71AA             >
 589+ 71AA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 71AB 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 71AE             >                org     $-1                 // alter last byte of Name just above to set
 589+ 71AD D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 71AE             >
 589+ 71AE 92 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 71B0             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 71B0 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 71B2             >                else
 589+ 71B2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 589+ 71B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 71B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 71B2             >
 589+ 71B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 71B2 A9 63 10 00                  dw      LIT, 16                 // 16
 591+ 71B6 58 6E A8 6B                  dw      BASE, STORE             // base !
 592+ 71BA A3 69                        dw      EXIT                    // ;
 593+ 71BC
 594+ 71BC              //  ______________________________________________________________________
 595+ 71BC              //
 596+ 71BC              // decimal      --
 597+ 71BC              // change numeration base
 598+ 71BC                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 71BC             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 71BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 71BC             >
 598+ 71BC             >                // dummy db directives used to calculate length of namec
 598+ 71BC 44 45 43 49 >                db      "DECIMAL"
 598+ 71C0 4D 41 4C    >
 598+ 71C3             >len_NFA         defl    $ - temp_NFA
 598+ 71C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 71BC             >
 598+ 71BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 71BD 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 71C1 4D 41 4C    >
 598+ 71C4             >                org     $-1                 // alter last byte of Name just above to set
 598+ 71C3 CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 71C4             >
 598+ 71C4 AA 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 71C6             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 71C6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 71C8             >                else
 598+ 71C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 71C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 71C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 71C8             >
 598+ 71C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 71C8 A9 63 0A 00                  dw      LIT, 10                 // 10
 600+ 71CC 58 6E A8 6B                  dw      BASE, STORE             // base !
 601+ 71D0 A3 69                        dw      EXIT                    // ;
 602+ 71D2
 603+ 71D2              //  ______________________________________________________________________
 604+ 71D2              //
 605+ 71D2              // (;code)       --
 606+ 71D2              // patch to CFA to call/jump to the "following code"
 607+ 71D2                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 71D2             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 71D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 71D2             >
 607+ 71D2             >                // dummy db directives used to calculate length of namec
 607+ 71D2 28 3B 43 4F >                db      "(;CODE)"
 607+ 71D6 44 45 29    >
 607+ 71D9             >len_NFA         defl    $ - temp_NFA
 607+ 71D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 71D2             >
 607+ 71D2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 71D3 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 71D7 44 45 29    >
 607+ 71DA             >                org     $-1                 // alter last byte of Name just above to set
 607+ 71D9 A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 71DA             >
 607+ 71DA BC 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 71DC             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 71DC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 71DE             >                else
 607+ 71DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 71DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 71DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 71DE             >
 607+ 71DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 71DE CA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 71E0 23 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 71E2 61 70 41 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 71E6
 612+ 71E6
 613+ 71E6
 614+ 71E6
 615+ 71E6
 616+ 71E6 A8 6B                        dw      STORE                   // !
 617+ 71E8 A3 69                        dw      EXIT                    // ;
 618+ 71EA
 619+ 71EA              //  ______________________________________________________________________
 620+ 71EA              //
 621+ 71EA              // ;code        --
 622+ 71EA                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 71EA             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 71EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 71EA             >
 622+ 71EA             >                // dummy db directives used to calculate length of namec
 622+ 71EA 3B 43 4F 44 >                db      ";CODE"
 622+ 71EE 45          >
 622+ 71EF             >len_NFA         defl    $ - temp_NFA
 622+ 71EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 71EA             >
 622+ 71EA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 71EB 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 71EF 45          >
 622+ 71F0             >                org     $-1                 // alter last byte of Name just above to set
 622+ 71EF C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 71F0             >
 622+ 71F0 D2 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 71F2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 71F2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 71F4             >                else
 622+ 71F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 622+ 71F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 71F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 71F4             >
 622+ 71F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 71F4 03 71                        dw      QCSP                    // ?csp
 624+ 71F6 3A 71                        dw      COMPILE                 // compile
 625+ 71F8 DC 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 71FA 63 71                        dw      SQUARED_OPEN            // [
 627+ 71FC AE 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 71FE A3 69                        dw      EXIT                    // ; immediate
 629+ 7200
 630+ 7200              //  ______________________________________________________________________
 631+ 7200              //
 632+ 7200              // <builds      --
 633+ 7200                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 7200             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 7200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 7200             >
 633+ 7200             >                // dummy db directives used to calculate length of namec
 633+ 7200 3C 42 55 49 >                db      "<BUILDS"
 633+ 7204 4C 44 53    >
 633+ 7207             >len_NFA         defl    $ - temp_NFA
 633+ 7207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 7200             >
 633+ 7200 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 7201 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 7205 4C 44 53    >
 633+ 7208             >                org     $-1                 // alter last byte of Name just above to set
 633+ 7207 D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 7208             >
 633+ 7208 EA 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 720A             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 720A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 720C             >                else
 633+ 720C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 720C             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 720C             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 720C             >
 633+ 720C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 720C 03 6D                        dw      ZERO                    // 0
 635+ 720E BD 6C                        dw      CONSTANT                // constant
 636+ 7210 A3 69                        dw      EXIT                    // ;
 637+ 7212
 638+ 7212              //  ______________________________________________________________________
 639+ 7212              //
 640+ 7212              // recurse      --
 641+ 7212              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 7212              //              dw      QCOMP                   // ?comp
 643+ 7212              //              dw      LATEST                  // latest
 644+ 7212              //              dw      PFA, CFA                // pfa cfa
 645+ 7212              //              dw      COMMA                   // ,
 646+ 7212              //              dw      EXIT                    // ; immediate
 647+ 7212
 648+ 7212              //  ______________________________________________________________________
 649+ 7212              //
 650+ 7212              // does>     --
 651+ 7212                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 7212             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 7212             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 7212             >
 651+ 7212             >                // dummy db directives used to calculate length of namec
 651+ 7212 44 4F 45 53 >                db      "DOES>"
 651+ 7216 3E          >
 651+ 7217             >len_NFA         defl    $ - temp_NFA
 651+ 7217             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 7212             >
 651+ 7212 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 7213 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 7217 3E          >
 651+ 7218             >                org     $-1                 // alter last byte of Name just above to set
 651+ 7217 BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 7218             >
 651+ 7218 00 72       >                dw      last_NFA            // Link to previous definition Name
 651+ 721A             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 721A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 721C             >                else
 651+ 721C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 651+ 721C             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 721C             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 721C             >
 651+ 721C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 721C CA 69                        dw      R_TO                    // r>
 653+ 721E 23 70                        dw      LATEST                  // latest
 654+ 7220 61 70                        dw      PFA                     // pfa
 655+ 7222 A8 6B                        dw      STORE                   // !
 656+ 7224 DC 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 7226              Does_Ptr:
 658+ 7226                              // via call coded in CFA
 659+ 7226                              ldhlrp
 659+ 7226 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 7229 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 722A 70                           ld      (hl), b
 662+ 722B 2B                           dec     hl
 663+ 722C 71                           ld      (hl), c
 664+ 722D                              ldrphl
 664+ 722D 22 96 63    >                ld      (RP_Pointer),hl
 665+ 7230 13                           inc     de
 666+ 7231 EB                           ex      de, hl
 667+ 7232 4E                           ld      c, (hl)
 668+ 7233 23                           inc     hl
 669+ 7234 46                           ld      b, (hl)
 670+ 7235 23                           inc     hl
 671+ 7236
 672+ 7236                              psh1
 672+ 7236 E5          >                push    hl
 672+ 7237 DD E9       >                jp      (ix)
 673+ 7239                              // SMUDGE !
 674+ 7239
 675+ 7239              //  ______________________________________________________________________
 676+ 7239              //
 677+ 7239              // count        a -- a2 n
 678+ 7239              // expects a counted string at address a, returns string address and counter
 679+ 7239                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 7239             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 7239             >
 679+ 7239             >                // dummy db directives used to calculate length of namec
 679+ 7239 43 4F 55 4E >                db      "COUNT"
 679+ 723D 54          >
 679+ 723E             >len_NFA         defl    $ - temp_NFA
 679+ 723E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 7239             >
 679+ 7239 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 723A 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 723E 54          >
 679+ 723F             >                org     $-1                 // alter last byte of Name just above to set
 679+ 723E D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 723F             >
 679+ 723F 12 72       >                dw      last_NFA            // Link to previous definition Name
 679+ 7241             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7241 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 679+ 7241             >                else
 679+ 7241 43 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 679+ 7243             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 7243             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 7243             >
 679+ 7243             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 7243 E1                           pop     hl
 681+ 7244 5E                           ld      e, (hl)
 682+ 7245 16 00                        ld      d, 0
 683+ 7247 23                           inc     hl
 684+ 7248              Count_Ptr:
 685+ 7248 E5                           push    hl
 686+ 7249 D5                           push    de
 687+ 724A                              next
 687+ 724A DD E9       >                jp      (ix)
 688+ 724C
 689+ 724C
 690+ 724C              //  ______________________________________________________________________
 691+ 724C              //
 692+ 724C              // bounds       a n -- a+n n
 693+ 724C              // given an address and a length ( a n ) calculate the bound addresses
 694+ 724C              // suitable for DO-LOOP
 695+ 724C                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 695+ 724C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 724C             >
 695+ 724C             >                // dummy db directives used to calculate length of namec
 695+ 724C 42 4F 55 4E >                db      "BOUNDS"
 695+ 7250 44 53       >
 695+ 7252             >len_NFA         defl    $ - temp_NFA
 695+ 7252             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 724C             >
 695+ 724C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 724D 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 7251 44 53       >
 695+ 7253             >                org     $-1                 // alter last byte of Name just above to set
 695+ 7252 D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 7253             >
 695+ 7253 39 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 7255             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7255 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 7255             >                else
 695+ 7255 57 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 7257             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7257             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7257             >
 695+ 7257             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7257 E1                           pop     hl
 697+ 7258 D1                           pop     de
 698+ 7259 19                           add     hl, de
 699+ 725A 18 EC                        jr      Count_Ptr
 700+ 725C
 701+ 725C              //  ______________________________________________________________________
 702+ 725C              //
 703+ 725C              // leave        --
 704+ 725C              // Compile (leave) to leave current LOOP and jump just after it
 705+ 725C                              Colon_Def LEAVE, "LEAVE", is_immediate
 705+ 725C             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 705+ 725C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 725C             >
 705+ 725C             >                // dummy db directives used to calculate length of namec
 705+ 725C 4C 45 41 56 >                db      "LEAVE"
 705+ 7260 45          >
 705+ 7261             >len_NFA         defl    $ - temp_NFA
 705+ 7261             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 725C             >
 705+ 725C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 725D 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 705+ 7261 45          >
 705+ 7262             >                org     $-1                 // alter last byte of Name just above to set
 705+ 7261 C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 7262             >
 705+ 7262 4C 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 7264             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 7264 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 7266             >                else
 705+ 7266 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 705+ 7266             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 7266             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 7266             >
 705+ 7266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 7266 3A 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 707+ 726A E2 6E B6 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 707+ 726E 03 6D FE 6E
 708+ 7272 03 6D 03 6D                  dw      ZERO, ZERO
 709+ 7276 6B 69 08 6B                  dw      SPFETCH, DUP
 710+ 727A 71 6A 71 6A                  dw      CELL_PLUS, CELL_PLUS
 711+ 727E EB 6A                        dw      TUCK
 712+ 7280 73 6E 9B 6B                  dw      CSP, FETCH
 713+ 7284 FB 6A 35 6F                  dw      SWAP, SUBTRACT
 714+ 7288 96 68                        dw      CMOVE
 715+ 728A 73 6E 9B 6B                  dw      CSP, FETCH, CELL_MINUS
 715+ 728E 7B 6A
 716+ 7290 CA 69 C3 6A                  dw      R_TO, OVER, STORE
 716+ 7294 A8 6B
 717+ 7296 7B 6A 03 6D                  dw      CELL_MINUS, ZERO
 718+ 729A FB 6A A8 6B                  dw      SWAP, STORE
 719+ 729E A3 69                        dw      EXIT                    // ;
 720+ 72A0
 721+ 72A0              //  ______________________________________________________________________
 722+ 72A0              //
 723+ 72A0              // type         a n --
 724+ 72A0              // Sends to current output channel n characters starting at address a.
 725+ 72A0                              Colon_Def TYPE, "TYPE", is_normal
 725+ 72A0             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 725+ 72A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72A0             >
 725+ 72A0             >                // dummy db directives used to calculate length of namec
 725+ 72A0 54 59 50 45 >                db      "TYPE"
 725+ 72A4             >len_NFA         defl    $ - temp_NFA
 725+ 72A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72A0             >
 725+ 72A0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72A1 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 725+ 72A5             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72A4 C5          >                db      {b $} | END_BIT     // msb as name end
 725+ 72A5             >
 725+ 72A5 5C 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72A7             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72A7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72A9             >                else
 725+ 72A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72A9             >
 725+ 72A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72A9 55 72                        dw      BOUNDS                  // bounds
 727+ 72AB 59 64                        dw      C_Q_DO                  // ?do
 728+ 72AD 0C 00                        dw      Type_Skip - $
 729+ 72AF              Type_Loop:
 730+ 72AF 90 64 B6 6B                  dw          I, CFETCH           //      i c@
 731+ 72B3 D1 6F                        dw          EMIT                //      emit
 732+ 72B5 04 64                        dw      C_LOOP                  // loop
 733+ 72B7 F8 FF                        dw      Type_Loop - $
 734+ 72B9              Type_Skip:
 735+ 72B9 A3 69                        dw      EXIT                    // ;
 736+ 72BB
 737+ 72BB              //  ______________________________________________________________________
 738+ 72BB              //
 739+ 72BB              // -trailing    a n1 -- a n2
 740+ 72BB              // Assumes that an n1 bytes-long string is stored at address a
 741+ 72BB              // and the string contains a space delimited word,
 742+ 72BB              // Finds n2 as the position of the first character after the word.
 743+ 72BB                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 72BB             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 72BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 72BB             >
 743+ 72BB             >                // dummy db directives used to calculate length of namec
 743+ 72BB 2D 54 52 41 >                db      "-TRAILING"
 743+ 72BF 49 4C 49 4E >
 743+ 72C3 47          >
 743+ 72C4             >len_NFA         defl    $ - temp_NFA
 743+ 72C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 72BB             >
 743+ 72BB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 72BC 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 72C0 49 4C 49 4E >
 743+ 72C4 47          >
 743+ 72C5             >                org     $-1                 // alter last byte of Name just above to set
 743+ 72C4 C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 72C5             >
 743+ 72C5 A0 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 72C7             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 72C7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 72C9             >                else
 743+ 72C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 743+ 72C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 72C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 72C9             >
 743+ 72C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 72C9 08 6B 03 6D                  dw      DUP, ZERO               // dup 0
 745+ 72CD                                                              // do
 746+ 72CD 59 64                        dw      C_Q_DO
 747+ 72CF 20 00                        dw      LTrailing_Leave - $
 748+ 72D1              LTrailing_Loop:
 749+ 72D1 69 6B 28 6A                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72D5 55 6A                        dw          ONE_SUBTRACT        //      1-
 751+ 72D7 B6 6B                        dw          CFETCH              //      c@
 752+ 72D9 2D 6D 35 6F                  dw          BL, SUBTRACT        //      bl -
 753+ 72DD                                                              //      if
 754+ 72DD 2C 64                        dw          ZBRANCH
 755+ 72DF 0A 00                        dw          LTrailing_Else - $
 756+ 72E1 41 64                        dw              C_LEAVE         //          leave
 757+ 72E3 0C 00                        dw              LTrailing_Leave - $
 758+ 72E5 15 64                        dw          BRANCH              //      else
 759+ 72E7 04 00                        dw          LTrailing_Endif - $
 760+ 72E9              LTrailing_Else:
 761+ 72E9 55 6A                        dw              ONE_SUBTRACT    //          1-
 762+ 72EB              LTrailing_Endif:                                //      endif
 763+ 72EB                                                              // loop
 764+ 72EB 04 64                        dw      C_LOOP
 765+ 72ED E4 FF                        dw      LTrailing_Loop - $
 766+ 72EF              LTrailing_Leave:
 767+ 72EF A3 69                        dw      EXIT                    // ;
 768+ 72F1
 769+ 72F1              //  ______________________________________________________________________
 770+ 72F1              //
 771+ 72F1              // accept       a n1 -- n2
 772+ 72F1              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72F1              // CR stops input. A 'nul' is added as trailer.
 774+ 72F1              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72F1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72F1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72F1             >
 775+ 72F1             >                // dummy db directives used to calculate length of namec
 775+ 72F1 41 43 43 45 >                db      "ACCEPT"
 775+ 72F5 50 54       >
 775+ 72F7             >len_NFA         defl    $ - temp_NFA
 775+ 72F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72F1             >
 775+ 72F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72F2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72F6 50 54       >
 775+ 72F8             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72F7 D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72F8             >
 775+ 72F8 BB 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 72FA             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 72FA 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 72FC             >                else
 775+ 72FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 775+ 72FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 72FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 72FC             >
 775+ 72FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 72FC C3 6A 28 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 7300 C3 6A
 777+ 7302 03 6D 25 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 7306                                                              // do
 779+ 7306 59 64                        dw      C_Q_DO
 780+ 7308 8C 00                        dw      Accept_Leave - $
 781+ 730A              Accept_Loop:
 782+ 730A B9 66                        dw          CUR
 783+ 730C D3 6A 05 67                  dw          DROP, KEY           //      drop key        ( a  c )
 784+ 7310 08 6B                        dw          DUP                 //      dup             ( a  c  c )
 785+ 7312 A9 63 0E 00                  dw          LIT, $0E            //      0E
 786+ 7316 69 6D                        dw          PLUS_ORIGIN         //      +origin
 787+ 7318 9B 6B                        dw          FETCH               //      @               ( a  c  c  del )
 788+ 731A 43 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 789+ 731C                                                              //      if
 790+ 731C 2C 64                        dw          ZBRANCH
 791+ 731E 2C 00                        dw          Accept_Else_0 - $
 792+ 7320 D3 6A                        dw              DROP            //          drop        ( a  )
 793+ 7322 08 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 793+ 7326 43 6F
 794+ 7328 0B 6D 33 69                  dw              ONE, AND_OP     //          1 and
 795+ 732C 08 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 796+ 732E CA 69                        dw              R_TO            //          r> 2 - + r>
 797+ 7330 88 6A 28 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 798+ 7334 B6 69                        dw              TO_R            //
 799+ 7336                                                              //          if
 800+ 7336 2C 64                        dw              ZBRANCH
 801+ 7338 0A 00                        dw              Accept_Else_1 - $
 802+ 733A A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 803+ 733E                                                              //          else
 804+ 733E 15 64                        dw              BRANCH
 805+ 7340 06 00                        dw              Accept_Endif_1 - $
 806+ 7342              Accept_Else_1:
 807+ 7342 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 808+ 7346              Accept_Endif_1:                                 //          endif
 809+ 7346 15 64                        dw          BRANCH
 810+ 7348 2E 00                        dw          Accept_Endif_0 - $
 811+ 734A              Accept_Else_0:                                  //      else
 812+ 734A 08 6B                        dw              DUP             //          dup         ( a  c  c )
 813+ 734C A9 63 0D 00                  dw              LIT, 13         //          13
 814+ 7350 43 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 815+ 7352                                                              //          if
 816+ 7352 2C 64                        dw              ZBRANCH
 817+ 7354 0C 00                        dw              Accept_Else_2 - $
 818+ 7356 D3 6A 2D 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 819+ 735A 03 6D                        dw                  ZERO        //              0       ( a  c  0 )
 820+ 735C                                                              //          else
 821+ 735C 15 64                        dw              BRANCH
 822+ 735E 04 00                        dw              Accept_Endif_2 - $
 823+ 7360              Accept_Else_2:
 824+ 7360 08 6B                        dw                  DUP         //              dup     ( a  c  c )
 825+ 7362                                                              //          endif
 826+ 7362              Accept_Endif_2:
 827+ 7362 90 64 C4 6B                  dw              I, CSTORE       //          i           ( a  c )
 828+ 7366 08 6B 2D 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 828+ 736A 64 6F
 829+ 736C                                                              //          if
 830+ 736C 2C 64                        dw              ZBRANCH
 831+ 736E 08 00                        dw              Accept_Endif_3 - $
 832+ 7370 CA 69                        dw                  R_TO        //              r>
 833+ 7372 55 6A                        dw                  ONE_SUBTRACT//              1-
 834+ 7374 B6 69                        dw                  TO_R        //              >r
 835+ 7376                                                              //          endif
 836+ 7376              Accept_Endif_3:
 837+ 7376              Accept_Endif_0:                                 //      endif
 838+ 7376 D1 6F                        dw          EMIT                //      emit
 839+ 7378 03 6D 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 839+ 737C 49 6A
 840+ 737E A8 6B                        dw          STORE               //          ( zero pad )
 841+ 7380 90 64                        dw          I                   //      i
 842+ 7382 90 64 B6 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 842+ 7386 E5 69
 843+ 7388 2C 64                        dw          ZBRANCH             //
 844+ 738A 06 00                        dw              Accept_Endif_4 - $
 845+ 738C 41 64                        dw                  C_LEAVE     //              leave
 846+ 738E 06 00                        dw                  Accept_Leave - $
 847+ 7390              Accept_Endif_4:                                 //      endif
 848+ 7390                                                              // loop
 849+ 7390 04 64                        dw      C_LOOP
 850+ 7392 78 FF                        dw      Accept_Loop - $
 851+ 7394              Accept_Leave:
 852+ 7394 FB 6A 35 6F                  dw      SWAP, SUBTRACT          // swap -
 853+ 7398 49 6A                        dw      ONE_PLUS                // 1+
 854+ 739A 08 6B C3 6E                  dw      DUP, SPAN, STORE        // dup span !
 854+ 739E A8 6B
 855+ 73A0 A3 69                        dw      EXIT                    // ;
 856+ 73A2
 857+ 73A2              //  ______________________________________________________________________
 858+ 73A2              //
 859+ 73A2              // expect      a n --
 860+ 73A2              // Accepts at most n1 characters from terminal and stores them at address a
 861+ 73A2              // CR stops input. A 'nul' is added as trailer.
 862+ 73A2              // n2 is the string length. n2 is kept in span user variable also.
 863+ 73A2              //              Colon_Def EXPECT, "EXPECT", is_normal
 864+ 73A2              //              dw      ACCEPT, DROP            // accept drop
 865+ 73A2              //              dw      EXIT                    // ;
 866+ 73A2
 867+ 73A2              //  ______________________________________________________________________
 868+ 73A2              //
 869+ 73A2              // query        --
 870+ 73A2              // Accept at most 80 character from console. CR stops.
 871+ 73A2              // Text is stored in TIB. Variable IN is zeroed.
 872+ 73A2                              Colon_Def QUERY, "QUERY", is_normal
 872+ 73A2             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 872+ 73A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 872+ 73A2             >
 872+ 73A2             >                // dummy db directives used to calculate length of namec
 872+ 73A2 51 55 45 52 >                db      "QUERY"
 872+ 73A6 59          >
 872+ 73A7             >len_NFA         defl    $ - temp_NFA
 872+ 73A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 872+ 73A2             >
 872+ 73A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 872+ 73A3 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 872+ 73A7 59          >
 872+ 73A8             >                org     $-1                 // alter last byte of Name just above to set
 872+ 73A7 D9          >                db      {b $} | END_BIT     // msb as name end
 872+ 73A8             >
 872+ 73A8 F1 72       >                dw      last_NFA            // Link to previous definition Name
 872+ 73AA             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 872+ 73AA 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 872+ 73AC             >                else
 872+ 73AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 872+ 73AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 872+ 73AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 872+ 73AC             >
 872+ 73AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 873+ 73AC 96 6D 9B 6B                  dw      TIB, FETCH              // tib @
 874+ 73B0 A9 63 50 00                  dw      LIT, 80                 // 80
 875+ 73B4 FA 72 D3 6A                  dw      ACCEPT, DROP            // accept drop
 876+ 73B8 03 6D 0B 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 876+ 73BC A8 6B
 877+ 73BE A3 69                        dw      EXIT                    // ;
 878+ 73C0
 879+ 73C0              //  ______________________________________________________________________
 880+ 73C0              //
 881+ 73C0              // fill        a n c --
 882+ 73C0              // If n > 0, fills n locations starting from address a with the value c.
 883+ 73C0                              New_Def FILL, "FILL", is_code, is_normal
 883+ 73C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ 73C0             >
 883+ 73C0             >                // dummy db directives used to calculate length of namec
 883+ 73C0 46 49 4C 4C >                db      "FILL"
 883+ 73C4             >len_NFA         defl    $ - temp_NFA
 883+ 73C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ 73C0             >
 883+ 73C0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ 73C1 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 883+ 73C5             >                org     $-1                 // alter last byte of Name just above to set
 883+ 73C4 CC          >                db      {b $} | END_BIT     // msb as name end
 883+ 73C5             >
 883+ 73C5 A2 73       >                dw      last_NFA            // Link to previous definition Name
 883+ 73C7             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 73C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 883+ 73C7             >                else
 883+ 73C7 C9 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 883+ 73C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 73C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 73C9             >
 883+ 73C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 73C9 D9                           exx
 885+ 73CA D1                           pop     de                  // de has character
 886+ 73CB C1                           pop     bc                  // bc has counter
 887+ 73CC E1                           pop     hl                  // hl has address, save Instruction Pointer
 888+ 73CD              Fill_Loop:
 889+ 73CD 78                               ld      a, b
 890+ 73CE B1                               or      c
 891+ 73CF 28 05                        jr      z, Fill_While_End
 892+ 73D1 73                               ld      (hl), e
 893+ 73D2 0B                               dec     bc
 894+ 73D3 23                               inc     hl
 895+ 73D4 18 F7                        jr      Fill_Loop
 896+ 73D6              Fill_While_End:
 897+ 73D6 D9                           exx
 898+ 73D7
 899+ 73D7                              next
 899+ 73D7 DD E9       >                jp      (ix)
 900+ 73D9
 901+ 73D9              //  ______________________________________________________________________
 902+ 73D9              //
 903+ 73D9              // erase        a n --
 904+ 73D9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 73D9                              Colon_Def ERASE, "ERASE", is_normal
 905+ 73D9             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 905+ 73D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 73D9             >
 905+ 73D9             >                // dummy db directives used to calculate length of namec
 905+ 73D9 45 52 41 53 >                db      "ERASE"
 905+ 73DD 45          >
 905+ 73DE             >len_NFA         defl    $ - temp_NFA
 905+ 73DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 73D9             >
 905+ 73D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 73DA 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 905+ 73DE 45          >
 905+ 73DF             >                org     $-1                 // alter last byte of Name just above to set
 905+ 73DE C5          >                db      {b $} | END_BIT     // msb as name end
 905+ 73DF             >
 905+ 73DF C0 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 73E1             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 73E1 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 73E3             >                else
 905+ 73E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 905+ 73E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 73E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 73E3             >
 905+ 73E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 73E3 03 6D C7 73                  dw      ZERO, FILL              // 0 fill
 907+ 73E7 A3 69                        dw      EXIT                    // ;
 908+ 73E9
 909+ 73E9              //  ______________________________________________________________________
 910+ 73E9              //
 911+ 73E9              // blanks       a n --
 912+ 73E9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 913+ 73E9                              Colon_Def BLANKS, "BLANKS", is_normal
 913+ 73E9             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 913+ 73E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 73E9             >
 913+ 73E9             >                // dummy db directives used to calculate length of namec
 913+ 73E9 42 4C 41 4E >                db      "BLANKS"
 913+ 73ED 4B 53       >
 913+ 73EF             >len_NFA         defl    $ - temp_NFA
 913+ 73EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 73E9             >
 913+ 73E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 73EA 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 913+ 73EE 4B 53       >
 913+ 73F0             >                org     $-1                 // alter last byte of Name just above to set
 913+ 73EF D3          >                db      {b $} | END_BIT     // msb as name end
 913+ 73F0             >
 913+ 73F0 D9 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 73F2             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 73F2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 73F4             >                else
 913+ 73F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 73F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 73F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 73F4             >
 913+ 73F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 73F4 2D 6D C7 73                  dw      BL, FILL                // bl fill
 915+ 73F8 A3 69                        dw      EXIT                    // ;
 916+ 73FA
 917+ 73FA              //  ______________________________________________________________________
 918+ 73FA              //
 919+ 73FA              // hold         c --
 920+ 73FA              // Used between <# and #> to insert a character c in numeric formatting.
 921+ 73FA                              Colon_Def HOLD, "HOLD", is_normal
 921+ 73FA             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 921+ 73FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 73FA             >
 921+ 73FA             >                // dummy db directives used to calculate length of namec
 921+ 73FA 48 4F 4C 44 >                db      "HOLD"
 921+ 73FE             >len_NFA         defl    $ - temp_NFA
 921+ 73FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 73FA             >
 921+ 73FA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 73FB 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 921+ 73FF             >                org     $-1                 // alter last byte of Name just above to set
 921+ 73FE C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 73FF             >
 921+ 73FF E9 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 7401             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 7401 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 7403             >                else
 921+ 7403 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 7403             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 7403             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 7403             >
 921+ 7403             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 7403 24 6D                        dw      NEG_ONE                 // -1
 923+ 7405 84 6E 78 6B                  dw      HLD, PLUSSTORE          // hld +!
 924+ 7409 84 6E 9B 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 924+ 740D C4 6B
 925+ 740F A3 69                        dw      EXIT                    // ;
 926+ 7411
 927+ 7411              //  ______________________________________________________________________
 928+ 7411              //
 929+ 7411              // pad         -- a
 930+ 7411              // leaves the buffer text address. This is at a fixed distance over HERE.
 931+ 7411                              Colon_Def PAD, "PAD", is_normal
 931+ 7411             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 931+ 7411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 7411             >
 931+ 7411             >                // dummy db directives used to calculate length of namec
 931+ 7411 50 41 44    >                db      "PAD"
 931+ 7414             >len_NFA         defl    $ - temp_NFA
 931+ 7414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 7411             >
 931+ 7411 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 7412 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 931+ 7415             >                org     $-1                 // alter last byte of Name just above to set
 931+ 7414 C4          >                db      {b $} | END_BIT     // msb as name end
 931+ 7415             >
 931+ 7415 FA 73       >                dw      last_NFA            // Link to previous definition Name
 931+ 7417             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 7417 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 7419             >                else
 931+ 7419 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 7419             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 7419             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 7419             >
 931+ 7419             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 7419 E2 6E                        dw      HERE                    // here
 933+ 741B A9 63 44 00                  dw      LIT, 68                 // 68
 934+ 741F 28 6A                        dw      PLUS                    // +
 935+ 7421 A3 69                        dw      EXIT                    // ;
 936+ 7423
 937+ 7423              //  ______________________________________________________________________
 938+ 7423              //
 939+ 7423              // word         c -- a
 940+ 7423              // reads characters from input streams until it encouners a c delimiter.
 941+ 7423              // Stores that packet so it starts from HERE
 942+ 7423              // WORD leaves a counter as first byte and ends the packet with two spaces.
 943+ 7423              // Other occurrences of c are ignored.
 944+ 7423              // If BLK is zero, text is taken from terminal buffer TIB.
 945+ 7423              // Otherwise text is taken from the disk-block given by BLK.
 946+ 7423              // "in" variable is incremented of the number of character read.
 947+ 7423              // The number of characters read is given by ENCLOSE.
 948+ 7423                              Colon_Def WORD, "WORD", is_normal
 948+ 7423             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 948+ 7423             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 7423             >
 948+ 7423             >                // dummy db directives used to calculate length of namec
 948+ 7423 57 4F 52 44 >                db      "WORD"
 948+ 7427             >len_NFA         defl    $ - temp_NFA
 948+ 7427             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 7423             >
 948+ 7423 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 7424 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 948+ 7428             >                org     $-1                 // alter last byte of Name just above to set
 948+ 7427 C4          >                db      {b $} | END_BIT     // msb as name end
 948+ 7428             >
 948+ 7428 11 74       >                dw      last_NFA            // Link to previous definition Name
 948+ 742A             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 742A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 742C             >                else
 948+ 742C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 742C             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 742C             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 742C             >
 948+ 742C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 742C 02 6E 9B 6B                  dw      BLK, FETCH              // blk @
 950+ 7430                                                              // if
 951+ 7430 2C 64                        dw      ZBRANCH
 952+ 7432 0C 00                        dw      Word_Else - $
 953+ 7434 02 6E 9B 6B                  dw          BLK, FETCH          //      blk @
 954+ 7438 7D 7D                        dw          BLOCK               //      block ( forward )
 955+ 743A                                                              // else
 956+ 743A 15 64                        dw      BRANCH
 957+ 743C 06 00                        dw      Word_Endif - $
 958+ 743E              Word_Else:
 959+ 743E 96 6D 9B 6B                  dw         TIB, FETCH           //      tib @
 960+ 7442              Word_Endif:                                     // endif
 961+ 7442 0B 6E 9B 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 961+ 7446 28 6A
 962+ 7448 FB 6A 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 963+ 744C E2 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 963+ 7450 22 00 F2 73
 964+ 7454 0B 6E 78 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 965+ 7458 C3 6A 35 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 965+ 745C B6 69
 966+ 745E DE 69 E2 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 966+ 7462 C4 6B
 967+ 7464 28 6A                        dw      PLUS                    // +
 968+ 7466 E2 6E 49 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 968+ 746A CA 69
 969+ 746C 96 68                        dw      CMOVE                   // cmove
 970+ 746E E2 6E                        dw      HERE                    // here
 971+ 7470 A3 69                        dw      EXIT                    // ;
 972+ 7472
 973+ 7472              //  ______________________________________________________________________
 974+ 7472              //
 975+ 7472              // (.")         --
 976+ 7472              // Direct procedure compiled by ." and  .(  It executes TYPE.
 977+ 7472                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 977+ 7472             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 977+ 7472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 7472             >
 977+ 7472             >                // dummy db directives used to calculate length of namec
 977+ 7472 28 2E 22 29 >                db      '(.")'
 977+ 7476             >len_NFA         defl    $ - temp_NFA
 977+ 7476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 7472             >
 977+ 7472 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 7473 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 977+ 7477             >                org     $-1                 // alter last byte of Name just above to set
 977+ 7476 A9          >                db      {b $} | END_BIT     // msb as name end
 977+ 7477             >
 977+ 7477 23 74       >                dw      last_NFA            // Link to previous definition Name
 977+ 7479             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 7479 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 747B             >                else
 977+ 747B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 977+ 747B             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 747B             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 747B             >
 977+ 747B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 747B DE 69 41 72                  dw      R_OP, COUNT             // r count
 979+ 747F 08 6B 49 6A                  dw      DUP, ONE_PLUS           // dup 1+
 980+ 7483 CA 69 28 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 980+ 7487 B6 69
 981+ 7489 A7 72                        dw      TYPE                    // type
 982+ 748B A3 69                        dw      EXIT                    // ;
 983+ 748D
 984+ 748D              //  ______________________________________________________________________
 985+ 748D              //
 986+ 748D              // char         -- c
 987+ 748D              // get first character from next input word
 988+ 748D                              Colon_Def CHAR,  "CHAR", is_normal
 988+ 748D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 988+ 748D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 748D             >
 988+ 748D             >                // dummy db directives used to calculate length of namec
 988+ 748D 43 48 41 52 >                db      "CHAR"
 988+ 7491             >len_NFA         defl    $ - temp_NFA
 988+ 7491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 748D             >
 988+ 748D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 748E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 988+ 7492             >                org     $-1                 // alter last byte of Name just above to set
 988+ 7491 D2          >                db      {b $} | END_BIT     // msb as name end
 988+ 7492             >
 988+ 7492 72 74       >                dw      last_NFA            // Link to previous definition Name
 988+ 7494             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 7494 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 7496             >                else
 988+ 7496 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 7496             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 7496             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 7496             >
 988+ 7496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 7496 2D 6D 2A 74                  dw      BL, WORD                // bl word
 990+ 749A 49 6A B6 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 991+ 749E A3 69                        dw      EXIT                    // ;
 992+ 74A0
 993+ 74A0              //  ______________________________________________________________________
 994+ 74A0              //
 995+ 74A0              // ,"           --
 996+ 74A0              // compiles a string terminated by " as a counted string from next input stream
 997+ 74A0                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 997+ 74A0             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 997+ 74A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 74A0             >
 997+ 74A0             >                // dummy db directives used to calculate length of namec
 997+ 74A0 2C 22       >                db      ',"'
 997+ 74A2             >len_NFA         defl    $ - temp_NFA
 997+ 74A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 74A0             >
 997+ 74A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 74A1 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 997+ 74A3             >                org     $-1                 // alter last byte of Name just above to set
 997+ 74A2 A2          >                db      {b $} | END_BIT     // msb as name end
 997+ 74A3             >
 997+ 74A3 8D 74       >                dw      last_NFA            // Link to previous definition Name
 997+ 74A5             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 74A5 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 74A7             >                else
 997+ 74A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 74A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 74A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 74A7             >
 997+ 74A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 74A7 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 999+ 74AB 2A 74                        dw      WORD                    // word
1000+ 74AD B6 6B 49 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
1001+ 74B1 F2 6E                        dw      ALLOT                   // allot
1002+ 74B3 03 6D 0F 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1003+ 74B7 A3 69                        dw      EXIT
1004+ 74B9
1005+ 74B9              //  ______________________________________________________________________
1006+ 74B9              //
1007+ 74B9              // .c           c --
1008+ 74B9              // intermediate general purpose string builder, used by ." and .(
1009+ 74B9                              Colon_Def DOT_C,  ".C", is_immediate
1009+ 74B9             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1009+ 74B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 74B9             >
1009+ 74B9             >                // dummy db directives used to calculate length of namec
1009+ 74B9 2E 43       >                db      ".C"
1009+ 74BB             >len_NFA         defl    $ - temp_NFA
1009+ 74BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 74B9             >
1009+ 74B9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 74BA 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1009+ 74BC             >                org     $-1                 // alter last byte of Name just above to set
1009+ 74BB C3          >                db      {b $} | END_BIT     // msb as name end
1009+ 74BC             >
1009+ 74BC A0 74       >                dw      last_NFA            // Link to previous definition Name
1009+ 74BE             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 74BE 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 74C0             >                else
1009+ 74C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1009+ 74C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 74C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 74C0             >
1009+ 74C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 74C0 4E 6E 9B 6B                  dw      STATE, FETCH            // state @
1011+ 74C4                                                              // if
1012+ 74C4 2C 64                        dw      ZBRANCH
1013+ 74C6 12 00                        dw      Dot_C_Else - $
1014+ 74C8 3A 71 79 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1015+ 74CC 2A 74 B6 6B                  dw          WORD, CFETCH        //      word c@
1016+ 74D0 49 6A F2 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1017+ 74D4                                                              // else
1018+ 74D4 15 64                        dw      BRANCH
1019+ 74D6 08 00                        dw      Dot_C_Endif - $
1020+ 74D8              Dot_C_Else:
1021+ 74D8 2A 74 41 72                  dw          WORD, COUNT, TYPE   //      word count type
1021+ 74DC A7 72
1022+ 74DE              Dot_C_Endif:                                    // endif
1023+ 74DE A3 69                        dw      EXIT                    ;
1024+ 74E0
1025+ 74E0              //  ______________________________________________________________________
1026+ 74E0              //
1027+ 74E0              // ."           c --
1028+ 74E0                              Colon_Def DOT_QUOTE,  '."', is_immediate
1028+ 74E0             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1028+ 74E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 74E0             >
1028+ 74E0             >                // dummy db directives used to calculate length of namec
1028+ 74E0 2E 22       >                db      '."'
1028+ 74E2             >len_NFA         defl    $ - temp_NFA
1028+ 74E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 74E0             >
1028+ 74E0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 74E1 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1028+ 74E3             >                org     $-1                 // alter last byte of Name just above to set
1028+ 74E2 A2          >                db      {b $} | END_BIT     // msb as name end
1028+ 74E3             >
1028+ 74E3 B9 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 74E5             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 74E5 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 74E7             >                else
1028+ 74E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1028+ 74E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 74E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 74E7             >
1028+ 74E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 74E7 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1030+ 74EB BE 74                        dw      DOT_C                   // [compile] .c
1031+ 74ED A3 69                        dw      EXIT                    // ; immediate
1032+ 74EF
1033+ 74EF              //  ______________________________________________________________________
1034+ 74EF              //
1035+ 74EF              // .(           c --
1036+ 74EF                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1036+ 74EF             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1036+ 74EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 74EF             >
1036+ 74EF             >                // dummy db directives used to calculate length of namec
1036+ 74EF 2E 28       >                db      ".("
1036+ 74F1             >len_NFA         defl    $ - temp_NFA
1036+ 74F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 74EF             >
1036+ 74EF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 74F0 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1036+ 74F2             >                org     $-1                 // alter last byte of Name just above to set
1036+ 74F1 A8          >                db      {b $} | END_BIT     // msb as name end
1036+ 74F2             >
1036+ 74F2 E0 74       >                dw      last_NFA            // Link to previous definition Name
1036+ 74F4             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 74F4 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1036+ 74F6             >                else
1036+ 74F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1036+ 74F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 74F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 74F6             >
1036+ 74F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 74F6 A9 63 29 00                  dw      LIT, ")"                // [char] )
1038+ 74FA BE 74                        dw      DOT_C                   // [compile] .c
1039+ 74FC A3 69                        dw      EXIT                    // ; immediate
1040+ 74FE
1041+ 74FE              //  ______________________________________________________________________
1042+ 74FE              //
1043+ 74FE              // (sgn)        a -- a f
1044+ 74FE              // determines if char in addr a is a sign (+ or -), and in that case increments
1045+ 74FE              // a flag. Returns f as the sign, true for negative, false for positive.
1046+ 74FE              // called by NUMBER and (EXP)
1047+ 74FE                              Colon_Def CSGN,  "(SGN)", is_normal
1047+ 74FE             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1047+ 74FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 74FE             >
1047+ 74FE             >                // dummy db directives used to calculate length of namec
1047+ 74FE 28 53 47 4E >                db      "(SGN)"
1047+ 7502 29          >
1047+ 7503             >len_NFA         defl    $ - temp_NFA
1047+ 7503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 74FE             >
1047+ 74FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 74FF 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1047+ 7503 29          >
1047+ 7504             >                org     $-1                 // alter last byte of Name just above to set
1047+ 7503 A9          >                db      {b $} | END_BIT     // msb as name end
1047+ 7504             >
1047+ 7504 EF 74       >                dw      last_NFA            // Link to previous definition Name
1047+ 7506             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 7506 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1047+ 7508             >                else
1047+ 7508 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1047+ 7508             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 7508             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 7508             >
1047+ 7508             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 7508 08 6B 49 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1048+ 750C B6 6B
1049+ 750E 08 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1049+ 7512 2D 00 43 6F
1050+ 7516                                                              // if
1051+ 7516 2C 64                        dw      ZBRANCH
1052+ 7518 12 00                        dw      CSgn_Else_0 - $
1053+ 751A D3 6A                        dw          DROP                //      drop
1054+ 751C 49 6A                        dw          ONE_PLUS            //      1+
1055+ 751E 0B 6D 61 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1055+ 7522 78 6B
1056+ 7524 0B 6D                        dw          ONE                 //      1
1057+ 7526                                                              // else
1058+ 7526 15 64                        dw      BRANCH
1059+ 7528 16 00                        dw      CSgn_Endif_0 - $
1060+ 752A              CSgn_Else_0:
1061+ 752A A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1061+ 752E 43 6F
1062+ 7530                                                              //      if
1063+ 7530 2C 64                        dw          ZBRANCH
1064+ 7532 0A 00                        dw          CSgn_Endif_1 - $
1065+ 7534 49 6A                        dw              ONE_PLUS        //          1+
1066+ 7536 0B 6D 61 6E                  dw              ONE, DPL        //          1 dpl
1067+ 753A 78 6B                        dw              PLUSSTORE       //          +!
1068+ 753C              CSgn_Endif_1                                    //      endif
1069+ 753C 03 6D                        dw          ZERO                //      0
1070+ 753E              CSgn_Endif_0:                                   // endif
1071+ 753E A3 69                        dw      EXIT
1072+ 7540
1073+ 7540              //  ______________________________________________________________________
1074+ 7540              //
1075+ 7540              // (number)     d a -- d1 a1
1076+ 7540              // using the current BASE parse characters stored in address a
1077+ 7540              // accumulating a double precision integer d
1078+ 7540              // the process stops at the first not-convertible character
1079+ 7540              // A double-number is kept in CPU registers as HLDE.
1080+ 7540              // On the stack a double number is treated as two single numbers
1081+ 7540              // where HL is on the top of the stack and DE is the second from top,
1082+ 7540              // so in the stack memory it appears as LHED.
1083+ 7540              // Instead, in 2VARIABLE a double number is stored as EDLH.
1084+ 7540                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1084+ 7540             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1084+ 7540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 7540             >
1084+ 7540             >                // dummy db directives used to calculate length of namec
1084+ 7540 28 4E 55 4D >                db      "(NUMBER)"
1084+ 7544 42 45 52 29 >
1084+ 7548             >len_NFA         defl    $ - temp_NFA
1084+ 7548             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 7540             >
1084+ 7540 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 7541 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1084+ 7545 42 45 52 29 >
1084+ 7549             >                org     $-1                 // alter last byte of Name just above to set
1084+ 7548 A9          >                db      {b $} | END_BIT     // msb as name end
1084+ 7549             >
1084+ 7549 FE 74       >                dw      last_NFA            // Link to previous definition Name
1084+ 754B             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 754B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1084+ 754D             >                else
1084+ 754D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1084+ 754D             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 754D             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 754D             >
1084+ 754D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 754D                                                              // begin
1086+ 754D              CNumber_Begin:
1087+ 754D 49 6A                        dw          ONE_PLUS            //      1+
1088+ 754F 08 6B B6 69                  dw          DUP, TO_R           //      dup >r
1089+ 7553 B6 6B                        dw          CFETCH              //      @
1090+ 7555 58 6E 9B 6B                  dw          BASE, FETCH         //      base @
1091+ 7559 B1 64                        dw          DIGIT               //      digit
1092+ 755B                                                              // while
1093+ 755B 2C 64                        dw      ZBRANCH
1094+ 755D 2C 00                        dw      CNumber_While_end - $
1095+ 755F FB 6A                        dw          SWAP                //      swap
1096+ 7561 58 6E 9B 6B                  dw          BASE, FETCH         //      base @
1097+ 7565 C9 68                        dw          UM_MUL              //      um*
1098+ 7567 D3 6A 15 6B                  dw          DROP, ROT           //      drop rot
1099+ 756B 58 6E 9B 6B                  dw          BASE, FETCH         //      base @
1100+ 756F C9 68                        dw          UM_MUL              //      um*
1101+ 7571 35 6A                        dw          DPLUS               //      d+
1102+ 7573 61 6E 9B 6B                  dw          DPL, FETCH          //      dpl @
1103+ 7577 49 6A                        dw          ONE_PLUS            //      1+
1104+ 7579                                                              //      if
1105+ 7579 2C 64                        dw          ZBRANCH
1106+ 757B 08 00                        dw          CNumber_Endif - $
1107+ 757D 0B 6D 61 6E                  dw              ONE, DPL        //          1 dpl
1108+ 7581 78 6B                        dw              PLUSSTORE       //          +!
1109+ 7583              CNumber_Endif:                                  //      endif
1110+ 7583 CA 69                        dw             R_TO             //      r>  ( balance rp )
1111+ 7585 15 64                        dw      BRANCH
1112+ 7587 C6 FF                        dw      CNumber_Begin - $
1113+ 7589              CNumber_While_end:                              // repeat
1114+ 7589 CA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1115+ 758B A3 69                        dw      EXIT                    // ;
1116+ 758D
1117+ 758D              //  ______________________________________________________________________
1118+ 758D              //
1119+ 758D              // number       a -- d
1120+ 758D                              Colon_Def NUMBER,  "NUMBER", is_normal
1120+ 758D             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1120+ 758D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 758D             >
1120+ 758D             >                // dummy db directives used to calculate length of namec
1120+ 758D 4E 55 4D 42 >                db      "NUMBER"
1120+ 7591 45 52       >
1120+ 7593             >len_NFA         defl    $ - temp_NFA
1120+ 7593             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 758D             >
1120+ 758D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 758E 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1120+ 7592 45 52       >
1120+ 7594             >                org     $-1                 // alter last byte of Name just above to set
1120+ 7593 D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 7594             >
1120+ 7594 40 75       >                dw      last_NFA            // Link to previous definition Name
1120+ 7596             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 7596 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 7598             >                else
1120+ 7598 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1120+ 7598             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 7598             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 7598             >
1120+ 7598             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 7598 03 6D 03 6D                  dw      ZERO, ZERO              // 0 0
1122+ 759C 15 6B                        dw      ROT                     // rot
1123+ 759E 06 75 B6 69                  dw      CSGN, TO_R              // (sgn) >r
1124+ 75A2 24 6D 61 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1124+ 75A6 A8 6B
1125+ 75A8 4B 75                        dw      CNUMBER                 // (number)
1126+ 75AA 08 6B B6 6B                  dw      DUP, CFETCH             // dup c@
1127+ 75AE A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1127+ 75B2 43 6F
1128+ 75B4                                                              // if
1129+ 75B4 2C 64                        dw      ZBRANCH
1130+ 75B6 0A 00                        dw      Number_Endif_1 - $
1131+ 75B8 03 6D 61 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1131+ 75BC A8 6B
1132+ 75BE 4B 75                        dw          CNUMBER             //      (number)
1133+ 75C0              Number_Endif_1:                                 // endif
1134+ 75C0 B6 6B 2D 6D                  dw      CFETCH, BL              // c@ bl
1135+ 75C4 35 6F 03 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1135+ 75C8 A7 70
1136+ 75CA CA 69                        dw      R_TO                    // r>
1137+ 75CC                                                              // if
1138+ 75CC 2C 64                        dw      ZBRANCH
1139+ 75CE 04 00                        dw      Number_Endif_2 - $
1140+ 75D0 A9 6A                        dw          DMINUS              //      dminus
1141+ 75D2              Number_Endif_2:                                 // endif
1142+ 75D2 A3 69                        dw      EXIT                    // ;
1143+ 75D4
1144+ 75D4              //  ______________________________________________________________________
1145+ 75D4              //
1146+ 75D4              // -find        a -- d
1147+ 75D4                              Colon_Def LFIND,  "-FIND", is_normal
1147+ 75D4             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1147+ 75D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 75D4             >
1147+ 75D4             >                // dummy db directives used to calculate length of namec
1147+ 75D4 2D 46 49 4E >                db      "-FIND"
1147+ 75D8 44          >
1147+ 75D9             >len_NFA         defl    $ - temp_NFA
1147+ 75D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 75D4             >
1147+ 75D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 75D5 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1147+ 75D9 44          >
1147+ 75DA             >                org     $-1                 // alter last byte of Name just above to set
1147+ 75D9 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ 75DA             >
1147+ 75DA 8D 75       >                dw      last_NFA            // Link to previous definition Name
1147+ 75DC             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 75DC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 75DE             >                else
1147+ 75DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1147+ 75DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 75DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 75DE             >
1147+ 75DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 75DE 2D 6D 2A 74                  dw      BL, WORD                // bl word
1149+ 75E2 36 6E 9B 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1149+ 75E6 9B 6B
1150+ 75E8 26 65                        dw      C_FIND                  // (find)
1151+ 75EA B6 6F                        dw      QDUP                    // ?dup
1152+ 75EC E5 69                        dw      ZEQUAL                  // 0=
1153+ 75EE                                                              // if
1154+ 75EE 2C 64                        dw      ZBRANCH
1155+ 75F0 08 00                        dw      LFind_Endif - $
1156+ 75F2 E2 6E                        dw          HERE                //      here
1157+ 75F4 23 70                        dw          LATEST              //      latest
1158+ 75F6 26 65                        dw          C_FIND              //      (find)
1159+ 75F8              LFind_Endif:                                    // endif
1160+ 75F8 A3 69                        dw      EXIT                    // ;
1161+ 75FA
1162+ 75FA              //  ______________________________________________________________________
1163+ 75FA              //
1164+ 75FA              // (abort)      --
1165+ 75FA                              Colon_Def CABORT,  "(ABORT)", is_normal
1165+ 75FA             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1165+ 75FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 75FA             >
1165+ 75FA             >                // dummy db directives used to calculate length of namec
1165+ 75FA 28 41 42 4F >                db      "(ABORT)"
1165+ 75FE 52 54 29    >
1165+ 7601             >len_NFA         defl    $ - temp_NFA
1165+ 7601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 75FA             >
1165+ 75FA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 75FB 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1165+ 75FF 52 54 29    >
1165+ 7602             >                org     $-1                 // alter last byte of Name just above to set
1165+ 7601 A9          >                db      {b $} | END_BIT     // msb as name end
1165+ 7602             >
1165+ 7602 D4 75       >                dw      last_NFA            // Link to previous definition Name
1165+ 7604             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 7604 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1165+ 7606             >                else
1165+ 7606 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1165+ 7606             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 7606             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 7606             >
1165+ 7606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 7606 CB 78                        dw      ABORT                   // abort
1167+ 7608 A3 69                        dw      EXIT                    // ;
1168+ 760A
1169+ 760A              //  ______________________________________________________________________
1170+ 760A              //
1171+ 760A              // error        n --
1172+ 760A              // raise an error
1173+ 760A              // if WARNING is 0, prints "MSG#n".
1174+ 760A              // if WARNING is 1, prints line n of screen 4.
1175+ 760A              // if WARNING is -1 does (ABORT) that normally does ABORT
1176+ 760A              // value can be negative or beyond block 4.
1177+ 760A                              Colon_Def ERROR,  "ERROR", is_normal
1177+ 760A             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1177+ 760A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 760A             >
1177+ 760A             >                // dummy db directives used to calculate length of namec
1177+ 760A 45 52 52 4F >                db      "ERROR"
1177+ 760E 52          >
1177+ 760F             >len_NFA         defl    $ - temp_NFA
1177+ 760F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 760A             >
1177+ 760A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 760B 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1177+ 760F 52          >
1177+ 7610             >                org     $-1                 // alter last byte of Name just above to set
1177+ 760F D2          >                db      {b $} | END_BIT     // msb as name end
1177+ 7610             >
1177+ 7610 FA 75       >                dw      last_NFA            // Link to previous definition Name
1177+ 7612             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 7612 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1177+ 7614             >                else
1177+ 7614 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1177+ 7614             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 7614             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 7614             >
1177+ 7614             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 7614 AE 6D 9B 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1178+ 7618 00 6A
1179+ 761A                                                              // if
1180+ 761A 2C 64                        dw      ZBRANCH
1181+ 761C 04 00                        dw      Error_Endif_1 - $
1182+ 761E 04 76                        dw          CABORT              //      (abort)
1183+ 7620              Error_Endif_1:                                  // endif
1184+ 7620 E2 6E 41 72                  dw      HERE, COUNT, TYPE       // here count type
1184+ 7624 A7 72
1185+ 7626 79 74                        dw      C_DOT_QUOTE             // .( ? )
1186+ 7628 02 3F 20                     db      2, "? "
1187+ 762B FC 7A                        dw      MESSAGE                 // message  ( forward )
1188+ 762D 85 6D 9B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1188+ 7631 7A 69
1189+ 7633 02 6E 9B 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1189+ 7637 B6 6F
1190+ 7639                                                              // if
1191+ 7639 2C 64                        dw      ZBRANCH
1192+ 763B 08 00                        dw      Error_Endif_2 - $
1193+ 763D 0B 6E 9B 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1193+ 7641 FB 6A
1194+ 7643              Error_Endif_2:                                  // endif
1195+ 7643 8A 78                        dw      QUIT                    // quit ( forward )
1196+ 7645 A3 69                        dw      EXIT                    // ;
1197+ 7647              //  ______________________________________________________________________
1198+ 7647              //
1199+ 7647              // id.          nfa --
1200+ 7647                              Colon_Def ID_DOT,  "ID.", is_normal
1200+ 7647             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1200+ 7647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 7647             >
1200+ 7647             >                // dummy db directives used to calculate length of namec
1200+ 7647 49 44 2E    >                db      "ID."
1200+ 764A             >len_NFA         defl    $ - temp_NFA
1200+ 764A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 7647             >
1200+ 7647 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 7648 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1200+ 764B             >                org     $-1                 // alter last byte of Name just above to set
1200+ 764A AE          >                db      {b $} | END_BIT     // msb as name end
1200+ 764B             >
1200+ 764B 0A 76       >                dw      last_NFA            // Link to previous definition Name
1200+ 764D             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 764D 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 764F             >                else
1200+ 764F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1200+ 764F             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 764F             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 764F             >
1200+ 764F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 764F 17 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1201+ 7653 20 00 A9 63
1201+ 7657 60 00
1202+ 7659 C7 73                        dw      FILL                    // fill
1203+ 765B 08 6B 61 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1203+ 765F 33 70
1204+ 7661 C3 6A 35 6F                  dw      OVER, SUBTRACT          // over -
1205+ 7665 17 74 FB 6A                  dw      PAD, SWAP               // pad swap
1206+ 7669 96 68                        dw      CMOVE                   // cmove
1207+ 766B 17 74 41 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1207+ 766F A9 63 1F 00
1208+ 7673 33 69                        dw      AND_OP                  // and  ( use only lower bits )
1209+ 7675 A7 72 ED 6F                  dw      TYPE, SPACE             // type
1210+ 7679 A3 69                        dw      EXIT                    // ;
1211+ 767B
1212+ 767B              //  ______________________________________________________________________
1213+ 767B              //
1214+ 767B              // code         -- cccc
1215+ 767B                              Colon_Def CODE,  "CODE", is_normal
1215+ 767B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1215+ 767B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 767B             >
1215+ 767B             >                // dummy db directives used to calculate length of namec
1215+ 767B 43 4F 44 45 >                db      "CODE"
1215+ 767F             >len_NFA         defl    $ - temp_NFA
1215+ 767F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 767B             >
1215+ 767B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 767C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1215+ 7680             >                org     $-1                 // alter last byte of Name just above to set
1215+ 767F C5          >                db      {b $} | END_BIT     // msb as name end
1215+ 7680             >
1215+ 7680 47 76       >                dw      last_NFA            // Link to previous definition Name
1215+ 7682             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 7682 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 7684             >                else
1215+ 7684 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1215+ 7684             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 7684             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 7684             >
1215+ 7684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 7684 DC 75                        dw      LFIND                   // -find
1217+ 7686                                                              // if
1218+ 7686 2C 64                        dw      ZBRANCH
1219+ 7688 10 00                        dw      Code_Endif - $
1220+ 768A D3 6A                        dw          DROP                //      drop
1221+ 768C 85 70 4D 76                  dw          TO_NAME, ID_DOT     //      >name id.
1222+ 7690 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1222+ 7694 FC 7A
1223+ 7696 ED 6F                        dw          SPACE               //      space
1224+ 7698              Code_Endif:                                     // endif
1225+ 7698 E2 6E                        dw      HERE                    // here
1226+ 769A                                                              // ( ---- here begins NFA ---- )
1227+ 769A 08 6B B6 6B                  dw      DUP, CFETCH             // dup c@
1228+ 769E A1 6D 9B 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1228+ 76A2 89 6F
1229+ 76A4 49 6A F2 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1230+ 76A8 08 6B                        dw      DUP                     // dup
1231+ 76AA A9 63                        dw      LIT
1232+ 76AC A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1233+ 76AE 8E 6B                        dw      TOGGLE                  // toggle
1234+ 76B0 E2 6E 55 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1235+ 76B4 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1235+ 76B8 8E 6B
1236+ 76BA                                                              // ( ---- here is LFA ---- )
1237+ 76BA 23 70 FE 6E                  dw      LATEST, COMMA           // latest ,
1238+ 76BE 43 6E 9B 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1238+ 76C2 A8 6B
1239+ 76C4 E2 6E 71 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1239+ 76C8 FE 6E
1240+ 76CA A3 69                        dw      EXIT                    // ;
1241+ 76CC
1242+ 76CC              //  ______________________________________________________________________
1243+ 76CC              //
1244+ 76CC              // create       -- cccc     ( compile time )
1245+ 76CC              //              -- a        ( run time )
1246+ 76CC                              Colon_Def CREATE,  "CREATE", is_normal
1246+ 76CC             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1246+ 76CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 76CC             >
1246+ 76CC             >                // dummy db directives used to calculate length of namec
1246+ 76CC 43 52 45 41 >                db      "CREATE"
1246+ 76D0 54 45       >
1246+ 76D2             >len_NFA         defl    $ - temp_NFA
1246+ 76D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 76CC             >
1246+ 76CC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 76CD 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1246+ 76D1 54 45       >
1246+ 76D3             >                org     $-1                 // alter last byte of Name just above to set
1246+ 76D2 C5          >                db      {b $} | END_BIT     // msb as name end
1246+ 76D3             >
1246+ 76D3 7B 76       >                dw      last_NFA            // Link to previous definition Name
1246+ 76D5             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 76D5 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 76D7             >                else
1246+ 76D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1246+ 76D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 76D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 76D7             >
1246+ 76D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 76D7 82 76 86 71                  dw      CODE, SMUDGE        // code smudge
1248+ 76DB
1249+ 76DB
1250+ 76DB DC 71                        dw      C_SEMICOLON_CODE
1251+ 76DD                              // this routine is called from the call coded in CFA
1252+ 76DD              Create_Ptr:
1253+ 76DD 13                           inc     de
1254+ 76DE D5                           push    de                  // balance TOS before overwrite it
1255+ 76DF
1256+ 76DF                              next
1256+ 76DF DD E9       >                jp      (ix)
1257+ 76E1
1258+ 76E1              //  ______________________________________________________________________
1259+ 76E1              //
1260+ 76E1              // [compile]    -- cccc     ( compile time )
1261+ 76E1                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1261+ 76E1             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1261+ 76E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1261+ 76E1             >
1261+ 76E1             >                // dummy db directives used to calculate length of namec
1261+ 76E1 5B 43 4F 4D >                db      "[COMPILE]"
1261+ 76E5 50 49 4C 45 >
1261+ 76E9 5D          >
1261+ 76EA             >len_NFA         defl    $ - temp_NFA
1261+ 76EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1261+ 76E1             >
1261+ 76E1 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1261+ 76E2 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1261+ 76E6 50 49 4C 45 >
1261+ 76EA 5D          >
1261+ 76EB             >                org     $-1                 // alter last byte of Name just above to set
1261+ 76EA DD          >                db      {b $} | END_BIT     // msb as name end
1261+ 76EB             >
1261+ 76EB CC 76       >                dw      last_NFA            // Link to previous definition Name
1261+ 76ED             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1261+ 76ED 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1261+ 76EF             >                else
1261+ 76EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1261+ 76EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1261+ 76EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1261+ 76EF             >
1261+ 76EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1262+ 76EF DC 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1263+ 76F1 E5 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1264+ 76F3 03 6D A7 70                  dw      ZERO, QERROR            // 0 ?error
1265+ 76F7 D3 6A                        dw      DROP                    // drop       (  cfa  )
1266+ 76F9 FE 6E                        dw      COMMA                   // ,
1267+ 76FB A3 69                        dw      EXIT                    // ; immediate
1268+ 76FD
1269+ 76FD              //  ______________________________________________________________________
1270+ 76FD              //
1271+ 76FD              // literal      n --      ( compile time )
1272+ 76FD                              Colon_Def LITERAL,  "LITERAL", is_immediate
1272+ 76FD             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1272+ 76FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1272+ 76FD             >
1272+ 76FD             >                // dummy db directives used to calculate length of namec
1272+ 76FD 4C 49 54 45 >                db      "LITERAL"
1272+ 7701 52 41 4C    >
1272+ 7704             >len_NFA         defl    $ - temp_NFA
1272+ 7704             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1272+ 76FD             >
1272+ 76FD C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1272+ 76FE 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1272+ 7702 52 41 4C    >
1272+ 7705             >                org     $-1                 // alter last byte of Name just above to set
1272+ 7704 CC          >                db      {b $} | END_BIT     // msb as name end
1272+ 7705             >
1272+ 7705 E1 76       >                dw      last_NFA            // Link to previous definition Name
1272+ 7707             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1272+ 7707 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1272+ 7709             >                else
1272+ 7709 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1272+ 7709             >                endif           ; ok        // for other definitions it "points" the correct handler
1272+ 7709             >                // Use of "; ok" to suppress "warning[fwdref]"
1272+ 7709             >
1272+ 7709             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1273+ 7709 4E 6E 9B 6B                  dw      STATE, FETCH            // state @
1274+ 770D                                                              // if
1275+ 770D 2C 64                        dw      ZBRANCH
1276+ 770F 08 00                        dw      Literal_Endif - $
1277+ 7711 3A 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1278+ 7715 FE 6E                        dw          COMMA               //      ,
1279+ 7717              Literal_Endif:                                  // endif
1280+ 7717 A3 69                        dw      EXIT                    // ; immediate
1281+ 7719
1282+ 7719              //  ______________________________________________________________________
1283+ 7719              //
1284+ 7719              // dliteral     n --      ( compile time )
1285+ 7719                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1285+ 7719             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1285+ 7719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1285+ 7719             >
1285+ 7719             >                // dummy db directives used to calculate length of namec
1285+ 7719 44 4C 49 54 >                db      "DLITERAL"
1285+ 771D 45 52 41 4C >
1285+ 7721             >len_NFA         defl    $ - temp_NFA
1285+ 7721             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1285+ 7719             >
1285+ 7719 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1285+ 771A 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1285+ 771E 45 52 41 4C >
1285+ 7722             >                org     $-1                 // alter last byte of Name just above to set
1285+ 7721 CC          >                db      {b $} | END_BIT     // msb as name end
1285+ 7722             >
1285+ 7722 FD 76       >                dw      last_NFA            // Link to previous definition Name
1285+ 7724             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1285+ 7724 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1285+ 7726             >                else
1285+ 7726 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1285+ 7726             >                endif           ; ok        // for other definitions it "points" the correct handler
1285+ 7726             >                // Use of "; ok" to suppress "warning[fwdref]"
1285+ 7726             >
1285+ 7726             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1286+ 7726 4E 6E 9B 6B                  dw      STATE, FETCH            // state @
1287+ 772A                                                              // if
1288+ 772A 2C 64                        dw      ZBRANCH
1289+ 772C 08 00                        dw      DLiteral_Endif - $
1290+ 772E FB 6A                        dw          SWAP                //      swap
1291+ 7730 07 77 07 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1292+ 7734              DLiteral_Endif:                                 // endif
1293+ 7734 A3 69                        dw      EXIT                    // ; immediate
1294+ 7736
1295+ 7736              //  ______________________________________________________________________
1296+ 7736              //
1297+ 7736              // [char]       n --      ( compile time )
1298+ 7736              // inside colon definition, gets first character from next input word
1299+ 7736              // and compiles it as literal.
1300+ 7736                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1300+ 7736             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1300+ 7736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1300+ 7736             >
1300+ 7736             >                // dummy db directives used to calculate length of namec
1300+ 7736 5B 43 48 41 >                db      "[CHAR]"
1300+ 773A 52 5D       >
1300+ 773C             >len_NFA         defl    $ - temp_NFA
1300+ 773C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1300+ 7736             >
1300+ 7736 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1300+ 7737 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1300+ 773B 52 5D       >
1300+ 773D             >                org     $-1                 // alter last byte of Name just above to set
1300+ 773C DD          >                db      {b $} | END_BIT     // msb as name end
1300+ 773D             >
1300+ 773D 19 77       >                dw      last_NFA            // Link to previous definition Name
1300+ 773F             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1300+ 773F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1300+ 7741             >                else
1300+ 7741 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1300+ 7741             >                endif           ; ok        // for other definitions it "points" the correct handler
1300+ 7741             >                // Use of "; ok" to suppress "warning[fwdref]"
1300+ 7741             >
1300+ 7741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1301+ 7741 94 74 07 77                  dw      CHAR, LITERAL           // char [compile] literal
1302+ 7745 A3 69                        dw      EXIT                    // ; immediate
1303+ 7747
1304+ 7747              //  ______________________________________________________________________
1305+ 7747              //
1306+ 7747              // 0x00         n --      ( compile time )
1307+ 7747                              Colon_Def NUL_WORD,  $00, is_immediate
1307+ 7747             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1307+ 7747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1307+ 7747             >
1307+ 7747             >                // dummy db directives used to calculate length of namec
1307+ 7747 00          >                db      $00
1307+ 7748             >len_NFA         defl    $ - temp_NFA
1307+ 7748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1307+ 7747             >
1307+ 7747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1307+ 7748 00          >                db      $00               // name string in 7-bit ascii, but
1307+ 7749             >                org     $-1                 // alter last byte of Name just above to set
1307+ 7748 80          >                db      {b $} | END_BIT     // msb as name end
1307+ 7749             >
1307+ 7749 36 77       >                dw      last_NFA            // Link to previous definition Name
1307+ 774B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1307+ 774B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1307+ 774D             >                else
1307+ 774D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1307+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
1307+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
1307+ 774D             >
1307+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1308+ 774D 02 6E 9B 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1308+ 7751 0B 6D
1309+ 7753 7B 6F                        dw      GREATER                 // > if
1310+ 7755                                                              // if
1311+ 7755 2C 64                        dw      ZBRANCH
1312+ 7757 28 00                        dw      Nul_Else_1 - $
1313+ 7759 0B 6D 02 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1313+ 775D 78 6B
1314+ 775F 03 6D 0B 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1314+ 7763 A8 6B
1315+ 7765 02 6E 9B 6B                  dw          BLK, FETCH          //      blk @
1316+ 7769 4F 6D                        dw          BSCR                //      b/scr
1317+ 776B 55 6A                        dw          ONE_SUBTRACT        //      1 -
1318+ 776D 33 69                        dw          AND_OP              //      and  ( this is tricky )
1319+ 776F E5 69                        dw          ZEQUAL              //      0=
1320+ 7771                                                              //      if
1321+ 7771 2C 64                        dw          ZBRANCH
1322+ 7773 08 00                        dw          Nul_Endif_2 - $
1323+ 7775 D9 70                        dw              QEXEC           //          ?exec
1324+ 7777 CA 69 D3 6A                  dw              R_TO, DROP      //          r> drop
1325+ 777B              Nul_Endif_2:                                    //      endif
1326+ 777B 15 64                        dw      BRANCH
1327+ 777D 06 00                        dw      Nul_Endif_1 - $
1328+ 777F              Nul_Else_1:                                     // else
1329+ 777F CA 69 D3 6A                  dw          R_TO, DROP          //      r> drop
1330+ 7783              Nul_Endif_1:                                    // endif
1331+ 7783 A3 69                        dw      EXIT                    // ;
1332+ 7785
1333+ 7785              //  ______________________________________________________________________
1334+ 7785              //
1335+ 7785              // ?stack       --
1336+ 7785              // Raise error #1 if stack is empty and you pop it
1337+ 7785              // Raise error #7 if stack is full.
1338+ 7785              // This means SP must always stay between HERE and FFFF
1339+ 7785              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1340+ 7785              // for Next 8K MMU paging this is $DOE8
1341+ 7785                              Colon_Def QSTACK, "?STACK", is_normal
1341+ 7785             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1341+ 7785             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 7785             >
1341+ 7785             >                // dummy db directives used to calculate length of namec
1341+ 7785 3F 53 54 41 >                db      "?STACK"
1341+ 7789 43 4B       >
1341+ 778B             >len_NFA         defl    $ - temp_NFA
1341+ 778B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 7785             >
1341+ 7785 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 7786 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1341+ 778A 43 4B       >
1341+ 778C             >                org     $-1                 // alter last byte of Name just above to set
1341+ 778B CB          >                db      {b $} | END_BIT     // msb as name end
1341+ 778C             >
1341+ 778C 47 77       >                dw      last_NFA            // Link to previous definition Name
1341+ 778E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 778E 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1341+ 7790             >                else
1341+ 7790 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1341+ 7790             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 7790             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 7790             >
1341+ 7790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 7790 6B 69                        dw      SPFETCH                 // sp@
1343+ 7792 85 6D 9B 6B                  dw      S0, FETCH               // s0 @
1344+ 7796 FB 6A 50 6F                  dw      SWAP, ULESS             // swap u<
1345+ 779A 0B 6D A7 70                  dw      ONE, QERROR             // 1 ?error
1346+ 779E E2 6E                        dw      HERE                    // here
1347+ 77A0 85 6D 9B 6B                  dw      S0, FETCH, LESS         // s0 @ <
1347+ 77A4 64 6F
1348+ 77A6                                                              // if
1349+ 77A6 2C 64                        dw      ZBRANCH
1350+ 77A8 14 00                        dw      QStack_Endif - $
1351+ 77AA 6B 69                        dw          SPFETCH             //      sp@
1352+ 77AC E2 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1352+ 77B0 80 00
1353+ 77B2 28 6A 50 6F                  dw          PLUS, ULESS         //      plus u<
1354+ 77B6 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1354+ 77BA A7 70
1355+ 77BC              QStack_Endif:                                   // endif
1356+ 77BC A3 69                        dw      EXIT                    // ;
1357+ 77BE
1358+ 77BE
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77BE                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77BE              //  ______________________________________________________________________
   2+ 77BE              //
   3+ 77BE              //  L2.asm
   4+ 77BE              //
   5+ 77BE              //  Level-2
   6+ 77BE              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77BE              //  ______________________________________________________________________
   8+ 77BE
   9+ 77BE
  10+ 77BE              //  ______________________________________________________________________
  11+ 77BE              //
  12+ 77BE              // interpret    --
  13+ 77BE              // This is the text interpreter.
  14+ 77BE              // It executes or compiles, depending on STATE, the text coming from
  15+ 77BE              // current input stream.
  16+ 77BE              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77BE              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77BE              // leaving on top of stack a single or double precision number, depending
  19+ 77BE              // on the presence of a decimal point.
  20+ 77BE              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77BE              // by the offending word.
  22+ 77BE                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77BE             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77BE             >
  22+ 77BE             >                // dummy db directives used to calculate length of namec
  22+ 77BE 49 4E 54 45 >                db      "INTERPRET"
  22+ 77C2 52 50 52 45 >
  22+ 77C6 54          >
  22+ 77C7             >len_NFA         defl    $ - temp_NFA
  22+ 77C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77BE             >
  22+ 77BE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77BF 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77C3 52 50 52 45 >
  22+ 77C7 54          >
  22+ 77C8             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77C7 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77C8             >
  22+ 77C8 85 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77CA             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77CA 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77CC             >                else
  22+ 77CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77CC             >
  22+ 77CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77CC
  24+ 77CC              Interpret_Begin:                                        // begin
  25+ 77CC DC 75                        dw          LFIND                       //      -find
  26+ 77CE                                                                      //      if
  27+ 77CE 2C 64                        dw          ZBRANCH
  28+ 77D0 1A 00                        dw          Interpret_Else_1 - $
  29+ 77D2 4E 6E 9B 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77D6 64 6F
  30+ 77D8                                                                      //          if
  31+ 77D8 2C 64                        dw              ZBRANCH
  32+ 77DA 08 00                        dw              Interpret_Else_2 - $
  33+ 77DC 57 71                        dw                  COMPILE_XT          //              compile,
  34+ 77DE                                                                      //          else
  35+ 77DE 15 64                        dw              BRANCH
  36+ 77E0 06 00                        dw              Interpret_Endif_2 - $
  37+ 77E2              Interpret_Else_2:
  38+ 77E2 BE 63 AE 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77E6              Interpret_Endif_2:                                      //          endif
  40+ 77E6                                                                      //      else
  41+ 77E6 15 64                        dw          BRANCH
  42+ 77E8 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77EA              Interpret_Else_1:
  44+ 77EA E2 6E 96 75                  dw              HERE, NUMBER            //          here number
  45+ 77EE 61 6E 9B 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77F2 49 6A
  46+ 77F4                                                                      //          if
  47+ 77F4 2C 64                        dw              ZBRANCH
  48+ 77F6 08 00                        dw              Interpret_Else_3 - $
  49+ 77F8              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77F8              //                                                      //              if
  51+ 77F8              //              dw                  ZBRANCH
  52+ 77F8              //              dw                  Interpret_Endif_4 - $
  53+ 77F8              //              dw                      ONE, ZERO       //                  1 0
  54+ 77F8              //              dw                      TWO_DROP        //                  2drop
  55+ 77F8              //Interpret_Endif_4:                                      //              endif
  56+ 77F8 24 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77FA                                                                      //          else
  58+ 77FA 15 64                        dw              BRANCH
  59+ 77FC 06 00                        dw              Interpret_Endif_3 - $
  60+ 77FE              Interpret_Else_3:
  61+ 77FE D3 6A                        dw                  DROP                //              drop
  62+ 7800 07 77                        dw                  LITERAL             //              [compile]  literal
  63+ 7802              Interpret_Endif_3:                                      //          endif
  64+ 7802              Interpret_Endif_1:                                      //      endif
  65+ 7802 8E 77                        dw          QSTACK                      //      ?stack
  66+ 7804 44 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7806                                                                      //      if
  68+ 7806 2C 64                        dw          ZBRANCH
  69+ 7808 04 00                        dw          Interpret_Endif_5 - $
  70+ 780A 04 76                        dw              CABORT                  //          (abort)
  71+ 780C              Interpret_Endif_5:                                      //      endif
  72+ 780C 15 64                        dw      BRANCH
  73+ 780E BE FF                        dw      Interpret_Begin - $
  74+ 7810 A3 69                        dw      EXIT                            // ;
  75+ 7812
  76+ 7812              //  ______________________________________________________________________
  77+ 7812              //
  78+ 7812              // vocabulary   -- cccc     ( compile time )
  79+ 7812              // Defining word used in the form   VOCABULARY cccc
  80+ 7812              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7812              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7812              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7812              // so new definitions can be inserted in that vocabulary.
  84+ 7812                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7812             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7812             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7812             >
  84+ 7812             >                // dummy db directives used to calculate length of namec
  84+ 7812 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7816 42 55 4C 41 >
  84+ 781A 52 59       >
  84+ 781C             >len_NFA         defl    $ - temp_NFA
  84+ 781C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7812             >
  84+ 7812 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7813 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7817 42 55 4C 41 >
  84+ 781B 52 59       >
  84+ 781D             >                org     $-1                 // alter last byte of Name just above to set
  84+ 781C D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 781D             >
  84+ 781D BE 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 781F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 781F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7821             >                else
  84+ 7821 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7821             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7821             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7821             >
  84+ 7821             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7821
  86+ 7821 0A 72                        dw      CBUILDS
  87+ 7823
  88+ 7823 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7827 FE 6E
  89+ 7829 43 6E 9B 6B                  dw      CURRENT, FETCH          // current @
  90+ 782D 7B 6A FE 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7831 E2 6E                        dw      HERE                    // here
  92+ 7833 CF 6D 9B 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7837 FE 6E
  93+ 7839 CF 6D A8 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 783D
  95+ 783D 1A 72                        dw      DOES_TO                 // does>
  96+ 783F              Vocabulary_Does:
  97+ 783F 71 6A                        dw      CELL_PLUS               // cell+
  98+ 7841 36 6E A8 6B                  dw      CONTEXT, STORE          // context !
  99+ 7845 A3 69                        dw      EXIT                    // ;
 100+ 7847
 101+ 7847              //  ______________________________________________________________________
 102+ 7847              //
 103+ 7847              // forth        --
 104+ 7847              // Name of the first vocabulary.
 105+ 7847              // It makes FORTH the CONTEXT vocabulary.
 106+ 7847              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7847              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7847              // of a colon definition to be able to select the vocabulary.
 109+ 7847
 110+ 7847                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7847             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7847             >
 110+ 7847             >                // dummy db directives used to calculate length of namec
 110+ 7847 46 4F 52 54 >                db      "FORTH"
 110+ 784B 48          >
 110+ 784C             >len_NFA         defl    $ - temp_NFA
 110+ 784C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7847             >
 110+ 7847 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7848 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 784C 48          >
 110+ 784D             >                org     $-1                 // alter last byte of Name just above to set
 110+ 784C C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 784D             >
 110+ 784D 12 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 784F             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 784F 26 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7851             >                else
 110+ 7851 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7851             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7851             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7851             >
 110+ 7851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7851 3F 78                        dw      Vocabulary_Does
 112+ 7853 81 A0                        db      $81, $A0
 113+ 7855              Forth_Latest_Ptr:
 114+ 7855 70 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7857              Voclink_Ptr:
 116+ 7857 00 00                        dw      0
 117+ 7859              // Any new vocabulary is structured as follow:
 118+ 7859              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7859              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7859              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7859              //       at creations it points to the null-word of its parent vocabulary
 122+ 7859              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7859              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7859              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7859              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7859              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7859              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7859
 129+ 7859              //  ______________________________________________________________________
 130+ 7859              //
 131+ 7859              // definitions  --
 132+ 7859              // Used in the form  cccc DEFINITIONS
 133+ 7859              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7859              // vocabulary cccc.
 135+ 7859                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7859             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7859             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7859             >
 135+ 7859             >                // dummy db directives used to calculate length of namec
 135+ 7859 44 45 46 49 >                db      "DEFINITIONS"
 135+ 785D 4E 49 54 49 >
 135+ 7861 4F 4E 53    >
 135+ 7864             >len_NFA         defl    $ - temp_NFA
 135+ 7864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7859             >
 135+ 7859 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 785A 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 785E 4E 49 54 49 >
 135+ 7862 4F 4E 53    >
 135+ 7865             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7864 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7865             >
 135+ 7865 47 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7867             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7867 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7869             >                else
 135+ 7869 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7869             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7869             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7869             >
 135+ 7869             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7869 36 6E 9B 6B                  dw      CONTEXT, FETCH          // context @
 137+ 786D 43 6E A8 6B                  dw      CURRENT, STORE          // current !
 138+ 7871 A3 69                        dw      EXIT                    // ;
 139+ 7873
 140+ 7873              //  ______________________________________________________________________
 141+ 7873              //
 142+ 7873              // (            -- cccc )
 143+ 7873              // the following text is interpreted as a comment until a closing )
 144+ 7873                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7873             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7873             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7873             >
 144+ 7873             >                // dummy db directives used to calculate length of namec
 144+ 7873 28          >                db      "("
 144+ 7874             >len_NFA         defl    $ - temp_NFA
 144+ 7874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7873             >
 144+ 7873 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7874 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7875             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7874 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7875             >
 144+ 7875 59 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7877             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7877 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7879             >                else
 144+ 7879 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7879             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7879             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7879             >
 144+ 7879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7879 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 787D 2A 74 D3 6A                  dw      WORD, DROP              // word drop
 147+ 7881 A3 69                        dw      EXIT                    // ;
 148+ 7883
 149+ 7883              //  ______________________________________________________________________
 150+ 7883              //
 151+ 7883              // quit         --
 152+ 7883              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7883                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7883             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7883             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7883             >
 153+ 7883             >                // dummy db directives used to calculate length of namec
 153+ 7883 51 55 49 54 >                db      "QUIT"
 153+ 7887             >len_NFA         defl    $ - temp_NFA
 153+ 7887             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7883             >
 153+ 7883 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7884 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7888             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7887 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7888             >
 153+ 7888 73 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 788A             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 788A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 788C             >                else
 153+ 788C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 788C             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 788C             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 788C             >
 153+ 788C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 788C
 155+ 788C B9 6E 9B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7890 CB 67 D3 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7894 03 6D B9 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7898 A8 6B
 158+ 789A 03 6D 02 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 789E A8 6B
 159+ 78A0 63 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78A2                                                              // begin
 161+ 78A2              Quit_Begin:
 162+ 78A2 8D 6D 9B 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78A6 94 69
 163+ 78A8 2A 66                        dw      CR                      //      cr
 164+ 78AA AA 73                        dw      QUERY                   //      query
 165+ 78AC              Next_Breakpoint_1:
 166+ 78AC CA 77                        dw      INTERPRET               //      interpret
 167+ 78AE 4E 6E 9B 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78B2 E5 69
 168+ 78B4                                                              //      if
 169+ 78B4 2C 64                        dw      ZBRANCH
 170+ 78B6 07 00                        dw      Quit_Endif - $
 171+ 78B8 79 74                        dw          C_DOT_QUOTE
 172+ 78BA 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78BD              Quit_Endif:                                     //      else
 174+ 78BD                                                              // again
 175+ 78BD 15 64                        dw      BRANCH
 176+ 78BF E3 FF                        dw      Quit_Begin - $
 177+ 78C1 A3 69                        dw      EXIT                    // ;
 178+ 78C3
 179+ 78C3              //  ______________________________________________________________________
 180+ 78C3              //
 181+ 78C3              // abort        --
 182+ 78C3                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78C3             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78C3             >
 182+ 78C3             >                // dummy db directives used to calculate length of namec
 182+ 78C3 41 42 4F 52 >                db      "ABORT"
 182+ 78C7 54          >
 182+ 78C8             >len_NFA         defl    $ - temp_NFA
 182+ 78C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78C3             >
 182+ 78C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78C4 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78C8 54          >
 182+ 78C9             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78C8 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78C9             >
 182+ 78C9 83 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78CB             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78CB 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78CD             >                else
 182+ 78CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78CD             >
 182+ 78CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78CD 85 6D 9B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78D1 7A 69
 184+ 78D3 C6 71                        dw      DECIMAL                 // decimal
 185+ 78D5 4F 78                        dw      FORTH                   // [compile] forth
 186+ 78D7 67 78                        dw      DEFINITIONS             // definitions
 187+ 78D9              Autoexec_Ptr:
 188+ 78D9 90 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78DB 8A 78                        dw      QUIT                    // quit
 190+ 78DD A3 69                        dw      EXIT                    // ;
 191+ 78DF
 192+ 78DF              //  ______________________________________________________________________
 193+ 78DF              //
 194+ 78DF              // warm         --
 195+ 78DF                              Colon_Def WARM, "WARM", is_normal
 195+ 78DF             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78DF             >
 195+ 78DF             >                // dummy db directives used to calculate length of namec
 195+ 78DF 57 41 52 4D >                db      "WARM"
 195+ 78E3             >len_NFA         defl    $ - temp_NFA
 195+ 78E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78DF             >
 195+ 78DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78E0 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78E4             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78E3 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78E4             >
 195+ 78E4 C3 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78E6             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78E6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78E8             >                else
 195+ 78E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78E8             >
 195+ 78E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78E8 65 7C                        dw      BLK_INIT                // blk-init
 197+ 78EA 41 84                        dw      SPLASH                  // splash
 198+ 78EC A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78F0 D1 6F
 199+ 78F2 CB 78                        dw      ABORT                   // abort
 200+ 78F4 A3 69                        dw      EXIT                    // exit
 201+ 78F6
 202+ 78F6              //  ______________________________________________________________________
 203+ 78F6              //
 204+ 78F6              // cold         --
 205+ 78F6                              Colon_Def COLD, "COLD", is_normal
 205+ 78F6             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78F6             >
 205+ 78F6             >                // dummy db directives used to calculate length of namec
 205+ 78F6 43 4F 4C 44 >                db      "COLD"
 205+ 78FA             >len_NFA         defl    $ - temp_NFA
 205+ 78FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78F6             >
 205+ 78F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78F7 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78FB             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78FA C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78FB             >
 205+ 78FB DF 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78FD             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78FD 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78FF             >                else
 205+ 78FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78FF             >
 205+ 78FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78FF A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7903 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7907 9B 6B                        dw      FETCH                   // @
 209+ 7909 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 790D 28 6A
 210+ 790F A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7913 96 68                        dw      CMOVE
 212+ 7915 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7919 9B 6B                        dw      FETCH                   // @
 214+ 791B A9 63 55 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 791F A8 6B                        dw      STORE                   // !
 216+ 7921 03 6D F9 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7925 A8 6B
 217+ 7927 DA 6D 9B 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 792B 08 6B
 218+ 792D 8D 6E A8 6B                  dw      USE, STORE              // use !
 219+ 7931 97 6E A8 6B                  dw      PREV, STORE             // prev !
 220+ 7935 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7939 AA 6E A8 6B
 221+ 793D              //              dw      LIT, 8
 222+ 793D              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 793D 13 6D D8 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7941 A8 6B
 224+ 7943 E6 78        Warm_Start:     dw      WARM
 225+ 7945 FD 78        Cold_Start:     dw      COLD
 226+ 7947 A3 69                        dw      EXIT
 227+ 7949
 228+ 7949              //  ______________________________________________________________________
 229+ 7949              WarmRoutine:
 230+ 7949              ColdRoutine:
 231+ 7949 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 794D D9                           exx
 233+ 794E E5                           push    hl
 234+ 794F D9                           exx
 235+ 7950
 236+ 7950 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7954 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7958              //              nop
 239+ 7958 2A 7A 63                     ld      hl, (R0_origin)
 240+ 795B              //              nop
 241+ 795B                              ldrphl
 241+ 795B 22 96 63    >                ld      (RP_Pointer),hl
 242+ 795E 01 43 79                     ld      bc, Warm_Start
 243+ 7961 38 02                        jr      c, Warm_Skip
 244+ 7963 03                           inc     bc
 245+ 7964 03                           inc     bc
 246+ 7965              Warm_Skip:
 247+ 7965                              next
 247+ 7965 DD E9       >                jp      (ix)
 248+ 7967
 249+ 7967              //  ______________________________________________________________________
 250+ 7967              //
 251+ 7967              // basic        --
 252+ 7967                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7967             >
 252+ 7967             >                // dummy db directives used to calculate length of namec
 252+ 7967 42 41 53 49 >                db      "BASIC"
 252+ 796B 43          >
 252+ 796C             >len_NFA         defl    $ - temp_NFA
 252+ 796C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7967             >
 252+ 7967 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7968 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 796C 43          >
 252+ 796D             >                org     $-1                 // alter last byte of Name just above to set
 252+ 796C C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 796D             >
 252+ 796D F6 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 796F             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 796F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 796F             >                else
 252+ 796F 71 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7971             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7971             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7971             >
 252+ 7971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7971 C1                           pop     bc
 254+ 7972 21 00 00                     ld      hl, 0
 255+ 7975 39                           add     hl, sp
 256+ 7976 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 797A              //              nop
 258+ 797A 22 6E 63                     ld      (SP_Basic),hl
 259+ 797D D9                           exx
 260+ 797E E1                           pop     hl
 261+ 797F D9                           exx
 262+ 7980 C9                           ret     // to Basic
 263+ 7981
 264+ 7981              //  ______________________________________________________________________
 265+ 7981              //
 266+ 7981              // +-           n1 n2 -- n3
 267+ 7981              // leaves n1 with the sign of n2 as n3.
 268+ 7981                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7981             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7981             >
 268+ 7981             >                // dummy db directives used to calculate length of namec
 268+ 7981 2B 2D       >                db      "+-"
 268+ 7983             >len_NFA         defl    $ - temp_NFA
 268+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7981             >
 268+ 7981 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7982 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7983 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7984             >
 268+ 7984 67 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7986             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7986 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7988             >                else
 268+ 7988 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7988             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7988             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7988             >
 268+ 7988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7988 00 6A                        dw      ZLESS                   // 0<
 270+ 798A                                                              // if
 271+ 798A 2C 64                        dw      ZBRANCH
 272+ 798C 04 00                        dw      Plus_Minus_Endif - $
 273+ 798E 93 6A                        dw          MINUS               //      minus
 274+ 7990              Plus_Minus_Endif:                               // endif
 275+ 7990 A3 69                        dw      EXIT                    // ;
 276+ 7992
 277+ 7992              //  ______________________________________________________________________
 278+ 7992              //
 279+ 7992              // d+-          d1 n -- d2
 280+ 7992              // leaves d1 with the sign of n as d2.
 281+ 7992                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7992             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7992             >
 281+ 7992             >                // dummy db directives used to calculate length of namec
 281+ 7992 44 2B 2D    >                db      "D+-"
 281+ 7995             >len_NFA         defl    $ - temp_NFA
 281+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7992             >
 281+ 7992 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7993 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7995 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7996             >
 281+ 7996 81 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7998             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7998 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 799A             >                else
 281+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 799A             >
 281+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 799A 00 6A                        dw      ZLESS                   // 0<
 283+ 799C                                                              // if
 284+ 799C 2C 64                        dw      ZBRANCH
 285+ 799E 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79A0 A9 6A                        dw          DMINUS              //      dminus
 287+ 79A2              DPlus_Minus_Endif:                              // endif
 288+ 79A2 A3 69                        dw      EXIT                    // ;
 289+ 79A4
 290+ 79A4              //  ______________________________________________________________________
 291+ 79A4              //
 292+ 79A4              // abs          n1 -- n2
 293+ 79A4                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79A4             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79A4             >
 293+ 79A4             >                // dummy db directives used to calculate length of namec
 293+ 79A4 41 42 53    >                db      "ABS"
 293+ 79A7             >len_NFA         defl    $ - temp_NFA
 293+ 79A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79A4             >
 293+ 79A4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79A5 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79A8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79A7 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79A8             >
 293+ 79A8 92 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79AA             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79AA 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79AC             >                else
 293+ 79AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79AC             >
 293+ 79AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79AC 08 6B                        dw      DUP                     // dup
 295+ 79AE 86 79                        dw      PLUS_MINUS              // +-
 296+ 79B0 A3 69                        dw      EXIT                    // ;
 297+ 79B2
 298+ 79B2              //  ______________________________________________________________________
 299+ 79B2              //
 300+ 79B2              // dabs         d1 -- d2
 301+ 79B2                              Colon_Def DABS, "DABS", is_normal
 301+ 79B2             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79B2             >
 301+ 79B2             >                // dummy db directives used to calculate length of namec
 301+ 79B2 44 41 42 53 >                db      "DABS"
 301+ 79B6             >len_NFA         defl    $ - temp_NFA
 301+ 79B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79B2             >
 301+ 79B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79B3 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79B7             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79B6 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79B7             >
 301+ 79B7 A4 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79B9             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79B9 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79BB             >                else
 301+ 79BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79BB             >
 301+ 79BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79BB 08 6B                        dw      DUP                     // dup
 303+ 79BD 98 79                        dw      DPLUS_MINUS             // d+-
 304+ 79BF A3 69                        dw      EXIT                    // ;
 305+ 79C1
 306+ 79C1              //  ______________________________________________________________________
 307+ 79C1              //
 308+ 79C1              // m*           n1 n2 -- d
 309+ 79C1              // multiply two integer giving a double
 310+ 79C1                              Colon_Def MMUL, "M*", is_normal
 310+ 79C1             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79C1             >
 310+ 79C1             >                // dummy db directives used to calculate length of namec
 310+ 79C1 4D 2A       >                db      "M*"
 310+ 79C3             >len_NFA         defl    $ - temp_NFA
 310+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79C1             >
 310+ 79C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79C2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79C3 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79C4             >
 310+ 79C4 B2 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79C6             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79C6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C8             >                else
 310+ 79C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C8             >
 310+ 79C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C8 69 6B 58 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79CC B6 69
 312+ 79CE AA 79 FB 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79D2 AA 79 C9 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79D6 CA 69 98 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79DA A3 69                        dw      EXIT                    // ;
 316+ 79DC
 317+ 79DC              //  ______________________________________________________________________
 318+ 79DC              //
 319+ 79DC              // sm/rem       d n -- q r
 320+ 79DC              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79DC              // the remainder has the sign of d.
 322+ 79DC                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79DC             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79DC             >
 322+ 79DC             >                // dummy db directives used to calculate length of namec
 322+ 79DC 53 4D 2F 52 >                db      "SM/REM"
 322+ 79E0 45 4D       >
 322+ 79E2             >len_NFA         defl    $ - temp_NFA
 322+ 79E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79DC             >
 322+ 79DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79DD 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79E1 45 4D       >
 322+ 79E3             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79E2 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79E3             >
 322+ 79E3 C1 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79E5             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79E5 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79E7             >                else
 322+ 79E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79E7             >
 322+ 79E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79E7 C3 6A B6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79EB B6 69
 324+ 79ED B9 79 DE 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79F1 AA 79
 325+ 79F3 FA 68                        dw      UMDIVMOD                // um/mod
 326+ 79F5 CA 69                        dw      R_TO                    // r>
 327+ 79F7 DE 69 58 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79FB 86 79 FB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79FF CA 69                        dw      R_TO                    // r>
 330+ 7A01 86 79 FB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 7A05 A3 69                        dw      EXIT                    // ;
 332+ 7A07
 333+ 7A07              //  ______________________________________________________________________
 334+ 7A07              //
 335+ 7A07              // fm/mod       d n -- q r
 336+ 7A07              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A07              // the remainder has the sign of d.
 338+ 7A07                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A07             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A07             >
 338+ 7A07             >                // dummy db directives used to calculate length of namec
 338+ 7A07 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A0B 4F 44       >
 338+ 7A0D             >len_NFA         defl    $ - temp_NFA
 338+ 7A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A07             >
 338+ 7A07 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A08 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A0C 4F 44       >
 338+ 7A0E             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A0D C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A0E             >
 338+ 7A0E DC 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A10             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A10 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A12             >                else
 338+ 7A12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A12             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A12             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A12             >
 338+ 7A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A12 08 6B B6 69                  dw      DUP, TO_R               // dup >r
 340+ 7A16 E5 79                        dw      SMDIVM
 341+ 7A18 C3 6A 08 6B                  dw      OVER, DUP
 342+ 7A1C E5 69 E5 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A20 FB 6A 00 6A                  dw      SWAP, ZLESS
 344+ 7A24 DE 69 00 6A                  dw      R_OP, ZLESS
 345+ 7A28 58 69 33 69                  dw      XOR_OP, AND_OP
 346+ 7A2C 2C 64                        dw      ZBRANCH
 347+ 7A2E 10 00                        dw      Fm_Mod_Else - $
 348+ 7A30 55 6A                        dw          ONE_SUBTRACT
 349+ 7A32 FB 6A CA 69                  dw          SWAP, R_TO
 350+ 7A36 28 6A FB 6A                  dw          PLUS, SWAP
 351+ 7A3A 15 64                        dw      BRANCH
 352+ 7A3C 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A3E              Fm_Mod_Else:
 354+ 7A3E CA 69 D3 6A                  dw          R_TO, DROP
 355+ 7A42              Fm_Mod_Endif:
 356+ 7A42 A3 69                        dw      EXIT
 357+ 7A44              //              dw      TWO_DUP                 // 2dup
 358+ 7A44              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A44              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A44              //              dw      UMDIVMOD                // um/mod
 361+ 7A44              //              dw      SWAP                    // swap
 362+ 7A44              //              dw      II, ZLESS               // i'
 363+ 7A44              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A44              //              dw      R_TO                    // r>
 365+ 7A44              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A44              //              dw      R_OP                    // r@
 367+ 7A44              //              dw      ZLESS                   // i'
 368+ 7A44              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A44              //              dw      R_TO                    // r>
 370+ 7A44              //              dw      PLUS_MINUS              // +- swap
 371+ 7A44              //              dw      EXIT                    // ;
 372+ 7A44
 373+ 7A44              //  ______________________________________________________________________
 374+ 7A44              //
 375+ 7A44              // m/mod        d n -- q r
 376+ 7A44              // multiply two integer giving a double
 377+ 7A44                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A44             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A44             >
 377+ 7A44             >                // dummy db directives used to calculate length of namec
 377+ 7A44 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A48 44          >
 377+ 7A49             >len_NFA         defl    $ - temp_NFA
 377+ 7A49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A44             >
 377+ 7A44 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A45 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A49 44          >
 377+ 7A4A             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A49 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A4A             >
 377+ 7A4A 07 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A4C             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A4C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A4E             >                else
 377+ 7A4E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A4E             >
 377+ 7A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A4E E5 79                        dw      SMDIVM
 379+ 7A50 A3 69                        dw      EXIT                    // ;
 380+ 7A52
 381+ 7A52              //  ______________________________________________________________________
 382+ 7A52              //
 383+ 7A52              // m/           d n -- q
 384+ 7A52              // multiply two integer giving a double
 385+ 7A52                              Colon_Def MDIV, "M/", is_normal
 385+ 7A52             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A52             >
 385+ 7A52             >                // dummy db directives used to calculate length of namec
 385+ 7A52 4D 2F       >                db      "M/"
 385+ 7A54             >len_NFA         defl    $ - temp_NFA
 385+ 7A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A52             >
 385+ 7A52 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A53 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A55             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A54 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A55             >
 385+ 7A55 44 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A57             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A57 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A59             >                else
 385+ 7A59 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A59             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A59             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A59             >
 385+ 7A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A59 4C 7A DE 6A                  dw      MDIVM, NIP
 387+ 7A5D A3 69                        dw      EXIT                    // ;
 388+ 7A5F
 389+ 7A5F              //  ______________________________________________________________________
 390+ 7A5F              //
 391+ 7A5F              // *            n1 n2 -- n3
 392+ 7A5F              // multiply two integer
 393+ 7A5F                              Colon_Def MUL, "*", is_normal
 393+ 7A5F             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A5F             >
 393+ 7A5F             >                // dummy db directives used to calculate length of namec
 393+ 7A5F 2A          >                db      "*"
 393+ 7A60             >len_NFA         defl    $ - temp_NFA
 393+ 7A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A5F             >
 393+ 7A5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A60 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A61             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A60 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A61             >
 393+ 7A61 52 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A63             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A63 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A65             >                else
 393+ 7A65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A65             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A65             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A65             >
 393+ 7A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A65 C6 79 D3 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A69 A3 69                        dw      EXIT                    // ;
 396+ 7A6B
 397+ 7A6B              //  ______________________________________________________________________
 398+ 7A6B              //
 399+ 7A6B              // /mod         n1 n2 -- n3 n4
 400+ 7A6B              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A6B              // The remainder has the sign of n1
 402+ 7A6B                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A6B             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A6B             >
 402+ 7A6B             >                // dummy db directives used to calculate length of namec
 402+ 7A6B 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A6F             >len_NFA         defl    $ - temp_NFA
 402+ 7A6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A6B             >
 402+ 7A6B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A6C 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A70             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A6F C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A70             >
 402+ 7A70 5F 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A72             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A72 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A74             >                else
 402+ 7A74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A74             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A74             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A74             >
 402+ 7A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A74 B6 69 21 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A78 CA 69
 404+ 7A7A 4C 7A                        dw      MDIVM                   // m/mod
 405+ 7A7C A3 69                        dw      EXIT                    // ;
 406+ 7A7E
 407+ 7A7E              //  ______________________________________________________________________
 408+ 7A7E              //
 409+ 7A7E              // /            n1 n2 -- n3
 410+ 7A7E              // division
 411+ 7A7E                              Colon_Def DIV, "/", is_normal
 411+ 7A7E             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A7E             >
 411+ 7A7E             >                // dummy db directives used to calculate length of namec
 411+ 7A7E 2F          >                db      "/"
 411+ 7A7F             >len_NFA         defl    $ - temp_NFA
 411+ 7A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A7E             >
 411+ 7A7E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A7F 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A80             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A7F AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A80             >
 411+ 7A80 6B 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A82             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A82 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A84             >                else
 411+ 7A84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A84             >
 411+ 7A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A84 72 7A DE 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A88 A3 69                        dw      EXIT                    // ;
 414+ 7A8A
 415+ 7A8A              //  ______________________________________________________________________
 416+ 7A8A              //
 417+ 7A8A              // mod          n1 n2 -- n3
 418+ 7A8A                              Colon_Def MOD, "MOD", is_normal
 418+ 7A8A             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A8A             >
 418+ 7A8A             >                // dummy db directives used to calculate length of namec
 418+ 7A8A 4D 4F 44    >                db      "MOD"
 418+ 7A8D             >len_NFA         defl    $ - temp_NFA
 418+ 7A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A8A             >
 418+ 7A8A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A8B 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A8E             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A8D C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A8E             >
 418+ 7A8E 7E 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A90             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A90 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A92             >                else
 418+ 7A92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A92             >
 418+ 7A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A92 72 7A D3 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A96 A3 69                        dw      EXIT                    // ;
 421+ 7A98
 422+ 7A98              //  ______________________________________________________________________
 423+ 7A98              //
 424+ 7A98              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A98              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A98              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A98              // avoids loss of precision
 428+ 7A98                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A98             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A98             >
 428+ 7A98             >                // dummy db directives used to calculate length of namec
 428+ 7A98 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A9C 44          >
 428+ 7A9D             >len_NFA         defl    $ - temp_NFA
 428+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A98             >
 428+ 7A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A99 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A9D 44          >
 428+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A9D C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A9E             >
 428+ 7A9E 8A 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7AA0             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7AA0 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AA2             >                else
 428+ 7AA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AA2             >
 428+ 7AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AA2 B6 69 C6 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AA6 CA 69 4C 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AAA A3 69                        dw      EXIT                    // ;
 432+ 7AAC
 433+ 7AAC              //  ______________________________________________________________________
 434+ 7AAC              //
 435+ 7AAC              // */          n1 n2 n3 -- n4
 436+ 7AAC              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AAC                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AAC             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AAC             >
 437+ 7AAC             >                // dummy db directives used to calculate length of namec
 437+ 7AAC 2A 2F       >                db      "*/"
 437+ 7AAE             >len_NFA         defl    $ - temp_NFA
 437+ 7AAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AAC             >
 437+ 7AAC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AAD 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7AAF             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7AAE AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7AAF             >
 437+ 7AAF 98 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AB1             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AB1 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AB3             >                else
 437+ 7AB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AB3             >
 437+ 7AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AB3 A0 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AB5 DE 6A                        dw     NIP                      // nip
 440+ 7AB7 A3 69                        dw     EXIT                     // ;
 441+ 7AB9
 442+ 7AB9
 443+ 7AB9              //  ______________________________________________________________________
 444+ 7AB9              //
 445+ 7AB9              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AB9              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AB9              // All terms are unsigned.
 448+ 7AB9              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AB9              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AB9              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AB9              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AB9              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AB9              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AB9              //              dw      EXIT                    // ;
 455+ 7AB9
 456+ 7AB9              //  ______________________________________________________________________
 457+ 7AB9              //
 458+ 7AB9              // (line)       n1 n2 -- a b
 459+ 7AB9              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AB9              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AB9                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AB9             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AB9             >
 461+ 7AB9             >                // dummy db directives used to calculate length of namec
 461+ 7AB9 28 4C 49 4E >                db      "(LINE)"
 461+ 7ABD 45 29       >
 461+ 7ABF             >len_NFA         defl    $ - temp_NFA
 461+ 7ABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AB9             >
 461+ 7AB9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7ABA 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7ABE 45 29       >
 461+ 7AC0             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7ABF A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AC0             >
 461+ 7AC0 AC 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AC2             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AC2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AC4             >                else
 461+ 7AC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AC4             >
 461+ 7AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AC4 B6 69                        dw      TO_R                    // >r
 463+ 7AC6 AE 6C                        dw      NOOP                    // noop
 464+ 7AC8 37 6D                        dw      CL                      // c/l
 465+ 7ACA 43 6D A0 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ACE CA 69                        dw      R_TO                    // r>
 467+ 7AD0 4F 6D 63 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AD4 28 6A
 468+ 7AD6 7D 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AD8 28 6A                        dw      PLUS                    // +
 470+ 7ADA AE 6C                        dw      NOOP                    // noop
 471+ 7ADC 37 6D                        dw      CL                      // c/l
 472+ 7ADE A3 69                        dw      EXIT                    // ;
 473+ 7AE0
 474+ 7AE0              //  ______________________________________________________________________
 475+ 7AE0              //
 476+ 7AE0              // .line        n1 n2 --
 477+ 7AE0              // Sends to output line  n1  of screen n2.
 478+ 7AE0                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AE0             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AE0             >
 478+ 7AE0             >                // dummy db directives used to calculate length of namec
 478+ 7AE0 2E 4C 49 4E >                db      ".LINE"
 478+ 7AE4 45          >
 478+ 7AE5             >len_NFA         defl    $ - temp_NFA
 478+ 7AE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AE0             >
 478+ 7AE0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AE1 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AE5 45          >
 478+ 7AE6             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AE5 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AE6             >
 478+ 7AE6 B9 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AE8             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AE8 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AEA             >                else
 478+ 7AEA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AEA             >
 478+ 7AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AEA C2 7A C7 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AEE A7 72
 480+ 7AF0 A3 69                        dw      EXIT                    // ;
 481+ 7AF2
 482+ 7AF2              //  ______________________________________________________________________
 483+ 7AF2              //
 484+ 7AF2              // message       n1 n2 --
 485+ 7AF2              // prints error message to current channel.
 486+ 7AF2              // if WARNING is 0, prints "MSG#n".
 487+ 7AF2              // if WARNING is 1, prints line n of screen 4.
 488+ 7AF2              // if WARNING is -1, see ERROR
 489+ 7AF2              // value can be negative or beyond block 4.
 490+ 7AF2                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AF2             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AF2             >
 490+ 7AF2             >                // dummy db directives used to calculate length of namec
 490+ 7AF2 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AF6 41 47 45    >
 490+ 7AF9             >len_NFA         defl    $ - temp_NFA
 490+ 7AF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AF2             >
 490+ 7AF2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AF3 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AF7 41 47 45    >
 490+ 7AFA             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AF9 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AFA             >
 490+ 7AFA E0 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AFC             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AFC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AFE             >                else
 490+ 7AFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AFE             >
 490+ 7AFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AFE AE 6D 9B 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B02                                                              // if
 493+ 7B02 2C 64                        dw      ZBRANCH
 494+ 7B04 18 00                        dw      Message_Else - $
 495+ 7B06 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B0A 29 6E 9B 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B0E 4F 6D 82 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B12 35 6F
 498+ 7B14 E8 7A                        dw          DOT_LINE            //      .line
 499+ 7B16 ED 6F                        dw          SPACE               //      space
 500+ 7B18                                                              // else
 501+ 7B18
 502+ 7B18 15 64                        dw      BRANCH
 503+ 7B1A 0B 00                        dw      Message_ENdif - $
 504+ 7B1C              Message_Else:
 505+ 7B1C 79 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B1E 04 6D 73 67                  db          4, "msg#"
 506+ 7B22 23
 507+ 7B23 3A 83                        dw          DOT                 //      .  ( forward )
 508+ 7B25              Message_ENdif:                                  // endif
 509+ 7B25 A3 69                        dw      EXIT                    // ;
 510+ 7B27
 511+ 7B27
 512+ 7B27              //  ______________________________________________________________________
 513+ 7B27              //
 514+ 7B27              // device
 515+ 7B27                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B27             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B27             >
 515+ 7B27             >                // dummy db directives used to calculate length of namec
 515+ 7B27 44 45 56 49 >                db      "DEVICE"
 515+ 7B2B 43 45       >
 515+ 7B2D             >len_NFA         defl    $ - temp_NFA
 515+ 7B2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B27             >
 515+ 7B27 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B28 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B2C 43 45       >
 515+ 7B2E             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B2D C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B2E             >
 515+ 7B2E F2 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B30             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B30 E0 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B32             >                else
 515+ 7B32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B32             >
 515+ 7B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B32 02 00       >                dw      2
 516+ 7B34
 517+ 7B34              //  ______________________________________________________________________
 518+ 7B34
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B34                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B34              //  ______________________________________________________________________
   2+ 7B34              //
   3+ 7B34              //  next-opt.asm
   4+ 7B34              //
   5+ 7B34              //  ZX Spectrum Next - peculiar definitions
   6+ 7B34              //  ______________________________________________________________________
   7+ 7B34
   8+ 7B34              //  ______________________________________________________________________
   9+ 7B34              //
  10+ 7B34              // reg@         n -- b
  11+ 7B34              // read Next REGister n giving byte b
  12+ 7B34
  13+ 7B34                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B34             >
  13+ 7B34             >                // dummy db directives used to calculate length of namec
  13+ 7B34 52 45 47 40 >                db      "REG@"
  13+ 7B38             >len_NFA         defl    $ - temp_NFA
  13+ 7B38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B34             >
  13+ 7B34 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B35 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B39             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B38 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B39             >
  13+ 7B39 27 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B3B             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B3B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B3B             >                else
  13+ 7B3B 3D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B3D             >
  13+ 7B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B3D D9                           exx
  15+ 7B3E 01 3B 24                     ld      bc, $243B
  16+ 7B41 E1                           pop     hl
  17+ 7B42 ED 69                        out     (c), l
  18+ 7B44 04                           inc     b
  19+ 7B45 ED 68                        in      l,(c)
  20+ 7B47 E5                           push    hl
  21+ 7B48 D9                           exx
  22+ 7B49                              next
  22+ 7B49 DD E9       >                jp      (ix)
  23+ 7B4B
  24+ 7B4B
  25+ 7B4B              //  ______________________________________________________________________
  26+ 7B4B              //
  27+ 7B4B              // reg!         b n --
  28+ 7B4B              // write value b to Next REGister n
  29+ 7B4B
  30+ 7B4B                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B4B             >
  30+ 7B4B             >                // dummy db directives used to calculate length of namec
  30+ 7B4B 52 45 47 21 >                db      "REG!"
  30+ 7B4F             >len_NFA         defl    $ - temp_NFA
  30+ 7B4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B4B             >
  30+ 7B4B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B4C 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B50             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B4F A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B50             >
  30+ 7B50 34 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B52             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B52             >                else
  30+ 7B52 54 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B54             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B54             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B54             >
  30+ 7B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B54 D9                           exx
  32+ 7B55 01 3B 24                     ld      bc, $243B
  33+ 7B58 E1                           pop     hl
  34+ 7B59 ED 69                        out     (c), l
  35+ 7B5B 04                           inc     b
  36+ 7B5C E1                           pop     hl
  37+ 7B5D ED 69                        out     (c), l
  38+ 7B5F D9                           exx
  39+ 7B60                              next
  39+ 7B60 DD E9       >                jp      (ix)
  40+ 7B62
  41+ 7B62
  42+ 7B62              //  ______________________________________________________________________
  43+ 7B62              //
  44+ 7B62              // mmu7@        -- n
  45+ 7B62              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B62
  47+ 7B62                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B62             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B62             >
  47+ 7B62             >                // dummy db directives used to calculate length of namec
  47+ 7B62 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B66 40          >
  47+ 7B67             >len_NFA         defl    $ - temp_NFA
  47+ 7B67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B62             >
  47+ 7B62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B63 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B67 40          >
  47+ 7B68             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B67 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B68             >
  47+ 7B68 4B 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B6A             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B6A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B6C             >                else
  47+ 7B6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B6C             >
  47+ 7B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B6C A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B70 3B 7B
  49+ 7B72 A3 69                        dw      EXIT
  50+ 7B74
  51+ 7B74              //  ______________________________________________________________________
  52+ 7B74              //
  53+ 7B74              // mmu7!        n --
  54+ 7B74              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B74              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B74
  57+ 7B74                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B74             >
  57+ 7B74             >                // dummy db directives used to calculate length of namec
  57+ 7B74 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B78 21          >
  57+ 7B79             >len_NFA         defl    $ - temp_NFA
  57+ 7B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B74             >
  57+ 7B74 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B75 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B79 21          >
  57+ 7B7A             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B79 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B7A             >
  57+ 7B7A 62 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B7C             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B7C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B7C             >                else
  57+ 7B7C 7E 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B7E             >
  57+ 7B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B7E E1                           pop     hl
  59+ 7B7F 7D                           ld      a, l
  60+ 7B80 ED 92 57                     nextreg 87, a
  61+ 7B83
  62+ 7B83                              next
  62+ 7B83 DD E9       >                jp      (ix)
  63+ 7B85
  64+ 7B85              //  ______________________________________________________________________
  65+ 7B85              //
  66+ 7B85              // >far         ha -- a n
  67+ 7B85              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B85              // take lower bits of H and L as an offset from E000h
  69+ 7B85              // then return address  a  between E000h-FFFFh
  70+ 7B85              // and page number n  between 64-71 (40h-47h)
  71+ 7B85              // For example, in hex:
  72+ 7B85              //   0000 >FAR  gives  40.E000
  73+ 7B85              //   1FFF >FAR  gives  40.FFFF
  74+ 7B85              //   2000 >FAR  gives  41.E000
  75+ 7B85              //   3FFF >FAR  gives  41.FFFF
  76+ 7B85              //   EFFF >FAR  gives  47.EFFF
  77+ 7B85              //   FFFF >FAR  gives  47.FFFF
  78+ 7B85              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B85              //                pop     de
  80+ 7B85              //                ld      a, d
  81+ 7B85              //                and     $E0
  82+ 7B85              //                rlca
  83+ 7B85              //                rlca
  84+ 7B85              //                rlca
  85+ 7B85              //                add     $40
  86+ 7B85              //                ld      l, a
  87+ 7B85              //                ld      h, 0
  88+ 7B85              //                ld      a, d
  89+ 7B85              //                or      $E0
  90+ 7B85              //                ld      d, a
  91+ 7B85              //                push    hl
  92+ 7B85              //                push    de
  93+ 7B85              //                next
  94+ 7B85
  95+ 7B85              //  ______________________________________________________________________
  96+ 7B85              //
  97+ 7B85              // <far         a n  -- ha
  98+ 7B85              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B85              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B85              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B85              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B85              //                pop     de                  // page number in e
 103+ 7B85              //                pop     hl                  // address in hl
 104+ 7B85              //                ld      a, e
 105+ 7B85              //                sub     $40                 // reduced to 0-7
 106+ 7B85              //                rrca
 107+ 7B85              //                rrca
 108+ 7B85              //                rrca
 109+ 7B85              //                ld      d, a                // save to d bits 765
 110+ 7B85              //                ld      a, h                // drops
 111+ 7B85              //                and     $1F
 112+ 7B85              //                or      d
 113+ 7B85              //                ld      h, a
 114+ 7B85              //
 115+ 7B85              //                psh1
 116+ 7B85
 117+ 7B85              //  ______________________________________________________________________
 118+ 7B85              //
 119+ 7B85              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B85              // NextZXOS call wrapper.
 121+ 7B85              //  n1 = hl register parameter value
 122+ 7B85              //  n2 = de register parameter value
 123+ 7B85              //  n3 = bc register parameter value
 124+ 7B85              //  n4 =  a register parameter value
 125+ 7B85              //   a = routine address in ROM 3
 126+ 7B85              // ----
 127+ 7B85              //  n5 = hl returned value
 128+ 7B85              //  n6 = de returned value
 129+ 7B85              //  n7 = bc returned value
 130+ 7B85              //  n8 =  a returned value
 131+ 7B85              //   f
 132+ 7B85                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B85             >
 132+ 7B85             >                // dummy db directives used to calculate length of namec
 132+ 7B85 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B89 44 4F 53    >
 132+ 7B8C             >len_NFA         defl    $ - temp_NFA
 132+ 7B8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B85             >
 132+ 7B85 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B86 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B8A 44 4F 53    >
 132+ 7B8D             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B8C D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B8D             >
 132+ 7B8D 74 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B8F             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B8F             >                else
 132+ 7B8F 91 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B91             >
 132+ 7B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B91 D1                           pop     de                  // dos call entry address in de
 134+ 7B92 E1                           pop     hl                  // a register
 135+ 7B93 7D                           ld      a, l
 136+ 7B94 D9                           exx
 137+ 7B95 C1                           pop     bc
 138+ 7B96 D1                           pop     de
 139+ 7B97 E1                           pop     hl
 140+ 7B98 D9                           exx
 141+ 7B99
 142+ 7B99 C5                           push    bc
 143+ 7B9A DD E5                        push    ix
 144+ 7B9C
 145+ 7B9C              //              ld      (SP_Saved), sp
 146+ 7B9C              //              ld      sp, Cold_origin - 5
 147+ 7B9C 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B9E
 149+ 7B9E CF                           rst     08
 150+ 7B9F 94                           db      $94
 151+ 7BA0
 152+ 7BA0              //              ld      sp, (SP_Saved)
 153+ 7BA0              //              push    ix
 154+ 7BA0              //              pop     hl
 155+ 7BA0              //              ld      (IX_Echo), hl
 156+ 7BA0 DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7BA4              //              nop
 158+ 7BA4 DD E1                        pop     ix
 159+ 7BA6 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BA7 D5                           push    de
 161+ 7BA8 C5                           push    bc
 162+ 7BA9 4D                           ld      c, l
 163+ 7BAA 44                           ld      b, h
 164+ 7BAB
 165+ 7BAB 26 00                        ld      h, 0
 166+ 7BAD 6F                           ld      l, a
 167+ 7BAE E5                           push    hl
 168+ 7BAF ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BB1 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BB2
 171+ 7BB2                              psh1
 171+ 7BB2 E5          >                push    hl
 171+ 7BB3 DD E9       >                jp      (ix)
 172+ 7BB5
 173+ 7BB5              //  ______________________________________________________________________
 174+ 7BB5              //
 175+ 7BB5              // blk-fh
 176+ 7BB5                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BB5             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BB5             >
 176+ 7BB5             >                // dummy db directives used to calculate length of namec
 176+ 7BB5 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BB9 46 48       >
 176+ 7BBB             >len_NFA         defl    $ - temp_NFA
 176+ 7BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BB5             >
 176+ 7BB5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BB6 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BBA 46 48       >
 176+ 7BBC             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BBB C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BBC             >
 176+ 7BBC 85 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BBE             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BBE E0 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BC0             >                else
 176+ 7BC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BC0             >
 176+ 7BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BC0 01 00       >                dw      1
 177+ 7BC2
 178+ 7BC2                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BC2             >
 178+ 7BC2             >                // dummy db directives used to calculate length of namec
 178+ 7BC2 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BC6 46 4E 41 4D >
 178+ 7BCA 45          >
 178+ 7BCB             >len_NFA         defl    $ - temp_NFA
 178+ 7BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BC2             >
 178+ 7BC2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BC3 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BC7 46 4E 41 4D >
 178+ 7BCB 45          >
 178+ 7BCC             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BCB C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BCC             >
 178+ 7BCC B5 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BCE             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BCE DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BD0             >                else
 178+ 7BD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BD0             >
 178+ 7BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BD0 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BD4 6F 63 6B 73
 179+ 7BD8 2D 36 34 2E
 179+ 7BDC 62 69 6E 00
 180+ 7BE0 00 00 00...                  ds      24
 181+ 7BF8
 182+ 7BF8              //  ______________________________________________________________________
 183+ 7BF8              //
 184+ 7BF8              // blk-seek     n --
 185+ 7BF8              // seek block n  within blocks!.bin  file
 186+ 7BF8                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BF8             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BF8             >
 186+ 7BF8             >                // dummy db directives used to calculate length of namec
 186+ 7BF8 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BFC 53 45 45 4B >
 186+ 7C00             >len_NFA         defl    $ - temp_NFA
 186+ 7C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BF8             >
 186+ 7BF8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BF9 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BFD 53 45 45 4B >
 186+ 7C01             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C00 CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C01             >
 186+ 7C01 C2 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C03             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C03 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C05             >                else
 186+ 7C05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C05             >
 186+ 7C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C05 43 6D C6 79                  dw  BBUF, MMUL
 188+ 7C09 BE 7B 9B 6B                  dw  BLK_FH, FETCH
 189+ 7C0D A8 67                        dw  F_SEEK
 190+ 7C0F A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C13 A7 70
 191+ 7C15 A3 69                        dw  EXIT
 192+ 7C17
 193+ 7C17              //  ______________________________________________________________________
 194+ 7C17              //
 195+ 7C17              // blk-read     n --
 196+ 7C17              // seek block n  within blocks!.bin  file
 197+ 7C17                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C17             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C17             >
 197+ 7C17             >                // dummy db directives used to calculate length of namec
 197+ 7C17 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C1B 52 45 41 44 >
 197+ 7C1F             >len_NFA         defl    $ - temp_NFA
 197+ 7C1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C17             >
 197+ 7C17 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C18 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C1C 52 45 41 44 >
 197+ 7C20             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C1F C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C20             >
 197+ 7C20 F8 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C22             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C22 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C24             >                else
 197+ 7C24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C24             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C24             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C24             >
 197+ 7C24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C24 03 7C                        dw  BLK_SEEK
 199+ 7C26 43 6D                        dw  BBUF
 200+ 7C28 BE 7B 9B 6B                  dw  BLK_FH, FETCH
 201+ 7C2C 14 68                        dw  F_READ
 202+ 7C2E A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C32 A7 70
 203+ 7C34 D3 6A                        dw  DROP
 204+ 7C36 A3 69                        dw  EXIT
 205+ 7C38
 206+ 7C38              //  ______________________________________________________________________
 207+ 7C38              //
 208+ 7C38              // blk-write     n --
 209+ 7C38              // seek block n  within blocks!.bin  file
 210+ 7C38                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C38             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C38             >
 210+ 7C38             >                // dummy db directives used to calculate length of namec
 210+ 7C38 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C3C 57 52 49 54 >
 210+ 7C40 45          >
 210+ 7C41             >len_NFA         defl    $ - temp_NFA
 210+ 7C41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C38             >
 210+ 7C38 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C39 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C3D 57 52 49 54 >
 210+ 7C41 45          >
 210+ 7C42             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C41 C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C42             >
 210+ 7C42 17 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C44             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C44 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C46             >                else
 210+ 7C46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C46             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C46             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C46             >
 210+ 7C46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C46 03 7C                        dw  BLK_SEEK
 212+ 7C48 43 6D                        dw  BBUF
 213+ 7C4A BE 7B 9B 6B                  dw  BLK_FH, FETCH
 214+ 7C4E 33 68                        dw  F_WRITE
 215+ 7C50 A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C54 A7 70
 216+ 7C56 D3 6A                        dw  DROP
 217+ 7C58 A3 69                        dw  EXIT
 218+ 7C5A
 219+ 7C5A              //  ______________________________________________________________________
 220+ 7C5A              //
 221+ 7C5A              // blk-init     n --
 222+ 7C5A              // seek block n  within blocks!.bin  file
 223+ 7C5A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C5A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C5A             >
 223+ 7C5A             >                // dummy db directives used to calculate length of namec
 223+ 7C5A 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C5E 49 4E 49 54 >
 223+ 7C62             >len_NFA         defl    $ - temp_NFA
 223+ 7C62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C5A             >
 223+ 7C5A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C5B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C5F 49 4E 49 54 >
 223+ 7C63             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C62 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C63             >
 223+ 7C63 38 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C65             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C65 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C67             >                else
 223+ 7C67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C67             >
 223+ 7C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C67 BE 7B 9B 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C6B CB 67 D3 6A
 225+ 7C6F CE 7B 49 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C73 E2 6E 1B 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C77 4A 68
 227+ 7C79 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C7D A7 70
 228+ 7C7F BE 7B A8 6B                  dw  BLK_FH, STORE
 229+ 7C83 A3 69                        dw  EXIT
 230+ 7C85
 231+ 7C85              //  ______________________________________________________________________
 232+ 7C85              //
 233+ 7C85              // #sec
 234+ 7C85              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C85              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C85
 237+ 7C85                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C85             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C85             >
 237+ 7C85             >                // dummy db directives used to calculate length of namec
 237+ 7C85 23 53 45 43 >                db      "#SEC"
 237+ 7C89             >len_NFA         defl    $ - temp_NFA
 237+ 7C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C85             >
 237+ 7C85 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C86 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C8A             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C89 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C8A             >
 237+ 7C8A 5A 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C8C             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C8C C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C8E             >                else
 237+ 7C8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C8E             >
 237+ 7C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C8E FF 7F       >                dw      32767
 238+ 7C90
 239+ 7C90              //  ______________________________________________________________________
 240+ 7C90
 241+ 7C90
 242+ 7C90
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C90                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C90              //  ______________________________________________________________________
   2+ 7C90              //
   3+ 7C90              //  L3.asm
   4+ 7C90              //
   5+ 7C90              //  Continuation of L2.asm
   6+ 7C90              //  I/O Block definitions
   7+ 7C90              //  ______________________________________________________________________
   8+ 7C90
   9+ 7C90
  10+ 7C90              //  ______________________________________________________________________
  11+ 7C90              //
  12+ 7C90              // r/w          a n f --
  13+ 7C90              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C90                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C90             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C90             >
  14+ 7C90             >                // dummy db directives used to calculate length of namec
  14+ 7C90 52 2F 57    >                db      "R/W"
  14+ 7C93             >len_NFA         defl    $ - temp_NFA
  14+ 7C93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C90             >
  14+ 7C90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C91 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C94             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C93 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C94             >
  14+ 7C94 85 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C96             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C96 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C98             >                else
  14+ 7C98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C98             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C98             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C98             >
  14+ 7C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C98 B6 69                        dw      TO_R                    // >r
  16+ 7C9A 55 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C9C 08 6B 00 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CA0 C3 6A 8C 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CA4 55 6A 7B 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CA8 45 69                        dw      OR_OP                   // or
  21+ 7CAA A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CAE A7 70
  22+ 7CB0 CA 69                        dw      R_TO                    // r>
  23+ 7CB2                                                              // if
  24+ 7CB2 2C 64                        dw      ZBRANCH
  25+ 7CB4 08 00                        dw      Read_Write_Else - $
  26+ 7CB6 22 7C                        dw          BLK_READ            //      blk-read
  27+ 7CB8 15 64                        dw      BRANCH
  28+ 7CBA 04 00                        dw      Read_Write_Endif - $
  29+ 7CBC              Read_Write_Else:                                // else
  30+ 7CBC 44 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CBE              Read_Write_Endif:                               // endif
  32+ 7CBE A3 69                        dw      EXIT                    // ;
  33+ 7CC0
  34+ 7CC0
  35+ 7CC0              //  ______________________________________________________________________
  36+ 7CC0              //
  37+ 7CC0              // +buf        a1 -- a2 f
  38+ 7CC0              // advences to next buffer, cyclically rotating along them
  39+ 7CC0                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CC0             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CC0             >
  39+ 7CC0             >                // dummy db directives used to calculate length of namec
  39+ 7CC0 2B 42 55 46 >                db      "+BUF"
  39+ 7CC4             >len_NFA         defl    $ - temp_NFA
  39+ 7CC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CC0             >
  39+ 7CC0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CC1 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CC5             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CC4 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CC5             >
  39+ 7CC5 90 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CC7             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CC7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CC9             >                else
  39+ 7CC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CC9             >
  39+ 7CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CC9 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CCD 28 6A
  41+ 7CCF 08 6B E5 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CD3 9B 6B
  42+ 7CD5 43 6F                        dw      EQUALS                  // =
  43+ 7CD7                                                              // if
  44+ 7CD7 2C 64                        dw      ZBRANCH
  45+ 7CD9 08 00                        dw      PBuf_Endif - $
  46+ 7CDB D3 6A                        dw          DROP                //      drop
  47+ 7CDD DA 6D 9B 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CE1              PBuf_Endif:                                     // endif
  49+ 7CE1 08 6B 97 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CE5 9B 6B
  50+ 7CE7 35 6F                        dw      SUBTRACT                // -
  51+ 7CE9 A3 69                        dw      EXIT                    // ;
  52+ 7CEB
  53+ 7CEB              //  ______________________________________________________________________
  54+ 7CEB              //
  55+ 7CEB              // update       --
  56+ 7CEB              // mark the last used block to be written to disk
  57+ 7CEB                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CEB             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CEB             >
  57+ 7CEB             >                // dummy db directives used to calculate length of namec
  57+ 7CEB 55 50 44 41 >                db      "UPDATE"
  57+ 7CEF 54 45       >
  57+ 7CF1             >len_NFA         defl    $ - temp_NFA
  57+ 7CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CEB             >
  57+ 7CEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CEC 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CF0 54 45       >
  57+ 7CF2             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CF1 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CF2             >
  57+ 7CF2 C0 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CF4             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CF4 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CF6             >                else
  57+ 7CF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CF6             >
  57+ 7CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CF6 97 6E 9B 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CFA 9B 6B
  59+ 7CFC A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D00 45 69
  60+ 7D02 97 6E 9B 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D06 A8 6B
  61+ 7D08 A3 69                        dw      EXIT                    // ;
  62+ 7D0A
  63+ 7D0A
  64+ 7D0A              //  ______________________________________________________________________
  65+ 7D0A              //
  66+ 7D0A              // empty-buffers --
  67+ 7D0A                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D0A             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D0A             >
  67+ 7D0A             >                // dummy db directives used to calculate length of namec
  67+ 7D0A 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D0E 59 2D 42 55 >
  67+ 7D12 46 46 45 52 >
  67+ 7D16 53          >
  67+ 7D17             >len_NFA         defl    $ - temp_NFA
  67+ 7D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D0A             >
  67+ 7D0A 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D0B 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D0F 59 2D 42 55 >
  67+ 7D13 46 46 45 52 >
  67+ 7D17 53          >
  67+ 7D18             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D17 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D18             >
  67+ 7D18 EB 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D1A             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D1A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D1C             >                else
  67+ 7D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D1C             >
  67+ 7D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D1C DA 6D 9B 6B                  dw      FIRST, FETCH            // first @
  69+ 7D20 E5 6D 9B 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D24 C3 6A 35 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D28 E1 73
  71+ 7D2A A3 69                        dw      EXIT                    // ;
  72+ 7D2C
  73+ 7D2C              //  ______________________________________________________________________
  74+ 7D2C              //
  75+ 7D2C              // buffer       n -- a
  76+ 7D2C              // read block n and gives the address to a buffer
  77+ 7D2C              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D2C              // disk before reading the block n.
  79+ 7D2C
  80+ 7D2C                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D2C             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D2C             >
  80+ 7D2C             >                // dummy db directives used to calculate length of namec
  80+ 7D2C 42 55 46 46 >                db      "BUFFER"
  80+ 7D30 45 52       >
  80+ 7D32             >len_NFA         defl    $ - temp_NFA
  80+ 7D32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D2C             >
  80+ 7D2C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D2D 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D31 45 52       >
  80+ 7D33             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D32 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D33             >
  80+ 7D33 0A 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D35             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D35 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D37             >                else
  80+ 7D37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D37             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D37             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D37             >
  80+ 7D37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D37 8D 6E 9B 6B                  dw      USE, FETCH              // use @
  82+ 7D3B 08 6B B6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D3F                                                              // begin
  84+ 7D3F              Buffer_Begin:
  85+ 7D3F C7 7C                        dw          PBUF                //      +buf
  86+ 7D41                                                              // until
  87+ 7D41 2C 64                        dw      ZBRANCH
  88+ 7D43 FC FF                        dw      Buffer_Begin - $
  89+ 7D45 8D 6E A8 6B                  dw      USE, STORE              // use !
  90+ 7D49 DE 69 9B 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D4D 00 6A
  91+ 7D4F                                                              // if
  92+ 7D4F 2C 64                        dw      ZBRANCH
  93+ 7D51 14 00                        dw      Buffer_Endif - $
  94+ 7D53 DE 69 71 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D57 DE 69 9B 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D5B A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D5F 33 69                        dw          AND_OP              //      and
  98+ 7D61 03 6D 96 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D65              Buffer_Endif:                                   // endif
 100+ 7D65 DE 69 A8 6B                  dw      R_OP, STORE             // r !
 101+ 7D69 DE 69 97 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D6D A8 6B
 102+ 7D6F CA 69 71 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D73 A3 69                        dw      EXIT                    // ;
 104+ 7D75
 105+ 7D75              //  ______________________________________________________________________
 106+ 7D75              //
 107+ 7D75              // block        n -- a
 108+ 7D75              // Leaves the buffer address that contains the block n.
 109+ 7D75              // If the block is not already present, it will be loaded from disk
 110+ 7D75              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D75              // disk before reading the block n.
 112+ 7D75              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D75
 114+ 7D75                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D75             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D75             >
 114+ 7D75             >                // dummy db directives used to calculate length of namec
 114+ 7D75 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D79 4B          >
 114+ 7D7A             >len_NFA         defl    $ - temp_NFA
 114+ 7D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D75             >
 114+ 7D75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D76 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D7A 4B          >
 114+ 7D7B             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D7A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D7B             >
 114+ 7D7B 2C 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D7D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D7D 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D7F             >                else
 114+ 7D7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D7F             >
 114+ 7D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D7F 29 6E 9B 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D83 28 6A B6 69                  dw      PLUS, TO_R              // + >r
 117+ 7D87 97 6E 9B 6B                  dw      PREV, FETCH             // prev @
 118+ 7D8B 08 6B 9B 6B                  dw      DUP, FETCH              // dup @
 119+ 7D8F DE 69 35 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D93 08 6B 28 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D97                                                              // if
 122+ 7D97 2C 64                        dw        ZBRANCH
 123+ 7D99 32 00                        dw        Block_Endif_1 - $
 124+ 7D9B              Block_Begin:                                    //      begin
 125+ 7D9B C7 7C E5 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D9F                                                              //          if
 127+ 7D9F 2C 64                        dw          ZBRANCH
 128+ 7DA1 12 00                        dw          Block_Endif_2 - $
 129+ 7DA3 D3 6A                        dw              DROP            //              drop
 130+ 7DA5 DE 69 35 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DA9 08 6B                        dw              DUP             //              dup
 132+ 7DAB DE 69 0B 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DAF 96 7C                        dw              READ_WRITE      //              r/w
 134+ 7DB1 88 6A                        dw              TWO_MINUS       //              2-
 135+ 7DB3              Block_Endif_2:                                  //          endif
 136+ 7DB3 08 6B 9B 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DB7 DE 69
 137+ 7DB9 35 6F 08 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DBD 28 6A E5 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DC1                                                              //      until
 140+ 7DC1 2C 64                        dw        ZBRANCH
 141+ 7DC3 D8 FF                        dw        Block_Begin - $
 142+ 7DC5 08 6B 97 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DC9 A8 6B
 143+ 7DCB              Block_Endif_1:                                  // endif
 144+ 7DCB CA 69 D3 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DCF 71 6A
 145+ 7DD1 A3 69                        dw      EXIT                    // ;
 146+ 7DD3
 147+ 7DD3              //  ______________________________________________________________________
 148+ 7DD3              //
 149+ 7DD3              // #buff        -- n
 150+ 7DD3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DD3                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DD3             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DD3             >
 151+ 7DD3             >                // dummy db directives used to calculate length of namec
 151+ 7DD3 23 42 55 46 >                db      "#BUFF"
 151+ 7DD7 46          >
 151+ 7DD8             >len_NFA         defl    $ - temp_NFA
 151+ 7DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DD3             >
 151+ 7DD3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DD4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DD8 46          >
 151+ 7DD9             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DD8 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DD9             >
 151+ 7DD9 75 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DDB             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DDB C5 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DDD             >                else
 151+ 7DDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DDD             >
 151+ 7DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DDD 07 00       >                dw      7
 152+ 7DDF
 153+ 7DDF              //  ______________________________________________________________________
 154+ 7DDF              //
 155+ 7DDF              // flush        --
 156+ 7DDF                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DDF             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DDF             >
 156+ 7DDF             >                // dummy db directives used to calculate length of namec
 156+ 7DDF 46 4C 55 53 >                db      "FLUSH"
 156+ 7DE3 48          >
 156+ 7DE4             >len_NFA         defl    $ - temp_NFA
 156+ 7DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DDF             >
 156+ 7DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DE0 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DE4 48          >
 156+ 7DE5             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DE4 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DE5             >
 156+ 7DE5 D3 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DE7             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DE7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DE9             >                else
 156+ 7DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DE9             >
 156+ 7DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DE9 DB 7D 49 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DED 03 6D
 158+ 7DEF              Flush_Do:                                       // do
 159+ 7DEF 86 64                        dw      C_DO
 160+ 7DF1 03 6D 35 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DF5 D3 6A
 161+ 7DF7                                                              // loop
 162+ 7DF7 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DFB BE 7B 9B 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DFF DF 67 D3 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E03 A3 69                        dw      EXIT                    // exit
 166+ 7E05
 167+ 7E05              //  ______________________________________________________________________
 168+ 7E05              //
 169+ 7E05              // f_getline    a m fh -- n
 170+ 7E05              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E05              // Address a is left for subsequent processing
 172+ 7E05              // and n as the actual number of byte read, that is the length of line
 173+ 7E05                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E05             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E05             >
 173+ 7E05             >                // dummy db directives used to calculate length of namec
 173+ 7E05 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E09 54 4C 49 4E >
 173+ 7E0D 45          >
 173+ 7E0E             >len_NFA         defl    $ - temp_NFA
 173+ 7E0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E05             >
 173+ 7E05 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E06 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E0A 54 4C 49 4E >
 173+ 7E0E 45          >
 173+ 7E0F             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E0E C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E0F             >
 173+ 7E0F DF 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E11             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E11 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E13             >                else
 173+ 7E13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E13             >
 173+ 7E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E13 B6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E15 EB 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E17 DE 69 F6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E1B A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E1F A7 70
 178+ 7E21
 179+ 7E21 57 6B C3 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E25 49 6A FB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E29
 182+ 7E29 DE 69 14 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E2D A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E31 A7 70
 184+ 7E33                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E33 2C 64                        dw      ZBRANCH
 186+ 7E35 3C 00                        dw      FGetline_Else - $
 187+ 7E37 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E3B 7E 65
 188+ 7E3D D3 6A DE 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E41 FB 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E43 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E47 7E 65
 191+ 7E49 D3 6A DE 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E4D 15 6B 89 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E51 08 6B C3 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E55 A8 6B
 194+ 7E57 08 6B B6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E5B 57 6B CA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E5F 03 6D 35 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E63 CA 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E67 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E6B A7 70
 199+ 7E6D                                                              // else
 200+ 7E6D 15 64                        dw      BRANCH
 201+ 7E6F 0C 00                        dw      FGetline_Endif - $
 202+ 7E71              FGetline_Else:
 203+ 7E71 CA 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E73 57 6B 49 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E77 D3 6A 03 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E7B              FGetline_Endif:                                 // endif
 207+ 7E7B B6 69 08 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E7F 08 6B
 208+ 7E81 49 6A FB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E85 DE 69 96 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E89 69 6B 28 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E8D 03 6D FB 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E91 7B 6A A8 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E95 DE 69 28 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E99 55 6A
 214+ 7E9B FB 6A DE 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E9F 35 6F
 215+ 7EA1 F2 73                        dw      BLANKS                  // blanks
 216+ 7EA3 CA 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EA5 A3 69                        dw      EXIT                    // ;
 218+ 7EA7
 219+ 7EA7              //  ______________________________________________________________________
 220+ 7EA7              //
 221+ 7EA7              // f_include    fh --
 222+ 7EA7              // Given a filehandle includes the source from file
 223+ 7EA7                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EA7             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EA7             >
 223+ 7EA7             >                // dummy db directives used to calculate length of namec
 223+ 7EA7 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EAB 43 4C 55 44 >
 223+ 7EAF 45          >
 223+ 7EB0             >len_NFA         defl    $ - temp_NFA
 223+ 7EB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EA7             >
 223+ 7EA7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EA8 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EAC 43 4C 55 44 >
 223+ 7EB0 45          >
 223+ 7EB1             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EB0 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EB1             >
 223+ 7EB1 05 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EB3             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EB3 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EB5             >                else
 223+ 7EB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EB5             >
 223+ 7EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EB5 02 6E 9B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EB9 B6 69
 225+ 7EBB 0B 6E 9B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EBF B6 69
 226+ 7EC1 B9 6E 9B 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EC5 B6 69
 227+ 7EC7 DE 69                        dw      R_OP                    // r
 228+ 7EC9                                                              // if
 229+ 7EC9 2C 64                        dw      ZBRANCH
 230+ 7ECB 20 00                        dw      FInclude_Else_1 - $
 231+ 7ECD DE 69 F6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7ED1 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7ED5 A7 70
 233+ 7ED7 0B 6E 9B 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EDB 88 6A                        dw          TWO_MINUS
 235+ 7EDD C3 6E 9B 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EE1 35 6F                        dw          SUBTRACT
 237+ 7EE3 21 6F 35 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EE7                                                              // else
 239+ 7EE7 15 64                        dw      BRANCH
 240+ 7EE9 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EEB              FInclude_Else_1:
 242+ 7EEB 03 6D 03 6D                  dw          ZERO, ZERO          //      0 0
 243+ 7EEF                                                              // endif
 244+ 7EEF              FInclude_Endif_1:
 245+ 7EEF B6 69 B6 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EF3 B9 6E A8 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EF7              FInclude_Begin:                                 // begin
 248+ 7EF7 0B 6D 7D 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EFB 43 6D
 249+ 7EFD 69 6B F2 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F01 FB 6A 49 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F05 FB 6A 7B 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F09 B9 6E 9B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F0D 11 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F0F                                                              // while
 255+ 7F0F 2C 64                        dw      ZBRANCH
 256+ 7F11 14 00                        dw      FInclude_Repeat - $
 257+ 7F13 0B 6D 02 6E                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F17 A8 6B
 258+ 7F19 03 6D 0B 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F1D A8 6B
 259+ 7F1F CA 77                        dw          INTERPRET           //      interpret
 260+ 7F21 15 64                        dw      BRANCH
 261+ 7F23 D4 FF                        dw      FInclude_Begin - $
 262+ 7F25              FInclude_Repeat:                                // repeat
 263+ 7F25 B9 6E 9B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F29 03 6D B9 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F2D A8 6B
 265+ 7F2F CB 67                        dw      F_CLOSE                 // f_close
 266+ 7F31 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F35 A7 70
 267+ 7F37 CA 69 CA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F3B CA 69
 268+ 7F3D 08 6B B9 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F41 A8 6B
 269+ 7F43                                                              // if
 270+ 7F43 2C 64                        dw      ZBRANCH
 271+ 7F45 12 00                        dw      FInclude_Else_2 - $
 272+ 7F47 B9 6E 9B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F4B A8 67                        dw          F_SEEK              //      f_seek
 274+ 7F4D A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F51 A7 70
 275+ 7F53                                                              // else
 276+ 7F53 15 64                        dw      BRANCH
 277+ 7F55 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F57              FInclude_Else_2:
 279+ 7F57 49 6B                        dw          TWO_DROP            //      2drop
 280+ 7F59              FInclude_Endif_2:                               // endif
 281+ 7F59 CA 69 0B 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F5D A8 6B
 282+ 7F5F CA 69 02 6E                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F63 A8 6B
 283+ 7F65 A3 69                        dw      EXIT                    // ;
 284+ 7F67
 285+ 7F67              //  ______________________________________________________________________
 286+ 7F67              //
 287+ 7F67              // open<         -- fh
 288+ 7F67              // Open the following filename and return it file-handle
 289+ 7F67              // Used in the form OPEN CCCC
 290+ 7F67                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F67             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F67             >
 290+ 7F67             >                // dummy db directives used to calculate length of namec
 290+ 7F67 4F 50 45 4E >                db      "OPEN<"
 290+ 7F6B 3C          >
 290+ 7F6C             >len_NFA         defl    $ - temp_NFA
 290+ 7F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F67             >
 290+ 7F67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F68 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F6C 3C          >
 290+ 7F6D             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F6C BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F6D             >
 290+ 7F6D A7 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F6F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F6F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F71             >                else
 290+ 7F71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F71             >
 290+ 7F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F71 2D 6D                        dw      BL
 292+ 7F73 2A 74 41 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F77 C3 6A
 293+ 7F79 28 6A 03 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F7D FB 6A A8 6B
 294+ 7F81 17 74 0B 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F85 4A 68
 295+ 7F87 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F8B A7 70                        dw      QERROR                  // ?error
 297+ 7F8D A3 69                        dw      EXIT                    // ;
 298+ 7F8F
 299+ 7F8F              //  ______________________________________________________________________
 300+ 7F8F              //
 301+ 7F8F              // include      -- cccc
 302+ 7F8F              // Include the following filename
 303+ 7F8F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F8F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F8F             >
 303+ 7F8F             >                // dummy db directives used to calculate length of namec
 303+ 7F8F 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F93 55 44 45    >
 303+ 7F96             >len_NFA         defl    $ - temp_NFA
 303+ 7F96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F8F             >
 303+ 7F8F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F90 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F94 55 44 45    >
 303+ 7F97             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F96 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F97             >
 303+ 7F97 67 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F99             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F99 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F9B             >                else
 303+ 7F9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F9B             >
 303+ 7F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F9B 6F 7F                        dw      OPEN_FH                 // open
 305+ 7F9D 08 6B B3 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FA1 CB 67 D3 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FA5 A3 69                        dw      EXIT                    // ;
 308+ 7FA7
 309+ 7FA7              //  ______________________________________________________________________
 310+ 7FA7              //
 311+ 7FA7              // needs
 312+ 7FA7              // check for cccc exists in vocabulary
 313+ 7FA7              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FA7
 315+ 7FA7              // temp filename cccc.f as counted string zero-padded
 316+ 7FA7                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA7             >
 316+ 7FA7             >                // dummy db directives used to calculate length of namec
 316+ 7FA7 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FAB 53 2D 57    >
 316+ 7FAE             >len_NFA         defl    $ - temp_NFA
 316+ 7FAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA7             >
 316+ 7FA7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA8 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FAC 53 2D 57    >
 316+ 7FAF             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FAE D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FAF             >
 316+ 7FAF 8F 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FB1             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FB1 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FB3             >                else
 316+ 7FB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FB3             >
 316+ 7FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FB3 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FD6              // temp complete path+filename
 319+ 7FD6                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FD6             >
 319+ 7FD6             >                // dummy db directives used to calculate length of namec
 319+ 7FD6 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FDA 53 2D 46 4E >
 319+ 7FDE             >len_NFA         defl    $ - temp_NFA
 319+ 7FDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FD6             >
 319+ 7FD6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FD7 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FDB 53 2D 46 4E >
 319+ 7FDF             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FDE CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FDF             >
 319+ 7FDF A7 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FE1             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FE1 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FE3             >                else
 319+ 7FE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FE3             >
 319+ 7FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FE3 00 00 00...                  ds      40
 321+ 800B              // constant path
 322+ 800B                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 800B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 800B             >
 322+ 800B             >                // dummy db directives used to calculate length of namec
 322+ 800B 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 800F 53 2D 49 4E >
 322+ 8013 43          >
 322+ 8014             >len_NFA         defl    $ - temp_NFA
 322+ 8014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 800B             >
 322+ 800B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 800C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8010 53 2D 49 4E >
 322+ 8014 43          >
 322+ 8015             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8014 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8015             >
 322+ 8015 D6 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8017             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8017 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8019             >                else
 322+ 8019 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8019             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8019             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8019             >
 322+ 8019             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8019 04 69 6E 63                  db      4, "inc/", 0
 323+ 801D 2F 00
 324+ 801F                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 801F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 801F             >
 324+ 801F             >                // dummy db directives used to calculate length of namec
 324+ 801F 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8023 53 2D 4C 49 >
 324+ 8027 42          >
 324+ 8028             >len_NFA         defl    $ - temp_NFA
 324+ 8028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 801F             >
 324+ 801F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8020 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8024 53 2D 4C 49 >
 324+ 8028 42          >
 324+ 8029             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8028 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8029             >
 324+ 8029 0B 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 802B             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 802B DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 802D             >                else
 324+ 802D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 802D             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 802D             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 802D             >
 324+ 802D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 802D 04 6C 69 62                  db      4, "lib/", 0
 325+ 8031 2F 00
 326+ 8033
 327+ 8033              // Concatenate path at a and filename and include it
 328+ 8033              // No error is issued if filename doesn't exist.
 329+ 8033                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8033             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8033             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8033             >
 329+ 8033             >                // dummy db directives used to calculate length of namec
 329+ 8033 4E 45 45 44 >                db      "NEEDS/"
 329+ 8037 53 2F       >
 329+ 8039             >len_NFA         defl    $ - temp_NFA
 329+ 8039             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8033             >
 329+ 8033 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8034 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8038 53 2F       >
 329+ 803A             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8039 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 803A             >
 329+ 803A 1F 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 803C             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 803C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 803E             >                else
 329+ 803E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 803E             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 803E             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 803E             >
 329+ 803E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 803E 41 72 EB 6A                  dw      COUNT, TUCK             // n a n
 331+ 8042 E1 7F FB 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8046 96 68
 332+ 8048 E1 7F 28 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 804C B1 7F 49 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8050 FB 6A
 334+ 8052 A9 63 23 00                  dw      LIT, 35
 335+ 8056 96 68                        dw      CMOVE
 336+ 8058 E1 7F                        dw      NEEDS_FN
 337+ 805A 17 74 0B 6D                  dw      PAD, ONE, F_OPEN
 337+ 805E 4A 68
 338+ 8060 E5 69                        dw      ZEQUAL
 339+ 8062 2C 64                        dw      ZBRANCH
 340+ 8064 08 00                        dw      Needs_1 - $
 341+ 8066 B3 7E                        dw          F_INCLUDE
 342+ 8068 15 64                        dw      BRANCH
 343+ 806A 04 00                        dw      Needs_2 - $
 344+ 806C              Needs_1:
 345+ 806C              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 806C              //              dw          LIT, 43, MESSAGE
 347+ 806C D3 6A                        dw          DROP
 348+ 806E              Needs_2:
 349+ 806E A3 69                        dw      EXIT                    // ;
 350+ 8070
 351+ 8070
 352+ 8070                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8070             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8070             >
 352+ 8070             >                // dummy db directives used to calculate length of namec
 352+ 8070 4E 44 4F 4D >                db      "NDOM"
 352+ 8074             >len_NFA         defl    $ - temp_NFA
 352+ 8074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8070             >
 352+ 8070 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8071 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8075             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8074 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8075             >
 352+ 8075 33 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8077             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8077 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8079             >                else
 352+ 8079 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8079             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8079             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8079             >
 352+ 8079             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8079              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8079 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 807D 7C 5C 3C 3E
 354+ 8081 22
 355+ 8082 00                           db 0
 356+ 8083
 357+ 8083                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8083             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8083             >
 357+ 8083             >                // dummy db directives used to calculate length of namec
 357+ 8083 4E 43 44 4D >                db      "NCDM"
 357+ 8087             >len_NFA         defl    $ - temp_NFA
 357+ 8087             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8083             >
 357+ 8083 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8084 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8088             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8087 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8088             >
 357+ 8088 70 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 808A             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 808A DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 808C             >                else
 357+ 808C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 808C             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 808C             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 808C             >
 357+ 808C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 808C              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 808C 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 8090 24 5F 7B 7D
 359+ 8094 7E
 360+ 8095 00                           db 0
 361+ 8096
 362+ 8096              // Replace illegal character in filename using the map here above
 363+ 8096              // at the moment we need only  "
 364+ 8096                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8096             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8096             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8096             >
 364+ 8096             >                // dummy db directives used to calculate length of namec
 364+ 8096 4D 41 50 2D >                db      "MAP-FN"
 364+ 809A 46 4E       >
 364+ 809C             >len_NFA         defl    $ - temp_NFA
 364+ 809C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8096             >
 364+ 8096 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8097 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 809B 46 4E       >
 364+ 809D             >                org     $-1                 // alter last byte of Name just above to set
 364+ 809C CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 809D             >
 364+ 809D 83 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 809F             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 809F 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 80A1             >                else
 364+ 80A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 364+ 80A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 80A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 80A1             >
 364+ 80A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 80A1 41 72 55 72                  dw      COUNT, BOUNDS
 366+ 80A5 86 64                        dw      C_DO
 367+ 80A7              Needs_3:
 368+ 80A7 8A 80 77 80                  dw          NCDM, NDOM, LIT, 10
 368+ 80AB A9 63 0A 00
 369+ 80AF 90 64 B6 6B                  dw          I, CFETCH
 370+ 80B3 B8 65                        dw          C_MAP
 371+ 80B5 90 64 C4 6B                  dw          I, CSTORE
 372+ 80B9              Needs_4:
 373+ 80B9 04 64                        dw      C_LOOP
 374+ 80BB EC FF                        dw      Needs_3 - $
 375+ 80BD A3 69                        dw      EXIT
 376+ 80BF
 377+ 80BF
 378+ 80BF              // include  "path/cccc.f" if cccc is not defined
 379+ 80BF              // filename cccc.f is temporary stored at NEEDS-W
 380+ 80BF                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 80BF             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 80BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 80BF             >
 380+ 80BF             >                // dummy db directives used to calculate length of namec
 380+ 80BF 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80C3 53 2D 46    >
 380+ 80C6             >len_NFA         defl    $ - temp_NFA
 380+ 80C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 80BF             >
 380+ 80BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 80C0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80C4 53 2D 46    >
 380+ 80C7             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80C6 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80C7             >
 380+ 80C7 96 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80C9             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80C9 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80CB             >                else
 380+ 80CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 80CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80CB             >
 380+ 80CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80CB DC 75                        dw      LFIND
 382+ 80CD 2C 64                        dw      ZBRANCH
 383+ 80CF 0A 00                        dw      Needs_5 - $
 384+ 80D1
 385+ 80D1 D3 6A 49 6B                  dw          DROP, TWO_DROP
 386+ 80D5 15 64                        dw      BRANCH
 387+ 80D7 2C 00                        dw      Needs_6 - $
 388+ 80D9              Needs_5:
 389+ 80D9 B1 7F                        dw          NEEDS_W
 390+ 80DB A9 63 23 00                  dw          LIT, 35
 391+ 80DF E1 73                        dw          ERASE                   // a
 392+ 80E1 E2 6E B6 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80E5 49 6A
 393+ 80E7 E2 6E C3 6A                  dw          HERE, OVER              // a n here n
 394+ 80EB B1 7F FB 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80EF 96 68
 395+ 80F1 B1 7F 9F 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80F5 B1 7F 28 6A                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80F9 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80FD FB 6A A8 6B                  dw          SWAP, STORE             // a
 399+ 8101 3C 80                        dw          NEEDS_SLASH
 400+ 8103              Needs_6:
 401+ 8103 A3 69                        dw      EXIT
 402+ 8105
 403+ 8105
 404+ 8105              // check for cccc exists in vocabulary
 405+ 8105              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 8105              // search in inc subdirectory
 407+ 8105                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 8105             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 8105             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 8105             >
 407+ 8105             >                // dummy db directives used to calculate length of namec
 407+ 8105 4E 45 45 44 >                db      "NEEDS"
 407+ 8109 53          >
 407+ 810A             >len_NFA         defl    $ - temp_NFA
 407+ 810A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 8105             >
 407+ 8105 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 8106 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 810A 53          >
 407+ 810B             >                org     $-1                 // alter last byte of Name just above to set
 407+ 810A D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 810B             >
 407+ 810B BF 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 810D             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 810D 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 810F             >                else
 407+ 810F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 407+ 810F             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 810F             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 810F             >
 407+ 810F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 810F 0B 6E 9B 6B                  dw      TO_IN, FETCH
 409+ 8113 08 6B                        dw      DUP
 410+ 8115 17 80 C9 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 8119 0B 6E A8 6B                  dw      TO_IN, STORE
 412+ 811D 2B 80 C9 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8121 0B 6E A8 6B                  dw      TO_IN, STORE
 414+ 8125 DC 75                        dw      LFIND
 415+ 8127 2C 64                        dw      ZBRANCH
 416+ 8129 08 00                        dw      Needs_10 - $
 417+ 812B 49 6B                        dw          TWO_DROP
 418+ 812D 15 64                        dw      BRANCH
 419+ 812F 10 00                        dw      Needs_11 - $
 420+ 8131              Needs_10:
 421+ 8131 B1 7F 41 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8135 A7 72 ED 6F
 422+ 8139 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 813D FC 7A
 423+ 813F              Needs_11:
 424+ 813F A3 69                        dw      EXIT
 425+ 8141
 426+ 8141
 427+ 8141              //  ______________________________________________________________________
 428+ 8141              //
 429+ 8141              // load+        n --
 430+ 8141                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8141             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8141             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8141             >
 430+ 8141             >                // dummy db directives used to calculate length of namec
 430+ 8141 4C 4F 41 44 >                db      "LOAD+"
 430+ 8145 2B          >
 430+ 8146             >len_NFA         defl    $ - temp_NFA
 430+ 8146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8141             >
 430+ 8141 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8142 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8146 2B          >
 430+ 8147             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8146 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8147             >
 430+ 8147 05 81       >                dw      last_NFA            // Link to previous definition Name
 430+ 8149             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 8149 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 814B             >                else
 430+ 814B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 430+ 814B             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 814B             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 814B             >
 430+ 814B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 814B 02 6E 9B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 814F B6 69
 432+ 8151 0B 6E 9B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8155 B6 69
 433+ 8157
 434+ 8157 03 6D 0B 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 815B A8 6B
 435+ 815D 4F 6D 63 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8161 02 6E A8 6B
 436+ 8165 CA 77                        dw      INTERPRET               // interpret
 437+ 8167
 438+ 8167 CA 69 0B 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 816B A8 6B
 439+ 816D CA 69 02 6E                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8171 A8 6B
 440+ 8173 A3 69                        dw      EXIT                    // ;
 441+ 8175
 442+ 8175              //  ______________________________________________________________________
 443+ 8175              //
 444+ 8175              // -->          --
 445+ 8175                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8175             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8175             >
 445+ 8175             >                // dummy db directives used to calculate length of namec
 445+ 8175 2D 2D 3E    >                db      "-->"
 445+ 8178             >len_NFA         defl    $ - temp_NFA
 445+ 8178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8175             >
 445+ 8175 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8176 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 8179             >                org     $-1                 // alter last byte of Name just above to set
 445+ 8178 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 8179             >
 445+ 8179 41 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 817B             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 817B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 817D             >                else
 445+ 817D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 445+ 817D             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 817D             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 817D             >
 445+ 817D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 817D 20 71                        dw      QLOADING                // ?loading
 447+ 817F 03 6D 0B 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8183 A8 6B
 448+ 8185 4F 6D                        dw      BSCR                    // b/scr
 449+ 8187 02 6E 9B 6B                  dw      BLK, FETCH              // blk @
 450+ 818B C3 6A                        dw      OVER                    // over
 451+ 818D 90 7A                        dw      MOD                     // mod
 452+ 818F 35 6F                        dw      SUBTRACT                // -
 453+ 8191 02 6E 78 6B                  dw      BLK, PLUSSTORE          // +!
 454+ 8195 A3 69                        dw      EXIT                    // ;
 455+ 8197
 456+ 8197              //  ______________________________________________________________________
 457+ 8197              //
 458+ 8197              // '            -- xt
 459+ 8197                              Colon_Def TICK, "'", is_normal
 459+ 8197             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 8197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 8197             >
 459+ 8197             >                // dummy db directives used to calculate length of namec
 459+ 8197 27          >                db      "'"
 459+ 8198             >len_NFA         defl    $ - temp_NFA
 459+ 8198             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 8197             >
 459+ 8197 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 8198 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 8199             >                org     $-1                 // alter last byte of Name just above to set
 459+ 8198 A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 8199             >
 459+ 8199 75 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 819B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 819B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 819D             >                else
 459+ 819D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 459+ 819D             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 819D             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 819D             >
 459+ 819D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 819D DC 75                        dw      LFIND                   // -find
 461+ 819F E5 69                        dw      ZEQUAL                  // 0=
 462+ 81A1 03 6D A7 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 81A5 D3 6A                        dw      DROP                    // drop
 464+ 81A7 A3 69                        dw      EXIT                    // ;
 465+ 81A9
 466+ 81A9              //  ______________________________________________________________________
 467+ 81A9              //
 468+ 81A9              // forget       -- cccc
 469+ 81A9                              Colon_Def FORGET, "FORGET", is_normal
 469+ 81A9             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 81A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 81A9             >
 469+ 81A9             >                // dummy db directives used to calculate length of namec
 469+ 81A9 46 4F 52 47 >                db      "FORGET"
 469+ 81AD 45 54       >
 469+ 81AF             >len_NFA         defl    $ - temp_NFA
 469+ 81AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 81A9             >
 469+ 81A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 81AA 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 81AE 45 54       >
 469+ 81B0             >                org     $-1                 // alter last byte of Name just above to set
 469+ 81AF D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 81B0             >
 469+ 81B0 97 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81B2             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81B2 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81B4             >                else
 469+ 81B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 469+ 81B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81B4             >
 469+ 81B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81B4 43 6E 9B 6B                  dw      CURRENT, FETCH          // current @
 471+ 81B8 36 6E 9B 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81BC 35 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81C0 17 00 A7 70
 473+ 81C4 9B 81 77 70                  dw      TICK, TO_BODY           // ' >body
 474+ 81C8 08 6B B9 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81CC 9B 6B
 475+ 81CE 50 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81D2 15 00 A7 70
 476+ 81D6 08 6B 4D 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81DA C1 6D A8 6B
 477+ 81DE 33 70 9B 6B                  dw      LFA, FETCH              // lfa @
 478+ 81E2 36 6E 9B 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81E6 A8 6B
 479+ 81E8 A3 69                        dw      EXIT                    // ;
 480+ 81EA
 481+ 81EA              //  ______________________________________________________________________
 482+ 81EA              //
 483+ 81EA              // marker       -- cccc
 484+ 81EA                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81EA             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81EA             >
 484+ 81EA             >                // dummy db directives used to calculate length of namec
 484+ 81EA 4D 41 52 4B >                db      "MARKER"
 484+ 81EE 45 52       >
 484+ 81F0             >len_NFA         defl    $ - temp_NFA
 484+ 81F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81EA             >
 484+ 81EA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81EB 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81EF 45 52       >
 484+ 81F1             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81F0 D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81F1             >
 484+ 81F1 A9 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81F3             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81F3 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81F5             >                else
 484+ 81F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 81F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81F5             >
 484+ 81F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81F5 0A 72                        dw      CBUILDS
 486+ 81F7 CF 6D 9B 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81FB FE 6E
 487+ 81FD 43 6E 9B 6B                  dw      CURRENT, FETCH, COMMA
 487+ 8201 FE 6E
 488+ 8203 36 6E 9B 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 8207 FE 6E
 489+ 8209 23 70 FE 6E                  dw      LATEST, COMMA
 490+ 820D 23 70 61 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 8211 33 70 9B 6B
 490+ 8215 FE 6E
 491+ 8217 1A 72                        dw      DOES_TO
 492+ 8219 08 6B 9B 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 821D CF 6D A8 6B
 492+ 8221 71 6A
 493+ 8223 08 6B 9B 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 8227 43 6E A8 6B
 493+ 822B 71 6A
 494+ 822D 08 6B 9B 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8231 36 6E A8 6B
 494+ 8235 71 6A
 495+ 8237 08 6B 9B 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 823B C1 6D A8 6B
 495+ 823F 71 6A
 496+ 8241 9B 6B 43 6E                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 8245 9B 6B A8 6B
 497+ 8249 A3 69                        dw      EXIT
 498+ 824B
 499+ 824B              //  ______________________________________________________________________
 500+ 824B              //
 501+ 824B              // spaces       n --
 502+ 824B                              Colon_Def SPACES, "SPACES", is_normal
 502+ 824B             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 824B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 824B             >
 502+ 824B             >                // dummy db directives used to calculate length of namec
 502+ 824B 53 50 41 43 >                db      "SPACES"
 502+ 824F 45 53       >
 502+ 8251             >len_NFA         defl    $ - temp_NFA
 502+ 8251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 824B             >
 502+ 824B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 824C 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 8250 45 53       >
 502+ 8252             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8251 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8252             >
 502+ 8252 EA 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 8254             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8254 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 8256             >                else
 502+ 8256 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 502+ 8256             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 8256             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 8256             >
 502+ 8256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 8256 03 6D 9F 6F                  dw      ZERO, MAX
 504+ 825A 03 6D 59 64                  dw      ZERO, C_Q_DO
 505+ 825E 08 00                        dw      Spaces_Leave - $
 506+ 8260              Spaces_Loop:
 507+ 8260 ED 6F                        dw          SPACE
 508+ 8262 04 64                        dw      C_LOOP
 509+ 8264 FC FF                        dw      Spaces_Loop - $
 510+ 8266              Spaces_Leave:
 511+ 8266 A3 69                        dw      EXIT                    // ;
 512+ 8268
 513+ 8268              //  ______________________________________________________________________
 514+ 8268              //
 515+ 8268              // <#           --
 516+ 8268                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 8268             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 8268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8268             >
 516+ 8268             >                // dummy db directives used to calculate length of namec
 516+ 8268 3C 23       >                db      "<#"
 516+ 826A             >len_NFA         defl    $ - temp_NFA
 516+ 826A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8268             >
 516+ 8268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8269 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 826B             >                org     $-1                 // alter last byte of Name just above to set
 516+ 826A A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 826B             >
 516+ 826B 4B 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 826D             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 826D 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 826F             >                else
 516+ 826F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 826F             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 826F             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 826F             >
 516+ 826F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 826F 17 74 84 6E                  dw      PAD, HLD, STORE
 517+ 8273 A8 6B
 518+ 8275 A3 69                        dw      EXIT
 519+ 8277
 520+ 8277              //  ______________________________________________________________________
 521+ 8277              //
 522+ 8277              // #>           --
 523+ 8277                              Colon_Def DASH_END, "#>", is_normal
 523+ 8277             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 8277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 8277             >
 523+ 8277             >                // dummy db directives used to calculate length of namec
 523+ 8277 23 3E       >                db      "#>"
 523+ 8279             >len_NFA         defl    $ - temp_NFA
 523+ 8279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 8277             >
 523+ 8277 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8278 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 827A             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8279 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 827A             >
 523+ 827A 68 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 827C             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 827C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 827E             >                else
 523+ 827E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 827E             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 827E             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 827E             >
 523+ 827E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 827E 49 6B                        dw      TWO_DROP
 525+ 8280 84 6E 9B 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 8284 17 74 C3 6A
 525+ 8288 35 6F
 526+ 828A A3 69                        dw      EXIT
 527+ 828C
 528+ 828C              //  ______________________________________________________________________
 529+ 828C              //
 530+ 828C              // sign         n d -- d
 531+ 828C                              Colon_Def SIGN, "SIGN", is_normal
 531+ 828C             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 828C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 828C             >
 531+ 828C             >                // dummy db directives used to calculate length of namec
 531+ 828C 53 49 47 4E >                db      "SIGN"
 531+ 8290             >len_NFA         defl    $ - temp_NFA
 531+ 8290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 828C             >
 531+ 828C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 828D 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 8291             >                org     $-1                 // alter last byte of Name just above to set
 531+ 8290 CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 8291             >
 531+ 8291 77 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 8293             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 8293 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 8295             >                else
 531+ 8295 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 531+ 8295             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 8295             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 8295             >
 531+ 8295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 8295 15 6B 00 6A                  dw      ROT, ZLESS
 533+ 8299 2C 64                        dw      ZBRANCH
 534+ 829B 08 00                        dw      Sign_Endif - $
 535+ 829D A9 63 2D 00                  dw          LIT, 45, HOLD
 535+ 82A1 01 74
 536+ 82A3              Sign_Endif:
 537+ 82A3 A3 69                        dw      EXIT
 538+ 82A5
 539+ 82A5              //  ______________________________________________________________________
 540+ 82A5              //
 541+ 82A5              // #           d1 -- d2
 542+ 82A5                              Colon_Def DASH, "#", is_normal
 542+ 82A5             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 82A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 82A5             >
 542+ 82A5             >                // dummy db directives used to calculate length of namec
 542+ 82A5 23          >                db      "#"
 542+ 82A6             >len_NFA         defl    $ - temp_NFA
 542+ 82A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 82A5             >
 542+ 82A5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 82A6 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 82A7             >                org     $-1                 // alter last byte of Name just above to set
 542+ 82A6 A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 82A7             >
 542+ 82A7 8C 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 82A9             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 82A9 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 82AB             >                else
 542+ 82AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 82AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 82AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 82AB             >
 542+ 82AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 82AB 58 6E 9B 6B                  dw      BASE, FETCH
 544+ 82AF
 545+ 82AF B6 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 82B1 03 6D DE 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 82B5 FA 68
 547+ 82B7 CA 69 FB 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82BB B6 69
 548+ 82BD FA 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82BF CA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82C1
 551+ 82C1 15 6B                        dw      ROT
 552+ 82C3 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82C7 C3 6A 64 6F
 553+ 82CB 2C 64                        dw      ZBRANCH
 554+ 82CD 08 00                        dw      Dash_Endif - $
 555+ 82CF A9 63 07 00                  dw          LIT, 7, PLUS
 555+ 82D3 28 6A
 556+ 82D5              Dash_Endif:
 557+ 82D5
 558+ 82D5 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82D9 28 6A 01 74
 559+ 82DD A3 69                        dw      EXIT
 560+ 82DF
 561+ 82DF              //  ______________________________________________________________________
 562+ 82DF              //
 563+ 82DF              // #s           d1 -- d2
 564+ 82DF                              Colon_Def DASHES, "#S", is_normal
 564+ 82DF             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82DF             >
 564+ 82DF             >                // dummy db directives used to calculate length of namec
 564+ 82DF 23 53       >                db      "#S"
 564+ 82E1             >len_NFA         defl    $ - temp_NFA
 564+ 82E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82DF             >
 564+ 82DF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82E0 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82E2             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82E1 D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82E2             >
 564+ 82E2 A5 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82E4             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82E4 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82E6             >                else
 564+ 82E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 82E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82E6             >
 564+ 82E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82E6              Dashes_Begin:
 566+ 82E6 A9 82 69 6B                  dw      DASH, TWO_DUP
 567+ 82EA 45 69 E5 69                  dw          OR_OP, ZEQUAL
 568+ 82EE 2C 64                        dw      ZBRANCH
 569+ 82F0 F6 FF                        dw      Dashes_Begin - $
 570+ 82F2 A3 69                        dw      EXIT
 571+ 82F4
 572+ 82F4              //  ______________________________________________________________________
 573+ 82F4              //
 574+ 82F4              // d.r          d n --
 575+ 82F4                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82F4             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82F4             >
 575+ 82F4             >                // dummy db directives used to calculate length of namec
 575+ 82F4 44 2E 52    >                db      "D.R"
 575+ 82F7             >len_NFA         defl    $ - temp_NFA
 575+ 82F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82F4             >
 575+ 82F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82F5 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82F8             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82F7 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82F8             >
 575+ 82F8 DF 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82FA             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82FA 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82FC             >                else
 575+ 82FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 82FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82FC             >
 575+ 82FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82FC B6 69                        dw      TO_R
 577+ 82FE EB 6A B9 79                  dw      TUCK, DABS
 578+ 8302 6D 82 E4 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 578+ 8306 93 82 7C 82
 579+ 830A CA 69                        dw      R_TO
 580+ 830C C3 6A 35 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 8310 54 82 A7 72
 581+ 8314 A3 69                        dw      EXIT
 582+ 8316
 583+ 8316              //  ______________________________________________________________________
 584+ 8316              //
 585+ 8316              // .r           n1 n2 --
 586+ 8316                              Colon_Def DOT_R, ".R", is_normal
 586+ 8316             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8316             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8316             >
 586+ 8316             >                // dummy db directives used to calculate length of namec
 586+ 8316 2E 52       >                db      ".R"
 586+ 8318             >len_NFA         defl    $ - temp_NFA
 586+ 8318             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8316             >
 586+ 8316 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8317 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8319             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8318 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8319             >
 586+ 8319 F4 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 831B             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 831B 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 831D             >                else
 586+ 831D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 831D             >
 586+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 831D B6 69                        dw      TO_R
 588+ 831F 21 6F CA 69                  dw      S_TO_D, R_TO
 589+ 8323 FA 82                        dw      D_DOT_R
 590+ 8325 A3 69                        dw      EXIT
 591+ 8327
 592+ 8327              //  ______________________________________________________________________
 593+ 8327              //
 594+ 8327              // d.           d --
 595+ 8327                              Colon_Def D_DOT, "D.", is_normal
 595+ 8327             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8327             >
 595+ 8327             >                // dummy db directives used to calculate length of namec
 595+ 8327 44 2E       >                db      "D."
 595+ 8329             >len_NFA         defl    $ - temp_NFA
 595+ 8329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8327             >
 595+ 8327 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8328 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 832A             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8329 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 832A             >
 595+ 832A 16 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 832C             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 832C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 832E             >                else
 595+ 832E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 595+ 832E             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 832E             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 832E             >
 595+ 832E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 832E 03 6D FA 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8332 ED 6F
 597+ 8334 A3 69                        dw      EXIT
 598+ 8336
 599+ 8336              //  ______________________________________________________________________
 600+ 8336              //
 601+ 8336              // .            n --
 602+ 8336                              Colon_Def DOT, ".", is_normal
 602+ 8336             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8336             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8336             >
 602+ 8336             >                // dummy db directives used to calculate length of namec
 602+ 8336 2E          >                db      "."
 602+ 8337             >len_NFA         defl    $ - temp_NFA
 602+ 8337             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8336             >
 602+ 8336 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8337 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8338             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8337 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8338             >
 602+ 8338 27 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 833A             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 833A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 833C             >                else
 602+ 833C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 833C             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 833C             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 833C             >
 602+ 833C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 833C 21 6F 2C 83                  dw      S_TO_D, D_DOT
 604+ 8340 A3 69                        dw      EXIT
 605+ 8342
 606+ 8342              //  ______________________________________________________________________
 607+ 8342              //
 608+ 8342              // ?            n --
 609+ 8342                              Colon_Def QUESTION, "?", is_normal
 609+ 8342             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8342             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8342             >
 609+ 8342             >                // dummy db directives used to calculate length of namec
 609+ 8342 3F          >                db      "?"
 609+ 8343             >len_NFA         defl    $ - temp_NFA
 609+ 8343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8342             >
 609+ 8342 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8343 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8344             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8343 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8344             >
 609+ 8344 36 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8346             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8346 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8348             >                else
 609+ 8348 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8348             >
 609+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8348 9B 6B 3A 83                  dw      FETCH, DOT
 611+ 834C A3 69                        dw      EXIT
 612+ 834E
 613+ 834E              //  ______________________________________________________________________
 614+ 834E              //
 615+ 834E              // u.           u --
 616+ 834E                              Colon_Def U_DOT, "U.", is_normal
 616+ 834E             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 834E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 834E             >
 616+ 834E             >                // dummy db directives used to calculate length of namec
 616+ 834E 55 2E       >                db      "U."
 616+ 8350             >len_NFA         defl    $ - temp_NFA
 616+ 8350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 834E             >
 616+ 834E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 834F 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8351             >                org     $-1                 // alter last byte of Name just above to set
 616+ 8350 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8351             >
 616+ 8351 42 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8353             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8353 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8355             >                else
 616+ 8355 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 616+ 8355             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8355             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8355             >
 616+ 8355             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8355 03 6D 2C 83                  dw      ZERO, D_DOT
 618+ 8359 A3 69                        dw      EXIT
 619+ 835B
 620+ 835B              //  ______________________________________________________________________
 621+ 835B              //
 622+ 835B              // words        --
 623+ 835B                              Colon_Def WORDS, "WORDS", is_normal
 623+ 835B             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 835B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 835B             >
 623+ 835B             >                // dummy db directives used to calculate length of namec
 623+ 835B 57 4F 52 44 >                db      "WORDS"
 623+ 835F 53          >
 623+ 8360             >len_NFA         defl    $ - temp_NFA
 623+ 8360             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 835B             >
 623+ 835B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 835C 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 8360 53          >
 623+ 8361             >                org     $-1                 // alter last byte of Name just above to set
 623+ 8360 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8361             >
 623+ 8361 4E 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8363             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8363 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8365             >                else
 623+ 8365 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 8365             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8365             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8365             >
 623+ 8365             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8365 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 8369 14 6E A8 6B
 625+ 836D 36 6E 9B 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8371 9B 6B
 626+ 8373              Words_Begin:
 627+ 8373 08 6B B6 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 8377 A9 63 1F 00
 627+ 837B 33 69
 628+ 837D 14 6E 9B 6B                  dw          OUT, FETCH, PLUS
 628+ 8381 28 6A
 629+ 8383 37 6D 64 6F                  dw          CL, LESS, ZEQUAL
 629+ 8387 E5 69
 630+ 8389 2C 64                        dw          ZBRANCH
 631+ 838B 0A 00                        dw          Words_Endif - $
 632+ 838D 2A 66 03 6D                  dw              CR, ZERO, OUT, STORE
 632+ 8391 14 6E A8 6B
 633+ 8395              Words_Endif:
 634+ 8395 08 6B 4D 76                  dw          DUP, ID_DOT
 635+ 8399 61 70 33 70                  dw          PFA, LFA, FETCH
 635+ 839D 9B 6B
 636+ 839F 08 6B E5 69                  dw          DUP, ZEQUAL
 637+ 83A3 44 67 45 69                  dw          QTERMINAL, OR_OP
 638+ 83A7 2C 64                        dw      ZBRANCH
 639+ 83A9 CA FF                        dw      Words_Begin - $
 640+ 83AB D3 6A                        dw      DROP
 641+ 83AD A3 69                        dw      EXIT
 642+ 83AF
 643+ 83AF              //  ______________________________________________________________________
 644+ 83AF              //
 645+ 83AF              // list         n --
 646+ 83AF                              Colon_Def LIST, "LIST", is_normal
 646+ 83AF             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 83AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 83AF             >
 646+ 83AF             >                // dummy db directives used to calculate length of namec
 646+ 83AF 4C 49 53 54 >                db      "LIST"
 646+ 83B3             >len_NFA         defl    $ - temp_NFA
 646+ 83B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 83AF             >
 646+ 83AF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 83B0 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83B4             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83B3 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83B4             >
 646+ 83B4 5B 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83B6             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83B6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83B8             >                else
 646+ 83B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 646+ 83B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83B8             >
 646+ 83B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83B8 C6 71 2A 66                  dw      DECIMAL, CR
 648+ 83BC 08 6B 1D 6E                  dw      DUP, SCR, STORE
 648+ 83C0 A8 6B
 649+ 83C2 79 74                        dw      C_DOT_QUOTE
 650+ 83C4 05 53 63 72                  db      5, "Scr# "
 650+ 83C8 23 20
 651+ 83CA 3A 83                        dw      DOT
 652+ 83CC 5B 6D 03 6D                  dw      LSCR, ZERO, C_DO
 652+ 83D0 86 64
 653+ 83D2              List_Loop:
 654+ 83D2 2A 66                        dw          CR
 655+ 83D4 90 64 1B 6D                  dw          I, THREE
 656+ 83D8 1B 83 ED 6F                  dw          DOT_R, SPACE
 657+ 83DC 90 64 1D 6E                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83E0 9B 6B E8 7A
 658+ 83E4 44 67                        dw          QTERMINAL
 659+ 83E6 2C 64                        dw          ZBRANCH
 660+ 83E8 06 00                        dw          List_Endif - $
 661+ 83EA 41 64                        dw              C_LEAVE
 662+ 83EC 06 00                        dw              List_Leave - $
 663+ 83EE              List_Endif:
 664+ 83EE 04 64                        dw      C_LOOP
 665+ 83F0 E2 FF                        dw      List_Loop - $
 666+ 83F2              List_Leave:
 667+ 83F2 2A 66                        dw      CR
 668+ 83F4 A3 69                        dw      EXIT
 669+ 83F6
 670+ 83F6              //  ______________________________________________________________________
 671+ 83F6              //
 672+ 83F6              // index        n1 n2 --
 673+ 83F6                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83F6             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83F6             >
 673+ 83F6             >                // dummy db directives used to calculate length of namec
 673+ 83F6 49 4E 44 45 >                db      "INDEX"
 673+ 83FA 58          >
 673+ 83FB             >len_NFA         defl    $ - temp_NFA
 673+ 83FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83F6             >
 673+ 83F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83F7 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83FB 58          >
 673+ 83FC             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83FB D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83FC             >
 673+ 83FC AF 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83FE             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83FE 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 8400             >                else
 673+ 8400 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 673+ 8400             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 8400             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 8400             >
 673+ 8400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 8400 49 6A FB 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 8404 86 64
 675+ 8406              Index_Loop:
 676+ 8406 2A 66 90 64                  dw          CR, I, THREE
 676+ 840A 1B 6D
 677+ 840C 1B 83 ED 6F                  dw          DOT_R, SPACE
 678+ 8410 03 6D 90 64                  dw          ZERO, I, DOT_LINE
 678+ 8414 E8 7A
 679+ 8416 44 67                        dw          QTERMINAL
 680+ 8418 2C 64                        dw          ZBRANCH
 681+ 841A 06 00                        dw          Index_Endif - $
 682+ 841C 41 64                        dw              C_LEAVE
 683+ 841E 06 00                        dw              Index_Leave - $
 684+ 8420              Index_Endif:
 685+ 8420 04 64                        dw      C_LOOP
 686+ 8422 E4 FF                        dw      Index_Loop - $
 687+ 8424              Index_Leave:
 688+ 8424 2A 66                        dw      CR
 689+ 8426 A3 69                        dw      EXIT
 690+ 8428
 691+ 8428              //  ______________________________________________________________________
 692+ 8428              //
 693+ 8428              // cls          --
 694+ 8428                              Colon_Def CLS, "CLS", is_normal
 694+ 8428             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 8428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 8428             >
 694+ 8428             >                // dummy db directives used to calculate length of namec
 694+ 8428 43 4C 53    >                db      "CLS"
 694+ 842B             >len_NFA         defl    $ - temp_NFA
 694+ 842B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 8428             >
 694+ 8428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 8429 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 842C             >                org     $-1                 // alter last byte of Name just above to set
 694+ 842B D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 842C             >
 694+ 842C F6 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 842E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 842E 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 8430             >                else
 694+ 8430 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 8430             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 8430             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 8430             >
 694+ 8430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 8430 A9 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 8434 13 66
 696+ 8436 A3 69                        dw      EXIT
 697+ 8438
 698+ 8438              //  ______________________________________________________________________
 699+ 8438              //
 700+ 8438              // splash       --
 701+ 8438                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 8438             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 8438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 8438             >
 701+ 8438             >                // dummy db directives used to calculate length of namec
 701+ 8438 53 50 4C 41 >                db      "SPLASH"
 701+ 843C 53 48       >
 701+ 843E             >len_NFA         defl    $ - temp_NFA
 701+ 843E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 8438             >
 701+ 8438 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 8439 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 843D 53 48       >
 701+ 843F             >                org     $-1                 // alter last byte of Name just above to set
 701+ 843E C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 843F             >
 701+ 843F 28 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8441             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8441 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 8443             >                else
 701+ 8443 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 701+ 8443             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 8443             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 8443             >
 701+ 8443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 8443 2E 84                        dw      CLS
 703+ 8445 79 74                        dw      C_DOT_QUOTE
 704+ 8447 5A                           db      90  // length of the following string CR included.
 705+ 8448 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 705+ 844C 72 74 68 20
 705+ 8450 31 2E 35 32
 705+ 8454 20 4E 65 78
 705+ 8458 74 5A 58 4F
 705+ 845C 53 20 76 65
 705+ 8460 72 73 69 6F
 705+ 8464 6E 0D
 706+ 8466 49 6E 64 69                  db      "Indirect Threaded - build 20220730", 13
 706+ 846A 72 65 63 74
 706+ 846E 20 54 68 72
 706+ 8472 65 61 64 65
 706+ 8476 64 20 2D 20
 706+ 847A 62 75 69 6C
 706+ 847E 64 20 32 30
 706+ 8482 32 32 30 37
 706+ 8486 33 30 0D
 707+ 8489 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 707+ 848D 2D 32 30 32
 707+ 8491 32 20 4D 61
 707+ 8495 74 74 65 6F
 707+ 8499 20 56 69 74
 707+ 849D 74 75 72 69
 707+ 84A1 0D
 708+ 84A2 A3 69                        dw      EXIT
 709+ 84A4
 710+ 84A4              //  ______________________________________________________________________
 711+ 84A4              //
 712+ 84A4              // video        --
 713+ 84A4                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 84A4             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 84A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 84A4             >
 713+ 84A4             >                // dummy db directives used to calculate length of namec
 713+ 84A4 56 49 44 45 >                db      "VIDEO"
 713+ 84A8 4F          >
 713+ 84A9             >len_NFA         defl    $ - temp_NFA
 713+ 84A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 84A4             >
 713+ 84A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 84A5 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 84A9 4F          >
 713+ 84AA             >                org     $-1                 // alter last byte of Name just above to set
 713+ 84A9 CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 84AA             >
 713+ 84AA 38 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 84AC             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 84AC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 84AE             >                else
 713+ 84AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 713+ 84AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 84AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 84AE             >
 713+ 84AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 84AE 13 6D 08 6B                  dw      TWO, DUP, DEVICE, STORE
 714+ 84B2 30 7B A8 6B
 715+ 84B6 85 67                        dw      SELECT
 716+ 84B8 A3 69                        dw      EXIT
 717+ 84BA
 718+ 84BA              //  ______________________________________________________________________
 719+ 84BA              //
 720+ 84BA              // accept-      a n1 -- n2
 721+ 84BA                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84BA             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84BA             >
 721+ 84BA             >                // dummy db directives used to calculate length of namec
 721+ 84BA 41 43 43 45 >                db      "ACCEPT-"
 721+ 84BE 50 54 2D    >
 721+ 84C1             >len_NFA         defl    $ - temp_NFA
 721+ 84C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84BA             >
 721+ 84BA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84BB 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84BF 50 54 2D    >
 721+ 84C2             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84C1 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84C2             >
 721+ 84C2 A4 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84C4             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84C4 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84C6             >                else
 721+ 84C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 84C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84C6             >
 721+ 84C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84C6 B6 69                        dw      TO_R
 723+ 84C8 03 6D                        dw      ZERO
 724+ 84CA FB 6A                        dw      SWAP
 725+ 84CC 08 6B                        dw      DUP
 726+ 84CE CA 69                        dw      R_TO
 727+ 84D0 28 6A                        dw      PLUS
 728+ 84D2 FB 6A                        dw      SWAP
 729+ 84D4 86 64                        dw      C_DO
 730+ 84D6              AcceptN_Loop:
 731+ 84D6 6A 7B                        dw          MMU7_FETCH
 732+ 84D8 60 67                        dw          INKEY
 733+ 84DA FB 6A 7C 7B                  dw          SWAP, MMU7_STORE
 734+ 84DE 08 6B E5 69                  dw          DUP, ZEQUAL
 735+ 84E2 2C 64                        dw          ZBRANCH
 736+ 84E4 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84E6              //              dw              VIDEO, QUIT
 738+ 84E6 41 64                        dw              C_LEAVE
 739+ 84E8 3A 00                        dw              AcceptN_Leave - $
 740+ 84EA
 741+ 84EA              AcceptN_Endif_1:
 742+ 84EA 08 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84EE 0D 00 43 6F
 743+ 84F2 2C 64                        dw          ZBRANCH
 744+ 84F4 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84F6 D3 6A 03 6D                  dw              DROP, ZERO
 746+ 84FA              AcceptN_Endif_2:
 747+ 84FA 08 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84FE 0A 00 43 6F
 748+ 8502 2C 64                        dw          ZBRANCH
 749+ 8504 06 00                        dw          AcceptN_Endif_3 - $
 750+ 8506 D3 6A 03 6D                  dw              DROP, ZERO
 751+ 850A              AcceptN_Endif_3:
 752+ 850A 90 64 C4 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 850E 49 6A
 753+ 8510
 754+ 8510 90 64 B6 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 8514 E5 69
 755+ 8516 2C 64                        dw          ZBRANCH
 756+ 8518 06 00                        dw              AcceptN_Endif_4 - $
 757+ 851A 41 64                        dw                  C_LEAVE     //              leave
 758+ 851C 06 00                        dw                  AcceptN_Leave - $
 759+ 851E              AcceptN_Endif_4:                                 //      endif
 760+ 851E
 761+ 851E 04 64                        dw      C_LOOP
 762+ 8520 B6 FF                        dw      AcceptN_Loop -$
 763+ 8522              AcceptN_Leave:
 764+ 8522 A3 69                        dw      EXIT
 765+ 8524
 766+ 8524              //  ______________________________________________________________________
 767+ 8524              //
 768+ 8524              // load-        n --
 769+ 8524              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 8524              // it accepts text from stream #n to the normal INTERPRET
 771+ 8524              // up to now, text-file must end with QUIT
 772+ 8524                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 8524             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 8524             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 8524             >
 772+ 8524             >                // dummy db directives used to calculate length of namec
 772+ 8524 4C 4F 41 44 >                db      "LOAD-"
 772+ 8528 2D          >
 772+ 8529             >len_NFA         defl    $ - temp_NFA
 772+ 8529             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 8524             >
 772+ 8524 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 8525 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8529 2D          >
 772+ 852A             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8529 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 852A             >
 772+ 852A BA 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 852C             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 852C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 852E             >                else
 772+ 852E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 852E             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 852E             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 852E             >
 772+ 852E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 852E B9 6E A8 6B                  dw      SOURCE_ID, STORE
 774+ 8532              Load_N_Begin:
 775+ 8532 96 6D 9B 6B                  dw          TIB, FETCH
 776+ 8536 08 6B A9 63                  dw          DUP, LIT, 80
 776+ 853A 50 00
 777+ 853C 69 6B F2 73                  dw          TWO_DUP, BLANKS
 778+ 8540 B9 6E 9B 6B                  dw          SOURCE_ID, FETCH
 779+ 8544 AA 79 08 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8548 30 7B A8 6B
 780+ 854C 85 67                        dw          SELECT
 781+ 854E C4 84                        dw          ACCEPT_N
 782+ 8550 AC 84                        dw          VIDEO
 783+ 8552 49 6B                        dw          TWO_DROP
 784+ 8554 03 6D 02 6E                  dw          ZERO, BLK, STORE
 784+ 8558 A8 6B
 785+ 855A 03 6D 0B 6E                  dw          ZERO, TO_IN, STORE
 785+ 855E A8 6B
 786+ 8560 CA 77                        dw          INTERPRET
 787+ 8562 44 67                        dw          QTERMINAL
 788+ 8564 2C 64                        dw      ZBRANCH
 789+ 8566 CC FF                        dw      Load_N_Begin - $
 790+ 8568 A3 69                        dw      EXIT
 791+ 856A
 792+ 856A              //  ______________________________________________________________________
 793+ 856A              //
 794+ 856A              // load         n --
 795+ 856A              // if n is positive, it loads screen #n (as usual)
 796+ 856A              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 856A              // this second way is useful if you want to load any kind of file
 798+ 856A              // provied that it is OPEN# the usual BASIC way.
 799+ 856A                              Colon_Def LOAD, "LOAD", is_normal
 799+ 856A             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 856A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 856A             >
 799+ 856A             >                // dummy db directives used to calculate length of namec
 799+ 856A 4C 4F 41 44 >                db      "LOAD"
 799+ 856E             >len_NFA         defl    $ - temp_NFA
 799+ 856E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 856A             >
 799+ 856A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 856B 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 856F             >                org     $-1                 // alter last byte of Name just above to set
 799+ 856E C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 856F             >
 799+ 856F 24 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8571             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8571 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 8573             >                else
 799+ 8573 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 799+ 8573             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 8573             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 8573             >
 799+ 8573             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 8573 08 6B 00 6A                  dw      DUP, ZLESS
 801+ 8577 2C 64                        dw      ZBRANCH
 802+ 8579 08 00                        dw      Load_Else - $
 803+ 857B 2C 85                        dw          LOAD_N
 804+ 857D 15 64                        dw      BRANCH
 805+ 857F 04 00                        dw      Load_Endif - $
 806+ 8581              Load_Else:
 807+ 8581 49 81                        dw          LOAD_P
 808+ 8583              Load_Endif:
 809+ 8583 A3 69                        dw      EXIT
 810+ 8585
 811+ 8585
 812+ 8585              //  ______________________________________________________________________
 813+ 8585              //
 814+ 8585              // autoexec     --
 815+ 8585              // this word is called the first time the Forth system boot to
 816+ 8585              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 8585                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 8585             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 8585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 8585             >
 817+ 8585             >                // dummy db directives used to calculate length of namec
 817+ 8585 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8589 45 58 45 43 >
 817+ 858D             >len_NFA         defl    $ - temp_NFA
 817+ 858D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 8585             >
 817+ 8585 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 8586 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 858A 45 58 45 43 >
 817+ 858E             >                org     $-1                 // alter last byte of Name just above to set
 817+ 858D C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 858E             >
 817+ 858E 6A 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 8590             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 8590 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 8592             >                else
 817+ 8592 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 8592             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 8592             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 8592             >
 817+ 8592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 8592 A9 63 0B 00                  dw      LIT, 11
 819+ 8596 A9 63 AE 6C                  dw      LIT, NOOP
 820+ 859A A9 63 D9 78                  dw      LIT, Autoexec_Ptr
 821+ 859E A8 6B                        dw      STORE
 822+ 85A0 71 85                        dw      LOAD
 823+ 85A2 8A 78                        dw      QUIT
 824+ 85A4 A3 69                        dw      EXIT
 825+ 85A6
 826+ 85A6
 827+ 85A6              //  ______________________________________________________________________
 828+ 85A6              //
 829+ 85A6              // bye     --
 830+ 85A6              //
 831+ 85A6                              Colon_Def BYE, "BYE", is_normal
 831+ 85A6             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 85A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 85A6             >
 831+ 85A6             >                // dummy db directives used to calculate length of namec
 831+ 85A6 42 59 45    >                db      "BYE"
 831+ 85A9             >len_NFA         defl    $ - temp_NFA
 831+ 85A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 85A6             >
 831+ 85A6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 85A7 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 85AA             >                org     $-1                 // alter last byte of Name just above to set
 831+ 85A9 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 85AA             >
 831+ 85AA 85 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 85AC             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 85AC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 85AE             >                else
 831+ 85AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 85AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 85AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 85AE             >
 831+ 85AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 85AE E7 7D                        dw      FLUSH
 833+ 85B0 1A 7D                        dw      EMPTY_BUFFERS
 834+ 85B2 BE 7B 9B 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85B6 CB 67 D3 6A
 835+ 85BA 03 6D 69 6D                  dw      ZERO, PLUS_ORIGIN
 836+ 85BE 6F 79                        dw      BASIC
 837+ 85C0
 838+ 85C0              //  ______________________________________________________________________
 839+ 85C0              //
 840+ 85C0              // invv     --
 841+ 85C0              //
 842+ 85C0              //              Colon_Def INVV, "INVV", is_normal
 843+ 85C0              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85C0              //              dw      EXIT
 845+ 85C0
 846+ 85C0              //  ______________________________________________________________________
 847+ 85C0              //
 848+ 85C0              // truv     --
 849+ 85C0              //
 850+ 85C0              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85C0              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85C0              //              dw      EXIT
 853+ 85C0
 854+ 85C0              //  ______________________________________________________________________
 855+ 85C0              //
 856+ 85C0              // mark     --
 857+ 85C0              //
 858+ 85C0              //              Colon_Def MARK, "MARK", is_normal
 859+ 85C0              //              dw      INVV, TYPE, TRUV
 860+ 85C0              //              dw      EXIT
 861+ 85C0
 862+ 85C0              //  ______________________________________________________________________
 863+ 85C0              //
 864+ 85C0              // back     --
 865+ 85C0              //
 866+ 85C0                              Colon_Def BACK, "BACK", is_normal
 866+ 85C0             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85C0             >
 866+ 85C0             >                // dummy db directives used to calculate length of namec
 866+ 85C0 42 41 43 4B >                db      "BACK"
 866+ 85C4             >len_NFA         defl    $ - temp_NFA
 866+ 85C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85C0             >
 866+ 85C0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85C1 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85C5             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85C4 CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85C5             >
 866+ 85C5 A6 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85C7             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85C7 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85C9             >                else
 866+ 85C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 866+ 85C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85C9             >
 866+ 85C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85C9 E2 6E 35 6F                  dw      HERE, SUBTRACT, COMMA
 867+ 85CD FE 6E
 868+ 85CF A3 69                        dw      EXIT
 869+ 85D1
 870+ 85D1              //  ______________________________________________________________________
 871+ 85D1              //
 872+ 85D1              // if          ( -- a 2 ) \ compile-time
 873+ 85D1              // IF ... THEN
 874+ 85D1              // IF ... ELSE ... ENDIF
 875+ 85D1                              Colon_Def IF, "IF", is_immediate
 875+ 85D1             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85D1             >
 875+ 85D1             >                // dummy db directives used to calculate length of namec
 875+ 85D1 49 46       >                db      "IF"
 875+ 85D3             >len_NFA         defl    $ - temp_NFA
 875+ 85D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85D1             >
 875+ 85D1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85D2 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85D4             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85D3 C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85D4             >
 875+ 85D4 C0 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85D6             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85D6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85D8             >                else
 875+ 85D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 85D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85D8             >
 875+ 85D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85D8 3A 71 2C 64                  dw      COMPILE, ZBRANCH
 877+ 85DC E2 6E 03 6D                  dw      HERE, ZERO, COMMA
 877+ 85E0 FE 6E
 878+ 85E2 13 6D                        dw      TWO
 879+ 85E4 A3 69                        dw      EXIT
 880+ 85E6
 881+ 85E6              //  ______________________________________________________________________
 882+ 85E6              //
 883+ 85E6              // then        ( a 2 -- ) \ compile-time
 884+ 85E6              //
 885+ 85E6                              Colon_Def THEN, "THEN", is_immediate
 885+ 85E6             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85E6             >
 885+ 85E6             >                // dummy db directives used to calculate length of namec
 885+ 85E6 54 48 45 4E >                db      "THEN"
 885+ 85EA             >len_NFA         defl    $ - temp_NFA
 885+ 85EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85E6             >
 885+ 85E6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85E7 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85EB             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85EA CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85EB             >
 885+ 85EB D1 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85ED             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85ED 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85EF             >                else
 885+ 85EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 885+ 85EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85EF             >
 885+ 85EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85EF C1 70                        dw      QCOMP
 887+ 85F1 13 6D F0 70                  dw      TWO, QPAIRS
 888+ 85F5 E2 6E C3 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85F9 35 6F FB 6A
 888+ 85FD A8 6B
 889+ 85FF A3 69                        dw      EXIT
 890+ 8601
 891+ 8601              //  ______________________________________________________________________
 892+ 8601              //
 893+ 8601              // endif       ( a 2 -- ) \ compile-time
 894+ 8601              //
 895+ 8601                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 8601             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 8601             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 8601             >
 895+ 8601             >                // dummy db directives used to calculate length of namec
 895+ 8601 45 4E 44 49 >                db      "ENDIF"
 895+ 8605 46          >
 895+ 8606             >len_NFA         defl    $ - temp_NFA
 895+ 8606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 8601             >
 895+ 8601 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 8602 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 8606 46          >
 895+ 8607             >                org     $-1                 // alter last byte of Name just above to set
 895+ 8606 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 8607             >
 895+ 8607 E6 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 8609             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 8609 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 860B             >                else
 895+ 860B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 895+ 860B             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 860B             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 860B             >
 895+ 860B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 860B ED 85                        dw      THEN
 897+ 860D A3 69                        dw      EXIT
 898+ 860F
 899+ 860F              //  ______________________________________________________________________
 900+ 860F              //
 901+ 860F              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 860F              //
 903+ 860F                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 860F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 860F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 860F             >
 903+ 860F             >                // dummy db directives used to calculate length of namec
 903+ 860F 45 4C 53 45 >                db      "ELSE"
 903+ 8613             >len_NFA         defl    $ - temp_NFA
 903+ 8613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 860F             >
 903+ 860F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 8610 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8614             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8613 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8614             >
 903+ 8614 01 86       >                dw      last_NFA            // Link to previous definition Name
 903+ 8616             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8616 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8618             >                else
 903+ 8618 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 8618             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8618             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8618             >
 903+ 8618             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8618 C1 70                        dw      QCOMP
 905+ 861A 13 6D F0 70                  dw      TWO, QPAIRS
 906+ 861E 3A 71 15 64                  dw      COMPILE, BRANCH
 907+ 8622 E2 6E 03 6D                  dw      HERE, ZERO, COMMA
 907+ 8626 FE 6E
 908+ 8628 FB 6A 13 6D                  dw      SWAP, TWO, THEN
 908+ 862C ED 85
 909+ 862E 13 6D                        dw      TWO
 910+ 8630 A3 69                        dw      EXIT
 911+ 8632
 912+ 8632              //  ______________________________________________________________________
 913+ 8632              //
 914+ 8632              // begin        ( -- a 1 ) \ compile-time
 915+ 8632              // BEGIN ... AGAIN
 916+ 8632              // BEGIN ... f UNTIL
 917+ 8632              // BEGIN ... f WHILE ... REPEAT
 918+ 8632                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8632             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8632             >
 918+ 8632             >                // dummy db directives used to calculate length of namec
 918+ 8632 42 45 47 49 >                db      "BEGIN"
 918+ 8636 4E          >
 918+ 8637             >len_NFA         defl    $ - temp_NFA
 918+ 8637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8632             >
 918+ 8632 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8633 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8637 4E          >
 918+ 8638             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8637 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8638             >
 918+ 8638 0F 86       >                dw      last_NFA            // Link to previous definition Name
 918+ 863A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 863A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 863C             >                else
 918+ 863C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 863C             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 863C             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 863C             >
 918+ 863C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 863C C1 70                        dw      QCOMP
 920+ 863E E2 6E                        dw      HERE
 921+ 8640 13 6D                        dw      TWO
 922+ 8642 A3 69                        dw      EXIT
 923+ 8644
 924+ 8644              //  ______________________________________________________________________
 925+ 8644              //
 926+ 8644              // again        ( a 1 -- ) \ compile-time
 927+ 8644                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8644             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8644             >
 927+ 8644             >                // dummy db directives used to calculate length of namec
 927+ 8644 41 47 41 49 >                db      "AGAIN"
 927+ 8648 4E          >
 927+ 8649             >len_NFA         defl    $ - temp_NFA
 927+ 8649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8644             >
 927+ 8644 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8645 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 8649 4E          >
 927+ 864A             >                org     $-1                 // alter last byte of Name just above to set
 927+ 8649 CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 864A             >
 927+ 864A 32 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 864C             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 864C 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 864E             >                else
 927+ 864E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 864E             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 864E             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 864E             >
 927+ 864E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 864E C1 70                        dw      QCOMP
 929+ 8650 13 6D F0 70                  dw      TWO, QPAIRS
 930+ 8654 3A 71 15 64                  dw      COMPILE, BRANCH
 931+ 8658 C7 85                        dw      BACK
 932+ 865A A3 69                        dw      EXIT
 933+ 865C
 934+ 865C              //  ______________________________________________________________________
 935+ 865C              //
 936+ 865C              // until        ( a 1 -- ) \ compile-time
 937+ 865C                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 865C             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 865C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 865C             >
 937+ 865C             >                // dummy db directives used to calculate length of namec
 937+ 865C 55 4E 54 49 >                db      "UNTIL"
 937+ 8660 4C          >
 937+ 8661             >len_NFA         defl    $ - temp_NFA
 937+ 8661             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 865C             >
 937+ 865C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 865D 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8661 4C          >
 937+ 8662             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8661 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8662             >
 937+ 8662 44 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8664             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8664 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8666             >                else
 937+ 8666 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 937+ 8666             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8666             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8666             >
 937+ 8666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8666 C1 70                        dw      QCOMP
 939+ 8668 13 6D F0 70                  dw      TWO, QPAIRS
 940+ 866C 3A 71 2C 64                  dw      COMPILE, ZBRANCH
 941+ 8670 C7 85                        dw      BACK
 942+ 8672 A3 69                        dw      EXIT
 943+ 8674
 944+ 8674              //  ______________________________________________________________________
 945+ 8674              //
 946+ 8674              // end          ( a 1 -- ) \ compile-time
 947+ 8674                              Colon_Def END, "END", is_immediate
 947+ 8674             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8674             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8674             >
 947+ 8674             >                // dummy db directives used to calculate length of namec
 947+ 8674 45 4E 44    >                db      "END"
 947+ 8677             >len_NFA         defl    $ - temp_NFA
 947+ 8677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8674             >
 947+ 8674 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8675 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 8678             >                org     $-1                 // alter last byte of Name just above to set
 947+ 8677 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 8678             >
 947+ 8678 5C 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 867A             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 867A 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 867C             >                else
 947+ 867C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 867C             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 867C             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 867C             >
 947+ 867C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 867C 64 86                        dw      UNTIL
 949+ 867E A3 69                        dw      EXIT
 950+ 8680
 951+ 8680              //  ______________________________________________________________________
 952+ 8680              //
 953+ 8680              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 8680                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 8680             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 8680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 8680             >
 954+ 8680             >                // dummy db directives used to calculate length of namec
 954+ 8680 57 48 49 4C >                db      "WHILE"
 954+ 8684 45          >
 954+ 8685             >len_NFA         defl    $ - temp_NFA
 954+ 8685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 8680             >
 954+ 8680 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8681 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8685 45          >
 954+ 8686             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8685 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 8686             >
 954+ 8686 74 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 8688             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 8688 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 868A             >                else
 954+ 868A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 954+ 868A             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 868A             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 868A             >
 954+ 868A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 868A D6 85                        dw      IF
 956+ 868C              //              dw      TWO_PLUS // ( that is 4 )
 957+ 868C 57 6B                        dw      TWO_SWAP
 958+ 868E A3 69                        dw      EXIT
 959+ 8690
 960+ 8690              //  ______________________________________________________________________
 961+ 8690              //
 962+ 8690              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 8690                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 8690             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 8690             >
 963+ 8690             >                // dummy db directives used to calculate length of namec
 963+ 8690 52 45 50 45 >                db      "REPEAT"
 963+ 8694 41 54       >
 963+ 8696             >len_NFA         defl    $ - temp_NFA
 963+ 8696             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 8690             >
 963+ 8690 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 8691 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 8695 41 54       >
 963+ 8697             >                org     $-1                 // alter last byte of Name just above to set
 963+ 8696 D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 8697             >
 963+ 8697 80 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 8699             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 8699 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 869B             >                else
 963+ 869B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 963+ 869B             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 869B             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 869B             >
 963+ 869B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 869B 4C 86                        dw      AGAIN
 965+ 869D              //              dw      TWO_MINUS
 966+ 869D ED 85                        dw      THEN
 967+ 869F A3 69                        dw      EXIT
 968+ 86A1
 969+ 86A1              //  ______________________________________________________________________
 970+ 86A1              //
 971+ 86A1              // ?do-
 972+ 86A1              // special version of "BACK" used by ?DO and LOOP
 973+ 86A1                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 86A1             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 86A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 86A1             >
 973+ 86A1             >                // dummy db directives used to calculate length of namec
 973+ 86A1 3F 44 4F 2D >                db      "?DO-"
 973+ 86A5             >len_NFA         defl    $ - temp_NFA
 973+ 86A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 86A1             >
 973+ 86A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 86A2 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 86A6             >                org     $-1                 // alter last byte of Name just above to set
 973+ 86A5 AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 86A6             >
 973+ 86A6 90 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 86A8             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 86A8 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 86AA             >                else
 973+ 86AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 86AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 86AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 86AA             >
 973+ 86AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 86AA C7 85                        dw      BACK
 975+ 86AC              CDoBack_Begin:
 976+ 86AC 6B 69 73 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 86B0 9B 6B 35 6F
 977+ 86B4 2C 64                        dw      ZBRANCH
 978+ 86B6 0A 00                        dw      CDoBack_While - $
 979+ 86B8 61 6A ED 85                  dw          TWO_PLUS, THEN
 980+ 86BC 15 64                        dw      BRANCH
 981+ 86BE EE FF                        dw      CDoBack_Begin - $
 982+ 86C0              CDoBack_While:
 983+ 86C0 03 71 73 6E                  dw      QCSP, CSP, STORE
 983+ 86C4 A8 6B
 984+ 86C6 A3 69                        dw      EXIT
 985+ 86C8
 986+ 86C8              //  ______________________________________________________________________
 987+ 86C8              //
 988+ 86C8              // do
 989+ 86C8              // DO  ... LOOP
 990+ 86C8              // DO  ... n +LOOP
 991+ 86C8              // ?DO ... LOOP
 992+ 86C8              // ?DO ... n +LOOP
 993+ 86C8                              Colon_Def DO, "DO", is_immediate
 993+ 86C8             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86C8             >
 993+ 86C8             >                // dummy db directives used to calculate length of namec
 993+ 86C8 44 4F       >                db      "DO"
 993+ 86CA             >len_NFA         defl    $ - temp_NFA
 993+ 86CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86C8             >
 993+ 86C8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86C9 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86CB             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86CA CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86CB             >
 993+ 86CB A1 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86CD             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86CD 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86CF             >                else
 993+ 86CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 86CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86CF             >
 993+ 86CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86CF 3A 71 86 64                  dw      COMPILE, C_DO
 995+ 86D3 73 6E 9B 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86D7 94 70
 996+ 86D9 E2 6E 1B 6D                  dw      HERE, THREE
 997+ 86DD A3 69                        dw      EXIT
 998+ 86DF
 999+ 86DF              //  ______________________________________________________________________
1000+ 86DF              //
1001+ 86DF              // loop
1002+ 86DF                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86DF             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86DF             >
1002+ 86DF             >                // dummy db directives used to calculate length of namec
1002+ 86DF 4C 4F 4F 50 >                db      "LOOP"
1002+ 86E3             >len_NFA         defl    $ - temp_NFA
1002+ 86E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86DF             >
1002+ 86DF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86E0 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86E4             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86E3 D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86E4             >
1002+ 86E4 C8 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86E6             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86E6 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86E8             >                else
1002+ 86E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 86E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86E8             >
1002+ 86E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86E8 1B 6D F0 70                  dw      THREE, QPAIRS
1004+ 86EC 3A 71 04 64                  dw      COMPILE, C_LOOP
1005+ 86F0 A8 86                        dw      C_DO_BACK
1006+ 86F2 A3 69                        dw      EXIT
1007+ 86F4
1008+ 86F4              //  ______________________________________________________________________
1009+ 86F4              //
1010+ 86F4              // +loop
1011+ 86F4                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86F4             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86F4             >
1011+ 86F4             >                // dummy db directives used to calculate length of namec
1011+ 86F4 2B 4C 4F 4F >                db      "+LOOP"
1011+ 86F8 50          >
1011+ 86F9             >len_NFA         defl    $ - temp_NFA
1011+ 86F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86F4             >
1011+ 86F4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86F5 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 86F9 50          >
1011+ 86FA             >                org     $-1                 // alter last byte of Name just above to set
1011+ 86F9 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 86FA             >
1011+ 86FA DF 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 86FC             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 86FC 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 86FE             >                else
1011+ 86FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1011+ 86FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 86FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 86FE             >
1011+ 86FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 86FE 1B 6D F0 70                  dw      THREE, QPAIRS
1013+ 8702 3A 71 CD 63                  dw      COMPILE, C_PLOOP
1014+ 8706 A8 86                        dw      C_DO_BACK
1015+ 8708 A3 69                        dw      EXIT
1016+ 870A
1017+ 870A              //  ______________________________________________________________________
1018+ 870A              //
1019+ 870A              // ?do
1020+ 870A                              Colon_Def QDO, "?DO", is_immediate
1020+ 870A             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 870A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 870A             >
1020+ 870A             >                // dummy db directives used to calculate length of namec
1020+ 870A 3F 44 4F    >                db      "?DO"
1020+ 870D             >len_NFA         defl    $ - temp_NFA
1020+ 870D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 870A             >
1020+ 870A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 870B 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 870E             >                org     $-1                 // alter last byte of Name just above to set
1020+ 870D CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 870E             >
1020+ 870E F4 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 8710             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 8710 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 8712             >                else
1020+ 8712 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 8712             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 8712             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 8712             >
1020+ 8712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 8712 3A 71 59 64                  dw      COMPILE, C_Q_DO
1022+ 8716 73 6E 9B 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 871A 94 70
1023+ 871C E2 6E 03 6D                  dw      HERE, ZERO, COMMA, ZERO
1023+ 8720 FE 6E 03 6D
1024+ 8724 E2 6E 1B 6D                  dw      HERE, THREE
1025+ 8728 A3 69                        dw      EXIT
1026+ 872A
1027+ 872A              Latest_Definition:
1028+ 872A              //  ______________________________________________________________________
1029+ 872A              //
1030+ 872A              // \
1031+ 872A                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 872A             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 872A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 872A             >
1031+ 872A             >                // dummy db directives used to calculate length of namec
1031+ 872A 5C          >                db      "\\"
1031+ 872B             >len_NFA         defl    $ - temp_NFA
1031+ 872B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 872A             >
1031+ 872A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 872B 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 872C             >                org     $-1                 // alter last byte of Name just above to set
1031+ 872B DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 872C             >
1031+ 872C 0A 87       >                dw      last_NFA            // Link to previous definition Name
1031+ 872E             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 872E 86 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 8730             >                else
1031+ 8730 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1031+ 8730             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 8730             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 8730             >
1031+ 8730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 8730 02 6E 9B 6B                  dw      BLK, FETCH
1033+ 8734 2C 64                        dw      ZBRANCH
1034+ 8736 30 00                        dw      Backslash_Else_1 - $
1035+ 8738 02 6E 9B 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 873C 0B 6D 7B 6F
1036+ 8740 2C 64                        dw          ZBRANCH
1037+ 8742 18 00                        dw          Backslash_Else_2 - $
1038+ 8744 0B 6E 9B 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8748 37 6D 90 7A
1038+ 874C 37 6D
1039+ 874E FB 6A 35 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 8752 0B 6E 78 6B
1040+ 8756 15 64                        dw          BRANCH
1041+ 8758 0A 00                        dw          Backslash_Endif_2 - $
1042+ 875A              Backslash_Else_2:
1043+ 875A 43 6D 7B 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 875E 0B 6E A8 6B
1044+ 8762              Backslash_Endif_2:
1045+ 8762 15 64                        dw      BRANCH
1046+ 8764 0A 00                        dw      Backslash_Endif_1 - $
1047+ 8766              Backslash_Else_1:
1048+ 8766 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1048+ 876A 0B 6E A8 6B
1049+ 876E              Backslash_Endif_1:
1050+ 876E A3 69                        dw      EXIT
1051+ 8770
1052+ 8770              Fence_Word:
1053+ 8770              //  ______________________________________________________________________
1054+ 8770              //
1055+ 8770
1056+ 8770 00           Here_Dictionary db      0
1057+ 8771
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8771
 115  8771              // now we save the compiled file so we can either run it or debug it
 116  8771                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8771                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8771                              SAVENEX CFG  0
 119  8771                              SAVENEX BANK 2, 0
 120  8771                              SAVENEX AUTO
 121  8771                              SAVENEX CLOSE
 122  8771
 123  8771              //              PAGE 7 ;set 7 page to current slot
 124  8771              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8771              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8771
 127  8771                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8771
 129  8771                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8771
 131  8771                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
