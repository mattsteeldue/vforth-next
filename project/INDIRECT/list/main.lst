# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220425
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 55 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 55 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 36 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 7C 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 7C 87        DP_origin       dw      Fence_Word
  39+ 6386 63 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- addr 0 | cfa b 1
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 01 00                             ld      hl, 1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // key          -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def KEY, "KEY", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 4B 45 59    >                db      "KEY"
 778+ 66B5             >len_NFA         defl    $ - temp_NFA
 778+ 66B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 778+ 66B6             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B5 D9          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B6             >
 778+ 66B6 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B8             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B8             >                else
 778+ 66B8 BA 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BA             >
 778+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BA
 780+ 66BA C5                           push    bc                  // save Instruction Pointer
 781+ 66BB DD E5                        push    ix
 782+ 66BD
 783+ 66BD ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C8
 787+ 66C8              Key_Wait:
 788+ 66C8 76                               halt
 789+ 66C9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CE
 792+ 66CE                                  // software-flash: flips face every 320 ms
 793+ 66CE 3E 10                            ld      a, $10              // Timing based
 794+ 66D0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D3
 796+ 66D3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D6 20 0C                            jr      nz, Key_Cursor
 798+ 66D8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66DF 28 03                                jr      z, Key_Cursor
 801+ 66E1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E4              Key_Cursor:
 803+ 66E4 D7                               rst     $10
 804+ 66E5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E7 D7                               rst     $10
 806+ 66E8
 807+ 66E8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66EC 28 DA                        jr      z, Key_Wait
 809+ 66EE
 810+ 66EE 76                           halt    // this is to sync flashing cursor.
 811+ 66EF
 812+ 66EF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F1 D7                           rst     $10
 814+ 66F2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F4 D7                           rst     $10
 816+ 66F5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 817+ 66F8
 818+ 66F8                              // decode character from above table
 819+ 66F8 21 9C 66                     ld      hl, Key_Table
 820+ 66FB 01 0B 00                     ld      bc, $000B
 821+ 66FE ED B1                        cpir
 822+ 6700 20 05                        jr      nz, Key_DontMap
 823+ 6702 21 A7 66                         ld      hl, Key_MapTo
 824+ 6705 09                               add     hl, bc
 825+ 6706 7E                               ld      a, (hl)
 826+ 6707 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 827+ 6709 20 09                        jr      nz, Key_NoCapsLock
 828+ 670B 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 829+ 670E 7E                               ld      a, (hl)
 830+ 670F EE 08                            xor     $08
 831+ 6711 77                               ld      (hl), a
 832+ 6712 3E 00                            ld      a, NUL_CHAR
 833+ 6714 6F           Key_NoCapsLock: ld      l, a
 834+ 6715 26 00                        ld      h, 0                // Prepare TOS
 835+ 6717
 836+ 6717 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 837+ 671A 1F                           rra
 838+ 671B 1F                           rra
 839+ 671C 1F                           rra
 840+ 671D F6 18                        or      $18                 // quick'n'dirty click
 841+ 671F D3 FE                        out     ($fe), a
 842+ 6721 06 00                        ld      b, 0
 843+ 6723 10 FE                        djnz    $                   // wait loop
 844+ 6725 EE 18                        xor     $18
 845+ 6727 D3 FE                        out     ($fe), a
 846+ 6729
 847+ 6729 ED 7B 92 63                  ld      sp, (SP_Saved)
 848+ 672D
 849+ 672D DD E1                        pop     ix
 850+ 672F C1                           pop     bc                  // Restore Instruction Pointer
 851+ 6730
 852+ 6730                              psh1
 852+ 6730 E5          >                push    hl
 852+ 6731 DD E9       >                jp      (ix)
 853+ 6733
 854+ 6733              //  ______________________________________________________________________
 855+ 6733              //
 856+ 6733              // ?terminal    -- FALSE | TRUE
 857+ 6733              // test for BREAK keypress
 858+ 6733                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 858+ 6733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 6733             >
 858+ 6733             >                // dummy db directives used to calculate length of namec
 858+ 6733 3F 54 45 52 >                db      "?TERMINAL"
 858+ 6737 4D 49 4E 41 >
 858+ 673B 4C          >
 858+ 673C             >len_NFA         defl    $ - temp_NFA
 858+ 673C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 6733             >
 858+ 6733 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 6734 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 858+ 6738 4D 49 4E 41 >
 858+ 673C 4C          >
 858+ 673D             >                org     $-1                 // alter last byte of Name just above to set
 858+ 673C CC          >                db      {b $} | END_BIT     // msb as name end
 858+ 673D             >
 858+ 673D B2 66       >                dw      last_NFA            // Link to previous definition Name
 858+ 673F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 673F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 858+ 673F             >                else
 858+ 673F 41 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 6741             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6741             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6741             >
 858+ 6741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6741 21 00 00                     ld      hl, 0
 860+ 6744 ED 73 92 63                  ld      (SP_Saved), sp
 861+ 6748 31 61 63                     ld      sp, Cold_origin - 5
 862+ 674B CD 54 1F                     call    $1F54
 863+ 674E ED 7B 92 63                  ld      sp, (SP_Saved)
 864+ 6752
 865+ 6752 38 01                        jr      c, QTerminal_NoBreak
 866+ 6754 2B                               dec     hl                  // quick TRUE_FLAG
 867+ 6755              QTerminal_NoBreak:
 868+ 6755
 869+ 6755                              psh1
 869+ 6755 E5          >                push    hl
 869+ 6756 DD E9       >                jp      (ix)
 870+ 6758
 871+ 6758
 872+ 6758              //  ______________________________________________________________________
 873+ 6758              //
 874+ 6758              // inkey        -- c | 0
 875+ 6758              // call ROM inkey$ routine, returns c or "zero".
 876+ 6758
 877+ 6758                              New_Def INKEY, "INKEY", is_code, is_normal
 877+ 6758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 6758             >
 877+ 6758             >                // dummy db directives used to calculate length of namec
 877+ 6758 49 4E 4B 45 >                db      "INKEY"
 877+ 675C 59          >
 877+ 675D             >len_NFA         defl    $ - temp_NFA
 877+ 675D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 6758             >
 877+ 6758 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 6759 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 877+ 675D 59          >
 877+ 675E             >                org     $-1                 // alter last byte of Name just above to set
 877+ 675D D9          >                db      {b $} | END_BIT     // msb as name end
 877+ 675E             >
 877+ 675E 33 67       >                dw      last_NFA            // Link to previous definition Name
 877+ 6760             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 6760 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 6760             >                else
 877+ 6760 62 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 6762             >
 877+ 6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 6762
 879+ 6762 C5                           push    bc
 880+ 6763 ED 73 92 63                  ld      (SP_Saved), sp
 881+ 6767 31 61 63                     ld      sp, Cold_origin - 5
 882+ 676A DD E5                        push    ix
 883+ 676C CD E6 15                     call    $15E6                   // instead of 15E9
 884+ 676F DD E1                        pop     ix
 885+ 6771 ED 7B 92 63                  ld      sp, (SP_Saved)
 886+ 6775 6F                           ld      l, a
 887+ 6776 26 00                        ld      h, 0
 888+ 6778 C1                           pop     bc
 889+ 6779                              psh1
 889+ 6779 E5          >                push    hl
 889+ 677A DD E9       >                jp      (ix)
 890+ 677C
 891+ 677C              //  ______________________________________________________________________
 892+ 677C              //
 893+ 677C              // select      n --
 894+ 677C              // selects the given channel number
 895+ 677C
 896+ 677C                              New_Def SELECT, "SELECT", is_code, is_normal
 896+ 677C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ 677C             >
 896+ 677C             >                // dummy db directives used to calculate length of namec
 896+ 677C 53 45 4C 45 >                db      "SELECT"
 896+ 6780 43 54       >
 896+ 6782             >len_NFA         defl    $ - temp_NFA
 896+ 6782             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ 677C             >
 896+ 677C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ 677D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 896+ 6781 43 54       >
 896+ 6783             >                org     $-1                 // alter last byte of Name just above to set
 896+ 6782 D4          >                db      {b $} | END_BIT     // msb as name end
 896+ 6783             >
 896+ 6783 58 67       >                dw      last_NFA            // Link to previous definition Name
 896+ 6785             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 6785 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 896+ 6785             >                else
 896+ 6785 87 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 896+ 6787             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 6787             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 6787             >
 896+ 6787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 6787 E1                           pop     hl
 898+ 6788 C5                           push    bc
 899+ 6789 7D                           ld      a, l
 900+ 678A ED 73 92 63                  ld      (SP_Saved), sp
 901+ 678E 31 61 63                     ld      sp, Cold_origin - 5
 902+ 6791 DD E5                        push    ix
 903+ 6793 CD 01 16                     call    $1601
 904+ 6796 DD E1                        pop     ix
 905+ 6798 ED 7B 92 63                  ld      sp, (SP_Saved)
 906+ 679C C1                           pop     bc
 907+ 679D
 908+ 679D                              next
 908+ 679D DD E9       >                jp      (ix)
 909+ 679F
 910+ 679F              //  ______________________________________________________________________
 911+ 679F              //
 912+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 913+ 679F              // this include is "here" for backward compatibility
 914+ 679F
 915+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9              F_Seek_Exit:
  26++67B9 C1                           pop     bc                  // restore Instruction Pointer
  27++67BA DD E1                        pop     ix
  28++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67BE
  30++67BE                              psh1
  30++67BE E5          >                push    hl
  30++67BF DD E9       >                jp      (ix)
  31++67C1
  32++67C1              //  ______________________________________________________________________
  33++67C1              //
  34++67C1              // f_close      u -- f
  35++67C1              // Close file-handle u.
  36++67C1              // Return 0 on success, True flag on error
  37++67C1
  38++67C1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C1             >
  38++67C1             >                // dummy db directives used to calculate length of namec
  38++67C1 46 5F 43 4C >                db      "F_CLOSE"
  38++67C5 4F 53 45    >
  38++67C8             >len_NFA         defl    $ - temp_NFA
  38++67C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C1             >
  38++67C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C6 4F 53 45    >
  38++67C9             >                org     $-1                 // alter last byte of Name just above to set
  38++67C8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C9             >
  38++67C9 9F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CB             >                else
  38++67CB CD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67CD             >
  38++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67CD
  40++67CD E1                           pop     hl
  41++67CE 7D                           ld      a, l                // file-handle
  42++67CF DD E5                        push    ix
  43++67D1 C5                           push    bc                  // Save Instruction pointer
  44++67D2 CF                           rst     $08
  45++67D3 9B                           db      $9B
  46++67D4 18 E3                        jr      F_Seek_Exit
  47++67D6              //              pop     bc
  48++67D6              //              pop     ix
  49++67D6              //              sbc     hl, hl
  50++67D6              //              psh1
  51++67D6
  52++67D6              //  ______________________________________________________________________
  53++67D6              //
  54++67D6              // f_sync      u -- f
  55++67D6              // Close file-handle u.
  56++67D6              // Return 0 on success, True flag on error
  57++67D6
  58++67D6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D6             >
  58++67D6             >                // dummy db directives used to calculate length of namec
  58++67D6 46 5F 53 59 >                db      "F_SYNC"
  58++67DA 4E 43       >
  58++67DC             >len_NFA         defl    $ - temp_NFA
  58++67DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D6             >
  58++67D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DB 4E 43       >
  58++67DD             >                org     $-1                 // alter last byte of Name just above to set
  58++67DC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67DD             >
  58++67DD C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DF             >                else
  58++67DF E1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E1             >
  58++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E1 E1                           pop     hl
  60++67E2 7D                           ld      a, l                // file-handle
  61++67E3 DD E5                        push    ix
  62++67E5 C5                           push    bc
  63++67E6 CF                           rst     $08
  64++67E7 9C                           db      $9C
  65++67E8 18 CF                        jr      F_Seek_Exit
  66++67EA              //              pop     bc
  67++67EA              //              pop     ix
  68++67EA              //              sbc     hl, hl
  69++67EA              //              psh1
  70++67EA
  71++67EA              //  ______________________________________________________________________
  72++67EA              //
  73++67EA              // f_fgetpos    u -- d f
  74++67EA              // Seek to position d in file-handle u.
  75++67EA              // Return a false-flag 0 on success, True flag on error
  76++67EA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67EA             >
  76++67EA             >                // dummy db directives used to calculate length of namec
  76++67EA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67EE 45 54 50 4F >
  76++67F2 53          >
  76++67F3             >len_NFA         defl    $ - temp_NFA
  76++67F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67EA             >
  76++67EA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EF 45 54 50 4F >
  76++67F3 53          >
  76++67F4             >                org     $-1                 // alter last byte of Name just above to set
  76++67F3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F4             >
  76++67F4 D6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F6             >                else
  76++67F6 F8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F8             >
  76++67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F8 E1                           pop     hl
  78++67F9 7D                           ld      a, l                // file-handle
  79++67FA DD E5                        push    ix
  80++67FC C5                           push    bc
  81++67FD CF                           rst     $08
  82++67FE A0                           db      $A0
  83++67FF E1                           pop     hl                  // restore Instruction Pointer
  84++6800 DD E1                        pop     ix
  85++6802 D5                           push    de
  86++6803 C5                           push    bc
  87++6804 44                           ld      b, h                // restore Instruction Pointer
  88++6805 4D                           ld      c, l
  89++6806 ED 62                        sbc     hl, hl
  90++6808
  91++6808                              psh1
  91++6808 E5          >                push    hl
  91++6809 DD E9       >                jp      (ix)
  92++680B
  93++680B              //  ______________________________________________________________________
  94++680B              //
  95++680B              // f_read       a b u -- n f
  96++680B              // Read b bytes from file-handle u to address a
  97++680B              // Return the actual number n of bytes read
  98++680B              // Return 0 on success, True flag on error
  99++680B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680B             >
  99++680B             >                // dummy db directives used to calculate length of namec
  99++680B 46 5F 52 45 >                db      "F_READ"
  99++680F 41 44       >
  99++6811             >len_NFA         defl    $ - temp_NFA
  99++6811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680B             >
  99++680B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6810 41 44       >
  99++6812             >                org     $-1                 // alter last byte of Name just above to set
  99++6811 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6812             >
  99++6812 EA 67       >                dw      last_NFA            // Link to previous definition Name
  99++6814             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6814 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6814             >                else
  99++6814 16 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6816             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6816             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6816             >
  99++6816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6816
 101++6816 50                           ld      d, b
 102++6817 59                           ld      e, c
 103++6818 E1                           pop     hl
 104++6819 7D                           ld      a, l                // file-handle
 105++681A C1                           pop     bc                  // bc has bytes to read
 106++681B DD E3                        ex      (sp), ix            // ix has address
 107++681D D5                           push    de                  // Save Instruction pointer
 108++681E CF                           rst     $08
 109++681F 9D                           db      $9D
 110++6820              F_Read_Exit:
 111++6820 C1                           pop     bc                  // Restore Instruction pointer
 112++6821 DD E1                        pop     ix                  // Restore ix
 113++6823 D5                           push    de                  // bytes written
 114++6824 ED 62                        sbc     hl, hl
 115++6826
 116++6826                              psh1
 116++6826 E5          >                push    hl
 116++6827 DD E9       >                jp      (ix)
 117++6829
 118++6829              //  ______________________________________________________________________
 119++6829              //
 120++6829              // f_write      a b u -- n f
 121++6829              // Write bytes currently stored at address a to file-handle u.
 122++6829              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6829                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6829             >
 123++6829             >                // dummy db directives used to calculate length of namec
 123++6829 46 5F 57 52 >                db      "F_WRITE"
 123++682D 49 54 45    >
 123++6830             >len_NFA         defl    $ - temp_NFA
 123++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6829             >
 123++6829 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++682E 49 54 45    >
 123++6831             >                org     $-1                 // alter last byte of Name just above to set
 123++6830 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6831             >
 123++6831 0B 68       >                dw      last_NFA            // Link to previous definition Name
 123++6833             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6833             >                else
 123++6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6835             >
 123++6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6835
 125++6835 50                           ld      d, b
 126++6836 59                           ld      e, c
 127++6837 E1                           pop     hl
 128++6838 7D                           ld      a, l                // file-handle
 129++6839 C1                           pop     bc                  // bc has bytes to read
 130++683A DD E3                        ex      (sp), ix            // ix has address
 131++683C D5                           push    de                  // Save Instruction pointer
 132++683D CF                           rst     $08
 133++683E 9E                           db      $9E
 134++683F 18 DF                        jr F_Read_Exit
 135++6841              //              pop     bc                  // Restore Instruction pointer
 136++6841              //              pop     ix                  // Restore ix
 137++6841              //              push    de                  // bytes written
 138++6841              //              sbc     hl, hl
 139++6841              //
 140++6841              //              psh1
 141++6841
 142++6841              //  ______________________________________________________________________
 143++6841              //
 144++6841              // f_open       a1 a2 b -- u f
 145++6841              // open a file
 146++6841              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6841              // a2 is address to an 8-byte header data used in some cases.
 148++6841              // b is access mode-byte, that is a combination of:
 149++6841              // any/all of:
 150++6841              //   esx_mode_read          $01 request read access
 151++6841              //   esx_mode_write         $02 request write access
 152++6841              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6841              // plus one of:
 154++6841              //   esx_mode_open_exist    $00 only open existing file
 155++6841              //   esx_mode_open_creat    $08 open existing or create file
 156++6841              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6841              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6841              // Return file-handle u and 0 on success, True flag on error
 159++6841                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6841             >
 159++6841             >                // dummy db directives used to calculate length of namec
 159++6841 46 5F 4F 50 >                db      "F_OPEN"
 159++6845 45 4E       >
 159++6847             >len_NFA         defl    $ - temp_NFA
 159++6847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6841             >
 159++6841 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6842 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6846 45 4E       >
 159++6848             >                org     $-1                 // alter last byte of Name just above to set
 159++6847 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6848             >
 159++6848 29 68       >                dw      last_NFA            // Link to previous definition Name
 159++684A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684A             >                else
 159++684A 4C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684C             >
 159++684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684C 60                           ld      h, b                // Save Instruction pointer
 161++684D 69                           ld      l, c
 162++684E C1                           pop     bc                  // file-mode
 163++684F 41                           ld      b, c                // file-mode
 164++6850 D1                           pop     de                  // 8-bytes buffer if any
 165++6851 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6853 E5                           push    hl                  // Save Instruction pointer
 167++6854 3E 2A                        ld      a, "*"
 168++6856 CF                           rst     $08
 169++6857 9A                           db      $9A
 170++6858              F_Open_Exit:
 171++6858 C1                           pop     bc
 172++6859 DD E1                        pop     ix
 173++685B ED 62                        sbc     hl, hl
 174++685D 5F                           ld      e, a
 175++685E 16 00                        ld      d, 0
 176++6860
 177++6860
 178++6860                              psh2
 178++6860 D5          >                push    de
 178++6861 E5          >                push    hl
 178++6862 DD E9       >                jp      (ix)
 179++6864
 180++6864              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++6864              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++6864              //   \ DROP
 183++6864              //   \ F_CLOSE
 184++6864
 185++6864
 186++6864              //  ______________________________________________________________________
 187++6864              //
 188++6864              // f_opendir    a1 a2 b -- u f
 189++6864              // open a file
 190++6864                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++6864             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++6864             >
 190++6864             >                // dummy db directives used to calculate length of namec
 190++6864 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6868 45 4E 44 49 >
 190++686C 52          >
 190++686D             >len_NFA         defl    $ - temp_NFA
 190++686D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++6864             >
 190++6864 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6865 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6869 45 4E 44 49 >
 190++686D 52          >
 190++686E             >                org     $-1                 // alter last byte of Name just above to set
 190++686D D2          >                db      {b $} | END_BIT     // msb as name end
 190++686E             >
 190++686E 41 68       >                dw      last_NFA            // Link to previous definition Name
 190++6870             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6870 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++6870             >                else
 190++6870 72 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++6872             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6872             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6872             >
 190++6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6872 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++6874 C5                           push    bc                  // Save Instruction pointer
 193++6875 06 10                        ld      b, $10              // file-mode
 194++6877 3E 43                        ld      a, "C"
 195++6879 CF                           rst     $08
 196++687A A3                           db      $A3
 197++687B 18 DB                        jr      F_Open_Exit
 198++687D
 199++687D
 200++687D              //  ______________________________________________________________________
 201++687D              //
 202++687D              // f_readdir    a1 a2 b -- u f
 203++687D              // open a file
 204++687D                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++687D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++687D             >
 204++687D             >                // dummy db directives used to calculate length of namec
 204++687D 46 5F 52 45 >                db      "F_READDIR"
 204++6881 41 44 44 49 >
 204++6885 52          >
 204++6886             >len_NFA         defl    $ - temp_NFA
 204++6886             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++687D             >
 204++687D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++687E 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6882 41 44 44 49 >
 204++6886 52          >
 204++6887             >                org     $-1                 // alter last byte of Name just above to set
 204++6886 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6887             >
 204++6887 64 68       >                dw      last_NFA            // Link to previous definition Name
 204++6889             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6889 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++6889             >                else
 204++6889 8B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++688B             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++688B             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++688B             >
 204++688B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++688B E1                           pop     hl
 206++688C 7D                           ld      a, l
 207++688D D1                           pop     de
 208++688E DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6890 C5                           push    bc                  // Save Instruction pointer
 210++6891 CF                           rst     $08
 211++6892 A4                           db      $A4
 212++6893 18 C3                        jr      F_Open_Exit
 213++6895
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 916+ 6895
 917+ 6895
 918+ 6895              //  ______________________________________________________________________
 919+ 6895              //
 920+ 6895              // cmove    a1 a2 u --
 921+ 6895              // If u > 0, moves memory content starting at address a1 for n bytes long
 922+ 6895              // storing then starting at address addr2.
 923+ 6895              // The content of a1 is moved first. See CMOVE> also.
 924+ 6895                              New_Def CMOVE, "CMOVE", is_code, is_normal
 924+ 6895             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ 6895             >
 924+ 6895             >                // dummy db directives used to calculate length of namec
 924+ 6895 43 4D 4F 56 >                db      "CMOVE"
 924+ 6899 45          >
 924+ 689A             >len_NFA         defl    $ - temp_NFA
 924+ 689A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ 6895             >
 924+ 6895 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ 6896 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 924+ 689A 45          >
 924+ 689B             >                org     $-1                 // alter last byte of Name just above to set
 924+ 689A C5          >                db      {b $} | END_BIT     // msb as name end
 924+ 689B             >
 924+ 689B 7D 68       >                dw      last_NFA            // Link to previous definition Name
 924+ 689D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 689D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 924+ 689D             >                else
 924+ 689D 9F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 924+ 689F             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 689F             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 689F             >
 924+ 689F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 689F D9                           exx
 926+ 68A0 C1                           pop     bc                  // bc has counter
 927+ 68A1 D1                           pop     de                  // de now has dest
 928+ 68A2 E1                           pop     hl                  // hl has source, save Instruction Pointer
 929+ 68A3 78                           ld      a, b
 930+ 68A4 B1                           or      c
 931+ 68A5 28 02                        jr      z, Cmove_NoMove
 932+ 68A7 ED B0                            ldir
 933+ 68A9              Cmove_NoMove:
 934+ 68A9 D9                           exx
 935+ 68AA                              next
 935+ 68AA DD E9       >                jp      (ix)
 936+ 68AC
 937+ 68AC              //  ______________________________________________________________________
 938+ 68AC              //
 939+ 68AC              // cmove>    a1 a2 u --
 940+ 68AC              // If u > 0, moves memory content starting at address a1 for n bytes long
 941+ 68AC              // storing then starting at address addr2.
 942+ 68AC              // The content of a1 is moved last. See cmove.
 943+ 68AC                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 943+ 68AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 68AC             >
 943+ 68AC             >                // dummy db directives used to calculate length of namec
 943+ 68AC 43 4D 4F 56 >                db      "CMOVE>"
 943+ 68B0 45 3E       >
 943+ 68B2             >len_NFA         defl    $ - temp_NFA
 943+ 68B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 68AC             >
 943+ 68AC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 68AD 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 943+ 68B1 45 3E       >
 943+ 68B3             >                org     $-1                 // alter last byte of Name just above to set
 943+ 68B2 BE          >                db      {b $} | END_BIT     // msb as name end
 943+ 68B3             >
 943+ 68B3 95 68       >                dw      last_NFA            // Link to previous definition Name
 943+ 68B5             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 68B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 943+ 68B5             >                else
 943+ 68B5 B7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 943+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 68B7             >
 943+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 68B7 D9                           exx
 945+ 68B8 C1                           pop     bc                  // bc has counter
 946+ 68B9 D1                           pop     de                  // de has dest
 947+ 68BA E1                           pop     hl                  // hl has source, save Instruction Pointer
 948+ 68BB 78                           ld      a, b
 949+ 68BC B1                           or      c
 950+ 68BD 28 08                        jr      z, CmoveV_NoMove
 951+ 68BF EB                               ex      de, hl              // compute address to
 952+ 68C0 09                               add     hl, bc              // operate backward
 953+ 68C1 2B                               dec     hl
 954+ 68C2 EB                               ex      de, hl
 955+ 68C3 09                               add     hl, bc
 956+ 68C4 2B                               dec     hl
 957+ 68C5 ED B8                            lddr                        // backward
 958+ 68C7              CmoveV_NoMove:
 959+ 68C7 D9                           exx
 960+ 68C8                              next
 960+ 68C8 DD E9       >                jp      (ix)
 961+ 68CA
 962+ 68CA              //  ______________________________________________________________________
 963+ 68CA              //
 964+ 68CA              // um*      u1 u2 -- ud
 965+ 68CA              // Unsigned multiplication
 966+ 68CA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 967+ 68CA              // On the stack a double number is treated as two single numbers
 968+ 68CA              // where DE is on the top of the stack and HL is the second from top,
 969+ 68CA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 970+ 68CA              // this definition could use "MUL" Z80N new op-code.
 971+ 68CA                              New_Def UM_MUL, "UM*", is_code, is_normal
 971+ 68CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 971+ 68CA             >
 971+ 68CA             >                // dummy db directives used to calculate length of namec
 971+ 68CA 55 4D 2A    >                db      "UM*"
 971+ 68CD             >len_NFA         defl    $ - temp_NFA
 971+ 68CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 971+ 68CA             >
 971+ 68CA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 971+ 68CB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 971+ 68CE             >                org     $-1                 // alter last byte of Name just above to set
 971+ 68CD AA          >                db      {b $} | END_BIT     // msb as name end
 971+ 68CE             >
 971+ 68CE AC 68       >                dw      last_NFA            // Link to previous definition Name
 971+ 68D0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 971+ 68D0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 971+ 68D0             >                else
 971+ 68D0 D2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 971+ 68D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 971+ 68D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 971+ 68D2             >
 971+ 68D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 972+ 68D2 D9                           exx
 973+ 68D3 D1                           pop     de                    // de has u2 operand
 974+ 68D4 E1                           pop     hl                    // hl has u1 operand
 975+ 68D5 45                           ld      b, l
 976+ 68D6 4B                           ld      c, e
 977+ 68D7 5D                           ld      e, l
 978+ 68D8 6A                           ld      l, d
 979+ 68D9 E5                           push    hl
 980+ 68DA 69                           ld      l, c
 981+ 68DB ED 30                        mul
 982+ 68DD EB                           ex      de, hl
 983+ 68DE ED 30                        mul
 984+ 68E0 AF                           xor     a
 985+ 68E1 19                           add     hl, de
 986+ 68E2 8F                           adc     a
 987+ 68E3 59                           ld      e, c
 988+ 68E4 50                           ld      d, b
 989+ 68E5 ED 30                        mul
 990+ 68E7 47                           ld      b, a
 991+ 68E8 4C                           ld      c, h
 992+ 68E9 7A                           ld      a, d
 993+ 68EA 85                           add     l
 994+ 68EB 67                           ld      h, a
 995+ 68EC 6B                           ld      l, e
 996+ 68ED D1                           pop     de
 997+ 68EE ED 30                        mul
 998+ 68F0 EB                           ex      de, hl
 999+ 68F1 ED 4A                        adc     hl, bc
1000+ 68F3 D5                           push    de
1001+ 68F4 E5                           push    hl
1002+ 68F5 D9                           exx
1003+ 68F6                              next
1003+ 68F6 DD E9       >                jp      (ix)
1004+ 68F8
1005+ 68F8              //  ______________________________________________________________________
1006+ 68F8              //
1007+ 68F8              // um/mod      ud u1 -- q r
1008+ 68F8              // divides ud into u1 giving quotient q and remainder r
1009+ 68F8              // algorithm takes 16 bit at a time starting from msb
1010+ 68F8              // DE grows from lsb upward with quotient result
1011+ 68F8              // HL keeps the remainder at each stage of division
1012+ 68F8              // each loop 'lowers' the next binary digit to form the current dividend
1013+ 68F8                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1013+ 68F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ 68F8             >
1013+ 68F8             >                // dummy db directives used to calculate length of namec
1013+ 68F8 55 4D 2F 4D >                db      "UM/MOD"
1013+ 68FC 4F 44       >
1013+ 68FE             >len_NFA         defl    $ - temp_NFA
1013+ 68FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ 68F8             >
1013+ 68F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ 68F9 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1013+ 68FD 4F 44       >
1013+ 68FF             >                org     $-1                 // alter last byte of Name just above to set
1013+ 68FE C4          >                db      {b $} | END_BIT     // msb as name end
1013+ 68FF             >
1013+ 68FF CA 68       >                dw      last_NFA            // Link to previous definition Name
1013+ 6901             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 6901 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1013+ 6901             >                else
1013+ 6901 03 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1013+ 6903             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 6903             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 6903             >
1013+ 6903             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 6903 D9                           exx
1015+ 6904 C1                           pop     bc                      // divisor
1016+ 6905
1017+ 6905 E1                           pop     hl                      // < high part
1018+ 6906 D1                           pop     de                      // < low part and
1019+ 6907
1020+ 6907 7D                           ld      a, l                    // check without changing arguments
1021+ 6908 91                           sub     c                       // if divisor is greater than high part
1022+ 6909 7C                           ld      a, h                    // so quotient will be in range
1023+ 690A 98                           sbc     a, b
1024+ 690B 30 23                        jr      nc, Um_DivMod_OutOfRange
1025+ 690D 3E 10                            ld      a, 16
1026+ 690F              Um_DivMod_Loop:
1027+ 690F A7                                   and     a
1028+ 6910 CB 13                                rl      e
1029+ 6912 CB 12                                rl      d
1030+ 6914 CB 15                                rl      l
1031+ 6916 CB 14                                rl      h
1032+ 6918 30 05                                jr      nc, Um_DivMod_Carry
1033+ 691A A7                                       and     a
1034+ 691B ED 42                                    sbc     hl, bc
1035+ 691D 18 07                                jr      Um_DivMod_Endif    // else
1036+ 691F              Um_DivMod_Carry:
1037+ 691F A7                                       and     a
1038+ 6920 ED 42                                    sbc     hl, bc
1039+ 6922 30 02                                    jr      nc, Um_DivMod_Endif
1040+ 6924 09                                           add     hl, bc
1041+ 6925 1B                                           dec     de
1042+ 6926              Um_DivMod_Endif:                                   // endif
1043+ 6926 13                                   inc     de
1044+ 6927 3D                                   dec     a
1045+ 6928 20 E5                            jr      nz, Um_DivMod_Loop
1046+ 692A EB                               ex      de, hl
1047+ 692B              Um_DivMod_Bailout:
1048+ 692B D5                               push    de                  // de := remanider
1049+ 692C E5                               push    hl                  // hl := quotient
1050+ 692D D9                               exx
1051+ 692E                                  next
1051+ 692E DD E9       >                jp      (ix)
1052+ 6930
1053+ 6930              Um_DivMod_OutOfRange:
1054+ 6930 21 FF FF                     ld      hl, -1
1055+ 6933 54                           ld      d, h
1056+ 6934 5D                           ld      e, l
1057+ 6935 18 F4                        jr      Um_DivMod_Bailout
1058+ 6937
1059+ 6937              //  ______________________________________________________________________
1060+ 6937              //
1061+ 6937              // and          n1 n2 -- n3
1062+ 6937              // bit logical AND. Returns n3 as n1 & n2
1063+ 6937                              New_Def AND_OP, "AND", is_code, is_normal
1063+ 6937             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1063+ 6937             >
1063+ 6937             >                // dummy db directives used to calculate length of namec
1063+ 6937 41 4E 44    >                db      "AND"
1063+ 693A             >len_NFA         defl    $ - temp_NFA
1063+ 693A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1063+ 6937             >
1063+ 6937 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1063+ 6938 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1063+ 693B             >                org     $-1                 // alter last byte of Name just above to set
1063+ 693A C4          >                db      {b $} | END_BIT     // msb as name end
1063+ 693B             >
1063+ 693B F8 68       >                dw      last_NFA            // Link to previous definition Name
1063+ 693D             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1063+ 693D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1063+ 693D             >                else
1063+ 693D 3F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1063+ 693F             >                endif           ; ok        // for other definitions it "points" the correct handler
1063+ 693F             >                // Use of "; ok" to suppress "warning[fwdref]"
1063+ 693F             >
1063+ 693F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1064+ 693F D1                           pop     de
1065+ 6940 E1                           pop     hl
1066+ 6941 7B                           ld      a, e
1067+ 6942 A5                           and     l
1068+ 6943 6F                           ld      l, a
1069+ 6944 7A                           ld      a, d
1070+ 6945 A4                           and     h
1071+ 6946 67                           ld      h, a
1072+ 6947
1073+ 6947                              psh1
1073+ 6947 E5          >                push    hl
1073+ 6948 DD E9       >                jp      (ix)
1074+ 694A
1075+ 694A              //  ______________________________________________________________________
1076+ 694A              //
1077+ 694A              // or           n1 n2 -- n3
1078+ 694A              // bit logical OR. Returns n3 as n1 | n2
1079+ 694A                              New_Def OR_OP, "OR", is_code, is_normal
1079+ 694A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1079+ 694A             >
1079+ 694A             >                // dummy db directives used to calculate length of namec
1079+ 694A 4F 52       >                db      "OR"
1079+ 694C             >len_NFA         defl    $ - temp_NFA
1079+ 694C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1079+ 694A             >
1079+ 694A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1079+ 694B 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1079+ 694D             >                org     $-1                 // alter last byte of Name just above to set
1079+ 694C D2          >                db      {b $} | END_BIT     // msb as name end
1079+ 694D             >
1079+ 694D 37 69       >                dw      last_NFA            // Link to previous definition Name
1079+ 694F             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1079+ 694F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1079+ 694F             >                else
1079+ 694F 51 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1079+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1079+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1079+ 6951             >
1079+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1080+ 6951 D1                           pop     de
1081+ 6952 E1                           pop     hl
1082+ 6953 7B                           ld      a, e
1083+ 6954 B5                           or      l
1084+ 6955 6F                           ld      l, a
1085+ 6956 7A                           ld      a, d
1086+ 6957 B4                           or      h
1087+ 6958 67                           ld      h, a
1088+ 6959
1089+ 6959                              psh1
1089+ 6959 E5          >                push    hl
1089+ 695A DD E9       >                jp      (ix)
1090+ 695C
1091+ 695C              //  ______________________________________________________________________
1092+ 695C              //
1093+ 695C              // xor          n1 n2 -- n3
1094+ 695C              // bit logical OR. Returns n3 as n1 ^ n2
1095+ 695C                              New_Def XOR_OP, "XOR", is_code, is_normal
1095+ 695C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1095+ 695C             >
1095+ 695C             >                // dummy db directives used to calculate length of namec
1095+ 695C 58 4F 52    >                db      "XOR"
1095+ 695F             >len_NFA         defl    $ - temp_NFA
1095+ 695F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1095+ 695C             >
1095+ 695C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1095+ 695D 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1095+ 6960             >                org     $-1                 // alter last byte of Name just above to set
1095+ 695F D2          >                db      {b $} | END_BIT     // msb as name end
1095+ 6960             >
1095+ 6960 4A 69       >                dw      last_NFA            // Link to previous definition Name
1095+ 6962             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1095+ 6962 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1095+ 6962             >                else
1095+ 6962 64 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1095+ 6964             >                endif           ; ok        // for other definitions it "points" the correct handler
1095+ 6964             >                // Use of "; ok" to suppress "warning[fwdref]"
1095+ 6964             >
1095+ 6964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1096+ 6964 D1                           pop     de
1097+ 6965 E1                           pop     hl
1098+ 6966 7B                           ld      a, e
1099+ 6967 AD                           xor     l
1100+ 6968 6F                           ld      l, a
1101+ 6969 7A                           ld      a, d
1102+ 696A AC                           xor     h
1103+ 696B 67                           ld      h, a
1104+ 696C
1105+ 696C                              psh1
1105+ 696C E5          >                push    hl
1105+ 696D DD E9       >                jp      (ix)
1106+ 696F
1107+ 696F              //  ______________________________________________________________________
1108+ 696F              //
1109+ 696F              // sp@      -- a
1110+ 696F              // returns on top of stack the value of SP before execution
1111+ 696F                              New_Def SPFETCH, "SP@", is_code, is_normal
1111+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1111+ 696F             >
1111+ 696F             >                // dummy db directives used to calculate length of namec
1111+ 696F 53 50 40    >                db      "SP@"
1111+ 6972             >len_NFA         defl    $ - temp_NFA
1111+ 6972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1111+ 696F             >
1111+ 696F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1111+ 6970 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1111+ 6973             >                org     $-1                 // alter last byte of Name just above to set
1111+ 6972 C0          >                db      {b $} | END_BIT     // msb as name end
1111+ 6973             >
1111+ 6973 5C 69       >                dw      last_NFA            // Link to previous definition Name
1111+ 6975             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1111+ 6975 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1111+ 6975             >                else
1111+ 6975 77 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1111+ 6977             >                endif           ; ok        // for other definitions it "points" the correct handler
1111+ 6977             >                // Use of "; ok" to suppress "warning[fwdref]"
1111+ 6977             >
1111+ 6977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1112+ 6977
1113+ 6977 21 00 00                     ld      hl, 0
1114+ 697A 39                           add     hl, sp
1115+ 697B
1116+ 697B                              psh1
1116+ 697B E5          >                push    hl
1116+ 697C DD E9       >                jp      (ix)
1117+ 697E
1118+ 697E              //  ______________________________________________________________________
1119+ 697E              //
1120+ 697E              // sp!      a --
1121+ 697E              // restore SP to the initial value passed
1122+ 697E              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1123+ 697E                              New_Def SPSTORE, "SP!", is_code, is_normal
1123+ 697E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ 697E             >
1123+ 697E             >                // dummy db directives used to calculate length of namec
1123+ 697E 53 50 21    >                db      "SP!"
1123+ 6981             >len_NFA         defl    $ - temp_NFA
1123+ 6981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ 697E             >
1123+ 697E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ 697F 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1123+ 6982             >                org     $-1                 // alter last byte of Name just above to set
1123+ 6981 A1          >                db      {b $} | END_BIT     // msb as name end
1123+ 6982             >
1123+ 6982 6F 69       >                dw      last_NFA            // Link to previous definition Name
1123+ 6984             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 6984 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1123+ 6984             >                else
1123+ 6984 86 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1123+ 6986             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 6986             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 6986             >
1123+ 6986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 6986 E1                           pop     hl
1125+ 6987 F9                           ld      sp, hl
1126+ 6988
1127+ 6988                              next
1127+ 6988 DD E9       >                jp      (ix)
1128+ 698A
1129+ 698A              //  ______________________________________________________________________
1130+ 698A              //
1131+ 698A              // rp@      -- a
1132+ 698A              // returns on top of stack the value of Return-Pointer
1133+ 698A                              New_Def RPFETCH, "RP@", is_code, is_normal
1133+ 698A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1133+ 698A             >
1133+ 698A             >                // dummy db directives used to calculate length of namec
1133+ 698A 52 50 40    >                db      "RP@"
1133+ 698D             >len_NFA         defl    $ - temp_NFA
1133+ 698D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1133+ 698A             >
1133+ 698A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1133+ 698B 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1133+ 698E             >                org     $-1                 // alter last byte of Name just above to set
1133+ 698D C0          >                db      {b $} | END_BIT     // msb as name end
1133+ 698E             >
1133+ 698E 7E 69       >                dw      last_NFA            // Link to previous definition Name
1133+ 6990             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1133+ 6990 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1133+ 6990             >                else
1133+ 6990 92 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1133+ 6992             >                endif           ; ok        // for other definitions it "points" the correct handler
1133+ 6992             >                // Use of "; ok" to suppress "warning[fwdref]"
1133+ 6992             >
1133+ 6992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1134+ 6992
1135+ 6992                              ldhlrp
1135+ 6992 2A 96 63    >                ld      hl,(RP_Pointer)
1136+ 6995
1137+ 6995                              psh1
1137+ 6995 E5          >                push    hl
1137+ 6996 DD E9       >                jp      (ix)
1138+ 6998
1139+ 6998              //  ______________________________________________________________________
1140+ 6998              //
1141+ 6998              // rp!      a --
1142+ 6998              // restore RP to the initial value passed
1143+ 6998              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1144+ 6998                              New_Def RPSTORE, "RP!", is_code, is_normal
1144+ 6998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 6998             >
1144+ 6998             >                // dummy db directives used to calculate length of namec
1144+ 6998 52 50 21    >                db      "RP!"
1144+ 699B             >len_NFA         defl    $ - temp_NFA
1144+ 699B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 6998             >
1144+ 6998 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 6999 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1144+ 699C             >                org     $-1                 // alter last byte of Name just above to set
1144+ 699B A1          >                db      {b $} | END_BIT     // msb as name end
1144+ 699C             >
1144+ 699C 8A 69       >                dw      last_NFA            // Link to previous definition Name
1144+ 699E             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 699E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1144+ 699E             >                else
1144+ 699E A0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1144+ 69A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 69A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 69A0             >
1144+ 69A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 69A0 E1                           pop     hl
1146+ 69A1                              ldrphl
1146+ 69A1 22 96 63    >                ld      (RP_Pointer),hl
1147+ 69A4
1148+ 69A4                              next
1148+ 69A4 DD E9       >                jp      (ix)
1149+ 69A6
1150+ 69A6              //  ______________________________________________________________________
1151+ 69A6              //
1152+ 69A6              // exit      --
1153+ 69A6              // exits back to the caller word
1154+ 69A6                              New_Def EXIT, "EXIT", is_code, is_normal
1154+ 69A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1154+ 69A6             >
1154+ 69A6             >                // dummy db directives used to calculate length of namec
1154+ 69A6 45 58 49 54 >                db      "EXIT"
1154+ 69AA             >len_NFA         defl    $ - temp_NFA
1154+ 69AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1154+ 69A6             >
1154+ 69A6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1154+ 69A7 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1154+ 69AB             >                org     $-1                 // alter last byte of Name just above to set
1154+ 69AA D4          >                db      {b $} | END_BIT     // msb as name end
1154+ 69AB             >
1154+ 69AB 98 69       >                dw      last_NFA            // Link to previous definition Name
1154+ 69AD             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1154+ 69AD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1154+ 69AD             >                else
1154+ 69AD AF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1154+ 69AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1154+ 69AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1154+ 69AF             >
1154+ 69AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1155+ 69AF                              ldhlrp                      // Get Return Stack Pointer
1155+ 69AF 2A 96 63    >                ld      hl,(RP_Pointer)
1156+ 69B2 4E                           ld      c, (hl)             // pop Instruction Pointer
1157+ 69B3 23                           inc     hl                  // from Return Stack
1158+ 69B4 46                           ld      b, (hl)
1159+ 69B5 23                           inc     hl
1160+ 69B6                              ldrphl                      // Set Return Stack Pointer
1160+ 69B6 22 96 63    >                ld      (RP_Pointer),hl
1161+ 69B9                              next
1161+ 69B9 DD E9       >                jp      (ix)
1162+ 69BB
1163+ 69BB              //  ______________________________________________________________________
1164+ 69BB              //
1165+ 69BB              // lastl      --
1166+ 69BB              // exits back to the caller word
1167+ 69BB              //              New_Def EXIT, "LASTL", is_code, is_normal
1168+ 69BB              //              ldhlrp                      // Get Return Stack Pointer
1169+ 69BB              //              ld      e, (hl)             // pop Instruction Pointer
1170+ 69BB              //              inc     hl                  // from Return Stack
1171+ 69BB              //              ld      d, (hl)
1172+ 69BB              //              inc     hl
1173+ 69BB              //              ld      (hl), e
1174+ 69BB              //              inc     hl
1175+ 69BB              //              ld      (hl), d
1176+ 69BB              //              next
1177+ 69BB
1178+ 69BB              //  ______________________________________________________________________
1179+ 69BB              //
1180+ 69BB              // >r      n --
1181+ 69BB              // pop from calculator-stack and push into return-stack
1182+ 69BB                              New_Def TO_R, ">R", is_code, is_normal
1182+ 69BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ 69BB             >
1182+ 69BB             >                // dummy db directives used to calculate length of namec
1182+ 69BB 3E 52       >                db      ">R"
1182+ 69BD             >len_NFA         defl    $ - temp_NFA
1182+ 69BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ 69BB             >
1182+ 69BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ 69BC 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1182+ 69BE             >                org     $-1                 // alter last byte of Name just above to set
1182+ 69BD D2          >                db      {b $} | END_BIT     // msb as name end
1182+ 69BE             >
1182+ 69BE A6 69       >                dw      last_NFA            // Link to previous definition Name
1182+ 69C0             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 69C0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1182+ 69C0             >                else
1182+ 69C0 C2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1182+ 69C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 69C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 69C2             >
1182+ 69C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 69C2 D1                           pop     de
1184+ 69C3                              ldhlrp
1184+ 69C3 2A 96 63    >                ld      hl,(RP_Pointer)
1185+ 69C6 2B                           dec     hl
1186+ 69C7 72                           ld      (hl), d             // store current TOS
1187+ 69C8 2B                           dec     hl                  // to Return Stack
1188+ 69C9 73                           ld      (hl), e
1189+ 69CA                              ldrphl
1189+ 69CA 22 96 63    >                ld      (RP_Pointer),hl
1190+ 69CD
1191+ 69CD                              next
1191+ 69CD DD E9       >                jp      (ix)
1192+ 69CF
1193+ 69CF              //  ______________________________________________________________________
1194+ 69CF              //
1195+ 69CF              // r>      -- n
1196+ 69CF              // pop from return-stack and push into calculator-stack
1197+ 69CF                              New_Def R_TO, "R>", is_code, is_normal
1197+ 69CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 69CF             >
1197+ 69CF             >                // dummy db directives used to calculate length of namec
1197+ 69CF 52 3E       >                db      "R>"
1197+ 69D1             >len_NFA         defl    $ - temp_NFA
1197+ 69D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 69CF             >
1197+ 69CF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 69D0 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1197+ 69D2             >                org     $-1                 // alter last byte of Name just above to set
1197+ 69D1 BE          >                db      {b $} | END_BIT     // msb as name end
1197+ 69D2             >
1197+ 69D2 BB 69       >                dw      last_NFA            // Link to previous definition Name
1197+ 69D4             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 69D4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1197+ 69D4             >                else
1197+ 69D4 D6 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1197+ 69D6             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 69D6             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 69D6             >
1197+ 69D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 69D6
1199+ 69D6                              ldhlrp
1199+ 69D6 2A 96 63    >                ld      hl,(RP_Pointer)
1200+ 69D9 5E                           ld      e, (hl)             // retrieve from Return Stack
1201+ 69DA 23                           inc     hl
1202+ 69DB 56                           ld      d, (hl)
1203+ 69DC 23                           inc     hl
1204+ 69DD                              ldrphl
1204+ 69DD 22 96 63    >                ld      (RP_Pointer),hl
1205+ 69E0 D5                           push    de
1206+ 69E1                              next
1206+ 69E1 DD E9       >                jp      (ix)
1207+ 69E3
1208+ 69E3              //  ______________________________________________________________________
1209+ 69E3              //
1210+ 69E3              // r            -- n
1211+ 69E3              // return on top of stack the value of top of return-stack
1212+ 69E3              // Since this is the same as I, we alter R's CFA to jump there
1213+ 69E3                              New_Def R_OP, "R@", I_Ptr, is_normal
1213+ 69E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 69E3             >
1213+ 69E3             >                // dummy db directives used to calculate length of namec
1213+ 69E3 52 40       >                db      "R@"
1213+ 69E5             >len_NFA         defl    $ - temp_NFA
1213+ 69E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 69E3             >
1213+ 69E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 69E4 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1213+ 69E6             >                org     $-1                 // alter last byte of Name just above to set
1213+ 69E5 C0          >                db      {b $} | END_BIT     // msb as name end
1213+ 69E6             >
1213+ 69E6 CF 69       >                dw      last_NFA            // Link to previous definition Name
1213+ 69E8             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 69E8 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1213+ 69EA             >                else
1213+ 69EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1213+ 69EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 69EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 69EA             >
1213+ 69EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 69EA
1215+ 69EA              //  ______________________________________________________________________
1216+ 69EA              //
1217+ 69EA              // r            -- n
1218+ 69EA              // return on top of stack the value of top of return-stack
1219+ 69EA              // Since this is the same as I, we alter R's CFA to jump there
1220+ 69EA              //              New_Def R_OLD, "R", I_Ptr, is_normal
1221+ 69EA
1222+ 69EA              //  ______________________________________________________________________
1223+ 69EA              //
1224+ 69EA              // 0=           n -- f
1225+ 69EA              // true (non zero) if n is zero, false (0) elsewere
1226+ 69EA                              New_Def ZEQUAL, "0=", is_code, is_normal
1226+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1226+ 69EA             >
1226+ 69EA             >                // dummy db directives used to calculate length of namec
1226+ 69EA 30 3D       >                db      "0="
1226+ 69EC             >len_NFA         defl    $ - temp_NFA
1226+ 69EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1226+ 69EA             >
1226+ 69EA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1226+ 69EB 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1226+ 69ED             >                org     $-1                 // alter last byte of Name just above to set
1226+ 69EC BD          >                db      {b $} | END_BIT     // msb as name end
1226+ 69ED             >
1226+ 69ED E3 69       >                dw      last_NFA            // Link to previous definition Name
1226+ 69EF             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1226+ 69EF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1226+ 69EF             >                else
1226+ 69EF F1 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1226+ 69F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1226+ 69F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1226+ 69F1             >
1226+ 69F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1227+ 69F1              Zero_Equal:
1228+ 69F1 E1                           pop     hl
1229+ 69F2 7D                           ld      a, l
1230+ 69F3 B4                           or      h
1231+ 69F4 21 00 00                     ld      hl, FALSE_FLAG
1232+ 69F7 20 01                        jr      nz, ZEqual_Skip
1233+ 69F9 2B                               dec     hl
1234+ 69FA              ZEqual_Skip:
1235+ 69FA                              psh1
1235+ 69FA E5          >                push    hl
1235+ 69FB DD E9       >                jp      (ix)
1236+ 69FD
1237+ 69FD              //  ______________________________________________________________________
1238+ 69FD              //
1239+ 69FD              // not         a1 -- a2
1240+ 69FD              // increment by 2 top of stack
1241+ 69FD                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1241+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ 69FD             >
1241+ 69FD             >                // dummy db directives used to calculate length of namec
1241+ 69FD 4E 4F 54    >                db      "NOT"
1241+ 6A00             >len_NFA         defl    $ - temp_NFA
1241+ 6A00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ 69FD             >
1241+ 69FD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ 69FE 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1241+ 6A01             >                org     $-1                 // alter last byte of Name just above to set
1241+ 6A00 D4          >                db      {b $} | END_BIT     // msb as name end
1241+ 6A01             >
1241+ 6A01 EA 69       >                dw      last_NFA            // Link to previous definition Name
1241+ 6A03             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 6A03 F1 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1241+ 6A05             >                else
1241+ 6A05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1241+ 6A05             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 6A05             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 6A05             >
1241+ 6A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 6A05
1243+ 6A05              //  ______________________________________________________________________
1244+ 6A05              //
1245+ 6A05              // 0<           n -- f
1246+ 6A05              // true (non zero) if n is less than zero, false (0) elsewere
1247+ 6A05                              New_Def ZLESS, "0<", is_code, is_normal
1247+ 6A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ 6A05             >
1247+ 6A05             >                // dummy db directives used to calculate length of namec
1247+ 6A05 30 3C       >                db      "0<"
1247+ 6A07             >len_NFA         defl    $ - temp_NFA
1247+ 6A07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ 6A05             >
1247+ 6A05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ 6A06 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1247+ 6A08             >                org     $-1                 // alter last byte of Name just above to set
1247+ 6A07 BC          >                db      {b $} | END_BIT     // msb as name end
1247+ 6A08             >
1247+ 6A08 FD 69       >                dw      last_NFA            // Link to previous definition Name
1247+ 6A0A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 6A0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1247+ 6A0A             >                else
1247+ 6A0A 0C 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1247+ 6A0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 6A0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 6A0C             >
1247+ 6A0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 6A0C E1                           pop     hl
1249+ 6A0D 29                           add     hl, hl
1250+ 6A0E 21 00 00                     ld      hl, 0
1251+ 6A11 30 01                        jr      nc, ZLess_Skip
1252+ 6A13 2B                               dec     hl
1253+ 6A14              ZLess_Skip:
1254+ 6A14                              psh1
1254+ 6A14 E5          >                push    hl
1254+ 6A15 DD E9       >                jp      (ix)
1255+ 6A17
1256+ 6A17              //  ______________________________________________________________________
1257+ 6A17              //
1258+ 6A17              // 0>           n -- f
1259+ 6A17              // true (non zero) if n is less than zero, false (0) elsewere
1260+ 6A17                              New_Def ZGREATER, "0>", is_code, is_normal
1260+ 6A17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 6A17             >
1260+ 6A17             >                // dummy db directives used to calculate length of namec
1260+ 6A17 30 3E       >                db      "0>"
1260+ 6A19             >len_NFA         defl    $ - temp_NFA
1260+ 6A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 6A17             >
1260+ 6A17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 6A18 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1260+ 6A1A             >                org     $-1                 // alter last byte of Name just above to set
1260+ 6A19 BE          >                db      {b $} | END_BIT     // msb as name end
1260+ 6A1A             >
1260+ 6A1A 05 6A       >                dw      last_NFA            // Link to previous definition Name
1260+ 6A1C             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 6A1C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1260+ 6A1C             >                else
1260+ 6A1C 1E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 6A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 6A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 6A1E             >
1260+ 6A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 6A1E E1                           pop     hl
1262+ 6A1F 7D                           ld      a, l
1263+ 6A20 B4                           or      h
1264+ 6A21 29                           add     hl, hl
1265+ 6A22 21 00 00                     ld      hl, FALSE_FLAG
1266+ 6A25 38 04                        jr      c, ZGreater_Skip
1267+ 6A27 A7                               and     a
1268+ 6A28 28 01                            jr      z, ZGreater_Skip
1269+ 6A2A 2B                                   dec     hl
1270+ 6A2B              ZGreater_Skip:
1271+ 6A2B                              psh1
1271+ 6A2B E5          >                push    hl
1271+ 6A2C DD E9       >                jp      (ix)
1272+ 6A2E
1273+ 6A2E              //  ______________________________________________________________________
1274+ 6A2E              //
1275+ 6A2E              // +            n1 n2 -- n3
1276+ 6A2E              // returns the unsigned sum of two top values
1277+ 6A2E                              New_Def PLUS, "+", is_code, is_normal
1277+ 6A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 6A2E             >
1277+ 6A2E             >                // dummy db directives used to calculate length of namec
1277+ 6A2E 2B          >                db      "+"
1277+ 6A2F             >len_NFA         defl    $ - temp_NFA
1277+ 6A2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 6A2E             >
1277+ 6A2E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 6A2F 2B          >                db      "+"               // name string in 7-bit ascii, but
1277+ 6A30             >                org     $-1                 // alter last byte of Name just above to set
1277+ 6A2F AB          >                db      {b $} | END_BIT     // msb as name end
1277+ 6A30             >
1277+ 6A30 17 6A       >                dw      last_NFA            // Link to previous definition Name
1277+ 6A32             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 6A32 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1277+ 6A32             >                else
1277+ 6A32 34 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 6A34             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 6A34             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 6A34             >
1277+ 6A34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 6A34 E1                           pop     hl
1279+ 6A35 D1                           pop     de
1280+ 6A36 19                           add     hl, de
1281+ 6A37
1282+ 6A37                              psh1
1282+ 6A37 E5          >                push    hl
1282+ 6A38 DD E9       >                jp      (ix)
1283+ 6A3A
1284+ 6A3A
1285+ 6A3A              //  ______________________________________________________________________
1286+ 6A3A              //
1287+ 6A3A              // d+           d1 d2 -- d3
1288+ 6A3A              // returns the unsigned sum of two top double-numbers
1289+ 6A3A              //      d2  d1
1290+ 6A3A              //      h l h l
1291+ 6A3A              // SP   LHEDLHED
1292+ 6A3A              // SP  +01234567
1293+ 6A3A                              New_Def DPLUS, "D+", is_code, is_normal
1293+ 6A3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 6A3A             >
1293+ 6A3A             >                // dummy db directives used to calculate length of namec
1293+ 6A3A 44 2B       >                db      "D+"
1293+ 6A3C             >len_NFA         defl    $ - temp_NFA
1293+ 6A3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 6A3A             >
1293+ 6A3A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 6A3B 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1293+ 6A3D             >                org     $-1                 // alter last byte of Name just above to set
1293+ 6A3C AB          >                db      {b $} | END_BIT     // msb as name end
1293+ 6A3D             >
1293+ 6A3D 2E 6A       >                dw      last_NFA            // Link to previous definition Name
1293+ 6A3F             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 6A3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1293+ 6A3F             >                else
1293+ 6A3F 41 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1293+ 6A41             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 6A41             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 6A41             >
1293+ 6A41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 6A41
1295+ 6A41 D9                           exx
1296+ 6A42 C1                           pop     bc                  // bc := d2.H
1297+ 6A43 D1                           pop     de                  // hl := d2.L
1298+ 6A44 E1                           pop     hl                  // d1.H
1299+ 6A45 E3                           ex      (sp), hl            // d1.L
1300+ 6A46 19                           add     hl, de              // hl := d2.L + d1.L
1301+ 6A47 E3                           ex      (sp), hl            // d1.H
1302+ 6A48 ED 4A                        adc     hl, bc              // d1.H + d2.H
1303+ 6A4A E5                           push    hl
1304+ 6A4B D9                           exx
1305+ 6A4C                              next
1305+ 6A4C DD E9       >                jp      (ix)
1306+ 6A4E
1307+ 6A4E              //  ______________________________________________________________________
1308+ 6A4E              //
1309+ 6A4E              // 1+           n1 -- n2
1310+ 6A4E              // increment by 1 top of stack
1311+ 6A4E                              New_Def ONE_PLUS, "1+", is_code, is_normal
1311+ 6A4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ 6A4E             >
1311+ 6A4E             >                // dummy db directives used to calculate length of namec
1311+ 6A4E 31 2B       >                db      "1+"
1311+ 6A50             >len_NFA         defl    $ - temp_NFA
1311+ 6A50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ 6A4E             >
1311+ 6A4E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ 6A4F 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1311+ 6A51             >                org     $-1                 // alter last byte of Name just above to set
1311+ 6A50 AB          >                db      {b $} | END_BIT     // msb as name end
1311+ 6A51             >
1311+ 6A51 3A 6A       >                dw      last_NFA            // Link to previous definition Name
1311+ 6A53             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6A53 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1311+ 6A53             >                else
1311+ 6A53 55 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1311+ 6A55             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6A55             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6A55             >
1311+ 6A55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6A55 E1                           pop     hl
1313+ 6A56 23                           inc     hl
1314+ 6A57
1315+ 6A57                              psh1
1315+ 6A57 E5          >                push    hl
1315+ 6A58 DD E9       >                jp      (ix)
1316+ 6A5A
1317+ 6A5A              //  ______________________________________________________________________
1318+ 6A5A              //
1319+ 6A5A              // 1-           n1 -- n2
1320+ 6A5A              // decrement by 1 top of stack
1321+ 6A5A                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1321+ 6A5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6A5A             >
1321+ 6A5A             >                // dummy db directives used to calculate length of namec
1321+ 6A5A 31 2D       >                db      "1-"
1321+ 6A5C             >len_NFA         defl    $ - temp_NFA
1321+ 6A5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6A5A             >
1321+ 6A5A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6A5B 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1321+ 6A5D             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6A5C AD          >                db      {b $} | END_BIT     // msb as name end
1321+ 6A5D             >
1321+ 6A5D 4E 6A       >                dw      last_NFA            // Link to previous definition Name
1321+ 6A5F             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6A5F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1321+ 6A5F             >                else
1321+ 6A5F 61 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1321+ 6A61             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6A61             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6A61             >
1321+ 6A61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6A61 E1                           pop     hl
1323+ 6A62 2B                           dec     hl
1324+ 6A63
1325+ 6A63                              psh1
1325+ 6A63 E5          >                push    hl
1325+ 6A64 DD E9       >                jp      (ix)
1326+ 6A66
1327+ 6A66              //  ______________________________________________________________________
1328+ 6A66              //
1329+ 6A66              // 2+           n1 -- n2
1330+ 6A66              // increment by 2 top of stack
1331+ 6A66                              New_Def TWO_PLUS, "2+", is_code, is_normal
1331+ 6A66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 6A66             >
1331+ 6A66             >                // dummy db directives used to calculate length of namec
1331+ 6A66 32 2B       >                db      "2+"
1331+ 6A68             >len_NFA         defl    $ - temp_NFA
1331+ 6A68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 6A66             >
1331+ 6A66 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 6A67 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1331+ 6A69             >                org     $-1                 // alter last byte of Name just above to set
1331+ 6A68 AB          >                db      {b $} | END_BIT     // msb as name end
1331+ 6A69             >
1331+ 6A69 5A 6A       >                dw      last_NFA            // Link to previous definition Name
1331+ 6A6B             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 6A6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1331+ 6A6B             >                else
1331+ 6A6B 6D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1331+ 6A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 6A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 6A6D             >
1331+ 6A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 6A6D              Two_Plus:
1333+ 6A6D E1                           pop     hl
1334+ 6A6E 23                           inc     hl
1335+ 6A6F 23                           inc     hl
1336+ 6A70
1337+ 6A70                              psh1
1337+ 6A70 E5          >                push    hl
1337+ 6A71 DD E9       >                jp      (ix)
1338+ 6A73
1339+ 6A73              //  ______________________________________________________________________
1340+ 6A73              //
1341+ 6A73              // cell+        a1 -- a2
1342+ 6A73              // increment by 2 top of stack
1343+ 6A73                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1343+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ 6A73             >
1343+ 6A73             >                // dummy db directives used to calculate length of namec
1343+ 6A73 43 45 4C 4C >                db      "CELL+"
1343+ 6A77 2B          >
1343+ 6A78             >len_NFA         defl    $ - temp_NFA
1343+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ 6A73             >
1343+ 6A73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ 6A74 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1343+ 6A78 2B          >
1343+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1343+ 6A78 AB          >                db      {b $} | END_BIT     // msb as name end
1343+ 6A79             >
1343+ 6A79 66 6A       >                dw      last_NFA            // Link to previous definition Name
1343+ 6A7B             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 6A7B 6D 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1343+ 6A7D             >                else
1343+ 6A7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1343+ 6A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 6A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 6A7D             >
1343+ 6A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 6A7D
1345+ 6A7D              //  ______________________________________________________________________
1346+ 6A7D              //
1347+ 6A7D              // align        a1 -- a2
1348+ 6A7D              // align memory : not used
1349+ 6A7D              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1350+ 6A7D              //            next
1351+ 6A7D
1352+ 6A7D              //  ______________________________________________________________________
1353+ 6A7D              //
1354+ 6A7D              // cell-        a1 -- a2
1355+ 6A7D              // decrement by 2 top of stack
1356+ 6A7D                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1356+ 6A7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ 6A7D             >
1356+ 6A7D             >                // dummy db directives used to calculate length of namec
1356+ 6A7D 43 45 4C 4C >                db      "CELL-"
1356+ 6A81 2D          >
1356+ 6A82             >len_NFA         defl    $ - temp_NFA
1356+ 6A82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ 6A7D             >
1356+ 6A7D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ 6A7E 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1356+ 6A82 2D          >
1356+ 6A83             >                org     $-1                 // alter last byte of Name just above to set
1356+ 6A82 AD          >                db      {b $} | END_BIT     // msb as name end
1356+ 6A83             >
1356+ 6A83 73 6A       >                dw      last_NFA            // Link to previous definition Name
1356+ 6A85             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 6A85 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1356+ 6A85             >                else
1356+ 6A85 87 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1356+ 6A87             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 6A87             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 6A87             >
1356+ 6A87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 6A87              CellMinus:
1358+ 6A87 E1                           pop     hl
1359+ 6A88 2B                           dec     hl
1360+ 6A89 2B                           dec     hl
1361+ 6A8A E5                           push    hl
1362+ 6A8B                              next
1362+ 6A8B DD E9       >                jp      (ix)
1363+ 6A8D
1364+ 6A8D              //  ______________________________________________________________________
1365+ 6A8D              //
1366+ 6A8D              // 2-           a1 -- a2
1367+ 6A8D              // decrement by 2 top of stack
1368+ 6A8D                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1368+ 6A8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 6A8D             >
1368+ 6A8D             >                // dummy db directives used to calculate length of namec
1368+ 6A8D 32 2D       >                db      "2-"
1368+ 6A8F             >len_NFA         defl    $ - temp_NFA
1368+ 6A8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 6A8D             >
1368+ 6A8D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 6A8E 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1368+ 6A90             >                org     $-1                 // alter last byte of Name just above to set
1368+ 6A8F AD          >                db      {b $} | END_BIT     // msb as name end
1368+ 6A90             >
1368+ 6A90 7D 6A       >                dw      last_NFA            // Link to previous definition Name
1368+ 6A92             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6A92 87 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1368+ 6A94             >                else
1368+ 6A94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1368+ 6A94             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6A94             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6A94             >
1368+ 6A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6A94
1370+ 6A94              //  ______________________________________________________________________
1371+ 6A94              //
1372+ 6A94              // negate        n1 -- n2
1373+ 6A94              // change the sign of number
1374+ 6A94                              New_Def MINUS, "NEGATE", is_code, is_normal
1374+ 6A94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1374+ 6A94             >
1374+ 6A94             >                // dummy db directives used to calculate length of namec
1374+ 6A94 4E 45 47 41 >                db      "NEGATE"
1374+ 6A98 54 45       >
1374+ 6A9A             >len_NFA         defl    $ - temp_NFA
1374+ 6A9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1374+ 6A94             >
1374+ 6A94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1374+ 6A95 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1374+ 6A99 54 45       >
1374+ 6A9B             >                org     $-1                 // alter last byte of Name just above to set
1374+ 6A9A C5          >                db      {b $} | END_BIT     // msb as name end
1374+ 6A9B             >
1374+ 6A9B 8D 6A       >                dw      last_NFA            // Link to previous definition Name
1374+ 6A9D             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1374+ 6A9D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1374+ 6A9D             >                else
1374+ 6A9D 9F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1374+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1374+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1374+ 6A9F             >
1374+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1375+ 6A9F 21 00 00                     ld      hl, 0               // subtract from 0
1376+ 6AA2 D1                           pop     de
1377+ 6AA3 B7                           or      a
1378+ 6AA4 ED 52                        sbc     hl, de
1379+ 6AA6
1380+ 6AA6                              psh1
1380+ 6AA6 E5          >                push    hl
1380+ 6AA7 DD E9       >                jp      (ix)
1381+ 6AA9
1382+ 6AA9              //  ______________________________________________________________________
1383+ 6AA9              //
1384+ 6AA9              // dnegate      d1 -- d2
1385+ 6AA9              // change the sign of a double number
1386+ 6AA9                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1386+ 6AA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1386+ 6AA9             >
1386+ 6AA9             >                // dummy db directives used to calculate length of namec
1386+ 6AA9 44 4E 45 47 >                db      "DNEGATE"
1386+ 6AAD 41 54 45    >
1386+ 6AB0             >len_NFA         defl    $ - temp_NFA
1386+ 6AB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1386+ 6AA9             >
1386+ 6AA9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1386+ 6AAA 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1386+ 6AAE 41 54 45    >
1386+ 6AB1             >                org     $-1                 // alter last byte of Name just above to set
1386+ 6AB0 C5          >                db      {b $} | END_BIT     // msb as name end
1386+ 6AB1             >
1386+ 6AB1 94 6A       >                dw      last_NFA            // Link to previous definition Name
1386+ 6AB3             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1386+ 6AB3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1386+ 6AB3             >                else
1386+ 6AB3 B5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1386+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1386+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1386+ 6AB5             >
1386+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1387+ 6AB5 D9                           exx
1388+ 6AB6 C1                           pop     bc                  // d1.H
1389+ 6AB7 D1                           pop     de                  // d1.L
1390+ 6AB8 AF                           xor     a
1391+ 6AB9 67                           ld      h, a
1392+ 6ABA 6F                           ld      l, a
1393+ 6ABB ED 52                        sbc     hl, de              // subtact from zero
1394+ 6ABD E5                           push    hl                  // > d2-L
1395+ 6ABE 67                           ld      h, a
1396+ 6ABF 6F                           ld      l, a
1397+ 6AC0 ED 42                        sbc     hl, bc              // subtract from zero with carry
1398+ 6AC2                                                          // > d2-H
1399+ 6AC2 E5                           push    hl
1400+ 6AC3 D9                           exx
1401+ 6AC4                              next
1401+ 6AC4 DD E9       >                jp      (ix)
1402+ 6AC6
1403+ 6AC6              //  ______________________________________________________________________
1404+ 6AC6              //
1405+ 6AC6              // over         n1 n2 -- n1 n2 n1
1406+ 6AC6              // copy the second value of stack and put it on top.
1407+ 6AC6                              New_Def OVER, "OVER", is_code, is_normal
1407+ 6AC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ 6AC6             >
1407+ 6AC6             >                // dummy db directives used to calculate length of namec
1407+ 6AC6 4F 56 45 52 >                db      "OVER"
1407+ 6ACA             >len_NFA         defl    $ - temp_NFA
1407+ 6ACA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ 6AC6             >
1407+ 6AC6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ 6AC7 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1407+ 6ACB             >                org     $-1                 // alter last byte of Name just above to set
1407+ 6ACA D2          >                db      {b $} | END_BIT     // msb as name end
1407+ 6ACB             >
1407+ 6ACB A9 6A       >                dw      last_NFA            // Link to previous definition Name
1407+ 6ACD             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 6ACD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1407+ 6ACD             >                else
1407+ 6ACD CF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1407+ 6ACF             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 6ACF             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 6ACF             >
1407+ 6ACF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 6ACF D1                           pop     de                  //   n2
1409+ 6AD0 E1                           pop     hl                  // < n1
1410+ 6AD1 E5                           push    hl                  // > n1
1411+ 6AD2 D5                           push    de                  // > n2
1412+ 6AD3 E5                           push    hl                  // > n1
1413+ 6AD4                              next
1413+ 6AD4 DD E9       >                jp      (ix)
1414+ 6AD6
1415+ 6AD6              //  ______________________________________________________________________
1416+ 6AD6              //
1417+ 6AD6              // drop         n1 --
1418+ 6AD6              // drops the top of stack
1419+ 6AD6                              New_Def DROP, "DROP", is_code, is_normal
1419+ 6AD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ 6AD6             >
1419+ 6AD6             >                // dummy db directives used to calculate length of namec
1419+ 6AD6 44 52 4F 50 >                db      "DROP"
1419+ 6ADA             >len_NFA         defl    $ - temp_NFA
1419+ 6ADA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ 6AD6             >
1419+ 6AD6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ 6AD7 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1419+ 6ADB             >                org     $-1                 // alter last byte of Name just above to set
1419+ 6ADA D0          >                db      {b $} | END_BIT     // msb as name end
1419+ 6ADB             >
1419+ 6ADB C6 6A       >                dw      last_NFA            // Link to previous definition Name
1419+ 6ADD             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6ADD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1419+ 6ADD             >                else
1419+ 6ADD DF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1419+ 6ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6ADF             >
1419+ 6ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6ADF E1                           pop     hl                  // < n1 and discard previous TOS
1421+ 6AE0                              next
1421+ 6AE0 DD E9       >                jp      (ix)
1422+ 6AE2
1423+ 6AE2              //  ______________________________________________________________________
1424+ 6AE2              //
1425+ 6AE2              // nip          n1 n2 -- n2
1426+ 6AE2              // drops the second elemento on the stack
1427+ 6AE2                              New_Def NIP, "NIP", is_code, is_normal
1427+ 6AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1427+ 6AE2             >
1427+ 6AE2             >                // dummy db directives used to calculate length of namec
1427+ 6AE2 4E 49 50    >                db      "NIP"
1427+ 6AE5             >len_NFA         defl    $ - temp_NFA
1427+ 6AE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1427+ 6AE2             >
1427+ 6AE2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1427+ 6AE3 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1427+ 6AE6             >                org     $-1                 // alter last byte of Name just above to set
1427+ 6AE5 D0          >                db      {b $} | END_BIT     // msb as name end
1427+ 6AE6             >
1427+ 6AE6 D6 6A       >                dw      last_NFA            // Link to previous definition Name
1427+ 6AE8             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1427+ 6AE8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1427+ 6AE8             >                else
1427+ 6AE8 EA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1427+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
1427+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
1427+ 6AEA             >
1427+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1428+ 6AEA
1429+ 6AEA E1                           pop     hl                  // < n1 discarded
1430+ 6AEB E3                           ex      (sp), hl
1431+ 6AEC                              next
1431+ 6AEC DD E9       >                jp      (ix)
1432+ 6AEE
1433+ 6AEE              //  ______________________________________________________________________
1434+ 6AEE              //
1435+ 6AEE              // tuck         n1 n2 -- n2 n1 n2
1436+ 6AEE              // copy the top element after the second.
1437+ 6AEE                              New_Def TUCK, "TUCK", is_code, is_normal
1437+ 6AEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1437+ 6AEE             >
1437+ 6AEE             >                // dummy db directives used to calculate length of namec
1437+ 6AEE 54 55 43 4B >                db      "TUCK"
1437+ 6AF2             >len_NFA         defl    $ - temp_NFA
1437+ 6AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1437+ 6AEE             >
1437+ 6AEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1437+ 6AEF 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1437+ 6AF3             >                org     $-1                 // alter last byte of Name just above to set
1437+ 6AF2 CB          >                db      {b $} | END_BIT     // msb as name end
1437+ 6AF3             >
1437+ 6AF3 E2 6A       >                dw      last_NFA            // Link to previous definition Name
1437+ 6AF5             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1437+ 6AF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1437+ 6AF5             >                else
1437+ 6AF5 F7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1437+ 6AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1437+ 6AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1437+ 6AF7             >
1437+ 6AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1438+ 6AF7 E1                           pop     hl
1439+ 6AF8 D1                           pop     de                  // < n1
1440+ 6AF9 E5                           push    hl                  // > n2  and TOS
1441+ 6AFA D5                           push    de                  // > n1
1442+ 6AFB E5                           push    hl
1443+ 6AFC                              next
1443+ 6AFC DD E9       >                jp      (ix)
1444+ 6AFE
1445+ 6AFE              //  ______________________________________________________________________
1446+ 6AFE              //
1447+ 6AFE              // swap         n1 n2 -- n2 n1
1448+ 6AFE              // swaps the two values on top of stack
1449+ 6AFE                              New_Def SWAP, "SWAP", is_code, is_normal
1449+ 6AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ 6AFE             >
1449+ 6AFE             >                // dummy db directives used to calculate length of namec
1449+ 6AFE 53 57 41 50 >                db      "SWAP"
1449+ 6B02             >len_NFA         defl    $ - temp_NFA
1449+ 6B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ 6AFE             >
1449+ 6AFE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ 6AFF 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1449+ 6B03             >                org     $-1                 // alter last byte of Name just above to set
1449+ 6B02 D0          >                db      {b $} | END_BIT     // msb as name end
1449+ 6B03             >
1449+ 6B03 EE 6A       >                dw      last_NFA            // Link to previous definition Name
1449+ 6B05             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 6B05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1449+ 6B05             >                else
1449+ 6B05 07 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1449+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 6B07             >
1449+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 6B07 E1                           pop     hl                  // < n1
1451+ 6B08 E3                           ex      (sp),hl             // > n2
1452+ 6B09 E5                           push    hl                  // copy n1 to TOS
1453+ 6B0A                              next
1453+ 6B0A DD E9       >                jp      (ix)
1454+ 6B0C
1455+ 6B0C              //  ______________________________________________________________________
1456+ 6B0C              //
1457+ 6B0C              // dup         n -- n n
1458+ 6B0C              // duplicates the top value of stack
1459+ 6B0C                              New_Def DUP, "DUP", is_code, is_normal
1459+ 6B0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ 6B0C             >
1459+ 6B0C             >                // dummy db directives used to calculate length of namec
1459+ 6B0C 44 55 50    >                db      "DUP"
1459+ 6B0F             >len_NFA         defl    $ - temp_NFA
1459+ 6B0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ 6B0C             >
1459+ 6B0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ 6B0D 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1459+ 6B10             >                org     $-1                 // alter last byte of Name just above to set
1459+ 6B0F D0          >                db      {b $} | END_BIT     // msb as name end
1459+ 6B10             >
1459+ 6B10 FE 6A       >                dw      last_NFA            // Link to previous definition Name
1459+ 6B12             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 6B12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1459+ 6B12             >                else
1459+ 6B12 14 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1459+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 6B14             >
1459+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 6B14 E1                           pop     hl
1461+ 6B15 E5                           push    hl                  // > n duplicate TOS
1462+ 6B16 E5                           push    hl
1463+ 6B17                              next
1463+ 6B17 DD E9       >                jp      (ix)
1464+ 6B19
1465+ 6B19              //  ______________________________________________________________________
1466+ 6B19              //
1467+ 6B19              // rot         n1 n2 n3 -- n2 n3 n1
1468+ 6B19              // Rotates the 3 top values of stack by picking the 3rd in access-order
1469+ 6B19              // and putting it on top. The other two are shifted down one place.
1470+ 6B19                              New_Def ROT, "ROT", is_code, is_normal
1470+ 6B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ 6B19             >
1470+ 6B19             >                // dummy db directives used to calculate length of namec
1470+ 6B19 52 4F 54    >                db      "ROT"
1470+ 6B1C             >len_NFA         defl    $ - temp_NFA
1470+ 6B1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ 6B19             >
1470+ 6B19 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ 6B1A 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1470+ 6B1D             >                org     $-1                 // alter last byte of Name just above to set
1470+ 6B1C D4          >                db      {b $} | END_BIT     // msb as name end
1470+ 6B1D             >
1470+ 6B1D 0C 6B       >                dw      last_NFA            // Link to previous definition Name
1470+ 6B1F             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6B1F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1470+ 6B1F             >                else
1470+ 6B1F 21 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1470+ 6B21             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6B21             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6B21             >
1470+ 6B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6B21 D1                           pop     de                  // < n3
1472+ 6B22 E1                           pop     hl                  // < n2
1473+ 6B23 E3                           ex      (sp),hl             // > n2 < n1
1474+ 6B24 D5                           push    de                  // > n3
1475+ 6B25 E5                           push    hl                  // copy n1 to TOS
1476+ 6B26                              next
1476+ 6B26 DD E9       >                jp      (ix)
1477+ 6B28
1478+ 6B28              //  ______________________________________________________________________
1479+ 6B28              //
1480+ 6B28              // -rot         n1 n2 n3 -- n3 n1 n2
1481+ 6B28              // Rotates the 3 top values of stack by picking the 1st in access-order
1482+ 6B28              // and putting back to 3rd place. The other two are shifted down one place.
1483+ 6B28                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1483+ 6B28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ 6B28             >
1483+ 6B28             >                // dummy db directives used to calculate length of namec
1483+ 6B28 2D 52 4F 54 >                db      "-ROT"
1483+ 6B2C             >len_NFA         defl    $ - temp_NFA
1483+ 6B2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ 6B28             >
1483+ 6B28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ 6B29 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1483+ 6B2D             >                org     $-1                 // alter last byte of Name just above to set
1483+ 6B2C D4          >                db      {b $} | END_BIT     // msb as name end
1483+ 6B2D             >
1483+ 6B2D 19 6B       >                dw      last_NFA            // Link to previous definition Name
1483+ 6B2F             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 6B2F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1483+ 6B2F             >                else
1483+ 6B2F 31 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1483+ 6B31             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 6B31             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 6B31             >
1483+ 6B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 6B31 E1                           pop     hl                  // < n3
1485+ 6B32 D1                           pop     de                  // < n2
1486+ 6B33 E3                           ex      (sp),hl             // > n3 < n1
1487+ 6B34 E5                           push    hl                  // > n1
1488+ 6B35 D5                           push    de                  // copy n3 to TOS
1489+ 6B36                              next
1489+ 6B36 DD E9       >                jp      (ix)
1490+ 6B38
1491+ 6B38              //  ______________________________________________________________________
1492+ 6B38              //
1493+ 6B38              // pick        n1 -- nx
1494+ 6B38              // picks the nth element from TOS
1495+ 6B38                              New_Def PICK, "PICK", is_code, is_normal
1495+ 6B38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1495+ 6B38             >
1495+ 6B38             >                // dummy db directives used to calculate length of namec
1495+ 6B38 50 49 43 4B >                db      "PICK"
1495+ 6B3C             >len_NFA         defl    $ - temp_NFA
1495+ 6B3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1495+ 6B38             >
1495+ 6B38 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1495+ 6B39 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1495+ 6B3D             >                org     $-1                 // alter last byte of Name just above to set
1495+ 6B3C CB          >                db      {b $} | END_BIT     // msb as name end
1495+ 6B3D             >
1495+ 6B3D 28 6B       >                dw      last_NFA            // Link to previous definition Name
1495+ 6B3F             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1495+ 6B3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1495+ 6B3F             >                else
1495+ 6B3F 41 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1495+ 6B41             >                endif           ; ok        // for other definitions it "points" the correct handler
1495+ 6B41             >                // Use of "; ok" to suppress "warning[fwdref]"
1495+ 6B41             >
1495+ 6B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1496+ 6B41 E1                           pop     hl                  // take TOS as index
1497+ 6B42 29                           add     hl, hl              // as cells
1498+ 6B43 39                           add     hl, sp              // from Stack Pointer
1499+ 6B44 7E                           ld      a, (hl)             // replace TOS
1500+ 6B45 23                           inc     hl
1501+ 6B46 66                           ld      h, (hl)
1502+ 6B47 6F                           ld      l, a
1503+ 6B48
1504+ 6B48                              psh1
1504+ 6B48 E5          >                push    hl
1504+ 6B49 DD E9       >                jp      (ix)
1505+ 6B4B
1506+ 6B4B
1507+ 6B4B              //  ______________________________________________________________________
1508+ 6B4B              //
1509+ 6B4B              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1510+ 6B4B              // picks the nth element from TOS
1511+ 6B4B              //              New_Def ROLL, "ROLL", is_code, is_normal
1512+ 6B4B              //              exx                     // we need all registers free
1513+ 6B4B              //              pop     hl              // number of cells to roll
1514+ 6B4B              //              ld      a, h
1515+ 6B4B              //              or       l
1516+ 6B4B              //              jr      z, Roll_Zero
1517+ 6B4B              //                  add     hl, hl              // number of bytes to move
1518+ 6B4B              //                  ld      b, h
1519+ 6B4B              //                  ld      c, l
1520+ 6B4B              //                  add     hl, sp          // address of n1
1521+ 6B4B              //                  ld      a, (hl)         // take n1 into a and a,
1522+ 6B4B              //                  inc     hl
1523+ 6B4B              //                  ex      af, af'
1524+ 6B4B              //                  ld      a, (hl)         // take n1 into a and a,
1525+ 6B4B              //                  ld      d, h
1526+ 6B4B              //                  ld      e, l
1527+ 6B4B              //                  dec     hl
1528+ 6B4B              //                  dec     hl
1529+ 6B4B              //                  lddr
1530+ 6B4B              //                  ex      de, hl
1531+ 6B4B              //                  ld      (hl), a
1532+ 6B4B              //                  dec     hl
1533+ 6B4B              //                  ex      af, af'
1534+ 6B4B              //                  ld      (hl), a
1535+ 6B4B              //Roll_Zero:
1536+ 6B4B              //              exx
1537+ 6B4B              //              next
1538+ 6B4B
1539+ 6B4B
1540+ 6B4B              //  ______________________________________________________________________
1541+ 6B4B              //
1542+ 6B4B              // 2over        d1 d2 -- d1 d2 d1
1543+ 6B4B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1544+ 6B4B              // copy the second double of stack and put on top.
1545+ 6B4B              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1546+ 6B4B              //
1547+ 6B4B              //              ld      hl, 7
1548+ 6B4B              //              add     hl, sp
1549+ 6B4B              //              ld      d, (hl)
1550+ 6B4B              //              dec     hl
1551+ 6B4B              //              ld      e, (hl)             // d1-L
1552+ 6B4B              //              push    de
1553+ 6B4B              //              dec     hl
1554+ 6B4B              //              ld      d, (hl)
1555+ 6B4B              //              dec     hl
1556+ 6B4B              //              ld      e, (hl)             // d1-H
1557+ 6B4B              //              push    de
1558+ 6B4B              //              next
1559+ 6B4B
1560+ 6B4B              //  ______________________________________________________________________
1561+ 6B4B              //
1562+ 6B4B              // 2drop        d --
1563+ 6B4B              //              n1 n2 --
1564+ 6B4B              // drops the top double from stack
1565+ 6B4B                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1565+ 6B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1565+ 6B4B             >
1565+ 6B4B             >                // dummy db directives used to calculate length of namec
1565+ 6B4B 32 44 52 4F >                db      "2DROP"
1565+ 6B4F 50          >
1565+ 6B50             >len_NFA         defl    $ - temp_NFA
1565+ 6B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1565+ 6B4B             >
1565+ 6B4B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1565+ 6B4C 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1565+ 6B50 50          >
1565+ 6B51             >                org     $-1                 // alter last byte of Name just above to set
1565+ 6B50 D0          >                db      {b $} | END_BIT     // msb as name end
1565+ 6B51             >
1565+ 6B51 38 6B       >                dw      last_NFA            // Link to previous definition Name
1565+ 6B53             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1565+ 6B53 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1565+ 6B53             >                else
1565+ 6B53 55 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1565+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
1565+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
1565+ 6B55             >
1565+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1566+ 6B55 E1                           pop     hl
1567+ 6B56 E1                           pop     hl
1568+ 6B57                              next
1568+ 6B57 DD E9       >                jp      (ix)
1569+ 6B59
1570+ 6B59              //  ______________________________________________________________________
1571+ 6B59              //
1572+ 6B59              // 2nip         d1 d2 -- d2
1573+ 6B59              //              n1 n2 n3 n4 -- n3 n4
1574+ 6B59              // drops the second double on the stack
1575+ 6B59              //              New_Def TWO_NIP, 4, "2nip"
1576+ 6B59              //              ...
1577+ 6B59
1578+ 6B59              //  ______________________________________________________________________
1579+ 6B59              //
1580+ 6B59              // 2tuck         d1 d2 -- d2 d1 d2
1581+ 6B59              // copy the top element after the second.
1582+ 6B59              //              New_Def TWO_TUCK, 5, "2tuck"
1583+ 6B59              //              ...
1584+ 6B59
1585+ 6B59              //  ______________________________________________________________________
1586+ 6B59              //
1587+ 6B59              // 2swap         d1 d2 -- d2 d1
1588+ 6B59              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1589+ 6B59              // swaps the two doubles on top of stack
1590+ 6B59                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1590+ 6B59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1590+ 6B59             >
1590+ 6B59             >                // dummy db directives used to calculate length of namec
1590+ 6B59 32 53 57 41 >                db      "2SWAP"
1590+ 6B5D 50          >
1590+ 6B5E             >len_NFA         defl    $ - temp_NFA
1590+ 6B5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1590+ 6B59             >
1590+ 6B59 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1590+ 6B5A 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1590+ 6B5E 50          >
1590+ 6B5F             >                org     $-1                 // alter last byte of Name just above to set
1590+ 6B5E D0          >                db      {b $} | END_BIT     // msb as name end
1590+ 6B5F             >
1590+ 6B5F 4B 6B       >                dw      last_NFA            // Link to previous definition Name
1590+ 6B61             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1590+ 6B61 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1590+ 6B61             >                else
1590+ 6B61 63 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1590+ 6B63             >                endif           ; ok        // for other definitions it "points" the correct handler
1590+ 6B63             >                // Use of "; ok" to suppress "warning[fwdref]"
1590+ 6B63             >
1590+ 6B63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1591+ 6B63 F1                           pop     af                  //   d2-H
1592+ 6B64 E1                           pop     hl                  // < d2-L
1593+ 6B65 D1                           pop     de                  // < d1-H
1594+ 6B66 E3                           ex      (sp), hl            // < d1-L > d2-L
1595+ 6B67 F5                           push    af                  // > d2-H
1596+ 6B68 E5                           push    hl                  // > d1-L
1597+ 6B69 D5                           push    de
1598+ 6B6A
1599+ 6B6A                              next
1599+ 6B6A DD E9       >                jp      (ix)
1600+ 6B6C
1601+ 6B6C              //  ______________________________________________________________________
1602+ 6B6C              //
1603+ 6B6C              // 2dup         d -- d d
1604+ 6B6C              //              n1 n2 -- n1 n2 n1 n2
1605+ 6B6C              // duplicates the top double of stack
1606+ 6B6C                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1606+ 6B6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1606+ 6B6C             >
1606+ 6B6C             >                // dummy db directives used to calculate length of namec
1606+ 6B6C 32 44 55 50 >                db      "2DUP"
1606+ 6B70             >len_NFA         defl    $ - temp_NFA
1606+ 6B70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1606+ 6B6C             >
1606+ 6B6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1606+ 6B6D 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1606+ 6B71             >                org     $-1                 // alter last byte of Name just above to set
1606+ 6B70 D0          >                db      {b $} | END_BIT     // msb as name end
1606+ 6B71             >
1606+ 6B71 59 6B       >                dw      last_NFA            // Link to previous definition Name
1606+ 6B73             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1606+ 6B73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1606+ 6B73             >                else
1606+ 6B73 75 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1606+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1606+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1606+ 6B75             >
1606+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1607+ 6B75 E1                           pop     hl                  // < d-H
1608+ 6B76 D1                           pop     de                  // < d-L
1609+ 6B77 D5                           push    de                  // < d-L
1610+ 6B78 E5                           push    hl                  // > d-H
1611+ 6B79 D5                           push    de                  // > d-L
1612+ 6B7A E5                           push    hl                  // > d-H
1613+ 6B7B                              next
1613+ 6B7B DD E9       >                jp      (ix)
1614+ 6B7D
1615+ 6B7D              //  ______________________________________________________________________
1616+ 6B7D              //
1617+ 6B7D              // 2rot         d1 d2 d3 -- d2 d3 d1
1618+ 6B7D              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1619+ 6B7D              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1620+ 6B7D              // and putting it on top. The other two are shifted down one place.
1621+ 6B7D              //              New_Def TWO?ROT, 4, "2rot"
1622+ 6B7D              //              ...
1623+ 6B7D              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1624+ 6B7D              //
1625+ 6B7D              //      d3  |d2  |d1  |
1626+ 6B7D              //      h l |h l |h l |
1627+ 6B7D              // SP   LHED|LHED|LHED|
1628+ 6B7D              // SP  +0123|4567|89ab|
1629+ 6B7D              //              ld      hl, $000B
1630+ 6B7D              //              add     hl, sp
1631+ 6B7D              //              ld      d, (hl)
1632+ 6B7D              //              dec     hl
1633+ 6B7D              //              ld      e, (hl)
1634+ 6B7D              //              dec     hl
1635+ 6B7D              //              push    de
1636+ 6B7D              //              ld      d, (hl)
1637+ 6B7D              //              dec     hl
1638+ 6B7D              //              ld      e, (hl)
1639+ 6B7D              //              dec     hl
1640+ 6B7D              //              push    de
1641+ 6B7D
1642+ 6B7D              //      d1  |d3  |d2  |d1  |
1643+ 6B7D              //      h l |h l |h l |h l |
1644+ 6B7D              // SP   LHED|LHED|LHED|LHED|
1645+ 6B7D              // SP       +0123|4567|89ab|
1646+ 6B7D
1647+ 6B7D              //              ld      d, h
1648+ 6B7D              //              ld      e, l
1649+ 6B7D              //              inc     de
1650+ 6B7D              //              inc     de
1651+ 6B7D              //              inc     de
1652+ 6B7D              //              inc     de
1653+ 6B7D              //              push    bc
1654+ 6B7D              //              ld      bc, $000C
1655+ 6B7D              //              lddr
1656+ 6B7D              //              pop     bc
1657+ 6B7D              //              pop     de
1658+ 6B7D              //              pop     de
1659+ 6B7D              //
1660+ 6B7D              //              next
1661+ 6B7D
1662+ 6B7D
1663+ 6B7D              //  ______________________________________________________________________
1664+ 6B7D              //
1665+ 6B7D              // +!           n a --
1666+ 6B7D              // Sums to the content of address a the number n.
1667+ 6B7D              // It is the same of  a @ n + a !
1668+ 6B7D                              New_Def PLUSSTORE, "+!", is_code, is_normal
1668+ 6B7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1668+ 6B7D             >
1668+ 6B7D             >                // dummy db directives used to calculate length of namec
1668+ 6B7D 2B 21       >                db      "+!"
1668+ 6B7F             >len_NFA         defl    $ - temp_NFA
1668+ 6B7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1668+ 6B7D             >
1668+ 6B7D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1668+ 6B7E 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1668+ 6B80             >                org     $-1                 // alter last byte of Name just above to set
1668+ 6B7F A1          >                db      {b $} | END_BIT     // msb as name end
1668+ 6B80             >
1668+ 6B80 6C 6B       >                dw      last_NFA            // Link to previous definition Name
1668+ 6B82             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1668+ 6B82 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1668+ 6B82             >                else
1668+ 6B82 84 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1668+ 6B84             >                endif           ; ok        // for other definitions it "points" the correct handler
1668+ 6B84             >                // Use of "; ok" to suppress "warning[fwdref]"
1668+ 6B84             >
1668+ 6B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1669+ 6B84 E1                           pop     hl                  // hl is the address
1670+ 6B85 D1                           pop     de                  // de is the number
1671+ 6B86 7E                           ld      a, (hl)
1672+ 6B87 83                           add     e
1673+ 6B88 77                           ld      (hl), a
1674+ 6B89 23                           inc     hl
1675+ 6B8A 7E                           ld      a, (hl)
1676+ 6B8B 8A                           adc     d
1677+ 6B8C 77                           ld      (hl), a
1678+ 6B8D
1679+ 6B8D                              next
1679+ 6B8D DD E9       >                jp      (ix)
1680+ 6B8F
1681+ 6B8F              //  ______________________________________________________________________
1682+ 6B8F              //
1683+ 6B8F              // toggle       a n --
1684+ 6B8F              // Complements (xor) the byte at addrress  a  with the model n.
1685+ 6B8F                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1685+ 6B8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ 6B8F             >
1685+ 6B8F             >                // dummy db directives used to calculate length of namec
1685+ 6B8F 54 4F 47 47 >                db      "TOGGLE"
1685+ 6B93 4C 45       >
1685+ 6B95             >len_NFA         defl    $ - temp_NFA
1685+ 6B95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ 6B8F             >
1685+ 6B8F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ 6B90 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1685+ 6B94 4C 45       >
1685+ 6B96             >                org     $-1                 // alter last byte of Name just above to set
1685+ 6B95 C5          >                db      {b $} | END_BIT     // msb as name end
1685+ 6B96             >
1685+ 6B96 7D 6B       >                dw      last_NFA            // Link to previous definition Name
1685+ 6B98             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 6B98 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1685+ 6B98             >                else
1685+ 6B98 9A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1685+ 6B9A             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 6B9A             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 6B9A             >
1685+ 6B9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 6B9A D1                           pop     de
1687+ 6B9B E1                           pop     hl
1688+ 6B9C 7E                           ld      a, (hl)
1689+ 6B9D AB                           xor     e
1690+ 6B9E 77                           ld      (hl), a
1691+ 6B9F
1692+ 6B9F                              next
1692+ 6B9F DD E9       >                jp      (ix)
1693+ 6BA1
1694+ 6BA1              //  ______________________________________________________________________
1695+ 6BA1              //
1696+ 6BA1              // @            a -- n
1697+ 6BA1              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1698+ 6BA1                              New_Def FETCH, "@", is_code, is_normal
1698+ 6BA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ 6BA1             >
1698+ 6BA1             >                // dummy db directives used to calculate length of namec
1698+ 6BA1 40          >                db      "@"
1698+ 6BA2             >len_NFA         defl    $ - temp_NFA
1698+ 6BA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ 6BA1             >
1698+ 6BA1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ 6BA2 40          >                db      "@"               // name string in 7-bit ascii, but
1698+ 6BA3             >                org     $-1                 // alter last byte of Name just above to set
1698+ 6BA2 C0          >                db      {b $} | END_BIT     // msb as name end
1698+ 6BA3             >
1698+ 6BA3 8F 6B       >                dw      last_NFA            // Link to previous definition Name
1698+ 6BA5             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 6BA5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1698+ 6BA5             >                else
1698+ 6BA5 A7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1698+ 6BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 6BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 6BA7             >
1698+ 6BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 6BA7 E1                           pop     hl
1700+ 6BA8 5E                           ld      e, (hl)             // low-byte
1701+ 6BA9 23                           inc     hl
1702+ 6BAA 56                           ld      d, (hl)             // high-byte
1703+ 6BAB D5                           push    de
1704+ 6BAC                              next
1704+ 6BAC DD E9       >                jp      (ix)
1705+ 6BAE
1706+ 6BAE              //  ______________________________________________________________________
1707+ 6BAE              //
1708+ 6BAE              // !            n a --
1709+ 6BAE              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1710+ 6BAE                              New_Def STORE, "!", is_code, is_normal
1710+ 6BAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1710+ 6BAE             >
1710+ 6BAE             >                // dummy db directives used to calculate length of namec
1710+ 6BAE 21          >                db      "!"
1710+ 6BAF             >len_NFA         defl    $ - temp_NFA
1710+ 6BAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1710+ 6BAE             >
1710+ 6BAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1710+ 6BAF 21          >                db      "!"               // name string in 7-bit ascii, but
1710+ 6BB0             >                org     $-1                 // alter last byte of Name just above to set
1710+ 6BAF A1          >                db      {b $} | END_BIT     // msb as name end
1710+ 6BB0             >
1710+ 6BB0 A1 6B       >                dw      last_NFA            // Link to previous definition Name
1710+ 6BB2             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1710+ 6BB2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1710+ 6BB2             >                else
1710+ 6BB2 B4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1710+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1710+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1710+ 6BB4             >
1710+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1711+ 6BB4 E1                           pop     hl                  // address
1712+ 6BB5 D1                           pop     de                  // < n
1713+ 6BB6 73                           ld      (hl), e             // low-byte
1714+ 6BB7 23                           inc     hl
1715+ 6BB8 72                           ld      (hl), d             // high-byte
1716+ 6BB9
1717+ 6BB9                              next
1717+ 6BB9 DD E9       >                jp      (ix)
1718+ 6BBB
1719+ 6BBB              //  ______________________________________________________________________
1720+ 6BBB              //
1721+ 6BBB              // c@           a -- c
1722+ 6BBB              // fetch a character n from address a
1723+ 6BBB                              New_Def CFETCH, "C@", is_code, is_normal
1723+ 6BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ 6BBB             >
1723+ 6BBB             >                // dummy db directives used to calculate length of namec
1723+ 6BBB 43 40       >                db      "C@"
1723+ 6BBD             >len_NFA         defl    $ - temp_NFA
1723+ 6BBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ 6BBB             >
1723+ 6BBB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ 6BBC 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1723+ 6BBE             >                org     $-1                 // alter last byte of Name just above to set
1723+ 6BBD C0          >                db      {b $} | END_BIT     // msb as name end
1723+ 6BBE             >
1723+ 6BBE AE 6B       >                dw      last_NFA            // Link to previous definition Name
1723+ 6BC0             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 6BC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1723+ 6BC0             >                else
1723+ 6BC0 C2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1723+ 6BC2             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 6BC2             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 6BC2             >
1723+ 6BC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 6BC2 E1                           pop     hl
1725+ 6BC3 6E                           ld      l, (hl)             // low-byte
1726+ 6BC4 26 00                        ld      h, 0
1727+ 6BC6
1728+ 6BC6                              psh1
1728+ 6BC6 E5          >                push    hl
1728+ 6BC7 DD E9       >                jp      (ix)
1729+ 6BC9
1730+ 6BC9              //  ______________________________________________________________________
1731+ 6BC9              //
1732+ 6BC9              // c!           c a --
1733+ 6BC9              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1734+ 6BC9                              New_Def CSTORE, "C!", is_code, is_normal
1734+ 6BC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1734+ 6BC9             >
1734+ 6BC9             >                // dummy db directives used to calculate length of namec
1734+ 6BC9 43 21       >                db      "C!"
1734+ 6BCB             >len_NFA         defl    $ - temp_NFA
1734+ 6BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1734+ 6BC9             >
1734+ 6BC9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1734+ 6BCA 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1734+ 6BCC             >                org     $-1                 // alter last byte of Name just above to set
1734+ 6BCB A1          >                db      {b $} | END_BIT     // msb as name end
1734+ 6BCC             >
1734+ 6BCC BB 6B       >                dw      last_NFA            // Link to previous definition Name
1734+ 6BCE             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1734+ 6BCE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1734+ 6BCE             >                else
1734+ 6BCE D0 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1734+ 6BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1734+ 6BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1734+ 6BD0             >
1734+ 6BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1735+ 6BD0 E1                           pop     hl                  // < address
1736+ 6BD1 D1                           pop     de
1737+ 6BD2 73                           ld      (hl), e             // low-byte
1738+ 6BD3
1739+ 6BD3                              next
1739+ 6BD3 DD E9       >                jp      (ix)
1740+ 6BD5
1741+ 6BD5              //  ______________________________________________________________________
1742+ 6BD5              //
1743+ 6BD5              // 2@           a -- d
1744+ 6BD5              // fetch a 32 bits number d from address a and leaves it on top of the
1745+ 6BD5              // stack as two single numbers, high part as top of the stack.
1746+ 6BD5              // A double number is normally kept in CPU registers as HLDE.
1747+ 6BD5              // On stack a double number is treated as two single numbers
1748+ 6BD5              // where BC is on the top of the stack and HL is the second from top,
1749+ 6BD5              // so the sign of the number can be checked on top of stack
1750+ 6BD5              // and in the stack memory it appears as LHED.
1751+ 6BD5                              New_Def TWO_FETCH, "2@", is_code, is_normal
1751+ 6BD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1751+ 6BD5             >
1751+ 6BD5             >                // dummy db directives used to calculate length of namec
1751+ 6BD5 32 40       >                db      "2@"
1751+ 6BD7             >len_NFA         defl    $ - temp_NFA
1751+ 6BD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1751+ 6BD5             >
1751+ 6BD5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1751+ 6BD6 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1751+ 6BD8             >                org     $-1                 // alter last byte of Name just above to set
1751+ 6BD7 C0          >                db      {b $} | END_BIT     // msb as name end
1751+ 6BD8             >
1751+ 6BD8 C9 6B       >                dw      last_NFA            // Link to previous definition Name
1751+ 6BDA             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1751+ 6BDA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1751+ 6BDA             >                else
1751+ 6BDA DC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1751+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
1751+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
1751+ 6BDC             >
1751+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1752+ 6BDC E1                           pop     hl                  // address
1753+ 6BDD 5E                           ld      e, (hl)             // low-byte
1754+ 6BDE 23                           inc     hl
1755+ 6BDF 56                           ld      d, (hl)             // high-byte
1756+ 6BE0
1757+ 6BE0 23                           inc     hl
1758+ 6BE1 7E                           ld      a, (hl)             // low-byte
1759+ 6BE2 23                           inc     hl
1760+ 6BE3 66                           ld      h, (hl)             // high-byte
1761+ 6BE4 6F                           ld      l, a
1762+ 6BE5 E5                           push    hl
1763+ 6BE6 D5                           push    de
1764+ 6BE7                              next
1764+ 6BE7 DD E9       >                jp      (ix)
1765+ 6BE9
1766+ 6BE9              //  ______________________________________________________________________
1767+ 6BE9              //
1768+ 6BE9              // 2!           d a --
1769+ 6BE9              // stores a 32 bits number d from address a and leaves it on top of the
1770+ 6BE9              // stack as two single numbers, high part as top of the stack.
1771+ 6BE9              // A double number is normally kept in CPU registers as HLDE.
1772+ 6BE9              // On stack a double number is treated as two single numbers
1773+ 6BE9              // where BC is on the top of the stack and HL is the second from top,
1774+ 6BE9              // so the sign of the number can be checked on top of stack
1775+ 6BE9              // and in the stack memory it appears as LHED.
1776+ 6BE9                              New_Def TWO_STORE, "2!", is_code, is_normal
1776+ 6BE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1776+ 6BE9             >
1776+ 6BE9             >                // dummy db directives used to calculate length of namec
1776+ 6BE9 32 21       >                db      "2!"
1776+ 6BEB             >len_NFA         defl    $ - temp_NFA
1776+ 6BEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1776+ 6BE9             >
1776+ 6BE9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1776+ 6BEA 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1776+ 6BEC             >                org     $-1                 // alter last byte of Name just above to set
1776+ 6BEB A1          >                db      {b $} | END_BIT     // msb as name end
1776+ 6BEC             >
1776+ 6BEC D5 6B       >                dw      last_NFA            // Link to previous definition Name
1776+ 6BEE             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1776+ 6BEE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1776+ 6BEE             >                else
1776+ 6BEE F0 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1776+ 6BF0             >                endif           ; ok        // for other definitions it "points" the correct handler
1776+ 6BF0             >                // Use of "; ok" to suppress "warning[fwdref]"
1776+ 6BF0             >
1776+ 6BF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1777+ 6BF0 D9                           exx
1778+ 6BF1 E1                           pop     hl                  // address
1779+ 6BF2 C1                           pop     bc                  // < high-part
1780+ 6BF3 D1                           pop     de                  // < low-part > Instruction Pointer
1781+ 6BF4 71                           ld      (hl), c
1782+ 6BF5 23                           inc     hl
1783+ 6BF6 70                           ld      (hl), b
1784+ 6BF7 23                           inc     hl
1785+ 6BF8 73                           ld      (hl), e
1786+ 6BF9 23                           inc     hl
1787+ 6BFA 72                           ld      (hl), d
1788+ 6BFB D9                           exx
1789+ 6BFC                              next
1789+ 6BFC DD E9       >                jp      (ix)
1790+ 6BFE
1791+ 6BFE              //  ______________________________________________________________________
1792+ 6BFE              //
1793+ 6BFE              // p@           a -- c
1794+ 6BFE              // Read one byte from port a and leave the result on top of stack
1795+ 6BFE                              New_Def PFETCH, "P@", is_code, is_normal
1795+ 6BFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1795+ 6BFE             >
1795+ 6BFE             >                // dummy db directives used to calculate length of namec
1795+ 6BFE 50 40       >                db      "P@"
1795+ 6C00             >len_NFA         defl    $ - temp_NFA
1795+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1795+ 6BFE             >
1795+ 6BFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1795+ 6BFF 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1795+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
1795+ 6C00 C0          >                db      {b $} | END_BIT     // msb as name end
1795+ 6C01             >
1795+ 6C01 E9 6B       >                dw      last_NFA            // Link to previous definition Name
1795+ 6C03             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1795+ 6C03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1795+ 6C03             >                else
1795+ 6C03 05 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1795+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
1795+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
1795+ 6C05             >
1795+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1796+ 6C05 D9                           exx
1797+ 6C06 C1                           pop     bc
1798+ 6C07 26 00                        ld      h, 0
1799+ 6C09 ED 68                        in      l, (c)
1800+ 6C0B E5                           push    hl
1801+ 6C0C D9                           exx
1802+ 6C0D                              next
1802+ 6C0D DD E9       >                jp      (ix)
1803+ 6C0F
1804+ 6C0F              //  ______________________________________________________________________
1805+ 6C0F              //
1806+ 6C0F              // p!           c a --
1807+ 6C0F              // Send one byte (top of stack) to port a
1808+ 6C0F                              New_Def PSTORE, "P!", is_code, is_normal
1808+ 6C0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1808+ 6C0F             >
1808+ 6C0F             >                // dummy db directives used to calculate length of namec
1808+ 6C0F 50 21       >                db      "P!"
1808+ 6C11             >len_NFA         defl    $ - temp_NFA
1808+ 6C11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1808+ 6C0F             >
1808+ 6C0F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1808+ 6C10 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1808+ 6C12             >                org     $-1                 // alter last byte of Name just above to set
1808+ 6C11 A1          >                db      {b $} | END_BIT     // msb as name end
1808+ 6C12             >
1808+ 6C12 FE 6B       >                dw      last_NFA            // Link to previous definition Name
1808+ 6C14             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1808+ 6C14 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1808+ 6C14             >                else
1808+ 6C14 16 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1808+ 6C16             >                endif           ; ok        // for other definitions it "points" the correct handler
1808+ 6C16             >                // Use of "; ok" to suppress "warning[fwdref]"
1808+ 6C16             >
1808+ 6C16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1809+ 6C16 D9                           exx
1810+ 6C17 C1                           pop     bc
1811+ 6C18 E1                           pop     hl                  // < c
1812+ 6C19 ED 69                        out     (c), l              // low-byte
1813+ 6C1B D9                           exx
1814+ 6C1C                              next
1814+ 6C1C DD E9       >                jp      (ix)
1815+ 6C1E
1816+ 6C1E
1817+ 6C1E              //  ______________________________________________________________________
1818+ 6C1E              //
1819+ 6C1E              // 2*           n1 -- n2
1820+ 6C1E              // doubles the number at top of stack
1821+ 6C1E                              New_Def TWO_MUL, "2*", is_code, is_normal
1821+ 6C1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1821+ 6C1E             >
1821+ 6C1E             >                // dummy db directives used to calculate length of namec
1821+ 6C1E 32 2A       >                db      "2*"
1821+ 6C20             >len_NFA         defl    $ - temp_NFA
1821+ 6C20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1821+ 6C1E             >
1821+ 6C1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1821+ 6C1F 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1821+ 6C21             >                org     $-1                 // alter last byte of Name just above to set
1821+ 6C20 AA          >                db      {b $} | END_BIT     // msb as name end
1821+ 6C21             >
1821+ 6C21 0F 6C       >                dw      last_NFA            // Link to previous definition Name
1821+ 6C23             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1821+ 6C23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1821+ 6C23             >                else
1821+ 6C23 25 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1821+ 6C25             >                endif           ; ok        // for other definitions it "points" the correct handler
1821+ 6C25             >                // Use of "; ok" to suppress "warning[fwdref]"
1821+ 6C25             >
1821+ 6C25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1822+ 6C25              Two_Mul_Ptr:
1823+ 6C25 E1                           pop     hl
1824+ 6C26 29                           add     hl, hl
1825+ 6C27
1826+ 6C27                              psh1
1826+ 6C27 E5          >                push    hl
1826+ 6C28 DD E9       >                jp      (ix)
1827+ 6C2A
1828+ 6C2A              //  ______________________________________________________________________
1829+ 6C2A              //
1830+ 6C2A              // 2/           n1 -- n2
1831+ 6C2A              // halves the top of stack, sign is unchanged
1832+ 6C2A                              New_Def TWO_DIV, "2/", is_code, is_normal
1832+ 6C2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1832+ 6C2A             >
1832+ 6C2A             >                // dummy db directives used to calculate length of namec
1832+ 6C2A 32 2F       >                db      "2/"
1832+ 6C2C             >len_NFA         defl    $ - temp_NFA
1832+ 6C2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1832+ 6C2A             >
1832+ 6C2A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1832+ 6C2B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1832+ 6C2D             >                org     $-1                 // alter last byte of Name just above to set
1832+ 6C2C AF          >                db      {b $} | END_BIT     // msb as name end
1832+ 6C2D             >
1832+ 6C2D 1E 6C       >                dw      last_NFA            // Link to previous definition Name
1832+ 6C2F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1832+ 6C2F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1832+ 6C2F             >                else
1832+ 6C2F 31 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1832+ 6C31             >                endif           ; ok        // for other definitions it "points" the correct handler
1832+ 6C31             >                // Use of "; ok" to suppress "warning[fwdref]"
1832+ 6C31             >
1832+ 6C31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1833+ 6C31 E1                           pop     hl
1834+ 6C32 CB 2C                        sra     h
1835+ 6C34 CB 1D                        rr      l
1836+ 6C36
1837+ 6C36                              psh1
1837+ 6C36 E5          >                push    hl
1837+ 6C37 DD E9       >                jp      (ix)
1838+ 6C39
1839+ 6C39              //  ______________________________________________________________________
1840+ 6C39              //
1841+ 6C39              // lshift       n1 u -- n2
1842+ 6C39              // bit left shift of u bits
1843+ 6C39                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1843+ 6C39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1843+ 6C39             >
1843+ 6C39             >                // dummy db directives used to calculate length of namec
1843+ 6C39 4C 53 48 49 >                db      "LSHIFT"
1843+ 6C3D 46 54       >
1843+ 6C3F             >len_NFA         defl    $ - temp_NFA
1843+ 6C3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1843+ 6C39             >
1843+ 6C39 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1843+ 6C3A 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1843+ 6C3E 46 54       >
1843+ 6C40             >                org     $-1                 // alter last byte of Name just above to set
1843+ 6C3F D4          >                db      {b $} | END_BIT     // msb as name end
1843+ 6C40             >
1843+ 6C40 2A 6C       >                dw      last_NFA            // Link to previous definition Name
1843+ 6C42             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1843+ 6C42 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1843+ 6C42             >                else
1843+ 6C42 44 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1843+ 6C44             >                endif           ; ok        // for other definitions it "points" the correct handler
1843+ 6C44             >                // Use of "; ok" to suppress "warning[fwdref]"
1843+ 6C44             >
1843+ 6C44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1844+ 6C44 D1                           pop     de
1845+ 6C45
1846+ 6C45 E1                           pop     hl
1847+ 6C46 7B                           ld      a, e
1848+ 6C47 B7                           or      a
1849+ 6C48 28 04                        jr      z, Lshift_Zero
1850+ 6C4A              Lshift_Loop:
1851+ 6C4A 29                                   add     hl, hl
1852+ 6C4B 3D                                   dec     a
1853+ 6C4C 20 FC                            jr      nz, Lshift_Loop
1854+ 6C4E              Lshift_Zero:
1855+ 6C4E
1856+ 6C4E
1857+ 6C4E                              psh1
1857+ 6C4E E5          >                push    hl
1857+ 6C4F DD E9       >                jp      (ix)
1858+ 6C51
1859+ 6C51              //  ______________________________________________________________________
1860+ 6C51              //
1861+ 6C51              // rshift       n1 u -- n2
1862+ 6C51              // bit right shift of u bits
1863+ 6C51                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1863+ 6C51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1863+ 6C51             >
1863+ 6C51             >                // dummy db directives used to calculate length of namec
1863+ 6C51 52 53 48 49 >                db      "RSHIFT"
1863+ 6C55 46 54       >
1863+ 6C57             >len_NFA         defl    $ - temp_NFA
1863+ 6C57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1863+ 6C51             >
1863+ 6C51 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1863+ 6C52 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1863+ 6C56 46 54       >
1863+ 6C58             >                org     $-1                 // alter last byte of Name just above to set
1863+ 6C57 D4          >                db      {b $} | END_BIT     // msb as name end
1863+ 6C58             >
1863+ 6C58 39 6C       >                dw      last_NFA            // Link to previous definition Name
1863+ 6C5A             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1863+ 6C5A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1863+ 6C5A             >                else
1863+ 6C5A 5C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1863+ 6C5C             >                endif           ; ok        // for other definitions it "points" the correct handler
1863+ 6C5C             >                // Use of "; ok" to suppress "warning[fwdref]"
1863+ 6C5C             >
1863+ 6C5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1864+ 6C5C D1                           pop     de
1865+ 6C5D
1866+ 6C5D E1                           pop     hl
1867+ 6C5E 7B                           ld      a, e
1868+ 6C5F B7                           or      a
1869+ 6C60 28 07                        jr      z, Rshift_Zero
1870+ 6C62              Rshift_Loop:
1871+ 6C62 CB 3C                                srl     h
1872+ 6C64 CB 1D                                rr      l
1873+ 6C66 3D                                   dec     a
1874+ 6C67 20 F9                            jr      nz, Rshift_Loop
1875+ 6C69              Rshift_Zero:
1876+ 6C69
1877+ 6C69
1878+ 6C69                              psh1
1878+ 6C69 E5          >                push    hl
1878+ 6C6A DD E9       >                jp      (ix)
1879+ 6C6C
1880+ 6C6C              //  ______________________________________________________________________
1881+ 6C6C              //
1882+ 6C6C              // cells        n1 -- n2
1883+ 6C6C              // decrement by 2 top of stack
1884+ 6C6C                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1884+ 6C6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1884+ 6C6C             >
1884+ 6C6C             >                // dummy db directives used to calculate length of namec
1884+ 6C6C 43 45 4C 4C >                db      "CELLS"
1884+ 6C70 53          >
1884+ 6C71             >len_NFA         defl    $ - temp_NFA
1884+ 6C71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1884+ 6C6C             >
1884+ 6C6C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1884+ 6C6D 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1884+ 6C71 53          >
1884+ 6C72             >                org     $-1                 // alter last byte of Name just above to set
1884+ 6C71 D3          >                db      {b $} | END_BIT     // msb as name end
1884+ 6C72             >
1884+ 6C72 51 6C       >                dw      last_NFA            // Link to previous definition Name
1884+ 6C74             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1884+ 6C74 25 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1884+ 6C76             >                else
1884+ 6C76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1884+ 6C76             >                endif           ; ok        // for other definitions it "points" the correct handler
1884+ 6C76             >                // Use of "; ok" to suppress "warning[fwdref]"
1884+ 6C76             >
1884+ 6C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1885+ 6C76
1886+ 6C76
1887+ 6C76              //  ______________________________________________________________________
1888+ 6C76
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C76                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C76              //  ______________________________________________________________________
   2+ 6C76              //
   3+ 6C76              //  L1.asm
   4+ 6C76              //
   5+ 6C76              //  Level-1 definitions and derivate
   6+ 6C76              //  ______________________________________________________________________
   7+ 6C76
   8+ 6C76              //  ______________________________________________________________________
   9+ 6C76              //
  10+ 6C76              // :            -- cccc     ( compile time )
  11+ 6C76              //              i*x -- j*x  ( run time )
  12+ 6C76              // Colon Definition
  13+ 6C76                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C76             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C76             >
  13+ 6C76             >                // dummy db directives used to calculate length of namec
  13+ 6C76 3A          >                db      ":"
  13+ 6C77             >len_NFA         defl    $ - temp_NFA
  13+ 6C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C76             >
  13+ 6C76 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C77 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C78             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C77 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C78             >
  13+ 6C78 6C 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C7A             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C7A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C7C             >                else
  13+ 6C7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C7C             >
  13+ 6C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C7C
  15+ 6C7C E3 70                        dw      QEXEC                   // ?exec
  16+ 6C7E 9E 70                        dw      STORE_CSP               // !csp
  17+ 6C80 4D 6E A5 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C84 40 6E B2 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C88 E1 76                        dw      CREATE                  // create  ( forward )
  20+ 6C8A 90 71                        dw      SMUDGE                  // dmudge
  21+ 6C8C 7B 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C8E E6 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C90                                                              // ... immediate
  24+ 6C90              Enter_Ptr:
  25+ 6C90                              // via call coded in CFA
  26+ 6C90                              ldhlrp
  26+ 6C90 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C93 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C94 70                           ld      (hl), b
  29+ 6C95 2B                           dec     hl
  30+ 6C96 71                           ld      (hl), c
  31+ 6C97                              ldrphl
  31+ 6C97 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C9A 13                           inc     de
  33+ 6C9B 4B                           ld      c, e
  34+ 6C9C 42                           ld      b, d
  35+ 6C9D                              next
  35+ 6C9D DD E9       >                jp      (ix)
  36+ 6C9F
  37+ 6C9F              //  ______________________________________________________________________
  38+ 6C9F              //
  39+ 6C9F              // ;            --
  40+ 6C9F              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C9F                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C9F             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C9F             >
  41+ 6C9F             >                // dummy db directives used to calculate length of namec
  41+ 6C9F 3B          >                db      ";"
  41+ 6CA0             >len_NFA         defl    $ - temp_NFA
  41+ 6CA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C9F             >
  41+ 6C9F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CA0 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CA1             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CA0 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CA1             >
  41+ 6CA1 76 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CA3             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CA3 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CA5             >                else
  41+ 6CA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CA5             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CA5             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CA5             >
  41+ 6CA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CA5
  43+ 6CA5 0D 71                        dw      QCSP                    // ?csp
  44+ 6CA7 44 71 AD 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CAB 90 71                        dw      SMUDGE                  // smudge
  46+ 6CAD 6D 71                        dw      SQUARED_OPEN            // [
  47+ 6CAF AD 69                        dw      EXIT                    // ; immediate
  48+ 6CB1
  49+ 6CB1              //  ______________________________________________________________________
  50+ 6CB1              //
  51+ 6CB1              // noop         --
  52+ 6CB1
  53+ 6CB1                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6CB1             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6CB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6CB1             >
  53+ 6CB1             >                // dummy db directives used to calculate length of namec
  53+ 6CB1 4E 4F 4F 50 >                db      "NOOP"
  53+ 6CB5             >len_NFA         defl    $ - temp_NFA
  53+ 6CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6CB1             >
  53+ 6CB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6CB2 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6CB6             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6CB5 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6CB6             >
  53+ 6CB6 9F 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6CB8             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6CB8 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6CBA             >                else
  53+ 6CBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6CBA             >
  53+ 6CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6CBA AD 69                        dw      EXIT
  55+ 6CBC
  56+ 6CBC              //  ______________________________________________________________________
  57+ 6CBC              //
  58+ 6CBC              // constant     n -- cccc     ( compile time )
  59+ 6CBC              //              -- n          ( run time )
  60+ 6CBC              // Constant definition.
  61+ 6CBC                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6CBC             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6CBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6CBC             >
  61+ 6CBC             >                // dummy db directives used to calculate length of namec
  61+ 6CBC 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6CC0 54 41 4E 54 >
  61+ 6CC4             >len_NFA         defl    $ - temp_NFA
  61+ 6CC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6CBC             >
  61+ 6CBC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6CBD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6CC1 54 41 4E 54 >
  61+ 6CC5             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6CC4 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6CC5             >
  61+ 6CC5 B1 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6CC7             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6CC7 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6CC9             >                else
  61+ 6CC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6CC9             >
  61+ 6CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6CC9
  63+ 6CC9 E1 76                        dw      CREATE                  // create
  64+ 6CCB 08 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6CCD E6 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6CCF              Constant_Ptr:
  67+ 6CCF
  68+ 6CCF 13                           inc     de
  69+ 6CD0 EB                           ex      de, hl
  70+ 6CD1
  71+ 6CD1 5E                           ld      e, (hl)
  72+ 6CD2 23                           inc     hl
  73+ 6CD3 56                           ld      d, (hl)
  74+ 6CD4 D5                           push    de
  75+ 6CD5                              next
  75+ 6CD5 DD E9       >                jp      (ix)
  76+ 6CD7
  77+ 6CD7              //  ______________________________________________________________________
  78+ 6CD7              //
  79+ 6CD7              // variable     n -- cccc     ( compile time )
  80+ 6CD7              //              -- a          ( run time )
  81+ 6CD7              // Variable definition, n is the initial value.
  82+ 6CD7                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6CD7             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6CD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6CD7             >
  82+ 6CD7             >                // dummy db directives used to calculate length of namec
  82+ 6CD7 56 41 52 49 >                db      "VARIABLE"
  82+ 6CDB 41 42 4C 45 >
  82+ 6CDF             >len_NFA         defl    $ - temp_NFA
  82+ 6CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6CD7             >
  82+ 6CD7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6CD8 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6CDC 41 42 4C 45 >
  82+ 6CE0             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6CDF C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6CE0             >
  82+ 6CE0 BC 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6CE2             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6CE2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6CE4             >                else
  82+ 6CE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6CE4             >
  82+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6CE4
  84+ 6CE4 0D 6D                        dw      ZERO
  85+ 6CE6 C7 6C                        dw      CONSTANT                // constant
  86+ 6CE8 E6 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6CEA              Variable_Ptr:
  88+ 6CEA
  89+ 6CEA 13                           inc     de
  90+ 6CEB D5                           push    de                  // balance TOS before overwrite it
  91+ 6CEC
  92+ 6CEC                              next
  92+ 6CEC DD E9       >                jp      (ix)
  93+ 6CEE
  94+ 6CEE              //  ______________________________________________________________________
  95+ 6CEE              //
  96+ 6CEE              // user         b -- cccc     ( compile time )
  97+ 6CEE              //              -- a          ( run time )
  98+ 6CEE              // User variable definition
  99+ 6CEE                              Colon_Def USER, "USER", is_normal
  99+ 6CEE             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6CEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6CEE             >
  99+ 6CEE             >                // dummy db directives used to calculate length of namec
  99+ 6CEE 55 53 45 52 >                db      "USER"
  99+ 6CF2             >len_NFA         defl    $ - temp_NFA
  99+ 6CF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6CEE             >
  99+ 6CEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6CEF 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6CF3             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6CF2 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6CF3             >
  99+ 6CF3 D7 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6CF5             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6CF5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6CF7             >                else
  99+ 6CF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  99+ 6CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6CF7             >
  99+ 6CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6CF7
 101+ 6CF7 E1 76                        dw      CREATE                  // create
 102+ 6CF9 19 6F                        dw      CCOMMA                  // c,
 103+ 6CFB E6 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6CFD
 105+ 6CFD
 106+ 6CFD              User_Ptr:
 107+ 6CFD                              // via call coded in CFA
 108+ 6CFD 13                           inc     de
 109+ 6CFE EB                           ex      de, hl
 110+ 6CFF 5E                           ld      e, (hl)
 111+ 6D00 16 00                        ld      d, 0
 112+ 6D02 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6D05 19                           add     hl, de
 114+ 6D06
 115+ 6D06                              psh1
 115+ 6D06 E5          >                push    hl
 115+ 6D07 DD E9       >                jp      (ix)
 116+ 6D09
 117+ 6D09              //  ______________________________________________________________________
 118+ 6D09              //
 119+ 6D09                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6D09             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6D09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D09             >
 119+ 6D09             >                // dummy db directives used to calculate length of namec
 119+ 6D09 30          >                db      "0"
 119+ 6D0A             >len_NFA         defl    $ - temp_NFA
 119+ 6D0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D09             >
 119+ 6D09 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D0A 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6D0B             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D0A B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D0B             >
 119+ 6D0B EE 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D0D             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D0D CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D0F             >                else
 119+ 6D0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D0F             >
 119+ 6D0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D0F 00 00       >                dw      0
 120+ 6D11                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6D11             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D11             >
 120+ 6D11             >                // dummy db directives used to calculate length of namec
 120+ 6D11 31          >                db      "1"
 120+ 6D12             >len_NFA         defl    $ - temp_NFA
 120+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D11             >
 120+ 6D11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D12 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D12 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D13             >
 120+ 6D13 09 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D15             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D15 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D17             >                else
 120+ 6D17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D17             >
 120+ 6D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D17 01 00       >                dw      1
 121+ 6D19                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6D19             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D19             >
 121+ 6D19             >                // dummy db directives used to calculate length of namec
 121+ 6D19 32          >                db      "2"
 121+ 6D1A             >len_NFA         defl    $ - temp_NFA
 121+ 6D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D19             >
 121+ 6D19 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D1A 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6D1B             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D1A B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D1B             >
 121+ 6D1B 11 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D1D             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D1D CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D1F             >                else
 121+ 6D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D1F             >
 121+ 6D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D1F 02 00       >                dw      2
 122+ 6D21                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6D21             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6D21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D21             >
 122+ 6D21             >                // dummy db directives used to calculate length of namec
 122+ 6D21 33          >                db      "3"
 122+ 6D22             >len_NFA         defl    $ - temp_NFA
 122+ 6D22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D21             >
 122+ 6D21 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D22 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6D23             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D22 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D23             >
 122+ 6D23 19 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D25             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D25 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D27             >                else
 122+ 6D27 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D27             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D27             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D27             >
 122+ 6D27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D27 03 00       >                dw      3
 123+ 6D29                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6D29             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6D29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D29             >
 123+ 6D29             >                // dummy db directives used to calculate length of namec
 123+ 6D29 2D 31       >                db      "-1"
 123+ 6D2B             >len_NFA         defl    $ - temp_NFA
 123+ 6D2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D29             >
 123+ 6D29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D2A 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6D2C             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D2B B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D2C             >
 123+ 6D2C 21 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D2E             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D2E CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D30             >                else
 123+ 6D30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D30             >
 123+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D30 FF FF       >                dw      -1
 124+ 6D32                              Constant_Def BL         ,   "BL"    , $20
 124+ 6D32             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6D32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D32             >
 124+ 6D32             >                // dummy db directives used to calculate length of namec
 124+ 6D32 42 4C       >                db      "BL"
 124+ 6D34             >len_NFA         defl    $ - temp_NFA
 124+ 6D34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D32             >
 124+ 6D32 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D33 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6D35             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D34 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D35             >
 124+ 6D35 29 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D37             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D37 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D39             >                else
 124+ 6D39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D39             >
 124+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D39 20 00       >                dw      $20
 125+ 6D3B                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6D3B             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6D3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D3B             >
 125+ 6D3B             >                // dummy db directives used to calculate length of namec
 125+ 6D3B 43 2F 4C    >                db      "C/L"
 125+ 6D3E             >len_NFA         defl    $ - temp_NFA
 125+ 6D3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D3B             >
 125+ 6D3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D3C 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6D3F             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D3E CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D3F             >
 125+ 6D3F 32 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D41             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D41 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D43             >                else
 125+ 6D43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D43             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D43             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D43             >
 125+ 6D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D43 40 00       >                dw      64
 126+ 6D45                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6D45             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6D45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D45             >
 126+ 6D45             >                // dummy db directives used to calculate length of namec
 126+ 6D45 42 2F 42 55 >                db      "B/BUF"
 126+ 6D49 46          >
 126+ 6D4A             >len_NFA         defl    $ - temp_NFA
 126+ 6D4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D45             >
 126+ 6D45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D46 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6D4A 46          >
 126+ 6D4B             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D4A C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D4B             >
 126+ 6D4B 3B 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D4D             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D4D CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D4F             >                else
 126+ 6D4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D4F             >
 126+ 6D4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D4F 00 02       >                dw      512
 127+ 6D51                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6D51             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6D51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D51             >
 127+ 6D51             >                // dummy db directives used to calculate length of namec
 127+ 6D51 42 2F 53 43 >                db      "B/SCR"
 127+ 6D55 52          >
 127+ 6D56             >len_NFA         defl    $ - temp_NFA
 127+ 6D56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D51             >
 127+ 6D51 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D52 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6D56 52          >
 127+ 6D57             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D56 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D57             >
 127+ 6D57 45 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D59             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D59 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D5B             >                else
 127+ 6D5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D5B             >
 127+ 6D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D5B 02 00       >                dw      2
 128+ 6D5D                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6D5D             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6D5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6D5D             >
 128+ 6D5D             >                // dummy db directives used to calculate length of namec
 128+ 6D5D 4C 2F 53 43 >                db      "L/SCR"
 128+ 6D61 52          >
 128+ 6D62             >len_NFA         defl    $ - temp_NFA
 128+ 6D62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6D5D             >
 128+ 6D5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6D5E 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6D62 52          >
 128+ 6D63             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6D62 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6D63             >
 128+ 6D63 51 6D       >                dw      last_NFA            // Link to previous definition Name
 128+ 6D65             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6D65 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6D67             >                else
 128+ 6D67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 128+ 6D67             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6D67             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6D67             >
 128+ 6D67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6D67 10 00       >                dw      16
 129+ 6D69
 130+ 6D69              //  ______________________________________________________________________
 131+ 6D69              //
 132+ 6D69              // +origin         --
 133+ 6D69              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6D69              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6D69              //              dw      PLUS                    // +
 136+ 6D69              //              dw      EXIT                    // ;
 137+ 6D69                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6D69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6D69             >
 137+ 6D69             >                // dummy db directives used to calculate length of namec
 137+ 6D69 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6D6D 47 49 4E    >
 137+ 6D70             >len_NFA         defl    $ - temp_NFA
 137+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6D69             >
 137+ 6D69 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6D6A 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6D6E 47 49 4E    >
 137+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6D70 CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6D71             >
 137+ 6D71 5D 6D       >                dw      last_NFA            // Link to previous definition Name
 137+ 6D73             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6D73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 6D73             >                else
 137+ 6D73 75 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6D75             >
 137+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6D75 E1                           pop     hl
 139+ 6D76 11 66 63                     ld      de,  Cold_origin
 140+ 6D79 19                           add     hl, de
 141+ 6D7A E5                           push    hl
 142+ 6D7B                              next
 142+ 6D7B DD E9       >                jp      (ix)
 143+ 6D7D
 144+ 6D7D
 145+ 6D7D              //  ______________________________________________________________________
 146+ 6D7D              //
 147+ 6D7D                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6D7D             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6D7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6D7D             >
 147+ 6D7D             >                // dummy db directives used to calculate length of namec
 147+ 6D7D 28 4E 45 58 >                db      "(NEXT)"
 147+ 6D81 54 29       >
 147+ 6D83             >len_NFA         defl    $ - temp_NFA
 147+ 6D83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6D7D             >
 147+ 6D7D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6D7E 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6D82 54 29       >
 147+ 6D84             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6D83 A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6D84             >
 147+ 6D84 69 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6D86             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6D86 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6D88             >                else
 147+ 6D88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6D88             >
 147+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6D88 98 63       >                dw      Next_Ptr
 148+ 6D8A
 149+ 6D8A              //  ______________________________________________________________________
 150+ 6D8A              //
 151+ 6D8A
 152+ 6D8A                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6D8A             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D8A             >
 152+ 6D8A             >                // dummy db directives used to calculate length of namec
 152+ 6D8A 53 30       >                db      "S0"
 152+ 6D8C             >len_NFA         defl    $ - temp_NFA
 152+ 6D8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D8A             >
 152+ 6D8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D8B 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6D8D             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D8C B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D8D             >
 152+ 6D8D 7D 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D8F             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D8F FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D91             >                else
 152+ 6D91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D91             >
 152+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D91 06          >                db      06
 153+ 6D92                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6D92             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6D92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D92             >
 153+ 6D92             >                // dummy db directives used to calculate length of namec
 153+ 6D92 52 30       >                db      "R0"
 153+ 6D94             >len_NFA         defl    $ - temp_NFA
 153+ 6D94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D92             >
 153+ 6D92 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D93 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6D95             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D94 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D95             >
 153+ 6D95 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D97             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D97 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D99             >                else
 153+ 6D99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D99             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D99             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D99             >
 153+ 6D99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D99 08          >                db      08
 154+ 6D9A                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6D9A             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6D9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D9A             >
 154+ 6D9A             >                // dummy db directives used to calculate length of namec
 154+ 6D9A 54 49 42    >                db      "TIB"
 154+ 6D9D             >len_NFA         defl    $ - temp_NFA
 154+ 6D9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D9A             >
 154+ 6D9A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D9B 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6D9E             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D9D C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D9E             >
 154+ 6D9E 92 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DA0             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DA0 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DA2             >                else
 154+ 6DA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DA2             >
 154+ 6DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DA2 0A          >                db      10
 155+ 6DA3                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6DA3             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6DA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DA3             >
 155+ 6DA3             >                // dummy db directives used to calculate length of namec
 155+ 6DA3 57 49 44 54 >                db      "WIDTH"
 155+ 6DA7 48          >
 155+ 6DA8             >len_NFA         defl    $ - temp_NFA
 155+ 6DA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DA3             >
 155+ 6DA3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DA4 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6DA8 48          >
 155+ 6DA9             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DA8 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DA9             >
 155+ 6DA9 9A 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DAB             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DAB FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DAD             >                else
 155+ 6DAD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DAD             >
 155+ 6DAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DAD 0C          >                db      12
 156+ 6DAE                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6DAE             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6DAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DAE             >
 156+ 6DAE             >                // dummy db directives used to calculate length of namec
 156+ 6DAE 57 41 52 4E >                db      "WARNING"
 156+ 6DB2 49 4E 47    >
 156+ 6DB5             >len_NFA         defl    $ - temp_NFA
 156+ 6DB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DAE             >
 156+ 6DAE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DAF 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6DB3 49 4E 47    >
 156+ 6DB6             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DB5 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DB6             >
 156+ 6DB6 A3 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DB8             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DB8 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DBA             >                else
 156+ 6DBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DBA             >
 156+ 6DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DBA 0E          >                db      14
 157+ 6DBB                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6DBB             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DBB             >
 157+ 6DBB             >                // dummy db directives used to calculate length of namec
 157+ 6DBB 46 45 4E 43 >                db      "FENCE"
 157+ 6DBF 45          >
 157+ 6DC0             >len_NFA         defl    $ - temp_NFA
 157+ 6DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DBB             >
 157+ 6DBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DBC 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6DC0 45          >
 157+ 6DC1             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DC0 C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DC1             >
 157+ 6DC1 AE 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DC3             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DC3 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DC5             >                else
 157+ 6DC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DC5             >
 157+ 6DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DC5 10          >                db      16
 158+ 6DC6                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6DC6             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6DC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DC6             >
 158+ 6DC6             >                // dummy db directives used to calculate length of namec
 158+ 6DC6 44 50       >                db      "DP"
 158+ 6DC8             >len_NFA         defl    $ - temp_NFA
 158+ 6DC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DC6             >
 158+ 6DC6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DC7 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6DC9             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DC8 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DC9             >
 158+ 6DC9 BB 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DCB             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DCB FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DCD             >                else
 158+ 6DCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DCD             >
 158+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DCD 12          >                db      18
 159+ 6DCE                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6DCE             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DCE             >
 159+ 6DCE             >                // dummy db directives used to calculate length of namec
 159+ 6DCE 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6DD2 4C 49 4E 4B >
 159+ 6DD6             >len_NFA         defl    $ - temp_NFA
 159+ 6DD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DCE             >
 159+ 6DCE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DCF 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6DD3 4C 49 4E 4B >
 159+ 6DD7             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DD6 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DD7             >
 159+ 6DD7 C6 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DD9             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DD9 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DDB             >                else
 159+ 6DDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DDB             >
 159+ 6DDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DDB 14          >                db      20
 160+ 6DDC                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6DDC             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6DDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DDC             >
 160+ 6DDC             >                // dummy db directives used to calculate length of namec
 160+ 6DDC 46 49 52 53 >                db      "FIRST"
 160+ 6DE0 54          >
 160+ 6DE1             >len_NFA         defl    $ - temp_NFA
 160+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DDC             >
 160+ 6DDC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DDD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6DE1 54          >
 160+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DE1 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DE2             >
 160+ 6DE2 CE 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DE4             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DE4 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DE6             >                else
 160+ 6DE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DE6             >
 160+ 6DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DE6 16          >                db      22
 161+ 6DE7                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6DE7             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DE7             >
 161+ 6DE7             >                // dummy db directives used to calculate length of namec
 161+ 6DE7 4C 49 4D 49 >                db      "LIMIT"
 161+ 6DEB 54          >
 161+ 6DEC             >len_NFA         defl    $ - temp_NFA
 161+ 6DEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DE7             >
 161+ 6DE7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DE8 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6DEC 54          >
 161+ 6DED             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DEC D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DED             >
 161+ 6DED DC 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DEF             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DEF FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DF1             >                else
 161+ 6DF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DF1             >
 161+ 6DF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DF1 18          >                db      24
 162+ 6DF2                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6DF2             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6DF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DF2             >
 162+ 6DF2             >                // dummy db directives used to calculate length of namec
 162+ 6DF2 45 58 50    >                db      "EXP"
 162+ 6DF5             >len_NFA         defl    $ - temp_NFA
 162+ 6DF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DF2             >
 162+ 6DF2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DF3 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6DF6             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF5 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DF6             >
 162+ 6DF6 E7 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DF8             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DF8 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DFA             >                else
 162+ 6DFA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DFA             >
 162+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DFA 1A          >                db      26
 163+ 6DFB                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6DFB             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DFB             >
 163+ 6DFB             >                // dummy db directives used to calculate length of namec
 163+ 6DFB 4E 4D 4F 44 >                db      "NMODE"
 163+ 6DFF 45          >
 163+ 6E00             >len_NFA         defl    $ - temp_NFA
 163+ 6E00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DFB             >
 163+ 6DFB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DFC 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6E00 45          >
 163+ 6E01             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E00 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E01             >
 163+ 6E01 F2 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E03             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E03 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E05             >                else
 163+ 6E05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E05             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E05             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E05             >
 163+ 6E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E05 1C          >                db      28
 164+ 6E06                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6E06             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6E06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E06             >
 164+ 6E06             >                // dummy db directives used to calculate length of namec
 164+ 6E06 42 4C 4B    >                db      "BLK"
 164+ 6E09             >len_NFA         defl    $ - temp_NFA
 164+ 6E09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E06             >
 164+ 6E06 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E07 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6E0A             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E09 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E0A             >
 164+ 6E0A FB 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E0C             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E0C FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E0E             >                else
 164+ 6E0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E0E             >
 164+ 6E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E0E 1E          >                db      30
 165+ 6E0F                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6E0F             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6E0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E0F             >
 165+ 6E0F             >                // dummy db directives used to calculate length of namec
 165+ 6E0F 3E 49 4E    >                db      ">IN"
 165+ 6E12             >len_NFA         defl    $ - temp_NFA
 165+ 6E12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E0F             >
 165+ 6E0F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E10 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6E13             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E12 CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E13             >
 165+ 6E13 06 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E15             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E15 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E17             >                else
 165+ 6E17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E17             >
 165+ 6E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E17 20          >                db      32
 166+ 6E18                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6E18             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6E18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E18             >
 166+ 6E18             >                // dummy db directives used to calculate length of namec
 166+ 6E18 4F 55 54    >                db      "OUT"
 166+ 6E1B             >len_NFA         defl    $ - temp_NFA
 166+ 6E1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E18             >
 166+ 6E18 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E19 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6E1C             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E1B D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E1C             >
 166+ 6E1C 0F 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E1E             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E1E FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E20             >                else
 166+ 6E20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E20             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E20             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E20             >
 166+ 6E20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E20 22          >                db      34
 167+ 6E21                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6E21             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6E21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E21             >
 167+ 6E21             >                // dummy db directives used to calculate length of namec
 167+ 6E21 53 43 52    >                db      "SCR"
 167+ 6E24             >len_NFA         defl    $ - temp_NFA
 167+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E21             >
 167+ 6E21 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E22 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E24 D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E25             >
 167+ 6E25 18 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E27             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E27 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E29             >                else
 167+ 6E29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E29             >
 167+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E29 24          >                db      36
 168+ 6E2A                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6E2A             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6E2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E2A             >
 168+ 6E2A             >                // dummy db directives used to calculate length of namec
 168+ 6E2A 4F 46 46 53 >                db      "OFFSET"
 168+ 6E2E 45 54       >
 168+ 6E30             >len_NFA         defl    $ - temp_NFA
 168+ 6E30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E2A             >
 168+ 6E2A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E2B 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6E2F 45 54       >
 168+ 6E31             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E30 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E31             >
 168+ 6E31 21 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E33             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E33 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E35             >                else
 168+ 6E35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E35             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E35             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E35             >
 168+ 6E35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E35 26          >                db      38
 169+ 6E36                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6E36             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6E36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E36             >
 169+ 6E36             >                // dummy db directives used to calculate length of namec
 169+ 6E36 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6E3A 45 58 54    >
 169+ 6E3D             >len_NFA         defl    $ - temp_NFA
 169+ 6E3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E36             >
 169+ 6E36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E37 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6E3B 45 58 54    >
 169+ 6E3E             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E3D D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E3E             >
 169+ 6E3E 2A 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E40             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E40 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E42             >                else
 169+ 6E42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E42             >
 169+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E42 28          >                db      40
 170+ 6E43                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6E43             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6E43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E43             >
 170+ 6E43             >                // dummy db directives used to calculate length of namec
 170+ 6E43 43 55 52 52 >                db      "CURRENT"
 170+ 6E47 45 4E 54    >
 170+ 6E4A             >len_NFA         defl    $ - temp_NFA
 170+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E43             >
 170+ 6E43 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E44 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6E48 45 4E 54    >
 170+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E4A D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E4B             >
 170+ 6E4B 36 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E4D             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E4D FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E4F             >                else
 170+ 6E4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E4F             >
 170+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E4F 2A          >                db      42
 171+ 6E50                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6E50             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E50             >
 171+ 6E50             >                // dummy db directives used to calculate length of namec
 171+ 6E50 53 54 41 54 >                db      "STATE"
 171+ 6E54 45          >
 171+ 6E55             >len_NFA         defl    $ - temp_NFA
 171+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E50             >
 171+ 6E50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E51 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6E55 45          >
 171+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E55 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E56             >
 171+ 6E56 43 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E58             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E58 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E5A             >                else
 171+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E5A             >
 171+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E5A 2C          >                db      44
 172+ 6E5B                              User_Def BASE       , "BASE"      , 46 //
 172+ 6E5B             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E5B             >
 172+ 6E5B             >                // dummy db directives used to calculate length of namec
 172+ 6E5B 42 41 53 45 >                db      "BASE"
 172+ 6E5F             >len_NFA         defl    $ - temp_NFA
 172+ 6E5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E5B             >
 172+ 6E5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E5C 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6E60             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E5F C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E60             >
 172+ 6E60 50 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E62             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E62 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E64             >                else
 172+ 6E64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E64             >
 172+ 6E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E64 2E          >                db      46
 173+ 6E65                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6E65             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6E65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E65             >
 173+ 6E65             >                // dummy db directives used to calculate length of namec
 173+ 6E65 44 50 4C    >                db      "DPL"
 173+ 6E68             >len_NFA         defl    $ - temp_NFA
 173+ 6E68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E65             >
 173+ 6E65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E66 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6E69             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E68 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E69             >
 173+ 6E69 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E6B             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E6B FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E6D             >                else
 173+ 6E6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E6D             >
 173+ 6E6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E6D 30          >                db      48
 174+ 6E6E                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6E6E             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6E6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E6E             >
 174+ 6E6E             >                // dummy db directives used to calculate length of namec
 174+ 6E6E 46 4C 44    >                db      "FLD"
 174+ 6E71             >len_NFA         defl    $ - temp_NFA
 174+ 6E71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E6E             >
 174+ 6E6E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E6F 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6E72             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E71 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E72             >
 174+ 6E72 65 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E74             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E74 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E76             >                else
 174+ 6E76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E76             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E76             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E76             >
 174+ 6E76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E76 32          >                db      50
 175+ 6E77                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6E77             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6E77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E77             >
 175+ 6E77             >                // dummy db directives used to calculate length of namec
 175+ 6E77 43 53 50    >                db      "CSP"
 175+ 6E7A             >len_NFA         defl    $ - temp_NFA
 175+ 6E7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E77             >
 175+ 6E77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E78 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6E7B             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E7A D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E7B             >
 175+ 6E7B 6E 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E7D             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E7D FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E7F             >                else
 175+ 6E7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E7F             >
 175+ 6E7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E7F 34          >                db      52
 176+ 6E80                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6E80             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6E80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E80             >
 176+ 6E80             >                // dummy db directives used to calculate length of namec
 176+ 6E80 52 23       >                db      "R#"
 176+ 6E82             >len_NFA         defl    $ - temp_NFA
 176+ 6E82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E80             >
 176+ 6E80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E81 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6E83             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E82 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E83             >
 176+ 6E83 77 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E85             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E85 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E87             >                else
 176+ 6E87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E87             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E87             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E87             >
 176+ 6E87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E87 36          >                db      54
 177+ 6E88                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6E88             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6E88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E88             >
 177+ 6E88             >                // dummy db directives used to calculate length of namec
 177+ 6E88 48 4C 44    >                db      "HLD"
 177+ 6E8B             >len_NFA         defl    $ - temp_NFA
 177+ 6E8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E88             >
 177+ 6E88 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E89 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6E8C             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E8B C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E8C             >
 177+ 6E8C 80 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E8E             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E8E FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E90             >                else
 177+ 6E90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E90             >
 177+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E90 38          >                db      56
 178+ 6E91                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6E91             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E91             >
 178+ 6E91             >                // dummy db directives used to calculate length of namec
 178+ 6E91 55 53 45    >                db      "USE"
 178+ 6E94             >len_NFA         defl    $ - temp_NFA
 178+ 6E94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E91             >
 178+ 6E91 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E92 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6E95             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E94 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E95             >
 178+ 6E95 88 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E97             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E97 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E99             >                else
 178+ 6E99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E99             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E99             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E99             >
 178+ 6E99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E99 3A          >                db      58
 179+ 6E9A                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E9A             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E9A             >
 179+ 6E9A             >                // dummy db directives used to calculate length of namec
 179+ 6E9A 50 52 45 56 >                db      "PREV"
 179+ 6E9E             >len_NFA         defl    $ - temp_NFA
 179+ 6E9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E9A             >
 179+ 6E9A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E9B 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E9F             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E9E D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E9F             >
 179+ 6E9F 91 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EA1             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EA1 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EA3             >                else
 179+ 6EA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EA3             >
 179+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EA3 3C          >                db      60
 180+ 6EA4                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6EA4             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6EA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EA4             >
 180+ 6EA4             >                // dummy db directives used to calculate length of namec
 180+ 6EA4 4C 50       >                db      "LP"
 180+ 6EA6             >len_NFA         defl    $ - temp_NFA
 180+ 6EA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EA4             >
 180+ 6EA4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EA5 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6EA7             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EA6 D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EA7             >
 180+ 6EA7 9A 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EA9             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EA9 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EAB             >                else
 180+ 6EAB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EAB             >
 180+ 6EAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EAB 3E          >                db      62
 181+ 6EAC                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6EAC             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6EAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EAC             >
 181+ 6EAC             >                // dummy db directives used to calculate length of namec
 181+ 6EAC 50 4C 41 43 >                db      "PLACE"
 181+ 6EB0 45          >
 181+ 6EB1             >len_NFA         defl    $ - temp_NFA
 181+ 6EB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EAC             >
 181+ 6EAC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EAD 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6EB1 45          >
 181+ 6EB2             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EB1 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EB2             >
 181+ 6EB2 A4 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EB4             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EB4 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EB6             >                else
 181+ 6EB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EB6             >
 181+ 6EB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EB6 40          >                db      64
 182+ 6EB7                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6EB7             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6EB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EB7             >
 182+ 6EB7             >                // dummy db directives used to calculate length of namec
 182+ 6EB7 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6EBB 43 45 2D 49 >
 182+ 6EBF 44          >
 182+ 6EC0             >len_NFA         defl    $ - temp_NFA
 182+ 6EC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EB7             >
 182+ 6EB7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EB8 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6EBC 43 45 2D 49 >
 182+ 6EC0 44          >
 182+ 6EC1             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EC0 C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EC1             >
 182+ 6EC1 AC 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EC3             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EC3 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6EC5             >                else
 182+ 6EC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6EC5             >
 182+ 6EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6EC5 42          >                db      66
 183+ 6EC6                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6EC6             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6EC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6EC6             >
 183+ 6EC6             >                // dummy db directives used to calculate length of namec
 183+ 6EC6 53 50 41 4E >                db      "SPAN"
 183+ 6ECA             >len_NFA         defl    $ - temp_NFA
 183+ 6ECA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6EC6             >
 183+ 6EC6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6EC7 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6ECB             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6ECA CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6ECB             >
 183+ 6ECB B7 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6ECD             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6ECD FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6ECF             >                else
 183+ 6ECF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6ECF             >
 183+ 6ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6ECF 44          >                db      68
 184+ 6ED0                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6ED0             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6ED0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6ED0             >
 184+ 6ED0             >                // dummy db directives used to calculate length of namec
 184+ 6ED0 48 41 4E 44 >                db      "HANDLER"
 184+ 6ED4 4C 45 52    >
 184+ 6ED7             >len_NFA         defl    $ - temp_NFA
 184+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6ED0             >
 184+ 6ED0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6ED1 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6ED5 4C 45 52    >
 184+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6ED7 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6ED8             >
 184+ 6ED8 C6 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EDA             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EDA FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EDC             >                else
 184+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EDC             >
 184+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EDC 46          >                db      70
 185+ 6EDD                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6EDD             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6EDD             >
 185+ 6EDD             >                // dummy db directives used to calculate length of namec
 185+ 6EDD 48 50       >                db      "HP"
 185+ 6EDF             >len_NFA         defl    $ - temp_NFA
 185+ 6EDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6EDD             >
 185+ 6EDD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6EDE 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6EE0             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6EDF D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6EE0             >
 185+ 6EE0 D0 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6EE2             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6EE2 FD 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6EE4             >                else
 185+ 6EE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6EE4             >
 185+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6EE4 48          >                db      72
 186+ 6EE5
 187+ 6EE5              //  ______________________________________________________________________
 188+ 6EE5              //
 189+ 6EE5              // here         -- a
 190+ 6EE5                              Colon_Def HERE, "HERE", is_normal
 190+ 6EE5             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6EE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6EE5             >
 190+ 6EE5             >                // dummy db directives used to calculate length of namec
 190+ 6EE5 48 45 52 45 >                db      "HERE"
 190+ 6EE9             >len_NFA         defl    $ - temp_NFA
 190+ 6EE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6EE5             >
 190+ 6EE5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6EE6 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6EEA             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6EE9 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6EEA             >
 190+ 6EEA DD 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6EEC             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6EEC 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6EEE             >                else
 190+ 6EEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 190+ 6EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6EEE             >
 190+ 6EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6EEE CB 6D A5 6B                  dw      DP, FETCH               // dp @
 192+ 6EF2 AD 69                        dw      EXIT                    // ;
 193+ 6EF4
 194+ 6EF4              //  ______________________________________________________________________
 195+ 6EF4              //
 196+ 6EF4              // allot        n --
 197+ 6EF4                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6EF4             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6EF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6EF4             >
 197+ 6EF4             >                // dummy db directives used to calculate length of namec
 197+ 6EF4 41 4C 4C 4F >                db      "ALLOT"
 197+ 6EF8 54          >
 197+ 6EF9             >len_NFA         defl    $ - temp_NFA
 197+ 6EF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6EF4             >
 197+ 6EF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6EF5 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6EF9 54          >
 197+ 6EFA             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6EF9 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6EFA             >
 197+ 6EFA E5 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6EFC             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6EFC 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6EFE             >                else
 197+ 6EFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 6EFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6EFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6EFE             >
 197+ 6EFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6EFE CB 6D 82 6B                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6F02 AD 69                        dw      EXIT                    // ;
 200+ 6F04
 201+ 6F04              //  ______________________________________________________________________
 202+ 6F04              //
 203+ 6F04              // comma        n --
 204+ 6F04                              Colon_Def COMMA, ",", is_normal
 204+ 6F04             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6F04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6F04             >
 204+ 6F04             >                // dummy db directives used to calculate length of namec
 204+ 6F04 2C          >                db      ","
 204+ 6F05             >len_NFA         defl    $ - temp_NFA
 204+ 6F05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6F04             >
 204+ 6F04 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6F05 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6F06             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6F05 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6F06             >
 204+ 6F06 F4 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6F08             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6F08 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6F0A             >                else
 204+ 6F0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 204+ 6F0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6F0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6F0A             >
 204+ 6F0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6F0A EC 6E B2 6B                  dw      HERE, STORE             // here !
 206+ 6F0E 1D 6D FC 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6F12 AD 69                        dw      EXIT                    // ;
 208+ 6F14
 209+ 6F14              //  ______________________________________________________________________
 210+ 6F14              //
 211+ 6F14              // ccomma       c --
 212+ 6F14                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6F14             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6F14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F14             >
 212+ 6F14             >                // dummy db directives used to calculate length of namec
 212+ 6F14 43 2C       >                db      "C,"
 212+ 6F16             >len_NFA         defl    $ - temp_NFA
 212+ 6F16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F14             >
 212+ 6F14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F15 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6F17             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F16 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F17             >
 212+ 6F17 04 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F19             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F19 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6F1B             >                else
 212+ 6F1B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F1B             >
 212+ 6F1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F1B EC 6E CE 6B                  dw      HERE, CSTORE            // here c!
 214+ 6F1F 15 6D FC 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6F23 AD 69                        dw      EXIT                    // ;
 216+ 6F25
 217+ 6F25              //  ______________________________________________________________________
 218+ 6F25              //
 219+ 6F25              // s>d          n -- d
 220+ 6F25              // converts a single precision integer in a double precision
 221+ 6F25                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6F25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6F25             >
 221+ 6F25             >                // dummy db directives used to calculate length of namec
 221+ 6F25 53 3E 44    >                db      "S>D"
 221+ 6F28             >len_NFA         defl    $ - temp_NFA
 221+ 6F28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6F25             >
 221+ 6F25 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6F26 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6F29             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6F28 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6F29             >
 221+ 6F29 14 6F       >                dw      last_NFA            // Link to previous definition Name
 221+ 6F2B             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6F2B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 221+ 6F2B             >                else
 221+ 6F2B 2D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 221+ 6F2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6F2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6F2D             >
 221+ 6F2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6F2D D1                           pop     de
 223+ 6F2E 21 00 00                     ld      hl, 0
 224+ 6F31 7A                           ld      a, d
 225+ 6F32 E6 80                        and     $80
 226+ 6F34 28 01                        jr      z, S_to_D_Skip
 227+ 6F36 2B                           dec     hl                  // $FFFF
 228+ 6F37              S_to_D_Skip:
 229+ 6F37 D5                           push    de
 230+ 6F38 E5                           push    hl
 231+ 6F39                              next
 231+ 6F39 DD E9       >                jp      (ix)
 232+ 6F3B
 233+ 6F3B              //  ______________________________________________________________________
 234+ 6F3B              //
 235+ 6F3B              // -            n1 n2 -- n3
 236+ 6F3B              // subtraction
 237+ 6F3B                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6F3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6F3B             >
 237+ 6F3B             >                // dummy db directives used to calculate length of namec
 237+ 6F3B 2D          >                db      "-"
 237+ 6F3C             >len_NFA         defl    $ - temp_NFA
 237+ 6F3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6F3B             >
 237+ 6F3B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6F3C 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6F3D             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6F3C AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6F3D             >
 237+ 6F3D 25 6F       >                dw      last_NFA            // Link to previous definition Name
 237+ 6F3F             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6F3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 237+ 6F3F             >                else
 237+ 6F3F 41 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 6F41             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6F41             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6F41             >
 237+ 6F41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6F41 D1                           pop     de
 239+ 6F42 E1                           pop     hl
 240+ 6F43 A7                           and     a
 241+ 6F44 ED 52                        sbc     hl, de
 242+ 6F46
 243+ 6F46                              psh1
 243+ 6F46 E5          >                push    hl
 243+ 6F47 DD E9       >                jp      (ix)
 244+ 6F49
 245+ 6F49              //  ______________________________________________________________________
 246+ 6F49              //
 247+ 6F49              // =            n1 n2 -- n3
 248+ 6F49              // equals
 249+ 6F49                              Colon_Def EQUALS, "=", is_normal
 249+ 6F49             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6F49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6F49             >
 249+ 6F49             >                // dummy db directives used to calculate length of namec
 249+ 6F49 3D          >                db      "="
 249+ 6F4A             >len_NFA         defl    $ - temp_NFA
 249+ 6F4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6F49             >
 249+ 6F49 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6F4A 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6F4B             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6F4A BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6F4B             >
 249+ 6F4B 3B 6F       >                dw      last_NFA            // Link to previous definition Name
 249+ 6F4D             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6F4D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6F4F             >                else
 249+ 6F4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 6F4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6F4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6F4F             >
 249+ 6F4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6F4F 3F 6F EF 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6F53 AD 69                        dw      EXIT                    // ;
 252+ 6F55
 253+ 6F55              //  ______________________________________________________________________
 254+ 6F55              //
 255+ 6F55              // u<           u1 u2 -- u3
 256+ 6F55              // unsigned less-than
 257+ 6F55                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6F55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6F55             >
 257+ 6F55             >                // dummy db directives used to calculate length of namec
 257+ 6F55 55 3C       >                db      "U<"
 257+ 6F57             >len_NFA         defl    $ - temp_NFA
 257+ 6F57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6F55             >
 257+ 6F55 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6F56 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6F58             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6F57 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6F58             >
 257+ 6F58 49 6F       >                dw      last_NFA            // Link to previous definition Name
 257+ 6F5A             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6F5A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 257+ 6F5A             >                else
 257+ 6F5A 5C 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 257+ 6F5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6F5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6F5C             >
 257+ 6F5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6F5C D1                           pop     de
 259+ 6F5D E1                           pop     hl
 260+ 6F5E A7                           and     a
 261+ 6F5F ED 52                        sbc     hl, de
 262+ 6F61 21 FF FF                     ld      hl, -1
 263+ 6F64 38 01                        jr      c, ULess_Skip
 264+ 6F66 23                               inc     hl
 265+ 6F67              ULess_Skip:
 266+ 6F67
 267+ 6F67                              psh1
 267+ 6F67 E5          >                push    hl
 267+ 6F68 DD E9       >                jp      (ix)
 268+ 6F6A
 269+ 6F6A              //  ______________________________________________________________________
 270+ 6F6A              //
 271+ 6F6A              // <           n1 n2 -- n3
 272+ 6F6A              // less-than
 273+ 6F6A                              New_Def LESS, "<", is_code, is_normal
 273+ 6F6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6F6A             >
 273+ 6F6A             >                // dummy db directives used to calculate length of namec
 273+ 6F6A 3C          >                db      "<"
 273+ 6F6B             >len_NFA         defl    $ - temp_NFA
 273+ 6F6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6F6A             >
 273+ 6F6A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6F6B 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6F6C             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6F6B BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6F6C             >
 273+ 6F6C 55 6F       >                dw      last_NFA            // Link to previous definition Name
 273+ 6F6E             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6F6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 273+ 6F6E             >                else
 273+ 6F6E 70 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 273+ 6F70             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6F70             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6F70             >
 273+ 6F70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6F70 D1                           pop     de
 275+ 6F71 E1                           pop     hl
 276+ 6F72 7C                           ld      a, h
 277+ 6F73 EE 80                        xor     $80
 278+ 6F75 67                           ld      h, a
 279+ 6F76 7A                           ld      a, d
 280+ 6F77 EE 80                        xor     $80
 281+ 6F79 57                           ld      d, a
 282+ 6F7A              //              and     a
 283+ 6F7A ED 52                        sbc     hl, de
 284+ 6F7C ED 62                        sbc     hl, hl
 285+ 6F7E                              psh1
 285+ 6F7E E5          >                push    hl
 285+ 6F7F DD E9       >                jp      (ix)
 286+ 6F81
 287+ 6F81              //  ______________________________________________________________________
 288+ 6F81              //
 289+ 6F81              // >            n1 n2 -- n3
 290+ 6F81              // greater than
 291+ 6F81                              Colon_Def GREATER, ">", is_normal
 291+ 6F81             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6F81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6F81             >
 291+ 6F81             >                // dummy db directives used to calculate length of namec
 291+ 6F81 3E          >                db      ">"
 291+ 6F82             >len_NFA         defl    $ - temp_NFA
 291+ 6F82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6F81             >
 291+ 6F81 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6F82 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6F83             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6F82 BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6F83             >
 291+ 6F83 6A 6F       >                dw      last_NFA            // Link to previous definition Name
 291+ 6F85             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6F85 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6F87             >                else
 291+ 6F87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6F87             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6F87             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6F87             >
 291+ 6F87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6F87 05 6B 6E 6F                  dw      SWAP, LESS              // swap <
 293+ 6F8B AD 69                        dw      EXIT                    // ;
 294+ 6F8D              //  ______________________________________________________________________
 295+ 6F8D              //
 296+ 6F8D              // min          n1 n2 -- n3
 297+ 6F8D              // minimum between n1 and n2
 298+ 6F8D                              Colon_Def MIN, "MIN" , is_normal
 298+ 6F8D             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6F8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6F8D             >
 298+ 6F8D             >                // dummy db directives used to calculate length of namec
 298+ 6F8D 4D 49 4E    >                db      "MIN"
 298+ 6F90             >len_NFA         defl    $ - temp_NFA
 298+ 6F90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6F8D             >
 298+ 6F8D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6F8E 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6F91             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6F90 CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6F91             >
 298+ 6F91 81 6F       >                dw      last_NFA            // Link to previous definition Name
 298+ 6F93             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6F93 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F95             >                else
 298+ 6F95 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 298+ 6F95             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F95             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F95             >
 298+ 6F95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F95 73 6B                        dw      TWO_DUP                 // 2dup
 300+ 6F97 85 6F                        dw      GREATER                 // >
 301+ 6F99 2C 64                        dw      ZBRANCH
 302+ 6F9B 04 00                        dw      Min_Skip - $   // if
 303+ 6F9D 05 6B                        dw          SWAP                //      swap
 304+ 6F9F              Min_Skip:                                       // endif
 305+ 6F9F DD 6A                        dw      DROP                    // drop
 306+ 6FA1 AD 69                        dw      EXIT                    // ;
 307+ 6FA3
 308+ 6FA3              //  ______________________________________________________________________
 309+ 6FA3              //
 310+ 6FA3              // max          n1 n2 -- n3
 311+ 6FA3              // maximum between n1 and n2
 312+ 6FA3                              Colon_Def MAX, "MAX", is_normal
 312+ 6FA3             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6FA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6FA3             >
 312+ 6FA3             >                // dummy db directives used to calculate length of namec
 312+ 6FA3 4D 41 58    >                db      "MAX"
 312+ 6FA6             >len_NFA         defl    $ - temp_NFA
 312+ 6FA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6FA3             >
 312+ 6FA3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6FA4 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6FA7             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6FA6 D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6FA7             >
 312+ 6FA7 8D 6F       >                dw      last_NFA            // Link to previous definition Name
 312+ 6FA9             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6FA9 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6FAB             >                else
 312+ 6FAB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 312+ 6FAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6FAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6FAB             >
 312+ 6FAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6FAB 73 6B                        dw      TWO_DUP                 // 2dup
 314+ 6FAD 6E 6F                        dw      LESS                    // <
 315+ 6FAF 2C 64                        dw      ZBRANCH
 316+ 6FB1 04 00                        dw      Max_Skip - $   // if
 317+ 6FB3 05 6B                        dw          SWAP                //      swap
 318+ 6FB5              Max_Skip:                                       // endif
 319+ 6FB5 DD 6A                        dw      DROP                    // drop
 320+ 6FB7 AD 69                        dw      EXIT                    // ;
 321+ 6FB9
 322+ 6FB9              //  ______________________________________________________________________
 323+ 6FB9              //
 324+ 6FB9              // ?dup         n -- 0 | n n
 325+ 6FB9              // duplicate if not zero
 326+ 6FB9                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6FB9             >
 326+ 6FB9             >                // dummy db directives used to calculate length of namec
 326+ 6FB9 3F 44 55 50 >                db      "?DUP"
 326+ 6FBD             >len_NFA         defl    $ - temp_NFA
 326+ 6FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6FB9             >
 326+ 6FB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6FBA 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6FBE             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6FBD D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6FBE             >
 326+ 6FBE A3 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6FC0             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6FC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 326+ 6FC0             >                else
 326+ 6FC0 C2 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 326+ 6FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6FC2             >
 326+ 6FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6FC2              QDup_Ptr:
 328+ 6FC2 E1                           pop     hl
 329+ 6FC3 7C                           ld      a, h
 330+ 6FC4 B5                           or      l
 331+ 6FC5 28 01                        jr      z, QDup_Skip
 332+ 6FC7 E5                               push    hl
 333+ 6FC8              QDup_Skip:
 334+ 6FC8                              psh1
 334+ 6FC8 E5          >                push    hl
 334+ 6FC9 DD E9       >                jp      (ix)
 335+ 6FCB
 336+ 6FCB              //  ______________________________________________________________________
 337+ 6FCB              //
 338+ 6FCB              // -dup         n -- 0 | n n
 339+ 6FCB              // duplicate if not zero
 340+ 6FCB                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 340+ 6FCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6FCB             >
 340+ 6FCB             >                // dummy db directives used to calculate length of namec
 340+ 6FCB 2D 44 55 50 >                db      "-DUP"
 340+ 6FCF             >len_NFA         defl    $ - temp_NFA
 340+ 6FCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6FCB             >
 340+ 6FCB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6FCC 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6FD0             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6FCF D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6FD0             >
 340+ 6FD0 B9 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6FD2             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6FD2 C2 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 340+ 6FD4             >                else
 340+ 6FD4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 6FD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6FD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6FD4             >
 340+ 6FD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6FD4
 342+ 6FD4              //  ______________________________________________________________________
 343+ 6FD4              //
 344+ 6FD4              // emit         c --
 345+ 6FD4                              Colon_Def EMIT, "EMIT", is_normal
 345+ 6FD4             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 345+ 6FD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 6FD4             >
 345+ 6FD4             >                // dummy db directives used to calculate length of namec
 345+ 6FD4 45 4D 49 54 >                db      "EMIT"
 345+ 6FD8             >len_NFA         defl    $ - temp_NFA
 345+ 6FD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 6FD4             >
 345+ 6FD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 6FD5 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 345+ 6FD9             >                org     $-1                 // alter last byte of Name just above to set
 345+ 6FD8 D4          >                db      {b $} | END_BIT     // msb as name end
 345+ 6FD9             >
 345+ 6FD9 CB 6F       >                dw      last_NFA            // Link to previous definition Name
 345+ 6FDB             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 6FDB 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 6FDD             >                else
 345+ 6FDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 6FDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 6FDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 6FDD             >
 345+ 6FDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 6FDD 52 66                        dw      C_EMIT                      // (?emit)
 347+ 6FDF C0 6F                        dw      QDUP                        // ?dup
 348+ 6FE1                                                                  // if
 349+ 6FE1 2C 64                        dw      ZBRANCH
 350+ 6FE3 0A 00                        dw      Emit_Skip - $
 351+ 6FE5 13 66                        dw          EMITC                   //      emitc
 352+ 6FE7 15 6D                        dw          ONE                     //      1
 353+ 6FE9 1E 6E 82 6B                  dw          OUT, PLUSSTORE        //      out +!
 354+ 6FED              Emit_Skip:                                          // endif
 355+ 6FED AD 69                        dw      EXIT                        // ;
 356+ 6FEF
 357+ 6FEF              //  ______________________________________________________________________
 358+ 6FEF              //
 359+ 6FEF              // space        --
 360+ 6FEF                              Colon_Def SPACE, "SPACE", is_normal
 360+ 6FEF             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 360+ 6FEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 360+ 6FEF             >
 360+ 6FEF             >                // dummy db directives used to calculate length of namec
 360+ 6FEF 53 50 41 43 >                db      "SPACE"
 360+ 6FF3 45          >
 360+ 6FF4             >len_NFA         defl    $ - temp_NFA
 360+ 6FF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 360+ 6FEF             >
 360+ 6FEF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 360+ 6FF0 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 360+ 6FF4 45          >
 360+ 6FF5             >                org     $-1                 // alter last byte of Name just above to set
 360+ 6FF4 C5          >                db      {b $} | END_BIT     // msb as name end
 360+ 6FF5             >
 360+ 6FF5 D4 6F       >                dw      last_NFA            // Link to previous definition Name
 360+ 6FF7             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 360+ 6FF7 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 360+ 6FF9             >                else
 360+ 6FF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 360+ 6FF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 360+ 6FF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 360+ 6FF9             >
 360+ 6FF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 361+ 6FF9 37 6D DB 6F                  dw      BL, EMIT                // bl emit
 362+ 6FFD AD 69                        dw      EXIT                    // ;
 363+ 6FFF
 364+ 6FFF              //  ______________________________________________________________________
 365+ 6FFF              //
 366+ 6FFF              // traverse     a n -- a
 367+ 6FFF              // A dictionary entry is structured as follows
 368+ 6FFF              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 369+ 6FFF              //      +1   word name, last character is toggled with $80
 370+ 6FFF              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 371+ 6FFF              // CFA: +3+n routine address. Colon definitions here have pointer to code
 372+ 6FFF              // PFA: +5+n "is_code", definitions have no PFA.
 373+ 6FFF              //
 374+ 6FFF                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 374+ 6FFF             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 374+ 6FFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ 6FFF             >
 374+ 6FFF             >                // dummy db directives used to calculate length of namec
 374+ 6FFF 54 52 41 56 >                db      "TRAVERSE"
 374+ 7003 45 52 53 45 >
 374+ 7007             >len_NFA         defl    $ - temp_NFA
 374+ 7007             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ 6FFF             >
 374+ 6FFF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ 7000 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 374+ 7004 45 52 53 45 >
 374+ 7008             >                org     $-1                 // alter last byte of Name just above to set
 374+ 7007 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ 7008             >
 374+ 7008 EF 6F       >                dw      last_NFA            // Link to previous definition Name
 374+ 700A             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 700A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 700C             >                else
 374+ 700C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 374+ 700C             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 700C             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 700C             >
 374+ 700C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 700C 05 6B                        dw      SWAP                    // swap
 376+ 700E              Traverse_Begin:                                 // begin
 377+ 700E CD 6A 32 6A                  dw          OVER, PLUS          //      over +
 378+ 7012 A9 63 7F 00                  dw          LIT, 127            //      127
 379+ 7016 CD 6A C0 6B                  dw          OVER, CFETCH        //      over @
 380+ 701A 6E 6F                        dw          LESS                //      <
 381+ 701C                                                              // until
 382+ 701C 2C 64                        dw      ZBRANCH
 383+ 701E F0 FF                        dw      Traverse_Begin - $
 384+ 7020 E8 6A                        dw      NIP                     //  nip
 385+ 7022 AD 69                        dw      EXIT                    //  ;
 386+ 7024
 387+ 7024              //  ______________________________________________________________________
 388+ 7024              //
 389+ 7024              // latest       -- nfa
 390+ 7024                              Colon_Def LATEST, "LATEST", is_normal
 390+ 7024             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 390+ 7024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 390+ 7024             >
 390+ 7024             >                // dummy db directives used to calculate length of namec
 390+ 7024 4C 41 54 45 >                db      "LATEST"
 390+ 7028 53 54       >
 390+ 702A             >len_NFA         defl    $ - temp_NFA
 390+ 702A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 390+ 7024             >
 390+ 7024 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 390+ 7025 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 390+ 7029 53 54       >
 390+ 702B             >                org     $-1                 // alter last byte of Name just above to set
 390+ 702A D4          >                db      {b $} | END_BIT     // msb as name end
 390+ 702B             >
 390+ 702B FF 6F       >                dw      last_NFA            // Link to previous definition Name
 390+ 702D             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 390+ 702D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 390+ 702F             >                else
 390+ 702F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 390+ 702F             >                endif           ; ok        // for other definitions it "points" the correct handler
 390+ 702F             >                // Use of "; ok" to suppress "warning[fwdref]"
 390+ 702F             >
 390+ 702F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 391+ 702F 4D 6E                        dw      CURRENT                 // current
 392+ 7031 A5 6B A5 6B                  dw      FETCH, FETCH            // @ @
 393+ 7035 AD 69                        dw      EXIT                    // ;
 394+ 7037
 395+ 7037              //  ______________________________________________________________________
 396+ 7037              //
 397+ 7037              // lfa          pfa -- lfa
 398+ 7037                              Colon_Def LFA, "LFA", is_normal
 398+ 7037             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 398+ 7037             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 7037             >
 398+ 7037             >                // dummy db directives used to calculate length of namec
 398+ 7037 4C 46 41    >                db      "LFA"
 398+ 703A             >len_NFA         defl    $ - temp_NFA
 398+ 703A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 7037             >
 398+ 7037 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 7038 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 398+ 703B             >                org     $-1                 // alter last byte of Name just above to set
 398+ 703A C1          >                db      {b $} | END_BIT     // msb as name end
 398+ 703B             >
 398+ 703B 24 70       >                dw      last_NFA            // Link to previous definition Name
 398+ 703D             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 703D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 703F             >                else
 398+ 703F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 398+ 703F             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 703F             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 703F             >
 398+ 703F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 703F 85 6A                        dw      CELL_MINUS              // cell-
 400+ 7041 85 6A                        dw      CELL_MINUS              // cell-
 401+ 7043 AD 69                        dw      EXIT                    // ;
 402+ 7045
 403+ 7045              //  ______________________________________________________________________
 404+ 7045              //
 405+ 7045              // cfa          pfa -- cfa
 406+ 7045                              Colon_Def CFA, "CFA", is_normal
 406+ 7045             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 406+ 7045             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ 7045             >
 406+ 7045             >                // dummy db directives used to calculate length of namec
 406+ 7045 43 46 41    >                db      "CFA"
 406+ 7048             >len_NFA         defl    $ - temp_NFA
 406+ 7048             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ 7045             >
 406+ 7045 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ 7046 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 406+ 7049             >                org     $-1                 // alter last byte of Name just above to set
 406+ 7048 C1          >                db      {b $} | END_BIT     // msb as name end
 406+ 7049             >
 406+ 7049 37 70       >                dw      last_NFA            // Link to previous definition Name
 406+ 704B             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 704B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 406+ 704D             >                else
 406+ 704D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 406+ 704D             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 704D             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 704D             >
 406+ 704D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 704D 85 6A                        dw      CELL_MINUS              // cell-
 408+ 704F AD 69                        dw      EXIT                    // ;
 409+ 7051
 410+ 7051              //  ______________________________________________________________________
 411+ 7051              //
 412+ 7051              // nfa          pfa -- nfa
 413+ 7051                              Colon_Def NFA, "NFA", is_normal
 413+ 7051             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 413+ 7051             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ 7051             >
 413+ 7051             >                // dummy db directives used to calculate length of namec
 413+ 7051 4E 46 41    >                db      "NFA"
 413+ 7054             >len_NFA         defl    $ - temp_NFA
 413+ 7054             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ 7051             >
 413+ 7051 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ 7052 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 413+ 7055             >                org     $-1                 // alter last byte of Name just above to set
 413+ 7054 C1          >                db      {b $} | END_BIT     // msb as name end
 413+ 7055             >
 413+ 7055 45 70       >                dw      last_NFA            // Link to previous definition Name
 413+ 7057             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 7057 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 413+ 7059             >                else
 413+ 7059 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 413+ 7059             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 7059             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 7059             >
 413+ 7059             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 7059 A9 63 05 00                  dw      LIT, 5                  // 5
 415+ 705D 3F 6F                        dw      SUBTRACT                // -
 416+ 705F 2E 6D                        dw      NEG_ONE                 // -1
 417+ 7061 0A 70                        dw      TRAVERSE                // traverse
 418+ 7063 AD 69                        dw      EXIT                    // ;
 419+ 7065
 420+ 7065              //  ______________________________________________________________________
 421+ 7065              //
 422+ 7065              // pfa          nfa -- pfa
 423+ 7065                              Colon_Def PFA, "PFA", is_normal
 423+ 7065             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 423+ 7065             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 423+ 7065             >
 423+ 7065             >                // dummy db directives used to calculate length of namec
 423+ 7065 50 46 41    >                db      "PFA"
 423+ 7068             >len_NFA         defl    $ - temp_NFA
 423+ 7068             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 423+ 7065             >
 423+ 7065 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 423+ 7066 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 423+ 7069             >                org     $-1                 // alter last byte of Name just above to set
 423+ 7068 C1          >                db      {b $} | END_BIT     // msb as name end
 423+ 7069             >
 423+ 7069 51 70       >                dw      last_NFA            // Link to previous definition Name
 423+ 706B             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 423+ 706B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 423+ 706D             >                else
 423+ 706D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 423+ 706D             >                endif           ; ok        // for other definitions it "points" the correct handler
 423+ 706D             >                // Use of "; ok" to suppress "warning[fwdref]"
 423+ 706D             >
 423+ 706D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 424+ 706D 15 6D                        dw      ONE                     // 1
 425+ 706F 0A 70                        dw      TRAVERSE                // traverse
 426+ 7071 A9 63 05 00                  dw      LIT, 5                  // 6
 427+ 7075 32 6A                        dw      PLUS                    // +
 428+ 7077 AD 69                        dw      EXIT                    // ;
 429+ 7079
 430+ 7079              //  ______________________________________________________________________
 431+ 7079              //
 432+ 7079              // >body        cfa -- pfa
 433+ 7079                              Colon_Def TO_BODY, ">BODY", is_normal
 433+ 7079             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 433+ 7079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 433+ 7079             >
 433+ 7079             >                // dummy db directives used to calculate length of namec
 433+ 7079 3E 42 4F 44 >                db      ">BODY"
 433+ 707D 59          >
 433+ 707E             >len_NFA         defl    $ - temp_NFA
 433+ 707E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 433+ 7079             >
 433+ 7079 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 433+ 707A 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 433+ 707E 59          >
 433+ 707F             >                org     $-1                 // alter last byte of Name just above to set
 433+ 707E D9          >                db      {b $} | END_BIT     // msb as name end
 433+ 707F             >
 433+ 707F 65 70       >                dw      last_NFA            // Link to previous definition Name
 433+ 7081             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 433+ 7081 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 433+ 7083             >                else
 433+ 7083 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 433+ 7083             >                endif           ; ok        // for other definitions it "points" the correct handler
 433+ 7083             >                // Use of "; ok" to suppress "warning[fwdref]"
 433+ 7083             >
 433+ 7083             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 434+ 7083 7B 6A                        dw      CELL_PLUS               // cell+
 435+ 7085 AD 69                        dw      EXIT                    // ;
 436+ 7087
 437+ 7087              //  ______________________________________________________________________
 438+ 7087              //
 439+ 7087              // <name        cfa -- nfa
 440+ 7087                              Colon_Def TO_NAME, "<NAME", is_normal
 440+ 7087             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 440+ 7087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ 7087             >
 440+ 7087             >                // dummy db directives used to calculate length of namec
 440+ 7087 3C 4E 41 4D >                db      "<NAME"
 440+ 708B 45          >
 440+ 708C             >len_NFA         defl    $ - temp_NFA
 440+ 708C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ 7087             >
 440+ 7087 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ 7088 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 440+ 708C 45          >
 440+ 708D             >                org     $-1                 // alter last byte of Name just above to set
 440+ 708C C5          >                db      {b $} | END_BIT     // msb as name end
 440+ 708D             >
 440+ 708D 79 70       >                dw      last_NFA            // Link to previous definition Name
 440+ 708F             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 708F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 7091             >                else
 440+ 7091 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 440+ 7091             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 7091             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 7091             >
 440+ 7091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 7091 81 70                        dw      TO_BODY                 // >body
 442+ 7093 57 70                        dw      NFA                     // nfa
 443+ 7095 AD 69                        dw      EXIT                    // ;
 444+ 7097
 445+ 7097              //  ______________________________________________________________________
 446+ 7097              //
 447+ 7097              // !csp         --
 448+ 7097              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 449+ 7097                              Colon_Def STORE_CSP, "!CSP", is_normal
 449+ 7097             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 449+ 7097             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ 7097             >
 449+ 7097             >                // dummy db directives used to calculate length of namec
 449+ 7097 21 43 53 50 >                db      "!CSP"
 449+ 709B             >len_NFA         defl    $ - temp_NFA
 449+ 709B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ 7097             >
 449+ 7097 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ 7098 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 449+ 709C             >                org     $-1                 // alter last byte of Name just above to set
 449+ 709B D0          >                db      {b $} | END_BIT     // msb as name end
 449+ 709C             >
 449+ 709C 87 70       >                dw      last_NFA            // Link to previous definition Name
 449+ 709E             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 709E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 70A0             >                else
 449+ 70A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 449+ 70A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 70A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 70A0             >
 449+ 70A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 70A0 75 69                        dw      SPFETCH                 // sp@
 451+ 70A2 7D 6E B2 6B                  dw      CSP, STORE              // csp !
 452+ 70A6 AD 69                        dw      EXIT                    // ;
 453+ 70A8
 454+ 70A8              //  ______________________________________________________________________
 455+ 70A8              //
 456+ 70A8              // ?error       f n --
 457+ 70A8              // rase error n if flag f it true
 458+ 70A8                              Colon_Def QERROR, "?ERROR", is_normal
 458+ 70A8             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 458+ 70A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 70A8             >
 458+ 70A8             >                // dummy db directives used to calculate length of namec
 458+ 70A8 3F 45 52 52 >                db      "?ERROR"
 458+ 70AC 4F 52       >
 458+ 70AE             >len_NFA         defl    $ - temp_NFA
 458+ 70AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 70A8             >
 458+ 70A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 70A9 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 458+ 70AD 4F 52       >
 458+ 70AF             >                org     $-1                 // alter last byte of Name just above to set
 458+ 70AE D2          >                db      {b $} | END_BIT     // msb as name end
 458+ 70AF             >
 458+ 70AF 97 70       >                dw      last_NFA            // Link to previous definition Name
 458+ 70B1             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 70B1 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 458+ 70B3             >                else
 458+ 70B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 458+ 70B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 70B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 70B3             >
 458+ 70B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 459+ 70B3 05 6B                        dw      SWAP                    // swap
 460+ 70B5                                                              // if
 461+ 70B5 2C 64                        dw      ZBRANCH
 462+ 70B7 08 00                        dw      QError_Else - $
 463+ 70B9 1E 76                        dw          ERROR               //      error  ( is a forward-ref )
 464+ 70BB                                                              // else
 465+ 70BB 15 64                        dw      BRANCH
 466+ 70BD 04 00                        dw      QError_Endif - $
 467+ 70BF              QError_Else:
 468+ 70BF DD 6A                        dw          DROP                //      drop
 469+ 70C1              QError_Endif:                                   // endif
 470+ 70C1 AD 69                        dw      EXIT                    // ;
 471+ 70C3
 472+ 70C3              //  ______________________________________________________________________
 473+ 70C3              //
 474+ 70C3              // ?comp       --
 475+ 70C3              // raise msg #17 if not compiling
 476+ 70C3                              Colon_Def QCOMP, "?COMP", is_normal
 476+ 70C3             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 476+ 70C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 476+ 70C3             >
 476+ 70C3             >                // dummy db directives used to calculate length of namec
 476+ 70C3 3F 43 4F 4D >                db      "?COMP"
 476+ 70C7 50          >
 476+ 70C8             >len_NFA         defl    $ - temp_NFA
 476+ 70C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 476+ 70C3             >
 476+ 70C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 476+ 70C4 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 476+ 70C8 50          >
 476+ 70C9             >                org     $-1                 // alter last byte of Name just above to set
 476+ 70C8 D0          >                db      {b $} | END_BIT     // msb as name end
 476+ 70C9             >
 476+ 70C9 A8 70       >                dw      last_NFA            // Link to previous definition Name
 476+ 70CB             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 476+ 70CB 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 476+ 70CD             >                else
 476+ 70CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 476+ 70CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 476+ 70CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 476+ 70CD             >
 476+ 70CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 477+ 70CD 58 6E A5 6B                  dw      STATE, FETCH            // state @
 478+ 70D1 EF 69                        dw      ZEQUAL                  // 0=
 479+ 70D3 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 480+ 70D7 B1 70                        dw      QERROR                  // ?error
 481+ 70D9 AD 69                        dw      EXIT                    // ;
 482+ 70DB
 483+ 70DB              //  ______________________________________________________________________
 484+ 70DB              //
 485+ 70DB              // ?exec       --
 486+ 70DB              // raise msg #18 if compiling
 487+ 70DB                              Colon_Def QEXEC, "?EXEC", is_normal
 487+ 70DB             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 487+ 70DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ 70DB             >
 487+ 70DB             >                // dummy db directives used to calculate length of namec
 487+ 70DB 3F 45 58 45 >                db      "?EXEC"
 487+ 70DF 43          >
 487+ 70E0             >len_NFA         defl    $ - temp_NFA
 487+ 70E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ 70DB             >
 487+ 70DB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ 70DC 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 487+ 70E0 43          >
 487+ 70E1             >                org     $-1                 // alter last byte of Name just above to set
 487+ 70E0 C3          >                db      {b $} | END_BIT     // msb as name end
 487+ 70E1             >
 487+ 70E1 C3 70       >                dw      last_NFA            // Link to previous definition Name
 487+ 70E3             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 70E3 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 487+ 70E5             >                else
 487+ 70E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 487+ 70E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 70E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 70E5             >
 487+ 70E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 70E5 58 6E A5 6B                  dw      STATE, FETCH            // state @
 489+ 70E9 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 490+ 70ED B1 70                        dw      QERROR                  // ?error
 491+ 70EF AD 69                        dw      EXIT                    // ;
 492+ 70F1
 493+ 70F1              //  ______________________________________________________________________
 494+ 70F1              //
 495+ 70F1              // ?pairs       n1 n2 --
 496+ 70F1              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 497+ 70F1                              Colon_Def QPAIRS, "?PAIRS", is_normal
 497+ 70F1             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 497+ 70F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ 70F1             >
 497+ 70F1             >                // dummy db directives used to calculate length of namec
 497+ 70F1 3F 50 41 49 >                db      "?PAIRS"
 497+ 70F5 52 53       >
 497+ 70F7             >len_NFA         defl    $ - temp_NFA
 497+ 70F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ 70F1             >
 497+ 70F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ 70F2 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 497+ 70F6 52 53       >
 497+ 70F8             >                org     $-1                 // alter last byte of Name just above to set
 497+ 70F7 D3          >                db      {b $} | END_BIT     // msb as name end
 497+ 70F8             >
 497+ 70F8 DB 70       >                dw      last_NFA            // Link to previous definition Name
 497+ 70FA             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 70FA 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 497+ 70FC             >                else
 497+ 70FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 497+ 70FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 70FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 70FC             >
 497+ 70FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 70FC 3F 6F                        dw      SUBTRACT                // -
 499+ 70FE A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 500+ 7102 B1 70                        dw      QERROR                  // ?error
 501+ 7104 AD 69                        dw      EXIT                    // ;
 502+ 7106
 503+ 7106              //  ______________________________________________________________________
 504+ 7106              //
 505+ 7106              // ?csp       --
 506+ 7106              // raise msg #20 if surrent SP in not what previously saved in CSP.
 507+ 7106              // Compiler relies on that for  syntax checking of structures
 508+ 7106                              Colon_Def QCSP, "?CSP", is_normal
 508+ 7106             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 508+ 7106             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 508+ 7106             >
 508+ 7106             >                // dummy db directives used to calculate length of namec
 508+ 7106 3F 43 53 50 >                db      "?CSP"
 508+ 710A             >len_NFA         defl    $ - temp_NFA
 508+ 710A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 508+ 7106             >
 508+ 7106 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 508+ 7107 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 508+ 710B             >                org     $-1                 // alter last byte of Name just above to set
 508+ 710A D0          >                db      {b $} | END_BIT     // msb as name end
 508+ 710B             >
 508+ 710B F1 70       >                dw      last_NFA            // Link to previous definition Name
 508+ 710D             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 508+ 710D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 508+ 710F             >                else
 508+ 710F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 508+ 710F             >                endif           ; ok        // for other definitions it "points" the correct handler
 508+ 710F             >                // Use of "; ok" to suppress "warning[fwdref]"
 508+ 710F             >
 508+ 710F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 509+ 710F 75 69                        dw      SPFETCH                 // sp@
 510+ 7111 7D 6E A5 6B                  dw      CSP, FETCH              // csp @
 511+ 7115 3F 6F                        dw      SUBTRACT                // -
 512+ 7117 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 513+ 711B B1 70                        dw      QERROR                  // ?error
 514+ 711D AD 69                        dw      EXIT                    // ;
 515+ 711F
 516+ 711F              //  ______________________________________________________________________
 517+ 711F              //
 518+ 711F              // ?loading      --
 519+ 711F              // raise msg #22 if not loading
 520+ 711F                              Colon_Def QLOADING, "?LOADING", is_normal
 520+ 711F             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 520+ 711F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 711F             >
 520+ 711F             >                // dummy db directives used to calculate length of namec
 520+ 711F 3F 4C 4F 41 >                db      "?LOADING"
 520+ 7123 44 49 4E 47 >
 520+ 7127             >len_NFA         defl    $ - temp_NFA
 520+ 7127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 711F             >
 520+ 711F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 7120 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 520+ 7124 44 49 4E 47 >
 520+ 7128             >                org     $-1                 // alter last byte of Name just above to set
 520+ 7127 C7          >                db      {b $} | END_BIT     // msb as name end
 520+ 7128             >
 520+ 7128 06 71       >                dw      last_NFA            // Link to previous definition Name
 520+ 712A             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 712A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 712C             >                else
 520+ 712C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 520+ 712C             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 712C             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 712C             >
 520+ 712C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 712C 0C 6E A5 6B                  dw      BLK, FETCH              // blk @
 522+ 7130 EF 69                        dw      ZEQUAL                  // 0=
 523+ 7132 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 524+ 7136 B1 70                        dw      QERROR                  // ?error
 525+ 7138 AD 69                        dw      EXIT                    // ;
 526+ 713A
 527+ 713A              //  ______________________________________________________________________
 528+ 713A              //
 529+ 713A              // compile      --
 530+ 713A              // compiles the following word
 531+ 713A                              Colon_Def COMPILE, "COMPILE", is_normal
 531+ 713A             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 531+ 713A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 713A             >
 531+ 713A             >                // dummy db directives used to calculate length of namec
 531+ 713A 43 4F 4D 50 >                db      "COMPILE"
 531+ 713E 49 4C 45    >
 531+ 7141             >len_NFA         defl    $ - temp_NFA
 531+ 7141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 713A             >
 531+ 713A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 713B 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 531+ 713F 49 4C 45    >
 531+ 7142             >                org     $-1                 // alter last byte of Name just above to set
 531+ 7141 C5          >                db      {b $} | END_BIT     // msb as name end
 531+ 7142             >
 531+ 7142 1F 71       >                dw      last_NFA            // Link to previous definition Name
 531+ 7144             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 7144 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 7146             >                else
 531+ 7146 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 531+ 7146             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 7146             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 7146             >
 531+ 7146             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 7146 CB 70                        dw      QCOMP                   // ?comp
 533+ 7148 D4 69                        dw      R_TO                    // r>
 534+ 714A 12 6B 7B 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 535+ 714E C0 69                        dw      TO_R                    // >r
 536+ 7150 A5 6B 08 6F                  dw      FETCH, COMMA            // @ ,
 537+ 7154 AD 69                        dw      EXIT                    // ;
 538+ 7156
 539+ 7156              //  ______________________________________________________________________
 540+ 7156              //
 541+ 7156              // compile,     --
 542+ 7156              // compiles the following word
 543+ 7156                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 543+ 7156             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 543+ 7156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ 7156             >
 543+ 7156             >                // dummy db directives used to calculate length of namec
 543+ 7156 43 4F 4D 50 >                db      "COMPILE,"
 543+ 715A 49 4C 45 2C >
 543+ 715E             >len_NFA         defl    $ - temp_NFA
 543+ 715E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ 7156             >
 543+ 7156 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ 7157 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 543+ 715B 49 4C 45 2C >
 543+ 715F             >                org     $-1                 // alter last byte of Name just above to set
 543+ 715E AC          >                db      {b $} | END_BIT     // msb as name end
 543+ 715F             >
 543+ 715F 3A 71       >                dw      last_NFA            // Link to previous definition Name
 543+ 7161             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 7161 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 7163             >                else
 543+ 7163 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 543+ 7163             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 7163             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 7163             >
 543+ 7163             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 7163 CB 70                        dw      QCOMP                   // ?comp
 545+ 7165 08 6F                        dw      COMMA                   // ,
 546+ 7167 AD 69                        dw      EXIT                    // ;
 547+ 7169
 548+ 7169              //  ______________________________________________________________________
 549+ 7169              //
 550+ 7169              // [            --
 551+ 7169              // stop compilation
 552+ 7169                              Colon_Def SQUARED_OPEN, "[", is_immediate
 552+ 7169             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 552+ 7169             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 552+ 7169             >
 552+ 7169             >                // dummy db directives used to calculate length of namec
 552+ 7169 5B          >                db      "["
 552+ 716A             >len_NFA         defl    $ - temp_NFA
 552+ 716A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 552+ 7169             >
 552+ 7169 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 552+ 716A 5B          >                db      "["               // name string in 7-bit ascii, but
 552+ 716B             >                org     $-1                 // alter last byte of Name just above to set
 552+ 716A DB          >                db      {b $} | END_BIT     // msb as name end
 552+ 716B             >
 552+ 716B 56 71       >                dw      last_NFA            // Link to previous definition Name
 552+ 716D             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 552+ 716D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 552+ 716F             >                else
 552+ 716F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 552+ 716F             >                endif           ; ok        // for other definitions it "points" the correct handler
 552+ 716F             >                // Use of "; ok" to suppress "warning[fwdref]"
 552+ 716F             >
 552+ 716F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 716F 0D 6D                        dw      ZERO                    // 0
 554+ 7171 58 6E B2 6B                  dw      STATE, STORE            // state !
 555+ 7175 AD 69                        dw      EXIT                    // ; immediate
 556+ 7177
 557+ 7177              //  ______________________________________________________________________
 558+ 7177              //
 559+ 7177              // ]            --
 560+ 7177              // start compilation
 561+ 7177                              Colon_Def SQUARED_CLOSE, "]", is_normal
 561+ 7177             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 561+ 7177             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 7177             >
 561+ 7177             >                // dummy db directives used to calculate length of namec
 561+ 7177 5D          >                db      "]"
 561+ 7178             >len_NFA         defl    $ - temp_NFA
 561+ 7178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 7177             >
 561+ 7177 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 7178 5D          >                db      "]"               // name string in 7-bit ascii, but
 561+ 7179             >                org     $-1                 // alter last byte of Name just above to set
 561+ 7178 DD          >                db      {b $} | END_BIT     // msb as name end
 561+ 7179             >
 561+ 7179 69 71       >                dw      last_NFA            // Link to previous definition Name
 561+ 717B             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 717B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 717D             >                else
 561+ 717D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 717D             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 717D             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 717D             >
 561+ 717D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 717D A9 63 C0 00                  dw      LIT, $C0                // 192
 563+ 7181 58 6E B2 6B                  dw      STATE, STORE            // state !
 564+ 7185 AD 69                        dw      EXIT                    // ;
 565+ 7187
 566+ 7187              //  ______________________________________________________________________
 567+ 7187              //
 568+ 7187              // smudge       --
 569+ 7187              // toggle smudge bit of latest definition
 570+ 7187                              Colon_Def SMUDGE, "SMUDGE", is_normal
 570+ 7187             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 570+ 7187             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 7187             >
 570+ 7187             >                // dummy db directives used to calculate length of namec
 570+ 7187 53 4D 55 44 >                db      "SMUDGE"
 570+ 718B 47 45       >
 570+ 718D             >len_NFA         defl    $ - temp_NFA
 570+ 718D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 7187             >
 570+ 7187 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 7188 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 570+ 718C 47 45       >
 570+ 718E             >                org     $-1                 // alter last byte of Name just above to set
 570+ 718D C5          >                db      {b $} | END_BIT     // msb as name end
 570+ 718E             >
 570+ 718E 77 71       >                dw      last_NFA            // Link to previous definition Name
 570+ 7190             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 7190 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 570+ 7192             >                else
 570+ 7192 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 7192             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 7192             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 7192             >
 570+ 7192             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 7192 2D 70                        dw      LATEST                  // latest
 572+ 7194 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 573+ 7198 98 6B                        dw      TOGGLE                  // toggle
 574+ 719A AD 69                        dw      EXIT                    // ;
 575+ 719C
 576+ 719C              //  ______________________________________________________________________
 577+ 719C              //
 578+ 719C              // immediate    --
 579+ 719C              // make immediate the latest definition
 580+ 719C                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 580+ 719C             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 580+ 719C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 580+ 719C             >
 580+ 719C             >                // dummy db directives used to calculate length of namec
 580+ 719C 49 4D 4D 45 >                db      "IMMEDIATE"
 580+ 71A0 44 49 41 54 >
 580+ 71A4 45          >
 580+ 71A5             >len_NFA         defl    $ - temp_NFA
 580+ 71A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 580+ 719C             >
 580+ 719C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 580+ 719D 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 580+ 71A1 44 49 41 54 >
 580+ 71A5 45          >
 580+ 71A6             >                org     $-1                 // alter last byte of Name just above to set
 580+ 71A5 C5          >                db      {b $} | END_BIT     // msb as name end
 580+ 71A6             >
 580+ 71A6 87 71       >                dw      last_NFA            // Link to previous definition Name
 580+ 71A8             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 580+ 71A8 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 580+ 71AA             >                else
 580+ 71AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 580+ 71AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 580+ 71AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 580+ 71AA             >
 580+ 71AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 581+ 71AA 2D 70                        dw      LATEST                  // latest
 582+ 71AC A9 63 40 00                  dw      LIT, $40                // 64
 583+ 71B0 98 6B                        dw      TOGGLE                  // toggle
 584+ 71B2 AD 69                        dw      EXIT                    // ;
 585+ 71B4
 586+ 71B4              //  ______________________________________________________________________
 587+ 71B4              //
 588+ 71B4              // hex          --
 589+ 71B4              // change numeration base
 590+ 71B4                              Colon_Def HEX, "HEX", is_normal
 590+ 71B4             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 590+ 71B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 590+ 71B4             >
 590+ 71B4             >                // dummy db directives used to calculate length of namec
 590+ 71B4 48 45 58    >                db      "HEX"
 590+ 71B7             >len_NFA         defl    $ - temp_NFA
 590+ 71B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 590+ 71B4             >
 590+ 71B4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 590+ 71B5 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 590+ 71B8             >                org     $-1                 // alter last byte of Name just above to set
 590+ 71B7 D8          >                db      {b $} | END_BIT     // msb as name end
 590+ 71B8             >
 590+ 71B8 9C 71       >                dw      last_NFA            // Link to previous definition Name
 590+ 71BA             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 590+ 71BA 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 590+ 71BC             >                else
 590+ 71BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 590+ 71BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 590+ 71BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 590+ 71BC             >
 590+ 71BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 591+ 71BC A9 63 10 00                  dw      LIT, 16                 // 16
 592+ 71C0 62 6E B2 6B                  dw      BASE, STORE             // base !
 593+ 71C4 AD 69                        dw      EXIT                    // ;
 594+ 71C6
 595+ 71C6              //  ______________________________________________________________________
 596+ 71C6              //
 597+ 71C6              // decimal      --
 598+ 71C6              // change numeration base
 599+ 71C6                              Colon_Def DECIMAL, "DECIMAL", is_normal
 599+ 71C6             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 599+ 71C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 71C6             >
 599+ 71C6             >                // dummy db directives used to calculate length of namec
 599+ 71C6 44 45 43 49 >                db      "DECIMAL"
 599+ 71CA 4D 41 4C    >
 599+ 71CD             >len_NFA         defl    $ - temp_NFA
 599+ 71CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 71C6             >
 599+ 71C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 71C7 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 599+ 71CB 4D 41 4C    >
 599+ 71CE             >                org     $-1                 // alter last byte of Name just above to set
 599+ 71CD CC          >                db      {b $} | END_BIT     // msb as name end
 599+ 71CE             >
 599+ 71CE B4 71       >                dw      last_NFA            // Link to previous definition Name
 599+ 71D0             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 71D0 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 71D2             >                else
 599+ 71D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 71D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 71D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 71D2             >
 599+ 71D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 71D2 A9 63 0A 00                  dw      LIT, 10                 // 10
 601+ 71D6 62 6E B2 6B                  dw      BASE, STORE             // base !
 602+ 71DA AD 69                        dw      EXIT                    // ;
 603+ 71DC
 604+ 71DC              //  ______________________________________________________________________
 605+ 71DC              //
 606+ 71DC              // (;code)       --
 607+ 71DC              // patch to CFA to call/jump to the "following code"
 608+ 71DC                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 608+ 71DC             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 608+ 71DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ 71DC             >
 608+ 71DC             >                // dummy db directives used to calculate length of namec
 608+ 71DC 28 3B 43 4F >                db      "(;CODE)"
 608+ 71E0 44 45 29    >
 608+ 71E3             >len_NFA         defl    $ - temp_NFA
 608+ 71E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ 71DC             >
 608+ 71DC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ 71DD 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 608+ 71E1 44 45 29    >
 608+ 71E4             >                org     $-1                 // alter last byte of Name just above to set
 608+ 71E3 A9          >                db      {b $} | END_BIT     // msb as name end
 608+ 71E4             >
 608+ 71E4 C6 71       >                dw      last_NFA            // Link to previous definition Name
 608+ 71E6             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 71E6 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 71E8             >                else
 608+ 71E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 608+ 71E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 71E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 71E8             >
 608+ 71E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 71E8 D4 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 610+ 71EA 2D 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 611+ 71EC 6B 70 4B 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 612+ 71F0
 613+ 71F0
 614+ 71F0
 615+ 71F0
 616+ 71F0
 617+ 71F0 B2 6B                        dw      STORE                   // !
 618+ 71F2 AD 69                        dw      EXIT                    // ;
 619+ 71F4
 620+ 71F4              //  ______________________________________________________________________
 621+ 71F4              //
 622+ 71F4              // ;code        --
 623+ 71F4                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 623+ 71F4             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 623+ 71F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 71F4             >
 623+ 71F4             >                // dummy db directives used to calculate length of namec
 623+ 71F4 3B 43 4F 44 >                db      ";CODE"
 623+ 71F8 45          >
 623+ 71F9             >len_NFA         defl    $ - temp_NFA
 623+ 71F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 71F4             >
 623+ 71F4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 71F5 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 623+ 71F9 45          >
 623+ 71FA             >                org     $-1                 // alter last byte of Name just above to set
 623+ 71F9 C5          >                db      {b $} | END_BIT     // msb as name end
 623+ 71FA             >
 623+ 71FA DC 71       >                dw      last_NFA            // Link to previous definition Name
 623+ 71FC             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 71FC 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 71FE             >                else
 623+ 71FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 71FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 71FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 71FE             >
 623+ 71FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 71FE 0D 71                        dw      QCSP                    // ?csp
 625+ 7200 44 71                        dw      COMPILE                 // compile
 626+ 7202 E6 71                        dw      C_SEMICOLON_CODE        // (;code)
 627+ 7204 6D 71                        dw      SQUARED_OPEN            // [
 628+ 7206 B8 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 629+ 7208 AD 69                        dw      EXIT                    // ; immediate
 630+ 720A
 631+ 720A              //  ______________________________________________________________________
 632+ 720A              //
 633+ 720A              // <builds      --
 634+ 720A                              Colon_Def CBUILDS, "<BUILDS", is_normal
 634+ 720A             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 634+ 720A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ 720A             >
 634+ 720A             >                // dummy db directives used to calculate length of namec
 634+ 720A 3C 42 55 49 >                db      "<BUILDS"
 634+ 720E 4C 44 53    >
 634+ 7211             >len_NFA         defl    $ - temp_NFA
 634+ 7211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ 720A             >
 634+ 720A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ 720B 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 634+ 720F 4C 44 53    >
 634+ 7212             >                org     $-1                 // alter last byte of Name just above to set
 634+ 7211 D3          >                db      {b $} | END_BIT     // msb as name end
 634+ 7212             >
 634+ 7212 F4 71       >                dw      last_NFA            // Link to previous definition Name
 634+ 7214             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 7214 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 7216             >                else
 634+ 7216 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 634+ 7216             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 7216             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 7216             >
 634+ 7216             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 7216 0D 6D                        dw      ZERO                    // 0
 636+ 7218 C7 6C                        dw      CONSTANT                // constant
 637+ 721A AD 69                        dw      EXIT                    // ;
 638+ 721C
 639+ 721C              //  ______________________________________________________________________
 640+ 721C              //
 641+ 721C              // recurse      --
 642+ 721C              //              Colon_Def RECURSE, "RECURSE", is_immediate
 643+ 721C              //              dw      QCOMP                   // ?comp
 644+ 721C              //              dw      LATEST                  // latest
 645+ 721C              //              dw      PFA, CFA                // pfa cfa
 646+ 721C              //              dw      COMMA                   // ,
 647+ 721C              //              dw      EXIT                    // ; immediate
 648+ 721C
 649+ 721C              //  ______________________________________________________________________
 650+ 721C              //
 651+ 721C              // does>     --
 652+ 721C                              Colon_Def DOES_TO, "DOES>", is_normal
 652+ 721C             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 652+ 721C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 652+ 721C             >
 652+ 721C             >                // dummy db directives used to calculate length of namec
 652+ 721C 44 4F 45 53 >                db      "DOES>"
 652+ 7220 3E          >
 652+ 7221             >len_NFA         defl    $ - temp_NFA
 652+ 7221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 652+ 721C             >
 652+ 721C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 652+ 721D 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 652+ 7221 3E          >
 652+ 7222             >                org     $-1                 // alter last byte of Name just above to set
 652+ 7221 BE          >                db      {b $} | END_BIT     // msb as name end
 652+ 7222             >
 652+ 7222 0A 72       >                dw      last_NFA            // Link to previous definition Name
 652+ 7224             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 652+ 7224 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 652+ 7226             >                else
 652+ 7226 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 652+ 7226             >                endif           ; ok        // for other definitions it "points" the correct handler
 652+ 7226             >                // Use of "; ok" to suppress "warning[fwdref]"
 652+ 7226             >
 652+ 7226             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 653+ 7226 D4 69                        dw      R_TO                    // r>
 654+ 7228 2D 70                        dw      LATEST                  // latest
 655+ 722A 6B 70                        dw      PFA                     // pfa
 656+ 722C B2 6B                        dw      STORE                   // !
 657+ 722E E6 71                        dw      C_SEMICOLON_CODE        // ;code
 658+ 7230              Does_Ptr:
 659+ 7230                              // via call coded in CFA
 660+ 7230                              ldhlrp
 660+ 7230 2A 96 63    >                ld      hl,(RP_Pointer)
 661+ 7233 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 662+ 7234 70                           ld      (hl), b
 663+ 7235 2B                           dec     hl
 664+ 7236 71                           ld      (hl), c
 665+ 7237                              ldrphl
 665+ 7237 22 96 63    >                ld      (RP_Pointer),hl
 666+ 723A 13                           inc     de
 667+ 723B EB                           ex      de, hl
 668+ 723C 4E                           ld      c, (hl)
 669+ 723D 23                           inc     hl
 670+ 723E 46                           ld      b, (hl)
 671+ 723F 23                           inc     hl
 672+ 7240
 673+ 7240                              psh1
 673+ 7240 E5          >                push    hl
 673+ 7241 DD E9       >                jp      (ix)
 674+ 7243                              // SMUDGE !
 675+ 7243
 676+ 7243              //  ______________________________________________________________________
 677+ 7243              //
 678+ 7243              // count        a -- a2 n
 679+ 7243              // expects a counted string at address a, returns string address and counter
 680+ 7243                              Colon_Def COUNT, "COUNT", is_normal
 680+ 7243             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 680+ 7243             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ 7243             >
 680+ 7243             >                // dummy db directives used to calculate length of namec
 680+ 7243 43 4F 55 4E >                db      "COUNT"
 680+ 7247 54          >
 680+ 7248             >len_NFA         defl    $ - temp_NFA
 680+ 7248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ 7243             >
 680+ 7243 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ 7244 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 680+ 7248 54          >
 680+ 7249             >                org     $-1                 // alter last byte of Name just above to set
 680+ 7248 D4          >                db      {b $} | END_BIT     // msb as name end
 680+ 7249             >
 680+ 7249 1C 72       >                dw      last_NFA            // Link to previous definition Name
 680+ 724B             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 724B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 680+ 724D             >                else
 680+ 724D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 680+ 724D             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 724D             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 724D             >
 680+ 724D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 724D 12 6B                        dw      DUP                     // dup
 682+ 724F 53 6A                        dw      ONE_PLUS                // 1+
 683+ 7251 05 6B C0 6B                  dw      SWAP, CFETCH             // swap @
 684+ 7255 AD 69                        dw      EXIT                    // ;
 685+ 7257
 686+ 7257              //  ______________________________________________________________________
 687+ 7257              //
 688+ 7257              // bounds       a n -- a+n n
 689+ 7257              // given an address and a length ( a n ) calculate the bound addresses
 690+ 7257              // suitable for DO-LOOP
 691+ 7257                              Colon_Def BOUNDS, "BOUNDS", is_normal
 691+ 7257             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 691+ 7257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 7257             >
 691+ 7257             >                // dummy db directives used to calculate length of namec
 691+ 7257 42 4F 55 4E >                db      "BOUNDS"
 691+ 725B 44 53       >
 691+ 725D             >len_NFA         defl    $ - temp_NFA
 691+ 725D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 7257             >
 691+ 7257 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 7258 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 691+ 725C 44 53       >
 691+ 725E             >                org     $-1                 // alter last byte of Name just above to set
 691+ 725D D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 725E             >
 691+ 725E 43 72       >                dw      last_NFA            // Link to previous definition Name
 691+ 7260             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 7260 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 7262             >                else
 691+ 7262 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 7262             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 7262             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 7262             >
 691+ 7262             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 7262 CD 6A 32 6A                  dw      OVER, PLUS, SWAP        // over + swap
 692+ 7266 05 6B
 693+ 7268 AD 69                        dw      EXIT                    // ;
 694+ 726A
 695+ 726A              //  ______________________________________________________________________
 696+ 726A              //
 697+ 726A              // type         a n --
 698+ 726A              // Sends to current output channel n characters starting at address a.
 699+ 726A                              Colon_Def TYPE, "TYPE", is_normal
 699+ 726A             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 699+ 726A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 726A             >
 699+ 726A             >                // dummy db directives used to calculate length of namec
 699+ 726A 54 59 50 45 >                db      "TYPE"
 699+ 726E             >len_NFA         defl    $ - temp_NFA
 699+ 726E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 726A             >
 699+ 726A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 726B 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 699+ 726F             >                org     $-1                 // alter last byte of Name just above to set
 699+ 726E C5          >                db      {b $} | END_BIT     // msb as name end
 699+ 726F             >
 699+ 726F 57 72       >                dw      last_NFA            // Link to previous definition Name
 699+ 7271             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 7271 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 7273             >                else
 699+ 7273 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 7273             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 7273             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 7273             >
 699+ 7273             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 7273 60 72                        dw      BOUNDS                  // bounds
 701+ 7275 59 64                        dw      C_Q_DO                  // ?do
 702+ 7277 0C 00                        dw      Type_Skip - $
 703+ 7279              Type_Loop:
 704+ 7279 90 64 C0 6B                  dw          I, CFETCH           //      i c@
 705+ 727D DB 6F                        dw          EMIT                //      emit
 706+ 727F 04 64                        dw      C_LOOP                  // loop
 707+ 7281 F8 FF                        dw      Type_Loop - $
 708+ 7283              Type_Skip:
 709+ 7283 AD 69                        dw      EXIT                    // ;
 710+ 7285
 711+ 7285              //  ______________________________________________________________________
 712+ 7285              //
 713+ 7285              // leave        --
 714+ 7285              // Compile (leave) to leave current LOOP and jump just after it
 715+ 7285                              Colon_Def LEAVE, "LEAVE", is_immediate
 715+ 7285             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 715+ 7285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ 7285             >
 715+ 7285             >                // dummy db directives used to calculate length of namec
 715+ 7285 4C 45 41 56 >                db      "LEAVE"
 715+ 7289 45          >
 715+ 728A             >len_NFA         defl    $ - temp_NFA
 715+ 728A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ 7285             >
 715+ 7285 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ 7286 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 715+ 728A 45          >
 715+ 728B             >                org     $-1                 // alter last byte of Name just above to set
 715+ 728A C5          >                db      {b $} | END_BIT     // msb as name end
 715+ 728B             >
 715+ 728B 6A 72       >                dw      last_NFA            // Link to previous definition Name
 715+ 728D             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 728D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 728F             >                else
 715+ 728F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 715+ 728F             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 728F             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 728F             >
 715+ 728F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 728F 44 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 717+ 7293 EC 6E C0 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 717+ 7297 0D 6D 08 6F
 718+ 729B 0D 6D 0D 6D                  dw      ZERO, ZERO
 719+ 729F 75 69 12 6B                  dw      SPFETCH, DUP
 720+ 72A3 7B 6A 7B 6A                  dw      CELL_PLUS, CELL_PLUS
 721+ 72A7 F5 6A                        dw      TUCK
 722+ 72A9 7D 6E A5 6B                  dw      CSP, FETCH
 723+ 72AD 05 6B 3F 6F                  dw      SWAP, SUBTRACT
 724+ 72B1 9D 68                        dw      CMOVE
 725+ 72B3 7D 6E A5 6B                  dw      CSP, FETCH, CELL_MINUS
 725+ 72B7 85 6A
 726+ 72B9 D4 69 CD 6A                  dw      R_TO, OVER, STORE
 726+ 72BD B2 6B
 727+ 72BF 85 6A 0D 6D                  dw      CELL_MINUS, ZERO
 728+ 72C3 05 6B B2 6B                  dw      SWAP, STORE
 729+ 72C7 AD 69                        dw      EXIT                    // ;
 730+ 72C9
 731+ 72C9              //  ______________________________________________________________________
 732+ 72C9              //
 733+ 72C9              // -trailing    a n1 -- a n2
 734+ 72C9              // Assumes that an n1 bytes-long string is stored at address a
 735+ 72C9              // and the string contains a space delimited word,
 736+ 72C9              // Finds n2 as the position of the first character after the word.
 737+ 72C9                              Colon_Def LTRAILING, "-TRAILING", is_normal
 737+ 72C9             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 737+ 72C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ 72C9             >
 737+ 72C9             >                // dummy db directives used to calculate length of namec
 737+ 72C9 2D 54 52 41 >                db      "-TRAILING"
 737+ 72CD 49 4C 49 4E >
 737+ 72D1 47          >
 737+ 72D2             >len_NFA         defl    $ - temp_NFA
 737+ 72D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ 72C9             >
 737+ 72C9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ 72CA 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 737+ 72CE 49 4C 49 4E >
 737+ 72D2 47          >
 737+ 72D3             >                org     $-1                 // alter last byte of Name just above to set
 737+ 72D2 C7          >                db      {b $} | END_BIT     // msb as name end
 737+ 72D3             >
 737+ 72D3 85 72       >                dw      last_NFA            // Link to previous definition Name
 737+ 72D5             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 72D5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 72D7             >                else
 737+ 72D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 737+ 72D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 72D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 72D7             >
 737+ 72D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 72D7 12 6B 0D 6D                  dw      DUP, ZERO               // dup 0
 739+ 72DB                                                              // do
 740+ 72DB 59 64                        dw      C_Q_DO
 741+ 72DD 20 00                        dw      LTrailing_Leave - $
 742+ 72DF              LTrailing_Loop:
 743+ 72DF 73 6B 32 6A                  dw          TWO_DUP, PLUS       //      2dup +
 744+ 72E3 5F 6A                        dw          ONE_SUBTRACT        //      1-
 745+ 72E5 C0 6B                        dw          CFETCH              //      c@
 746+ 72E7 37 6D 3F 6F                  dw          BL, SUBTRACT        //      bl -
 747+ 72EB                                                              //      if
 748+ 72EB 2C 64                        dw          ZBRANCH
 749+ 72ED 0A 00                        dw          LTrailing_Else - $
 750+ 72EF 41 64                        dw              C_LEAVE         //          leave
 751+ 72F1 0C 00                        dw              LTrailing_Leave - $
 752+ 72F3 15 64                        dw          BRANCH              //      else
 753+ 72F5 04 00                        dw          LTrailing_Endif - $
 754+ 72F7              LTrailing_Else:
 755+ 72F7 5F 6A                        dw              ONE_SUBTRACT    //          1-
 756+ 72F9              LTrailing_Endif:                                //      endif
 757+ 72F9                                                              // loop
 758+ 72F9 04 64                        dw      C_LOOP
 759+ 72FB E4 FF                        dw      LTrailing_Loop - $
 760+ 72FD              LTrailing_Leave:
 761+ 72FD AD 69                        dw      EXIT                    // ;
 762+ 72FF
 763+ 72FF              //  ______________________________________________________________________
 764+ 72FF              //
 765+ 72FF              // accept       a n1 -- n2
 766+ 72FF              // Accepts at most n1 characters from terminal and stores them at address a
 767+ 72FF              // CR stops input. A 'nul' is added as trailer.
 768+ 72FF              // n2 is the string length. n2 is kept in span user variable also.
 769+ 72FF                              Colon_Def ACCEPT, "ACCEPT", is_normal
 769+ 72FF             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 769+ 72FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ 72FF             >
 769+ 72FF             >                // dummy db directives used to calculate length of namec
 769+ 72FF 41 43 43 45 >                db      "ACCEPT"
 769+ 7303 50 54       >
 769+ 7305             >len_NFA         defl    $ - temp_NFA
 769+ 7305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ 72FF             >
 769+ 72FF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ 7300 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 769+ 7304 50 54       >
 769+ 7306             >                org     $-1                 // alter last byte of Name just above to set
 769+ 7305 D4          >                db      {b $} | END_BIT     // msb as name end
 769+ 7306             >
 769+ 7306 C9 72       >                dw      last_NFA            // Link to previous definition Name
 769+ 7308             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 7308 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 730A             >                else
 769+ 730A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 769+ 730A             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 730A             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 730A             >
 769+ 730A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 730A CD 6A 32 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 770+ 730E CD 6A
 771+ 7310 0D 6D 2F 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 772+ 7314                                                              // do
 773+ 7314 59 64                        dw      C_Q_DO
 774+ 7316 8A 00                        dw      Accept_Leave - $
 775+ 7318              Accept_Loop:
 776+ 7318 DD 6A B8 66                  dw          DROP, KEY           //      drop key        ( a  c )
 777+ 731C 12 6B                        dw          DUP                 //      dup             ( a  c  c )
 778+ 731E A9 63 0E 00                  dw          LIT, $0E            //      0E
 779+ 7322 73 6D                        dw          PLUS_ORIGIN         //      +origin
 780+ 7324 A5 6B                        dw          FETCH               //      @               ( a  c  c  del )
 781+ 7326 4D 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 782+ 7328                                                              //      if
 783+ 7328 2C 64                        dw          ZBRANCH
 784+ 732A 2C 00                        dw          Accept_Else_0 - $
 785+ 732C DD 6A                        dw              DROP            //          drop        ( a  )
 786+ 732E 12 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 786+ 7332 4D 6F
 787+ 7334 15 6D 3D 69                  dw              ONE, AND_OP     //          1 and
 788+ 7338 12 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 789+ 733A D4 69                        dw              R_TO            //          r> 2 - + r>
 790+ 733C 92 6A 32 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 791+ 7340 C0 69                        dw              TO_R            //
 792+ 7342                                                              //          if
 793+ 7342 2C 64                        dw              ZBRANCH
 794+ 7344 0A 00                        dw              Accept_Else_1 - $
 795+ 7346 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 796+ 734A                                                              //          else
 797+ 734A 15 64                        dw              BRANCH
 798+ 734C 06 00                        dw              Accept_Endif_1 - $
 799+ 734E              Accept_Else_1:
 800+ 734E A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 801+ 7352              Accept_Endif_1:                                 //          endif
 802+ 7352 15 64                        dw          BRANCH
 803+ 7354 2E 00                        dw          Accept_Endif_0 - $
 804+ 7356              Accept_Else_0:                                  //      else
 805+ 7356 12 6B                        dw              DUP             //          dup         ( a  c  c )
 806+ 7358 A9 63 0D 00                  dw              LIT, 13         //          13
 807+ 735C 4D 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 808+ 735E                                                              //          if
 809+ 735E 2C 64                        dw              ZBRANCH
 810+ 7360 0C 00                        dw              Accept_Else_2 - $
 811+ 7362 DD 6A 37 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 812+ 7366 0D 6D                        dw                  ZERO        //              0       ( a  c  0 )
 813+ 7368                                                              //          else
 814+ 7368 15 64                        dw              BRANCH
 815+ 736A 04 00                        dw              Accept_Endif_2 - $
 816+ 736C              Accept_Else_2:
 817+ 736C 12 6B                        dw                  DUP         //              dup     ( a  c  c )
 818+ 736E                                                              //          endif
 819+ 736E              Accept_Endif_2:
 820+ 736E 90 64 CE 6B                  dw              I, CSTORE       //          i           ( a  c )
 821+ 7372 12 6B 37 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 821+ 7376 6E 6F
 822+ 7378                                                              //          if
 823+ 7378 2C 64                        dw              ZBRANCH
 824+ 737A 08 00                        dw              Accept_Endif_3 - $
 825+ 737C D4 69                        dw                  R_TO        //              r>
 826+ 737E 5F 6A                        dw                  ONE_SUBTRACT//              1-
 827+ 7380 C0 69                        dw                  TO_R        //              >r
 828+ 7382                                                              //          endif
 829+ 7382              Accept_Endif_3:
 830+ 7382              Accept_Endif_0:                                 //      endif
 831+ 7382 DB 6F                        dw          EMIT                //      emit
 832+ 7384 0D 6D 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 832+ 7388 53 6A
 833+ 738A B2 6B                        dw          STORE               //          ( zero pad )
 834+ 738C 90 64                        dw          I                   //      i
 835+ 738E 90 64 C0 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 835+ 7392 EF 69
 836+ 7394 2C 64                        dw          ZBRANCH             //
 837+ 7396 06 00                        dw              Accept_Endif_4 - $
 838+ 7398 41 64                        dw                  C_LEAVE     //              leave
 839+ 739A 06 00                        dw                  Accept_Leave - $
 840+ 739C              Accept_Endif_4:                                 //      endif
 841+ 739C                                                              // loop
 842+ 739C 04 64                        dw      C_LOOP
 843+ 739E 7A FF                        dw      Accept_Loop - $
 844+ 73A0              Accept_Leave:
 845+ 73A0 05 6B 3F 6F                  dw      SWAP, SUBTRACT          // swap -
 846+ 73A4 53 6A                        dw      ONE_PLUS                // 1+
 847+ 73A6 12 6B CD 6E                  dw      DUP, SPAN, STORE        // dup span !
 847+ 73AA B2 6B
 848+ 73AC AD 69                        dw      EXIT                    // ;
 849+ 73AE
 850+ 73AE              //  ______________________________________________________________________
 851+ 73AE              //
 852+ 73AE              // expect      a n --
 853+ 73AE              // Accepts at most n1 characters from terminal and stores them at address a
 854+ 73AE              // CR stops input. A 'nul' is added as trailer.
 855+ 73AE              // n2 is the string length. n2 is kept in span user variable also.
 856+ 73AE              //              Colon_Def EXPECT, "EXPECT", is_normal
 857+ 73AE              //              dw      ACCEPT, DROP            // accept drop
 858+ 73AE              //              dw      EXIT                    // ;
 859+ 73AE
 860+ 73AE              //  ______________________________________________________________________
 861+ 73AE              //
 862+ 73AE              // query        --
 863+ 73AE              // Accept at most 80 character from console. CR stops.
 864+ 73AE              // Text is stored in TIB. Variable IN is zeroed.
 865+ 73AE                              Colon_Def QUERY, "QUERY", is_normal
 865+ 73AE             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 865+ 73AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 865+ 73AE             >
 865+ 73AE             >                // dummy db directives used to calculate length of namec
 865+ 73AE 51 55 45 52 >                db      "QUERY"
 865+ 73B2 59          >
 865+ 73B3             >len_NFA         defl    $ - temp_NFA
 865+ 73B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 865+ 73AE             >
 865+ 73AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 865+ 73AF 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 865+ 73B3 59          >
 865+ 73B4             >                org     $-1                 // alter last byte of Name just above to set
 865+ 73B3 D9          >                db      {b $} | END_BIT     // msb as name end
 865+ 73B4             >
 865+ 73B4 FF 72       >                dw      last_NFA            // Link to previous definition Name
 865+ 73B6             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 865+ 73B6 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 865+ 73B8             >                else
 865+ 73B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 865+ 73B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 865+ 73B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 865+ 73B8             >
 865+ 73B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 866+ 73B8 A0 6D A5 6B                  dw      TIB, FETCH              // tib @
 867+ 73BC A9 63 50 00                  dw      LIT, 80                 // 80
 868+ 73C0 08 73 DD 6A                  dw      ACCEPT, DROP            // accept drop
 869+ 73C4 0D 6D 15 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 869+ 73C8 B2 6B
 870+ 73CA AD 69                        dw      EXIT                    // ;
 871+ 73CC
 872+ 73CC              //  ______________________________________________________________________
 873+ 73CC              //
 874+ 73CC              // fill        a n c --
 875+ 73CC              // If n > 0, fills n locations starting from address a with the value c.
 876+ 73CC                              New_Def FILL, "FILL", is_code, is_normal
 876+ 73CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 876+ 73CC             >
 876+ 73CC             >                // dummy db directives used to calculate length of namec
 876+ 73CC 46 49 4C 4C >                db      "FILL"
 876+ 73D0             >len_NFA         defl    $ - temp_NFA
 876+ 73D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 876+ 73CC             >
 876+ 73CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 876+ 73CD 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 876+ 73D1             >                org     $-1                 // alter last byte of Name just above to set
 876+ 73D0 CC          >                db      {b $} | END_BIT     // msb as name end
 876+ 73D1             >
 876+ 73D1 AE 73       >                dw      last_NFA            // Link to previous definition Name
 876+ 73D3             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 876+ 73D3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 876+ 73D3             >                else
 876+ 73D3 D5 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 876+ 73D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 876+ 73D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 876+ 73D5             >
 876+ 73D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 877+ 73D5 D9                           exx
 878+ 73D6 D1                           pop     de                  // de has character
 879+ 73D7 C1                           pop     bc                  // bc has counter
 880+ 73D8 E1                           pop     hl                  // hl has address, save Instruction Pointer
 881+ 73D9              Fill_Loop:
 882+ 73D9 78                               ld      a, b
 883+ 73DA B1                               or      c
 884+ 73DB 28 05                        jr      z, Fill_While_End
 885+ 73DD 73                               ld      (hl), e
 886+ 73DE 0B                               dec     bc
 887+ 73DF 23                               inc     hl
 888+ 73E0 18 F7                        jr      Fill_Loop
 889+ 73E2              Fill_While_End:
 890+ 73E2 D9                           exx
 891+ 73E3
 892+ 73E3                              next
 892+ 73E3 DD E9       >                jp      (ix)
 893+ 73E5
 894+ 73E5              //  ______________________________________________________________________
 895+ 73E5              //
 896+ 73E5              // erase        a n --
 897+ 73E5              // If n > 0, fills n locations starting from address a with 'nul' characters.
 898+ 73E5                              Colon_Def ERASE, "ERASE", is_normal
 898+ 73E5             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 898+ 73E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 73E5             >
 898+ 73E5             >                // dummy db directives used to calculate length of namec
 898+ 73E5 45 52 41 53 >                db      "ERASE"
 898+ 73E9 45          >
 898+ 73EA             >len_NFA         defl    $ - temp_NFA
 898+ 73EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 73E5             >
 898+ 73E5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 73E6 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 898+ 73EA 45          >
 898+ 73EB             >                org     $-1                 // alter last byte of Name just above to set
 898+ 73EA C5          >                db      {b $} | END_BIT     // msb as name end
 898+ 73EB             >
 898+ 73EB CC 73       >                dw      last_NFA            // Link to previous definition Name
 898+ 73ED             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 73ED 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 73EF             >                else
 898+ 73EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 73EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 73EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 73EF             >
 898+ 73EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 73EF 0D 6D D3 73                  dw      ZERO, FILL              // 0 fill
 900+ 73F3 AD 69                        dw      EXIT                    // ;
 901+ 73F5
 902+ 73F5              //  ______________________________________________________________________
 903+ 73F5              //
 904+ 73F5              // blanks       a n --
 905+ 73F5              // If n > 0, fills n locations starting from address a with 'nul' characters.
 906+ 73F5                              Colon_Def BLANKS, "BLANKS", is_normal
 906+ 73F5             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 906+ 73F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 73F5             >
 906+ 73F5             >                // dummy db directives used to calculate length of namec
 906+ 73F5 42 4C 41 4E >                db      "BLANKS"
 906+ 73F9 4B 53       >
 906+ 73FB             >len_NFA         defl    $ - temp_NFA
 906+ 73FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 73F5             >
 906+ 73F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 73F6 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 906+ 73FA 4B 53       >
 906+ 73FC             >                org     $-1                 // alter last byte of Name just above to set
 906+ 73FB D3          >                db      {b $} | END_BIT     // msb as name end
 906+ 73FC             >
 906+ 73FC E5 73       >                dw      last_NFA            // Link to previous definition Name
 906+ 73FE             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 73FE 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 7400             >                else
 906+ 7400 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 7400             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 7400             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 7400             >
 906+ 7400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 7400 37 6D D3 73                  dw      BL, FILL                // bl fill
 908+ 7404 AD 69                        dw      EXIT                    // ;
 909+ 7406
 910+ 7406              //  ______________________________________________________________________
 911+ 7406              //
 912+ 7406              // hold         c --
 913+ 7406              // Used between <# and #> to insert a character c in numeric formatting.
 914+ 7406                              Colon_Def HOLD, "HOLD", is_normal
 914+ 7406             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 914+ 7406             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 7406             >
 914+ 7406             >                // dummy db directives used to calculate length of namec
 914+ 7406 48 4F 4C 44 >                db      "HOLD"
 914+ 740A             >len_NFA         defl    $ - temp_NFA
 914+ 740A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 7406             >
 914+ 7406 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 7407 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 914+ 740B             >                org     $-1                 // alter last byte of Name just above to set
 914+ 740A C4          >                db      {b $} | END_BIT     // msb as name end
 914+ 740B             >
 914+ 740B F5 73       >                dw      last_NFA            // Link to previous definition Name
 914+ 740D             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 740D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 740F             >                else
 914+ 740F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 914+ 740F             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 740F             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 740F             >
 914+ 740F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 740F 2E 6D                        dw      NEG_ONE                 // -1
 916+ 7411 8E 6E 82 6B                  dw      HLD, PLUSSTORE          // hld +!
 917+ 7415 8E 6E A5 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 917+ 7419 CE 6B
 918+ 741B AD 69                        dw      EXIT                    // ;
 919+ 741D
 920+ 741D              //  ______________________________________________________________________
 921+ 741D              //
 922+ 741D              // pad         -- a
 923+ 741D              // leaves the buffer text address. This is at a fixed distance over HERE.
 924+ 741D                              Colon_Def PAD, "PAD", is_normal
 924+ 741D             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 924+ 741D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ 741D             >
 924+ 741D             >                // dummy db directives used to calculate length of namec
 924+ 741D 50 41 44    >                db      "PAD"
 924+ 7420             >len_NFA         defl    $ - temp_NFA
 924+ 7420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ 741D             >
 924+ 741D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ 741E 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 924+ 7421             >                org     $-1                 // alter last byte of Name just above to set
 924+ 7420 C4          >                db      {b $} | END_BIT     // msb as name end
 924+ 7421             >
 924+ 7421 06 74       >                dw      last_NFA            // Link to previous definition Name
 924+ 7423             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 7423 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ 7425             >                else
 924+ 7425 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 924+ 7425             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 7425             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 7425             >
 924+ 7425             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 7425 EC 6E                        dw      HERE                    // here
 926+ 7427 A9 63 44 00                  dw      LIT, 68                 // 68
 927+ 742B 32 6A                        dw      PLUS                    // +
 928+ 742D AD 69                        dw      EXIT                    // ;
 929+ 742F
 930+ 742F              //  ______________________________________________________________________
 931+ 742F              //
 932+ 742F              // word         c -- a
 933+ 742F              // reads characters from input streams until it encouners a c delimiter.
 934+ 742F              // Stores that packet so it starts from HERE
 935+ 742F              // WORD leaves a counter as first byte and ends the packet with two spaces.
 936+ 742F              // Other occurrences of c are ignored.
 937+ 742F              // If BLK is zero, text is taken from terminal buffer TIB.
 938+ 742F              // Otherwise text is taken from the disk-block given by BLK.
 939+ 742F              // "in" variable is incremented of the number of character read.
 940+ 742F              // The number of characters read is given by ENCLOSE.
 941+ 742F                              Colon_Def WORD, "WORD", is_normal
 941+ 742F             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 941+ 742F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 742F             >
 941+ 742F             >                // dummy db directives used to calculate length of namec
 941+ 742F 57 4F 52 44 >                db      "WORD"
 941+ 7433             >len_NFA         defl    $ - temp_NFA
 941+ 7433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 742F             >
 941+ 742F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 7430 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 941+ 7434             >                org     $-1                 // alter last byte of Name just above to set
 941+ 7433 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 7434             >
 941+ 7434 1D 74       >                dw      last_NFA            // Link to previous definition Name
 941+ 7436             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 7436 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 7438             >                else
 941+ 7438 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 7438             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 7438             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 7438             >
 941+ 7438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 7438 0C 6E A5 6B                  dw      BLK, FETCH              // blk @
 943+ 743C                                                              // if
 944+ 743C 2C 64                        dw      ZBRANCH
 945+ 743E 0C 00                        dw      Word_Else - $
 946+ 7440 0C 6E A5 6B                  dw          BLK, FETCH          //      blk @
 947+ 7444 89 7D                        dw          BLOCK               //      block ( forward )
 948+ 7446                                                              // else
 949+ 7446 15 64                        dw      BRANCH
 950+ 7448 06 00                        dw      Word_Endif - $
 951+ 744A              Word_Else:
 952+ 744A A0 6D A5 6B                  dw         TIB, FETCH           //      tib @
 953+ 744E              Word_Endif:                                     // endif
 954+ 744E 15 6E A5 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 954+ 7452 32 6A
 955+ 7454 05 6B 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 956+ 7458 EC 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 956+ 745C 22 00 FE 73
 957+ 7460 15 6E 82 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 958+ 7464 CD 6A 3F 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 958+ 7468 C0 69
 959+ 746A E8 69 EC 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 959+ 746E CE 6B
 960+ 7470 32 6A                        dw      PLUS                    // +
 961+ 7472 EC 6E 53 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 961+ 7476 D4 69
 962+ 7478 9D 68                        dw      CMOVE                   // cmove
 963+ 747A EC 6E                        dw      HERE                    // here
 964+ 747C AD 69                        dw      EXIT                    // ;
 965+ 747E
 966+ 747E              //  ______________________________________________________________________
 967+ 747E              //
 968+ 747E              // (.")         --
 969+ 747E              // Direct procedure compiled by ." and  .(  It executes TYPE.
 970+ 747E                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 970+ 747E             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 970+ 747E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 747E             >
 970+ 747E             >                // dummy db directives used to calculate length of namec
 970+ 747E 28 2E 22 29 >                db      '(.")'
 970+ 7482             >len_NFA         defl    $ - temp_NFA
 970+ 7482             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 747E             >
 970+ 747E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 747F 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 970+ 7483             >                org     $-1                 // alter last byte of Name just above to set
 970+ 7482 A9          >                db      {b $} | END_BIT     // msb as name end
 970+ 7483             >
 970+ 7483 2F 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 7485             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 7485 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 7487             >                else
 970+ 7487 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 7487             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 7487             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 7487             >
 970+ 7487             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 7487 E8 69 4B 72                  dw      R_OP, COUNT             // r count
 972+ 748B 12 6B 53 6A                  dw      DUP, ONE_PLUS           // dup 1+
 973+ 748F D4 69 32 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 973+ 7493 C0 69
 974+ 7495 71 72                        dw      TYPE                    // type
 975+ 7497 AD 69                        dw      EXIT                    // ;
 976+ 7499
 977+ 7499              //  ______________________________________________________________________
 978+ 7499              //
 979+ 7499              // char         -- c
 980+ 7499              // get first character from next input word
 981+ 7499                              Colon_Def CHAR,  "CHAR", is_normal
 981+ 7499             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 981+ 7499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ 7499             >
 981+ 7499             >                // dummy db directives used to calculate length of namec
 981+ 7499 43 48 41 52 >                db      "CHAR"
 981+ 749D             >len_NFA         defl    $ - temp_NFA
 981+ 749D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ 7499             >
 981+ 7499 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ 749A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 981+ 749E             >                org     $-1                 // alter last byte of Name just above to set
 981+ 749D D2          >                db      {b $} | END_BIT     // msb as name end
 981+ 749E             >
 981+ 749E 7E 74       >                dw      last_NFA            // Link to previous definition Name
 981+ 74A0             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 74A0 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 74A2             >                else
 981+ 74A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 981+ 74A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 74A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 74A2             >
 981+ 74A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 74A2 37 6D 36 74                  dw      BL, WORD                // bl word
 983+ 74A6 53 6A C0 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 984+ 74AA AD 69                        dw      EXIT                    // ;
 985+ 74AC
 986+ 74AC              //  ______________________________________________________________________
 987+ 74AC              //
 988+ 74AC              // ,"           --
 989+ 74AC              // compiles a string terminated by " as a counted string from next input stream
 990+ 74AC                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 990+ 74AC             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 990+ 74AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ 74AC             >
 990+ 74AC             >                // dummy db directives used to calculate length of namec
 990+ 74AC 2C 22       >                db      ',"'
 990+ 74AE             >len_NFA         defl    $ - temp_NFA
 990+ 74AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ 74AC             >
 990+ 74AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ 74AD 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 990+ 74AF             >                org     $-1                 // alter last byte of Name just above to set
 990+ 74AE A2          >                db      {b $} | END_BIT     // msb as name end
 990+ 74AF             >
 990+ 74AF 99 74       >                dw      last_NFA            // Link to previous definition Name
 990+ 74B1             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 74B1 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 74B3             >                else
 990+ 74B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 990+ 74B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 74B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 74B3             >
 990+ 74B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 74B3 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 992+ 74B7 36 74                        dw      WORD                    // word
 993+ 74B9 C0 6B 53 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 994+ 74BD FC 6E                        dw      ALLOT                   // allot
 995+ 74BF 0D 6D 19 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 996+ 74C3 AD 69                        dw      EXIT
 997+ 74C5
 998+ 74C5              //  ______________________________________________________________________
 999+ 74C5              //
1000+ 74C5              // .c           c --
1001+ 74C5              // intermediate general purpose string builder, used by ." and .(
1002+ 74C5                              Colon_Def DOT_C,  ".C", is_immediate
1002+ 74C5             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1002+ 74C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 74C5             >
1002+ 74C5             >                // dummy db directives used to calculate length of namec
1002+ 74C5 2E 43       >                db      ".C"
1002+ 74C7             >len_NFA         defl    $ - temp_NFA
1002+ 74C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 74C5             >
1002+ 74C5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 74C6 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1002+ 74C8             >                org     $-1                 // alter last byte of Name just above to set
1002+ 74C7 C3          >                db      {b $} | END_BIT     // msb as name end
1002+ 74C8             >
1002+ 74C8 AC 74       >                dw      last_NFA            // Link to previous definition Name
1002+ 74CA             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 74CA 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 74CC             >                else
1002+ 74CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 74CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 74CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 74CC             >
1002+ 74CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 74CC 58 6E A5 6B                  dw      STATE, FETCH            // state @
1004+ 74D0                                                              // if
1005+ 74D0 2C 64                        dw      ZBRANCH
1006+ 74D2 12 00                        dw      Dot_C_Else - $
1007+ 74D4 44 71 85 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1008+ 74D8 36 74 C0 6B                  dw          WORD, CFETCH        //      word c@
1009+ 74DC 53 6A FC 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1010+ 74E0                                                              // else
1011+ 74E0 15 64                        dw      BRANCH
1012+ 74E2 08 00                        dw      Dot_C_Endif - $
1013+ 74E4              Dot_C_Else:
1014+ 74E4 36 74 4B 72                  dw          WORD, COUNT, TYPE   //      word count type
1014+ 74E8 71 72
1015+ 74EA              Dot_C_Endif:                                    // endif
1016+ 74EA AD 69                        dw      EXIT                    ;
1017+ 74EC
1018+ 74EC              //  ______________________________________________________________________
1019+ 74EC              //
1020+ 74EC              // ."           c --
1021+ 74EC                              Colon_Def DOT_QUOTE,  '."', is_immediate
1021+ 74EC             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1021+ 74EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1021+ 74EC             >
1021+ 74EC             >                // dummy db directives used to calculate length of namec
1021+ 74EC 2E 22       >                db      '."'
1021+ 74EE             >len_NFA         defl    $ - temp_NFA
1021+ 74EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1021+ 74EC             >
1021+ 74EC C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1021+ 74ED 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1021+ 74EF             >                org     $-1                 // alter last byte of Name just above to set
1021+ 74EE A2          >                db      {b $} | END_BIT     // msb as name end
1021+ 74EF             >
1021+ 74EF C5 74       >                dw      last_NFA            // Link to previous definition Name
1021+ 74F1             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1021+ 74F1 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1021+ 74F3             >                else
1021+ 74F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1021+ 74F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1021+ 74F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1021+ 74F3             >
1021+ 74F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1022+ 74F3 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1023+ 74F7 CA 74                        dw      DOT_C                   // [compile] .c
1024+ 74F9 AD 69                        dw      EXIT                    // ; immediate
1025+ 74FB
1026+ 74FB              //  ______________________________________________________________________
1027+ 74FB              //
1028+ 74FB              // .(           c --
1029+ 74FB                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1029+ 74FB             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1029+ 74FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ 74FB             >
1029+ 74FB             >                // dummy db directives used to calculate length of namec
1029+ 74FB 2E 28       >                db      ".("
1029+ 74FD             >len_NFA         defl    $ - temp_NFA
1029+ 74FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ 74FB             >
1029+ 74FB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ 74FC 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1029+ 74FE             >                org     $-1                 // alter last byte of Name just above to set
1029+ 74FD A8          >                db      {b $} | END_BIT     // msb as name end
1029+ 74FE             >
1029+ 74FE EC 74       >                dw      last_NFA            // Link to previous definition Name
1029+ 7500             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 7500 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1029+ 7502             >                else
1029+ 7502 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1029+ 7502             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 7502             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 7502             >
1029+ 7502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 7502 A9 63 29 00                  dw      LIT, ")"                // [char] )
1031+ 7506 CA 74                        dw      DOT_C                   // [compile] .c
1032+ 7508 AD 69                        dw      EXIT                    // ; immediate
1033+ 750A
1034+ 750A              //  ______________________________________________________________________
1035+ 750A              //
1036+ 750A              // (sgn)        a -- a f
1037+ 750A              // determines if char in addr a is a sign (+ or -), and in that case increments
1038+ 750A              // a flag. Returns f as the sign, true for negative, false for positive.
1039+ 750A              // called by NUMBER and (EXP)
1040+ 750A                              Colon_Def CSGN,  "(SGN)", is_normal
1040+ 750A             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1040+ 750A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1040+ 750A             >
1040+ 750A             >                // dummy db directives used to calculate length of namec
1040+ 750A 28 53 47 4E >                db      "(SGN)"
1040+ 750E 29          >
1040+ 750F             >len_NFA         defl    $ - temp_NFA
1040+ 750F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1040+ 750A             >
1040+ 750A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1040+ 750B 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1040+ 750F 29          >
1040+ 7510             >                org     $-1                 // alter last byte of Name just above to set
1040+ 750F A9          >                db      {b $} | END_BIT     // msb as name end
1040+ 7510             >
1040+ 7510 FB 74       >                dw      last_NFA            // Link to previous definition Name
1040+ 7512             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1040+ 7512 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1040+ 7514             >                else
1040+ 7514 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1040+ 7514             >                endif           ; ok        // for other definitions it "points" the correct handler
1040+ 7514             >                // Use of "; ok" to suppress "warning[fwdref]"
1040+ 7514             >
1040+ 7514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1041+ 7514 12 6B 53 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1041+ 7518 C0 6B
1042+ 751A 12 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1042+ 751E 2D 00 4D 6F
1043+ 7522                                                              // if
1044+ 7522 2C 64                        dw      ZBRANCH
1045+ 7524 12 00                        dw      CSgn_Else_0 - $
1046+ 7526 DD 6A                        dw          DROP                //      drop
1047+ 7528 53 6A                        dw          ONE_PLUS            //      1+
1048+ 752A 15 6D 6B 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1048+ 752E 82 6B
1049+ 7530 15 6D                        dw          ONE                 //      1
1050+ 7532                                                              // else
1051+ 7532 15 64                        dw      BRANCH
1052+ 7534 16 00                        dw      CSgn_Endif_0 - $
1053+ 7536              CSgn_Else_0:
1054+ 7536 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1054+ 753A 4D 6F
1055+ 753C                                                              //      if
1056+ 753C 2C 64                        dw          ZBRANCH
1057+ 753E 0A 00                        dw          CSgn_Endif_1 - $
1058+ 7540 53 6A                        dw              ONE_PLUS        //          1+
1059+ 7542 15 6D 6B 6E                  dw              ONE, DPL        //          1 dpl
1060+ 7546 82 6B                        dw              PLUSSTORE       //          +!
1061+ 7548              CSgn_Endif_1                                    //      endif
1062+ 7548 0D 6D                        dw          ZERO                //      0
1063+ 754A              CSgn_Endif_0:                                   // endif
1064+ 754A AD 69                        dw      EXIT
1065+ 754C
1066+ 754C              //  ______________________________________________________________________
1067+ 754C              //
1068+ 754C              // (number)     d a -- d1 a1
1069+ 754C              // using the current BASE parse characters stored in address a
1070+ 754C              // accumulating a double precision integer d
1071+ 754C              // the process stops at the first not-convertible character
1072+ 754C              // A double-number is kept in CPU registers as HLDE.
1073+ 754C              // On the stack a double number is treated as two single numbers
1074+ 754C              // where HL is on the top of the stack and DE is the second from top,
1075+ 754C              // so in the stack memory it appears as LHED.
1076+ 754C              // Instead, in 2VARIABLE a double number is stored as EDLH.
1077+ 754C                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1077+ 754C             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1077+ 754C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1077+ 754C             >
1077+ 754C             >                // dummy db directives used to calculate length of namec
1077+ 754C 28 4E 55 4D >                db      "(NUMBER)"
1077+ 7550 42 45 52 29 >
1077+ 7554             >len_NFA         defl    $ - temp_NFA
1077+ 7554             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1077+ 754C             >
1077+ 754C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1077+ 754D 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1077+ 7551 42 45 52 29 >
1077+ 7555             >                org     $-1                 // alter last byte of Name just above to set
1077+ 7554 A9          >                db      {b $} | END_BIT     // msb as name end
1077+ 7555             >
1077+ 7555 0A 75       >                dw      last_NFA            // Link to previous definition Name
1077+ 7557             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1077+ 7557 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1077+ 7559             >                else
1077+ 7559 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1077+ 7559             >                endif           ; ok        // for other definitions it "points" the correct handler
1077+ 7559             >                // Use of "; ok" to suppress "warning[fwdref]"
1077+ 7559             >
1077+ 7559             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1078+ 7559                                                              // begin
1079+ 7559              CNumber_Begin:
1080+ 7559 53 6A                        dw          ONE_PLUS            //      1+
1081+ 755B 12 6B C0 69                  dw          DUP, TO_R           //      dup >r
1082+ 755F C0 6B                        dw          CFETCH              //      @
1083+ 7561 62 6E A5 6B                  dw          BASE, FETCH         //      base @
1084+ 7565 B1 64                        dw          DIGIT               //      digit
1085+ 7567                                                              // while
1086+ 7567 2C 64                        dw      ZBRANCH
1087+ 7569 2C 00                        dw      CNumber_While_end - $
1088+ 756B 05 6B                        dw          SWAP                //      swap
1089+ 756D 62 6E A5 6B                  dw          BASE, FETCH         //      base @
1090+ 7571 D0 68                        dw          UM_MUL              //      um*
1091+ 7573 DD 6A 1F 6B                  dw          DROP, ROT           //      drop rot
1092+ 7577 62 6E A5 6B                  dw          BASE, FETCH         //      base @
1093+ 757B D0 68                        dw          UM_MUL              //      um*
1094+ 757D 3F 6A                        dw          DPLUS               //      d+
1095+ 757F 6B 6E A5 6B                  dw          DPL, FETCH          //      dpl @
1096+ 7583 53 6A                        dw          ONE_PLUS            //      1+
1097+ 7585                                                              //      if
1098+ 7585 2C 64                        dw          ZBRANCH
1099+ 7587 08 00                        dw          CNumber_Endif - $
1100+ 7589 15 6D 6B 6E                  dw              ONE, DPL        //          1 dpl
1101+ 758D 82 6B                        dw              PLUSSTORE       //          +!
1102+ 758F              CNumber_Endif:                                  //      endif
1103+ 758F D4 69                        dw             R_TO             //      r>  ( balance rp )
1104+ 7591 15 64                        dw      BRANCH
1105+ 7593 C6 FF                        dw      CNumber_Begin - $
1106+ 7595              CNumber_While_end:                              // repeat
1107+ 7595 D4 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1108+ 7597 AD 69                        dw      EXIT                    // ;
1109+ 7599
1110+ 7599              //  ______________________________________________________________________
1111+ 7599              //
1112+ 7599              // number       a -- d
1113+ 7599                              Colon_Def NUMBER,  "NUMBER", is_normal
1113+ 7599             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1113+ 7599             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1113+ 7599             >
1113+ 7599             >                // dummy db directives used to calculate length of namec
1113+ 7599 4E 55 4D 42 >                db      "NUMBER"
1113+ 759D 45 52       >
1113+ 759F             >len_NFA         defl    $ - temp_NFA
1113+ 759F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1113+ 7599             >
1113+ 7599 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1113+ 759A 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1113+ 759E 45 52       >
1113+ 75A0             >                org     $-1                 // alter last byte of Name just above to set
1113+ 759F D2          >                db      {b $} | END_BIT     // msb as name end
1113+ 75A0             >
1113+ 75A0 4C 75       >                dw      last_NFA            // Link to previous definition Name
1113+ 75A2             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1113+ 75A2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1113+ 75A4             >                else
1113+ 75A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1113+ 75A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1113+ 75A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1113+ 75A4             >
1113+ 75A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1114+ 75A4 0D 6D 0D 6D                  dw      ZERO, ZERO              // 0 0
1115+ 75A8 1F 6B                        dw      ROT                     // rot
1116+ 75AA 12 75 C0 69                  dw      CSGN, TO_R              // (sgn) >r
1117+ 75AE 2E 6D 6B 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1117+ 75B2 B2 6B
1118+ 75B4 57 75                        dw      CNUMBER                 // (number)
1119+ 75B6 12 6B C0 6B                  dw      DUP, CFETCH             // dup c@
1120+ 75BA A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1120+ 75BE 4D 6F
1121+ 75C0                                                              // if
1122+ 75C0 2C 64                        dw      ZBRANCH
1123+ 75C2 0A 00                        dw      Number_Endif_1 - $
1124+ 75C4 0D 6D 6B 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1124+ 75C8 B2 6B
1125+ 75CA 57 75                        dw          CNUMBER             //      (number)
1126+ 75CC              Number_Endif_1:                                 // endif
1127+ 75CC C0 6B 37 6D                  dw      CFETCH, BL              // c@ bl
1128+ 75D0 3F 6F 0D 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1128+ 75D4 B1 70
1129+ 75D6 D4 69                        dw      R_TO                    // r>
1130+ 75D8                                                              // if
1131+ 75D8 2C 64                        dw      ZBRANCH
1132+ 75DA 04 00                        dw      Number_Endif_2 - $
1133+ 75DC B3 6A                        dw          DMINUS              //      dminus
1134+ 75DE              Number_Endif_2:                                 // endif
1135+ 75DE AD 69                        dw      EXIT                    // ;
1136+ 75E0
1137+ 75E0              //  ______________________________________________________________________
1138+ 75E0              //
1139+ 75E0              // -find        a -- d
1140+ 75E0                              Colon_Def LFIND,  "-FIND", is_normal
1140+ 75E0             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1140+ 75E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1140+ 75E0             >
1140+ 75E0             >                // dummy db directives used to calculate length of namec
1140+ 75E0 2D 46 49 4E >                db      "-FIND"
1140+ 75E4 44          >
1140+ 75E5             >len_NFA         defl    $ - temp_NFA
1140+ 75E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1140+ 75E0             >
1140+ 75E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1140+ 75E1 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1140+ 75E5 44          >
1140+ 75E6             >                org     $-1                 // alter last byte of Name just above to set
1140+ 75E5 C4          >                db      {b $} | END_BIT     // msb as name end
1140+ 75E6             >
1140+ 75E6 99 75       >                dw      last_NFA            // Link to previous definition Name
1140+ 75E8             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1140+ 75E8 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1140+ 75EA             >                else
1140+ 75EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1140+ 75EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1140+ 75EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1140+ 75EA             >
1140+ 75EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1141+ 75EA 37 6D 36 74                  dw      BL, WORD                // bl word
1142+ 75EE 40 6E A5 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1142+ 75F2 A5 6B
1143+ 75F4 26 65                        dw      C_FIND                  // (find)
1144+ 75F6 C0 6F                        dw      QDUP                    // ?dup
1145+ 75F8 EF 69                        dw      ZEQUAL                  // 0=
1146+ 75FA                                                              // if
1147+ 75FA 2C 64                        dw      ZBRANCH
1148+ 75FC 08 00                        dw      LFind_Endif - $
1149+ 75FE EC 6E                        dw          HERE                //      here
1150+ 7600 2D 70                        dw          LATEST              //      latest
1151+ 7602 26 65                        dw          C_FIND              //      (find)
1152+ 7604              LFind_Endif:                                    // endif
1153+ 7604 AD 69                        dw      EXIT                    // ;
1154+ 7606
1155+ 7606              //  ______________________________________________________________________
1156+ 7606              //
1157+ 7606              // (abort)      --
1158+ 7606                              Colon_Def CABORT,  "(ABORT)", is_normal
1158+ 7606             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1158+ 7606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 7606             >
1158+ 7606             >                // dummy db directives used to calculate length of namec
1158+ 7606 28 41 42 4F >                db      "(ABORT)"
1158+ 760A 52 54 29    >
1158+ 760D             >len_NFA         defl    $ - temp_NFA
1158+ 760D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 7606             >
1158+ 7606 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 7607 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1158+ 760B 52 54 29    >
1158+ 760E             >                org     $-1                 // alter last byte of Name just above to set
1158+ 760D A9          >                db      {b $} | END_BIT     // msb as name end
1158+ 760E             >
1158+ 760E E0 75       >                dw      last_NFA            // Link to previous definition Name
1158+ 7610             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 7610 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 7612             >                else
1158+ 7612 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1158+ 7612             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 7612             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 7612             >
1158+ 7612             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 7612 D7 78                        dw      ABORT                   // abort
1160+ 7614 AD 69                        dw      EXIT                    // ;
1161+ 7616
1162+ 7616              //  ______________________________________________________________________
1163+ 7616              //
1164+ 7616              // error        n --
1165+ 7616              // raise an error
1166+ 7616              // if WARNING is 0, prints "MSG#n".
1167+ 7616              // if WARNING is 1, prints line n of screen 4.
1168+ 7616              // if WARNING is -1 does (ABORT) that normally does ABORT
1169+ 7616              // value can be negative or beyond block 4.
1170+ 7616                              Colon_Def ERROR,  "ERROR", is_normal
1170+ 7616             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1170+ 7616             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1170+ 7616             >
1170+ 7616             >                // dummy db directives used to calculate length of namec
1170+ 7616 45 52 52 4F >                db      "ERROR"
1170+ 761A 52          >
1170+ 761B             >len_NFA         defl    $ - temp_NFA
1170+ 761B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1170+ 7616             >
1170+ 7616 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1170+ 7617 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1170+ 761B 52          >
1170+ 761C             >                org     $-1                 // alter last byte of Name just above to set
1170+ 761B D2          >                db      {b $} | END_BIT     // msb as name end
1170+ 761C             >
1170+ 761C 06 76       >                dw      last_NFA            // Link to previous definition Name
1170+ 761E             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1170+ 761E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1170+ 7620             >                else
1170+ 7620 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1170+ 7620             >                endif           ; ok        // for other definitions it "points" the correct handler
1170+ 7620             >                // Use of "; ok" to suppress "warning[fwdref]"
1170+ 7620             >
1170+ 7620             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1171+ 7620 B8 6D A5 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1171+ 7624 0A 6A
1172+ 7626                                                              // if
1173+ 7626 2C 64                        dw      ZBRANCH
1174+ 7628 04 00                        dw      Error_Endif_1 - $
1175+ 762A 10 76                        dw          CABORT              //      (abort)
1176+ 762C              Error_Endif_1:                                  // endif
1177+ 762C EC 6E 4B 72                  dw      HERE, COUNT, TYPE       // here count type
1177+ 7630 71 72
1178+ 7632 85 74                        dw      C_DOT_QUOTE             // .( ? )
1179+ 7634 02 3F 20                     db      2, "? "
1180+ 7637 08 7B                        dw      MESSAGE                 // message  ( forward )
1181+ 7639 8F 6D A5 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1181+ 763D 84 69
1182+ 763F 0C 6E A5 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1182+ 7643 C0 6F
1183+ 7645                                                              // if
1184+ 7645 2C 64                        dw      ZBRANCH
1185+ 7647 08 00                        dw      Error_Endif_2 - $
1186+ 7649 15 6E A5 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1186+ 764D 05 6B
1187+ 764F              Error_Endif_2:                                  // endif
1188+ 764F 96 78                        dw      QUIT                    // quit ( forward )
1189+ 7651 AD 69                        dw      EXIT                    // ;
1190+ 7653              //  ______________________________________________________________________
1191+ 7653              //
1192+ 7653              // id.          nfa --
1193+ 7653                              Colon_Def ID_DOT,  "ID.", is_normal
1193+ 7653             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1193+ 7653             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1193+ 7653             >
1193+ 7653             >                // dummy db directives used to calculate length of namec
1193+ 7653 49 44 2E    >                db      "ID."
1193+ 7656             >len_NFA         defl    $ - temp_NFA
1193+ 7656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1193+ 7653             >
1193+ 7653 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1193+ 7654 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1193+ 7657             >                org     $-1                 // alter last byte of Name just above to set
1193+ 7656 AE          >                db      {b $} | END_BIT     // msb as name end
1193+ 7657             >
1193+ 7657 16 76       >                dw      last_NFA            // Link to previous definition Name
1193+ 7659             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1193+ 7659 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1193+ 765B             >                else
1193+ 765B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1193+ 765B             >                endif           ; ok        // for other definitions it "points" the correct handler
1193+ 765B             >                // Use of "; ok" to suppress "warning[fwdref]"
1193+ 765B             >
1193+ 765B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1194+ 765B 23 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1194+ 765F 20 00 A9 63
1194+ 7663 60 00
1195+ 7665 D3 73                        dw      FILL                    // fill
1196+ 7667 12 6B 6B 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1196+ 766B 3D 70
1197+ 766D CD 6A 3F 6F                  dw      OVER, SUBTRACT          // over -
1198+ 7671 23 74 05 6B                  dw      PAD, SWAP               // pad swap
1199+ 7675 9D 68                        dw      CMOVE                   // cmove
1200+ 7677 23 74 4B 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1200+ 767B A9 63 1F 00
1201+ 767F 3D 69                        dw      AND_OP                  // and  ( use only lower bits )
1202+ 7681 71 72 F7 6F                  dw      TYPE, SPACE             // type
1203+ 7685 AD 69                        dw      EXIT                    // ;
1204+ 7687
1205+ 7687              //  ______________________________________________________________________
1206+ 7687              //
1207+ 7687              // code         -- cccc
1208+ 7687                              Colon_Def CODE,  "CODE", is_normal
1208+ 7687             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1208+ 7687             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ 7687             >
1208+ 7687             >                // dummy db directives used to calculate length of namec
1208+ 7687 43 4F 44 45 >                db      "CODE"
1208+ 768B             >len_NFA         defl    $ - temp_NFA
1208+ 768B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ 7687             >
1208+ 7687 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ 7688 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1208+ 768C             >                org     $-1                 // alter last byte of Name just above to set
1208+ 768B C5          >                db      {b $} | END_BIT     // msb as name end
1208+ 768C             >
1208+ 768C 53 76       >                dw      last_NFA            // Link to previous definition Name
1208+ 768E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 768E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1208+ 7690             >                else
1208+ 7690 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1208+ 7690             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 7690             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 7690             >
1208+ 7690             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 7690 E8 75                        dw      LFIND                   // -find
1210+ 7692                                                              // if
1211+ 7692 2C 64                        dw      ZBRANCH
1212+ 7694 10 00                        dw      Code_Endif - $
1213+ 7696 DD 6A                        dw          DROP                //      drop
1214+ 7698 8F 70 59 76                  dw          TO_NAME, ID_DOT     //      >name id.
1215+ 769C A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1215+ 76A0 08 7B
1216+ 76A2 F7 6F                        dw          SPACE               //      space
1217+ 76A4              Code_Endif:                                     // endif
1218+ 76A4 EC 6E                        dw      HERE                    // here
1219+ 76A6                                                              // ( ---- here begins NFA ---- )
1220+ 76A6 12 6B C0 6B                  dw      DUP, CFETCH             // dup c@
1221+ 76AA AB 6D A5 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1221+ 76AE 93 6F
1222+ 76B0 53 6A FC 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1223+ 76B4 12 6B                        dw      DUP                     // dup
1224+ 76B6 A9 63                        dw      LIT
1225+ 76B8 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1226+ 76BA 98 6B                        dw      TOGGLE                  // toggle
1227+ 76BC EC 6E 5F 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1228+ 76C0 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1228+ 76C4 98 6B
1229+ 76C6                                                              // ( ---- here is LFA ---- )
1230+ 76C6 2D 70 08 6F                  dw      LATEST, COMMA           // latest ,
1231+ 76CA 4D 6E A5 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1231+ 76CE B2 6B
1232+ 76D0 EC 6E 7B 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1232+ 76D4 08 6F
1233+ 76D6 AD 69                        dw      EXIT                    // ;
1234+ 76D8
1235+ 76D8              //  ______________________________________________________________________
1236+ 76D8              //
1237+ 76D8              // create       -- cccc     ( compile time )
1238+ 76D8              //              -- a        ( run time )
1239+ 76D8                              Colon_Def CREATE,  "CREATE", is_normal
1239+ 76D8             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1239+ 76D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ 76D8             >
1239+ 76D8             >                // dummy db directives used to calculate length of namec
1239+ 76D8 43 52 45 41 >                db      "CREATE"
1239+ 76DC 54 45       >
1239+ 76DE             >len_NFA         defl    $ - temp_NFA
1239+ 76DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ 76D8             >
1239+ 76D8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ 76D9 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1239+ 76DD 54 45       >
1239+ 76DF             >                org     $-1                 // alter last byte of Name just above to set
1239+ 76DE C5          >                db      {b $} | END_BIT     // msb as name end
1239+ 76DF             >
1239+ 76DF 87 76       >                dw      last_NFA            // Link to previous definition Name
1239+ 76E1             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 76E1 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 76E3             >                else
1239+ 76E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1239+ 76E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 76E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 76E3             >
1239+ 76E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 76E3 8E 76 90 71                  dw      CODE, SMUDGE        // code smudge
1241+ 76E7
1242+ 76E7
1243+ 76E7 E6 71                        dw      C_SEMICOLON_CODE
1244+ 76E9                              // this routine is called from the call coded in CFA
1245+ 76E9              Create_Ptr:
1246+ 76E9 13                           inc     de
1247+ 76EA D5                           push    de                  // balance TOS before overwrite it
1248+ 76EB
1249+ 76EB                              next
1249+ 76EB DD E9       >                jp      (ix)
1250+ 76ED
1251+ 76ED              //  ______________________________________________________________________
1252+ 76ED              //
1253+ 76ED              // [compile]    -- cccc     ( compile time )
1254+ 76ED                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1254+ 76ED             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1254+ 76ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1254+ 76ED             >
1254+ 76ED             >                // dummy db directives used to calculate length of namec
1254+ 76ED 5B 43 4F 4D >                db      "[COMPILE]"
1254+ 76F1 50 49 4C 45 >
1254+ 76F5 5D          >
1254+ 76F6             >len_NFA         defl    $ - temp_NFA
1254+ 76F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1254+ 76ED             >
1254+ 76ED C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1254+ 76EE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1254+ 76F2 50 49 4C 45 >
1254+ 76F6 5D          >
1254+ 76F7             >                org     $-1                 // alter last byte of Name just above to set
1254+ 76F6 DD          >                db      {b $} | END_BIT     // msb as name end
1254+ 76F7             >
1254+ 76F7 D8 76       >                dw      last_NFA            // Link to previous definition Name
1254+ 76F9             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1254+ 76F9 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1254+ 76FB             >                else
1254+ 76FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1254+ 76FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1254+ 76FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1254+ 76FB             >
1254+ 76FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1255+ 76FB E8 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1256+ 76FD EF 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1257+ 76FF 0D 6D B1 70                  dw      ZERO, QERROR            // 0 ?error
1258+ 7703 DD 6A                        dw      DROP                    // drop       (  cfa  )
1259+ 7705 08 6F                        dw      COMMA                   // ,
1260+ 7707 AD 69                        dw      EXIT                    // ; immediate
1261+ 7709
1262+ 7709              //  ______________________________________________________________________
1263+ 7709              //
1264+ 7709              // literal      n --      ( compile time )
1265+ 7709                              Colon_Def LITERAL,  "LITERAL", is_immediate
1265+ 7709             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1265+ 7709             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ 7709             >
1265+ 7709             >                // dummy db directives used to calculate length of namec
1265+ 7709 4C 49 54 45 >                db      "LITERAL"
1265+ 770D 52 41 4C    >
1265+ 7710             >len_NFA         defl    $ - temp_NFA
1265+ 7710             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ 7709             >
1265+ 7709 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ 770A 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1265+ 770E 52 41 4C    >
1265+ 7711             >                org     $-1                 // alter last byte of Name just above to set
1265+ 7710 CC          >                db      {b $} | END_BIT     // msb as name end
1265+ 7711             >
1265+ 7711 ED 76       >                dw      last_NFA            // Link to previous definition Name
1265+ 7713             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 7713 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1265+ 7715             >                else
1265+ 7715 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1265+ 7715             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 7715             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 7715             >
1265+ 7715             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 7715 58 6E A5 6B                  dw      STATE, FETCH            // state @
1267+ 7719                                                              // if
1268+ 7719 2C 64                        dw      ZBRANCH
1269+ 771B 08 00                        dw      Literal_Endif - $
1270+ 771D 44 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1271+ 7721 08 6F                        dw          COMMA               //      ,
1272+ 7723              Literal_Endif:                                  // endif
1273+ 7723 AD 69                        dw      EXIT                    // ; immediate
1274+ 7725
1275+ 7725              //  ______________________________________________________________________
1276+ 7725              //
1277+ 7725              // dliteral     n --      ( compile time )
1278+ 7725                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1278+ 7725             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1278+ 7725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1278+ 7725             >
1278+ 7725             >                // dummy db directives used to calculate length of namec
1278+ 7725 44 4C 49 54 >                db      "DLITERAL"
1278+ 7729 45 52 41 4C >
1278+ 772D             >len_NFA         defl    $ - temp_NFA
1278+ 772D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1278+ 7725             >
1278+ 7725 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1278+ 7726 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1278+ 772A 45 52 41 4C >
1278+ 772E             >                org     $-1                 // alter last byte of Name just above to set
1278+ 772D CC          >                db      {b $} | END_BIT     // msb as name end
1278+ 772E             >
1278+ 772E 09 77       >                dw      last_NFA            // Link to previous definition Name
1278+ 7730             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1278+ 7730 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1278+ 7732             >                else
1278+ 7732 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1278+ 7732             >                endif           ; ok        // for other definitions it "points" the correct handler
1278+ 7732             >                // Use of "; ok" to suppress "warning[fwdref]"
1278+ 7732             >
1278+ 7732             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1279+ 7732 58 6E A5 6B                  dw      STATE, FETCH            // state @
1280+ 7736                                                              // if
1281+ 7736 2C 64                        dw      ZBRANCH
1282+ 7738 08 00                        dw      DLiteral_Endif - $
1283+ 773A 05 6B                        dw          SWAP                //      swap
1284+ 773C 13 77 13 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1285+ 7740              DLiteral_Endif:                                 // endif
1286+ 7740 AD 69                        dw      EXIT                    // ; immediate
1287+ 7742
1288+ 7742              //  ______________________________________________________________________
1289+ 7742              //
1290+ 7742              // [char]       n --      ( compile time )
1291+ 7742              // inside colon definition, gets first character from next input word
1292+ 7742              // and compiles it as literal.
1293+ 7742                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1293+ 7742             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1293+ 7742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 7742             >
1293+ 7742             >                // dummy db directives used to calculate length of namec
1293+ 7742 5B 43 48 41 >                db      "[CHAR]"
1293+ 7746 52 5D       >
1293+ 7748             >len_NFA         defl    $ - temp_NFA
1293+ 7748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 7742             >
1293+ 7742 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 7743 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1293+ 7747 52 5D       >
1293+ 7749             >                org     $-1                 // alter last byte of Name just above to set
1293+ 7748 DD          >                db      {b $} | END_BIT     // msb as name end
1293+ 7749             >
1293+ 7749 25 77       >                dw      last_NFA            // Link to previous definition Name
1293+ 774B             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 774B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1293+ 774D             >                else
1293+ 774D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1293+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 774D             >
1293+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 774D A0 74 13 77                  dw      CHAR, LITERAL           // char [compile] literal
1295+ 7751 AD 69                        dw      EXIT                    // ; immediate
1296+ 7753
1297+ 7753              //  ______________________________________________________________________
1298+ 7753              //
1299+ 7753              // 0x00         n --      ( compile time )
1300+ 7753                              Colon_Def NUL_WORD,  $00, is_immediate
1300+ 7753             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1300+ 7753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1300+ 7753             >
1300+ 7753             >                // dummy db directives used to calculate length of namec
1300+ 7753 00          >                db      $00
1300+ 7754             >len_NFA         defl    $ - temp_NFA
1300+ 7754             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1300+ 7753             >
1300+ 7753 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1300+ 7754 00          >                db      $00               // name string in 7-bit ascii, but
1300+ 7755             >                org     $-1                 // alter last byte of Name just above to set
1300+ 7754 80          >                db      {b $} | END_BIT     // msb as name end
1300+ 7755             >
1300+ 7755 42 77       >                dw      last_NFA            // Link to previous definition Name
1300+ 7757             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1300+ 7757 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1300+ 7759             >                else
1300+ 7759 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1300+ 7759             >                endif           ; ok        // for other definitions it "points" the correct handler
1300+ 7759             >                // Use of "; ok" to suppress "warning[fwdref]"
1300+ 7759             >
1300+ 7759             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1301+ 7759 0C 6E A5 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1301+ 775D 15 6D
1302+ 775F 85 6F                        dw      GREATER                 // > if
1303+ 7761                                                              // if
1304+ 7761 2C 64                        dw      ZBRANCH
1305+ 7763 28 00                        dw      Nul_Else_1 - $
1306+ 7765 15 6D 0C 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1306+ 7769 82 6B
1307+ 776B 0D 6D 15 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1307+ 776F B2 6B
1308+ 7771 0C 6E A5 6B                  dw          BLK, FETCH          //      blk @
1309+ 7775 59 6D                        dw          BSCR                //      b/scr
1310+ 7777 5F 6A                        dw          ONE_SUBTRACT        //      1 -
1311+ 7779 3D 69                        dw          AND_OP              //      and  ( this is tricky )
1312+ 777B EF 69                        dw          ZEQUAL              //      0=
1313+ 777D                                                              //      if
1314+ 777D 2C 64                        dw          ZBRANCH
1315+ 777F 08 00                        dw          Nul_Endif_2 - $
1316+ 7781 E3 70                        dw              QEXEC           //          ?exec
1317+ 7783 D4 69 DD 6A                  dw              R_TO, DROP      //          r> drop
1318+ 7787              Nul_Endif_2:                                    //      endif
1319+ 7787 15 64                        dw      BRANCH
1320+ 7789 06 00                        dw      Nul_Endif_1 - $
1321+ 778B              Nul_Else_1:                                     // else
1322+ 778B D4 69 DD 6A                  dw          R_TO, DROP          //      r> drop
1323+ 778F              Nul_Endif_1:                                    // endif
1324+ 778F AD 69                        dw      EXIT                    // ;
1325+ 7791
1326+ 7791              //  ______________________________________________________________________
1327+ 7791              //
1328+ 7791              // ?stack       --
1329+ 7791              // Raise error #1 if stack is empty and you pop it
1330+ 7791              // Raise error #7 if stack is full.
1331+ 7791              // This means SP must always stay between HERE and FFFF
1332+ 7791              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1333+ 7791              // for Next 8K MMU paging this is $DOE8
1334+ 7791                              Colon_Def QSTACK, "?STACK", is_normal
1334+ 7791             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1334+ 7791             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 7791             >
1334+ 7791             >                // dummy db directives used to calculate length of namec
1334+ 7791 3F 53 54 41 >                db      "?STACK"
1334+ 7795 43 4B       >
1334+ 7797             >len_NFA         defl    $ - temp_NFA
1334+ 7797             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 7791             >
1334+ 7791 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 7792 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1334+ 7796 43 4B       >
1334+ 7798             >                org     $-1                 // alter last byte of Name just above to set
1334+ 7797 CB          >                db      {b $} | END_BIT     // msb as name end
1334+ 7798             >
1334+ 7798 53 77       >                dw      last_NFA            // Link to previous definition Name
1334+ 779A             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 779A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1334+ 779C             >                else
1334+ 779C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1334+ 779C             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 779C             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 779C             >
1334+ 779C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 779C 75 69                        dw      SPFETCH                 // sp@
1336+ 779E 8F 6D A5 6B                  dw      S0, FETCH               // s0 @
1337+ 77A2 05 6B 5A 6F                  dw      SWAP, ULESS             // swap u<
1338+ 77A6 15 6D B1 70                  dw      ONE, QERROR             // 1 ?error
1339+ 77AA EC 6E                        dw      HERE                    // here
1340+ 77AC 8F 6D A5 6B                  dw      S0, FETCH, LESS         // s0 @ <
1340+ 77B0 6E 6F
1341+ 77B2                                                              // if
1342+ 77B2 2C 64                        dw      ZBRANCH
1343+ 77B4 14 00                        dw      QStack_Endif - $
1344+ 77B6 75 69                        dw          SPFETCH             //      sp@
1345+ 77B8 EC 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1345+ 77BC 80 00
1346+ 77BE 32 6A 5A 6F                  dw          PLUS, ULESS         //      plus u<
1347+ 77C2 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1347+ 77C6 B1 70
1348+ 77C8              QStack_Endif:                                   // endif
1349+ 77C8 AD 69                        dw      EXIT                    // ;
1350+ 77CA
1351+ 77CA
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77CA                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77CA              //  ______________________________________________________________________
   2+ 77CA              //
   3+ 77CA              //  L2.asm
   4+ 77CA              //
   5+ 77CA              //  Level-2
   6+ 77CA              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77CA              //  ______________________________________________________________________
   8+ 77CA
   9+ 77CA
  10+ 77CA              //  ______________________________________________________________________
  11+ 77CA              //
  12+ 77CA              // interpret    --
  13+ 77CA              // This is the text interpreter.
  14+ 77CA              // It executes or compiles, depending on STATE, the text coming from
  15+ 77CA              // current input stream.
  16+ 77CA              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77CA              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77CA              // leaving on top of stack a single or double precision number, depending
  19+ 77CA              // on the presence of a decimal point.
  20+ 77CA              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77CA              // by the offending word.
  22+ 77CA                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77CA             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77CA             >
  22+ 77CA             >                // dummy db directives used to calculate length of namec
  22+ 77CA 49 4E 54 45 >                db      "INTERPRET"
  22+ 77CE 52 50 52 45 >
  22+ 77D2 54          >
  22+ 77D3             >len_NFA         defl    $ - temp_NFA
  22+ 77D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77CA             >
  22+ 77CA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77CB 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77CF 52 50 52 45 >
  22+ 77D3 54          >
  22+ 77D4             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77D3 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77D4             >
  22+ 77D4 91 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77D6             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77D6 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77D8             >                else
  22+ 77D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77D8             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77D8             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77D8             >
  22+ 77D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77D8
  24+ 77D8              Interpret_Begin:                                        // begin
  25+ 77D8 E8 75                        dw          LFIND                       //      -find
  26+ 77DA                                                                      //      if
  27+ 77DA 2C 64                        dw          ZBRANCH
  28+ 77DC 1A 00                        dw          Interpret_Else_1 - $
  29+ 77DE 58 6E A5 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77E2 6E 6F
  30+ 77E4                                                                      //          if
  31+ 77E4 2C 64                        dw              ZBRANCH
  32+ 77E6 08 00                        dw              Interpret_Else_2 - $
  33+ 77E8 61 71                        dw                  COMPILE_XT          //              compile,
  34+ 77EA                                                                      //          else
  35+ 77EA 15 64                        dw              BRANCH
  36+ 77EC 06 00                        dw              Interpret_Endif_2 - $
  37+ 77EE              Interpret_Else_2:
  38+ 77EE BE 63 B8 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77F2              Interpret_Endif_2:                                      //          endif
  40+ 77F2                                                                      //      else
  41+ 77F2 15 64                        dw          BRANCH
  42+ 77F4 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77F6              Interpret_Else_1:
  44+ 77F6 EC 6E A2 75                  dw              HERE, NUMBER            //          here number
  45+ 77FA 6B 6E A5 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77FE 53 6A
  46+ 7800                                                                      //          if
  47+ 7800 2C 64                        dw              ZBRANCH
  48+ 7802 08 00                        dw              Interpret_Else_3 - $
  49+ 7804              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7804              //                                                      //              if
  51+ 7804              //              dw                  ZBRANCH
  52+ 7804              //              dw                  Interpret_Endif_4 - $
  53+ 7804              //              dw                      ONE, ZERO       //                  1 0
  54+ 7804              //              dw                      TWO_DROP        //                  2drop
  55+ 7804              //Interpret_Endif_4:                                      //              endif
  56+ 7804 30 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7806                                                                      //          else
  58+ 7806 15 64                        dw              BRANCH
  59+ 7808 06 00                        dw              Interpret_Endif_3 - $
  60+ 780A              Interpret_Else_3:
  61+ 780A DD 6A                        dw                  DROP                //              drop
  62+ 780C 13 77                        dw                  LITERAL             //              [compile]  literal
  63+ 780E              Interpret_Endif_3:                                      //          endif
  64+ 780E              Interpret_Endif_1:                                      //      endif
  65+ 780E 9A 77                        dw          QSTACK                      //      ?stack
  66+ 7810 3F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7812                                                                      //      if
  68+ 7812 2C 64                        dw          ZBRANCH
  69+ 7814 04 00                        dw          Interpret_Endif_5 - $
  70+ 7816 10 76                        dw              CABORT                  //          (abort)
  71+ 7818              Interpret_Endif_5:                                      //      endif
  72+ 7818 15 64                        dw      BRANCH
  73+ 781A BE FF                        dw      Interpret_Begin - $
  74+ 781C AD 69                        dw      EXIT                            // ;
  75+ 781E
  76+ 781E              //  ______________________________________________________________________
  77+ 781E              //
  78+ 781E              // vocabulary   -- cccc     ( compile time )
  79+ 781E              // Defining word used in the form   VOCABULARY cccc
  80+ 781E              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 781E              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 781E              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 781E              // so new definitions can be inserted in that vocabulary.
  84+ 781E                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 781E             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 781E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 781E             >
  84+ 781E             >                // dummy db directives used to calculate length of namec
  84+ 781E 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7822 42 55 4C 41 >
  84+ 7826 52 59       >
  84+ 7828             >len_NFA         defl    $ - temp_NFA
  84+ 7828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 781E             >
  84+ 781E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 781F 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7823 42 55 4C 41 >
  84+ 7827 52 59       >
  84+ 7829             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7828 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7829             >
  84+ 7829 CA 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 782B             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 782B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 782D             >                else
  84+ 782D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 782D             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 782D             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 782D             >
  84+ 782D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 782D
  86+ 782D 14 72                        dw      CBUILDS
  87+ 782F
  88+ 782F A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7833 08 6F
  89+ 7835 4D 6E A5 6B                  dw      CURRENT, FETCH          // current @
  90+ 7839 85 6A 08 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 783D EC 6E                        dw      HERE                    // here
  92+ 783F D9 6D A5 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7843 08 6F
  93+ 7845 D9 6D B2 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7849
  95+ 7849 24 72                        dw      DOES_TO                 // does>
  96+ 784B              Vocabulary_Does:
  97+ 784B 7B 6A                        dw      CELL_PLUS               // cell+
  98+ 784D 40 6E B2 6B                  dw      CONTEXT, STORE          // context !
  99+ 7851 AD 69                        dw      EXIT                    // ;
 100+ 7853
 101+ 7853              //  ______________________________________________________________________
 102+ 7853              //
 103+ 7853              // forth        --
 104+ 7853              // Name of the first vocabulary.
 105+ 7853              // It makes FORTH the CONTEXT vocabulary.
 106+ 7853              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7853              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7853              // of a colon definition to be able to select the vocabulary.
 109+ 7853
 110+ 7853                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7853             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7853             >
 110+ 7853             >                // dummy db directives used to calculate length of namec
 110+ 7853 46 4F 52 54 >                db      "FORTH"
 110+ 7857 48          >
 110+ 7858             >len_NFA         defl    $ - temp_NFA
 110+ 7858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7853             >
 110+ 7853 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7854 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7858 48          >
 110+ 7859             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7858 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7859             >
 110+ 7859 1E 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 785B             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 785B 30 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 785D             >                else
 110+ 785D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 785D             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 785D             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 785D             >
 110+ 785D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 785D 4B 78                        dw      Vocabulary_Does
 112+ 785F 81 A0                        db      $81, $A0
 113+ 7861              Forth_Latest_Ptr:
 114+ 7861 7C 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7863              Voclink_Ptr:
 116+ 7863 00 00                        dw      0
 117+ 7865              // Any new vocabulary is structured as follow:
 118+ 7865              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7865              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7865              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7865              //       at creations it points to the null-word of its parent vocabulary
 122+ 7865              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7865              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7865              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7865              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7865              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7865              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7865
 129+ 7865              //  ______________________________________________________________________
 130+ 7865              //
 131+ 7865              // definitions  --
 132+ 7865              // Used in the form  cccc DEFINITIONS
 133+ 7865              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7865              // vocabulary cccc.
 135+ 7865                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7865             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7865             >
 135+ 7865             >                // dummy db directives used to calculate length of namec
 135+ 7865 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7869 4E 49 54 49 >
 135+ 786D 4F 4E 53    >
 135+ 7870             >len_NFA         defl    $ - temp_NFA
 135+ 7870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7865             >
 135+ 7865 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7866 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 786A 4E 49 54 49 >
 135+ 786E 4F 4E 53    >
 135+ 7871             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7870 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7871             >
 135+ 7871 53 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7873             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7873 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7875             >                else
 135+ 7875 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7875             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7875             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7875             >
 135+ 7875             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7875 40 6E A5 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7879 4D 6E B2 6B                  dw      CURRENT, STORE          // current !
 138+ 787D AD 69                        dw      EXIT                    // ;
 139+ 787F
 140+ 787F              //  ______________________________________________________________________
 141+ 787F              //
 142+ 787F              // (            -- cccc )
 143+ 787F              // the following text is interpreted as a comment until a closing )
 144+ 787F                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 787F             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 787F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 787F             >
 144+ 787F             >                // dummy db directives used to calculate length of namec
 144+ 787F 28          >                db      "("
 144+ 7880             >len_NFA         defl    $ - temp_NFA
 144+ 7880             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 787F             >
 144+ 787F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7880 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7881             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7880 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7881             >
 144+ 7881 65 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7883             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7883 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7885             >                else
 144+ 7885 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7885             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7885             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7885             >
 144+ 7885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7885 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7889 36 74 DD 6A                  dw      WORD, DROP              // word drop
 147+ 788D AD 69                        dw      EXIT                    // ;
 148+ 788F
 149+ 788F              //  ______________________________________________________________________
 150+ 788F              //
 151+ 788F              // quit         --
 152+ 788F              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 788F                              Colon_Def QUIT, "QUIT", is_normal
 153+ 788F             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 788F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 788F             >
 153+ 788F             >                // dummy db directives used to calculate length of namec
 153+ 788F 51 55 49 54 >                db      "QUIT"
 153+ 7893             >len_NFA         defl    $ - temp_NFA
 153+ 7893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 788F             >
 153+ 788F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7890 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7894             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7893 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7894             >
 153+ 7894 7F 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7896             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7896 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7898             >                else
 153+ 7898 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7898             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7898             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7898             >
 153+ 7898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7898
 155+ 7898 C3 6E A5 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 789C CB 67 DD 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 78A0 0D 6D C3 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 78A4 B2 6B
 158+ 78A6 0D 6D 0C 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 78AA B2 6B
 159+ 78AC 6D 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78AE                                                              // begin
 161+ 78AE              Quit_Begin:
 162+ 78AE 97 6D A5 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78B2 9E 69
 163+ 78B4 2A 66                        dw      CR                      //      cr
 164+ 78B6 B6 73                        dw      QUERY                   //      query
 165+ 78B8              Next_Breakpoint_1:
 166+ 78B8 D6 77                        dw      INTERPRET               //      interpret
 167+ 78BA 58 6E A5 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78BE EF 69
 168+ 78C0                                                              //      if
 169+ 78C0 2C 64                        dw      ZBRANCH
 170+ 78C2 07 00                        dw      Quit_Endif - $
 171+ 78C4 85 74                        dw          C_DOT_QUOTE
 172+ 78C6 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78C9              Quit_Endif:                                     //      else
 174+ 78C9                                                              // again
 175+ 78C9 15 64                        dw      BRANCH
 176+ 78CB E3 FF                        dw      Quit_Begin - $
 177+ 78CD AD 69                        dw      EXIT                    // ;
 178+ 78CF
 179+ 78CF              //  ______________________________________________________________________
 180+ 78CF              //
 181+ 78CF              // abort        --
 182+ 78CF                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78CF             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78CF             >
 182+ 78CF             >                // dummy db directives used to calculate length of namec
 182+ 78CF 41 42 4F 52 >                db      "ABORT"
 182+ 78D3 54          >
 182+ 78D4             >len_NFA         defl    $ - temp_NFA
 182+ 78D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78CF             >
 182+ 78CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78D0 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78D4 54          >
 182+ 78D5             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78D4 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78D5             >
 182+ 78D5 8F 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78D7             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78D7 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78D9             >                else
 182+ 78D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78D9             >
 182+ 78D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78D9 8F 6D A5 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78DD 84 69
 184+ 78DF D0 71                        dw      DECIMAL                 // decimal
 185+ 78E1 5B 78                        dw      FORTH                   // [compile] forth
 186+ 78E3 73 78                        dw      DEFINITIONS             // definitions
 187+ 78E5              Autoexec_Ptr:
 188+ 78E5 9C 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78E7 96 78                        dw      QUIT                    // quit
 190+ 78E9 AD 69                        dw      EXIT                    // ;
 191+ 78EB
 192+ 78EB              //  ______________________________________________________________________
 193+ 78EB              //
 194+ 78EB              // warm         --
 195+ 78EB                              Colon_Def WARM, "WARM", is_normal
 195+ 78EB             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78EB             >
 195+ 78EB             >                // dummy db directives used to calculate length of namec
 195+ 78EB 57 41 52 4D >                db      "WARM"
 195+ 78EF             >len_NFA         defl    $ - temp_NFA
 195+ 78EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78EB             >
 195+ 78EB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78EC 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78F0             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78EF CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78F0             >
 195+ 78F0 CF 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78F2             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78F2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78F4             >                else
 195+ 78F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78F4             >
 195+ 78F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78F4 71 7C                        dw      BLK_INIT                // blk-init
 197+ 78F6 4D 84                        dw      SPLASH                  // splash
 198+ 78F8 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78FC DB 6F
 199+ 78FE D7 78                        dw      ABORT                   // abort
 200+ 7900 AD 69                        dw      EXIT                    // exit
 201+ 7902
 202+ 7902              //  ______________________________________________________________________
 203+ 7902              //
 204+ 7902              // cold         --
 205+ 7902                              Colon_Def COLD, "COLD", is_normal
 205+ 7902             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 7902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 7902             >
 205+ 7902             >                // dummy db directives used to calculate length of namec
 205+ 7902 43 4F 4C 44 >                db      "COLD"
 205+ 7906             >len_NFA         defl    $ - temp_NFA
 205+ 7906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 7902             >
 205+ 7902 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 7903 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 7907             >                org     $-1                 // alter last byte of Name just above to set
 205+ 7906 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 7907             >
 205+ 7907 EB 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 7909             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7909 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 790B             >                else
 205+ 790B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 790B             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 790B             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 790B             >
 205+ 790B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 790B A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 790F A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7913 A5 6B                        dw      FETCH                   // @
 209+ 7915 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7919 32 6A
 210+ 791B A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 791F 9D 68                        dw      CMOVE
 212+ 7921 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7925 A5 6B                        dw      FETCH                   // @
 214+ 7927 A9 63 61 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 792B B2 6B                        dw      STORE                   // !
 216+ 792D 0D 6D 03 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7931 B2 6B
 217+ 7933 E4 6D A5 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7937 12 6B
 218+ 7939 97 6E B2 6B                  dw      USE, STORE              // use !
 219+ 793D A1 6E B2 6B                  dw      PREV, STORE             // prev !
 220+ 7941 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7945 B4 6E B2 6B
 221+ 7949              //              dw      LIT, 8
 222+ 7949              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7949 1D 6D E2 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 794D B2 6B
 224+ 794F F2 78        Warm_Start:     dw      WARM
 225+ 7951 09 79        Cold_Start:     dw      COLD
 226+ 7953 AD 69                        dw      EXIT
 227+ 7955
 228+ 7955              //  ______________________________________________________________________
 229+ 7955              WarmRoutine:
 230+ 7955              ColdRoutine:
 231+ 7955 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7959 D9                           exx
 233+ 795A E5                           push    hl
 234+ 795B D9                           exx
 235+ 795C
 236+ 795C ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7960 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7964              //              nop
 239+ 7964 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7967              //              nop
 241+ 7967                              ldrphl
 241+ 7967 22 96 63    >                ld      (RP_Pointer),hl
 242+ 796A 01 4F 79                     ld      bc, Warm_Start
 243+ 796D 38 02                        jr      c, Warm_Skip
 244+ 796F 03                           inc     bc
 245+ 7970 03                           inc     bc
 246+ 7971              Warm_Skip:
 247+ 7971                              next
 247+ 7971 DD E9       >                jp      (ix)
 248+ 7973
 249+ 7973              //  ______________________________________________________________________
 250+ 7973              //
 251+ 7973              // basic        --
 252+ 7973                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7973             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7973             >
 252+ 7973             >                // dummy db directives used to calculate length of namec
 252+ 7973 42 41 53 49 >                db      "BASIC"
 252+ 7977 43          >
 252+ 7978             >len_NFA         defl    $ - temp_NFA
 252+ 7978             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7973             >
 252+ 7973 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7974 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7978 43          >
 252+ 7979             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7978 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7979             >
 252+ 7979 02 79       >                dw      last_NFA            // Link to previous definition Name
 252+ 797B             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 797B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 797B             >                else
 252+ 797B 7D 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 797D             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 797D             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 797D             >
 252+ 797D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 797D C1                           pop     bc
 254+ 797E 21 00 00                     ld      hl, 0
 255+ 7981 39                           add     hl, sp
 256+ 7982 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7986              //              nop
 258+ 7986 22 6E 63                     ld      (SP_Basic),hl
 259+ 7989 D9                           exx
 260+ 798A E1                           pop     hl
 261+ 798B D9                           exx
 262+ 798C C9                           ret     // to Basic
 263+ 798D
 264+ 798D              //  ______________________________________________________________________
 265+ 798D              //
 266+ 798D              // +-           n1 n2 -- n3
 267+ 798D              // leaves n1 with the sign of n2 as n3.
 268+ 798D                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 798D             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 798D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 798D             >
 268+ 798D             >                // dummy db directives used to calculate length of namec
 268+ 798D 2B 2D       >                db      "+-"
 268+ 798F             >len_NFA         defl    $ - temp_NFA
 268+ 798F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 798D             >
 268+ 798D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 798E 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7990             >                org     $-1                 // alter last byte of Name just above to set
 268+ 798F AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7990             >
 268+ 7990 73 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7992             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7992 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7994             >                else
 268+ 7994 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7994             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7994             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7994             >
 268+ 7994             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7994 0A 6A                        dw      ZLESS                   // 0<
 270+ 7996                                                              // if
 271+ 7996 2C 64                        dw      ZBRANCH
 272+ 7998 04 00                        dw      Plus_Minus_Endif - $
 273+ 799A 9D 6A                        dw          MINUS               //      minus
 274+ 799C              Plus_Minus_Endif:                               // endif
 275+ 799C AD 69                        dw      EXIT                    // ;
 276+ 799E
 277+ 799E              //  ______________________________________________________________________
 278+ 799E              //
 279+ 799E              // d+-          d1 n -- d2
 280+ 799E              // leaves d1 with the sign of n as d2.
 281+ 799E                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 799E             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 799E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 799E             >
 281+ 799E             >                // dummy db directives used to calculate length of namec
 281+ 799E 44 2B 2D    >                db      "D+-"
 281+ 79A1             >len_NFA         defl    $ - temp_NFA
 281+ 79A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 799E             >
 281+ 799E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 799F 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 79A2             >                org     $-1                 // alter last byte of Name just above to set
 281+ 79A1 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 79A2             >
 281+ 79A2 8D 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 79A4             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 79A4 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 79A6             >                else
 281+ 79A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 79A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 79A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 79A6             >
 281+ 79A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 79A6 0A 6A                        dw      ZLESS                   // 0<
 283+ 79A8                                                              // if
 284+ 79A8 2C 64                        dw      ZBRANCH
 285+ 79AA 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79AC B3 6A                        dw          DMINUS              //      dminus
 287+ 79AE              DPlus_Minus_Endif:                              // endif
 288+ 79AE AD 69                        dw      EXIT                    // ;
 289+ 79B0
 290+ 79B0              //  ______________________________________________________________________
 291+ 79B0              //
 292+ 79B0              // abs          n1 -- n2
 293+ 79B0                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79B0             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79B0             >
 293+ 79B0             >                // dummy db directives used to calculate length of namec
 293+ 79B0 41 42 53    >                db      "ABS"
 293+ 79B3             >len_NFA         defl    $ - temp_NFA
 293+ 79B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79B0             >
 293+ 79B0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79B1 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79B4             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79B3 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79B4             >
 293+ 79B4 9E 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79B6             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79B6 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79B8             >                else
 293+ 79B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79B8             >
 293+ 79B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79B8 12 6B                        dw      DUP                     // dup
 295+ 79BA 92 79                        dw      PLUS_MINUS              // +-
 296+ 79BC AD 69                        dw      EXIT                    // ;
 297+ 79BE
 298+ 79BE              //  ______________________________________________________________________
 299+ 79BE              //
 300+ 79BE              // dabs         d1 -- d2
 301+ 79BE                              Colon_Def DABS, "DABS", is_normal
 301+ 79BE             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79BE             >
 301+ 79BE             >                // dummy db directives used to calculate length of namec
 301+ 79BE 44 41 42 53 >                db      "DABS"
 301+ 79C2             >len_NFA         defl    $ - temp_NFA
 301+ 79C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79BE             >
 301+ 79BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79BF 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79C3             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79C2 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79C3             >
 301+ 79C3 B0 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79C5             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79C5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79C7             >                else
 301+ 79C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79C7             >
 301+ 79C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79C7 12 6B                        dw      DUP                     // dup
 303+ 79C9 A4 79                        dw      DPLUS_MINUS             // d+-
 304+ 79CB AD 69                        dw      EXIT                    // ;
 305+ 79CD
 306+ 79CD              //  ______________________________________________________________________
 307+ 79CD              //
 308+ 79CD              // m*           n1 n2 -- d
 309+ 79CD              // multiply two integer giving a double
 310+ 79CD                              Colon_Def MMUL, "M*", is_normal
 310+ 79CD             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79CD             >
 310+ 79CD             >                // dummy db directives used to calculate length of namec
 310+ 79CD 4D 2A       >                db      "M*"
 310+ 79CF             >len_NFA         defl    $ - temp_NFA
 310+ 79CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79CD             >
 310+ 79CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79CE 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79D0             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79CF AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79D0             >
 310+ 79D0 BE 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79D2             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79D2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79D4             >                else
 310+ 79D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79D4             >
 310+ 79D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79D4 73 6B 62 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79D8 C0 69
 312+ 79DA B6 79 05 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79DE B6 79 D0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79E2 D4 69 A4 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79E6 AD 69                        dw      EXIT                    // ;
 316+ 79E8
 317+ 79E8              //  ______________________________________________________________________
 318+ 79E8              //
 319+ 79E8              // sm/rem       d n -- q r
 320+ 79E8              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79E8              // the remainder has the sign of d.
 322+ 79E8                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79E8             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79E8             >
 322+ 79E8             >                // dummy db directives used to calculate length of namec
 322+ 79E8 53 4D 2F 52 >                db      "SM/REM"
 322+ 79EC 45 4D       >
 322+ 79EE             >len_NFA         defl    $ - temp_NFA
 322+ 79EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79E8             >
 322+ 79E8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79E9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79ED 45 4D       >
 322+ 79EF             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79EE CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79EF             >
 322+ 79EF CD 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79F1             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79F1 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79F3             >                else
 322+ 79F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79F3             >
 322+ 79F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79F3 CD 6A C0 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79F7 C0 69
 324+ 79F9 C5 79 E8 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79FD B6 79
 325+ 79FF 01 69                        dw      UMDIVMOD                // um/mod
 326+ 7A01 D4 69                        dw      R_TO                    // r>
 327+ 7A03 E8 69 62 69                  dw      R_OP, XOR_OP            // r xor
 328+ 7A07 92 79 05 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 7A0B D4 69                        dw      R_TO                    // r>
 330+ 7A0D 92 79 05 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 7A11 AD 69                        dw      EXIT                    // ;
 332+ 7A13
 333+ 7A13              //  ______________________________________________________________________
 334+ 7A13              //
 335+ 7A13              // fm/mod       d n -- q r
 336+ 7A13              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A13              // the remainder has the sign of d.
 338+ 7A13                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A13             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A13             >
 338+ 7A13             >                // dummy db directives used to calculate length of namec
 338+ 7A13 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A17 4F 44       >
 338+ 7A19             >len_NFA         defl    $ - temp_NFA
 338+ 7A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A13             >
 338+ 7A13 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A14 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A18 4F 44       >
 338+ 7A1A             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A19 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A1A             >
 338+ 7A1A E8 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A1C             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A1C 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A1E             >                else
 338+ 7A1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A1E             >
 338+ 7A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A1E 12 6B C0 69                  dw      DUP, TO_R               // dup >r
 340+ 7A22 F1 79                        dw      SMDIVM
 341+ 7A24 CD 6A 12 6B                  dw      OVER, DUP
 342+ 7A28 EF 69 EF 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A2C 05 6B 0A 6A                  dw      SWAP, ZLESS
 344+ 7A30 E8 69 0A 6A                  dw      R_OP, ZLESS
 345+ 7A34 62 69 3D 69                  dw      XOR_OP, AND_OP
 346+ 7A38 2C 64                        dw      ZBRANCH
 347+ 7A3A 10 00                        dw      Fm_Mod_Else - $
 348+ 7A3C 5F 6A                        dw          ONE_SUBTRACT
 349+ 7A3E 05 6B D4 69                  dw          SWAP, R_TO
 350+ 7A42 32 6A 05 6B                  dw          PLUS, SWAP
 351+ 7A46 15 64                        dw      BRANCH
 352+ 7A48 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A4A              Fm_Mod_Else:
 354+ 7A4A D4 69 DD 6A                  dw          R_TO, DROP
 355+ 7A4E              Fm_Mod_Endif:
 356+ 7A4E AD 69                        dw      EXIT
 357+ 7A50              //              dw      TWO_DUP                 // 2dup
 358+ 7A50              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A50              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A50              //              dw      UMDIVMOD                // um/mod
 361+ 7A50              //              dw      SWAP                    // swap
 362+ 7A50              //              dw      II, ZLESS               // i'
 363+ 7A50              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A50              //              dw      R_TO                    // r>
 365+ 7A50              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A50              //              dw      R_OP                    // r@
 367+ 7A50              //              dw      ZLESS                   // i'
 368+ 7A50              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A50              //              dw      R_TO                    // r>
 370+ 7A50              //              dw      PLUS_MINUS              // +- swap
 371+ 7A50              //              dw      EXIT                    // ;
 372+ 7A50
 373+ 7A50              //  ______________________________________________________________________
 374+ 7A50              //
 375+ 7A50              // m/mod        d n -- q r
 376+ 7A50              // multiply two integer giving a double
 377+ 7A50                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A50             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A50             >
 377+ 7A50             >                // dummy db directives used to calculate length of namec
 377+ 7A50 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A54 44          >
 377+ 7A55             >len_NFA         defl    $ - temp_NFA
 377+ 7A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A50             >
 377+ 7A50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A51 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A55 44          >
 377+ 7A56             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A55 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A56             >
 377+ 7A56 13 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A58             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A58 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A5A             >                else
 377+ 7A5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A5A             >
 377+ 7A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A5A F1 79                        dw      SMDIVM
 379+ 7A5C AD 69                        dw      EXIT                    // ;
 380+ 7A5E
 381+ 7A5E              //  ______________________________________________________________________
 382+ 7A5E              //
 383+ 7A5E              // m/           d n -- q
 384+ 7A5E              // multiply two integer giving a double
 385+ 7A5E                              Colon_Def MDIV, "M/", is_normal
 385+ 7A5E             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A5E             >
 385+ 7A5E             >                // dummy db directives used to calculate length of namec
 385+ 7A5E 4D 2F       >                db      "M/"
 385+ 7A60             >len_NFA         defl    $ - temp_NFA
 385+ 7A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A5E             >
 385+ 7A5E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A5F 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A61             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A60 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A61             >
 385+ 7A61 50 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A63             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A63 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A65             >                else
 385+ 7A65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A65             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A65             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A65             >
 385+ 7A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A65 58 7A E8 6A                  dw      MDIVM, NIP
 387+ 7A69 AD 69                        dw      EXIT                    // ;
 388+ 7A6B
 389+ 7A6B              //  ______________________________________________________________________
 390+ 7A6B              //
 391+ 7A6B              // *            n1 n2 -- n3
 392+ 7A6B              // multiply two integer
 393+ 7A6B                              Colon_Def MUL, "*", is_normal
 393+ 7A6B             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A6B             >
 393+ 7A6B             >                // dummy db directives used to calculate length of namec
 393+ 7A6B 2A          >                db      "*"
 393+ 7A6C             >len_NFA         defl    $ - temp_NFA
 393+ 7A6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A6B             >
 393+ 7A6B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A6C 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A6D             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A6C AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A6D             >
 393+ 7A6D 5E 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A6F             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A6F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A71             >                else
 393+ 7A71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A71             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A71             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A71             >
 393+ 7A71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A71 D2 79 DD 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A75 AD 69                        dw      EXIT                    // ;
 396+ 7A77
 397+ 7A77              //  ______________________________________________________________________
 398+ 7A77              //
 399+ 7A77              // /mod         n1 n2 -- n3 n4
 400+ 7A77              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A77              // The remainder has the sign of n1
 402+ 7A77                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A77             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A77             >
 402+ 7A77             >                // dummy db directives used to calculate length of namec
 402+ 7A77 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A7B             >len_NFA         defl    $ - temp_NFA
 402+ 7A7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A77             >
 402+ 7A77 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A78 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A7C             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A7B C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A7C             >
 402+ 7A7C 6B 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A7E             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A7E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A80             >                else
 402+ 7A80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A80             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A80             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A80             >
 402+ 7A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A80 C0 69 2B 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A84 D4 69
 404+ 7A86 58 7A                        dw      MDIVM                   // m/mod
 405+ 7A88 AD 69                        dw      EXIT                    // ;
 406+ 7A8A
 407+ 7A8A              //  ______________________________________________________________________
 408+ 7A8A              //
 409+ 7A8A              // /            n1 n2 -- n3
 410+ 7A8A              // division
 411+ 7A8A                              Colon_Def DIV, "/", is_normal
 411+ 7A8A             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A8A             >
 411+ 7A8A             >                // dummy db directives used to calculate length of namec
 411+ 7A8A 2F          >                db      "/"
 411+ 7A8B             >len_NFA         defl    $ - temp_NFA
 411+ 7A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A8A             >
 411+ 7A8A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A8B 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A8C             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A8B AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A8C             >
 411+ 7A8C 77 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A8E             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A8E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A90             >                else
 411+ 7A90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A90             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A90             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A90             >
 411+ 7A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A90 7E 7A E8 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A94 AD 69                        dw      EXIT                    // ;
 414+ 7A96
 415+ 7A96              //  ______________________________________________________________________
 416+ 7A96              //
 417+ 7A96              // mod          n1 n2 -- n3
 418+ 7A96                              Colon_Def MOD, "MOD", is_normal
 418+ 7A96             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A96             >
 418+ 7A96             >                // dummy db directives used to calculate length of namec
 418+ 7A96 4D 4F 44    >                db      "MOD"
 418+ 7A99             >len_NFA         defl    $ - temp_NFA
 418+ 7A99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A96             >
 418+ 7A96 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A97 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A9A             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A99 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A9A             >
 418+ 7A9A 8A 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A9C             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A9C 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A9E             >                else
 418+ 7A9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A9E             >
 418+ 7A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A9E 7E 7A DD 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7AA2 AD 69                        dw      EXIT                    // ;
 421+ 7AA4
 422+ 7AA4              //  ______________________________________________________________________
 423+ 7AA4              //
 424+ 7AA4              // */mod        n1 n2 n3 -- n4 n5
 425+ 7AA4              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7AA4              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7AA4              // avoids loss of precision
 428+ 7AA4                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7AA4             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7AA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7AA4             >
 428+ 7AA4             >                // dummy db directives used to calculate length of namec
 428+ 7AA4 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7AA8 44          >
 428+ 7AA9             >len_NFA         defl    $ - temp_NFA
 428+ 7AA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7AA4             >
 428+ 7AA4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7AA5 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7AA9 44          >
 428+ 7AAA             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7AA9 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7AAA             >
 428+ 7AAA 96 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7AAC             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7AAC 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AAE             >                else
 428+ 7AAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7AAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AAE             >
 428+ 7AAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AAE C0 69 D2 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AB2 D4 69 58 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AB6 AD 69                        dw      EXIT                    // ;
 432+ 7AB8
 433+ 7AB8              //  ______________________________________________________________________
 434+ 7AB8              //
 435+ 7AB8              // */          n1 n2 n3 -- n4
 436+ 7AB8              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AB8                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AB8             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AB8             >
 437+ 7AB8             >                // dummy db directives used to calculate length of namec
 437+ 7AB8 2A 2F       >                db      "*/"
 437+ 7ABA             >len_NFA         defl    $ - temp_NFA
 437+ 7ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AB8             >
 437+ 7AB8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AB9 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7ABB             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7ABA AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7ABB             >
 437+ 7ABB A4 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7ABD             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7ABD 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7ABF             >                else
 437+ 7ABF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7ABF             >
 437+ 7ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7ABF AC 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AC1 E8 6A                        dw     NIP                      // nip
 440+ 7AC3 AD 69                        dw     EXIT                     // ;
 441+ 7AC5
 442+ 7AC5
 443+ 7AC5              //  ______________________________________________________________________
 444+ 7AC5              //
 445+ 7AC5              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AC5              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AC5              // All terms are unsigned.
 448+ 7AC5              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AC5              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AC5              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AC5              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AC5              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AC5              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AC5              //              dw      EXIT                    // ;
 455+ 7AC5
 456+ 7AC5              //  ______________________________________________________________________
 457+ 7AC5              //
 458+ 7AC5              // (line)       n1 n2 -- a b
 459+ 7AC5              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AC5              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AC5                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AC5             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AC5             >
 461+ 7AC5             >                // dummy db directives used to calculate length of namec
 461+ 7AC5 28 4C 49 4E >                db      "(LINE)"
 461+ 7AC9 45 29       >
 461+ 7ACB             >len_NFA         defl    $ - temp_NFA
 461+ 7ACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AC5             >
 461+ 7AC5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AC6 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7ACA 45 29       >
 461+ 7ACC             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7ACB A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7ACC             >
 461+ 7ACC B8 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7ACE             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7ACE 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AD0             >                else
 461+ 7AD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AD0             >
 461+ 7AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AD0 C0 69                        dw      TO_R                    // >r
 463+ 7AD2 B8 6C                        dw      NOOP                    // noop
 464+ 7AD4 41 6D                        dw      CL                      // c/l
 465+ 7AD6 4D 6D AC 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ADA D4 69                        dw      R_TO                    // r>
 467+ 7ADC 59 6D 6F 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AE0 32 6A
 468+ 7AE2 89 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AE4 32 6A                        dw      PLUS                    // +
 470+ 7AE6 B8 6C                        dw      NOOP                    // noop
 471+ 7AE8 41 6D                        dw      CL                      // c/l
 472+ 7AEA AD 69                        dw      EXIT                    // ;
 473+ 7AEC
 474+ 7AEC              //  ______________________________________________________________________
 475+ 7AEC              //
 476+ 7AEC              // .line        n1 n2 --
 477+ 7AEC              // Sends to output line  n1  of screen n2.
 478+ 7AEC                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AEC             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AEC             >
 478+ 7AEC             >                // dummy db directives used to calculate length of namec
 478+ 7AEC 2E 4C 49 4E >                db      ".LINE"
 478+ 7AF0 45          >
 478+ 7AF1             >len_NFA         defl    $ - temp_NFA
 478+ 7AF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AEC             >
 478+ 7AEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AED 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AF1 45          >
 478+ 7AF2             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AF1 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AF2             >
 478+ 7AF2 C5 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AF4             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AF4 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AF6             >                else
 478+ 7AF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AF6             >
 478+ 7AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AF6 CE 7A D5 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AFA 71 72
 480+ 7AFC AD 69                        dw      EXIT                    // ;
 481+ 7AFE
 482+ 7AFE              //  ______________________________________________________________________
 483+ 7AFE              //
 484+ 7AFE              // message       n1 n2 --
 485+ 7AFE              // prints error message to current channel.
 486+ 7AFE              // if WARNING is 0, prints "MSG#n".
 487+ 7AFE              // if WARNING is 1, prints line n of screen 4.
 488+ 7AFE              // if WARNING is -1, see ERROR
 489+ 7AFE              // value can be negative or beyond block 4.
 490+ 7AFE                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AFE             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AFE             >
 490+ 7AFE             >                // dummy db directives used to calculate length of namec
 490+ 7AFE 4D 45 53 53 >                db      "MESSAGE"
 490+ 7B02 41 47 45    >
 490+ 7B05             >len_NFA         defl    $ - temp_NFA
 490+ 7B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AFE             >
 490+ 7AFE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AFF 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7B03 41 47 45    >
 490+ 7B06             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7B05 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7B06             >
 490+ 7B06 EC 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7B08             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7B08 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7B0A             >                else
 490+ 7B0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7B0A             >
 490+ 7B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7B0A B8 6D A5 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B0E                                                              // if
 493+ 7B0E 2C 64                        dw      ZBRANCH
 494+ 7B10 18 00                        dw      Message_Else - $
 495+ 7B12 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B16 33 6E A5 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B1A 59 6D 8E 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B1E 3F 6F
 498+ 7B20 F4 7A                        dw          DOT_LINE            //      .line
 499+ 7B22 F7 6F                        dw          SPACE               //      space
 500+ 7B24                                                              // else
 501+ 7B24
 502+ 7B24 15 64                        dw      BRANCH
 503+ 7B26 0B 00                        dw      Message_ENdif - $
 504+ 7B28              Message_Else:
 505+ 7B28 85 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B2A 04 6D 73 67                  db          4, "msg#"
 506+ 7B2E 23
 507+ 7B2F 46 83                        dw          DOT                 //      .  ( forward )
 508+ 7B31              Message_ENdif:                                  // endif
 509+ 7B31 AD 69                        dw      EXIT                    // ;
 510+ 7B33
 511+ 7B33
 512+ 7B33              //  ______________________________________________________________________
 513+ 7B33              //
 514+ 7B33              // device
 515+ 7B33                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B33             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B33             >
 515+ 7B33             >                // dummy db directives used to calculate length of namec
 515+ 7B33 44 45 56 49 >                db      "DEVICE"
 515+ 7B37 43 45       >
 515+ 7B39             >len_NFA         defl    $ - temp_NFA
 515+ 7B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B33             >
 515+ 7B33 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B34 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B38 43 45       >
 515+ 7B3A             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B39 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B3A             >
 515+ 7B3A FE 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B3C             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B3C EA 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B3E             >                else
 515+ 7B3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B3E             >
 515+ 7B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B3E 02 00       >                dw      2
 516+ 7B40
 517+ 7B40              //  ______________________________________________________________________
 518+ 7B40
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B40                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B40              //  ______________________________________________________________________
   2+ 7B40              //
   3+ 7B40              //  next-opt.asm
   4+ 7B40              //
   5+ 7B40              //  ZX Spectrum Next - peculiar definitions
   6+ 7B40              //  ______________________________________________________________________
   7+ 7B40
   8+ 7B40              //  ______________________________________________________________________
   9+ 7B40              //
  10+ 7B40              // reg@         n -- b
  11+ 7B40              // read Next REGister n giving byte b
  12+ 7B40
  13+ 7B40                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B40             >
  13+ 7B40             >                // dummy db directives used to calculate length of namec
  13+ 7B40 52 45 47 40 >                db      "REG@"
  13+ 7B44             >len_NFA         defl    $ - temp_NFA
  13+ 7B44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B40             >
  13+ 7B40 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B41 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B45             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B44 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B45             >
  13+ 7B45 33 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B47             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B47 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B47             >                else
  13+ 7B47 49 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B49             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B49             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B49             >
  13+ 7B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B49 D9                           exx
  15+ 7B4A 01 3B 24                     ld      bc, $243B
  16+ 7B4D E1                           pop     hl
  17+ 7B4E ED 69                        out     (c), l
  18+ 7B50 04                           inc     b
  19+ 7B51 ED 68                        in      l,(c)
  20+ 7B53 E5                           push    hl
  21+ 7B54 D9                           exx
  22+ 7B55                              next
  22+ 7B55 DD E9       >                jp      (ix)
  23+ 7B57
  24+ 7B57
  25+ 7B57              //  ______________________________________________________________________
  26+ 7B57              //
  27+ 7B57              // reg!         b n --
  28+ 7B57              // write value b to Next REGister n
  29+ 7B57
  30+ 7B57                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B57             >
  30+ 7B57             >                // dummy db directives used to calculate length of namec
  30+ 7B57 52 45 47 21 >                db      "REG!"
  30+ 7B5B             >len_NFA         defl    $ - temp_NFA
  30+ 7B5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B57             >
  30+ 7B57 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B58 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B5C             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B5B A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B5C             >
  30+ 7B5C 40 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B5E             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B5E             >                else
  30+ 7B5E 60 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B60             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B60             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B60             >
  30+ 7B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B60 D9                           exx
  32+ 7B61 01 3B 24                     ld      bc, $243B
  33+ 7B64 E1                           pop     hl
  34+ 7B65 ED 69                        out     (c), l
  35+ 7B67 04                           inc     b
  36+ 7B68 E1                           pop     hl
  37+ 7B69 ED 69                        out     (c), l
  38+ 7B6B D9                           exx
  39+ 7B6C                              next
  39+ 7B6C DD E9       >                jp      (ix)
  40+ 7B6E
  41+ 7B6E
  42+ 7B6E              //  ______________________________________________________________________
  43+ 7B6E              //
  44+ 7B6E              // mmu7@        -- n
  45+ 7B6E              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B6E
  47+ 7B6E                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B6E             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B6E             >
  47+ 7B6E             >                // dummy db directives used to calculate length of namec
  47+ 7B6E 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B72 40          >
  47+ 7B73             >len_NFA         defl    $ - temp_NFA
  47+ 7B73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B6E             >
  47+ 7B6E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B6F 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B73 40          >
  47+ 7B74             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B73 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B74             >
  47+ 7B74 57 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B76             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B76 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B78             >                else
  47+ 7B78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B78             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B78             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B78             >
  47+ 7B78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B78 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B7C 47 7B
  49+ 7B7E AD 69                        dw      EXIT
  50+ 7B80
  51+ 7B80              //  ______________________________________________________________________
  52+ 7B80              //
  53+ 7B80              // mmu7!        n --
  54+ 7B80              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B80              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B80
  57+ 7B80                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B80             >
  57+ 7B80             >                // dummy db directives used to calculate length of namec
  57+ 7B80 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B84 21          >
  57+ 7B85             >len_NFA         defl    $ - temp_NFA
  57+ 7B85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B80             >
  57+ 7B80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B81 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B85 21          >
  57+ 7B86             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B85 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B86             >
  57+ 7B86 6E 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B88             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B88 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B88             >                else
  57+ 7B88 8A 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B8A             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B8A             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B8A             >
  57+ 7B8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B8A E1                           pop     hl
  59+ 7B8B 7D                           ld      a, l
  60+ 7B8C ED 92 57                     nextreg 87, a
  61+ 7B8F
  62+ 7B8F                              next
  62+ 7B8F DD E9       >                jp      (ix)
  63+ 7B91
  64+ 7B91              //  ______________________________________________________________________
  65+ 7B91              //
  66+ 7B91              // >far         ha -- a n
  67+ 7B91              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B91              // take lower bits of H and L as an offset from E000h
  69+ 7B91              // then return address  a  between E000h-FFFFh
  70+ 7B91              // and page number n  between 64-71 (40h-47h)
  71+ 7B91              // For example, in hex:
  72+ 7B91              //   0000 >FAR  gives  40.E000
  73+ 7B91              //   1FFF >FAR  gives  40.FFFF
  74+ 7B91              //   2000 >FAR  gives  41.E000
  75+ 7B91              //   3FFF >FAR  gives  41.FFFF
  76+ 7B91              //   EFFF >FAR  gives  47.EFFF
  77+ 7B91              //   FFFF >FAR  gives  47.FFFF
  78+ 7B91              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B91              //                pop     de
  80+ 7B91              //                ld      a, d
  81+ 7B91              //                and     $E0
  82+ 7B91              //                rlca
  83+ 7B91              //                rlca
  84+ 7B91              //                rlca
  85+ 7B91              //                add     $40
  86+ 7B91              //                ld      l, a
  87+ 7B91              //                ld      h, 0
  88+ 7B91              //                ld      a, d
  89+ 7B91              //                or      $E0
  90+ 7B91              //                ld      d, a
  91+ 7B91              //                push    hl
  92+ 7B91              //                push    de
  93+ 7B91              //                next
  94+ 7B91
  95+ 7B91              //  ______________________________________________________________________
  96+ 7B91              //
  97+ 7B91              // <far         a n  -- ha
  98+ 7B91              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B91              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B91              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B91              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B91              //                pop     de                  // page number in e
 103+ 7B91              //                pop     hl                  // address in hl
 104+ 7B91              //                ld      a, e
 105+ 7B91              //                sub     $40                 // reduced to 0-7
 106+ 7B91              //                rrca
 107+ 7B91              //                rrca
 108+ 7B91              //                rrca
 109+ 7B91              //                ld      d, a                // save to d bits 765
 110+ 7B91              //                ld      a, h                // drops
 111+ 7B91              //                and     $1F
 112+ 7B91              //                or      d
 113+ 7B91              //                ld      h, a
 114+ 7B91              //
 115+ 7B91              //                psh1
 116+ 7B91
 117+ 7B91              //  ______________________________________________________________________
 118+ 7B91              //
 119+ 7B91              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B91              // NextZXOS call wrapper.
 121+ 7B91              //  n1 = hl register parameter value
 122+ 7B91              //  n2 = de register parameter value
 123+ 7B91              //  n3 = bc register parameter value
 124+ 7B91              //  n4 =  a register parameter value
 125+ 7B91              //   a = routine address in ROM 3
 126+ 7B91              // ----
 127+ 7B91              //  n5 = hl returned value
 128+ 7B91              //  n6 = de returned value
 129+ 7B91              //  n7 = bc returned value
 130+ 7B91              //  n8 =  a returned value
 131+ 7B91              //   f
 132+ 7B91                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B91             >
 132+ 7B91             >                // dummy db directives used to calculate length of namec
 132+ 7B91 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B95 44 4F 53    >
 132+ 7B98             >len_NFA         defl    $ - temp_NFA
 132+ 7B98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B91             >
 132+ 7B91 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B92 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B96 44 4F 53    >
 132+ 7B99             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B98 D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B99             >
 132+ 7B99 80 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B9B             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B9B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B9B             >                else
 132+ 7B9B 9D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B9D             >
 132+ 7B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B9D D1                           pop     de                  // dos call entry address in de
 134+ 7B9E E1                           pop     hl                  // a register
 135+ 7B9F 7D                           ld      a, l
 136+ 7BA0 D9                           exx
 137+ 7BA1 C1                           pop     bc
 138+ 7BA2 D1                           pop     de
 139+ 7BA3 E1                           pop     hl
 140+ 7BA4 D9                           exx
 141+ 7BA5
 142+ 7BA5 C5                           push    bc
 143+ 7BA6 DD E5                        push    ix
 144+ 7BA8
 145+ 7BA8              //              ld      (SP_Saved), sp
 146+ 7BA8              //              ld      sp, Cold_origin - 5
 147+ 7BA8 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7BAA
 149+ 7BAA CF                           rst     08
 150+ 7BAB 94                           db      $94
 151+ 7BAC
 152+ 7BAC              //              ld      sp, (SP_Saved)
 153+ 7BAC              //              push    ix
 154+ 7BAC              //              pop     hl
 155+ 7BAC              //              ld      (IX_Echo), hl
 156+ 7BAC DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7BB0              //              nop
 158+ 7BB0 DD E1                        pop     ix
 159+ 7BB2 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BB3 D5                           push    de
 161+ 7BB4 C5                           push    bc
 162+ 7BB5 4D                           ld      c, l
 163+ 7BB6 44                           ld      b, h
 164+ 7BB7
 165+ 7BB7 26 00                        ld      h, 0
 166+ 7BB9 6F                           ld      l, a
 167+ 7BBA E5                           push    hl
 168+ 7BBB ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BBD 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BBE
 171+ 7BBE                              psh1
 171+ 7BBE E5          >                push    hl
 171+ 7BBF DD E9       >                jp      (ix)
 172+ 7BC1
 173+ 7BC1              //  ______________________________________________________________________
 174+ 7BC1              //
 175+ 7BC1              // blk-fh
 176+ 7BC1                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BC1             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BC1             >
 176+ 7BC1             >                // dummy db directives used to calculate length of namec
 176+ 7BC1 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BC5 46 48       >
 176+ 7BC7             >len_NFA         defl    $ - temp_NFA
 176+ 7BC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BC1             >
 176+ 7BC1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BC2 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BC6 46 48       >
 176+ 7BC8             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BC7 C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BC8             >
 176+ 7BC8 91 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BCA             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BCA EA 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BCC             >                else
 176+ 7BCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BCC             >
 176+ 7BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BCC 01 00       >                dw      1
 177+ 7BCE
 178+ 7BCE                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BCE             >
 178+ 7BCE             >                // dummy db directives used to calculate length of namec
 178+ 7BCE 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BD2 46 4E 41 4D >
 178+ 7BD6 45          >
 178+ 7BD7             >len_NFA         defl    $ - temp_NFA
 178+ 7BD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BCE             >
 178+ 7BCE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BCF 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BD3 46 4E 41 4D >
 178+ 7BD7 45          >
 178+ 7BD8             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BD7 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BD8             >
 178+ 7BD8 C1 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BDA             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BDA E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BDC             >                else
 178+ 7BDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BDC             >
 178+ 7BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BDC 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BE0 6F 63 6B 73
 179+ 7BE4 2D 36 34 2E
 179+ 7BE8 62 69 6E 00
 180+ 7BEC 00 00 00...                  ds      24
 181+ 7C04
 182+ 7C04              //  ______________________________________________________________________
 183+ 7C04              //
 184+ 7C04              // blk-seek     n --
 185+ 7C04              // seek block n  within blocks!.bin  file
 186+ 7C04                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7C04             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7C04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C04             >
 186+ 7C04             >                // dummy db directives used to calculate length of namec
 186+ 7C04 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7C08 53 45 45 4B >
 186+ 7C0C             >len_NFA         defl    $ - temp_NFA
 186+ 7C0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C04             >
 186+ 7C04 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C05 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7C09 53 45 45 4B >
 186+ 7C0D             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C0C CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C0D             >
 186+ 7C0D CE 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C0F             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C0F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C11             >                else
 186+ 7C11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C11             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C11             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C11             >
 186+ 7C11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C11 4D 6D D2 79                  dw  BBUF, MMUL
 188+ 7C15 CA 7B A5 6B                  dw  BLK_FH, FETCH
 189+ 7C19 A8 67                        dw  F_SEEK
 190+ 7C1B A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C1F B1 70
 191+ 7C21 AD 69                        dw  EXIT
 192+ 7C23
 193+ 7C23              //  ______________________________________________________________________
 194+ 7C23              //
 195+ 7C23              // blk-read     n --
 196+ 7C23              // seek block n  within blocks!.bin  file
 197+ 7C23                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C23             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C23             >
 197+ 7C23             >                // dummy db directives used to calculate length of namec
 197+ 7C23 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C27 52 45 41 44 >
 197+ 7C2B             >len_NFA         defl    $ - temp_NFA
 197+ 7C2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C23             >
 197+ 7C23 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C24 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C28 52 45 41 44 >
 197+ 7C2C             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C2B C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C2C             >
 197+ 7C2C 04 7C       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C2E             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C2E 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C30             >                else
 197+ 7C30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C30             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C30             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C30             >
 197+ 7C30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C30 0F 7C                        dw  BLK_SEEK
 199+ 7C32 4D 6D                        dw  BBUF
 200+ 7C34 CA 7B A5 6B                  dw  BLK_FH, FETCH
 201+ 7C38 14 68                        dw  F_READ
 202+ 7C3A A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C3E B1 70
 203+ 7C40 DD 6A                        dw  DROP
 204+ 7C42 AD 69                        dw  EXIT
 205+ 7C44
 206+ 7C44              //  ______________________________________________________________________
 207+ 7C44              //
 208+ 7C44              // blk-write     n --
 209+ 7C44              // seek block n  within blocks!.bin  file
 210+ 7C44                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C44             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C44             >
 210+ 7C44             >                // dummy db directives used to calculate length of namec
 210+ 7C44 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C48 57 52 49 54 >
 210+ 7C4C 45          >
 210+ 7C4D             >len_NFA         defl    $ - temp_NFA
 210+ 7C4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C44             >
 210+ 7C44 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C45 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C49 57 52 49 54 >
 210+ 7C4D 45          >
 210+ 7C4E             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C4D C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C4E             >
 210+ 7C4E 23 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C50             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C50 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C52             >                else
 210+ 7C52 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C52             >
 210+ 7C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C52 0F 7C                        dw  BLK_SEEK
 212+ 7C54 4D 6D                        dw  BBUF
 213+ 7C56 CA 7B A5 6B                  dw  BLK_FH, FETCH
 214+ 7C5A 33 68                        dw  F_WRITE
 215+ 7C5C A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C60 B1 70
 216+ 7C62 DD 6A                        dw  DROP
 217+ 7C64 AD 69                        dw  EXIT
 218+ 7C66
 219+ 7C66              //  ______________________________________________________________________
 220+ 7C66              //
 221+ 7C66              // blk-init     n --
 222+ 7C66              // seek block n  within blocks!.bin  file
 223+ 7C66                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C66             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C66             >
 223+ 7C66             >                // dummy db directives used to calculate length of namec
 223+ 7C66 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C6A 49 4E 49 54 >
 223+ 7C6E             >len_NFA         defl    $ - temp_NFA
 223+ 7C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C66             >
 223+ 7C66 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C67 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C6B 49 4E 49 54 >
 223+ 7C6F             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C6E D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C6F             >
 223+ 7C6F 44 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C71             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C71 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C73             >                else
 223+ 7C73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C73             >
 223+ 7C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C73 CA 7B A5 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C77 CB 67 DD 6A
 225+ 7C7B DA 7B 53 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C7F EC 6E 25 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C83 4A 68
 227+ 7C85 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C89 B1 70
 228+ 7C8B CA 7B B2 6B                  dw  BLK_FH, STORE
 229+ 7C8F AD 69                        dw  EXIT
 230+ 7C91
 231+ 7C91              //  ______________________________________________________________________
 232+ 7C91              //
 233+ 7C91              // #sec
 234+ 7C91              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C91              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C91
 237+ 7C91                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C91             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C91             >
 237+ 7C91             >                // dummy db directives used to calculate length of namec
 237+ 7C91 23 53 45 43 >                db      "#SEC"
 237+ 7C95             >len_NFA         defl    $ - temp_NFA
 237+ 7C95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C91             >
 237+ 7C91 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C92 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C96             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C95 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C96             >
 237+ 7C96 66 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C98             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C98 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C9A             >                else
 237+ 7C9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C9A             >
 237+ 7C9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C9A FF 7F       >                dw      32767
 238+ 7C9C
 239+ 7C9C              //  ______________________________________________________________________
 240+ 7C9C
 241+ 7C9C
 242+ 7C9C
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C9C                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C9C              //  ______________________________________________________________________
   2+ 7C9C              //
   3+ 7C9C              //  L3.asm
   4+ 7C9C              //
   5+ 7C9C              //  Continuation of L2.asm
   6+ 7C9C              //  I/O Block definitions
   7+ 7C9C              //  ______________________________________________________________________
   8+ 7C9C
   9+ 7C9C
  10+ 7C9C              //  ______________________________________________________________________
  11+ 7C9C              //
  12+ 7C9C              // r/w          a n f --
  13+ 7C9C              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C9C                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C9C             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C9C             >
  14+ 7C9C             >                // dummy db directives used to calculate length of namec
  14+ 7C9C 52 2F 57    >                db      "R/W"
  14+ 7C9F             >len_NFA         defl    $ - temp_NFA
  14+ 7C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C9C             >
  14+ 7C9C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C9D 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CA0             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C9F D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CA0             >
  14+ 7CA0 91 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CA2             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CA2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CA4             >                else
  14+ 7CA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CA4             >
  14+ 7CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CA4 C0 69                        dw      TO_R                    // >r
  16+ 7CA6 5F 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CA8 12 6B 0A 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CAC CD 6A 98 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CB0 5F 6A 85 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CB4 4F 69                        dw      OR_OP                   // or
  21+ 7CB6 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CBA B1 70
  22+ 7CBC D4 69                        dw      R_TO                    // r>
  23+ 7CBE                                                              // if
  24+ 7CBE 2C 64                        dw      ZBRANCH
  25+ 7CC0 08 00                        dw      Read_Write_Else - $
  26+ 7CC2 2E 7C                        dw          BLK_READ            //      blk-read
  27+ 7CC4 15 64                        dw      BRANCH
  28+ 7CC6 04 00                        dw      Read_Write_Endif - $
  29+ 7CC8              Read_Write_Else:                                // else
  30+ 7CC8 50 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CCA              Read_Write_Endif:                               // endif
  32+ 7CCA AD 69                        dw      EXIT                    // ;
  33+ 7CCC
  34+ 7CCC
  35+ 7CCC              //  ______________________________________________________________________
  36+ 7CCC              //
  37+ 7CCC              // +buf        a1 -- a2 f
  38+ 7CCC              // advences to next buffer, cyclically rotating along them
  39+ 7CCC                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CCC             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CCC             >
  39+ 7CCC             >                // dummy db directives used to calculate length of namec
  39+ 7CCC 2B 42 55 46 >                db      "+BUF"
  39+ 7CD0             >len_NFA         defl    $ - temp_NFA
  39+ 7CD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CCC             >
  39+ 7CCC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CCD 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CD1             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CD0 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CD1             >
  39+ 7CD1 9C 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CD3             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CD3 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CD5             >                else
  39+ 7CD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CD5             >
  39+ 7CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CD5 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CD9 32 6A
  41+ 7CDB 12 6B EF 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CDF A5 6B
  42+ 7CE1 4D 6F                        dw      EQUALS                  // =
  43+ 7CE3                                                              // if
  44+ 7CE3 2C 64                        dw      ZBRANCH
  45+ 7CE5 08 00                        dw      PBuf_Endif - $
  46+ 7CE7 DD 6A                        dw          DROP                //      drop
  47+ 7CE9 E4 6D A5 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CED              PBuf_Endif:                                     // endif
  49+ 7CED 12 6B A1 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CF1 A5 6B
  50+ 7CF3 3F 6F                        dw      SUBTRACT                // -
  51+ 7CF5 AD 69                        dw      EXIT                    // ;
  52+ 7CF7
  53+ 7CF7              //  ______________________________________________________________________
  54+ 7CF7              //
  55+ 7CF7              // update       --
  56+ 7CF7              // mark the last used block to be written to disk
  57+ 7CF7                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CF7             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CF7             >
  57+ 7CF7             >                // dummy db directives used to calculate length of namec
  57+ 7CF7 55 50 44 41 >                db      "UPDATE"
  57+ 7CFB 54 45       >
  57+ 7CFD             >len_NFA         defl    $ - temp_NFA
  57+ 7CFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CF7             >
  57+ 7CF7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CF8 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CFC 54 45       >
  57+ 7CFE             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CFD C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CFE             >
  57+ 7CFE CC 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D00             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D00 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D02             >                else
  57+ 7D02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D02             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D02             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D02             >
  57+ 7D02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D02 A1 6E A5 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D06 A5 6B
  59+ 7D08 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D0C 4F 69
  60+ 7D0E A1 6E A5 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D12 B2 6B
  61+ 7D14 AD 69                        dw      EXIT                    // ;
  62+ 7D16
  63+ 7D16
  64+ 7D16              //  ______________________________________________________________________
  65+ 7D16              //
  66+ 7D16              // empty-buffers --
  67+ 7D16                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D16             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D16             >
  67+ 7D16             >                // dummy db directives used to calculate length of namec
  67+ 7D16 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D1A 59 2D 42 55 >
  67+ 7D1E 46 46 45 52 >
  67+ 7D22 53          >
  67+ 7D23             >len_NFA         defl    $ - temp_NFA
  67+ 7D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D16             >
  67+ 7D16 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D17 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D1B 59 2D 42 55 >
  67+ 7D1F 46 46 45 52 >
  67+ 7D23 53          >
  67+ 7D24             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D23 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D24             >
  67+ 7D24 F7 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D26             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D26 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D28             >                else
  67+ 7D28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D28             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D28             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D28             >
  67+ 7D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D28 E4 6D A5 6B                  dw      FIRST, FETCH            // first @
  69+ 7D2C EF 6D A5 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D30 CD 6A 3F 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D34 ED 73
  71+ 7D36 AD 69                        dw      EXIT                    // ;
  72+ 7D38
  73+ 7D38              //  ______________________________________________________________________
  74+ 7D38              //
  75+ 7D38              // buffer       n -- a
  76+ 7D38              // read block n and gives the address to a buffer
  77+ 7D38              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D38              // disk before reading the block n.
  79+ 7D38
  80+ 7D38                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D38             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D38             >
  80+ 7D38             >                // dummy db directives used to calculate length of namec
  80+ 7D38 42 55 46 46 >                db      "BUFFER"
  80+ 7D3C 45 52       >
  80+ 7D3E             >len_NFA         defl    $ - temp_NFA
  80+ 7D3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D38             >
  80+ 7D38 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D39 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D3D 45 52       >
  80+ 7D3F             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D3E D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D3F             >
  80+ 7D3F 16 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D41             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D41 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D43             >                else
  80+ 7D43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D43             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D43             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D43             >
  80+ 7D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D43 97 6E A5 6B                  dw      USE, FETCH              // use @
  82+ 7D47 12 6B C0 69                  dw      DUP, TO_R               // dup >r
  83+ 7D4B                                                              // begin
  84+ 7D4B              Buffer_Begin:
  85+ 7D4B D3 7C                        dw          PBUF                //      +buf
  86+ 7D4D                                                              // until
  87+ 7D4D 2C 64                        dw      ZBRANCH
  88+ 7D4F FC FF                        dw      Buffer_Begin - $
  89+ 7D51 97 6E B2 6B                  dw      USE, STORE              // use !
  90+ 7D55 E8 69 A5 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D59 0A 6A
  91+ 7D5B                                                              // if
  92+ 7D5B 2C 64                        dw      ZBRANCH
  93+ 7D5D 14 00                        dw      Buffer_Endif - $
  94+ 7D5F E8 69 7B 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D63 E8 69 A5 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D67 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D6B 3D 69                        dw          AND_OP              //      and
  98+ 7D6D 0D 6D A2 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D71              Buffer_Endif:                                   // endif
 100+ 7D71 E8 69 B2 6B                  dw      R_OP, STORE             // r !
 101+ 7D75 E8 69 A1 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D79 B2 6B
 102+ 7D7B D4 69 7B 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D7F AD 69                        dw      EXIT                    // ;
 104+ 7D81
 105+ 7D81              //  ______________________________________________________________________
 106+ 7D81              //
 107+ 7D81              // block        n -- a
 108+ 7D81              // Leaves the buffer address that contains the block n.
 109+ 7D81              // If the block is not already present, it will be loaded from disk
 110+ 7D81              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D81              // disk before reading the block n.
 112+ 7D81              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D81
 114+ 7D81                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D81             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D81             >
 114+ 7D81             >                // dummy db directives used to calculate length of namec
 114+ 7D81 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D85 4B          >
 114+ 7D86             >len_NFA         defl    $ - temp_NFA
 114+ 7D86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D81             >
 114+ 7D81 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D82 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D86 4B          >
 114+ 7D87             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D86 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D87             >
 114+ 7D87 38 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D89             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D89 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D8B             >                else
 114+ 7D8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D8B             >
 114+ 7D8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D8B 33 6E A5 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D8F 32 6A C0 69                  dw      PLUS, TO_R              // + >r
 117+ 7D93 A1 6E A5 6B                  dw      PREV, FETCH             // prev @
 118+ 7D97 12 6B A5 6B                  dw      DUP, FETCH              // dup @
 119+ 7D9B E8 69 3F 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D9F 12 6B 32 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DA3                                                              // if
 122+ 7DA3 2C 64                        dw        ZBRANCH
 123+ 7DA5 32 00                        dw        Block_Endif_1 - $
 124+ 7DA7              Block_Begin:                                    //      begin
 125+ 7DA7 D3 7C EF 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DAB                                                              //          if
 127+ 7DAB 2C 64                        dw          ZBRANCH
 128+ 7DAD 12 00                        dw          Block_Endif_2 - $
 129+ 7DAF DD 6A                        dw              DROP            //              drop
 130+ 7DB1 E8 69 41 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DB5 12 6B                        dw              DUP             //              dup
 132+ 7DB7 E8 69 15 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DBB A2 7C                        dw              READ_WRITE      //              r/w
 134+ 7DBD 92 6A                        dw              TWO_MINUS       //              2-
 135+ 7DBF              Block_Endif_2:                                  //          endif
 136+ 7DBF 12 6B A5 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DC3 E8 69
 137+ 7DC5 3F 6F 12 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DC9 32 6A EF 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DCD                                                              //      until
 140+ 7DCD 2C 64                        dw        ZBRANCH
 141+ 7DCF D8 FF                        dw        Block_Begin - $
 142+ 7DD1 12 6B A1 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DD5 B2 6B
 143+ 7DD7              Block_Endif_1:                                  // endif
 144+ 7DD7 D4 69 DD 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DDB 7B 6A
 145+ 7DDD AD 69                        dw      EXIT                    // ;
 146+ 7DDF
 147+ 7DDF              //  ______________________________________________________________________
 148+ 7DDF              //
 149+ 7DDF              // #buff        -- n
 150+ 7DDF              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DDF                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DDF             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DDF             >
 151+ 7DDF             >                // dummy db directives used to calculate length of namec
 151+ 7DDF 23 42 55 46 >                db      "#BUFF"
 151+ 7DE3 46          >
 151+ 7DE4             >len_NFA         defl    $ - temp_NFA
 151+ 7DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DDF             >
 151+ 7DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DE0 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DE4 46          >
 151+ 7DE5             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DE4 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DE5             >
 151+ 7DE5 81 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DE7             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DE7 CF 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DE9             >                else
 151+ 7DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DE9             >
 151+ 7DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DE9 07 00       >                dw      7
 152+ 7DEB
 153+ 7DEB              //  ______________________________________________________________________
 154+ 7DEB              //
 155+ 7DEB              // flush        --
 156+ 7DEB                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DEB             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DEB             >
 156+ 7DEB             >                // dummy db directives used to calculate length of namec
 156+ 7DEB 46 4C 55 53 >                db      "FLUSH"
 156+ 7DEF 48          >
 156+ 7DF0             >len_NFA         defl    $ - temp_NFA
 156+ 7DF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DEB             >
 156+ 7DEB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DEC 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DF0 48          >
 156+ 7DF1             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DF0 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DF1             >
 156+ 7DF1 DF 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DF3             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DF3 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DF5             >                else
 156+ 7DF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DF5             >
 156+ 7DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DF5 E7 7D 53 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DF9 0D 6D
 158+ 7DFB              Flush_Do:                                       // do
 159+ 7DFB 86 64                        dw      C_DO
 160+ 7DFD 0D 6D 41 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E01 DD 6A
 161+ 7E03                                                              // loop
 162+ 7E03 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E07 CA 7B A5 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E0B DF 67 DD 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E0F AD 69                        dw      EXIT                    // exit
 166+ 7E11
 167+ 7E11              //  ______________________________________________________________________
 168+ 7E11              //
 169+ 7E11              // f_getline    a m fh -- n
 170+ 7E11              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E11              // Address a is left for subsequent processing
 172+ 7E11              // and n as the actual number of byte read, that is the length of line
 173+ 7E11                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E11             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E11             >
 173+ 7E11             >                // dummy db directives used to calculate length of namec
 173+ 7E11 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E15 54 4C 49 4E >
 173+ 7E19 45          >
 173+ 7E1A             >len_NFA         defl    $ - temp_NFA
 173+ 7E1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E11             >
 173+ 7E11 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E12 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E16 54 4C 49 4E >
 173+ 7E1A 45          >
 173+ 7E1B             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E1A C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E1B             >
 173+ 7E1B EB 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E1D             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E1D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E1F             >                else
 173+ 7E1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E1F             >
 173+ 7E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E1F C0 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E21 F5 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E23 E8 69 F6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E27 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E2B B1 70
 178+ 7E2D
 179+ 7E2D 61 6B CD 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E31 53 6A 05 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E35
 182+ 7E35 E8 69 14 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E39 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E3D B1 70
 184+ 7E3F                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E3F 2C 64                        dw      ZBRANCH
 186+ 7E41 3C 00                        dw      FGetline_Else - $
 187+ 7E43 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E47 7E 65
 188+ 7E49 DD 6A E8 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E4D 05 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E4F A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E53 7E 65
 191+ 7E55 DD 6A E8 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E59 1F 6B 93 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E5D 12 6B CD 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E61 B2 6B
 194+ 7E63 12 6B C0 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E67 61 6B D4 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E6B 0D 6D 3F 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E6F D4 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E73 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E77 B1 70
 199+ 7E79                                                              // else
 200+ 7E79 15 64                        dw      BRANCH
 201+ 7E7B 0C 00                        dw      FGetline_Endif - $
 202+ 7E7D              FGetline_Else:
 203+ 7E7D D4 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E7F 61 6B 53 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E83 DD 6A 0D 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E87              FGetline_Endif:                                 // endif
 207+ 7E87 C0 69 12 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E8B 12 6B
 208+ 7E8D 53 6A 05 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E91 E8 69 9D 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E95 73 6B 32 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E99 0D 6D 05 6B                  dw      ZERO, SWAP              // 0 swap
 212+ 7E9D 85 6A B2 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EA1 E8 69 32 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EA5 5F 6A
 214+ 7EA7 05 6B E8 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EAB 3F 6F
 215+ 7EAD FE 73                        dw      BLANKS                  // blanks
 216+ 7EAF D4 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EB1 AD 69                        dw      EXIT                    // ;
 218+ 7EB3
 219+ 7EB3              //  ______________________________________________________________________
 220+ 7EB3              //
 221+ 7EB3              // f_include    fh --
 222+ 7EB3              // Given a filehandle includes the source from file
 223+ 7EB3                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EB3             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EB3             >
 223+ 7EB3             >                // dummy db directives used to calculate length of namec
 223+ 7EB3 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EB7 43 4C 55 44 >
 223+ 7EBB 45          >
 223+ 7EBC             >len_NFA         defl    $ - temp_NFA
 223+ 7EBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EB3             >
 223+ 7EB3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EB4 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EB8 43 4C 55 44 >
 223+ 7EBC 45          >
 223+ 7EBD             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EBC C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EBD             >
 223+ 7EBD 11 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EBF             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EBF 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EC1             >                else
 223+ 7EC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EC1             >
 223+ 7EC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EC1 0C 6E A5 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EC5 C0 69
 225+ 7EC7 15 6E A5 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7ECB C0 69
 226+ 7ECD C3 6E A5 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7ED1 C0 69
 227+ 7ED3 E8 69                        dw      R_OP                    // r
 228+ 7ED5                                                              // if
 229+ 7ED5 2C 64                        dw      ZBRANCH
 230+ 7ED7 20 00                        dw      FInclude_Else_1 - $
 231+ 7ED9 E8 69 F6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EDD A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EE1 B1 70
 233+ 7EE3 15 6E A5 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EE7 92 6A                        dw          TWO_MINUS
 235+ 7EE9 CD 6E A5 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EED 3F 6F                        dw          SUBTRACT
 237+ 7EEF 2B 6F 3F 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EF3                                                              // else
 239+ 7EF3 15 64                        dw      BRANCH
 240+ 7EF5 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EF7              FInclude_Else_1:
 242+ 7EF7 0D 6D 0D 6D                  dw          ZERO, ZERO          //      0 0
 243+ 7EFB                                                              // endif
 244+ 7EFB              FInclude_Endif_1:
 245+ 7EFB C0 69 C0 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EFF C3 6E B2 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F03              FInclude_Begin:                                 // begin
 248+ 7F03 15 6D 89 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F07 4D 6D
 249+ 7F09 73 6B FE 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F0D 05 6B 53 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F11 05 6B 85 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F15 C3 6E A5 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F19 1D 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F1B                                                              // while
 255+ 7F1B 2C 64                        dw      ZBRANCH
 256+ 7F1D 14 00                        dw      FInclude_Repeat - $
 257+ 7F1F 15 6D 0C 6E                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F23 B2 6B
 258+ 7F25 0D 6D 15 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F29 B2 6B
 259+ 7F2B D6 77                        dw          INTERPRET           //      interpret
 260+ 7F2D 15 64                        dw      BRANCH
 261+ 7F2F D4 FF                        dw      FInclude_Begin - $
 262+ 7F31              FInclude_Repeat:                                // repeat
 263+ 7F31 C3 6E A5 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F35 0D 6D C3 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F39 B2 6B
 265+ 7F3B CB 67                        dw      F_CLOSE                 // f_close
 266+ 7F3D A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F41 B1 70
 267+ 7F43 D4 69 D4 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F47 D4 69
 268+ 7F49 12 6B C3 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F4D B2 6B
 269+ 7F4F                                                              // if
 270+ 7F4F 2C 64                        dw      ZBRANCH
 271+ 7F51 12 00                        dw      FInclude_Else_2 - $
 272+ 7F53 C3 6E A5 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F57 A8 67                        dw          F_SEEK              //      f_seek
 274+ 7F59 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F5D B1 70
 275+ 7F5F                                                              // else
 276+ 7F5F 15 64                        dw      BRANCH
 277+ 7F61 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F63              FInclude_Else_2:
 279+ 7F63 53 6B                        dw          TWO_DROP            //      2drop
 280+ 7F65              FInclude_Endif_2:                               // endif
 281+ 7F65 D4 69 15 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F69 B2 6B
 282+ 7F6B D4 69 0C 6E                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F6F B2 6B
 283+ 7F71 AD 69                        dw      EXIT                    // ;
 284+ 7F73
 285+ 7F73              //  ______________________________________________________________________
 286+ 7F73              //
 287+ 7F73              // open<         -- fh
 288+ 7F73              // Open the following filename and return it file-handle
 289+ 7F73              // Used in the form OPEN CCCC
 290+ 7F73                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F73             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F73             >
 290+ 7F73             >                // dummy db directives used to calculate length of namec
 290+ 7F73 4F 50 45 4E >                db      "OPEN<"
 290+ 7F77 3C          >
 290+ 7F78             >len_NFA         defl    $ - temp_NFA
 290+ 7F78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F73             >
 290+ 7F73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F74 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F78 3C          >
 290+ 7F79             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F78 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F79             >
 290+ 7F79 B3 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F7B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F7B 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F7D             >                else
 290+ 7F7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F7D             >
 290+ 7F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F7D 37 6D                        dw      BL
 292+ 7F7F 36 74 4B 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F83 CD 6A
 293+ 7F85 32 6A 0D 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F89 05 6B B2 6B
 294+ 7F8D 23 74 15 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F91 4A 68
 295+ 7F93 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F97 B1 70                        dw      QERROR                  // ?error
 297+ 7F99 AD 69                        dw      EXIT                    // ;
 298+ 7F9B
 299+ 7F9B              //  ______________________________________________________________________
 300+ 7F9B              //
 301+ 7F9B              // include      -- cccc
 302+ 7F9B              // Include the following filename
 303+ 7F9B                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F9B             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F9B             >
 303+ 7F9B             >                // dummy db directives used to calculate length of namec
 303+ 7F9B 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F9F 55 44 45    >
 303+ 7FA2             >len_NFA         defl    $ - temp_NFA
 303+ 7FA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F9B             >
 303+ 7F9B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F9C 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FA0 55 44 45    >
 303+ 7FA3             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FA2 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FA3             >
 303+ 7FA3 73 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FA5             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FA5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FA7             >                else
 303+ 7FA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7FA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FA7             >
 303+ 7FA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FA7 7B 7F                        dw      OPEN_FH                 // open
 305+ 7FA9 12 6B BF 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FAD CB 67 DD 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FB1 AD 69                        dw      EXIT                    // ;
 308+ 7FB3
 309+ 7FB3              //  ______________________________________________________________________
 310+ 7FB3              //
 311+ 7FB3              // needs
 312+ 7FB3              // check for cccc exists in vocabulary
 313+ 7FB3              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FB3
 315+ 7FB3              // temp filename cccc.f as counted string zero-padded
 316+ 7FB3                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FB3             >
 316+ 7FB3             >                // dummy db directives used to calculate length of namec
 316+ 7FB3 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FB7 53 2D 57    >
 316+ 7FBA             >len_NFA         defl    $ - temp_NFA
 316+ 7FBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FB3             >
 316+ 7FB3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FB4 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FB8 53 2D 57    >
 316+ 7FBB             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FBA D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FBB             >
 316+ 7FBB 9B 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FBD             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FBD E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FBF             >                else
 316+ 7FBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FBF             >
 316+ 7FBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FBF 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FE2              // temp complete path+filename
 319+ 7FE2                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FE2             >
 319+ 7FE2             >                // dummy db directives used to calculate length of namec
 319+ 7FE2 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FE6 53 2D 46 4E >
 319+ 7FEA             >len_NFA         defl    $ - temp_NFA
 319+ 7FEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FE2             >
 319+ 7FE2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FE3 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FE7 53 2D 46 4E >
 319+ 7FEB             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FEA CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FEB             >
 319+ 7FEB B3 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FED             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FED E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FEF             >                else
 319+ 7FEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FEF             >
 319+ 7FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FEF 00 00 00...                  ds      40
 321+ 8017              // constant path
 322+ 8017                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8017             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8017             >
 322+ 8017             >                // dummy db directives used to calculate length of namec
 322+ 8017 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 801B 53 2D 49 4E >
 322+ 801F 43          >
 322+ 8020             >len_NFA         defl    $ - temp_NFA
 322+ 8020             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8017             >
 322+ 8017 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8018 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 801C 53 2D 49 4E >
 322+ 8020 43          >
 322+ 8021             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8020 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8021             >
 322+ 8021 E2 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8023             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8023 E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8025             >                else
 322+ 8025 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8025             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8025             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8025             >
 322+ 8025             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8025 04 69 6E 63                  db      4, "inc/", 0
 323+ 8029 2F 00
 324+ 802B                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 802B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 802B             >
 324+ 802B             >                // dummy db directives used to calculate length of namec
 324+ 802B 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 802F 53 2D 4C 49 >
 324+ 8033 42          >
 324+ 8034             >len_NFA         defl    $ - temp_NFA
 324+ 8034             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 802B             >
 324+ 802B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 802C 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8030 53 2D 4C 49 >
 324+ 8034 42          >
 324+ 8035             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8034 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8035             >
 324+ 8035 17 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8037             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8037 E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8039             >                else
 324+ 8039 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 8039             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8039             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8039             >
 324+ 8039             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8039 04 6C 69 62                  db      4, "lib/", 0
 325+ 803D 2F 00
 326+ 803F
 327+ 803F              // Concatenate path at a and filename and include it
 328+ 803F              // No error is issued if filename doesn't exist.
 329+ 803F                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 803F             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 803F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 803F             >
 329+ 803F             >                // dummy db directives used to calculate length of namec
 329+ 803F 4E 45 45 44 >                db      "NEEDS/"
 329+ 8043 53 2F       >
 329+ 8045             >len_NFA         defl    $ - temp_NFA
 329+ 8045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 803F             >
 329+ 803F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8040 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8044 53 2F       >
 329+ 8046             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8045 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8046             >
 329+ 8046 2B 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8048             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8048 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 804A             >                else
 329+ 804A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 804A             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 804A             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 804A             >
 329+ 804A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 804A 4B 72 F5 6A                  dw      COUNT, TUCK             // n a n
 331+ 804E ED 7F 05 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8052 9D 68
 332+ 8054 ED 7F 32 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8058 BD 7F 53 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 805C 05 6B
 334+ 805E A9 63 23 00                  dw      LIT, 35
 335+ 8062 9D 68                        dw      CMOVE
 336+ 8064 ED 7F                        dw      NEEDS_FN
 337+ 8066 23 74 15 6D                  dw      PAD, ONE, F_OPEN
 337+ 806A 4A 68
 338+ 806C EF 69                        dw      ZEQUAL
 339+ 806E 2C 64                        dw      ZBRANCH
 340+ 8070 08 00                        dw      Needs_1 - $
 341+ 8072 BF 7E                        dw          F_INCLUDE
 342+ 8074 15 64                        dw      BRANCH
 343+ 8076 04 00                        dw      Needs_2 - $
 344+ 8078              Needs_1:
 345+ 8078              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8078              //              dw          LIT, 43, MESSAGE
 347+ 8078 DD 6A                        dw          DROP
 348+ 807A              Needs_2:
 349+ 807A AD 69                        dw      EXIT                    // ;
 350+ 807C
 351+ 807C
 352+ 807C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 807C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 807C             >
 352+ 807C             >                // dummy db directives used to calculate length of namec
 352+ 807C 4E 44 4F 4D >                db      "NDOM"
 352+ 8080             >len_NFA         defl    $ - temp_NFA
 352+ 8080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 807C             >
 352+ 807C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 807D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8081             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8080 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8081             >
 352+ 8081 3F 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8083             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8083 E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8085             >                else
 352+ 8085 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8085             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8085             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8085             >
 352+ 8085             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8085              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8085 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8089 7C 5C 3C 3E
 354+ 808D 22
 355+ 808E
 356+ 808E                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 808E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 808E             >
 356+ 808E             >                // dummy db directives used to calculate length of namec
 356+ 808E 4E 43 44 4D >                db      "NCDM"
 356+ 8092             >len_NFA         defl    $ - temp_NFA
 356+ 8092             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 808E             >
 356+ 808E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 808F 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 8093             >                org     $-1                 // alter last byte of Name just above to set
 356+ 8092 CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 8093             >
 356+ 8093 7C 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 8095             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 8095 E9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8097             >                else
 356+ 8097 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 8097             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8097             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8097             >
 356+ 8097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8097              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8097 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 809B 24 5F 7B 7D
 358+ 809F 7E
 359+ 80A0
 360+ 80A0              // Replace illegal character in filename using the map here above
 361+ 80A0              // at the moment we need only  "
 362+ 80A0                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 362+ 80A0             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 362+ 80A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 80A0             >
 362+ 80A0             >                // dummy db directives used to calculate length of namec
 362+ 80A0 4E 45 45 44 >                db      "NEEDS-CH"
 362+ 80A4 53 2D 43 48 >
 362+ 80A8             >len_NFA         defl    $ - temp_NFA
 362+ 80A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 80A0             >
 362+ 80A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 80A1 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 362+ 80A5 53 2D 43 48 >
 362+ 80A9             >                org     $-1                 // alter last byte of Name just above to set
 362+ 80A8 C8          >                db      {b $} | END_BIT     // msb as name end
 362+ 80A9             >
 362+ 80A9 8E 80       >                dw      last_NFA            // Link to previous definition Name
 362+ 80AB             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 80AB 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 80AD             >                else
 362+ 80AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 80AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 80AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 80AD             >
 362+ 80AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 80AD 4B 72 60 72                  dw      COUNT, BOUNDS
 364+ 80B1 86 64                        dw      C_DO
 365+ 80B3              Needs_3:
 366+ 80B3 95 80 83 80                  dw          NCDM, NDOM, LIT, 9
 366+ 80B7 A9 63 09 00
 367+ 80BB 90 64 C0 6B                  dw          I, CFETCH
 368+ 80BF B8 65                        dw          C_MAP
 369+ 80C1 90 64 CE 6B                  dw          I, CSTORE
 370+ 80C5              Needs_4:
 371+ 80C5 04 64                        dw      C_LOOP
 372+ 80C7 EC FF                        dw      Needs_3 - $
 373+ 80C9 AD 69                        dw      EXIT
 374+ 80CB
 375+ 80CB
 376+ 80CB              // include  "path/cccc.f" if cccc is not defined
 377+ 80CB              // filename cccc.f is temporary stored at NEEDS-W
 378+ 80CB                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 378+ 80CB             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 378+ 80CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 80CB             >
 378+ 80CB             >                // dummy db directives used to calculate length of namec
 378+ 80CB 4E 45 45 44 >                db      "NEEDS-F"
 378+ 80CF 53 2D 46    >
 378+ 80D2             >len_NFA         defl    $ - temp_NFA
 378+ 80D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 80CB             >
 378+ 80CB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 80CC 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 378+ 80D0 53 2D 46    >
 378+ 80D3             >                org     $-1                 // alter last byte of Name just above to set
 378+ 80D2 C6          >                db      {b $} | END_BIT     // msb as name end
 378+ 80D3             >
 378+ 80D3 A0 80       >                dw      last_NFA            // Link to previous definition Name
 378+ 80D5             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 80D5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 80D7             >                else
 378+ 80D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 80D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 80D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 80D7             >
 378+ 80D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 80D7 E8 75                        dw      LFIND
 380+ 80D9 2C 64                        dw      ZBRANCH
 381+ 80DB 0A 00                        dw      Needs_5 - $
 382+ 80DD
 383+ 80DD DD 6A 53 6B                  dw          DROP, TWO_DROP
 384+ 80E1 15 64                        dw      BRANCH
 385+ 80E3 2C 00                        dw      Needs_6 - $
 386+ 80E5              Needs_5:
 387+ 80E5 BD 7F                        dw          NEEDS_W
 388+ 80E7 A9 63 23 00                  dw          LIT, 35
 389+ 80EB ED 73                        dw          ERASE                   // a
 390+ 80ED EC 6E C0 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 390+ 80F1 53 6A
 391+ 80F3 EC 6E CD 6A                  dw          HERE, OVER              // a n here n
 392+ 80F7 BD 7F 05 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 392+ 80FB 9D 68
 393+ 80FD BD 7F AB 80                  dw          NEEDS_W, NEEDS_CHECK
 394+ 8101 BD 7F 32 6A                  dw          NEEDS_W, PLUS           // a a1+1
 395+ 8105 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 396+ 8109 05 6B B2 6B                  dw          SWAP, STORE             // a
 397+ 810D 48 80                        dw          NEEDS_SLASH
 398+ 810F              Needs_6:
 399+ 810F AD 69                        dw      EXIT
 400+ 8111
 401+ 8111
 402+ 8111              // check for cccc exists in vocabulary
 403+ 8111              // if it doesn't then  INCLUDE  inc/cccc.F
 404+ 8111              // search in inc subdirectory
 405+ 8111                              Colon_Def NEEDS, "NEEDS", is_normal
 405+ 8111             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 405+ 8111             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 8111             >
 405+ 8111             >                // dummy db directives used to calculate length of namec
 405+ 8111 4E 45 45 44 >                db      "NEEDS"
 405+ 8115 53          >
 405+ 8116             >len_NFA         defl    $ - temp_NFA
 405+ 8116             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 8111             >
 405+ 8111 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 8112 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 405+ 8116 53          >
 405+ 8117             >                org     $-1                 // alter last byte of Name just above to set
 405+ 8116 D3          >                db      {b $} | END_BIT     // msb as name end
 405+ 8117             >
 405+ 8117 CB 80       >                dw      last_NFA            // Link to previous definition Name
 405+ 8119             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 8119 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 811B             >                else
 405+ 811B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 811B             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 811B             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 811B             >
 405+ 811B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 811B 15 6E A5 6B                  dw      TO_IN, FETCH
 407+ 811F 12 6B                        dw      DUP
 408+ 8121 23 80 D5 80                  dw      NEEDS_INC, NEEDS_PATH
 409+ 8125 15 6E B2 6B                  dw      TO_IN, STORE
 410+ 8129 37 80 D5 80                  dw      NEEDS_LIB, NEEDS_PATH
 411+ 812D 15 6E B2 6B                  dw      TO_IN, STORE
 412+ 8131 E8 75                        dw      LFIND
 413+ 8133 2C 64                        dw      ZBRANCH
 414+ 8135 08 00                        dw      Needs_10 - $
 415+ 8137 53 6B                        dw          TWO_DROP
 416+ 8139 15 64                        dw      BRANCH
 417+ 813B 10 00                        dw      Needs_11 - $
 418+ 813D              Needs_10:
 419+ 813D BD 7F 4B 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 419+ 8141 71 72 F7 6F
 420+ 8145 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 420+ 8149 08 7B
 421+ 814B              Needs_11:
 422+ 814B AD 69                        dw      EXIT
 423+ 814D
 424+ 814D
 425+ 814D              //  ______________________________________________________________________
 426+ 814D              //
 427+ 814D              // load+        n --
 428+ 814D                              Colon_Def LOAD_P, "LOAD+", is_normal
 428+ 814D             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 428+ 814D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 814D             >
 428+ 814D             >                // dummy db directives used to calculate length of namec
 428+ 814D 4C 4F 41 44 >                db      "LOAD+"
 428+ 8151 2B          >
 428+ 8152             >len_NFA         defl    $ - temp_NFA
 428+ 8152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 814D             >
 428+ 814D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 814E 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 428+ 8152 2B          >
 428+ 8153             >                org     $-1                 // alter last byte of Name just above to set
 428+ 8152 AB          >                db      {b $} | END_BIT     // msb as name end
 428+ 8153             >
 428+ 8153 11 81       >                dw      last_NFA            // Link to previous definition Name
 428+ 8155             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 8155 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 8157             >                else
 428+ 8157 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 8157             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 8157             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 8157             >
 428+ 8157             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 8157 0C 6E A5 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 429+ 815B C0 69
 430+ 815D 15 6E A5 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 430+ 8161 C0 69
 431+ 8163
 432+ 8163 0D 6D 15 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 432+ 8167 B2 6B
 433+ 8169 59 6D 6F 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 433+ 816D 0C 6E B2 6B
 434+ 8171 D6 77                        dw      INTERPRET               // interpret
 435+ 8173
 436+ 8173 D4 69 15 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 436+ 8177 B2 6B
 437+ 8179 D4 69 0C 6E                  dw      R_TO, BLK, STORE        // r> blk !
 437+ 817D B2 6B
 438+ 817F AD 69                        dw      EXIT                    // ;
 439+ 8181
 440+ 8181              //  ______________________________________________________________________
 441+ 8181              //
 442+ 8181              // -->          --
 443+ 8181                              Colon_Def LOAD_NEXT, "-->", is_immediate
 443+ 8181             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 443+ 8181             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 8181             >
 443+ 8181             >                // dummy db directives used to calculate length of namec
 443+ 8181 2D 2D 3E    >                db      "-->"
 443+ 8184             >len_NFA         defl    $ - temp_NFA
 443+ 8184             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 8181             >
 443+ 8181 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 8182 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 443+ 8185             >                org     $-1                 // alter last byte of Name just above to set
 443+ 8184 BE          >                db      {b $} | END_BIT     // msb as name end
 443+ 8185             >
 443+ 8185 4D 81       >                dw      last_NFA            // Link to previous definition Name
 443+ 8187             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 8187 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 8189             >                else
 443+ 8189 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 8189             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 8189             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 8189             >
 443+ 8189             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 8189 2A 71                        dw      QLOADING                // ?loading
 445+ 818B 0D 6D 15 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 445+ 818F B2 6B
 446+ 8191 59 6D                        dw      BSCR                    // b/scr
 447+ 8193 0C 6E A5 6B                  dw      BLK, FETCH              // blk @
 448+ 8197 CD 6A                        dw      OVER                    // over
 449+ 8199 9C 7A                        dw      MOD                     // mod
 450+ 819B 3F 6F                        dw      SUBTRACT                // -
 451+ 819D 0C 6E 82 6B                  dw      BLK, PLUSSTORE          // +!
 452+ 81A1 AD 69                        dw      EXIT                    // ;
 453+ 81A3
 454+ 81A3              //  ______________________________________________________________________
 455+ 81A3              //
 456+ 81A3              // '            -- xt
 457+ 81A3                              Colon_Def TICK, "'", is_normal
 457+ 81A3             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 457+ 81A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 81A3             >
 457+ 81A3             >                // dummy db directives used to calculate length of namec
 457+ 81A3 27          >                db      "'"
 457+ 81A4             >len_NFA         defl    $ - temp_NFA
 457+ 81A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 81A3             >
 457+ 81A3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 81A4 27          >                db      "'"               // name string in 7-bit ascii, but
 457+ 81A5             >                org     $-1                 // alter last byte of Name just above to set
 457+ 81A4 A7          >                db      {b $} | END_BIT     // msb as name end
 457+ 81A5             >
 457+ 81A5 81 81       >                dw      last_NFA            // Link to previous definition Name
 457+ 81A7             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 81A7 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 81A9             >                else
 457+ 81A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 81A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 81A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 81A9             >
 457+ 81A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 81A9 E8 75                        dw      LFIND                   // -find
 459+ 81AB EF 69                        dw      ZEQUAL                  // 0=
 460+ 81AD 0D 6D B1 70                  dw      ZERO, QERROR            // 0 ?error
 461+ 81B1 DD 6A                        dw      DROP                    // drop
 462+ 81B3 AD 69                        dw      EXIT                    // ;
 463+ 81B5
 464+ 81B5              //  ______________________________________________________________________
 465+ 81B5              //
 466+ 81B5              // forget       -- cccc
 467+ 81B5                              Colon_Def FORGET, "FORGET", is_normal
 467+ 81B5             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 467+ 81B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 81B5             >
 467+ 81B5             >                // dummy db directives used to calculate length of namec
 467+ 81B5 46 4F 52 47 >                db      "FORGET"
 467+ 81B9 45 54       >
 467+ 81BB             >len_NFA         defl    $ - temp_NFA
 467+ 81BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 81B5             >
 467+ 81B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 81B6 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 467+ 81BA 45 54       >
 467+ 81BC             >                org     $-1                 // alter last byte of Name just above to set
 467+ 81BB D4          >                db      {b $} | END_BIT     // msb as name end
 467+ 81BC             >
 467+ 81BC A3 81       >                dw      last_NFA            // Link to previous definition Name
 467+ 81BE             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 81BE 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 81C0             >                else
 467+ 81C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 81C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 81C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 81C0             >
 467+ 81C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 81C0 4D 6E A5 6B                  dw      CURRENT, FETCH          // current @
 469+ 81C4 40 6E A5 6B                  dw      CONTEXT, FETCH          // context @
 470+ 81C8 3F 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 470+ 81CC 17 00 B1 70
 471+ 81D0 A7 81 81 70                  dw      TICK, TO_BODY           // ' >body
 472+ 81D4 12 6B C3 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 472+ 81D8 A5 6B
 473+ 81DA 5A 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 473+ 81DE 15 00 B1 70
 474+ 81E2 12 6B 57 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 474+ 81E6 CB 6D B2 6B
 475+ 81EA 3D 70 A5 6B                  dw      LFA, FETCH              // lfa @
 476+ 81EE 40 6E A5 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 476+ 81F2 B2 6B
 477+ 81F4 AD 69                        dw      EXIT                    // ;
 478+ 81F6
 479+ 81F6              //  ______________________________________________________________________
 480+ 81F6              //
 481+ 81F6              // marker       -- cccc
 482+ 81F6                              Colon_Def MARKER, "MARKER", is_immediate
 482+ 81F6             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 482+ 81F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 81F6             >
 482+ 81F6             >                // dummy db directives used to calculate length of namec
 482+ 81F6 4D 41 52 4B >                db      "MARKER"
 482+ 81FA 45 52       >
 482+ 81FC             >len_NFA         defl    $ - temp_NFA
 482+ 81FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 81F6             >
 482+ 81F6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 81F7 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 482+ 81FB 45 52       >
 482+ 81FD             >                org     $-1                 // alter last byte of Name just above to set
 482+ 81FC D2          >                db      {b $} | END_BIT     // msb as name end
 482+ 81FD             >
 482+ 81FD B5 81       >                dw      last_NFA            // Link to previous definition Name
 482+ 81FF             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 81FF 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 8201             >                else
 482+ 8201 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 8201             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 8201             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 8201             >
 482+ 8201             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 8201 14 72                        dw      CBUILDS
 484+ 8203 D9 6D A5 6B                  dw      VOC_LINK, FETCH, COMMA
 484+ 8207 08 6F
 485+ 8209 4D 6E A5 6B                  dw      CURRENT, FETCH, COMMA
 485+ 820D 08 6F
 486+ 820F 40 6E A5 6B                  dw      CONTEXT, FETCH, COMMA
 486+ 8213 08 6F
 487+ 8215 2D 70 08 6F                  dw      LATEST, COMMA
 488+ 8219 2D 70 6B 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 488+ 821D 3D 70 A5 6B
 488+ 8221 08 6F
 489+ 8223 24 72                        dw      DOES_TO
 490+ 8225 12 6B A5 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 490+ 8229 D9 6D B2 6B
 490+ 822D 7B 6A
 491+ 822F 12 6B A5 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 491+ 8233 4D 6E B2 6B
 491+ 8237 7B 6A
 492+ 8239 12 6B A5 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 492+ 823D 40 6E B2 6B
 492+ 8241 7B 6A
 493+ 8243 12 6B A5 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 493+ 8247 CB 6D B2 6B
 493+ 824B 7B 6A
 494+ 824D A5 6B 4D 6E                  dw           FETCH, CURRENT, FETCH, STORE
 494+ 8251 A5 6B B2 6B
 495+ 8255 AD 69                        dw      EXIT
 496+ 8257
 497+ 8257              //  ______________________________________________________________________
 498+ 8257              //
 499+ 8257              // spaces       n --
 500+ 8257                              Colon_Def SPACES, "SPACES", is_normal
 500+ 8257             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 500+ 8257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 8257             >
 500+ 8257             >                // dummy db directives used to calculate length of namec
 500+ 8257 53 50 41 43 >                db      "SPACES"
 500+ 825B 45 53       >
 500+ 825D             >len_NFA         defl    $ - temp_NFA
 500+ 825D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 8257             >
 500+ 8257 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 8258 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 500+ 825C 45 53       >
 500+ 825E             >                org     $-1                 // alter last byte of Name just above to set
 500+ 825D D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 825E             >
 500+ 825E F6 81       >                dw      last_NFA            // Link to previous definition Name
 500+ 8260             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 8260 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 8262             >                else
 500+ 8262 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 8262             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 8262             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 8262             >
 500+ 8262             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 8262 0D 6D A9 6F                  dw      ZERO, MAX
 502+ 8266 0D 6D 59 64                  dw      ZERO, C_Q_DO
 503+ 826A 08 00                        dw      Spaces_Leave - $
 504+ 826C              Spaces_Loop:
 505+ 826C F7 6F                        dw          SPACE
 506+ 826E 04 64                        dw      C_LOOP
 507+ 8270 FC FF                        dw      Spaces_Loop - $
 508+ 8272              Spaces_Leave:
 509+ 8272 AD 69                        dw      EXIT                    // ;
 510+ 8274
 511+ 8274              //  ______________________________________________________________________
 512+ 8274              //
 513+ 8274              // <#           --
 514+ 8274                              Colon_Def BEGIN_DASH, "<#", is_normal
 514+ 8274             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 514+ 8274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8274             >
 514+ 8274             >                // dummy db directives used to calculate length of namec
 514+ 8274 3C 23       >                db      "<#"
 514+ 8276             >len_NFA         defl    $ - temp_NFA
 514+ 8276             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8274             >
 514+ 8274 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 8275 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 514+ 8277             >                org     $-1                 // alter last byte of Name just above to set
 514+ 8276 A3          >                db      {b $} | END_BIT     // msb as name end
 514+ 8277             >
 514+ 8277 57 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8279             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8279 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 827B             >                else
 514+ 827B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 827B             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 827B             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 827B             >
 514+ 827B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 827B 23 74 8E 6E                  dw      PAD, HLD, STORE
 515+ 827F B2 6B
 516+ 8281 AD 69                        dw      EXIT
 517+ 8283
 518+ 8283              //  ______________________________________________________________________
 519+ 8283              //
 520+ 8283              // #>           --
 521+ 8283                              Colon_Def DASH_END, "#>", is_normal
 521+ 8283             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 521+ 8283             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 521+ 8283             >
 521+ 8283             >                // dummy db directives used to calculate length of namec
 521+ 8283 23 3E       >                db      "#>"
 521+ 8285             >len_NFA         defl    $ - temp_NFA
 521+ 8285             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 521+ 8283             >
 521+ 8283 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 521+ 8284 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 521+ 8286             >                org     $-1                 // alter last byte of Name just above to set
 521+ 8285 BE          >                db      {b $} | END_BIT     // msb as name end
 521+ 8286             >
 521+ 8286 74 82       >                dw      last_NFA            // Link to previous definition Name
 521+ 8288             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 521+ 8288 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 521+ 828A             >                else
 521+ 828A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 521+ 828A             >                endif           ; ok        // for other definitions it "points" the correct handler
 521+ 828A             >                // Use of "; ok" to suppress "warning[fwdref]"
 521+ 828A             >
 521+ 828A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 522+ 828A 53 6B                        dw      TWO_DROP
 523+ 828C 8E 6E A5 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 523+ 8290 23 74 CD 6A
 523+ 8294 3F 6F
 524+ 8296 AD 69                        dw      EXIT
 525+ 8298
 526+ 8298              //  ______________________________________________________________________
 527+ 8298              //
 528+ 8298              // sign         n d -- d
 529+ 8298                              Colon_Def SIGN, "SIGN", is_normal
 529+ 8298             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 529+ 8298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 8298             >
 529+ 8298             >                // dummy db directives used to calculate length of namec
 529+ 8298 53 49 47 4E >                db      "SIGN"
 529+ 829C             >len_NFA         defl    $ - temp_NFA
 529+ 829C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 8298             >
 529+ 8298 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 8299 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 529+ 829D             >                org     $-1                 // alter last byte of Name just above to set
 529+ 829C CE          >                db      {b $} | END_BIT     // msb as name end
 529+ 829D             >
 529+ 829D 83 82       >                dw      last_NFA            // Link to previous definition Name
 529+ 829F             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 829F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 82A1             >                else
 529+ 82A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 529+ 82A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 82A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 82A1             >
 529+ 82A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 82A1 1F 6B 0A 6A                  dw      ROT, ZLESS
 531+ 82A5 2C 64                        dw      ZBRANCH
 532+ 82A7 08 00                        dw      Sign_Endif - $
 533+ 82A9 A9 63 2D 00                  dw          LIT, 45, HOLD
 533+ 82AD 0D 74
 534+ 82AF              Sign_Endif:
 535+ 82AF AD 69                        dw      EXIT
 536+ 82B1
 537+ 82B1              //  ______________________________________________________________________
 538+ 82B1              //
 539+ 82B1              // #           d1 -- d2
 540+ 82B1                              Colon_Def DASH, "#", is_normal
 540+ 82B1             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 540+ 82B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 82B1             >
 540+ 82B1             >                // dummy db directives used to calculate length of namec
 540+ 82B1 23          >                db      "#"
 540+ 82B2             >len_NFA         defl    $ - temp_NFA
 540+ 82B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 82B1             >
 540+ 82B1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 82B2 23          >                db      "#"               // name string in 7-bit ascii, but
 540+ 82B3             >                org     $-1                 // alter last byte of Name just above to set
 540+ 82B2 A3          >                db      {b $} | END_BIT     // msb as name end
 540+ 82B3             >
 540+ 82B3 98 82       >                dw      last_NFA            // Link to previous definition Name
 540+ 82B5             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 82B5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 540+ 82B7             >                else
 540+ 82B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 540+ 82B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 82B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 82B7             >
 540+ 82B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 82B7 62 6E A5 6B                  dw      BASE, FETCH
 542+ 82BB
 543+ 82BB C0 69                        dw      TO_R                    // >r           ( ud1 )
 544+ 82BD 0D 6D E8 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 544+ 82C1 01 69
 545+ 82C3 D4 69 05 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 545+ 82C7 C0 69
 546+ 82C9 01 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 547+ 82CB D4 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 548+ 82CD
 549+ 82CD 1F 6B                        dw      ROT
 550+ 82CF A9 63 09 00                  dw      LIT, 9, OVER, LESS
 550+ 82D3 CD 6A 6E 6F
 551+ 82D7 2C 64                        dw      ZBRANCH
 552+ 82D9 08 00                        dw      Dash_Endif - $
 553+ 82DB A9 63 07 00                  dw          LIT, 7, PLUS
 553+ 82DF 32 6A
 554+ 82E1              Dash_Endif:
 555+ 82E1
 556+ 82E1 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 556+ 82E5 32 6A 0D 74
 557+ 82E9 AD 69                        dw      EXIT
 558+ 82EB
 559+ 82EB              //  ______________________________________________________________________
 560+ 82EB              //
 561+ 82EB              // #s           d1 -- d2
 562+ 82EB                              Colon_Def DASHES, "#S", is_normal
 562+ 82EB             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 562+ 82EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ 82EB             >
 562+ 82EB             >                // dummy db directives used to calculate length of namec
 562+ 82EB 23 53       >                db      "#S"
 562+ 82ED             >len_NFA         defl    $ - temp_NFA
 562+ 82ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ 82EB             >
 562+ 82EB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ 82EC 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 562+ 82EE             >                org     $-1                 // alter last byte of Name just above to set
 562+ 82ED D3          >                db      {b $} | END_BIT     // msb as name end
 562+ 82EE             >
 562+ 82EE B1 82       >                dw      last_NFA            // Link to previous definition Name
 562+ 82F0             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 82F0 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 82F2             >                else
 562+ 82F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 562+ 82F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 82F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 82F2             >
 562+ 82F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 82F2              Dashes_Begin:
 564+ 82F2 B5 82 73 6B                  dw      DASH, TWO_DUP
 565+ 82F6 4F 69 EF 69                  dw          OR_OP, ZEQUAL
 566+ 82FA 2C 64                        dw      ZBRANCH
 567+ 82FC F6 FF                        dw      Dashes_Begin - $
 568+ 82FE AD 69                        dw      EXIT
 569+ 8300
 570+ 8300              //  ______________________________________________________________________
 571+ 8300              //
 572+ 8300              // d.r          d n --
 573+ 8300                              Colon_Def D_DOT_R, "D.R", is_normal
 573+ 8300             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 573+ 8300             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 8300             >
 573+ 8300             >                // dummy db directives used to calculate length of namec
 573+ 8300 44 2E 52    >                db      "D.R"
 573+ 8303             >len_NFA         defl    $ - temp_NFA
 573+ 8303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 8300             >
 573+ 8300 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 8301 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 573+ 8304             >                org     $-1                 // alter last byte of Name just above to set
 573+ 8303 D2          >                db      {b $} | END_BIT     // msb as name end
 573+ 8304             >
 573+ 8304 EB 82       >                dw      last_NFA            // Link to previous definition Name
 573+ 8306             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 8306 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 8308             >                else
 573+ 8308 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 8308             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 8308             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 8308             >
 573+ 8308             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 8308 C0 69                        dw      TO_R
 575+ 830A F5 6A C5 79                  dw      TUCK, DABS
 576+ 830E 79 82 F0 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 576+ 8312 9F 82 88 82
 577+ 8316 D4 69                        dw      R_TO
 578+ 8318 CD 6A 3F 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 578+ 831C 60 82 71 72
 579+ 8320 AD 69                        dw      EXIT
 580+ 8322
 581+ 8322              //  ______________________________________________________________________
 582+ 8322              //
 583+ 8322              // .r           n1 n2 --
 584+ 8322                              Colon_Def DOT_R, ".R", is_normal
 584+ 8322             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 584+ 8322             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 8322             >
 584+ 8322             >                // dummy db directives used to calculate length of namec
 584+ 8322 2E 52       >                db      ".R"
 584+ 8324             >len_NFA         defl    $ - temp_NFA
 584+ 8324             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 8322             >
 584+ 8322 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 8323 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 584+ 8325             >                org     $-1                 // alter last byte of Name just above to set
 584+ 8324 D2          >                db      {b $} | END_BIT     // msb as name end
 584+ 8325             >
 584+ 8325 00 83       >                dw      last_NFA            // Link to previous definition Name
 584+ 8327             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 8327 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 8329             >                else
 584+ 8329 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 8329             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 8329             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 8329             >
 584+ 8329             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 8329 C0 69                        dw      TO_R
 586+ 832B 2B 6F D4 69                  dw      S_TO_D, R_TO
 587+ 832F 06 83                        dw      D_DOT_R
 588+ 8331 AD 69                        dw      EXIT
 589+ 8333
 590+ 8333              //  ______________________________________________________________________
 591+ 8333              //
 592+ 8333              // d.           d --
 593+ 8333                              Colon_Def D_DOT, "D.", is_normal
 593+ 8333             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 593+ 8333             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 8333             >
 593+ 8333             >                // dummy db directives used to calculate length of namec
 593+ 8333 44 2E       >                db      "D."
 593+ 8335             >len_NFA         defl    $ - temp_NFA
 593+ 8335             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 8333             >
 593+ 8333 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 8334 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 593+ 8336             >                org     $-1                 // alter last byte of Name just above to set
 593+ 8335 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 8336             >
 593+ 8336 22 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 8338             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8338 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 833A             >                else
 593+ 833A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 833A             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 833A             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 833A             >
 593+ 833A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 833A 0D 6D 06 83                  dw      ZERO, D_DOT_R, SPACE
 594+ 833E F7 6F
 595+ 8340 AD 69                        dw      EXIT
 596+ 8342
 597+ 8342              //  ______________________________________________________________________
 598+ 8342              //
 599+ 8342              // .            n --
 600+ 8342                              Colon_Def DOT, ".", is_normal
 600+ 8342             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 600+ 8342             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 8342             >
 600+ 8342             >                // dummy db directives used to calculate length of namec
 600+ 8342 2E          >                db      "."
 600+ 8343             >len_NFA         defl    $ - temp_NFA
 600+ 8343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 8342             >
 600+ 8342 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 8343 2E          >                db      "."               // name string in 7-bit ascii, but
 600+ 8344             >                org     $-1                 // alter last byte of Name just above to set
 600+ 8343 AE          >                db      {b $} | END_BIT     // msb as name end
 600+ 8344             >
 600+ 8344 33 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 8346             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 8346 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 8348             >                else
 600+ 8348 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 8348             >
 600+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 8348 2B 6F 38 83                  dw      S_TO_D, D_DOT
 602+ 834C AD 69                        dw      EXIT
 603+ 834E
 604+ 834E              //  ______________________________________________________________________
 605+ 834E              //
 606+ 834E              // ?            n --
 607+ 834E                              Colon_Def QUESTION, "?", is_normal
 607+ 834E             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 607+ 834E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 834E             >
 607+ 834E             >                // dummy db directives used to calculate length of namec
 607+ 834E 3F          >                db      "?"
 607+ 834F             >len_NFA         defl    $ - temp_NFA
 607+ 834F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 834E             >
 607+ 834E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 834F 3F          >                db      "?"               // name string in 7-bit ascii, but
 607+ 8350             >                org     $-1                 // alter last byte of Name just above to set
 607+ 834F BF          >                db      {b $} | END_BIT     // msb as name end
 607+ 8350             >
 607+ 8350 42 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 8352             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8352 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8354             >                else
 607+ 8354 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 8354             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8354             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8354             >
 607+ 8354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8354 A5 6B 46 83                  dw      FETCH, DOT
 609+ 8358 AD 69                        dw      EXIT
 610+ 835A
 611+ 835A              //  ______________________________________________________________________
 612+ 835A              //
 613+ 835A              // u.           u --
 614+ 835A                              Colon_Def U_DOT, "U.", is_normal
 614+ 835A             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 614+ 835A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 835A             >
 614+ 835A             >                // dummy db directives used to calculate length of namec
 614+ 835A 55 2E       >                db      "U."
 614+ 835C             >len_NFA         defl    $ - temp_NFA
 614+ 835C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 835A             >
 614+ 835A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 835B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 614+ 835D             >                org     $-1                 // alter last byte of Name just above to set
 614+ 835C AE          >                db      {b $} | END_BIT     // msb as name end
 614+ 835D             >
 614+ 835D 4E 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 835F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 835F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8361             >                else
 614+ 8361 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 8361             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8361             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8361             >
 614+ 8361             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8361 0D 6D 38 83                  dw      ZERO, D_DOT
 616+ 8365 AD 69                        dw      EXIT
 617+ 8367
 618+ 8367              //  ______________________________________________________________________
 619+ 8367              //
 620+ 8367              // words        --
 621+ 8367                              Colon_Def WORDS, "WORDS", is_normal
 621+ 8367             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 621+ 8367             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 8367             >
 621+ 8367             >                // dummy db directives used to calculate length of namec
 621+ 8367 57 4F 52 44 >                db      "WORDS"
 621+ 836B 53          >
 621+ 836C             >len_NFA         defl    $ - temp_NFA
 621+ 836C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 8367             >
 621+ 8367 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 8368 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 621+ 836C 53          >
 621+ 836D             >                org     $-1                 // alter last byte of Name just above to set
 621+ 836C D3          >                db      {b $} | END_BIT     // msb as name end
 621+ 836D             >
 621+ 836D 5A 83       >                dw      last_NFA            // Link to previous definition Name
 621+ 836F             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 836F 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 8371             >                else
 621+ 8371 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 621+ 8371             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 8371             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 8371             >
 621+ 8371             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 8371 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 622+ 8375 1E 6E B2 6B
 623+ 8379 40 6E A5 6B                  dw      CONTEXT, FETCH, FETCH
 623+ 837D A5 6B
 624+ 837F              Words_Begin:
 625+ 837F 12 6B C0 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 625+ 8383 A9 63 1F 00
 625+ 8387 3D 69
 626+ 8389 1E 6E A5 6B                  dw          OUT, FETCH, PLUS
 626+ 838D 32 6A
 627+ 838F 41 6D 6E 6F                  dw          CL, LESS, ZEQUAL
 627+ 8393 EF 69
 628+ 8395 2C 64                        dw          ZBRANCH
 629+ 8397 0A 00                        dw          Words_Endif - $
 630+ 8399 2A 66 0D 6D                  dw              CR, ZERO, OUT, STORE
 630+ 839D 1E 6E B2 6B
 631+ 83A1              Words_Endif:
 632+ 83A1 12 6B 59 76                  dw          DUP, ID_DOT
 633+ 83A5 6B 70 3D 70                  dw          PFA, LFA, FETCH
 633+ 83A9 A5 6B
 634+ 83AB 12 6B EF 69                  dw          DUP, ZEQUAL
 635+ 83AF 3F 67 4F 69                  dw          QTERMINAL, OR_OP
 636+ 83B3 2C 64                        dw      ZBRANCH
 637+ 83B5 CA FF                        dw      Words_Begin - $
 638+ 83B7 DD 6A                        dw      DROP
 639+ 83B9 AD 69                        dw      EXIT
 640+ 83BB
 641+ 83BB              //  ______________________________________________________________________
 642+ 83BB              //
 643+ 83BB              // list         n --
 644+ 83BB                              Colon_Def LIST, "LIST", is_normal
 644+ 83BB             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 644+ 83BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ 83BB             >
 644+ 83BB             >                // dummy db directives used to calculate length of namec
 644+ 83BB 4C 49 53 54 >                db      "LIST"
 644+ 83BF             >len_NFA         defl    $ - temp_NFA
 644+ 83BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ 83BB             >
 644+ 83BB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ 83BC 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 644+ 83C0             >                org     $-1                 // alter last byte of Name just above to set
 644+ 83BF D4          >                db      {b $} | END_BIT     // msb as name end
 644+ 83C0             >
 644+ 83C0 67 83       >                dw      last_NFA            // Link to previous definition Name
 644+ 83C2             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 83C2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 83C4             >                else
 644+ 83C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 644+ 83C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 83C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 83C4             >
 644+ 83C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 83C4 D0 71 2A 66                  dw      DECIMAL, CR
 646+ 83C8 12 6B 27 6E                  dw      DUP, SCR, STORE
 646+ 83CC B2 6B
 647+ 83CE 85 74                        dw      C_DOT_QUOTE
 648+ 83D0 05 53 63 72                  db      5, "Scr# "
 648+ 83D4 23 20
 649+ 83D6 46 83                        dw      DOT
 650+ 83D8 65 6D 0D 6D                  dw      LSCR, ZERO, C_DO
 650+ 83DC 86 64
 651+ 83DE              List_Loop:
 652+ 83DE 2A 66                        dw          CR
 653+ 83E0 90 64 25 6D                  dw          I, THREE
 654+ 83E4 27 83 F7 6F                  dw          DOT_R, SPACE
 655+ 83E8 90 64 27 6E                  dw          I, SCR, FETCH, DOT_LINE
 655+ 83EC A5 6B F4 7A
 656+ 83F0 3F 67                        dw          QTERMINAL
 657+ 83F2 2C 64                        dw          ZBRANCH
 658+ 83F4 06 00                        dw          List_Endif - $
 659+ 83F6 41 64                        dw              C_LEAVE
 660+ 83F8 06 00                        dw              List_Leave - $
 661+ 83FA              List_Endif:
 662+ 83FA 04 64                        dw      C_LOOP
 663+ 83FC E2 FF                        dw      List_Loop - $
 664+ 83FE              List_Leave:
 665+ 83FE 2A 66                        dw      CR
 666+ 8400 AD 69                        dw      EXIT
 667+ 8402
 668+ 8402              //  ______________________________________________________________________
 669+ 8402              //
 670+ 8402              // index        n1 n2 --
 671+ 8402                              Colon_Def INDEX, "INDEX", is_normal
 671+ 8402             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 671+ 8402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 8402             >
 671+ 8402             >                // dummy db directives used to calculate length of namec
 671+ 8402 49 4E 44 45 >                db      "INDEX"
 671+ 8406 58          >
 671+ 8407             >len_NFA         defl    $ - temp_NFA
 671+ 8407             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 8402             >
 671+ 8402 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 8403 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 671+ 8407 58          >
 671+ 8408             >                org     $-1                 // alter last byte of Name just above to set
 671+ 8407 D8          >                db      {b $} | END_BIT     // msb as name end
 671+ 8408             >
 671+ 8408 BB 83       >                dw      last_NFA            // Link to previous definition Name
 671+ 840A             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 840A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 671+ 840C             >                else
 671+ 840C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 840C             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 840C             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 840C             >
 671+ 840C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 840C 53 6A 05 6B                  dw      ONE_PLUS, SWAP, C_DO
 672+ 8410 86 64
 673+ 8412              Index_Loop:
 674+ 8412 2A 66 90 64                  dw          CR, I, THREE
 674+ 8416 25 6D
 675+ 8418 27 83 F7 6F                  dw          DOT_R, SPACE
 676+ 841C 0D 6D 90 64                  dw          ZERO, I, DOT_LINE
 676+ 8420 F4 7A
 677+ 8422 3F 67                        dw          QTERMINAL
 678+ 8424 2C 64                        dw          ZBRANCH
 679+ 8426 06 00                        dw          Index_Endif - $
 680+ 8428 41 64                        dw              C_LEAVE
 681+ 842A 06 00                        dw              Index_Leave - $
 682+ 842C              Index_Endif:
 683+ 842C 04 64                        dw      C_LOOP
 684+ 842E E4 FF                        dw      Index_Loop - $
 685+ 8430              Index_Leave:
 686+ 8430 2A 66                        dw      CR
 687+ 8432 AD 69                        dw      EXIT
 688+ 8434
 689+ 8434              //  ______________________________________________________________________
 690+ 8434              //
 691+ 8434              // cls          --
 692+ 8434                              Colon_Def CLS, "CLS", is_normal
 692+ 8434             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 692+ 8434             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 8434             >
 692+ 8434             >                // dummy db directives used to calculate length of namec
 692+ 8434 43 4C 53    >                db      "CLS"
 692+ 8437             >len_NFA         defl    $ - temp_NFA
 692+ 8437             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 8434             >
 692+ 8434 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 8435 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 692+ 8438             >                org     $-1                 // alter last byte of Name just above to set
 692+ 8437 D3          >                db      {b $} | END_BIT     // msb as name end
 692+ 8438             >
 692+ 8438 02 84       >                dw      last_NFA            // Link to previous definition Name
 692+ 843A             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 843A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 843C             >                else
 692+ 843C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 692+ 843C             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 843C             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 843C             >
 692+ 843C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 843C A9 63 0E 00                  dw      LIT, $0E, EMITC
 693+ 8440 13 66
 694+ 8442 AD 69                        dw      EXIT
 695+ 8444
 696+ 8444              //  ______________________________________________________________________
 697+ 8444              //
 698+ 8444              // splash       --
 699+ 8444                              Colon_Def SPLASH, "SPLASH", is_normal
 699+ 8444             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 699+ 8444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 8444             >
 699+ 8444             >                // dummy db directives used to calculate length of namec
 699+ 8444 53 50 4C 41 >                db      "SPLASH"
 699+ 8448 53 48       >
 699+ 844A             >len_NFA         defl    $ - temp_NFA
 699+ 844A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 8444             >
 699+ 8444 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 8445 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 699+ 8449 53 48       >
 699+ 844B             >                org     $-1                 // alter last byte of Name just above to set
 699+ 844A C8          >                db      {b $} | END_BIT     // msb as name end
 699+ 844B             >
 699+ 844B 34 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 844D             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 844D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 844F             >                else
 699+ 844F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 844F             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 844F             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 844F             >
 699+ 844F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 844F 3A 84                        dw      CLS
 701+ 8451 85 74                        dw      C_DOT_QUOTE
 702+ 8453 5A                           db      90  // length of the following string CR included.
 703+ 8454 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 703+ 8458 72 74 68 20
 703+ 845C 31 2E 35 32
 703+ 8460 20 4E 65 78
 703+ 8464 74 5A 58 4F
 703+ 8468 53 20 76 65
 703+ 846C 72 73 69 6F
 703+ 8470 6E 0D
 704+ 8472 49 6E 64 69                  db      "Indirect Threaded - build 20220425", 13
 704+ 8476 72 65 63 74
 704+ 847A 20 54 68 72
 704+ 847E 65 61 64 65
 704+ 8482 64 20 2D 20
 704+ 8486 62 75 69 6C
 704+ 848A 64 20 32 30
 704+ 848E 32 32 30 34
 704+ 8492 32 35 0D
 705+ 8495 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 705+ 8499 2D 32 30 32
 705+ 849D 32 20 4D 61
 705+ 84A1 74 74 65 6F
 705+ 84A5 20 56 69 74
 705+ 84A9 74 75 72 69
 705+ 84AD 0D
 706+ 84AE AD 69                        dw      EXIT
 707+ 84B0
 708+ 84B0              //  ______________________________________________________________________
 709+ 84B0              //
 710+ 84B0              // video        --
 711+ 84B0                              Colon_Def VIDEO, "VIDEO", is_normal
 711+ 84B0             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 711+ 84B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 84B0             >
 711+ 84B0             >                // dummy db directives used to calculate length of namec
 711+ 84B0 56 49 44 45 >                db      "VIDEO"
 711+ 84B4 4F          >
 711+ 84B5             >len_NFA         defl    $ - temp_NFA
 711+ 84B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 84B0             >
 711+ 84B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 84B1 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 711+ 84B5 4F          >
 711+ 84B6             >                org     $-1                 // alter last byte of Name just above to set
 711+ 84B5 CF          >                db      {b $} | END_BIT     // msb as name end
 711+ 84B6             >
 711+ 84B6 44 84       >                dw      last_NFA            // Link to previous definition Name
 711+ 84B8             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 84B8 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 711+ 84BA             >                else
 711+ 84BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 84BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 84BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 84BA             >
 711+ 84BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 84BA 1D 6D 12 6B                  dw      TWO, DUP, DEVICE, STORE
 712+ 84BE 3C 7B B2 6B
 713+ 84C2 85 67                        dw      SELECT
 714+ 84C4 AD 69                        dw      EXIT
 715+ 84C6
 716+ 84C6              //  ______________________________________________________________________
 717+ 84C6              //
 718+ 84C6              // accept-      a n1 -- n2
 719+ 84C6                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 719+ 84C6             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 719+ 84C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ 84C6             >
 719+ 84C6             >                // dummy db directives used to calculate length of namec
 719+ 84C6 41 43 43 45 >                db      "ACCEPT-"
 719+ 84CA 50 54 2D    >
 719+ 84CD             >len_NFA         defl    $ - temp_NFA
 719+ 84CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ 84C6             >
 719+ 84C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ 84C7 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 719+ 84CB 50 54 2D    >
 719+ 84CE             >                org     $-1                 // alter last byte of Name just above to set
 719+ 84CD AD          >                db      {b $} | END_BIT     // msb as name end
 719+ 84CE             >
 719+ 84CE B0 84       >                dw      last_NFA            // Link to previous definition Name
 719+ 84D0             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 84D0 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 84D2             >                else
 719+ 84D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 719+ 84D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 84D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 84D2             >
 719+ 84D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 84D2 C0 69                        dw      TO_R
 721+ 84D4 0D 6D                        dw      ZERO
 722+ 84D6 05 6B                        dw      SWAP
 723+ 84D8 12 6B                        dw      DUP
 724+ 84DA D4 69                        dw      R_TO
 725+ 84DC 32 6A                        dw      PLUS
 726+ 84DE 05 6B                        dw      SWAP
 727+ 84E0 86 64                        dw      C_DO
 728+ 84E2              AcceptN_Loop:
 729+ 84E2 76 7B                        dw          MMU7_FETCH
 730+ 84E4 60 67                        dw          INKEY
 731+ 84E6 05 6B 88 7B                  dw          SWAP, MMU7_STORE
 732+ 84EA 12 6B EF 69                  dw          DUP, ZEQUAL
 733+ 84EE 2C 64                        dw          ZBRANCH
 734+ 84F0 06 00                        dw          AcceptN_Endif_1 - $
 735+ 84F2 B8 84 96 78                  dw              VIDEO, QUIT
 736+ 84F6              AcceptN_Endif_1:
 737+ 84F6 12 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 737+ 84FA 0D 00 4D 6F
 738+ 84FE 2C 64                        dw          ZBRANCH
 739+ 8500 06 00                        dw          AcceptN_Endif_2 - $
 740+ 8502 DD 6A 0D 6D                  dw              DROP, ZERO
 741+ 8506              AcceptN_Endif_2:
 742+ 8506 12 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 742+ 850A 0A 00 4D 6F
 743+ 850E 2C 64                        dw          ZBRANCH
 744+ 8510 06 00                        dw          AcceptN_Endif_3 - $
 745+ 8512 DD 6A 0D 6D                  dw              DROP, ZERO
 746+ 8516              AcceptN_Endif_3:
 747+ 8516 90 64 CE 6B                  dw          I, CSTORE, ONE_PLUS
 747+ 851A 53 6A
 748+ 851C
 749+ 851C 90 64 C0 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 749+ 8520 EF 69
 750+ 8522 2C 64                        dw          ZBRANCH
 751+ 8524 06 00                        dw              AcceptN_Endif_4 - $
 752+ 8526 41 64                        dw                  C_LEAVE     //              leave
 753+ 8528 06 00                        dw                  AcceptN_Leave - $
 754+ 852A              AcceptN_Endif_4:                                 //      endif
 755+ 852A
 756+ 852A 04 64                        dw      C_LOOP
 757+ 852C B6 FF                        dw      AcceptN_Loop -$
 758+ 852E              AcceptN_Leave:
 759+ 852E AD 69                        dw      EXIT
 760+ 8530
 761+ 8530              //  ______________________________________________________________________
 762+ 8530              //
 763+ 8530              // load-        n --
 764+ 8530              // Provided that a stream n is OPEN# via the standart BASIC
 765+ 8530              // it accepts text from stream #n to the normal INTERPRET
 766+ 8530              // up to now, text-file must end with QUIT
 767+ 8530                              Colon_Def LOAD_N, "LOAD-", is_normal
 767+ 8530             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 767+ 8530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 8530             >
 767+ 8530             >                // dummy db directives used to calculate length of namec
 767+ 8530 4C 4F 41 44 >                db      "LOAD-"
 767+ 8534 2D          >
 767+ 8535             >len_NFA         defl    $ - temp_NFA
 767+ 8535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 8530             >
 767+ 8530 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 8531 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 767+ 8535 2D          >
 767+ 8536             >                org     $-1                 // alter last byte of Name just above to set
 767+ 8535 AD          >                db      {b $} | END_BIT     // msb as name end
 767+ 8536             >
 767+ 8536 C6 84       >                dw      last_NFA            // Link to previous definition Name
 767+ 8538             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 8538 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 853A             >                else
 767+ 853A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 853A             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 853A             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 853A             >
 767+ 853A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 853A C3 6E B2 6B                  dw      SOURCE_ID, STORE
 769+ 853E              Load_N_Begin:
 770+ 853E A0 6D A5 6B                  dw          TIB, FETCH
 771+ 8542 12 6B A9 63                  dw          DUP, LIT, 80
 771+ 8546 50 00
 772+ 8548 73 6B FE 73                  dw          TWO_DUP, BLANKS
 773+ 854C C3 6E A5 6B                  dw          SOURCE_ID, FETCH
 774+ 8550 B6 79 12 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 774+ 8554 3C 7B B2 6B
 775+ 8558 85 67                        dw          SELECT
 776+ 855A D0 84                        dw          ACCEPT_N
 777+ 855C B8 84                        dw          VIDEO
 778+ 855E 53 6B                        dw          TWO_DROP
 779+ 8560 0D 6D 0C 6E                  dw          ZERO, BLK, STORE
 779+ 8564 B2 6B
 780+ 8566 0D 6D 15 6E                  dw          ZERO, TO_IN, STORE
 780+ 856A B2 6B
 781+ 856C D6 77                        dw          INTERPRET
 782+ 856E 3F 67                        dw          QTERMINAL
 783+ 8570 2C 64                        dw      ZBRANCH
 784+ 8572 CC FF                        dw      Load_N_Begin - $
 785+ 8574 AD 69                        dw      EXIT
 786+ 8576
 787+ 8576              //  ______________________________________________________________________
 788+ 8576              //
 789+ 8576              // load         n --
 790+ 8576              // if n is positive, it loads screen #n (as usual)
 791+ 8576              // if n is negative, it connects stream #n to the normal INTERPRET
 792+ 8576              // this second way is useful if you want to load any kind of file
 793+ 8576              // provied that it is OPEN# the usual BASIC way.
 794+ 8576                              Colon_Def LOAD, "LOAD", is_normal
 794+ 8576             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 794+ 8576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 8576             >
 794+ 8576             >                // dummy db directives used to calculate length of namec
 794+ 8576 4C 4F 41 44 >                db      "LOAD"
 794+ 857A             >len_NFA         defl    $ - temp_NFA
 794+ 857A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 8576             >
 794+ 8576 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 8577 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 794+ 857B             >                org     $-1                 // alter last byte of Name just above to set
 794+ 857A C4          >                db      {b $} | END_BIT     // msb as name end
 794+ 857B             >
 794+ 857B 30 85       >                dw      last_NFA            // Link to previous definition Name
 794+ 857D             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 857D 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 857F             >                else
 794+ 857F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 794+ 857F             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 857F             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 857F             >
 794+ 857F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 857F 12 6B 0A 6A                  dw      DUP, ZLESS
 796+ 8583 2C 64                        dw      ZBRANCH
 797+ 8585 08 00                        dw      Load_Else - $
 798+ 8587 38 85                        dw          LOAD_N
 799+ 8589 15 64                        dw      BRANCH
 800+ 858B 04 00                        dw      Load_Endif - $
 801+ 858D              Load_Else:
 802+ 858D 55 81                        dw          LOAD_P
 803+ 858F              Load_Endif:
 804+ 858F AD 69                        dw      EXIT
 805+ 8591
 806+ 8591
 807+ 8591              //  ______________________________________________________________________
 808+ 8591              //
 809+ 8591              // autoexec     --
 810+ 8591              // this word is called the first time the Forth system boot to
 811+ 8591              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 812+ 8591                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 812+ 8591             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 812+ 8591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ 8591             >
 812+ 8591             >                // dummy db directives used to calculate length of namec
 812+ 8591 41 55 54 4F >                db      "AUTOEXEC"
 812+ 8595 45 58 45 43 >
 812+ 8599             >len_NFA         defl    $ - temp_NFA
 812+ 8599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ 8591             >
 812+ 8591 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ 8592 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 812+ 8596 45 58 45 43 >
 812+ 859A             >                org     $-1                 // alter last byte of Name just above to set
 812+ 8599 C3          >                db      {b $} | END_BIT     // msb as name end
 812+ 859A             >
 812+ 859A 76 85       >                dw      last_NFA            // Link to previous definition Name
 812+ 859C             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 859C 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 859E             >                else
 812+ 859E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 812+ 859E             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 859E             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 859E             >
 812+ 859E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 859E A9 63 0B 00                  dw      LIT, 11
 814+ 85A2 A9 63 B8 6C                  dw      LIT, NOOP
 815+ 85A6 A9 63 E5 78                  dw      LIT, Autoexec_Ptr
 816+ 85AA B2 6B                        dw      STORE
 817+ 85AC 7D 85                        dw      LOAD
 818+ 85AE 96 78                        dw      QUIT
 819+ 85B0 AD 69                        dw      EXIT
 820+ 85B2
 821+ 85B2
 822+ 85B2              //  ______________________________________________________________________
 823+ 85B2              //
 824+ 85B2              // bye     --
 825+ 85B2              //
 826+ 85B2                              Colon_Def BYE, "BYE", is_normal
 826+ 85B2             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 826+ 85B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ 85B2             >
 826+ 85B2             >                // dummy db directives used to calculate length of namec
 826+ 85B2 42 59 45    >                db      "BYE"
 826+ 85B5             >len_NFA         defl    $ - temp_NFA
 826+ 85B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ 85B2             >
 826+ 85B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ 85B3 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 826+ 85B6             >                org     $-1                 // alter last byte of Name just above to set
 826+ 85B5 C5          >                db      {b $} | END_BIT     // msb as name end
 826+ 85B6             >
 826+ 85B6 91 85       >                dw      last_NFA            // Link to previous definition Name
 826+ 85B8             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 85B8 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 85BA             >                else
 826+ 85BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 826+ 85BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 85BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 85BA             >
 826+ 85BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 85BA F3 7D                        dw      FLUSH
 828+ 85BC 26 7D                        dw      EMPTY_BUFFERS
 829+ 85BE CA 7B A5 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 829+ 85C2 CB 67 DD 6A
 830+ 85C6 0D 6D 73 6D                  dw      ZERO, PLUS_ORIGIN
 831+ 85CA 7B 79                        dw      BASIC
 832+ 85CC
 833+ 85CC              //  ______________________________________________________________________
 834+ 85CC              //
 835+ 85CC              // invv     --
 836+ 85CC              //
 837+ 85CC              //              Colon_Def INVV, "INVV", is_normal
 838+ 85CC              //              dw      LIT, 20, EMITC, ONE, EMITC
 839+ 85CC              //              dw      EXIT
 840+ 85CC
 841+ 85CC              //  ______________________________________________________________________
 842+ 85CC              //
 843+ 85CC              // truv     --
 844+ 85CC              //
 845+ 85CC              //              Colon_Def TRUV, "TRUV", is_normal
 846+ 85CC              //              dw      LIT, 20, EMITC, ZERO, EMITC
 847+ 85CC              //              dw      EXIT
 848+ 85CC
 849+ 85CC              //  ______________________________________________________________________
 850+ 85CC              //
 851+ 85CC              // mark     --
 852+ 85CC              //
 853+ 85CC              //              Colon_Def MARK, "MARK", is_normal
 854+ 85CC              //              dw      INVV, TYPE, TRUV
 855+ 85CC              //              dw      EXIT
 856+ 85CC
 857+ 85CC              //  ______________________________________________________________________
 858+ 85CC              //
 859+ 85CC              // back     --
 860+ 85CC              //
 861+ 85CC                              Colon_Def BACK, "BACK", is_normal
 861+ 85CC             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 861+ 85CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 85CC             >
 861+ 85CC             >                // dummy db directives used to calculate length of namec
 861+ 85CC 42 41 43 4B >                db      "BACK"
 861+ 85D0             >len_NFA         defl    $ - temp_NFA
 861+ 85D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 85CC             >
 861+ 85CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 85CD 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 861+ 85D1             >                org     $-1                 // alter last byte of Name just above to set
 861+ 85D0 CB          >                db      {b $} | END_BIT     // msb as name end
 861+ 85D1             >
 861+ 85D1 B2 85       >                dw      last_NFA            // Link to previous definition Name
 861+ 85D3             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 85D3 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 861+ 85D5             >                else
 861+ 85D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 861+ 85D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 85D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 85D5             >
 861+ 85D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 85D5 EC 6E 3F 6F                  dw      HERE, SUBTRACT, COMMA
 862+ 85D9 08 6F
 863+ 85DB AD 69                        dw      EXIT
 864+ 85DD
 865+ 85DD              //  ______________________________________________________________________
 866+ 85DD              //
 867+ 85DD              // if          ( -- a 2 ) \ compile-time
 868+ 85DD              // IF ... THEN
 869+ 85DD              // IF ... ELSE ... ENDIF
 870+ 85DD                              Colon_Def IF, "IF", is_immediate
 870+ 85DD             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 870+ 85DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 85DD             >
 870+ 85DD             >                // dummy db directives used to calculate length of namec
 870+ 85DD 49 46       >                db      "IF"
 870+ 85DF             >len_NFA         defl    $ - temp_NFA
 870+ 85DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 85DD             >
 870+ 85DD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 85DE 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 870+ 85E0             >                org     $-1                 // alter last byte of Name just above to set
 870+ 85DF C6          >                db      {b $} | END_BIT     // msb as name end
 870+ 85E0             >
 870+ 85E0 CC 85       >                dw      last_NFA            // Link to previous definition Name
 870+ 85E2             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 85E2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 85E4             >                else
 870+ 85E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 85E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 85E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 85E4             >
 870+ 85E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 85E4 44 71 2C 64                  dw      COMPILE, ZBRANCH
 872+ 85E8 EC 6E 0D 6D                  dw      HERE, ZERO, COMMA
 872+ 85EC 08 6F
 873+ 85EE 1D 6D                        dw      TWO
 874+ 85F0 AD 69                        dw      EXIT
 875+ 85F2
 876+ 85F2              //  ______________________________________________________________________
 877+ 85F2              //
 878+ 85F2              // then        ( a 2 -- ) \ compile-time
 879+ 85F2              //
 880+ 85F2                              Colon_Def THEN, "THEN", is_immediate
 880+ 85F2             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 880+ 85F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 85F2             >
 880+ 85F2             >                // dummy db directives used to calculate length of namec
 880+ 85F2 54 48 45 4E >                db      "THEN"
 880+ 85F6             >len_NFA         defl    $ - temp_NFA
 880+ 85F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 85F2             >
 880+ 85F2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 85F3 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 880+ 85F7             >                org     $-1                 // alter last byte of Name just above to set
 880+ 85F6 CE          >                db      {b $} | END_BIT     // msb as name end
 880+ 85F7             >
 880+ 85F7 DD 85       >                dw      last_NFA            // Link to previous definition Name
 880+ 85F9             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 85F9 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 85FB             >                else
 880+ 85FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 85FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 85FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 85FB             >
 880+ 85FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 85FB CB 70                        dw      QCOMP
 882+ 85FD 1D 6D FA 70                  dw      TWO, QPAIRS
 883+ 8601 EC 6E CD 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 883+ 8605 3F 6F 05 6B
 883+ 8609 B2 6B
 884+ 860B AD 69                        dw      EXIT
 885+ 860D
 886+ 860D              //  ______________________________________________________________________
 887+ 860D              //
 888+ 860D              // endif       ( a 2 -- ) \ compile-time
 889+ 860D              //
 890+ 860D                              Colon_Def ENDIF, "ENDIF", is_immediate
 890+ 860D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 890+ 860D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 860D             >
 890+ 860D             >                // dummy db directives used to calculate length of namec
 890+ 860D 45 4E 44 49 >                db      "ENDIF"
 890+ 8611 46          >
 890+ 8612             >len_NFA         defl    $ - temp_NFA
 890+ 8612             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 860D             >
 890+ 860D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 860E 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 890+ 8612 46          >
 890+ 8613             >                org     $-1                 // alter last byte of Name just above to set
 890+ 8612 C6          >                db      {b $} | END_BIT     // msb as name end
 890+ 8613             >
 890+ 8613 F2 85       >                dw      last_NFA            // Link to previous definition Name
 890+ 8615             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 8615 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 8617             >                else
 890+ 8617 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 8617             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 8617             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 8617             >
 890+ 8617             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 8617 F9 85                        dw      THEN
 892+ 8619 AD 69                        dw      EXIT
 893+ 861B
 894+ 861B              //  ______________________________________________________________________
 895+ 861B              //
 896+ 861B              // else        ( a1 2 -- a2 2 ) \ compile-time
 897+ 861B              //
 898+ 861B                              Colon_Def ELSE, "ELSE", is_immediate
 898+ 861B             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 898+ 861B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 861B             >
 898+ 861B             >                // dummy db directives used to calculate length of namec
 898+ 861B 45 4C 53 45 >                db      "ELSE"
 898+ 861F             >len_NFA         defl    $ - temp_NFA
 898+ 861F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 861B             >
 898+ 861B C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 861C 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 898+ 8620             >                org     $-1                 // alter last byte of Name just above to set
 898+ 861F C5          >                db      {b $} | END_BIT     // msb as name end
 898+ 8620             >
 898+ 8620 0D 86       >                dw      last_NFA            // Link to previous definition Name
 898+ 8622             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 8622 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 8624             >                else
 898+ 8624 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 8624             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 8624             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 8624             >
 898+ 8624             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 8624 CB 70                        dw      QCOMP
 900+ 8626 1D 6D FA 70                  dw      TWO, QPAIRS
 901+ 862A 44 71 15 64                  dw      COMPILE, BRANCH
 902+ 862E EC 6E 0D 6D                  dw      HERE, ZERO, COMMA
 902+ 8632 08 6F
 903+ 8634 05 6B 1D 6D                  dw      SWAP, TWO, THEN
 903+ 8638 F9 85
 904+ 863A 1D 6D                        dw      TWO
 905+ 863C AD 69                        dw      EXIT
 906+ 863E
 907+ 863E              //  ______________________________________________________________________
 908+ 863E              //
 909+ 863E              // begin        ( -- a 1 ) \ compile-time
 910+ 863E              // BEGIN ... AGAIN
 911+ 863E              // BEGIN ... f UNTIL
 912+ 863E              // BEGIN ... f WHILE ... REPEAT
 913+ 863E                              Colon_Def BEGIN, "BEGIN", is_immediate
 913+ 863E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 913+ 863E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 863E             >
 913+ 863E             >                // dummy db directives used to calculate length of namec
 913+ 863E 42 45 47 49 >                db      "BEGIN"
 913+ 8642 4E          >
 913+ 8643             >len_NFA         defl    $ - temp_NFA
 913+ 8643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 863E             >
 913+ 863E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 863F 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 913+ 8643 4E          >
 913+ 8644             >                org     $-1                 // alter last byte of Name just above to set
 913+ 8643 CE          >                db      {b $} | END_BIT     // msb as name end
 913+ 8644             >
 913+ 8644 1B 86       >                dw      last_NFA            // Link to previous definition Name
 913+ 8646             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 8646 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 8648             >                else
 913+ 8648 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 8648             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 8648             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 8648             >
 913+ 8648             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 8648 CB 70                        dw      QCOMP
 915+ 864A EC 6E                        dw      HERE
 916+ 864C 1D 6D                        dw      TWO
 917+ 864E AD 69                        dw      EXIT
 918+ 8650
 919+ 8650              //  ______________________________________________________________________
 920+ 8650              //
 921+ 8650              // again        ( a 1 -- ) \ compile-time
 922+ 8650                              Colon_Def AGAIN, "AGAIN", is_immediate
 922+ 8650             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 922+ 8650             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 8650             >
 922+ 8650             >                // dummy db directives used to calculate length of namec
 922+ 8650 41 47 41 49 >                db      "AGAIN"
 922+ 8654 4E          >
 922+ 8655             >len_NFA         defl    $ - temp_NFA
 922+ 8655             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 8650             >
 922+ 8650 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 8651 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 922+ 8655 4E          >
 922+ 8656             >                org     $-1                 // alter last byte of Name just above to set
 922+ 8655 CE          >                db      {b $} | END_BIT     // msb as name end
 922+ 8656             >
 922+ 8656 3E 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 8658             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8658 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 865A             >                else
 922+ 865A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 865A             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 865A             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 865A             >
 922+ 865A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 865A CB 70                        dw      QCOMP
 924+ 865C 1D 6D FA 70                  dw      TWO, QPAIRS
 925+ 8660 44 71 15 64                  dw      COMPILE, BRANCH
 926+ 8664 D3 85                        dw      BACK
 927+ 8666 AD 69                        dw      EXIT
 928+ 8668
 929+ 8668              //  ______________________________________________________________________
 930+ 8668              //
 931+ 8668              // until        ( a 1 -- ) \ compile-time
 932+ 8668                              Colon_Def UNTIL, "UNTIL", is_immediate
 932+ 8668             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 932+ 8668             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 8668             >
 932+ 8668             >                // dummy db directives used to calculate length of namec
 932+ 8668 55 4E 54 49 >                db      "UNTIL"
 932+ 866C 4C          >
 932+ 866D             >len_NFA         defl    $ - temp_NFA
 932+ 866D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 8668             >
 932+ 8668 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 8669 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 932+ 866D 4C          >
 932+ 866E             >                org     $-1                 // alter last byte of Name just above to set
 932+ 866D CC          >                db      {b $} | END_BIT     // msb as name end
 932+ 866E             >
 932+ 866E 50 86       >                dw      last_NFA            // Link to previous definition Name
 932+ 8670             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 8670 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 8672             >                else
 932+ 8672 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 932+ 8672             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 8672             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 8672             >
 932+ 8672             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 8672 CB 70                        dw      QCOMP
 934+ 8674 1D 6D FA 70                  dw      TWO, QPAIRS
 935+ 8678 44 71 2C 64                  dw      COMPILE, ZBRANCH
 936+ 867C D3 85                        dw      BACK
 937+ 867E AD 69                        dw      EXIT
 938+ 8680
 939+ 8680              //  ______________________________________________________________________
 940+ 8680              //
 941+ 8680              // end          ( a 1 -- ) \ compile-time
 942+ 8680                              Colon_Def END, "END", is_immediate
 942+ 8680             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 942+ 8680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 8680             >
 942+ 8680             >                // dummy db directives used to calculate length of namec
 942+ 8680 45 4E 44    >                db      "END"
 942+ 8683             >len_NFA         defl    $ - temp_NFA
 942+ 8683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 8680             >
 942+ 8680 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 8681 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 942+ 8684             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8683 C4          >                db      {b $} | END_BIT     // msb as name end
 942+ 8684             >
 942+ 8684 68 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 8686             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8686 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 8688             >                else
 942+ 8688 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 8688             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 8688             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 8688             >
 942+ 8688             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 8688 70 86                        dw      UNTIL
 944+ 868A AD 69                        dw      EXIT
 945+ 868C
 946+ 868C              //  ______________________________________________________________________
 947+ 868C              //
 948+ 868C              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 949+ 868C                              Colon_Def WHILE, "WHILE", is_immediate
 949+ 868C             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 949+ 868C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 868C             >
 949+ 868C             >                // dummy db directives used to calculate length of namec
 949+ 868C 57 48 49 4C >                db      "WHILE"
 949+ 8690 45          >
 949+ 8691             >len_NFA         defl    $ - temp_NFA
 949+ 8691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 868C             >
 949+ 868C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 868D 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 949+ 8691 45          >
 949+ 8692             >                org     $-1                 // alter last byte of Name just above to set
 949+ 8691 C5          >                db      {b $} | END_BIT     // msb as name end
 949+ 8692             >
 949+ 8692 80 86       >                dw      last_NFA            // Link to previous definition Name
 949+ 8694             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 8694 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 8696             >                else
 949+ 8696 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 949+ 8696             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 8696             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 8696             >
 949+ 8696             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 8696 E2 85                        dw      IF
 951+ 8698              //              dw      TWO_PLUS // ( that is 4 )
 952+ 8698 61 6B                        dw      TWO_SWAP
 953+ 869A AD 69                        dw      EXIT
 954+ 869C
 955+ 869C              //  ______________________________________________________________________
 956+ 869C              //
 957+ 869C              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 958+ 869C                              Colon_Def REPEAT, "REPEAT", is_immediate
 958+ 869C             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 958+ 869C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 869C             >
 958+ 869C             >                // dummy db directives used to calculate length of namec
 958+ 869C 52 45 50 45 >                db      "REPEAT"
 958+ 86A0 41 54       >
 958+ 86A2             >len_NFA         defl    $ - temp_NFA
 958+ 86A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 869C             >
 958+ 869C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 869D 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 958+ 86A1 41 54       >
 958+ 86A3             >                org     $-1                 // alter last byte of Name just above to set
 958+ 86A2 D4          >                db      {b $} | END_BIT     // msb as name end
 958+ 86A3             >
 958+ 86A3 8C 86       >                dw      last_NFA            // Link to previous definition Name
 958+ 86A5             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 86A5 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 86A7             >                else
 958+ 86A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 86A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 86A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 86A7             >
 958+ 86A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 86A7 58 86                        dw      AGAIN
 960+ 86A9              //              dw      TWO_MINUS
 961+ 86A9 F9 85                        dw      THEN
 962+ 86AB AD 69                        dw      EXIT
 963+ 86AD
 964+ 86AD              //  ______________________________________________________________________
 965+ 86AD              //
 966+ 86AD              // ?do-
 967+ 86AD              // special version of "BACK" used by ?DO and LOOP
 968+ 86AD                              Colon_Def C_DO_BACK, "?DO-", is_normal
 968+ 86AD             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 968+ 86AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ 86AD             >
 968+ 86AD             >                // dummy db directives used to calculate length of namec
 968+ 86AD 3F 44 4F 2D >                db      "?DO-"
 968+ 86B1             >len_NFA         defl    $ - temp_NFA
 968+ 86B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ 86AD             >
 968+ 86AD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ 86AE 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 968+ 86B2             >                org     $-1                 // alter last byte of Name just above to set
 968+ 86B1 AD          >                db      {b $} | END_BIT     // msb as name end
 968+ 86B2             >
 968+ 86B2 9C 86       >                dw      last_NFA            // Link to previous definition Name
 968+ 86B4             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 86B4 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 86B6             >                else
 968+ 86B6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 968+ 86B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 86B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 86B6             >
 968+ 86B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 86B6 D3 85                        dw      BACK
 970+ 86B8              CDoBack_Begin:
 971+ 86B8 75 69 7D 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 971+ 86BC A5 6B 3F 6F
 972+ 86C0 2C 64                        dw      ZBRANCH
 973+ 86C2 0A 00                        dw      CDoBack_While - $
 974+ 86C4 6B 6A F9 85                  dw          TWO_PLUS, THEN
 975+ 86C8 15 64                        dw      BRANCH
 976+ 86CA EE FF                        dw      CDoBack_Begin - $
 977+ 86CC              CDoBack_While:
 978+ 86CC 0D 71 7D 6E                  dw      QCSP, CSP, STORE
 978+ 86D0 B2 6B
 979+ 86D2 AD 69                        dw      EXIT
 980+ 86D4
 981+ 86D4              //  ______________________________________________________________________
 982+ 86D4              //
 983+ 86D4              // do
 984+ 86D4              // DO  ... LOOP
 985+ 86D4              // DO  ... n +LOOP
 986+ 86D4              // ?DO ... LOOP
 987+ 86D4              // ?DO ... n +LOOP
 988+ 86D4                              Colon_Def DO, "DO", is_immediate
 988+ 86D4             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 988+ 86D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 86D4             >
 988+ 86D4             >                // dummy db directives used to calculate length of namec
 988+ 86D4 44 4F       >                db      "DO"
 988+ 86D6             >len_NFA         defl    $ - temp_NFA
 988+ 86D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 86D4             >
 988+ 86D4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 86D5 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 988+ 86D7             >                org     $-1                 // alter last byte of Name just above to set
 988+ 86D6 CF          >                db      {b $} | END_BIT     // msb as name end
 988+ 86D7             >
 988+ 86D7 AD 86       >                dw      last_NFA            // Link to previous definition Name
 988+ 86D9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 86D9 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 86DB             >                else
 988+ 86DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 86DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 86DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 86DB             >
 988+ 86DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 86DB 44 71 86 64                  dw      COMPILE, C_DO
 990+ 86DF 7D 6E A5 6B                  dw      CSP, FETCH, STORE_CSP
 990+ 86E3 9E 70
 991+ 86E5 EC 6E 25 6D                  dw      HERE, THREE
 992+ 86E9 AD 69                        dw      EXIT
 993+ 86EB
 994+ 86EB              //  ______________________________________________________________________
 995+ 86EB              //
 996+ 86EB              // loop
 997+ 86EB                              Colon_Def LOOP, "LOOP", is_immediate
 997+ 86EB             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 997+ 86EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 86EB             >
 997+ 86EB             >                // dummy db directives used to calculate length of namec
 997+ 86EB 4C 4F 4F 50 >                db      "LOOP"
 997+ 86EF             >len_NFA         defl    $ - temp_NFA
 997+ 86EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 86EB             >
 997+ 86EB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 86EC 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 997+ 86F0             >                org     $-1                 // alter last byte of Name just above to set
 997+ 86EF D0          >                db      {b $} | END_BIT     // msb as name end
 997+ 86F0             >
 997+ 86F0 D4 86       >                dw      last_NFA            // Link to previous definition Name
 997+ 86F2             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 86F2 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 86F4             >                else
 997+ 86F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 86F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 86F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 86F4             >
 997+ 86F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 86F4 25 6D FA 70                  dw      THREE, QPAIRS
 999+ 86F8 44 71 04 64                  dw      COMPILE, C_LOOP
1000+ 86FC B4 86                        dw      C_DO_BACK
1001+ 86FE AD 69                        dw      EXIT
1002+ 8700
1003+ 8700              //  ______________________________________________________________________
1004+ 8700              //
1005+ 8700              // +loop
1006+ 8700                              Colon_Def PLOOP, "+LOOP", is_immediate
1006+ 8700             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1006+ 8700             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 8700             >
1006+ 8700             >                // dummy db directives used to calculate length of namec
1006+ 8700 2B 4C 4F 4F >                db      "+LOOP"
1006+ 8704 50          >
1006+ 8705             >len_NFA         defl    $ - temp_NFA
1006+ 8705             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 8700             >
1006+ 8700 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 8701 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1006+ 8705 50          >
1006+ 8706             >                org     $-1                 // alter last byte of Name just above to set
1006+ 8705 D0          >                db      {b $} | END_BIT     // msb as name end
1006+ 8706             >
1006+ 8706 EB 86       >                dw      last_NFA            // Link to previous definition Name
1006+ 8708             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 8708 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 870A             >                else
1006+ 870A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1006+ 870A             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 870A             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 870A             >
1006+ 870A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 870A 25 6D FA 70                  dw      THREE, QPAIRS
1008+ 870E 44 71 CD 63                  dw      COMPILE, C_PLOOP
1009+ 8712 B4 86                        dw      C_DO_BACK
1010+ 8714 AD 69                        dw      EXIT
1011+ 8716
1012+ 8716              //  ______________________________________________________________________
1013+ 8716              //
1014+ 8716              // ?do
1015+ 8716                              Colon_Def QDO, "?DO", is_immediate
1015+ 8716             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1015+ 8716             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ 8716             >
1015+ 8716             >                // dummy db directives used to calculate length of namec
1015+ 8716 3F 44 4F    >                db      "?DO"
1015+ 8719             >len_NFA         defl    $ - temp_NFA
1015+ 8719             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ 8716             >
1015+ 8716 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ 8717 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1015+ 871A             >                org     $-1                 // alter last byte of Name just above to set
1015+ 8719 CF          >                db      {b $} | END_BIT     // msb as name end
1015+ 871A             >
1015+ 871A 00 87       >                dw      last_NFA            // Link to previous definition Name
1015+ 871C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 871C 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 871E             >                else
1015+ 871E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1015+ 871E             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 871E             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 871E             >
1015+ 871E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 871E 44 71 59 64                  dw      COMPILE, C_Q_DO
1017+ 8722 7D 6E A5 6B                  dw      CSP, FETCH, STORE_CSP
1017+ 8726 9E 70
1018+ 8728 EC 6E 0D 6D                  dw      HERE, ZERO, COMMA, ZERO
1018+ 872C 08 6F 0D 6D
1019+ 8730 EC 6E 25 6D                  dw      HERE, THREE
1020+ 8734 AD 69                        dw      EXIT
1021+ 8736
1022+ 8736              Latest_Definition:
1023+ 8736              //  ______________________________________________________________________
1024+ 8736              //
1025+ 8736              // \
1026+ 8736                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1026+ 8736             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1026+ 8736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 8736             >
1026+ 8736             >                // dummy db directives used to calculate length of namec
1026+ 8736 5C          >                db      "\\"
1026+ 8737             >len_NFA         defl    $ - temp_NFA
1026+ 8737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 8736             >
1026+ 8736 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 8737 5C          >                db      "\\"               // name string in 7-bit ascii, but
1026+ 8738             >                org     $-1                 // alter last byte of Name just above to set
1026+ 8737 DC          >                db      {b $} | END_BIT     // msb as name end
1026+ 8738             >
1026+ 8738 16 87       >                dw      last_NFA            // Link to previous definition Name
1026+ 873A             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 873A 90 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 873C             >                else
1026+ 873C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 873C             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 873C             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 873C             >
1026+ 873C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 873C 0C 6E A5 6B                  dw      BLK, FETCH
1028+ 8740 2C 64                        dw      ZBRANCH
1029+ 8742 30 00                        dw      Backslash_Else_1 - $
1030+ 8744 0C 6E A5 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1030+ 8748 15 6D 85 6F
1031+ 874C 2C 64                        dw          ZBRANCH
1032+ 874E 18 00                        dw          Backslash_Else_2 - $
1033+ 8750 15 6E A5 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1033+ 8754 41 6D 9C 7A
1033+ 8758 41 6D
1034+ 875A 05 6B 3F 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1034+ 875E 15 6E 82 6B
1035+ 8762 15 64                        dw          BRANCH
1036+ 8764 0A 00                        dw          Backslash_Endif_2 - $
1037+ 8766              Backslash_Else_2:
1038+ 8766 4D 6D 85 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1038+ 876A 15 6E B2 6B
1039+ 876E              Backslash_Endif_2:
1040+ 876E 15 64                        dw      BRANCH
1041+ 8770 0A 00                        dw      Backslash_Endif_1 - $
1042+ 8772              Backslash_Else_1:
1043+ 8772 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1043+ 8776 15 6E B2 6B
1044+ 877A              Backslash_Endif_1:
1045+ 877A AD 69                        dw      EXIT
1046+ 877C
1047+ 877C              Fence_Word:
1048+ 877C              //  ______________________________________________________________________
1049+ 877C              //
1050+ 877C
1051+ 877C 00           Here_Dictionary db      0
1052+ 877D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  877D
 115  877D              // now we save the compiled file so we can either run it or debug it
 116  877D                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  877D                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  877D                              SAVENEX CFG  0
 119  877D                              SAVENEX BANK 2, 0
 120  877D                              SAVENEX AUTO
 121  877D                              SAVENEX CLOSE
 122  877D
 123  877D              //              PAGE 7 ;set 7 page to current slot
 124  877D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  877D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  877D
 127  877D                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  877D
 129  877D                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  877D
 131  877D                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
